// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imsession.proto

package imsession

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImsessionClient is the client API for Imsession service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImsessionClient interface {
	// ！！！清除keyId的操作
	ClearKeyIdSession(ctx context.Context, in *ClearKeyIdSessionReq, opts ...grpc.CallOption) (*ClearKeyIdSessionResp, error)
	// 1初始化连接添加session
	SessionInitConnection(ctx context.Context, in *SessionInitConnectionReq, opts ...grpc.CallOption) (*SessionInitConnectionResult, error)
	// 2注册设备信息
	SessionUpdateRegisterDevice(ctx context.Context, in *SessionUpdateRegisterDeviceReq, opts ...grpc.CallOption) (*SessionUpdateRegisterDeviceResult, error)
	// 2注册设备信息
	SessionUpdateRegisterHuaweiDevice(ctx context.Context, in *SessionUpdateRegisterHuaweiDeviceReq, opts ...grpc.CallOption) (*SessionUpdateRegisterHuaweiDeviceResult, error)
	// 3更新手机号码
	SessionUpdateUserPhone(ctx context.Context, in *SessionUpdateUserPhoneReq, opts ...grpc.CallOption) (*SessionUpdateUserPhoneResult, error)
	// 4logout 调用
	SessionUpdateLogout(ctx context.Context, in *SessionUpdateLogoutReq, opts ...grpc.CallOption) (*SessionUpdateLogoutResult, error)
	// 5客户端握手完成时保存auth key
	SessionUpdateOnHandshakeDone(ctx context.Context, in *SessionUpdateOnHandshakeDoneReq, opts ...grpc.CallOption) (*SessionUpdateOnHandshakeDoneResult, error)
	// 6剔除单个
	SessionTerminateByKeyId(ctx context.Context, in *SessionTerminateByKeyIdReq, opts ...grpc.CallOption) (*SessionTerminateByKeyIdResult, error)
	// 7剔除多个
	SessionTerminateExceptKeyId(ctx context.Context, in *SessionTerminateExceptKeyIdReq, opts ...grpc.CallOption) (*SessionTerminateExceptKeyIdResult, error)
	// 8根据keyid删除session
	SessionDeleteByKeyId(ctx context.Context, in *SessionDeleteByKeyIdReq, opts ...grpc.CallOption) (*SessionDeleteByKeyIdResult, error)
	// 9更新qts
	SessionIncQts(ctx context.Context, in *SessionIncQtsReq, opts ...grpc.CallOption) (*SessionIncQtsResult, error)
	// 10根据keyId查询session
	SessionQueryByKeyId(ctx context.Context, in *SessionQueryByKeyIdReq, opts ...grpc.CallOption) (*SessionQueryByKeyIdResult, error)
	// 11根据UserId查询session
	SessionQueryByUserId(ctx context.Context, in *SessionQueryByUserIdReq, opts ...grpc.CallOption) (*SessionQueryByUserIdResult, error)
	// 12根据KeyId查询session 的  BasicInfo
	SessionQueryBasicInfoByKeyId(ctx context.Context, in *SessionQueryBasicInfoByKeyIdReq, opts ...grpc.CallOption) (*SessionQueryBasicInfoByKeyIdResult, error)
	// 13根据KeyId查询session描述信息
	SessionQueryDesByKeyId(ctx context.Context, in *SessionQueryDesByKeyIdReq, opts ...grpc.CallOption) (*SessionQueryDesByKeyIdResult, error)
	// 14根据userId删除auth keys
	SessionDeleteAuthKeysByUserId(ctx context.Context, in *SessionDeleteAuthKeysByUserIdReq, opts ...grpc.CallOption) (*SessionDeleteAuthKeysByUserIdResult, error)
	// 15更新ping
	SessionUpdatePing(ctx context.Context, in *SessionUpdatePingReq, opts ...grpc.CallOption) (*SessionUpdatePingResult, error)
	// 15更新ping
	SessionUpdatePing2(ctx context.Context, in *SessionUpdatePingReq2, opts ...grpc.CallOption) (*SessionUpdatePingResult, error)
	// 16更新登陆
	SessionUpdateSignIn(ctx context.Context, in *SessionUpdateSignInReq, opts ...grpc.CallOption) (*SessionUpdateSignInResult, error)
	// 17根据keyId获取apiID
	SessionQueryApiIDbyKeyId(ctx context.Context, in *SessionQueryApiIDbyKeyIdReq, opts ...grpc.CallOption) (*SessionQueryApiIDbyKeyIdResult, error)
	// 18根据keyId查找userId
	SessionQueryUserIdByKeyId(ctx context.Context, in *SessionQueryUserIdByKeyIdReq, opts ...grpc.CallOption) (*SessionQueryUserIdByKeyIdResult, error)
	// 19客户端连接断开
	SessionDisconnect(ctx context.Context, in *SessionDisconnectReq, opts ...grpc.CallOption) (*SessionDisconnectResult, error)
	// 20BanDevice:根据uniqueNumber设置禁止登陆的设备
	AddBanDevice(ctx context.Context, in *AddBanDeviceReq, opts ...grpc.CallOption) (*AddBanDeviceResult, error)
	// 21BanDevice:根据uniqueNumber查询是否是禁止登陆的设备:true是false不是
	CheckBanDevice(ctx context.Context, in *CheckBanDeviceReq, opts ...grpc.CallOption) (*CheckBanDeviceResult, error)
	// 22get unique number by key id
	GetUniqueNumberByKeyId(ctx context.Context, in *GetUniqueNumberByKeyIdReq, opts ...grpc.CallOption) (*GetUniqueNumberByKeyIdResult, error)
	// 23设置langcode
	SetLangCode(ctx context.Context, in *SetLangCodeReq, opts ...grpc.CallOption) (*SetLangCodeResult, error)
	// 24获取langCode
	GetLangCode(ctx context.Context, in *GetLangCodeReq, opts ...grpc.CallOption) (*GetLangCodeResult, error)
	// 25根据keyId获取创建时间
	GetCreatedByKeyId(ctx context.Context, in *GetCreatedByKeyIdReq, opts ...grpc.CallOption) (*GetCreatedByKeyIdResult, error)
	// 26更新app完整校验字段
	UpdateSelfAppHash(ctx context.Context, in *UpdateSelfAppHashReq, opts ...grpc.CallOption) (*UpdateSelfAppHashResult, error)
}

type imsessionClient struct {
	cc grpc.ClientConnInterface
}

func NewImsessionClient(cc grpc.ClientConnInterface) ImsessionClient {
	return &imsessionClient{cc}
}

func (c *imsessionClient) ClearKeyIdSession(ctx context.Context, in *ClearKeyIdSessionReq, opts ...grpc.CallOption) (*ClearKeyIdSessionResp, error) {
	out := new(ClearKeyIdSessionResp)
	err := c.cc.Invoke(ctx, "/imsession.imsession/ClearKeyIdSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionInitConnection(ctx context.Context, in *SessionInitConnectionReq, opts ...grpc.CallOption) (*SessionInitConnectionResult, error) {
	out := new(SessionInitConnectionResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionInitConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionUpdateRegisterDevice(ctx context.Context, in *SessionUpdateRegisterDeviceReq, opts ...grpc.CallOption) (*SessionUpdateRegisterDeviceResult, error) {
	out := new(SessionUpdateRegisterDeviceResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionUpdateRegisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionUpdateRegisterHuaweiDevice(ctx context.Context, in *SessionUpdateRegisterHuaweiDeviceReq, opts ...grpc.CallOption) (*SessionUpdateRegisterHuaweiDeviceResult, error) {
	out := new(SessionUpdateRegisterHuaweiDeviceResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionUpdateRegisterHuaweiDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionUpdateUserPhone(ctx context.Context, in *SessionUpdateUserPhoneReq, opts ...grpc.CallOption) (*SessionUpdateUserPhoneResult, error) {
	out := new(SessionUpdateUserPhoneResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionUpdateUserPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionUpdateLogout(ctx context.Context, in *SessionUpdateLogoutReq, opts ...grpc.CallOption) (*SessionUpdateLogoutResult, error) {
	out := new(SessionUpdateLogoutResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionUpdateLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionUpdateOnHandshakeDone(ctx context.Context, in *SessionUpdateOnHandshakeDoneReq, opts ...grpc.CallOption) (*SessionUpdateOnHandshakeDoneResult, error) {
	out := new(SessionUpdateOnHandshakeDoneResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionUpdateOnHandshakeDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionTerminateByKeyId(ctx context.Context, in *SessionTerminateByKeyIdReq, opts ...grpc.CallOption) (*SessionTerminateByKeyIdResult, error) {
	out := new(SessionTerminateByKeyIdResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionTerminateByKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionTerminateExceptKeyId(ctx context.Context, in *SessionTerminateExceptKeyIdReq, opts ...grpc.CallOption) (*SessionTerminateExceptKeyIdResult, error) {
	out := new(SessionTerminateExceptKeyIdResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionTerminateExceptKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionDeleteByKeyId(ctx context.Context, in *SessionDeleteByKeyIdReq, opts ...grpc.CallOption) (*SessionDeleteByKeyIdResult, error) {
	out := new(SessionDeleteByKeyIdResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionDeleteByKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionIncQts(ctx context.Context, in *SessionIncQtsReq, opts ...grpc.CallOption) (*SessionIncQtsResult, error) {
	out := new(SessionIncQtsResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionIncQts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionQueryByKeyId(ctx context.Context, in *SessionQueryByKeyIdReq, opts ...grpc.CallOption) (*SessionQueryByKeyIdResult, error) {
	out := new(SessionQueryByKeyIdResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionQueryByKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionQueryByUserId(ctx context.Context, in *SessionQueryByUserIdReq, opts ...grpc.CallOption) (*SessionQueryByUserIdResult, error) {
	out := new(SessionQueryByUserIdResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionQueryByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionQueryBasicInfoByKeyId(ctx context.Context, in *SessionQueryBasicInfoByKeyIdReq, opts ...grpc.CallOption) (*SessionQueryBasicInfoByKeyIdResult, error) {
	out := new(SessionQueryBasicInfoByKeyIdResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionQueryBasicInfoByKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionQueryDesByKeyId(ctx context.Context, in *SessionQueryDesByKeyIdReq, opts ...grpc.CallOption) (*SessionQueryDesByKeyIdResult, error) {
	out := new(SessionQueryDesByKeyIdResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionQueryDesByKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionDeleteAuthKeysByUserId(ctx context.Context, in *SessionDeleteAuthKeysByUserIdReq, opts ...grpc.CallOption) (*SessionDeleteAuthKeysByUserIdResult, error) {
	out := new(SessionDeleteAuthKeysByUserIdResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionDeleteAuthKeysByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionUpdatePing(ctx context.Context, in *SessionUpdatePingReq, opts ...grpc.CallOption) (*SessionUpdatePingResult, error) {
	out := new(SessionUpdatePingResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionUpdatePing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionUpdatePing2(ctx context.Context, in *SessionUpdatePingReq2, opts ...grpc.CallOption) (*SessionUpdatePingResult, error) {
	out := new(SessionUpdatePingResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionUpdatePing2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionUpdateSignIn(ctx context.Context, in *SessionUpdateSignInReq, opts ...grpc.CallOption) (*SessionUpdateSignInResult, error) {
	out := new(SessionUpdateSignInResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionUpdateSignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionQueryApiIDbyKeyId(ctx context.Context, in *SessionQueryApiIDbyKeyIdReq, opts ...grpc.CallOption) (*SessionQueryApiIDbyKeyIdResult, error) {
	out := new(SessionQueryApiIDbyKeyIdResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionQueryApiIDbyKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionQueryUserIdByKeyId(ctx context.Context, in *SessionQueryUserIdByKeyIdReq, opts ...grpc.CallOption) (*SessionQueryUserIdByKeyIdResult, error) {
	out := new(SessionQueryUserIdByKeyIdResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionQueryUserIdByKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SessionDisconnect(ctx context.Context, in *SessionDisconnectReq, opts ...grpc.CallOption) (*SessionDisconnectResult, error) {
	out := new(SessionDisconnectResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SessionDisconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) AddBanDevice(ctx context.Context, in *AddBanDeviceReq, opts ...grpc.CallOption) (*AddBanDeviceResult, error) {
	out := new(AddBanDeviceResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/AddBanDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) CheckBanDevice(ctx context.Context, in *CheckBanDeviceReq, opts ...grpc.CallOption) (*CheckBanDeviceResult, error) {
	out := new(CheckBanDeviceResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/CheckBanDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) GetUniqueNumberByKeyId(ctx context.Context, in *GetUniqueNumberByKeyIdReq, opts ...grpc.CallOption) (*GetUniqueNumberByKeyIdResult, error) {
	out := new(GetUniqueNumberByKeyIdResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/GetUniqueNumberByKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) SetLangCode(ctx context.Context, in *SetLangCodeReq, opts ...grpc.CallOption) (*SetLangCodeResult, error) {
	out := new(SetLangCodeResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/SetLangCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) GetLangCode(ctx context.Context, in *GetLangCodeReq, opts ...grpc.CallOption) (*GetLangCodeResult, error) {
	out := new(GetLangCodeResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/GetLangCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) GetCreatedByKeyId(ctx context.Context, in *GetCreatedByKeyIdReq, opts ...grpc.CallOption) (*GetCreatedByKeyIdResult, error) {
	out := new(GetCreatedByKeyIdResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/GetCreatedByKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imsessionClient) UpdateSelfAppHash(ctx context.Context, in *UpdateSelfAppHashReq, opts ...grpc.CallOption) (*UpdateSelfAppHashResult, error) {
	out := new(UpdateSelfAppHashResult)
	err := c.cc.Invoke(ctx, "/imsession.imsession/UpdateSelfAppHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImsessionServer is the server API for Imsession service.
// All implementations must embed UnimplementedImsessionServer
// for forward compatibility
type ImsessionServer interface {
	// ！！！清除keyId的操作
	ClearKeyIdSession(context.Context, *ClearKeyIdSessionReq) (*ClearKeyIdSessionResp, error)
	// 1初始化连接添加session
	SessionInitConnection(context.Context, *SessionInitConnectionReq) (*SessionInitConnectionResult, error)
	// 2注册设备信息
	SessionUpdateRegisterDevice(context.Context, *SessionUpdateRegisterDeviceReq) (*SessionUpdateRegisterDeviceResult, error)
	// 2注册设备信息
	SessionUpdateRegisterHuaweiDevice(context.Context, *SessionUpdateRegisterHuaweiDeviceReq) (*SessionUpdateRegisterHuaweiDeviceResult, error)
	// 3更新手机号码
	SessionUpdateUserPhone(context.Context, *SessionUpdateUserPhoneReq) (*SessionUpdateUserPhoneResult, error)
	// 4logout 调用
	SessionUpdateLogout(context.Context, *SessionUpdateLogoutReq) (*SessionUpdateLogoutResult, error)
	// 5客户端握手完成时保存auth key
	SessionUpdateOnHandshakeDone(context.Context, *SessionUpdateOnHandshakeDoneReq) (*SessionUpdateOnHandshakeDoneResult, error)
	// 6剔除单个
	SessionTerminateByKeyId(context.Context, *SessionTerminateByKeyIdReq) (*SessionTerminateByKeyIdResult, error)
	// 7剔除多个
	SessionTerminateExceptKeyId(context.Context, *SessionTerminateExceptKeyIdReq) (*SessionTerminateExceptKeyIdResult, error)
	// 8根据keyid删除session
	SessionDeleteByKeyId(context.Context, *SessionDeleteByKeyIdReq) (*SessionDeleteByKeyIdResult, error)
	// 9更新qts
	SessionIncQts(context.Context, *SessionIncQtsReq) (*SessionIncQtsResult, error)
	// 10根据keyId查询session
	SessionQueryByKeyId(context.Context, *SessionQueryByKeyIdReq) (*SessionQueryByKeyIdResult, error)
	// 11根据UserId查询session
	SessionQueryByUserId(context.Context, *SessionQueryByUserIdReq) (*SessionQueryByUserIdResult, error)
	// 12根据KeyId查询session 的  BasicInfo
	SessionQueryBasicInfoByKeyId(context.Context, *SessionQueryBasicInfoByKeyIdReq) (*SessionQueryBasicInfoByKeyIdResult, error)
	// 13根据KeyId查询session描述信息
	SessionQueryDesByKeyId(context.Context, *SessionQueryDesByKeyIdReq) (*SessionQueryDesByKeyIdResult, error)
	// 14根据userId删除auth keys
	SessionDeleteAuthKeysByUserId(context.Context, *SessionDeleteAuthKeysByUserIdReq) (*SessionDeleteAuthKeysByUserIdResult, error)
	// 15更新ping
	SessionUpdatePing(context.Context, *SessionUpdatePingReq) (*SessionUpdatePingResult, error)
	// 15更新ping
	SessionUpdatePing2(context.Context, *SessionUpdatePingReq2) (*SessionUpdatePingResult, error)
	// 16更新登陆
	SessionUpdateSignIn(context.Context, *SessionUpdateSignInReq) (*SessionUpdateSignInResult, error)
	// 17根据keyId获取apiID
	SessionQueryApiIDbyKeyId(context.Context, *SessionQueryApiIDbyKeyIdReq) (*SessionQueryApiIDbyKeyIdResult, error)
	// 18根据keyId查找userId
	SessionQueryUserIdByKeyId(context.Context, *SessionQueryUserIdByKeyIdReq) (*SessionQueryUserIdByKeyIdResult, error)
	// 19客户端连接断开
	SessionDisconnect(context.Context, *SessionDisconnectReq) (*SessionDisconnectResult, error)
	// 20BanDevice:根据uniqueNumber设置禁止登陆的设备
	AddBanDevice(context.Context, *AddBanDeviceReq) (*AddBanDeviceResult, error)
	// 21BanDevice:根据uniqueNumber查询是否是禁止登陆的设备:true是false不是
	CheckBanDevice(context.Context, *CheckBanDeviceReq) (*CheckBanDeviceResult, error)
	// 22get unique number by key id
	GetUniqueNumberByKeyId(context.Context, *GetUniqueNumberByKeyIdReq) (*GetUniqueNumberByKeyIdResult, error)
	// 23设置langcode
	SetLangCode(context.Context, *SetLangCodeReq) (*SetLangCodeResult, error)
	// 24获取langCode
	GetLangCode(context.Context, *GetLangCodeReq) (*GetLangCodeResult, error)
	// 25根据keyId获取创建时间
	GetCreatedByKeyId(context.Context, *GetCreatedByKeyIdReq) (*GetCreatedByKeyIdResult, error)
	// 26更新app完整校验字段
	UpdateSelfAppHash(context.Context, *UpdateSelfAppHashReq) (*UpdateSelfAppHashResult, error)
	mustEmbedUnimplementedImsessionServer()
}

// UnimplementedImsessionServer must be embedded to have forward compatible implementations.
type UnimplementedImsessionServer struct {
}

func (UnimplementedImsessionServer) ClearKeyIdSession(context.Context, *ClearKeyIdSessionReq) (*ClearKeyIdSessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearKeyIdSession not implemented")
}
func (UnimplementedImsessionServer) SessionInitConnection(context.Context, *SessionInitConnectionReq) (*SessionInitConnectionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionInitConnection not implemented")
}
func (UnimplementedImsessionServer) SessionUpdateRegisterDevice(context.Context, *SessionUpdateRegisterDeviceReq) (*SessionUpdateRegisterDeviceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdateRegisterDevice not implemented")
}
func (UnimplementedImsessionServer) SessionUpdateRegisterHuaweiDevice(context.Context, *SessionUpdateRegisterHuaweiDeviceReq) (*SessionUpdateRegisterHuaweiDeviceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdateRegisterHuaweiDevice not implemented")
}
func (UnimplementedImsessionServer) SessionUpdateUserPhone(context.Context, *SessionUpdateUserPhoneReq) (*SessionUpdateUserPhoneResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdateUserPhone not implemented")
}
func (UnimplementedImsessionServer) SessionUpdateLogout(context.Context, *SessionUpdateLogoutReq) (*SessionUpdateLogoutResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdateLogout not implemented")
}
func (UnimplementedImsessionServer) SessionUpdateOnHandshakeDone(context.Context, *SessionUpdateOnHandshakeDoneReq) (*SessionUpdateOnHandshakeDoneResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdateOnHandshakeDone not implemented")
}
func (UnimplementedImsessionServer) SessionTerminateByKeyId(context.Context, *SessionTerminateByKeyIdReq) (*SessionTerminateByKeyIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionTerminateByKeyId not implemented")
}
func (UnimplementedImsessionServer) SessionTerminateExceptKeyId(context.Context, *SessionTerminateExceptKeyIdReq) (*SessionTerminateExceptKeyIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionTerminateExceptKeyId not implemented")
}
func (UnimplementedImsessionServer) SessionDeleteByKeyId(context.Context, *SessionDeleteByKeyIdReq) (*SessionDeleteByKeyIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionDeleteByKeyId not implemented")
}
func (UnimplementedImsessionServer) SessionIncQts(context.Context, *SessionIncQtsReq) (*SessionIncQtsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionIncQts not implemented")
}
func (UnimplementedImsessionServer) SessionQueryByKeyId(context.Context, *SessionQueryByKeyIdReq) (*SessionQueryByKeyIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionQueryByKeyId not implemented")
}
func (UnimplementedImsessionServer) SessionQueryByUserId(context.Context, *SessionQueryByUserIdReq) (*SessionQueryByUserIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionQueryByUserId not implemented")
}
func (UnimplementedImsessionServer) SessionQueryBasicInfoByKeyId(context.Context, *SessionQueryBasicInfoByKeyIdReq) (*SessionQueryBasicInfoByKeyIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionQueryBasicInfoByKeyId not implemented")
}
func (UnimplementedImsessionServer) SessionQueryDesByKeyId(context.Context, *SessionQueryDesByKeyIdReq) (*SessionQueryDesByKeyIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionQueryDesByKeyId not implemented")
}
func (UnimplementedImsessionServer) SessionDeleteAuthKeysByUserId(context.Context, *SessionDeleteAuthKeysByUserIdReq) (*SessionDeleteAuthKeysByUserIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionDeleteAuthKeysByUserId not implemented")
}
func (UnimplementedImsessionServer) SessionUpdatePing(context.Context, *SessionUpdatePingReq) (*SessionUpdatePingResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdatePing not implemented")
}
func (UnimplementedImsessionServer) SessionUpdatePing2(context.Context, *SessionUpdatePingReq2) (*SessionUpdatePingResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdatePing2 not implemented")
}
func (UnimplementedImsessionServer) SessionUpdateSignIn(context.Context, *SessionUpdateSignInReq) (*SessionUpdateSignInResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdateSignIn not implemented")
}
func (UnimplementedImsessionServer) SessionQueryApiIDbyKeyId(context.Context, *SessionQueryApiIDbyKeyIdReq) (*SessionQueryApiIDbyKeyIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionQueryApiIDbyKeyId not implemented")
}
func (UnimplementedImsessionServer) SessionQueryUserIdByKeyId(context.Context, *SessionQueryUserIdByKeyIdReq) (*SessionQueryUserIdByKeyIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionQueryUserIdByKeyId not implemented")
}
func (UnimplementedImsessionServer) SessionDisconnect(context.Context, *SessionDisconnectReq) (*SessionDisconnectResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionDisconnect not implemented")
}
func (UnimplementedImsessionServer) AddBanDevice(context.Context, *AddBanDeviceReq) (*AddBanDeviceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanDevice not implemented")
}
func (UnimplementedImsessionServer) CheckBanDevice(context.Context, *CheckBanDeviceReq) (*CheckBanDeviceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBanDevice not implemented")
}
func (UnimplementedImsessionServer) GetUniqueNumberByKeyId(context.Context, *GetUniqueNumberByKeyIdReq) (*GetUniqueNumberByKeyIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniqueNumberByKeyId not implemented")
}
func (UnimplementedImsessionServer) SetLangCode(context.Context, *SetLangCodeReq) (*SetLangCodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLangCode not implemented")
}
func (UnimplementedImsessionServer) GetLangCode(context.Context, *GetLangCodeReq) (*GetLangCodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLangCode not implemented")
}
func (UnimplementedImsessionServer) GetCreatedByKeyId(context.Context, *GetCreatedByKeyIdReq) (*GetCreatedByKeyIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreatedByKeyId not implemented")
}
func (UnimplementedImsessionServer) UpdateSelfAppHash(context.Context, *UpdateSelfAppHashReq) (*UpdateSelfAppHashResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSelfAppHash not implemented")
}
func (UnimplementedImsessionServer) mustEmbedUnimplementedImsessionServer() {}

// UnsafeImsessionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImsessionServer will
// result in compilation errors.
type UnsafeImsessionServer interface {
	mustEmbedUnimplementedImsessionServer()
}

func RegisterImsessionServer(s grpc.ServiceRegistrar, srv ImsessionServer) {
	s.RegisterService(&Imsession_ServiceDesc, srv)
}

func _Imsession_ClearKeyIdSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearKeyIdSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).ClearKeyIdSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/ClearKeyIdSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).ClearKeyIdSession(ctx, req.(*ClearKeyIdSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionInitConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionInitConnectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionInitConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionInitConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionInitConnection(ctx, req.(*SessionInitConnectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionUpdateRegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionUpdateRegisterDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionUpdateRegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionUpdateRegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionUpdateRegisterDevice(ctx, req.(*SessionUpdateRegisterDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionUpdateRegisterHuaweiDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionUpdateRegisterHuaweiDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionUpdateRegisterHuaweiDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionUpdateRegisterHuaweiDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionUpdateRegisterHuaweiDevice(ctx, req.(*SessionUpdateRegisterHuaweiDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionUpdateUserPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionUpdateUserPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionUpdateUserPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionUpdateUserPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionUpdateUserPhone(ctx, req.(*SessionUpdateUserPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionUpdateLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionUpdateLogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionUpdateLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionUpdateLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionUpdateLogout(ctx, req.(*SessionUpdateLogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionUpdateOnHandshakeDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionUpdateOnHandshakeDoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionUpdateOnHandshakeDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionUpdateOnHandshakeDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionUpdateOnHandshakeDone(ctx, req.(*SessionUpdateOnHandshakeDoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionTerminateByKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionTerminateByKeyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionTerminateByKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionTerminateByKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionTerminateByKeyId(ctx, req.(*SessionTerminateByKeyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionTerminateExceptKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionTerminateExceptKeyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionTerminateExceptKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionTerminateExceptKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionTerminateExceptKeyId(ctx, req.(*SessionTerminateExceptKeyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionDeleteByKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDeleteByKeyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionDeleteByKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionDeleteByKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionDeleteByKeyId(ctx, req.(*SessionDeleteByKeyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionIncQts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionIncQtsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionIncQts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionIncQts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionIncQts(ctx, req.(*SessionIncQtsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionQueryByKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionQueryByKeyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionQueryByKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionQueryByKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionQueryByKeyId(ctx, req.(*SessionQueryByKeyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionQueryByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionQueryByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionQueryByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionQueryByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionQueryByUserId(ctx, req.(*SessionQueryByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionQueryBasicInfoByKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionQueryBasicInfoByKeyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionQueryBasicInfoByKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionQueryBasicInfoByKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionQueryBasicInfoByKeyId(ctx, req.(*SessionQueryBasicInfoByKeyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionQueryDesByKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionQueryDesByKeyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionQueryDesByKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionQueryDesByKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionQueryDesByKeyId(ctx, req.(*SessionQueryDesByKeyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionDeleteAuthKeysByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDeleteAuthKeysByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionDeleteAuthKeysByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionDeleteAuthKeysByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionDeleteAuthKeysByUserId(ctx, req.(*SessionDeleteAuthKeysByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionUpdatePing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionUpdatePingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionUpdatePing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionUpdatePing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionUpdatePing(ctx, req.(*SessionUpdatePingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionUpdatePing2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionUpdatePingReq2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionUpdatePing2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionUpdatePing2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionUpdatePing2(ctx, req.(*SessionUpdatePingReq2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionUpdateSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionUpdateSignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionUpdateSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionUpdateSignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionUpdateSignIn(ctx, req.(*SessionUpdateSignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionQueryApiIDbyKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionQueryApiIDbyKeyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionQueryApiIDbyKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionQueryApiIDbyKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionQueryApiIDbyKeyId(ctx, req.(*SessionQueryApiIDbyKeyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionQueryUserIdByKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionQueryUserIdByKeyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionQueryUserIdByKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionQueryUserIdByKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionQueryUserIdByKeyId(ctx, req.(*SessionQueryUserIdByKeyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SessionDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDisconnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SessionDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SessionDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SessionDisconnect(ctx, req.(*SessionDisconnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_AddBanDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBanDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).AddBanDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/AddBanDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).AddBanDevice(ctx, req.(*AddBanDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_CheckBanDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBanDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).CheckBanDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/CheckBanDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).CheckBanDevice(ctx, req.(*CheckBanDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_GetUniqueNumberByKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUniqueNumberByKeyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).GetUniqueNumberByKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/GetUniqueNumberByKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).GetUniqueNumberByKeyId(ctx, req.(*GetUniqueNumberByKeyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_SetLangCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLangCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).SetLangCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/SetLangCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).SetLangCode(ctx, req.(*SetLangCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_GetLangCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLangCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).GetLangCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/GetLangCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).GetLangCode(ctx, req.(*GetLangCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_GetCreatedByKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreatedByKeyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).GetCreatedByKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/GetCreatedByKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).GetCreatedByKeyId(ctx, req.(*GetCreatedByKeyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imsession_UpdateSelfAppHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSelfAppHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImsessionServer).UpdateSelfAppHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsession.imsession/UpdateSelfAppHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImsessionServer).UpdateSelfAppHash(ctx, req.(*UpdateSelfAppHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Imsession_ServiceDesc is the grpc.ServiceDesc for Imsession service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Imsession_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imsession.imsession",
	HandlerType: (*ImsessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClearKeyIdSession",
			Handler:    _Imsession_ClearKeyIdSession_Handler,
		},
		{
			MethodName: "SessionInitConnection",
			Handler:    _Imsession_SessionInitConnection_Handler,
		},
		{
			MethodName: "SessionUpdateRegisterDevice",
			Handler:    _Imsession_SessionUpdateRegisterDevice_Handler,
		},
		{
			MethodName: "SessionUpdateRegisterHuaweiDevice",
			Handler:    _Imsession_SessionUpdateRegisterHuaweiDevice_Handler,
		},
		{
			MethodName: "SessionUpdateUserPhone",
			Handler:    _Imsession_SessionUpdateUserPhone_Handler,
		},
		{
			MethodName: "SessionUpdateLogout",
			Handler:    _Imsession_SessionUpdateLogout_Handler,
		},
		{
			MethodName: "SessionUpdateOnHandshakeDone",
			Handler:    _Imsession_SessionUpdateOnHandshakeDone_Handler,
		},
		{
			MethodName: "SessionTerminateByKeyId",
			Handler:    _Imsession_SessionTerminateByKeyId_Handler,
		},
		{
			MethodName: "SessionTerminateExceptKeyId",
			Handler:    _Imsession_SessionTerminateExceptKeyId_Handler,
		},
		{
			MethodName: "SessionDeleteByKeyId",
			Handler:    _Imsession_SessionDeleteByKeyId_Handler,
		},
		{
			MethodName: "SessionIncQts",
			Handler:    _Imsession_SessionIncQts_Handler,
		},
		{
			MethodName: "SessionQueryByKeyId",
			Handler:    _Imsession_SessionQueryByKeyId_Handler,
		},
		{
			MethodName: "SessionQueryByUserId",
			Handler:    _Imsession_SessionQueryByUserId_Handler,
		},
		{
			MethodName: "SessionQueryBasicInfoByKeyId",
			Handler:    _Imsession_SessionQueryBasicInfoByKeyId_Handler,
		},
		{
			MethodName: "SessionQueryDesByKeyId",
			Handler:    _Imsession_SessionQueryDesByKeyId_Handler,
		},
		{
			MethodName: "SessionDeleteAuthKeysByUserId",
			Handler:    _Imsession_SessionDeleteAuthKeysByUserId_Handler,
		},
		{
			MethodName: "SessionUpdatePing",
			Handler:    _Imsession_SessionUpdatePing_Handler,
		},
		{
			MethodName: "SessionUpdatePing2",
			Handler:    _Imsession_SessionUpdatePing2_Handler,
		},
		{
			MethodName: "SessionUpdateSignIn",
			Handler:    _Imsession_SessionUpdateSignIn_Handler,
		},
		{
			MethodName: "SessionQueryApiIDbyKeyId",
			Handler:    _Imsession_SessionQueryApiIDbyKeyId_Handler,
		},
		{
			MethodName: "SessionQueryUserIdByKeyId",
			Handler:    _Imsession_SessionQueryUserIdByKeyId_Handler,
		},
		{
			MethodName: "SessionDisconnect",
			Handler:    _Imsession_SessionDisconnect_Handler,
		},
		{
			MethodName: "AddBanDevice",
			Handler:    _Imsession_AddBanDevice_Handler,
		},
		{
			MethodName: "CheckBanDevice",
			Handler:    _Imsession_CheckBanDevice_Handler,
		},
		{
			MethodName: "GetUniqueNumberByKeyId",
			Handler:    _Imsession_GetUniqueNumberByKeyId_Handler,
		},
		{
			MethodName: "SetLangCode",
			Handler:    _Imsession_SetLangCode_Handler,
		},
		{
			MethodName: "GetLangCode",
			Handler:    _Imsession_GetLangCode_Handler,
		},
		{
			MethodName: "GetCreatedByKeyId",
			Handler:    _Imsession_GetCreatedByKeyId_Handler,
		},
		{
			MethodName: "UpdateSelfAppHash",
			Handler:    _Imsession_UpdateSelfAppHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imsession.proto",
}
