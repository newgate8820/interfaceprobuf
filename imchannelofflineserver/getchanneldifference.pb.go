// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/imchannelofflineserver/getchanneldifference.proto

/*
Package imchannelofflineserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/imchannelofflineserver/getchanneldifference.proto

It has these top-level messages:

	ReqGetChannelDifference
	ChanDiffStr
	RspGetChannelDifference
*/
package imchannelofflineserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import dialogserver "gitlab.chatserver.im/interfaceprobuf/dialogserver"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/pbcomm"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// #####################超级群get diff###################
type ReqGetChannelDifference struct {
	UserId      int32  `protobuf:"varint,1,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	KeyId       int64  `protobuf:"varint,2,opt,name=KeyId,json=keyId,proto3" json:"KeyId,omitempty"`
	ReMessageId uint64 `protobuf:"varint,18,opt,name=reMessageId,proto3" json:"reMessageId,omitempty"`
	CrcId       uint32 `protobuf:"varint,12,opt,name=CrcId,json=crcId,proto3" json:"CrcId,omitempty"`
	Flags       int32  `protobuf:"varint,8,opt,name=Flags,json=flags,proto3" json:"Flags,omitempty"`
	Force       bool   `protobuf:"varint,9,opt,name=Force,json=force,proto3" json:"Force,omitempty"`
	Device      int32  `protobuf:"varint,6,opt,name=device,proto3" json:"device,omitempty"`
	ReqBin      []byte `protobuf:"bytes,7,opt,name=reqBin,proto3" json:"reqBin,omitempty"`
	RangeMinId  int32  `protobuf:"varint,10,opt,name=rangeMinId,proto3" json:"rangeMinId,omitempty"`
	RangeMaxId  int32  `protobuf:"varint,11,opt,name=rangeMaxId,proto3" json:"rangeMaxId,omitempty"`
	Layer       int32  `protobuf:"varint,3,opt,name=layer,proto3" json:"layer,omitempty"`
	AppVision   string `protobuf:"bytes,4,opt,name=appVision,proto3" json:"appVision,omitempty"`
	Phone       string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Ip          string `protobuf:"bytes,13,opt,name=ip,proto3" json:"ip,omitempty"`
	SessionId   uint64 `protobuf:"varint,14,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Ostype      uint32 `protobuf:"varint,16,opt,name=ostype,proto3" json:"ostype,omitempty"`
	CurrentCrc  uint32 `protobuf:"varint,17,opt,name=currentCrc,proto3" json:"currentCrc,omitempty"`
	ChannelId   int32  `protobuf:"varint,19,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (m *ReqGetChannelDifference) Reset()         { *m = ReqGetChannelDifference{} }
func (m *ReqGetChannelDifference) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelDifference) ProtoMessage()    {}
func (*ReqGetChannelDifference) Descriptor() ([]byte, []int) {
	return fileDescriptorGetchanneldifference, []int{0}
}

func (m *ReqGetChannelDifference) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetChannelDifference) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqGetChannelDifference) GetReMessageId() uint64 {
	if m != nil {
		return m.ReMessageId
	}
	return 0
}

func (m *ReqGetChannelDifference) GetCrcId() uint32 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *ReqGetChannelDifference) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqGetChannelDifference) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ReqGetChannelDifference) GetDevice() int32 {
	if m != nil {
		return m.Device
	}
	return 0
}

func (m *ReqGetChannelDifference) GetReqBin() []byte {
	if m != nil {
		return m.ReqBin
	}
	return nil
}

func (m *ReqGetChannelDifference) GetRangeMinId() int32 {
	if m != nil {
		return m.RangeMinId
	}
	return 0
}

func (m *ReqGetChannelDifference) GetRangeMaxId() int32 {
	if m != nil {
		return m.RangeMaxId
	}
	return 0
}

func (m *ReqGetChannelDifference) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *ReqGetChannelDifference) GetAppVision() string {
	if m != nil {
		return m.AppVision
	}
	return ""
}

func (m *ReqGetChannelDifference) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ReqGetChannelDifference) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ReqGetChannelDifference) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *ReqGetChannelDifference) GetOstype() uint32 {
	if m != nil {
		return m.Ostype
	}
	return 0
}

func (m *ReqGetChannelDifference) GetCurrentCrc() uint32 {
	if m != nil {
		return m.CurrentCrc
	}
	return 0
}

func (m *ReqGetChannelDifference) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

// 入参结构体
type ChanDiffStr struct {
	FromId      int32                    `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId   int64                    `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Flags       int32                    `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	Force       bool                     `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	ChannelId   int32                    `protobuf:"varint,5,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Pts         int32                    `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
	Limit       int32                    `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Range_MinId int32                    `protobuf:"varint,8,opt,name=range_MinId,json=rangeMinId,proto3" json:"range_MinId,omitempty"`
	Range_MaxId int32                    `protobuf:"varint,9,opt,name=range_MaxId,json=rangeMaxId,proto3" json:"range_MaxId,omitempty"`
	Device      int32                    `protobuf:"varint,10,opt,name=device,proto3" json:"device,omitempty"`
	ReMessageId uint64                   `protobuf:"varint,13,opt,name=reMessageId,proto3" json:"reMessageId,omitempty"`
	UserDialog  *dialogserver.UserDialog `protobuf:"bytes,11,opt,name=userDialog" json:"userDialog,omitempty"`
	Debug       *pbcomm.Debug            `protobuf:"bytes,12,opt,name=debug" json:"debug,omitempty"`
}

func (m *ChanDiffStr) Reset()                    { *m = ChanDiffStr{} }
func (m *ChanDiffStr) String() string            { return proto.CompactTextString(m) }
func (*ChanDiffStr) ProtoMessage()               {}
func (*ChanDiffStr) Descriptor() ([]byte, []int) { return fileDescriptorGetchanneldifference, []int{1} }

func (m *ChanDiffStr) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ChanDiffStr) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ChanDiffStr) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ChanDiffStr) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ChanDiffStr) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChanDiffStr) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ChanDiffStr) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ChanDiffStr) GetRange_MinId() int32 {
	if m != nil {
		return m.Range_MinId
	}
	return 0
}

func (m *ChanDiffStr) GetRange_MaxId() int32 {
	if m != nil {
		return m.Range_MaxId
	}
	return 0
}

func (m *ChanDiffStr) GetDevice() int32 {
	if m != nil {
		return m.Device
	}
	return 0
}

func (m *ChanDiffStr) GetReMessageId() uint64 {
	if m != nil {
		return m.ReMessageId
	}
	return 0
}

func (m *ChanDiffStr) GetUserDialog() *dialogserver.UserDialog {
	if m != nil {
		return m.UserDialog
	}
	return nil
}

func (m *ChanDiffStr) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回
type RspGetChannelDifference struct {
	Result    []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (m *RspGetChannelDifference) Reset()         { *m = RspGetChannelDifference{} }
func (m *RspGetChannelDifference) String() string { return proto.CompactTextString(m) }
func (*RspGetChannelDifference) ProtoMessage()    {}
func (*RspGetChannelDifference) Descriptor() ([]byte, []int) {
	return fileDescriptorGetchanneldifference, []int{2}
}

func (m *RspGetChannelDifference) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RspGetChannelDifference) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func init() {
	proto.RegisterType((*ReqGetChannelDifference)(nil), "imchannelofflineserver.ReqGetChannelDifference")
	proto.RegisterType((*ChanDiffStr)(nil), "imchannelofflineserver.ChanDiffStr")
	proto.RegisterType((*RspGetChannelDifference)(nil), "imchannelofflineserver.RspGetChannelDifference")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChannelOfflineServerService service

type ChannelOfflineServerServiceClient interface {
	GetChannelDifference(ctx context.Context, in *ReqGetChannelDifference, opts ...grpc.CallOption) (*RspGetChannelDifference, error)
	GetChannelDifferenceIos(ctx context.Context, in *ReqGetChannelDifference, opts ...grpc.CallOption) (*RspGetChannelDifference, error)
}

type channelOfflineServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewChannelOfflineServerServiceClient(cc *grpc.ClientConn) ChannelOfflineServerServiceClient {
	return &channelOfflineServerServiceClient{cc}
}

func (c *channelOfflineServerServiceClient) GetChannelDifference(ctx context.Context, in *ReqGetChannelDifference, opts ...grpc.CallOption) (*RspGetChannelDifference, error) {
	out := new(RspGetChannelDifference)
	err := grpc.Invoke(ctx, "/imchannelofflineserver.ChannelOfflineServerService/GetChannelDifference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelOfflineServerServiceClient) GetChannelDifferenceIos(ctx context.Context, in *ReqGetChannelDifference, opts ...grpc.CallOption) (*RspGetChannelDifference, error) {
	out := new(RspGetChannelDifference)
	err := grpc.Invoke(ctx, "/imchannelofflineserver.ChannelOfflineServerService/GetChannelDifferenceIos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChannelOfflineServerService service

type ChannelOfflineServerServiceServer interface {
	GetChannelDifference(context.Context, *ReqGetChannelDifference) (*RspGetChannelDifference, error)
	GetChannelDifferenceIos(context.Context, *ReqGetChannelDifference) (*RspGetChannelDifference, error)
}

func RegisterChannelOfflineServerServiceServer(s *grpc.Server, srv ChannelOfflineServerServiceServer) {
	s.RegisterService(&_ChannelOfflineServerService_serviceDesc, srv)
}

func _ChannelOfflineServerService_GetChannelDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelOfflineServerServiceServer).GetChannelDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelofflineserver.ChannelOfflineServerService/GetChannelDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelOfflineServerServiceServer).GetChannelDifference(ctx, req.(*ReqGetChannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelOfflineServerService_GetChannelDifferenceIos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelOfflineServerServiceServer).GetChannelDifferenceIos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelofflineserver.ChannelOfflineServerService/GetChannelDifferenceIos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelOfflineServerServiceServer).GetChannelDifferenceIos(ctx, req.(*ReqGetChannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelOfflineServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imchannelofflineserver.ChannelOfflineServerService",
	HandlerType: (*ChannelOfflineServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannelDifference",
			Handler:    _ChannelOfflineServerService_GetChannelDifference_Handler,
		},
		{
			MethodName: "GetChannelDifferenceIos",
			Handler:    _ChannelOfflineServerService_GetChannelDifferenceIos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/imchannelofflineserver/getchanneldifference.proto",
}

func (m *ReqGetChannelDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelDifference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.KeyId))
	}
	if m.Layer != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.Layer))
	}
	if len(m.AppVision) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(len(m.AppVision)))
		i += copy(dAtA[i:], m.AppVision)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Device != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.Device))
	}
	if len(m.ReqBin) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(len(m.ReqBin)))
		i += copy(dAtA[i:], m.ReqBin)
	}
	if m.Flags != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.Flags))
	}
	if m.Force {
		dAtA[i] = 0x48
		i++
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RangeMinId != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.RangeMinId))
	}
	if m.RangeMaxId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.RangeMaxId))
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.CrcId))
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.SessionId))
	}
	if m.Ostype != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.Ostype))
	}
	if m.CurrentCrc != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.CurrentCrc))
	}
	if m.ReMessageId != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.ReMessageId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.ChannelId))
	}
	return i, nil
}

func (m *ChanDiffStr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChanDiffStr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.FromKeyId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.Flags))
	}
	if m.Force {
		dAtA[i] = 0x20
		i++
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.Pts))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.Limit))
	}
	if m.Range_MinId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.Range_MinId))
	}
	if m.Range_MaxId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.Range_MaxId))
	}
	if m.Device != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.Device))
	}
	if m.UserDialog != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.UserDialog.Size()))
		n1, err := m.UserDialog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Debug != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.Debug.Size()))
		n2, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ReMessageId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.ReMessageId))
	}
	return i, nil
}

func (m *RspGetChannelDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RspGetChannelDifference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGetchanneldifference(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func encodeVarintGetchanneldifference(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqGetChannelDifference) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.KeyId))
	}
	if m.Layer != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.Layer))
	}
	l = len(m.AppVision)
	if l > 0 {
		n += 1 + l + sovGetchanneldifference(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovGetchanneldifference(uint64(l))
	}
	if m.Device != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.Device))
	}
	l = len(m.ReqBin)
	if l > 0 {
		n += 1 + l + sovGetchanneldifference(uint64(l))
	}
	if m.Flags != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.Flags))
	}
	if m.Force {
		n += 2
	}
	if m.RangeMinId != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.RangeMinId))
	}
	if m.RangeMaxId != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.RangeMaxId))
	}
	if m.CrcId != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.CrcId))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovGetchanneldifference(uint64(l))
	}
	if m.SessionId != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.SessionId))
	}
	if m.Ostype != 0 {
		n += 2 + sovGetchanneldifference(uint64(m.Ostype))
	}
	if m.CurrentCrc != 0 {
		n += 2 + sovGetchanneldifference(uint64(m.CurrentCrc))
	}
	if m.ReMessageId != 0 {
		n += 2 + sovGetchanneldifference(uint64(m.ReMessageId))
	}
	if m.ChannelId != 0 {
		n += 2 + sovGetchanneldifference(uint64(m.ChannelId))
	}
	return n
}

func (m *ChanDiffStr) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.FromKeyId))
	}
	if m.Flags != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.Flags))
	}
	if m.Force {
		n += 2
	}
	if m.ChannelId != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.Pts))
	}
	if m.Limit != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.Limit))
	}
	if m.Range_MinId != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.Range_MinId))
	}
	if m.Range_MaxId != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.Range_MaxId))
	}
	if m.Device != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.Device))
	}
	if m.UserDialog != nil {
		l = m.UserDialog.Size()
		n += 1 + l + sovGetchanneldifference(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovGetchanneldifference(uint64(l))
	}
	if m.ReMessageId != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.ReMessageId))
	}
	return n
}

func (m *RspGetChannelDifference) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovGetchanneldifference(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovGetchanneldifference(uint64(m.ErrorCode))
	}
	return n
}

func sovGetchanneldifference(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGetchanneldifference(x uint64) (n int) {
	return sovGetchanneldifference(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqGetChannelDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetchanneldifference
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetchanneldifference
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetchanneldifference
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			m.Device = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Device |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGetchanneldifference
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBin = append(m.ReqBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBin == nil {
				m.ReqBin = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeMinId", wireType)
			}
			m.RangeMinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeMinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeMaxId", wireType)
			}
			m.RangeMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetchanneldifference
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ostype", wireType)
			}
			m.Ostype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ostype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCrc", wireType)
			}
			m.CurrentCrc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentCrc |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReMessageId", wireType)
			}
			m.ReMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReMessageId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGetchanneldifference(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetchanneldifference
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChanDiffStr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetchanneldifference
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChanDiffStr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChanDiffStr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range_MinId", wireType)
			}
			m.Range_MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range_MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range_MaxId", wireType)
			}
			m.Range_MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range_MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			m.Device = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Device |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGetchanneldifference
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserDialog == nil {
				m.UserDialog = &dialogserver.UserDialog{}
			}
			if err := m.UserDialog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGetchanneldifference
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReMessageId", wireType)
			}
			m.ReMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReMessageId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGetchanneldifference(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetchanneldifference
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RspGetChannelDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetchanneldifference
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RspGetChannelDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RspGetChannelDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGetchanneldifference
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGetchanneldifference(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetchanneldifference
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGetchanneldifference(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGetchanneldifference
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetchanneldifference
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGetchanneldifference
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGetchanneldifference
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGetchanneldifference(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGetchanneldifference = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGetchanneldifference   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/imchannelofflineserver/getchanneldifference.proto", fileDescriptorGetchanneldifference)
}

var fileDescriptorGetchanneldifference = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcd, 0x4e, 0xdb, 0x40,
	0x10, 0xae, 0x13, 0x9c, 0x92, 0x0d, 0x41, 0xd4, 0x45, 0xb0, 0xa2, 0x55, 0x6a, 0xa5, 0x17, 0x9f,
	0x1c, 0x89, 0x5e, 0x38, 0x93, 0xa8, 0x95, 0x55, 0x21, 0x24, 0x23, 0xb8, 0x56, 0x8e, 0x3d, 0x36,
	0xab, 0x3a, 0x5e, 0xb3, 0xeb, 0xa0, 0x52, 0xa9, 0xef, 0xd0, 0x63, 0x1f, 0xa9, 0xc7, 0x3e, 0x42,
	0xc5, 0xad, 0x6f, 0x51, 0xcd, 0xac, 0x1b, 0x1b, 0x08, 0x12, 0xa7, 0x5e, 0x12, 0x7f, 0xdf, 0xec,
	0xfc, 0x7e, 0xb3, 0xcb, 0x2e, 0x32, 0x51, 0xe5, 0xd1, 0xdc, 0x8f, 0x2f, 0xa3, 0x4a, 0x83, 0xba,
	0x06, 0xe5, 0x8b, 0xc5, 0x44, 0x14, 0x15, 0xa8, 0x34, 0x8a, 0xa1, 0x54, 0x72, 0xbe, 0x4c, 0x27,
	0x62, 0x11, 0x5f, 0x46, 0x45, 0x01, 0xb9, 0x4c, 0xd3, 0x5c, 0x14, 0x60, 0x4e, 0x4e, 0x32, 0xa8,
	0x6a, 0x3e, 0x11, 0x69, 0x0a, 0x0a, 0x8a, 0x18, 0xfc, 0x52, 0xc9, 0x4a, 0x3a, 0x7b, 0xeb, 0x5d,
	0x0e, 0x66, 0x4f, 0xca, 0x97, 0x88, 0x28, 0x97, 0x59, 0x9d, 0xa5, 0x0d, 0x4c, 0xf4, 0x83, 0xa3,
	0x27, 0x45, 0x29, 0xe7, 0xb1, 0x5c, 0x2c, 0xea, 0x3f, 0xe3, 0x39, 0xfe, 0xd3, 0x65, 0xfb, 0x21,
	0x5c, 0x7d, 0x80, 0x6a, 0x6a, 0xca, 0x9b, 0xad, 0x2a, 0x77, 0xf6, 0x58, 0xef, 0x5c, 0x83, 0x0a,
	0x12, 0x6e, 0xb9, 0x96, 0x67, 0x87, 0xbd, 0x25, 0x21, 0x67, 0x97, 0xd9, 0x1f, 0xe1, 0x26, 0x48,
	0x78, 0xc7, 0xb5, 0xbc, 0x6e, 0x68, 0x7f, 0x46, 0x80, 0x6c, 0x1e, 0xdd, 0x80, 0xe2, 0x5d, 0x3a,
	0x6c, 0x80, 0xf3, 0x9a, 0xf5, 0xa3, 0xb2, 0xbc, 0x10, 0x5a, 0xc8, 0x82, 0x6f, 0xb8, 0x96, 0xd7,
	0x0f, 0x1b, 0x02, 0x7d, 0xca, 0x4b, 0x59, 0x00, 0xb7, 0xc9, 0x62, 0x00, 0xe6, 0x4d, 0xe0, 0x5a,
	0xc4, 0xc0, 0x7b, 0x26, 0xaf, 0x41, 0xc8, 0x2b, 0xb8, 0x3a, 0x16, 0x05, 0x7f, 0xee, 0x5a, 0xde,
	0x56, 0x58, 0x23, 0x8c, 0xf2, 0x3e, 0x8f, 0x32, 0xcd, 0x37, 0x4d, 0xe6, 0x14, 0x01, 0xb1, 0x52,
	0xc5, 0xc0, 0xfb, 0xae, 0xe5, 0x6d, 0x86, 0x76, 0x8a, 0xc0, 0x19, 0x31, 0xa6, 0xa2, 0x22, 0x83,
	0x13, 0x51, 0x04, 0x09, 0x67, 0xe4, 0xd0, 0x62, 0x1a, 0x7b, 0xf4, 0x25, 0x48, 0xf8, 0xa0, 0x6d,
	0x47, 0x06, 0xa3, 0x4e, 0x55, 0x1c, 0x24, 0x7c, 0xcb, 0xb5, 0xbc, 0x61, 0x68, 0xc7, 0x08, 0x9c,
	0x6d, 0xd6, 0x11, 0x25, 0x1f, 0x52, 0x13, 0x1d, 0x51, 0x62, 0xd7, 0x1a, 0x34, 0xb6, 0x18, 0x24,
	0x7c, 0xdb, 0xb5, 0xbc, 0x8d, 0xb0, 0x21, 0xb0, 0x0f, 0xa9, 0xab, 0x9b, 0x12, 0xf8, 0x0e, 0x05,
	0xa9, 0x11, 0xe6, 0x8e, 0x97, 0x4a, 0x41, 0x51, 0x4d, 0x55, 0xcc, 0x5f, 0x90, 0xad, 0xc5, 0x38,
	0x2e, 0x1b, 0x28, 0x38, 0x01, 0xad, 0xa3, 0x0c, 0x82, 0x84, 0x3b, 0x14, 0xb7, 0x4d, 0x61, 0xde,
	0x7a, 0xcb, 0x82, 0x84, 0xbf, 0xa4, 0xe2, 0x1b, 0x62, 0xfc, 0xbd, 0xcb, 0x06, 0xa8, 0x32, 0x4a,
	0x7c, 0x56, 0x29, 0xac, 0x23, 0x55, 0x72, 0xd1, 0xe8, 0x6b, 0x10, 0x46, 0xc1, 0xaf, 0xb6, 0xc6,
	0x0d, 0x81, 0x13, 0xa0, 0x01, 0xff, 0xd3, 0x79, 0x35, 0x6d, 0x1a, 0x30, 0x69, 0xbc, 0x9a, 0xf6,
	0x9d, 0x7a, 0xec, 0x7b, 0xf5, 0x38, 0x3b, 0xac, 0x5b, 0x56, 0xba, 0x16, 0x19, 0x3f, 0x69, 0x87,
	0xc4, 0x42, 0x54, 0x24, 0x30, 0xee, 0x10, 0x02, 0xe7, 0x0d, 0x1b, 0x90, 0x02, 0x9f, 0x8c, 0x68,
	0x9b, 0x0f, 0x44, 0x6b, 0x0e, 0x90, 0x6a, 0xfd, 0x07, 0xaa, 0x35, 0x1b, 0xc5, 0xee, 0x6c, 0xd4,
	0x11, 0x63, 0xb8, 0xd3, 0x33, 0xba, 0x51, 0xa4, 0xf6, 0xe0, 0x90, 0xfb, 0x77, 0x2e, 0xd8, 0xf9,
	0xca, 0x1e, 0xb6, 0xce, 0x3a, 0x6f, 0x99, 0x9d, 0xc0, 0x7c, 0x99, 0xd1, 0x1e, 0x0c, 0x0e, 0x87,
	0x7e, 0x7d, 0xab, 0x66, 0x48, 0x86, 0xc6, 0x76, 0x5f, 0xb0, 0xe1, 0x03, 0xc1, 0xc6, 0xa7, 0x6c,
	0x3f, 0xd4, 0xe5, 0x63, 0xb7, 0x4f, 0x81, 0x5e, 0xe6, 0x15, 0xa9, 0x43, 0xdb, 0x8e, 0x08, 0x67,
	0x0a, 0x4a, 0x49, 0x35, 0x95, 0x09, 0x90, 0x3a, 0x76, 0xd8, 0x10, 0x87, 0x3f, 0x3a, 0xec, 0x55,
	0x1d, 0xeb, 0xd4, 0x3c, 0x34, 0x67, 0xd4, 0x07, 0xfe, 0x62, 0xc7, 0x5f, 0xd9, 0xee, 0xda, 0x6c,
	0x13, 0x7f, 0xfd, 0x03, 0xe5, 0x3f, 0xf2, 0x38, 0x1c, 0x3c, 0xee, 0xb0, 0xbe, 0x9f, 0xf1, 0x33,
	0xe7, 0x1b, 0xdb, 0x5f, 0x67, 0x09, 0xa4, 0xfe, 0x1f, 0xe9, 0x8f, 0xb7, 0x7e, 0xde, 0x8e, 0xac,
	0x5f, 0xb7, 0x23, 0xeb, 0xf7, 0xed, 0xc8, 0x9a, 0xf7, 0xe8, 0xfd, 0x7b, 0xf7, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x4f, 0x4c, 0x52, 0x29, 0xf1, 0x05, 0x00, 0x00,
}
