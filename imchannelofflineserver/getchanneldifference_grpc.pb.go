// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: getchanneldifference.proto

package imchannelofflineserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChannelOfflineServerServiceClient is the client API for ChannelOfflineServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelOfflineServerServiceClient interface {
	GetChannelDifference(ctx context.Context, in *ReqGetChannelDifference, opts ...grpc.CallOption) (*RspGetChannelDifference, error)
	GetChannelDifferenceIos(ctx context.Context, in *ReqGetChannelDifference, opts ...grpc.CallOption) (*RspGetChannelDifference, error)
}

type channelOfflineServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelOfflineServerServiceClient(cc grpc.ClientConnInterface) ChannelOfflineServerServiceClient {
	return &channelOfflineServerServiceClient{cc}
}

func (c *channelOfflineServerServiceClient) GetChannelDifference(ctx context.Context, in *ReqGetChannelDifference, opts ...grpc.CallOption) (*RspGetChannelDifference, error) {
	out := new(RspGetChannelDifference)
	err := c.cc.Invoke(ctx, "/imchannelofflineserver.ChannelOfflineServerService/GetChannelDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelOfflineServerServiceClient) GetChannelDifferenceIos(ctx context.Context, in *ReqGetChannelDifference, opts ...grpc.CallOption) (*RspGetChannelDifference, error) {
	out := new(RspGetChannelDifference)
	err := c.cc.Invoke(ctx, "/imchannelofflineserver.ChannelOfflineServerService/GetChannelDifferenceIos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelOfflineServerServiceServer is the server API for ChannelOfflineServerService service.
// All implementations must embed UnimplementedChannelOfflineServerServiceServer
// for forward compatibility
type ChannelOfflineServerServiceServer interface {
	GetChannelDifference(context.Context, *ReqGetChannelDifference) (*RspGetChannelDifference, error)
	GetChannelDifferenceIos(context.Context, *ReqGetChannelDifference) (*RspGetChannelDifference, error)
	mustEmbedUnimplementedChannelOfflineServerServiceServer()
}

// UnimplementedChannelOfflineServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChannelOfflineServerServiceServer struct {
}

func (UnimplementedChannelOfflineServerServiceServer) GetChannelDifference(context.Context, *ReqGetChannelDifference) (*RspGetChannelDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelDifference not implemented")
}
func (UnimplementedChannelOfflineServerServiceServer) GetChannelDifferenceIos(context.Context, *ReqGetChannelDifference) (*RspGetChannelDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelDifferenceIos not implemented")
}
func (UnimplementedChannelOfflineServerServiceServer) mustEmbedUnimplementedChannelOfflineServerServiceServer() {
}

// UnsafeChannelOfflineServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelOfflineServerServiceServer will
// result in compilation errors.
type UnsafeChannelOfflineServerServiceServer interface {
	mustEmbedUnimplementedChannelOfflineServerServiceServer()
}

func RegisterChannelOfflineServerServiceServer(s grpc.ServiceRegistrar, srv ChannelOfflineServerServiceServer) {
	s.RegisterService(&ChannelOfflineServerService_ServiceDesc, srv)
}

func _ChannelOfflineServerService_GetChannelDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelOfflineServerServiceServer).GetChannelDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelofflineserver.ChannelOfflineServerService/GetChannelDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelOfflineServerServiceServer).GetChannelDifference(ctx, req.(*ReqGetChannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelOfflineServerService_GetChannelDifferenceIos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelOfflineServerServiceServer).GetChannelDifferenceIos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelofflineserver.ChannelOfflineServerService/GetChannelDifferenceIos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelOfflineServerServiceServer).GetChannelDifferenceIos(ctx, req.(*ReqGetChannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelOfflineServerService_ServiceDesc is the grpc.ServiceDesc for ChannelOfflineServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelOfflineServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imchannelofflineserver.ChannelOfflineServerService",
	HandlerType: (*ChannelOfflineServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannelDifference",
			Handler:    _ChannelOfflineServerService_GetChannelDifference_Handler,
		},
		{
			MethodName: "GetChannelDifferenceIos",
			Handler:    _ChannelOfflineServerService_GetChannelDifferenceIos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "getchanneldifference.proto",
}
