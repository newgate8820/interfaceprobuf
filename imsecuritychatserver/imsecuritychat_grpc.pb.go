// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imsecuritychat.proto

package imsecuritychatserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImSecurityChatServerClient is the client API for ImSecurityChatServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImSecurityChatServerClient interface {
	// 发送加密聊天请求
	RequestEncryption(ctx context.Context, in *RequestEncryptionReq, opts ...grpc.CallOption) (*SecurityResult, error)
	// 接收加密聊天
	AcceptEncryption(ctx context.Context, in *AcceptEncryptionReq, opts ...grpc.CallOption) (*SecurityResult, error)
	// 发送加密聊天普通消息
	SendEncrypted(ctx context.Context, in *SendEncryptedReq, opts ...grpc.CallOption) (*SecurityResult, error)
	// 发送加密聊天媒体消息
	SendEncryptedFile(ctx context.Context, in *SendEncryptedFileReq, opts ...grpc.CallOption) (*SecurityResult, error)
	// 发送加密聊天action消息
	SendEncryptedService(ctx context.Context, in *SendEncryptedServiceReq, opts ...grpc.CallOption) (*SecurityResult, error)
	// 发送加密聊天取消
	DiscardEncryption(ctx context.Context, in *DiscardEncryptionReq, opts ...grpc.CallOption) (*SecurityResult, error)
	// 加密聊天双钩
	ReadEncryptedHistory(ctx context.Context, in *ReadEncryptedHistoryReq, opts ...grpc.CallOption) (*SecurityResult, error)
	// 加密聊天settyping
	SetEncryptedTyping(ctx context.Context, in *SetEncryptedTypingReq, opts ...grpc.CallOption) (*SecurityResult, error)
	// LogOut后删除所有的加密聊天
	LogoutDisCardAllSecurity(ctx context.Context, in *LogoutDisCardAllSecurityReq, opts ...grpc.CallOption) (*LogoutDisCardAllSecurityResult, error)
	// 获取加密聊天的randomId 们
	GetSecurityRandomIds(ctx context.Context, in *GetSecurityRandomIdsReq, opts ...grpc.CallOption) (*GetSecurityRandomIdsResult, error)
	// 检测加密聊天是否已经被接收
	CheckEncryChatAccept(ctx context.Context, in *CheckEncryChatAcceptReq, opts ...grpc.CallOption) (*CheckEncryChatAcceptResult, error)
	// 根据chatId判断加密聊天是否存在
	CheckSecurityChatExist(ctx context.Context, in *CheckSecurityChatExistReq, opts ...grpc.CallOption) (*CheckSecurityChatExistResult, error)
	// 根据qts查询diff
	GetSecurityDiffByQts(ctx context.Context, in *GetSecurityDiffByQtsReq, opts ...grpc.CallOption) (*GetSecurityDiffByQtsResult, error)
	// 加密聊天请求updates
	GetHandshakeUpdates(ctx context.Context, in *GetHandshakeUpdatesReq, opts ...grpc.CallOption) (*GetHandshakeUpdatesResult, error)
	// 根据userid和keyid获取所有的chatId
	GetAllChatIdByUserIdKeyId(ctx context.Context, in *GetAllChatIdByUserIdKeyIdReq, opts ...grpc.CallOption) (*GetAllChatIdByUserIdKeyIdResult, error)
	// 根据chatId获取chat的详细信息
	GetChatInfoByChatId(ctx context.Context, in *GetChatInfoByChatIdReq, opts ...grpc.CallOption) (*GetChatInfoByChatIdResult, error)
}

type imSecurityChatServerClient struct {
	cc grpc.ClientConnInterface
}

func NewImSecurityChatServerClient(cc grpc.ClientConnInterface) ImSecurityChatServerClient {
	return &imSecurityChatServerClient{cc}
}

func (c *imSecurityChatServerClient) RequestEncryption(ctx context.Context, in *RequestEncryptionReq, opts ...grpc.CallOption) (*SecurityResult, error) {
	out := new(SecurityResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/RequestEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) AcceptEncryption(ctx context.Context, in *AcceptEncryptionReq, opts ...grpc.CallOption) (*SecurityResult, error) {
	out := new(SecurityResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/AcceptEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) SendEncrypted(ctx context.Context, in *SendEncryptedReq, opts ...grpc.CallOption) (*SecurityResult, error) {
	out := new(SecurityResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/SendEncrypted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) SendEncryptedFile(ctx context.Context, in *SendEncryptedFileReq, opts ...grpc.CallOption) (*SecurityResult, error) {
	out := new(SecurityResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/SendEncryptedFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) SendEncryptedService(ctx context.Context, in *SendEncryptedServiceReq, opts ...grpc.CallOption) (*SecurityResult, error) {
	out := new(SecurityResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/SendEncryptedService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) DiscardEncryption(ctx context.Context, in *DiscardEncryptionReq, opts ...grpc.CallOption) (*SecurityResult, error) {
	out := new(SecurityResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/DiscardEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) ReadEncryptedHistory(ctx context.Context, in *ReadEncryptedHistoryReq, opts ...grpc.CallOption) (*SecurityResult, error) {
	out := new(SecurityResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/ReadEncryptedHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) SetEncryptedTyping(ctx context.Context, in *SetEncryptedTypingReq, opts ...grpc.CallOption) (*SecurityResult, error) {
	out := new(SecurityResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/SetEncryptedTyping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) LogoutDisCardAllSecurity(ctx context.Context, in *LogoutDisCardAllSecurityReq, opts ...grpc.CallOption) (*LogoutDisCardAllSecurityResult, error) {
	out := new(LogoutDisCardAllSecurityResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/LogoutDisCardAllSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) GetSecurityRandomIds(ctx context.Context, in *GetSecurityRandomIdsReq, opts ...grpc.CallOption) (*GetSecurityRandomIdsResult, error) {
	out := new(GetSecurityRandomIdsResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/GetSecurityRandomIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) CheckEncryChatAccept(ctx context.Context, in *CheckEncryChatAcceptReq, opts ...grpc.CallOption) (*CheckEncryChatAcceptResult, error) {
	out := new(CheckEncryChatAcceptResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/CheckEncryChatAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) CheckSecurityChatExist(ctx context.Context, in *CheckSecurityChatExistReq, opts ...grpc.CallOption) (*CheckSecurityChatExistResult, error) {
	out := new(CheckSecurityChatExistResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/CheckSecurityChatExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) GetSecurityDiffByQts(ctx context.Context, in *GetSecurityDiffByQtsReq, opts ...grpc.CallOption) (*GetSecurityDiffByQtsResult, error) {
	out := new(GetSecurityDiffByQtsResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/GetSecurityDiffByQts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) GetHandshakeUpdates(ctx context.Context, in *GetHandshakeUpdatesReq, opts ...grpc.CallOption) (*GetHandshakeUpdatesResult, error) {
	out := new(GetHandshakeUpdatesResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/GetHandshakeUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) GetAllChatIdByUserIdKeyId(ctx context.Context, in *GetAllChatIdByUserIdKeyIdReq, opts ...grpc.CallOption) (*GetAllChatIdByUserIdKeyIdResult, error) {
	out := new(GetAllChatIdByUserIdKeyIdResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/GetAllChatIdByUserIdKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imSecurityChatServerClient) GetChatInfoByChatId(ctx context.Context, in *GetChatInfoByChatIdReq, opts ...grpc.CallOption) (*GetChatInfoByChatIdResult, error) {
	out := new(GetChatInfoByChatIdResult)
	err := c.cc.Invoke(ctx, "/imsecuritychatserver.ImSecurityChatServer/GetChatInfoByChatId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImSecurityChatServerServer is the server API for ImSecurityChatServer service.
// All implementations must embed UnimplementedImSecurityChatServerServer
// for forward compatibility
type ImSecurityChatServerServer interface {
	// 发送加密聊天请求
	RequestEncryption(context.Context, *RequestEncryptionReq) (*SecurityResult, error)
	// 接收加密聊天
	AcceptEncryption(context.Context, *AcceptEncryptionReq) (*SecurityResult, error)
	// 发送加密聊天普通消息
	SendEncrypted(context.Context, *SendEncryptedReq) (*SecurityResult, error)
	// 发送加密聊天媒体消息
	SendEncryptedFile(context.Context, *SendEncryptedFileReq) (*SecurityResult, error)
	// 发送加密聊天action消息
	SendEncryptedService(context.Context, *SendEncryptedServiceReq) (*SecurityResult, error)
	// 发送加密聊天取消
	DiscardEncryption(context.Context, *DiscardEncryptionReq) (*SecurityResult, error)
	// 加密聊天双钩
	ReadEncryptedHistory(context.Context, *ReadEncryptedHistoryReq) (*SecurityResult, error)
	// 加密聊天settyping
	SetEncryptedTyping(context.Context, *SetEncryptedTypingReq) (*SecurityResult, error)
	// LogOut后删除所有的加密聊天
	LogoutDisCardAllSecurity(context.Context, *LogoutDisCardAllSecurityReq) (*LogoutDisCardAllSecurityResult, error)
	// 获取加密聊天的randomId 们
	GetSecurityRandomIds(context.Context, *GetSecurityRandomIdsReq) (*GetSecurityRandomIdsResult, error)
	// 检测加密聊天是否已经被接收
	CheckEncryChatAccept(context.Context, *CheckEncryChatAcceptReq) (*CheckEncryChatAcceptResult, error)
	// 根据chatId判断加密聊天是否存在
	CheckSecurityChatExist(context.Context, *CheckSecurityChatExistReq) (*CheckSecurityChatExistResult, error)
	// 根据qts查询diff
	GetSecurityDiffByQts(context.Context, *GetSecurityDiffByQtsReq) (*GetSecurityDiffByQtsResult, error)
	// 加密聊天请求updates
	GetHandshakeUpdates(context.Context, *GetHandshakeUpdatesReq) (*GetHandshakeUpdatesResult, error)
	// 根据userid和keyid获取所有的chatId
	GetAllChatIdByUserIdKeyId(context.Context, *GetAllChatIdByUserIdKeyIdReq) (*GetAllChatIdByUserIdKeyIdResult, error)
	// 根据chatId获取chat的详细信息
	GetChatInfoByChatId(context.Context, *GetChatInfoByChatIdReq) (*GetChatInfoByChatIdResult, error)
	mustEmbedUnimplementedImSecurityChatServerServer()
}

// UnimplementedImSecurityChatServerServer must be embedded to have forward compatible implementations.
type UnimplementedImSecurityChatServerServer struct {
}

func (UnimplementedImSecurityChatServerServer) RequestEncryption(context.Context, *RequestEncryptionReq) (*SecurityResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestEncryption not implemented")
}
func (UnimplementedImSecurityChatServerServer) AcceptEncryption(context.Context, *AcceptEncryptionReq) (*SecurityResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptEncryption not implemented")
}
func (UnimplementedImSecurityChatServerServer) SendEncrypted(context.Context, *SendEncryptedReq) (*SecurityResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEncrypted not implemented")
}
func (UnimplementedImSecurityChatServerServer) SendEncryptedFile(context.Context, *SendEncryptedFileReq) (*SecurityResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEncryptedFile not implemented")
}
func (UnimplementedImSecurityChatServerServer) SendEncryptedService(context.Context, *SendEncryptedServiceReq) (*SecurityResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEncryptedService not implemented")
}
func (UnimplementedImSecurityChatServerServer) DiscardEncryption(context.Context, *DiscardEncryptionReq) (*SecurityResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardEncryption not implemented")
}
func (UnimplementedImSecurityChatServerServer) ReadEncryptedHistory(context.Context, *ReadEncryptedHistoryReq) (*SecurityResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEncryptedHistory not implemented")
}
func (UnimplementedImSecurityChatServerServer) SetEncryptedTyping(context.Context, *SetEncryptedTypingReq) (*SecurityResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEncryptedTyping not implemented")
}
func (UnimplementedImSecurityChatServerServer) LogoutDisCardAllSecurity(context.Context, *LogoutDisCardAllSecurityReq) (*LogoutDisCardAllSecurityResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutDisCardAllSecurity not implemented")
}
func (UnimplementedImSecurityChatServerServer) GetSecurityRandomIds(context.Context, *GetSecurityRandomIdsReq) (*GetSecurityRandomIdsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityRandomIds not implemented")
}
func (UnimplementedImSecurityChatServerServer) CheckEncryChatAccept(context.Context, *CheckEncryChatAcceptReq) (*CheckEncryChatAcceptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEncryChatAccept not implemented")
}
func (UnimplementedImSecurityChatServerServer) CheckSecurityChatExist(context.Context, *CheckSecurityChatExistReq) (*CheckSecurityChatExistResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSecurityChatExist not implemented")
}
func (UnimplementedImSecurityChatServerServer) GetSecurityDiffByQts(context.Context, *GetSecurityDiffByQtsReq) (*GetSecurityDiffByQtsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityDiffByQts not implemented")
}
func (UnimplementedImSecurityChatServerServer) GetHandshakeUpdates(context.Context, *GetHandshakeUpdatesReq) (*GetHandshakeUpdatesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHandshakeUpdates not implemented")
}
func (UnimplementedImSecurityChatServerServer) GetAllChatIdByUserIdKeyId(context.Context, *GetAllChatIdByUserIdKeyIdReq) (*GetAllChatIdByUserIdKeyIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChatIdByUserIdKeyId not implemented")
}
func (UnimplementedImSecurityChatServerServer) GetChatInfoByChatId(context.Context, *GetChatInfoByChatIdReq) (*GetChatInfoByChatIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatInfoByChatId not implemented")
}
func (UnimplementedImSecurityChatServerServer) mustEmbedUnimplementedImSecurityChatServerServer() {}

// UnsafeImSecurityChatServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImSecurityChatServerServer will
// result in compilation errors.
type UnsafeImSecurityChatServerServer interface {
	mustEmbedUnimplementedImSecurityChatServerServer()
}

func RegisterImSecurityChatServerServer(s grpc.ServiceRegistrar, srv ImSecurityChatServerServer) {
	s.RegisterService(&ImSecurityChatServer_ServiceDesc, srv)
}

func _ImSecurityChatServer_RequestEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEncryptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).RequestEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/RequestEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).RequestEncryption(ctx, req.(*RequestEncryptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_AcceptEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptEncryptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).AcceptEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/AcceptEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).AcceptEncryption(ctx, req.(*AcceptEncryptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_SendEncrypted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEncryptedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).SendEncrypted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/SendEncrypted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).SendEncrypted(ctx, req.(*SendEncryptedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_SendEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEncryptedFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).SendEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/SendEncryptedFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).SendEncryptedFile(ctx, req.(*SendEncryptedFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_SendEncryptedService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEncryptedServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).SendEncryptedService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/SendEncryptedService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).SendEncryptedService(ctx, req.(*SendEncryptedServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_DiscardEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardEncryptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).DiscardEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/DiscardEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).DiscardEncryption(ctx, req.(*DiscardEncryptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_ReadEncryptedHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEncryptedHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).ReadEncryptedHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/ReadEncryptedHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).ReadEncryptedHistory(ctx, req.(*ReadEncryptedHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_SetEncryptedTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEncryptedTypingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).SetEncryptedTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/SetEncryptedTyping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).SetEncryptedTyping(ctx, req.(*SetEncryptedTypingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_LogoutDisCardAllSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutDisCardAllSecurityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).LogoutDisCardAllSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/LogoutDisCardAllSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).LogoutDisCardAllSecurity(ctx, req.(*LogoutDisCardAllSecurityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_GetSecurityRandomIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityRandomIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).GetSecurityRandomIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/GetSecurityRandomIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).GetSecurityRandomIds(ctx, req.(*GetSecurityRandomIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_CheckEncryChatAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEncryChatAcceptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).CheckEncryChatAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/CheckEncryChatAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).CheckEncryChatAccept(ctx, req.(*CheckEncryChatAcceptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_CheckSecurityChatExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSecurityChatExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).CheckSecurityChatExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/CheckSecurityChatExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).CheckSecurityChatExist(ctx, req.(*CheckSecurityChatExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_GetSecurityDiffByQts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityDiffByQtsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).GetSecurityDiffByQts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/GetSecurityDiffByQts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).GetSecurityDiffByQts(ctx, req.(*GetSecurityDiffByQtsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_GetHandshakeUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHandshakeUpdatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).GetHandshakeUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/GetHandshakeUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).GetHandshakeUpdates(ctx, req.(*GetHandshakeUpdatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_GetAllChatIdByUserIdKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChatIdByUserIdKeyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).GetAllChatIdByUserIdKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/GetAllChatIdByUserIdKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).GetAllChatIdByUserIdKeyId(ctx, req.(*GetAllChatIdByUserIdKeyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImSecurityChatServer_GetChatInfoByChatId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatInfoByChatIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImSecurityChatServerServer).GetChatInfoByChatId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsecuritychatserver.ImSecurityChatServer/GetChatInfoByChatId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImSecurityChatServerServer).GetChatInfoByChatId(ctx, req.(*GetChatInfoByChatIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ImSecurityChatServer_ServiceDesc is the grpc.ServiceDesc for ImSecurityChatServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImSecurityChatServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imsecuritychatserver.ImSecurityChatServer",
	HandlerType: (*ImSecurityChatServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestEncryption",
			Handler:    _ImSecurityChatServer_RequestEncryption_Handler,
		},
		{
			MethodName: "AcceptEncryption",
			Handler:    _ImSecurityChatServer_AcceptEncryption_Handler,
		},
		{
			MethodName: "SendEncrypted",
			Handler:    _ImSecurityChatServer_SendEncrypted_Handler,
		},
		{
			MethodName: "SendEncryptedFile",
			Handler:    _ImSecurityChatServer_SendEncryptedFile_Handler,
		},
		{
			MethodName: "SendEncryptedService",
			Handler:    _ImSecurityChatServer_SendEncryptedService_Handler,
		},
		{
			MethodName: "DiscardEncryption",
			Handler:    _ImSecurityChatServer_DiscardEncryption_Handler,
		},
		{
			MethodName: "ReadEncryptedHistory",
			Handler:    _ImSecurityChatServer_ReadEncryptedHistory_Handler,
		},
		{
			MethodName: "SetEncryptedTyping",
			Handler:    _ImSecurityChatServer_SetEncryptedTyping_Handler,
		},
		{
			MethodName: "LogoutDisCardAllSecurity",
			Handler:    _ImSecurityChatServer_LogoutDisCardAllSecurity_Handler,
		},
		{
			MethodName: "GetSecurityRandomIds",
			Handler:    _ImSecurityChatServer_GetSecurityRandomIds_Handler,
		},
		{
			MethodName: "CheckEncryChatAccept",
			Handler:    _ImSecurityChatServer_CheckEncryChatAccept_Handler,
		},
		{
			MethodName: "CheckSecurityChatExist",
			Handler:    _ImSecurityChatServer_CheckSecurityChatExist_Handler,
		},
		{
			MethodName: "GetSecurityDiffByQts",
			Handler:    _ImSecurityChatServer_GetSecurityDiffByQts_Handler,
		},
		{
			MethodName: "GetHandshakeUpdates",
			Handler:    _ImSecurityChatServer_GetHandshakeUpdates_Handler,
		},
		{
			MethodName: "GetAllChatIdByUserIdKeyId",
			Handler:    _ImSecurityChatServer_GetAllChatIdByUserIdKeyId_Handler,
		},
		{
			MethodName: "GetChatInfoByChatId",
			Handler:    _ImSecurityChatServer_GetChatInfoByChatId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imsecuritychat.proto",
}
