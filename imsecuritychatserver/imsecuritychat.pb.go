// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: imsecuritychat.proto

package imsecuritychatserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetChatInfoByChatIdResult_ResultCode int32

const (
	GetChatInfoByChatIdResult_Success       GetChatInfoByChatIdResult_ResultCode = 0
	GetChatInfoByChatIdResult_InternalError GetChatInfoByChatIdResult_ResultCode = 1
)

// Enum value maps for GetChatInfoByChatIdResult_ResultCode.
var (
	GetChatInfoByChatIdResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	GetChatInfoByChatIdResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x GetChatInfoByChatIdResult_ResultCode) Enum() *GetChatInfoByChatIdResult_ResultCode {
	p := new(GetChatInfoByChatIdResult_ResultCode)
	*p = x
	return p
}

func (x GetChatInfoByChatIdResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChatInfoByChatIdResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imsecuritychat_proto_enumTypes[0].Descriptor()
}

func (GetChatInfoByChatIdResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imsecuritychat_proto_enumTypes[0]
}

func (x GetChatInfoByChatIdResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetChatInfoByChatIdResult_ResultCode.Descriptor instead.
func (GetChatInfoByChatIdResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{0, 0}
}

type GetAllChatIdByUserIdKeyIdResult_ErrorCode int32

const (
	GetAllChatIdByUserIdKeyIdResult_Success GetAllChatIdByUserIdKeyIdResult_ErrorCode = 0
	GetAllChatIdByUserIdKeyIdResult_Failed  GetAllChatIdByUserIdKeyIdResult_ErrorCode = 1
)

// Enum value maps for GetAllChatIdByUserIdKeyIdResult_ErrorCode.
var (
	GetAllChatIdByUserIdKeyIdResult_ErrorCode_name = map[int32]string{
		0: "Success",
		1: "Failed",
	}
	GetAllChatIdByUserIdKeyIdResult_ErrorCode_value = map[string]int32{
		"Success": 0,
		"Failed":  1,
	}
)

func (x GetAllChatIdByUserIdKeyIdResult_ErrorCode) Enum() *GetAllChatIdByUserIdKeyIdResult_ErrorCode {
	p := new(GetAllChatIdByUserIdKeyIdResult_ErrorCode)
	*p = x
	return p
}

func (x GetAllChatIdByUserIdKeyIdResult_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetAllChatIdByUserIdKeyIdResult_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imsecuritychat_proto_enumTypes[1].Descriptor()
}

func (GetAllChatIdByUserIdKeyIdResult_ErrorCode) Type() protoreflect.EnumType {
	return &file_imsecuritychat_proto_enumTypes[1]
}

func (x GetAllChatIdByUserIdKeyIdResult_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetAllChatIdByUserIdKeyIdResult_ErrorCode.Descriptor instead.
func (GetAllChatIdByUserIdKeyIdResult_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{3, 0}
}

type GetHandshakeUpdatesResult_ErrorCode int32

const (
	GetHandshakeUpdatesResult_Success GetHandshakeUpdatesResult_ErrorCode = 0
	GetHandshakeUpdatesResult_Failed  GetHandshakeUpdatesResult_ErrorCode = 1
)

// Enum value maps for GetHandshakeUpdatesResult_ErrorCode.
var (
	GetHandshakeUpdatesResult_ErrorCode_name = map[int32]string{
		0: "Success",
		1: "Failed",
	}
	GetHandshakeUpdatesResult_ErrorCode_value = map[string]int32{
		"Success": 0,
		"Failed":  1,
	}
)

func (x GetHandshakeUpdatesResult_ErrorCode) Enum() *GetHandshakeUpdatesResult_ErrorCode {
	p := new(GetHandshakeUpdatesResult_ErrorCode)
	*p = x
	return p
}

func (x GetHandshakeUpdatesResult_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetHandshakeUpdatesResult_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imsecuritychat_proto_enumTypes[2].Descriptor()
}

func (GetHandshakeUpdatesResult_ErrorCode) Type() protoreflect.EnumType {
	return &file_imsecuritychat_proto_enumTypes[2]
}

func (x GetHandshakeUpdatesResult_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetHandshakeUpdatesResult_ErrorCode.Descriptor instead.
func (GetHandshakeUpdatesResult_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{5, 0}
}

type GetSecurityDiffByQtsResult_ErrorCode int32

const (
	GetSecurityDiffByQtsResult_Success GetSecurityDiffByQtsResult_ErrorCode = 0
	GetSecurityDiffByQtsResult_Failed  GetSecurityDiffByQtsResult_ErrorCode = 1
)

// Enum value maps for GetSecurityDiffByQtsResult_ErrorCode.
var (
	GetSecurityDiffByQtsResult_ErrorCode_name = map[int32]string{
		0: "Success",
		1: "Failed",
	}
	GetSecurityDiffByQtsResult_ErrorCode_value = map[string]int32{
		"Success": 0,
		"Failed":  1,
	}
)

func (x GetSecurityDiffByQtsResult_ErrorCode) Enum() *GetSecurityDiffByQtsResult_ErrorCode {
	p := new(GetSecurityDiffByQtsResult_ErrorCode)
	*p = x
	return p
}

func (x GetSecurityDiffByQtsResult_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSecurityDiffByQtsResult_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imsecuritychat_proto_enumTypes[3].Descriptor()
}

func (GetSecurityDiffByQtsResult_ErrorCode) Type() protoreflect.EnumType {
	return &file_imsecuritychat_proto_enumTypes[3]
}

func (x GetSecurityDiffByQtsResult_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSecurityDiffByQtsResult_ErrorCode.Descriptor instead.
func (GetSecurityDiffByQtsResult_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{9, 0}
}

type GetSecurityRandomIdsResult_ErrorCode int32

const (
	GetSecurityRandomIdsResult_Success GetSecurityRandomIdsResult_ErrorCode = 0
	GetSecurityRandomIdsResult_Failed  GetSecurityRandomIdsResult_ErrorCode = 1
)

// Enum value maps for GetSecurityRandomIdsResult_ErrorCode.
var (
	GetSecurityRandomIdsResult_ErrorCode_name = map[int32]string{
		0: "Success",
		1: "Failed",
	}
	GetSecurityRandomIdsResult_ErrorCode_value = map[string]int32{
		"Success": 0,
		"Failed":  1,
	}
)

func (x GetSecurityRandomIdsResult_ErrorCode) Enum() *GetSecurityRandomIdsResult_ErrorCode {
	p := new(GetSecurityRandomIdsResult_ErrorCode)
	*p = x
	return p
}

func (x GetSecurityRandomIdsResult_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSecurityRandomIdsResult_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imsecuritychat_proto_enumTypes[4].Descriptor()
}

func (GetSecurityRandomIdsResult_ErrorCode) Type() protoreflect.EnumType {
	return &file_imsecuritychat_proto_enumTypes[4]
}

func (x GetSecurityRandomIdsResult_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSecurityRandomIdsResult_ErrorCode.Descriptor instead.
func (GetSecurityRandomIdsResult_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{15, 0}
}

type LogoutDisCardAllSecurityResult_ErrorCode int32

const (
	LogoutDisCardAllSecurityResult_Success LogoutDisCardAllSecurityResult_ErrorCode = 0
	LogoutDisCardAllSecurityResult_Failed  LogoutDisCardAllSecurityResult_ErrorCode = 1
)

// Enum value maps for LogoutDisCardAllSecurityResult_ErrorCode.
var (
	LogoutDisCardAllSecurityResult_ErrorCode_name = map[int32]string{
		0: "Success",
		1: "Failed",
	}
	LogoutDisCardAllSecurityResult_ErrorCode_value = map[string]int32{
		"Success": 0,
		"Failed":  1,
	}
)

func (x LogoutDisCardAllSecurityResult_ErrorCode) Enum() *LogoutDisCardAllSecurityResult_ErrorCode {
	p := new(LogoutDisCardAllSecurityResult_ErrorCode)
	*p = x
	return p
}

func (x LogoutDisCardAllSecurityResult_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogoutDisCardAllSecurityResult_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imsecuritychat_proto_enumTypes[5].Descriptor()
}

func (LogoutDisCardAllSecurityResult_ErrorCode) Type() protoreflect.EnumType {
	return &file_imsecuritychat_proto_enumTypes[5]
}

func (x LogoutDisCardAllSecurityResult_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogoutDisCardAllSecurityResult_ErrorCode.Descriptor instead.
func (LogoutDisCardAllSecurityResult_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{17, 0}
}

type SetEncryptedTypingResult_Errcode int32

const (
	SetEncryptedTypingResult_Success       SetEncryptedTypingResult_Errcode = 0 //成功
	SetEncryptedTypingResult_failed        SetEncryptedTypingResult_Errcode = 1 //失败
	SetEncryptedTypingResult_AccessHashErr SetEncryptedTypingResult_Errcode = 2 //错误的哈希值
)

// Enum value maps for SetEncryptedTypingResult_Errcode.
var (
	SetEncryptedTypingResult_Errcode_name = map[int32]string{
		0: "Success",
		1: "failed",
		2: "AccessHashErr",
	}
	SetEncryptedTypingResult_Errcode_value = map[string]int32{
		"Success":       0,
		"failed":        1,
		"AccessHashErr": 2,
	}
)

func (x SetEncryptedTypingResult_Errcode) Enum() *SetEncryptedTypingResult_Errcode {
	p := new(SetEncryptedTypingResult_Errcode)
	*p = x
	return p
}

func (x SetEncryptedTypingResult_Errcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetEncryptedTypingResult_Errcode) Descriptor() protoreflect.EnumDescriptor {
	return file_imsecuritychat_proto_enumTypes[6].Descriptor()
}

func (SetEncryptedTypingResult_Errcode) Type() protoreflect.EnumType {
	return &file_imsecuritychat_proto_enumTypes[6]
}

func (x SetEncryptedTypingResult_Errcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetEncryptedTypingResult_Errcode.Descriptor instead.
func (SetEncryptedTypingResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{19, 0}
}

type ReadEncryptedHistoryResult_Errcode int32

const (
	ReadEncryptedHistoryResult_Success       ReadEncryptedHistoryResult_Errcode = 0 //成功
	ReadEncryptedHistoryResult_failed        ReadEncryptedHistoryResult_Errcode = 1 //失败
	ReadEncryptedHistoryResult_AccessHashErr ReadEncryptedHistoryResult_Errcode = 2 //错误的哈希值
)

// Enum value maps for ReadEncryptedHistoryResult_Errcode.
var (
	ReadEncryptedHistoryResult_Errcode_name = map[int32]string{
		0: "Success",
		1: "failed",
		2: "AccessHashErr",
	}
	ReadEncryptedHistoryResult_Errcode_value = map[string]int32{
		"Success":       0,
		"failed":        1,
		"AccessHashErr": 2,
	}
)

func (x ReadEncryptedHistoryResult_Errcode) Enum() *ReadEncryptedHistoryResult_Errcode {
	p := new(ReadEncryptedHistoryResult_Errcode)
	*p = x
	return p
}

func (x ReadEncryptedHistoryResult_Errcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadEncryptedHistoryResult_Errcode) Descriptor() protoreflect.EnumDescriptor {
	return file_imsecuritychat_proto_enumTypes[7].Descriptor()
}

func (ReadEncryptedHistoryResult_Errcode) Type() protoreflect.EnumType {
	return &file_imsecuritychat_proto_enumTypes[7]
}

func (x ReadEncryptedHistoryResult_Errcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadEncryptedHistoryResult_Errcode.Descriptor instead.
func (ReadEncryptedHistoryResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{21, 0}
}

type DiscardEncryptionResult_Errcode int32

const (
	DiscardEncryptionResult_Success       DiscardEncryptionResult_Errcode = 0 //成功
	DiscardEncryptionResult_failed        DiscardEncryptionResult_Errcode = 2 //删除失败
	DiscardEncryptionResult_AccessHashErr DiscardEncryptionResult_Errcode = 3 //错误的哈希值
)

// Enum value maps for DiscardEncryptionResult_Errcode.
var (
	DiscardEncryptionResult_Errcode_name = map[int32]string{
		0: "Success",
		2: "failed",
		3: "AccessHashErr",
	}
	DiscardEncryptionResult_Errcode_value = map[string]int32{
		"Success":       0,
		"failed":        2,
		"AccessHashErr": 3,
	}
)

func (x DiscardEncryptionResult_Errcode) Enum() *DiscardEncryptionResult_Errcode {
	p := new(DiscardEncryptionResult_Errcode)
	*p = x
	return p
}

func (x DiscardEncryptionResult_Errcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscardEncryptionResult_Errcode) Descriptor() protoreflect.EnumDescriptor {
	return file_imsecuritychat_proto_enumTypes[8].Descriptor()
}

func (DiscardEncryptionResult_Errcode) Type() protoreflect.EnumType {
	return &file_imsecuritychat_proto_enumTypes[8]
}

func (x DiscardEncryptionResult_Errcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscardEncryptionResult_Errcode.Descriptor instead.
func (DiscardEncryptionResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{23, 0}
}

type SendEncryptedServiceResult_Errcode int32

const (
	SendEncryptedServiceResult_Success        SendEncryptedServiceResult_Errcode = 0 //成功
	SendEncryptedServiceResult_Repeatedhandle SendEncryptedServiceResult_Errcode = 1 //重复的处理
	SendEncryptedServiceResult_ChatNotExist   SendEncryptedServiceResult_Errcode = 2 //加密聊天已经不存在
	SendEncryptedServiceResult_DbError        SendEncryptedServiceResult_Errcode = 3 //数据库错误
	SendEncryptedServiceResult_AccessHashErr  SendEncryptedServiceResult_Errcode = 4 //错误的哈希值
)

// Enum value maps for SendEncryptedServiceResult_Errcode.
var (
	SendEncryptedServiceResult_Errcode_name = map[int32]string{
		0: "Success",
		1: "Repeatedhandle",
		2: "ChatNotExist",
		3: "DbError",
		4: "AccessHashErr",
	}
	SendEncryptedServiceResult_Errcode_value = map[string]int32{
		"Success":        0,
		"Repeatedhandle": 1,
		"ChatNotExist":   2,
		"DbError":        3,
		"AccessHashErr":  4,
	}
)

func (x SendEncryptedServiceResult_Errcode) Enum() *SendEncryptedServiceResult_Errcode {
	p := new(SendEncryptedServiceResult_Errcode)
	*p = x
	return p
}

func (x SendEncryptedServiceResult_Errcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendEncryptedServiceResult_Errcode) Descriptor() protoreflect.EnumDescriptor {
	return file_imsecuritychat_proto_enumTypes[9].Descriptor()
}

func (SendEncryptedServiceResult_Errcode) Type() protoreflect.EnumType {
	return &file_imsecuritychat_proto_enumTypes[9]
}

func (x SendEncryptedServiceResult_Errcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendEncryptedServiceResult_Errcode.Descriptor instead.
func (SendEncryptedServiceResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{25, 0}
}

type SendEncryptedFileResult_Errcode int32

const (
	SendEncryptedFileResult_Success        SendEncryptedFileResult_Errcode = 0 //成功
	SendEncryptedFileResult_Repeatedhandle SendEncryptedFileResult_Errcode = 1 //重复的处理
	SendEncryptedFileResult_ChatNotExist   SendEncryptedFileResult_Errcode = 2 //加密聊天已经不存在
	SendEncryptedFileResult_DbError        SendEncryptedFileResult_Errcode = 3 //数据库错误
	SendEncryptedFileResult_AccessHashErr  SendEncryptedFileResult_Errcode = 4 //错误的哈希值
)

// Enum value maps for SendEncryptedFileResult_Errcode.
var (
	SendEncryptedFileResult_Errcode_name = map[int32]string{
		0: "Success",
		1: "Repeatedhandle",
		2: "ChatNotExist",
		3: "DbError",
		4: "AccessHashErr",
	}
	SendEncryptedFileResult_Errcode_value = map[string]int32{
		"Success":        0,
		"Repeatedhandle": 1,
		"ChatNotExist":   2,
		"DbError":        3,
		"AccessHashErr":  4,
	}
)

func (x SendEncryptedFileResult_Errcode) Enum() *SendEncryptedFileResult_Errcode {
	p := new(SendEncryptedFileResult_Errcode)
	*p = x
	return p
}

func (x SendEncryptedFileResult_Errcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendEncryptedFileResult_Errcode) Descriptor() protoreflect.EnumDescriptor {
	return file_imsecuritychat_proto_enumTypes[10].Descriptor()
}

func (SendEncryptedFileResult_Errcode) Type() protoreflect.EnumType {
	return &file_imsecuritychat_proto_enumTypes[10]
}

func (x SendEncryptedFileResult_Errcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendEncryptedFileResult_Errcode.Descriptor instead.
func (SendEncryptedFileResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{27, 0}
}

type SendEncryptedResult_Errcode int32

const (
	SendEncryptedResult_Success        SendEncryptedResult_Errcode = 0 //成功
	SendEncryptedResult_Repeatedhandle SendEncryptedResult_Errcode = 1 //重复的处理
	SendEncryptedResult_ChatNotExist   SendEncryptedResult_Errcode = 2 //加密聊天已经不存在
	SendEncryptedResult_DbError        SendEncryptedResult_Errcode = 3 //数据库错误
	SendEncryptedResult_AccessHashErr  SendEncryptedResult_Errcode = 4 //错误的哈希值
)

// Enum value maps for SendEncryptedResult_Errcode.
var (
	SendEncryptedResult_Errcode_name = map[int32]string{
		0: "Success",
		1: "Repeatedhandle",
		2: "ChatNotExist",
		3: "DbError",
		4: "AccessHashErr",
	}
	SendEncryptedResult_Errcode_value = map[string]int32{
		"Success":        0,
		"Repeatedhandle": 1,
		"ChatNotExist":   2,
		"DbError":        3,
		"AccessHashErr":  4,
	}
)

func (x SendEncryptedResult_Errcode) Enum() *SendEncryptedResult_Errcode {
	p := new(SendEncryptedResult_Errcode)
	*p = x
	return p
}

func (x SendEncryptedResult_Errcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendEncryptedResult_Errcode) Descriptor() protoreflect.EnumDescriptor {
	return file_imsecuritychat_proto_enumTypes[11].Descriptor()
}

func (SendEncryptedResult_Errcode) Type() protoreflect.EnumType {
	return &file_imsecuritychat_proto_enumTypes[11]
}

func (x SendEncryptedResult_Errcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendEncryptedResult_Errcode.Descriptor instead.
func (SendEncryptedResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{29, 0}
}

type AcceptEncryptionResult_Errcode int32

const (
	AcceptEncryptionResult_Success        AcceptEncryptionResult_Errcode = 0 //成功
	AcceptEncryptionResult_AlreadyAccept  AcceptEncryptionResult_Errcode = 1 //加密聊天已经被自己的其他端接收
	AcceptEncryptionResult_Repeatedhandle AcceptEncryptionResult_Errcode = 2 //重复的处理
	AcceptEncryptionResult_DbError        AcceptEncryptionResult_Errcode = 3 //数据库错误
	AcceptEncryptionResult_AccessHashErr  AcceptEncryptionResult_Errcode = 4 //错误的哈希值
)

// Enum value maps for AcceptEncryptionResult_Errcode.
var (
	AcceptEncryptionResult_Errcode_name = map[int32]string{
		0: "Success",
		1: "AlreadyAccept",
		2: "Repeatedhandle",
		3: "DbError",
		4: "AccessHashErr",
	}
	AcceptEncryptionResult_Errcode_value = map[string]int32{
		"Success":        0,
		"AlreadyAccept":  1,
		"Repeatedhandle": 2,
		"DbError":        3,
		"AccessHashErr":  4,
	}
)

func (x AcceptEncryptionResult_Errcode) Enum() *AcceptEncryptionResult_Errcode {
	p := new(AcceptEncryptionResult_Errcode)
	*p = x
	return p
}

func (x AcceptEncryptionResult_Errcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcceptEncryptionResult_Errcode) Descriptor() protoreflect.EnumDescriptor {
	return file_imsecuritychat_proto_enumTypes[12].Descriptor()
}

func (AcceptEncryptionResult_Errcode) Type() protoreflect.EnumType {
	return &file_imsecuritychat_proto_enumTypes[12]
}

func (x AcceptEncryptionResult_Errcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcceptEncryptionResult_Errcode.Descriptor instead.
func (AcceptEncryptionResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{31, 0}
}

type RequestEncryptionResult_ErroCode int32

const (
	RequestEncryptionResult_SusscessFull       RequestEncryptionResult_ErroCode = 0 //发起成功
	RequestEncryptionResult_GenIdFailed        RequestEncryptionResult_ErroCode = 1 //生成Id失败
	RequestEncryptionResult_DbError            RequestEncryptionResult_ErroCode = 2 //数据库错误 (调用数据库存储加密聊天失败)
	RequestEncryptionResult_Restricted         RequestEncryptionResult_ErroCode = 3 // blocked or privacy restricted
	RequestEncryptionResult_ParticipantBlocked RequestEncryptionResult_ErroCode = 4 // participant is blocked by you
)

// Enum value maps for RequestEncryptionResult_ErroCode.
var (
	RequestEncryptionResult_ErroCode_name = map[int32]string{
		0: "SusscessFull",
		1: "GenIdFailed",
		2: "DbError",
		3: "Restricted",
		4: "ParticipantBlocked",
	}
	RequestEncryptionResult_ErroCode_value = map[string]int32{
		"SusscessFull":       0,
		"GenIdFailed":        1,
		"DbError":            2,
		"Restricted":         3,
		"ParticipantBlocked": 4,
	}
)

func (x RequestEncryptionResult_ErroCode) Enum() *RequestEncryptionResult_ErroCode {
	p := new(RequestEncryptionResult_ErroCode)
	*p = x
	return p
}

func (x RequestEncryptionResult_ErroCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestEncryptionResult_ErroCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imsecuritychat_proto_enumTypes[13].Descriptor()
}

func (RequestEncryptionResult_ErroCode) Type() protoreflect.EnumType {
	return &file_imsecuritychat_proto_enumTypes[13]
}

func (x RequestEncryptionResult_ErroCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestEncryptionResult_ErroCode.Descriptor instead.
func (RequestEncryptionResult_ErroCode) EnumDescriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{33, 0}
}

type GetChatInfoByChatIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     GetChatInfoByChatIdResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=imsecuritychatserver.GetChatInfoByChatIdResult_ResultCode" json:"code,omitempty"`
	ChatInfo *ChatInfo                            `protobuf:"bytes,2,opt,name=chat_info,json=chatInfo,proto3" json:"chat_info,omitempty"` //session信息
}

func (x *GetChatInfoByChatIdResult) Reset() {
	*x = GetChatInfoByChatIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatInfoByChatIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatInfoByChatIdResult) ProtoMessage() {}

func (x *GetChatInfoByChatIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatInfoByChatIdResult.ProtoReflect.Descriptor instead.
func (*GetChatInfoByChatIdResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{0}
}

func (x *GetChatInfoByChatIdResult) GetCode() GetChatInfoByChatIdResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return GetChatInfoByChatIdResult_Success
}

func (x *GetChatInfoByChatIdResult) GetChatInfo() *ChatInfo {
	if x != nil {
		return x.ChatInfo
	}
	return nil
}

// 加密聊天chat信息
type ChatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId       int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                     //加密聊天的id
	ChatCreator  int32 `protobuf:"varint,2,opt,name=chat_creator,json=chatCreator,proto3" json:"chat_creator,omitempty"`      //加密聊天的发起者的userid
	AccessHash   int64 `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`         //加密聊天的hash值
	ChatMember   int32 `protobuf:"varint,4,opt,name=chat_member,json=chatMember,proto3" json:"chat_member,omitempty"`         //加密聊天的被邀请者的userid
	CreatorKeyId int64 `protobuf:"varint,5,opt,name=creator_key_id,json=creatorKeyId,proto3" json:"creator_key_id,omitempty"` //加密聊天的发起者的key_id
	MemberKeyId  int64 `protobuf:"varint,6,opt,name=member_key_id,json=memberKeyId,proto3" json:"member_key_id,omitempty"`    //加密聊天的发起者的key_id
	Date         int32 `protobuf:"varint,7,opt,name=date,proto3" json:"date,omitempty"`                                       //加密聊天建立的时间
	AlreadAccept bool  `protobuf:"varint,8,opt,name=alread_accept,json=alreadAccept,proto3" json:"alread_accept,omitempty"`   //加密聊天是否已经建立成功
	IsNormal     bool  `protobuf:"varint,9,opt,name=is_normal,json=isNormal,proto3" json:"is_normal,omitempty"`               //是否是加密聊天normal流程
}

func (x *ChatInfo) Reset() {
	*x = ChatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatInfo) ProtoMessage() {}

func (x *ChatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatInfo.ProtoReflect.Descriptor instead.
func (*ChatInfo) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{1}
}

func (x *ChatInfo) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatInfo) GetChatCreator() int32 {
	if x != nil {
		return x.ChatCreator
	}
	return 0
}

func (x *ChatInfo) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ChatInfo) GetChatMember() int32 {
	if x != nil {
		return x.ChatMember
	}
	return 0
}

func (x *ChatInfo) GetCreatorKeyId() int64 {
	if x != nil {
		return x.CreatorKeyId
	}
	return 0
}

func (x *ChatInfo) GetMemberKeyId() int64 {
	if x != nil {
		return x.MemberKeyId
	}
	return 0
}

func (x *ChatInfo) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ChatInfo) GetAlreadAccept() bool {
	if x != nil {
		return x.AlreadAccept
	}
	return false
}

func (x *ChatInfo) GetIsNormal() bool {
	if x != nil {
		return x.IsNormal
	}
	return false
}

type GetChatInfoByChatIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *GetChatInfoByChatIdReq) Reset() {
	*x = GetChatInfoByChatIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatInfoByChatIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatInfoByChatIdReq) ProtoMessage() {}

func (x *GetChatInfoByChatIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatInfoByChatIdReq.ProtoReflect.Descriptor instead.
func (*GetChatInfoByChatIdReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{2}
}

func (x *GetChatInfoByChatIdReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

type GetAllChatIdByUserIdKeyIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode GetAllChatIdByUserIdKeyIdResult_ErrorCode `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3,enum=imsecuritychatserver.GetAllChatIdByUserIdKeyIdResult_ErrorCode" json:"err_code,omitempty"` //错误码
	ChatId  []int32                                   `protobuf:"varint,2,rep,packed,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *GetAllChatIdByUserIdKeyIdResult) Reset() {
	*x = GetAllChatIdByUserIdKeyIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllChatIdByUserIdKeyIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllChatIdByUserIdKeyIdResult) ProtoMessage() {}

func (x *GetAllChatIdByUserIdKeyIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllChatIdByUserIdKeyIdResult.ProtoReflect.Descriptor instead.
func (*GetAllChatIdByUserIdKeyIdResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllChatIdByUserIdKeyIdResult) GetErrCode() GetAllChatIdByUserIdKeyIdResult_ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return GetAllChatIdByUserIdKeyIdResult_Success
}

func (x *GetAllChatIdByUserIdKeyIdResult) GetChatId() []int32 {
	if x != nil {
		return x.ChatId
	}
	return nil
}

type GetAllChatIdByUserIdKeyIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId  int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *GetAllChatIdByUserIdKeyIdReq) Reset() {
	*x = GetAllChatIdByUserIdKeyIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllChatIdByUserIdKeyIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllChatIdByUserIdKeyIdReq) ProtoMessage() {}

func (x *GetAllChatIdByUserIdKeyIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllChatIdByUserIdKeyIdReq.ProtoReflect.Descriptor instead.
func (*GetAllChatIdByUserIdKeyIdReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllChatIdByUserIdKeyIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAllChatIdByUserIdKeyIdReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

type GetHandshakeUpdatesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode GetHandshakeUpdatesResult_ErrorCode `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3,enum=imsecuritychatserver.GetHandshakeUpdatesResult_ErrorCode" json:"err_code,omitempty"` //错误码
	Update  [][]byte                            `protobuf:"bytes,2,rep,name=update,proto3" json:"update,omitempty"`
}

func (x *GetHandshakeUpdatesResult) Reset() {
	*x = GetHandshakeUpdatesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHandshakeUpdatesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHandshakeUpdatesResult) ProtoMessage() {}

func (x *GetHandshakeUpdatesResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHandshakeUpdatesResult.ProtoReflect.Descriptor instead.
func (*GetHandshakeUpdatesResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{5}
}

func (x *GetHandshakeUpdatesResult) GetErrCode() GetHandshakeUpdatesResult_ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return GetHandshakeUpdatesResult_Success
}

func (x *GetHandshakeUpdatesResult) GetUpdate() [][]byte {
	if x != nil {
		return x.Update
	}
	return nil
}

type GetHandshakeUpdatesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId int64 `protobuf:"varint,2,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Date      int64 `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GetHandshakeUpdatesReq) Reset() {
	*x = GetHandshakeUpdatesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHandshakeUpdatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHandshakeUpdatesReq) ProtoMessage() {}

func (x *GetHandshakeUpdatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHandshakeUpdatesReq.ProtoReflect.Descriptor instead.
func (*GetHandshakeUpdatesReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{6}
}

func (x *GetHandshakeUpdatesReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetHandshakeUpdatesReq) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *GetHandshakeUpdatesReq) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

type SecurityResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *SecurityResult) Reset() {
	*x = SecurityResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityResult) ProtoMessage() {}

func (x *SecurityResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityResult.ProtoReflect.Descriptor instead.
func (*SecurityResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{7}
}

func (x *SecurityResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SecurityResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type GetSecurityDiffByQtsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	KeyId  uint64        `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Qts    int32         `protobuf:"varint,3,opt,name=qts,proto3" json:"qts,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetSecurityDiffByQtsReq) Reset() {
	*x = GetSecurityDiffByQtsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityDiffByQtsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityDiffByQtsReq) ProtoMessage() {}

func (x *GetSecurityDiffByQtsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityDiffByQtsReq.ProtoReflect.Descriptor instead.
func (*GetSecurityDiffByQtsReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{8}
}

func (x *GetSecurityDiffByQtsReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *GetSecurityDiffByQtsReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *GetSecurityDiffByQtsReq) GetQts() int32 {
	if x != nil {
		return x.Qts
	}
	return 0
}

func (x *GetSecurityDiffByQtsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetSecurityDiffByQtsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode GetSecurityDiffByQtsResult_ErrorCode `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3,enum=imsecuritychatserver.GetSecurityDiffByQtsResult_ErrorCode" json:"err_code,omitempty"` //错误码
	Update  [][]byte                             `protobuf:"bytes,2,rep,name=update,proto3" json:"update,omitempty"`
}

func (x *GetSecurityDiffByQtsResult) Reset() {
	*x = GetSecurityDiffByQtsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityDiffByQtsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityDiffByQtsResult) ProtoMessage() {}

func (x *GetSecurityDiffByQtsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityDiffByQtsResult.ProtoReflect.Descriptor instead.
func (*GetSecurityDiffByQtsResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{9}
}

func (x *GetSecurityDiffByQtsResult) GetErrCode() GetSecurityDiffByQtsResult_ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return GetSecurityDiffByQtsResult_Success
}

func (x *GetSecurityDiffByQtsResult) GetUpdate() [][]byte {
	if x != nil {
		return x.Update
	}
	return nil
}

type CheckSecurityChatExistReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *CheckSecurityChatExistReq) Reset() {
	*x = CheckSecurityChatExistReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSecurityChatExistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSecurityChatExistReq) ProtoMessage() {}

func (x *CheckSecurityChatExistReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSecurityChatExistReq.ProtoReflect.Descriptor instead.
func (*CheckSecurityChatExistReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{10}
}

func (x *CheckSecurityChatExistReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

type CheckSecurityChatExistResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CheckSecurityChatExistResult) Reset() {
	*x = CheckSecurityChatExistResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSecurityChatExistResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSecurityChatExistResult) ProtoMessage() {}

func (x *CheckSecurityChatExistResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSecurityChatExistResult.ProtoReflect.Descriptor instead.
func (*CheckSecurityChatExistResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{11}
}

func (x *CheckSecurityChatExistResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CheckEncryChatAcceptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *CheckEncryChatAcceptReq) Reset() {
	*x = CheckEncryChatAcceptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckEncryChatAcceptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckEncryChatAcceptReq) ProtoMessage() {}

func (x *CheckEncryChatAcceptReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckEncryChatAcceptReq.ProtoReflect.Descriptor instead.
func (*CheckEncryChatAcceptReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{12}
}

func (x *CheckEncryChatAcceptReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

type CheckEncryChatAcceptResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CheckEncryChatAcceptResult) Reset() {
	*x = CheckEncryChatAcceptResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckEncryChatAcceptResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckEncryChatAcceptResult) ProtoMessage() {}

func (x *CheckEncryChatAcceptResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckEncryChatAcceptResult.ProtoReflect.Descriptor instead.
func (*CheckEncryChatAcceptResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{13}
}

func (x *CheckEncryChatAcceptResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 获取加密聊天的randomId的请求
type GetSecurityRandomIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId     int64         `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`    //取消方的端的标识
	MaxQts    int32         `protobuf:"varint,2,opt,name=max_qts,json=maxQts,proto3" json:"max_qts,omitempty"` //获取需要的qts
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	ObjBin    []byte        `protobuf:"bytes,4,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     uint32        `protobuf:"varint,5,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64         `protobuf:"varint,6,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *GetSecurityRandomIdsReq) Reset() {
	*x = GetSecurityRandomIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityRandomIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityRandomIdsReq) ProtoMessage() {}

func (x *GetSecurityRandomIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityRandomIdsReq.ProtoReflect.Descriptor instead.
func (*GetSecurityRandomIdsReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{14}
}

func (x *GetSecurityRandomIdsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *GetSecurityRandomIdsReq) GetMaxQts() int32 {
	if x != nil {
		return x.MaxQts
	}
	return 0
}

func (x *GetSecurityRandomIdsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *GetSecurityRandomIdsReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *GetSecurityRandomIdsReq) GetCrcId() uint32 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *GetSecurityRandomIdsReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// 获取加密聊天的randomId 们的返回值
type GetSecurityRandomIdsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errcode   GetSecurityRandomIdsResult_ErrorCode `protobuf:"varint,1,opt,name=errcode,proto3,enum=imsecuritychatserver.GetSecurityRandomIdsResult_ErrorCode" json:"errcode,omitempty"` //错误码
	RandomIds []int64                              `protobuf:"varint,2,rep,packed,name=random_ids,json=randomIds,proto3" json:"random_ids,omitempty"`                                    //查询到的Id的列表
}

func (x *GetSecurityRandomIdsResult) Reset() {
	*x = GetSecurityRandomIdsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityRandomIdsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityRandomIdsResult) ProtoMessage() {}

func (x *GetSecurityRandomIdsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityRandomIdsResult.ProtoReflect.Descriptor instead.
func (*GetSecurityRandomIdsResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{15}
}

func (x *GetSecurityRandomIdsResult) GetErrcode() GetSecurityRandomIdsResult_ErrorCode {
	if x != nil {
		return x.Errcode
	}
	return GetSecurityRandomIdsResult_Success
}

func (x *GetSecurityRandomIdsResult) GetRandomIds() []int64 {
	if x != nil {
		return x.RandomIds
	}
	return nil
}

// LogOut后删除所有的加密聊天的请求
type LogoutDisCardAllSecurityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //取消方的用户的Id
	KeyId     int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`    //取消方的端的标识
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	ObjBin    []byte        `protobuf:"bytes,4,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     uint32        `protobuf:"varint,5,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64         `protobuf:"varint,6,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *LogoutDisCardAllSecurityReq) Reset() {
	*x = LogoutDisCardAllSecurityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutDisCardAllSecurityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutDisCardAllSecurityReq) ProtoMessage() {}

func (x *LogoutDisCardAllSecurityReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutDisCardAllSecurityReq.ProtoReflect.Descriptor instead.
func (*LogoutDisCardAllSecurityReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{16}
}

func (x *LogoutDisCardAllSecurityReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LogoutDisCardAllSecurityReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *LogoutDisCardAllSecurityReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *LogoutDisCardAllSecurityReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *LogoutDisCardAllSecurityReq) GetCrcId() uint32 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *LogoutDisCardAllSecurityReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// LogOut后删除所有的加密聊天的返回
type LogoutDisCardAllSecurityResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errcode LogoutDisCardAllSecurityResult_ErrorCode `protobuf:"varint,1,opt,name=errcode,proto3,enum=imsecuritychatserver.LogoutDisCardAllSecurityResult_ErrorCode" json:"errcode,omitempty"`
}

func (x *LogoutDisCardAllSecurityResult) Reset() {
	*x = LogoutDisCardAllSecurityResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutDisCardAllSecurityResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutDisCardAllSecurityResult) ProtoMessage() {}

func (x *LogoutDisCardAllSecurityResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutDisCardAllSecurityResult.ProtoReflect.Descriptor instead.
func (*LogoutDisCardAllSecurityResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{17}
}

func (x *LogoutDisCardAllSecurityResult) GetErrcode() LogoutDisCardAllSecurityResult_ErrorCode {
	if x != nil {
		return x.Errcode
	}
	return LogoutDisCardAllSecurityResult_Success
}

// 加密聊天settyping状态
type SetEncryptedTypingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //阅读消息方的Id
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                //阅读方的端标识
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`             //所读的加密聊天的Id
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //加密聊天哈希值
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
	ObjBin     []byte        `protobuf:"bytes,6,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId      uint32        `protobuf:"varint,7,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId  int64         `protobuf:"varint,8,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *SetEncryptedTypingReq) Reset() {
	*x = SetEncryptedTypingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEncryptedTypingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEncryptedTypingReq) ProtoMessage() {}

func (x *SetEncryptedTypingReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEncryptedTypingReq.ProtoReflect.Descriptor instead.
func (*SetEncryptedTypingReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{18}
}

func (x *SetEncryptedTypingReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetEncryptedTypingReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SetEncryptedTypingReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *SetEncryptedTypingReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *SetEncryptedTypingReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SetEncryptedTypingReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *SetEncryptedTypingReq) GetCrcId() uint32 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *SetEncryptedTypingReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// 加密聊天settyping返回
type SetEncryptedTypingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode SetEncryptedTypingResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=imsecuritychatserver.SetEncryptedTypingResult_Errcode" json:"error_code,omitempty"` //返回错误码
}

func (x *SetEncryptedTypingResult) Reset() {
	*x = SetEncryptedTypingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEncryptedTypingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEncryptedTypingResult) ProtoMessage() {}

func (x *SetEncryptedTypingResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEncryptedTypingResult.ProtoReflect.Descriptor instead.
func (*SetEncryptedTypingResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{19}
}

func (x *SetEncryptedTypingResult) GetErrorCode() SetEncryptedTypingResult_Errcode {
	if x != nil {
		return x.ErrorCode
	}
	return SetEncryptedTypingResult_Success
}

// 加密聊天双钩的请求
type ReadEncryptedHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //阅读消息方的Id
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                //阅读方的端标识
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`             //所读的加密聊天的Id
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //加密聊天哈希值
	MaxDate    int32         `protobuf:"varint,5,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
	ObjBin     []byte        `protobuf:"bytes,7,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId      uint32        `protobuf:"varint,8,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId  int64         `protobuf:"varint,9,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *ReadEncryptedHistoryReq) Reset() {
	*x = ReadEncryptedHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadEncryptedHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadEncryptedHistoryReq) ProtoMessage() {}

func (x *ReadEncryptedHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadEncryptedHistoryReq.ProtoReflect.Descriptor instead.
func (*ReadEncryptedHistoryReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{20}
}

func (x *ReadEncryptedHistoryReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReadEncryptedHistoryReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReadEncryptedHistoryReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReadEncryptedHistoryReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReadEncryptedHistoryReq) GetMaxDate() int32 {
	if x != nil {
		return x.MaxDate
	}
	return 0
}

func (x *ReadEncryptedHistoryReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReadEncryptedHistoryReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *ReadEncryptedHistoryReq) GetCrcId() uint32 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *ReadEncryptedHistoryReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// 加密聊天双钩的返回
type ReadEncryptedHistoryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ReadEncryptedHistoryResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=imsecuritychatserver.ReadEncryptedHistoryResult_Errcode" json:"error_code,omitempty"` //返回错误码
}

func (x *ReadEncryptedHistoryResult) Reset() {
	*x = ReadEncryptedHistoryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadEncryptedHistoryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadEncryptedHistoryResult) ProtoMessage() {}

func (x *ReadEncryptedHistoryResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadEncryptedHistoryResult.ProtoReflect.Descriptor instead.
func (*ReadEncryptedHistoryResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{21}
}

func (x *ReadEncryptedHistoryResult) GetErrorCode() ReadEncryptedHistoryResult_Errcode {
	if x != nil {
		return x.ErrorCode
	}
	return ReadEncryptedHistoryResult_Success
}

// 加密聊天取消请求
type DiscardEncryptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //取消方的用户的Id
	KeyId     int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`    //取消方的端的标识
	ChatId    int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"` //需要取消的加密聊天id
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	ObjBin    []byte        `protobuf:"bytes,5,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     uint32        `protobuf:"varint,6,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64         `protobuf:"varint,7,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *DiscardEncryptionReq) Reset() {
	*x = DiscardEncryptionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardEncryptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardEncryptionReq) ProtoMessage() {}

func (x *DiscardEncryptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardEncryptionReq.ProtoReflect.Descriptor instead.
func (*DiscardEncryptionReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{22}
}

func (x *DiscardEncryptionReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DiscardEncryptionReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *DiscardEncryptionReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *DiscardEncryptionReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *DiscardEncryptionReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *DiscardEncryptionReq) GetCrcId() uint32 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *DiscardEncryptionReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// 加密聊天取消返回
type DiscardEncryptionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode DiscardEncryptionResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=imsecuritychatserver.DiscardEncryptionResult_Errcode" json:"error_code,omitempty"` //返回错误码
}

func (x *DiscardEncryptionResult) Reset() {
	*x = DiscardEncryptionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardEncryptionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardEncryptionResult) ProtoMessage() {}

func (x *DiscardEncryptionResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardEncryptionResult.ProtoReflect.Descriptor instead.
func (*DiscardEncryptionResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{23}
}

func (x *DiscardEncryptionResult) GetErrorCode() DiscardEncryptionResult_Errcode {
	if x != nil {
		return x.ErrorCode
	}
	return DiscardEncryptionResult_Success
}

// 发送加密聊天发送service请求
type SendEncryptedServiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendId     int32         `protobuf:"varint,1,opt,name=send_id,json=sendId,proto3" json:"send_id,omitempty"`             //消息发送者的Id
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                //消息发送者的key_id
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`             //加密聊天的id
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //加密聊天哈希值
	RandomId   int64         `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`       //消息的randmon_id
	Data       []byte        `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`                                //加密聊天的发送的加密消息
	Debug      *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
	ObjBin     []byte        `protobuf:"bytes,8,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId      uint32        `protobuf:"varint,9,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId  int64         `protobuf:"varint,10,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *SendEncryptedServiceReq) Reset() {
	*x = SendEncryptedServiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEncryptedServiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEncryptedServiceReq) ProtoMessage() {}

func (x *SendEncryptedServiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEncryptedServiceReq.ProtoReflect.Descriptor instead.
func (*SendEncryptedServiceReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{24}
}

func (x *SendEncryptedServiceReq) GetSendId() int32 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *SendEncryptedServiceReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SendEncryptedServiceReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *SendEncryptedServiceReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *SendEncryptedServiceReq) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *SendEncryptedServiceReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendEncryptedServiceReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SendEncryptedServiceReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *SendEncryptedServiceReq) GetCrcId() uint32 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *SendEncryptedServiceReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// 发送加密聊天发送service的返回
type SendEncryptedServiceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode SendEncryptedServiceResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=imsecuritychatserver.SendEncryptedServiceResult_Errcode" json:"error_code,omitempty"` //返回错误码
}

func (x *SendEncryptedServiceResult) Reset() {
	*x = SendEncryptedServiceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEncryptedServiceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEncryptedServiceResult) ProtoMessage() {}

func (x *SendEncryptedServiceResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEncryptedServiceResult.ProtoReflect.Descriptor instead.
func (*SendEncryptedServiceResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{25}
}

func (x *SendEncryptedServiceResult) GetErrorCode() SendEncryptedServiceResult_Errcode {
	if x != nil {
		return x.ErrorCode
	}
	return SendEncryptedServiceResult_Success
}

// 发送加密聊天媒体消息
type SendEncryptedFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendId     int32         `protobuf:"varint,1,opt,name=send_id,json=sendId,proto3" json:"send_id,omitempty"`             //消息发送者的Id
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                //消息发送者的key_id
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`             //加密聊天的id
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //加密聊天哈希值
	RandomId   int64         `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`       //消息的randmon_id
	Data       []byte        `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`                                //加密聊天的发送的加密消息
	File       []byte        `protobuf:"bytes,7,opt,name=file,proto3" json:"file,omitempty"`                                //加密聊天文件信息 mtproto.TL 的二进制
	Debug      *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
	ObjBin     []byte        `protobuf:"bytes,9,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId      uint32        `protobuf:"varint,10,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId  int64         `protobuf:"varint,11,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *SendEncryptedFileReq) Reset() {
	*x = SendEncryptedFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEncryptedFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEncryptedFileReq) ProtoMessage() {}

func (x *SendEncryptedFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEncryptedFileReq.ProtoReflect.Descriptor instead.
func (*SendEncryptedFileReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{26}
}

func (x *SendEncryptedFileReq) GetSendId() int32 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *SendEncryptedFileReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SendEncryptedFileReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *SendEncryptedFileReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *SendEncryptedFileReq) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *SendEncryptedFileReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendEncryptedFileReq) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *SendEncryptedFileReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SendEncryptedFileReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *SendEncryptedFileReq) GetCrcId() uint32 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *SendEncryptedFileReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// 发送媒体消息的返回
type SendEncryptedFileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode SendEncryptedFileResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=imsecuritychatserver.SendEncryptedFileResult_Errcode" json:"error_code,omitempty"` //返回错误码
}

func (x *SendEncryptedFileResult) Reset() {
	*x = SendEncryptedFileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEncryptedFileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEncryptedFileResult) ProtoMessage() {}

func (x *SendEncryptedFileResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEncryptedFileResult.ProtoReflect.Descriptor instead.
func (*SendEncryptedFileResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{27}
}

func (x *SendEncryptedFileResult) GetErrorCode() SendEncryptedFileResult_Errcode {
	if x != nil {
		return x.ErrorCode
	}
	return SendEncryptedFileResult_Success
}

// 发送加密聊天发送普通文本消息的请求
type SendEncryptedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendId     int32         `protobuf:"varint,1,opt,name=send_id,json=sendId,proto3" json:"send_id,omitempty"`             //消息发送者的Id
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                //消息发送者的key_id
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`             //加密聊天的id
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //加密聊天哈希值
	RandomId   int64         `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`       //消息的randmon_id
	Data       []byte        `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`                                //加密聊天的发送的加密消息
	Debug      *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
	ObjBin     []byte        `protobuf:"bytes,8,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId      uint32        `protobuf:"varint,9,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId  int64         `protobuf:"varint,10,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *SendEncryptedReq) Reset() {
	*x = SendEncryptedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEncryptedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEncryptedReq) ProtoMessage() {}

func (x *SendEncryptedReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEncryptedReq.ProtoReflect.Descriptor instead.
func (*SendEncryptedReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{28}
}

func (x *SendEncryptedReq) GetSendId() int32 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *SendEncryptedReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SendEncryptedReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *SendEncryptedReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *SendEncryptedReq) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *SendEncryptedReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendEncryptedReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SendEncryptedReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *SendEncryptedReq) GetCrcId() uint32 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *SendEncryptedReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// 发送加密聊天发送普通文本消息的返回
type SendEncryptedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode SendEncryptedResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=imsecuritychatserver.SendEncryptedResult_Errcode" json:"error_code,omitempty"` //返回错误码
}

func (x *SendEncryptedResult) Reset() {
	*x = SendEncryptedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEncryptedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEncryptedResult) ProtoMessage() {}

func (x *SendEncryptedResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEncryptedResult.ProtoReflect.Descriptor instead.
func (*SendEncryptedResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{29}
}

func (x *SendEncryptedResult) GetErrorCode() SendEncryptedResult_Errcode {
	if x != nil {
		return x.ErrorCode
	}
	return SendEncryptedResult_Success
}

// B端接收的请求
type AcceptEncryptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipartId    int32         `protobuf:"varint,1,opt,name=participart_id,json=participartId,proto3" json:"participart_id,omitempty"` //加密聊天请求接收者的Id
	ParticipartKeyId int64         `protobuf:"varint,2,opt,name=participart_key_id,json=participartKeyId,proto3" json:"participart_key_id,omitempty"`
	ChatId           int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                         //加密聊天的聊天id
	AccessHash       int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`             //加密聊天的哈希值
	GB               []byte        `protobuf:"bytes,5,opt,name=G_b,json=GB,proto3" json:"G_b,omitempty"`                                      //接收方的公钥
	KeyFingerprint   int64         `protobuf:"varint,6,opt,name=Key_fingerprint,json=KeyFingerprint,proto3" json:"Key_fingerprint,omitempty"` //加密聊天的指纹
	Debug            *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
	ObjBin           []byte        `protobuf:"bytes,8,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId            uint32        `protobuf:"varint,9,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId        int64         `protobuf:"varint,10,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *AcceptEncryptionReq) Reset() {
	*x = AcceptEncryptionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptEncryptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptEncryptionReq) ProtoMessage() {}

func (x *AcceptEncryptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptEncryptionReq.ProtoReflect.Descriptor instead.
func (*AcceptEncryptionReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{30}
}

func (x *AcceptEncryptionReq) GetParticipartId() int32 {
	if x != nil {
		return x.ParticipartId
	}
	return 0
}

func (x *AcceptEncryptionReq) GetParticipartKeyId() int64 {
	if x != nil {
		return x.ParticipartKeyId
	}
	return 0
}

func (x *AcceptEncryptionReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *AcceptEncryptionReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *AcceptEncryptionReq) GetGB() []byte {
	if x != nil {
		return x.GB
	}
	return nil
}

func (x *AcceptEncryptionReq) GetKeyFingerprint() int64 {
	if x != nil {
		return x.KeyFingerprint
	}
	return 0
}

func (x *AcceptEncryptionReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *AcceptEncryptionReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *AcceptEncryptionReq) GetCrcId() uint32 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *AcceptEncryptionReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// B端接收的请求的返回
type AcceptEncryptionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId         int32                          `protobuf:"varint,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`                                                                //发起者的ID
	GAOrB           []byte                         `protobuf:"bytes,2,opt,name=G_a_or_b,json=GAOrB,proto3" json:"G_a_or_b,omitempty"`                                                                   //GA 发起方的秘钥
	KeyFingerPrint2 int64                          `protobuf:"varint,3,opt,name=keyFingerPrint2,proto3" json:"keyFingerPrint2,omitempty"`                                                               //指纹(不是劫持流程就是原来的指纹)
	ChatId          int32                          `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                                                                   //机密聊天 的Id
	AccessHash      int64                          `protobuf:"varint,5,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`                                                       //加密聊天的哈希值
	ErrorCode       AcceptEncryptionResult_Errcode `protobuf:"varint,6,opt,name=error_code,json=errorCode,proto3,enum=imsecuritychatserver.AcceptEncryptionResult_Errcode" json:"error_code,omitempty"` //返回错误码
}

func (x *AcceptEncryptionResult) Reset() {
	*x = AcceptEncryptionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptEncryptionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptEncryptionResult) ProtoMessage() {}

func (x *AcceptEncryptionResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptEncryptionResult.ProtoReflect.Descriptor instead.
func (*AcceptEncryptionResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{31}
}

func (x *AcceptEncryptionResult) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *AcceptEncryptionResult) GetGAOrB() []byte {
	if x != nil {
		return x.GAOrB
	}
	return nil
}

func (x *AcceptEncryptionResult) GetKeyFingerPrint2() int64 {
	if x != nil {
		return x.KeyFingerPrint2
	}
	return 0
}

func (x *AcceptEncryptionResult) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *AcceptEncryptionResult) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *AcceptEncryptionResult) GetErrorCode() AcceptEncryptionResult_Errcode {
	if x != nil {
		return x.ErrorCode
	}
	return AcceptEncryptionResult_Success
}

// 发起加密聊天请求
type RequestEncryptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId       int32         `protobuf:"varint,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`                   //发起者的ID
	AdminKeyId    int64         `protobuf:"varint,2,opt,name=admin_key_id,json=adminKeyId,proto3" json:"admin_key_id,omitempty"`        //发起方的端标识
	ParticipantId int32         `protobuf:"varint,3,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"` //被邀请者的ID
	AccessHash    int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`          //被邀请者的用户的哈希值
	GA            []byte        `protobuf:"bytes,5,opt,name=g_a,json=gA,proto3" json:"g_a,omitempty"`                                   //发起方的指纹
	Debug         *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
	ObjBin        []byte        `protobuf:"bytes,7,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId         uint32        `protobuf:"varint,8,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId     int64         `protobuf:"varint,9,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *RequestEncryptionReq) Reset() {
	*x = RequestEncryptionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestEncryptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestEncryptionReq) ProtoMessage() {}

func (x *RequestEncryptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestEncryptionReq.ProtoReflect.Descriptor instead.
func (*RequestEncryptionReq) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{32}
}

func (x *RequestEncryptionReq) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *RequestEncryptionReq) GetAdminKeyId() int64 {
	if x != nil {
		return x.AdminKeyId
	}
	return 0
}

func (x *RequestEncryptionReq) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *RequestEncryptionReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *RequestEncryptionReq) GetGA() []byte {
	if x != nil {
		return x.GA
	}
	return nil
}

func (x *RequestEncryptionReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *RequestEncryptionReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *RequestEncryptionReq) GetCrcId() uint32 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *RequestEncryptionReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// 发起加密聊天的返回结果
type RequestEncryptionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId     int32                            `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                                                    //加密聊天的id
	AccessHash int64                            `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`                                        // 加密聊天的哈希值
	ErrorCode  RequestEncryptionResult_ErroCode `protobuf:"varint,3,opt,name=errorCode,proto3,enum=imsecuritychatserver.RequestEncryptionResult_ErroCode" json:"errorCode,omitempty"` //错误码
}

func (x *RequestEncryptionResult) Reset() {
	*x = RequestEncryptionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imsecuritychat_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestEncryptionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestEncryptionResult) ProtoMessage() {}

func (x *RequestEncryptionResult) ProtoReflect() protoreflect.Message {
	mi := &file_imsecuritychat_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestEncryptionResult.ProtoReflect.Descriptor instead.
func (*RequestEncryptionResult) Descriptor() ([]byte, []int) {
	return file_imsecuritychat_proto_rawDescGZIP(), []int{33}
}

func (x *RequestEncryptionResult) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *RequestEncryptionResult) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *RequestEncryptionResult) GetErrorCode() RequestEncryptionResult_ErroCode {
	if x != nil {
		return x.ErrorCode
	}
	return RequestEncryptionResult_SusscessFull
}

var File_imsecuritychat_proto protoreflect.FileDescriptor

var file_imsecuritychat_proto_rawDesc = []byte{
	0x0a, 0x14, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x13, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd6, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0xa8, 0x02, 0x0a, 0x08, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22, 0x31, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x08,
	0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f,
	0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x22, 0x24, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x22, 0x4e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x24, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x22, 0x65, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x22, 0x46, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x51, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x71, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xb1, 0x01, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x69, 0x66, 0x66, 0x42,
	0x79, 0x51, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x69,
	0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x66, 0x66, 0x42, 0x79, 0x51, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x24, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x22,
	0x34, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x32, 0x0a,
	0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x43, 0x68, 0x61, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x22, 0x34, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x43,
	0x68, 0x61, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61,
	0x78, 0x5f, 0x71, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78,
	0x51, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f,
	0x62, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69,
	0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x22, 0x24, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x01, 0x22, 0xc1, 0x01, 0x0a, 0x1b, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x43,
	0x61, 0x72, 0x64, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x1e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x44, 0x69, 0x73, 0x43, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x69, 0x6d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x43, 0x61, 0x72, 0x64, 0x41, 0x6c,
	0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x24, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x22, 0xf5, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x22, 0xa8, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68,
	0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x35, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x45, 0x72, 0x72, 0x10, 0x02, 0x22, 0x92, 0x02, 0x0a, 0x17,
	0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x22, 0xac, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x57, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x35, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x45, 0x72, 0x72, 0x10, 0x02, 0x22,
	0xd3, 0x01, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x54, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x35, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x45, 0x72, 0x72, 0x10, 0x03, 0x22, 0xa8,
	0x02, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62,
	0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xd3, 0x01, 0x0a, 0x1a, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x69,
	0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45,
	0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x5c, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x45, 0x72, 0x72, 0x10, 0x04, 0x22,
	0xb9, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x17,
	0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x69, 0x6d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5c, 0x0a,
	0x07, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x74, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x45, 0x72, 0x72, 0x10, 0x04, 0x22, 0xa1, 0x02, 0x0a, 0x10,
	0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22,
	0xc5, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x69, 0x6d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5c, 0x0a, 0x07, 0x45, 0x72, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x62, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x45, 0x72, 0x72, 0x10, 0x04, 0x22, 0xd2, 0x02, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0f,
	0x0a, 0x03, 0x47, 0x5f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x47, 0x42, 0x12,
	0x27, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xe4, 0x02, 0x0a,
	0x16, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x08, 0x47, 0x5f, 0x61, 0x5f, 0x6f, 0x72, 0x5f, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x47, 0x41, 0x4f, 0x72, 0x42, 0x12, 0x28, 0x0a, 0x0f, 0x6b,
	0x65, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x53, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x5d, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x45, 0x72,
	0x72, 0x10, 0x04, 0x22, 0xa0, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x0f, 0x0a, 0x03, 0x67, 0x5f, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x67, 0x41, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x54, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x62, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x75, 0x73, 0x73, 0x63, 0x65, 0x73, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x49, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x10, 0x04, 0x32, 0xd7, 0x0e, 0x0a, 0x14, 0x49, 0x6d, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x67, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x69,
	0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x5f, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68,
	0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x14, 0x53, 0x65, 0x6e,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x2d, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68,
	0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e,
	0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x6d, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x2e, 0x69, 0x6d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x69, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x18,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x43, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x6c,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x31, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x43, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x6c,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x34, 0x2e, 0x69, 0x6d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x43, 0x61, 0x72, 0x64,
	0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x2e, 0x69, 0x6d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x69, 0x6d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x79,
	0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x43, 0x68, 0x61, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x2d, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x43, 0x68, 0x61, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x43, 0x68, 0x61, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x16, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x51,
	0x74, 0x73, 0x12, 0x2d, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x51, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x30, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68,
	0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x51, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x69,
	0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x69, 0x6d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x88, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x32, 0x2e, 0x69, 0x6d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x35, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e,
	0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x42, 0x26, 0x5a, 0x24, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x63, 0x68,
	0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_imsecuritychat_proto_rawDescOnce sync.Once
	file_imsecuritychat_proto_rawDescData = file_imsecuritychat_proto_rawDesc
)

func file_imsecuritychat_proto_rawDescGZIP() []byte {
	file_imsecuritychat_proto_rawDescOnce.Do(func() {
		file_imsecuritychat_proto_rawDescData = protoimpl.X.CompressGZIP(file_imsecuritychat_proto_rawDescData)
	})
	return file_imsecuritychat_proto_rawDescData
}

var file_imsecuritychat_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_imsecuritychat_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_imsecuritychat_proto_goTypes = []interface{}{
	(GetChatInfoByChatIdResult_ResultCode)(0),      // 0: imsecuritychatserver.GetChatInfoByChatIdResult.ResultCode
	(GetAllChatIdByUserIdKeyIdResult_ErrorCode)(0), // 1: imsecuritychatserver.GetAllChatIdByUserIdKeyIdResult.ErrorCode
	(GetHandshakeUpdatesResult_ErrorCode)(0),       // 2: imsecuritychatserver.GetHandshakeUpdatesResult.ErrorCode
	(GetSecurityDiffByQtsResult_ErrorCode)(0),      // 3: imsecuritychatserver.GetSecurityDiffByQtsResult.ErrorCode
	(GetSecurityRandomIdsResult_ErrorCode)(0),      // 4: imsecuritychatserver.GetSecurityRandomIdsResult.ErrorCode
	(LogoutDisCardAllSecurityResult_ErrorCode)(0),  // 5: imsecuritychatserver.LogoutDisCardAllSecurityResult.ErrorCode
	(SetEncryptedTypingResult_Errcode)(0),          // 6: imsecuritychatserver.SetEncryptedTypingResult.Errcode
	(ReadEncryptedHistoryResult_Errcode)(0),        // 7: imsecuritychatserver.ReadEncryptedHistoryResult.Errcode
	(DiscardEncryptionResult_Errcode)(0),           // 8: imsecuritychatserver.DiscardEncryptionResult.Errcode
	(SendEncryptedServiceResult_Errcode)(0),        // 9: imsecuritychatserver.SendEncryptedServiceResult.Errcode
	(SendEncryptedFileResult_Errcode)(0),           // 10: imsecuritychatserver.SendEncryptedFileResult.Errcode
	(SendEncryptedResult_Errcode)(0),               // 11: imsecuritychatserver.SendEncryptedResult.Errcode
	(AcceptEncryptionResult_Errcode)(0),            // 12: imsecuritychatserver.AcceptEncryptionResult.Errcode
	(RequestEncryptionResult_ErroCode)(0),          // 13: imsecuritychatserver.RequestEncryptionResult.ErroCode
	(*GetChatInfoByChatIdResult)(nil),              // 14: imsecuritychatserver.GetChatInfoByChatIdResult
	(*ChatInfo)(nil),                               // 15: imsecuritychatserver.ChatInfo
	(*GetChatInfoByChatIdReq)(nil),                 // 16: imsecuritychatserver.GetChatInfoByChatIdReq
	(*GetAllChatIdByUserIdKeyIdResult)(nil),        // 17: imsecuritychatserver.GetAllChatIdByUserIdKeyIdResult
	(*GetAllChatIdByUserIdKeyIdReq)(nil),           // 18: imsecuritychatserver.GetAllChatIdByUserIdKeyIdReq
	(*GetHandshakeUpdatesResult)(nil),              // 19: imsecuritychatserver.GetHandshakeUpdatesResult
	(*GetHandshakeUpdatesReq)(nil),                 // 20: imsecuritychatserver.GetHandshakeUpdatesReq
	(*SecurityResult)(nil),                         // 21: imsecuritychatserver.SecurityResult
	(*GetSecurityDiffByQtsReq)(nil),                // 22: imsecuritychatserver.GetSecurityDiffByQtsReq
	(*GetSecurityDiffByQtsResult)(nil),             // 23: imsecuritychatserver.GetSecurityDiffByQtsResult
	(*CheckSecurityChatExistReq)(nil),              // 24: imsecuritychatserver.CheckSecurityChatExistReq
	(*CheckSecurityChatExistResult)(nil),           // 25: imsecuritychatserver.CheckSecurityChatExistResult
	(*CheckEncryChatAcceptReq)(nil),                // 26: imsecuritychatserver.CheckEncryChatAcceptReq
	(*CheckEncryChatAcceptResult)(nil),             // 27: imsecuritychatserver.CheckEncryChatAcceptResult
	(*GetSecurityRandomIdsReq)(nil),                // 28: imsecuritychatserver.GetSecurityRandomIdsReq
	(*GetSecurityRandomIdsResult)(nil),             // 29: imsecuritychatserver.GetSecurityRandomIdsResult
	(*LogoutDisCardAllSecurityReq)(nil),            // 30: imsecuritychatserver.LogoutDisCardAllSecurityReq
	(*LogoutDisCardAllSecurityResult)(nil),         // 31: imsecuritychatserver.LogoutDisCardAllSecurityResult
	(*SetEncryptedTypingReq)(nil),                  // 32: imsecuritychatserver.SetEncryptedTypingReq
	(*SetEncryptedTypingResult)(nil),               // 33: imsecuritychatserver.SetEncryptedTypingResult
	(*ReadEncryptedHistoryReq)(nil),                // 34: imsecuritychatserver.ReadEncryptedHistoryReq
	(*ReadEncryptedHistoryResult)(nil),             // 35: imsecuritychatserver.ReadEncryptedHistoryResult
	(*DiscardEncryptionReq)(nil),                   // 36: imsecuritychatserver.DiscardEncryptionReq
	(*DiscardEncryptionResult)(nil),                // 37: imsecuritychatserver.DiscardEncryptionResult
	(*SendEncryptedServiceReq)(nil),                // 38: imsecuritychatserver.SendEncryptedServiceReq
	(*SendEncryptedServiceResult)(nil),             // 39: imsecuritychatserver.SendEncryptedServiceResult
	(*SendEncryptedFileReq)(nil),                   // 40: imsecuritychatserver.SendEncryptedFileReq
	(*SendEncryptedFileResult)(nil),                // 41: imsecuritychatserver.SendEncryptedFileResult
	(*SendEncryptedReq)(nil),                       // 42: imsecuritychatserver.SendEncryptedReq
	(*SendEncryptedResult)(nil),                    // 43: imsecuritychatserver.SendEncryptedResult
	(*AcceptEncryptionReq)(nil),                    // 44: imsecuritychatserver.AcceptEncryptionReq
	(*AcceptEncryptionResult)(nil),                 // 45: imsecuritychatserver.AcceptEncryptionResult
	(*RequestEncryptionReq)(nil),                   // 46: imsecuritychatserver.RequestEncryptionReq
	(*RequestEncryptionResult)(nil),                // 47: imsecuritychatserver.RequestEncryptionResult
	(*pbcomm.Debug)(nil),                           // 48: pbcomm.Debug
}
var file_imsecuritychat_proto_depIdxs = []int32{
	0,  // 0: imsecuritychatserver.GetChatInfoByChatIdResult.code:type_name -> imsecuritychatserver.GetChatInfoByChatIdResult.ResultCode
	15, // 1: imsecuritychatserver.GetChatInfoByChatIdResult.chat_info:type_name -> imsecuritychatserver.ChatInfo
	1,  // 2: imsecuritychatserver.GetAllChatIdByUserIdKeyIdResult.err_code:type_name -> imsecuritychatserver.GetAllChatIdByUserIdKeyIdResult.ErrorCode
	2,  // 3: imsecuritychatserver.GetHandshakeUpdatesResult.err_code:type_name -> imsecuritychatserver.GetHandshakeUpdatesResult.ErrorCode
	48, // 4: imsecuritychatserver.GetSecurityDiffByQtsReq.debug:type_name -> pbcomm.Debug
	3,  // 5: imsecuritychatserver.GetSecurityDiffByQtsResult.err_code:type_name -> imsecuritychatserver.GetSecurityDiffByQtsResult.ErrorCode
	48, // 6: imsecuritychatserver.GetSecurityRandomIdsReq.debug:type_name -> pbcomm.Debug
	4,  // 7: imsecuritychatserver.GetSecurityRandomIdsResult.errcode:type_name -> imsecuritychatserver.GetSecurityRandomIdsResult.ErrorCode
	48, // 8: imsecuritychatserver.LogoutDisCardAllSecurityReq.debug:type_name -> pbcomm.Debug
	5,  // 9: imsecuritychatserver.LogoutDisCardAllSecurityResult.errcode:type_name -> imsecuritychatserver.LogoutDisCardAllSecurityResult.ErrorCode
	48, // 10: imsecuritychatserver.SetEncryptedTypingReq.debug:type_name -> pbcomm.Debug
	6,  // 11: imsecuritychatserver.SetEncryptedTypingResult.error_code:type_name -> imsecuritychatserver.SetEncryptedTypingResult.Errcode
	48, // 12: imsecuritychatserver.ReadEncryptedHistoryReq.debug:type_name -> pbcomm.Debug
	7,  // 13: imsecuritychatserver.ReadEncryptedHistoryResult.error_code:type_name -> imsecuritychatserver.ReadEncryptedHistoryResult.Errcode
	48, // 14: imsecuritychatserver.DiscardEncryptionReq.debug:type_name -> pbcomm.Debug
	8,  // 15: imsecuritychatserver.DiscardEncryptionResult.error_code:type_name -> imsecuritychatserver.DiscardEncryptionResult.Errcode
	48, // 16: imsecuritychatserver.SendEncryptedServiceReq.debug:type_name -> pbcomm.Debug
	9,  // 17: imsecuritychatserver.SendEncryptedServiceResult.error_code:type_name -> imsecuritychatserver.SendEncryptedServiceResult.Errcode
	48, // 18: imsecuritychatserver.SendEncryptedFileReq.debug:type_name -> pbcomm.Debug
	10, // 19: imsecuritychatserver.SendEncryptedFileResult.error_code:type_name -> imsecuritychatserver.SendEncryptedFileResult.Errcode
	48, // 20: imsecuritychatserver.SendEncryptedReq.debug:type_name -> pbcomm.Debug
	11, // 21: imsecuritychatserver.SendEncryptedResult.error_code:type_name -> imsecuritychatserver.SendEncryptedResult.Errcode
	48, // 22: imsecuritychatserver.AcceptEncryptionReq.debug:type_name -> pbcomm.Debug
	12, // 23: imsecuritychatserver.AcceptEncryptionResult.error_code:type_name -> imsecuritychatserver.AcceptEncryptionResult.Errcode
	48, // 24: imsecuritychatserver.RequestEncryptionReq.debug:type_name -> pbcomm.Debug
	13, // 25: imsecuritychatserver.RequestEncryptionResult.errorCode:type_name -> imsecuritychatserver.RequestEncryptionResult.ErroCode
	46, // 26: imsecuritychatserver.ImSecurityChatServer.RequestEncryption:input_type -> imsecuritychatserver.RequestEncryptionReq
	44, // 27: imsecuritychatserver.ImSecurityChatServer.AcceptEncryption:input_type -> imsecuritychatserver.AcceptEncryptionReq
	42, // 28: imsecuritychatserver.ImSecurityChatServer.SendEncrypted:input_type -> imsecuritychatserver.SendEncryptedReq
	40, // 29: imsecuritychatserver.ImSecurityChatServer.SendEncryptedFile:input_type -> imsecuritychatserver.SendEncryptedFileReq
	38, // 30: imsecuritychatserver.ImSecurityChatServer.SendEncryptedService:input_type -> imsecuritychatserver.SendEncryptedServiceReq
	36, // 31: imsecuritychatserver.ImSecurityChatServer.DiscardEncryption:input_type -> imsecuritychatserver.DiscardEncryptionReq
	34, // 32: imsecuritychatserver.ImSecurityChatServer.ReadEncryptedHistory:input_type -> imsecuritychatserver.ReadEncryptedHistoryReq
	32, // 33: imsecuritychatserver.ImSecurityChatServer.SetEncryptedTyping:input_type -> imsecuritychatserver.SetEncryptedTypingReq
	30, // 34: imsecuritychatserver.ImSecurityChatServer.LogoutDisCardAllSecurity:input_type -> imsecuritychatserver.LogoutDisCardAllSecurityReq
	28, // 35: imsecuritychatserver.ImSecurityChatServer.GetSecurityRandomIds:input_type -> imsecuritychatserver.GetSecurityRandomIdsReq
	26, // 36: imsecuritychatserver.ImSecurityChatServer.CheckEncryChatAccept:input_type -> imsecuritychatserver.CheckEncryChatAcceptReq
	24, // 37: imsecuritychatserver.ImSecurityChatServer.CheckSecurityChatExist:input_type -> imsecuritychatserver.CheckSecurityChatExistReq
	22, // 38: imsecuritychatserver.ImSecurityChatServer.GetSecurityDiffByQts:input_type -> imsecuritychatserver.GetSecurityDiffByQtsReq
	20, // 39: imsecuritychatserver.ImSecurityChatServer.GetHandshakeUpdates:input_type -> imsecuritychatserver.GetHandshakeUpdatesReq
	18, // 40: imsecuritychatserver.ImSecurityChatServer.GetAllChatIdByUserIdKeyId:input_type -> imsecuritychatserver.GetAllChatIdByUserIdKeyIdReq
	16, // 41: imsecuritychatserver.ImSecurityChatServer.GetChatInfoByChatId:input_type -> imsecuritychatserver.GetChatInfoByChatIdReq
	21, // 42: imsecuritychatserver.ImSecurityChatServer.RequestEncryption:output_type -> imsecuritychatserver.SecurityResult
	21, // 43: imsecuritychatserver.ImSecurityChatServer.AcceptEncryption:output_type -> imsecuritychatserver.SecurityResult
	21, // 44: imsecuritychatserver.ImSecurityChatServer.SendEncrypted:output_type -> imsecuritychatserver.SecurityResult
	21, // 45: imsecuritychatserver.ImSecurityChatServer.SendEncryptedFile:output_type -> imsecuritychatserver.SecurityResult
	21, // 46: imsecuritychatserver.ImSecurityChatServer.SendEncryptedService:output_type -> imsecuritychatserver.SecurityResult
	21, // 47: imsecuritychatserver.ImSecurityChatServer.DiscardEncryption:output_type -> imsecuritychatserver.SecurityResult
	21, // 48: imsecuritychatserver.ImSecurityChatServer.ReadEncryptedHistory:output_type -> imsecuritychatserver.SecurityResult
	21, // 49: imsecuritychatserver.ImSecurityChatServer.SetEncryptedTyping:output_type -> imsecuritychatserver.SecurityResult
	31, // 50: imsecuritychatserver.ImSecurityChatServer.LogoutDisCardAllSecurity:output_type -> imsecuritychatserver.LogoutDisCardAllSecurityResult
	29, // 51: imsecuritychatserver.ImSecurityChatServer.GetSecurityRandomIds:output_type -> imsecuritychatserver.GetSecurityRandomIdsResult
	27, // 52: imsecuritychatserver.ImSecurityChatServer.CheckEncryChatAccept:output_type -> imsecuritychatserver.CheckEncryChatAcceptResult
	25, // 53: imsecuritychatserver.ImSecurityChatServer.CheckSecurityChatExist:output_type -> imsecuritychatserver.CheckSecurityChatExistResult
	23, // 54: imsecuritychatserver.ImSecurityChatServer.GetSecurityDiffByQts:output_type -> imsecuritychatserver.GetSecurityDiffByQtsResult
	19, // 55: imsecuritychatserver.ImSecurityChatServer.GetHandshakeUpdates:output_type -> imsecuritychatserver.GetHandshakeUpdatesResult
	17, // 56: imsecuritychatserver.ImSecurityChatServer.GetAllChatIdByUserIdKeyId:output_type -> imsecuritychatserver.GetAllChatIdByUserIdKeyIdResult
	14, // 57: imsecuritychatserver.ImSecurityChatServer.GetChatInfoByChatId:output_type -> imsecuritychatserver.GetChatInfoByChatIdResult
	42, // [42:58] is the sub-list for method output_type
	26, // [26:42] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_imsecuritychat_proto_init() }
func file_imsecuritychat_proto_init() {
	if File_imsecuritychat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_imsecuritychat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatInfoByChatIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatInfoByChatIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllChatIdByUserIdKeyIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllChatIdByUserIdKeyIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHandshakeUpdatesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHandshakeUpdatesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityDiffByQtsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityDiffByQtsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSecurityChatExistReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSecurityChatExistResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckEncryChatAcceptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckEncryChatAcceptResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityRandomIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityRandomIdsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutDisCardAllSecurityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutDisCardAllSecurityResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEncryptedTypingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEncryptedTypingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadEncryptedHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadEncryptedHistoryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardEncryptionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardEncryptionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEncryptedServiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEncryptedServiceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEncryptedFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEncryptedFileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEncryptedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEncryptedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptEncryptionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptEncryptionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestEncryptionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imsecuritychat_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestEncryptionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imsecuritychat_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imsecuritychat_proto_goTypes,
		DependencyIndexes: file_imsecuritychat_proto_depIdxs,
		EnumInfos:         file_imsecuritychat_proto_enumTypes,
		MessageInfos:      file_imsecuritychat_proto_msgTypes,
	}.Build()
	File_imsecuritychat_proto = out.File
	file_imsecuritychat_proto_rawDesc = nil
	file_imsecuritychat_proto_goTypes = nil
	file_imsecuritychat_proto_depIdxs = nil
}
