// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imapigateway.proto

package imapigateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiGatewayServiceClient is the client API for ApiGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiGatewayServiceClient interface {
	// 注册用户和普通机器人信息
	RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error)
	// 注册红包机器人接口
	RegisterRedBotInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error)
	// 更新用户的username
	UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error)
	// 账号(标记删除)
	DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error)
	// 删除消息
	DeleteMessages(ctx context.Context, in *ReqDeleteMessages, opts ...grpc.CallOption) (*ReplyDeleteMessages, error)
	// 机器人调用接口
	BotCall(ctx context.Context, in *ReqBotCall, opts ...grpc.CallOption) (*ReplyBotCall, error)
	// 根据 消息id和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdMsgId(ctx context.Context, in *ReqGetMessageByUserIdMsgId, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdMsgId, error)
	// 获取full channel
	GetFullChannel(ctx context.Context, in *ReqFullchannel, opts ...grpc.CallOption) (*ReplyFullChannel, error)
	// 获取超级群或者频道的修正信息
	GetChannelDifference(ctx context.Context, in *ReqGetchannelDifference, opts ...grpc.CallOption) (*ReplyChannelDiffCommon, error)
	// 获取成员信息
	GetParticipants(ctx context.Context, in *ReqParticipants, opts ...grpc.CallOption) (*ReplyParticipants, error)
	// 获取所有群 (除去部分)
	GetAllChats(ctx context.Context, in *ReqGetAllChats, opts ...grpc.CallOption) (*ReplyGetAllChats, error)
	// 离开超级群或者频道
	LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyLeaveChannel, error)
	// 置顶超级群或者频道的消息
	UpdatePinnedChannelMessage(ctx context.Context, in *ReqUpdatePinnedChannelMessage, opts ...grpc.CallOption) (*ReplyUpdatePinnedChannelMessage, error)
	// 更新firstName,lastName和about
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error)
	// 更新机器人相关信息
	UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error)
	// 编辑超级群或者频道的标题
	EditChannelTitle(ctx context.Context, in *ReqEditChannelTitle, opts ...grpc.CallOption) (*ReplyEditChannelTitle, error)
	// 修改超级群或者频道的描述信息
	EditChannelAbout(ctx context.Context, in *ReqEditChannelAbout, opts ...grpc.CallOption) (*ReplyEditChannelAbout, error)
	// UploadFile 上传文件或文件片
	UploadFile(ctx context.Context, in *MsgUploadFileReq, opts ...grpc.CallOption) (*MsgUploadFileResp, error)
	// 网关上传文件描述信息
	GatewayUploadFileDesc(ctx context.Context, in *MsgFileDescReq, opts ...grpc.CallOption) (*MsgFileDescResp, error)
	// 发送红包
	SendRDP(ctx context.Context, in *SendRDPReq, opts ...grpc.CallOption) (*SendRDPResp, error)
	//　检查红包
	CheckRDP(ctx context.Context, in *CheckRDPReq, opts ...grpc.CallOption) (*CheckRDPResp, error)
	//　领取红包
	ReceiveRDP(ctx context.Context, in *ReceiveRDPReq, opts ...grpc.CallOption) (*ReceiveRDPResp, error)
	// 获取全部用户信息
	GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error)
	// 新增获取用户信息接口
	GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 发送红包游戏
	SendRedGame(ctx context.Context, in *SendGameRedReq, opts ...grpc.CallOption) (*GameRedResp, error)
	// 领取红包游戏
	ReceiveRedGame(ctx context.Context, in *RcvGameRedReq, opts ...grpc.CallOption) (*GameRedResp, error)
	// 查询游戏红包详情
	QueryRedGame(ctx context.Context, in *QryGameRdpReq, opts ...grpc.CallOption) (*GameRedResp, error)
	// 通过用户名获取用户Id
	GetUserIdByUserName(ctx context.Context, in *GetUserByUsernameReq, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 设置用户生日和性别
	SetUserDetail(ctx context.Context, in *SetUserDetailReq, opts ...grpc.CallOption) (*SetUserDetailResult, error)
	// 更新机器人头像请求
	UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error)
	// DownloadFile 下载文件或文件片
	DownloadFile(ctx context.Context, in *MsgDownloadFileReq, opts ...grpc.CallOption) (*MsgDownloadFileResp, error)
	// 新增支付获取游戏规则借口
	OtherTrans(ctx context.Context, in *OtherTransReq, opts ...grpc.CallOption) (*OtherTransResp, error)
	// 积分通用接口
	IntegralUniversalBusiness(ctx context.Context, in *ReqIntegralUniversalBusiness, opts ...grpc.CallOption) (*ReplyIntegralUniversalBusiness, error)
	// 获取回复消息
	GetChannelMsg(ctx context.Context, in *ReqGetChannelMessageByChannelIdMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdMsgId, error)
	// 新增官方标志设置（内部调用）
	SetBotVerified(ctx context.Context, in *SetBotVerifiedReq, opts ...grpc.CallOption) (*SetBotVerifiedReply, error)
	// 获取机器人消息Id通过uuid
	GetMessageByUserIdUuid(ctx context.Context, in *ReqGetMessageByUserIdUuid, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdUuid, error)
	// 获取多个好友的共同好友
	ContactsGetCommonContacts(ctx context.Context, in *ContactsGetCommonContactsReq, opts ...grpc.CallOption) (*ContactsGetCommonContactsResult, error)
	// 更新朋友圈通知
	UpdateMoments(ctx context.Context, in *ReqUpdateMoments, opts ...grpc.CallOption) (*ResUpdateMoments, error)
	// 获取用户联系人列表
	ContactsGetContacts(ctx context.Context, in *ContatsGetContactsReq, opts ...grpc.CallOption) (*ContatsGetContactsResult, error)
	// 根据用户Id来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
	CheckIsMuteContact(ctx context.Context, in *CheckIsMuteContactReq, opts ...grpc.CallOption) (*CheckIsMuteContactResult, error)
	// 朋友圈互动通知
	MomentNotify(ctx context.Context, in *MomentNotifyReq, opts ...grpc.CallOption) (*MomentNotifyResult, error)
	// 根据用户昵称搜索
	SearchUserByNickname(ctx context.Context, in *SearchUserByNicknameReq, opts ...grpc.CallOption) (*SearchUserByNicknameResult, error)
	// 系统号发送消息
	SendMediaSysNotify(ctx context.Context, in *SendMediaSysNotifyReq, opts ...grpc.CallOption) (*SendMediaSysNotifyResult, error)
	// 朋友圈关注用户
	MomentFollow(ctx context.Context, in *MomentFollowReq, opts ...grpc.CallOption) (*MomentFollowResp, error)
	// 检测是否是自己的好友
	CheckIsSelfContact(ctx context.Context, in *CheckIsSelfContactReq, opts ...grpc.CallOption) (*CheckIsSelfContactResult, error)
	// 新增获取用户信息
	GetUserInfoByIdArr(ctx context.Context, in *GetUserInfoByIdArrReq, opts ...grpc.CallOption) (*GetUserInfoByIdArrResult, error)
	// 获取某个群成员信息
	GetChannelUserInfo(ctx context.Context, in *GetChannelUserInfoReq, opts ...grpc.CallOption) (*GetChannelUserInfoResp, error)
	// 超级群全体禁言
	EditEveryoneQuiet(ctx context.Context, in *ReqEditEveryoneQuiet, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 禁言单个用户
	EditBanChannelUser(ctx context.Context, in *ReqEditBanChannelUser, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 通过手机号获取用户信息
	GetUserInfoByPhone(ctx context.Context, in *GetUserByphone, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 发送短信消息接口
	SendCodeMsg(ctx context.Context, in *ReqSendCodeMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 群直播开始
	GroupLiveStart(ctx context.Context, in *LiveStartReq, opts ...grpc.CallOption) (*LiveStartRsp, error)
	// 群直播结束
	GroupLiveStop(ctx context.Context, in *LiveStopReq, opts ...grpc.CallOption) (*LiveStopRsp, error)
	// 获取主播邀请链接
	GetLiveInviteUrl(ctx context.Context, in *GetLiveInviteUrlReq, opts ...grpc.CallOption) (*GetLiveInviteUrlRsp, error)
	// 获取用户名是否唯一
	CheckUserName(ctx context.Context, in *CheckUserNameReq, opts ...grpc.CallOption) (*CheckUserNameResp, error)
	// 修改直播信息
	EditLiveInfo(ctx context.Context, in *EditLiveInfoReq, opts ...grpc.CallOption) (*EditLiveInfoRsp, error)
	// 检测直播信息
	GroupLiveCheck(ctx context.Context, in *GroupLiveCheckReq, opts ...grpc.CallOption) (*GroupLiveCheckRsp, error)
	// 获取链接邀请
	GetLiveInviteCnt(ctx context.Context, in *GetLiveInviteCntReq, opts ...grpc.CallOption) (*GetLiveInviteCntRsp, error)
	//踢人出超级群或者频道
	KickFromChannel(ctx context.Context, in *ReqKickFromChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 检查用户是否是在群里
	CheckUserInGroup(ctx context.Context, in *CheckUserInGroupReq, opts ...grpc.CallOption) (*CheckUserInGroupRsp, error)
	// 推送消息通知
	LivePush(ctx context.Context, in *LivePushReq, opts ...grpc.CallOption) (*LivePushResult, error)
	// 分页获取群用户id 用于直播推送
	GetGroupUserIds(ctx context.Context, in *GetGroupUserIdsReq, opts ...grpc.CallOption) (*GetGroupUserIdsRsp, error)
}

type apiGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiGatewayServiceClient(cc grpc.ClientConnInterface) ApiGatewayServiceClient {
	return &apiGatewayServiceClient{cc}
}

func (c *apiGatewayServiceClient) RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error) {
	out := new(RegisterUserInfoResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/RegisterUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) RegisterRedBotInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error) {
	out := new(RegisterUserInfoResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/RegisterRedBotInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error) {
	out := new(UpdateuserNameResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/UpdateUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error) {
	out := new(DelAccountResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/DeleteUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) DeleteMessages(ctx context.Context, in *ReqDeleteMessages, opts ...grpc.CallOption) (*ReplyDeleteMessages, error) {
	out := new(ReplyDeleteMessages)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/DeleteMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) BotCall(ctx context.Context, in *ReqBotCall, opts ...grpc.CallOption) (*ReplyBotCall, error) {
	out := new(ReplyBotCall)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/BotCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetMessageByUserIdMsgId(ctx context.Context, in *ReqGetMessageByUserIdMsgId, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdMsgId, error) {
	out := new(ReplyGetMessageByUserIdMsgId)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetMessageByUserIdMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetFullChannel(ctx context.Context, in *ReqFullchannel, opts ...grpc.CallOption) (*ReplyFullChannel, error) {
	out := new(ReplyFullChannel)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetFullChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetChannelDifference(ctx context.Context, in *ReqGetchannelDifference, opts ...grpc.CallOption) (*ReplyChannelDiffCommon, error) {
	out := new(ReplyChannelDiffCommon)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetChannelDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetParticipants(ctx context.Context, in *ReqParticipants, opts ...grpc.CallOption) (*ReplyParticipants, error) {
	out := new(ReplyParticipants)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetAllChats(ctx context.Context, in *ReqGetAllChats, opts ...grpc.CallOption) (*ReplyGetAllChats, error) {
	out := new(ReplyGetAllChats)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetAllChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyLeaveChannel, error) {
	out := new(ReplyLeaveChannel)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/LeaveChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) UpdatePinnedChannelMessage(ctx context.Context, in *ReqUpdatePinnedChannelMessage, opts ...grpc.CallOption) (*ReplyUpdatePinnedChannelMessage, error) {
	out := new(ReplyUpdatePinnedChannelMessage)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/UpdatePinnedChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error) {
	out := new(UpdateUserProfileResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error) {
	out := new(BotUpdateInfoResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/UpdateBotInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) EditChannelTitle(ctx context.Context, in *ReqEditChannelTitle, opts ...grpc.CallOption) (*ReplyEditChannelTitle, error) {
	out := new(ReplyEditChannelTitle)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/EditChannelTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) EditChannelAbout(ctx context.Context, in *ReqEditChannelAbout, opts ...grpc.CallOption) (*ReplyEditChannelAbout, error) {
	out := new(ReplyEditChannelAbout)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/EditChannelAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) UploadFile(ctx context.Context, in *MsgUploadFileReq, opts ...grpc.CallOption) (*MsgUploadFileResp, error) {
	out := new(MsgUploadFileResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GatewayUploadFileDesc(ctx context.Context, in *MsgFileDescReq, opts ...grpc.CallOption) (*MsgFileDescResp, error) {
	out := new(MsgFileDescResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GatewayUploadFileDesc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) SendRDP(ctx context.Context, in *SendRDPReq, opts ...grpc.CallOption) (*SendRDPResp, error) {
	out := new(SendRDPResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/SendRDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) CheckRDP(ctx context.Context, in *CheckRDPReq, opts ...grpc.CallOption) (*CheckRDPResp, error) {
	out := new(CheckRDPResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/CheckRDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) ReceiveRDP(ctx context.Context, in *ReceiveRDPReq, opts ...grpc.CallOption) (*ReceiveRDPResp, error) {
	out := new(ReceiveRDPResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/ReceiveRDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error) {
	out := new(GetFullUserResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetFullUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) SendRedGame(ctx context.Context, in *SendGameRedReq, opts ...grpc.CallOption) (*GameRedResp, error) {
	out := new(GameRedResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/SendRedGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) ReceiveRedGame(ctx context.Context, in *RcvGameRedReq, opts ...grpc.CallOption) (*GameRedResp, error) {
	out := new(GameRedResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/ReceiveRedGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) QueryRedGame(ctx context.Context, in *QryGameRdpReq, opts ...grpc.CallOption) (*GameRedResp, error) {
	out := new(GameRedResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/QueryRedGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetUserIdByUserName(ctx context.Context, in *GetUserByUsernameReq, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetUserIdByUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) SetUserDetail(ctx context.Context, in *SetUserDetailReq, opts ...grpc.CallOption) (*SetUserDetailResult, error) {
	out := new(SetUserDetailResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/SetUserDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error) {
	out := new(UpdateBotPicResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/UpdateBotPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) DownloadFile(ctx context.Context, in *MsgDownloadFileReq, opts ...grpc.CallOption) (*MsgDownloadFileResp, error) {
	out := new(MsgDownloadFileResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) OtherTrans(ctx context.Context, in *OtherTransReq, opts ...grpc.CallOption) (*OtherTransResp, error) {
	out := new(OtherTransResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/OtherTrans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) IntegralUniversalBusiness(ctx context.Context, in *ReqIntegralUniversalBusiness, opts ...grpc.CallOption) (*ReplyIntegralUniversalBusiness, error) {
	out := new(ReplyIntegralUniversalBusiness)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/IntegralUniversalBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetChannelMsg(ctx context.Context, in *ReqGetChannelMessageByChannelIdMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdMsgId, error) {
	out := new(ReplyGetChannelMessageByChannelIdMsgId)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetChannelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) SetBotVerified(ctx context.Context, in *SetBotVerifiedReq, opts ...grpc.CallOption) (*SetBotVerifiedReply, error) {
	out := new(SetBotVerifiedReply)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/SetBotVerified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetMessageByUserIdUuid(ctx context.Context, in *ReqGetMessageByUserIdUuid, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdUuid, error) {
	out := new(ReplyGetMessageByUserIdUuid)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetMessageByUserIdUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) ContactsGetCommonContacts(ctx context.Context, in *ContactsGetCommonContactsReq, opts ...grpc.CallOption) (*ContactsGetCommonContactsResult, error) {
	out := new(ContactsGetCommonContactsResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/ContactsGetCommonContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) UpdateMoments(ctx context.Context, in *ReqUpdateMoments, opts ...grpc.CallOption) (*ResUpdateMoments, error) {
	out := new(ResUpdateMoments)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/UpdateMoments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) ContactsGetContacts(ctx context.Context, in *ContatsGetContactsReq, opts ...grpc.CallOption) (*ContatsGetContactsResult, error) {
	out := new(ContatsGetContactsResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/ContactsGetContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) CheckIsMuteContact(ctx context.Context, in *CheckIsMuteContactReq, opts ...grpc.CallOption) (*CheckIsMuteContactResult, error) {
	out := new(CheckIsMuteContactResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/CheckIsMuteContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) MomentNotify(ctx context.Context, in *MomentNotifyReq, opts ...grpc.CallOption) (*MomentNotifyResult, error) {
	out := new(MomentNotifyResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/MomentNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) SearchUserByNickname(ctx context.Context, in *SearchUserByNicknameReq, opts ...grpc.CallOption) (*SearchUserByNicknameResult, error) {
	out := new(SearchUserByNicknameResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/SearchUserByNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) SendMediaSysNotify(ctx context.Context, in *SendMediaSysNotifyReq, opts ...grpc.CallOption) (*SendMediaSysNotifyResult, error) {
	out := new(SendMediaSysNotifyResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/SendMediaSysNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) MomentFollow(ctx context.Context, in *MomentFollowReq, opts ...grpc.CallOption) (*MomentFollowResp, error) {
	out := new(MomentFollowResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/MomentFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) CheckIsSelfContact(ctx context.Context, in *CheckIsSelfContactReq, opts ...grpc.CallOption) (*CheckIsSelfContactResult, error) {
	out := new(CheckIsSelfContactResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/CheckIsSelfContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetUserInfoByIdArr(ctx context.Context, in *GetUserInfoByIdArrReq, opts ...grpc.CallOption) (*GetUserInfoByIdArrResult, error) {
	out := new(GetUserInfoByIdArrResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetUserInfoByIdArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetChannelUserInfo(ctx context.Context, in *GetChannelUserInfoReq, opts ...grpc.CallOption) (*GetChannelUserInfoResp, error) {
	out := new(GetChannelUserInfoResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetChannelUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) EditEveryoneQuiet(ctx context.Context, in *ReqEditEveryoneQuiet, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/EditEveryoneQuiet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) EditBanChannelUser(ctx context.Context, in *ReqEditBanChannelUser, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/EditBanChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetUserInfoByPhone(ctx context.Context, in *GetUserByphone, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetUserInfoByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) SendCodeMsg(ctx context.Context, in *ReqSendCodeMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/SendCodeMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GroupLiveStart(ctx context.Context, in *LiveStartReq, opts ...grpc.CallOption) (*LiveStartRsp, error) {
	out := new(LiveStartRsp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GroupLiveStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GroupLiveStop(ctx context.Context, in *LiveStopReq, opts ...grpc.CallOption) (*LiveStopRsp, error) {
	out := new(LiveStopRsp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GroupLiveStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetLiveInviteUrl(ctx context.Context, in *GetLiveInviteUrlReq, opts ...grpc.CallOption) (*GetLiveInviteUrlRsp, error) {
	out := new(GetLiveInviteUrlRsp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetLiveInviteUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) CheckUserName(ctx context.Context, in *CheckUserNameReq, opts ...grpc.CallOption) (*CheckUserNameResp, error) {
	out := new(CheckUserNameResp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/CheckUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) EditLiveInfo(ctx context.Context, in *EditLiveInfoReq, opts ...grpc.CallOption) (*EditLiveInfoRsp, error) {
	out := new(EditLiveInfoRsp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/EditLiveInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GroupLiveCheck(ctx context.Context, in *GroupLiveCheckReq, opts ...grpc.CallOption) (*GroupLiveCheckRsp, error) {
	out := new(GroupLiveCheckRsp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GroupLiveCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetLiveInviteCnt(ctx context.Context, in *GetLiveInviteCntReq, opts ...grpc.CallOption) (*GetLiveInviteCntRsp, error) {
	out := new(GetLiveInviteCntRsp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetLiveInviteCnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) KickFromChannel(ctx context.Context, in *ReqKickFromChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/KickFromChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) CheckUserInGroup(ctx context.Context, in *CheckUserInGroupReq, opts ...grpc.CallOption) (*CheckUserInGroupRsp, error) {
	out := new(CheckUserInGroupRsp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/CheckUserInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) LivePush(ctx context.Context, in *LivePushReq, opts ...grpc.CallOption) (*LivePushResult, error) {
	out := new(LivePushResult)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/LivePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetGroupUserIds(ctx context.Context, in *GetGroupUserIdsReq, opts ...grpc.CallOption) (*GetGroupUserIdsRsp, error) {
	out := new(GetGroupUserIdsRsp)
	err := c.cc.Invoke(ctx, "/imapigateway.ApiGatewayService/GetGroupUserIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiGatewayServiceServer is the server API for ApiGatewayService service.
// All implementations must embed UnimplementedApiGatewayServiceServer
// for forward compatibility
type ApiGatewayServiceServer interface {
	// 注册用户和普通机器人信息
	RegisterUserInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error)
	// 注册红包机器人接口
	RegisterRedBotInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error)
	// 更新用户的username
	UpdateUserName(context.Context, *UpdateuserNameReq) (*UpdateuserNameResult, error)
	// 账号(标记删除)
	DeleteUserInfoById(context.Context, *DeleteAccountByIdReq) (*DelAccountResult, error)
	// 删除消息
	DeleteMessages(context.Context, *ReqDeleteMessages) (*ReplyDeleteMessages, error)
	// 机器人调用接口
	BotCall(context.Context, *ReqBotCall) (*ReplyBotCall, error)
	// 根据 消息id和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdMsgId(context.Context, *ReqGetMessageByUserIdMsgId) (*ReplyGetMessageByUserIdMsgId, error)
	// 获取full channel
	GetFullChannel(context.Context, *ReqFullchannel) (*ReplyFullChannel, error)
	// 获取超级群或者频道的修正信息
	GetChannelDifference(context.Context, *ReqGetchannelDifference) (*ReplyChannelDiffCommon, error)
	// 获取成员信息
	GetParticipants(context.Context, *ReqParticipants) (*ReplyParticipants, error)
	// 获取所有群 (除去部分)
	GetAllChats(context.Context, *ReqGetAllChats) (*ReplyGetAllChats, error)
	// 离开超级群或者频道
	LeaveChannel(context.Context, *ReqLeaveChannel) (*ReplyLeaveChannel, error)
	// 置顶超级群或者频道的消息
	UpdatePinnedChannelMessage(context.Context, *ReqUpdatePinnedChannelMessage) (*ReplyUpdatePinnedChannelMessage, error)
	// 更新firstName,lastName和about
	UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*UpdateUserProfileResult, error)
	// 更新机器人相关信息
	UpdateBotInfo(context.Context, *BotUpdateInfo) (*BotUpdateInfoResult, error)
	// 编辑超级群或者频道的标题
	EditChannelTitle(context.Context, *ReqEditChannelTitle) (*ReplyEditChannelTitle, error)
	// 修改超级群或者频道的描述信息
	EditChannelAbout(context.Context, *ReqEditChannelAbout) (*ReplyEditChannelAbout, error)
	// UploadFile 上传文件或文件片
	UploadFile(context.Context, *MsgUploadFileReq) (*MsgUploadFileResp, error)
	// 网关上传文件描述信息
	GatewayUploadFileDesc(context.Context, *MsgFileDescReq) (*MsgFileDescResp, error)
	// 发送红包
	SendRDP(context.Context, *SendRDPReq) (*SendRDPResp, error)
	//　检查红包
	CheckRDP(context.Context, *CheckRDPReq) (*CheckRDPResp, error)
	//　领取红包
	ReceiveRDP(context.Context, *ReceiveRDPReq) (*ReceiveRDPResp, error)
	// 获取全部用户信息
	GetFullUser(context.Context, *GetFullUserReq) (*GetFullUserResult, error)
	// 新增获取用户信息接口
	GetUserInfoById(context.Context, *GetUserInfoByIdReq) (*GetUserInfoResult, error)
	// 发送红包游戏
	SendRedGame(context.Context, *SendGameRedReq) (*GameRedResp, error)
	// 领取红包游戏
	ReceiveRedGame(context.Context, *RcvGameRedReq) (*GameRedResp, error)
	// 查询游戏红包详情
	QueryRedGame(context.Context, *QryGameRdpReq) (*GameRedResp, error)
	// 通过用户名获取用户Id
	GetUserIdByUserName(context.Context, *GetUserByUsernameReq) (*GetUserInfoResult, error)
	// 设置用户生日和性别
	SetUserDetail(context.Context, *SetUserDetailReq) (*SetUserDetailResult, error)
	// 更新机器人头像请求
	UpdateBotPic(context.Context, *UpdateBotPicRequest) (*UpdateBotPicResult, error)
	// DownloadFile 下载文件或文件片
	DownloadFile(context.Context, *MsgDownloadFileReq) (*MsgDownloadFileResp, error)
	// 新增支付获取游戏规则借口
	OtherTrans(context.Context, *OtherTransReq) (*OtherTransResp, error)
	// 积分通用接口
	IntegralUniversalBusiness(context.Context, *ReqIntegralUniversalBusiness) (*ReplyIntegralUniversalBusiness, error)
	// 获取回复消息
	GetChannelMsg(context.Context, *ReqGetChannelMessageByChannelIdMsgId) (*ReplyGetChannelMessageByChannelIdMsgId, error)
	// 新增官方标志设置（内部调用）
	SetBotVerified(context.Context, *SetBotVerifiedReq) (*SetBotVerifiedReply, error)
	// 获取机器人消息Id通过uuid
	GetMessageByUserIdUuid(context.Context, *ReqGetMessageByUserIdUuid) (*ReplyGetMessageByUserIdUuid, error)
	// 获取多个好友的共同好友
	ContactsGetCommonContacts(context.Context, *ContactsGetCommonContactsReq) (*ContactsGetCommonContactsResult, error)
	// 更新朋友圈通知
	UpdateMoments(context.Context, *ReqUpdateMoments) (*ResUpdateMoments, error)
	// 获取用户联系人列表
	ContactsGetContacts(context.Context, *ContatsGetContactsReq) (*ContatsGetContactsResult, error)
	// 根据用户Id来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
	CheckIsMuteContact(context.Context, *CheckIsMuteContactReq) (*CheckIsMuteContactResult, error)
	// 朋友圈互动通知
	MomentNotify(context.Context, *MomentNotifyReq) (*MomentNotifyResult, error)
	// 根据用户昵称搜索
	SearchUserByNickname(context.Context, *SearchUserByNicknameReq) (*SearchUserByNicknameResult, error)
	// 系统号发送消息
	SendMediaSysNotify(context.Context, *SendMediaSysNotifyReq) (*SendMediaSysNotifyResult, error)
	// 朋友圈关注用户
	MomentFollow(context.Context, *MomentFollowReq) (*MomentFollowResp, error)
	// 检测是否是自己的好友
	CheckIsSelfContact(context.Context, *CheckIsSelfContactReq) (*CheckIsSelfContactResult, error)
	// 新增获取用户信息
	GetUserInfoByIdArr(context.Context, *GetUserInfoByIdArrReq) (*GetUserInfoByIdArrResult, error)
	// 获取某个群成员信息
	GetChannelUserInfo(context.Context, *GetChannelUserInfoReq) (*GetChannelUserInfoResp, error)
	// 超级群全体禁言
	EditEveryoneQuiet(context.Context, *ReqEditEveryoneQuiet) (*ReplyChannelData, error)
	// 禁言单个用户
	EditBanChannelUser(context.Context, *ReqEditBanChannelUser) (*ReplyChannelData, error)
	// 通过手机号获取用户信息
	GetUserInfoByPhone(context.Context, *GetUserByphone) (*GetUserInfoResult, error)
	// 发送短信消息接口
	SendCodeMsg(context.Context, *ReqSendCodeMsg) (*ReplyBool, error)
	// 群直播开始
	GroupLiveStart(context.Context, *LiveStartReq) (*LiveStartRsp, error)
	// 群直播结束
	GroupLiveStop(context.Context, *LiveStopReq) (*LiveStopRsp, error)
	// 获取主播邀请链接
	GetLiveInviteUrl(context.Context, *GetLiveInviteUrlReq) (*GetLiveInviteUrlRsp, error)
	// 获取用户名是否唯一
	CheckUserName(context.Context, *CheckUserNameReq) (*CheckUserNameResp, error)
	// 修改直播信息
	EditLiveInfo(context.Context, *EditLiveInfoReq) (*EditLiveInfoRsp, error)
	// 检测直播信息
	GroupLiveCheck(context.Context, *GroupLiveCheckReq) (*GroupLiveCheckRsp, error)
	// 获取链接邀请
	GetLiveInviteCnt(context.Context, *GetLiveInviteCntReq) (*GetLiveInviteCntRsp, error)
	//踢人出超级群或者频道
	KickFromChannel(context.Context, *ReqKickFromChannel) (*ReplyChannelData, error)
	// 检查用户是否是在群里
	CheckUserInGroup(context.Context, *CheckUserInGroupReq) (*CheckUserInGroupRsp, error)
	// 推送消息通知
	LivePush(context.Context, *LivePushReq) (*LivePushResult, error)
	// 分页获取群用户id 用于直播推送
	GetGroupUserIds(context.Context, *GetGroupUserIdsReq) (*GetGroupUserIdsRsp, error)
	mustEmbedUnimplementedApiGatewayServiceServer()
}

// UnimplementedApiGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiGatewayServiceServer struct {
}

func (UnimplementedApiGatewayServiceServer) RegisterUserInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUserInfo not implemented")
}
func (UnimplementedApiGatewayServiceServer) RegisterRedBotInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRedBotInfo not implemented")
}
func (UnimplementedApiGatewayServiceServer) UpdateUserName(context.Context, *UpdateuserNameReq) (*UpdateuserNameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (UnimplementedApiGatewayServiceServer) DeleteUserInfoById(context.Context, *DeleteAccountByIdReq) (*DelAccountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserInfoById not implemented")
}
func (UnimplementedApiGatewayServiceServer) DeleteMessages(context.Context, *ReqDeleteMessages) (*ReplyDeleteMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessages not implemented")
}
func (UnimplementedApiGatewayServiceServer) BotCall(context.Context, *ReqBotCall) (*ReplyBotCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotCall not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetMessageByUserIdMsgId(context.Context, *ReqGetMessageByUserIdMsgId) (*ReplyGetMessageByUserIdMsgId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageByUserIdMsgId not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetFullChannel(context.Context, *ReqFullchannel) (*ReplyFullChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullChannel not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetChannelDifference(context.Context, *ReqGetchannelDifference) (*ReplyChannelDiffCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelDifference not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetParticipants(context.Context, *ReqParticipants) (*ReplyParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipants not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetAllChats(context.Context, *ReqGetAllChats) (*ReplyGetAllChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChats not implemented")
}
func (UnimplementedApiGatewayServiceServer) LeaveChannel(context.Context, *ReqLeaveChannel) (*ReplyLeaveChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChannel not implemented")
}
func (UnimplementedApiGatewayServiceServer) UpdatePinnedChannelMessage(context.Context, *ReqUpdatePinnedChannelMessage) (*ReplyUpdatePinnedChannelMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePinnedChannelMessage not implemented")
}
func (UnimplementedApiGatewayServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*UpdateUserProfileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedApiGatewayServiceServer) UpdateBotInfo(context.Context, *BotUpdateInfo) (*BotUpdateInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotInfo not implemented")
}
func (UnimplementedApiGatewayServiceServer) EditChannelTitle(context.Context, *ReqEditChannelTitle) (*ReplyEditChannelTitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelTitle not implemented")
}
func (UnimplementedApiGatewayServiceServer) EditChannelAbout(context.Context, *ReqEditChannelAbout) (*ReplyEditChannelAbout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelAbout not implemented")
}
func (UnimplementedApiGatewayServiceServer) UploadFile(context.Context, *MsgUploadFileReq) (*MsgUploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedApiGatewayServiceServer) GatewayUploadFileDesc(context.Context, *MsgFileDescReq) (*MsgFileDescResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayUploadFileDesc not implemented")
}
func (UnimplementedApiGatewayServiceServer) SendRDP(context.Context, *SendRDPReq) (*SendRDPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRDP not implemented")
}
func (UnimplementedApiGatewayServiceServer) CheckRDP(context.Context, *CheckRDPReq) (*CheckRDPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRDP not implemented")
}
func (UnimplementedApiGatewayServiceServer) ReceiveRDP(context.Context, *ReceiveRDPReq) (*ReceiveRDPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveRDP not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetFullUser(context.Context, *GetFullUserReq) (*GetFullUserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullUser not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetUserInfoById(context.Context, *GetUserInfoByIdReq) (*GetUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoById not implemented")
}
func (UnimplementedApiGatewayServiceServer) SendRedGame(context.Context, *SendGameRedReq) (*GameRedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRedGame not implemented")
}
func (UnimplementedApiGatewayServiceServer) ReceiveRedGame(context.Context, *RcvGameRedReq) (*GameRedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveRedGame not implemented")
}
func (UnimplementedApiGatewayServiceServer) QueryRedGame(context.Context, *QryGameRdpReq) (*GameRedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRedGame not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetUserIdByUserName(context.Context, *GetUserByUsernameReq) (*GetUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIdByUserName not implemented")
}
func (UnimplementedApiGatewayServiceServer) SetUserDetail(context.Context, *SetUserDetailReq) (*SetUserDetailResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserDetail not implemented")
}
func (UnimplementedApiGatewayServiceServer) UpdateBotPic(context.Context, *UpdateBotPicRequest) (*UpdateBotPicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotPic not implemented")
}
func (UnimplementedApiGatewayServiceServer) DownloadFile(context.Context, *MsgDownloadFileReq) (*MsgDownloadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedApiGatewayServiceServer) OtherTrans(context.Context, *OtherTransReq) (*OtherTransResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtherTrans not implemented")
}
func (UnimplementedApiGatewayServiceServer) IntegralUniversalBusiness(context.Context, *ReqIntegralUniversalBusiness) (*ReplyIntegralUniversalBusiness, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegralUniversalBusiness not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetChannelMsg(context.Context, *ReqGetChannelMessageByChannelIdMsgId) (*ReplyGetChannelMessageByChannelIdMsgId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMsg not implemented")
}
func (UnimplementedApiGatewayServiceServer) SetBotVerified(context.Context, *SetBotVerifiedReq) (*SetBotVerifiedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBotVerified not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetMessageByUserIdUuid(context.Context, *ReqGetMessageByUserIdUuid) (*ReplyGetMessageByUserIdUuid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageByUserIdUuid not implemented")
}
func (UnimplementedApiGatewayServiceServer) ContactsGetCommonContacts(context.Context, *ContactsGetCommonContactsReq) (*ContactsGetCommonContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetCommonContacts not implemented")
}
func (UnimplementedApiGatewayServiceServer) UpdateMoments(context.Context, *ReqUpdateMoments) (*ResUpdateMoments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMoments not implemented")
}
func (UnimplementedApiGatewayServiceServer) ContactsGetContacts(context.Context, *ContatsGetContactsReq) (*ContatsGetContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetContacts not implemented")
}
func (UnimplementedApiGatewayServiceServer) CheckIsMuteContact(context.Context, *CheckIsMuteContactReq) (*CheckIsMuteContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsMuteContact not implemented")
}
func (UnimplementedApiGatewayServiceServer) MomentNotify(context.Context, *MomentNotifyReq) (*MomentNotifyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MomentNotify not implemented")
}
func (UnimplementedApiGatewayServiceServer) SearchUserByNickname(context.Context, *SearchUserByNicknameReq) (*SearchUserByNicknameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserByNickname not implemented")
}
func (UnimplementedApiGatewayServiceServer) SendMediaSysNotify(context.Context, *SendMediaSysNotifyReq) (*SendMediaSysNotifyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMediaSysNotify not implemented")
}
func (UnimplementedApiGatewayServiceServer) MomentFollow(context.Context, *MomentFollowReq) (*MomentFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MomentFollow not implemented")
}
func (UnimplementedApiGatewayServiceServer) CheckIsSelfContact(context.Context, *CheckIsSelfContactReq) (*CheckIsSelfContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsSelfContact not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetUserInfoByIdArr(context.Context, *GetUserInfoByIdArrReq) (*GetUserInfoByIdArrResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByIdArr not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetChannelUserInfo(context.Context, *GetChannelUserInfoReq) (*GetChannelUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelUserInfo not implemented")
}
func (UnimplementedApiGatewayServiceServer) EditEveryoneQuiet(context.Context, *ReqEditEveryoneQuiet) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditEveryoneQuiet not implemented")
}
func (UnimplementedApiGatewayServiceServer) EditBanChannelUser(context.Context, *ReqEditBanChannelUser) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBanChannelUser not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetUserInfoByPhone(context.Context, *GetUserByphone) (*GetUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByPhone not implemented")
}
func (UnimplementedApiGatewayServiceServer) SendCodeMsg(context.Context, *ReqSendCodeMsg) (*ReplyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCodeMsg not implemented")
}
func (UnimplementedApiGatewayServiceServer) GroupLiveStart(context.Context, *LiveStartReq) (*LiveStartRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupLiveStart not implemented")
}
func (UnimplementedApiGatewayServiceServer) GroupLiveStop(context.Context, *LiveStopReq) (*LiveStopRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupLiveStop not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetLiveInviteUrl(context.Context, *GetLiveInviteUrlReq) (*GetLiveInviteUrlRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveInviteUrl not implemented")
}
func (UnimplementedApiGatewayServiceServer) CheckUserName(context.Context, *CheckUserNameReq) (*CheckUserNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserName not implemented")
}
func (UnimplementedApiGatewayServiceServer) EditLiveInfo(context.Context, *EditLiveInfoReq) (*EditLiveInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditLiveInfo not implemented")
}
func (UnimplementedApiGatewayServiceServer) GroupLiveCheck(context.Context, *GroupLiveCheckReq) (*GroupLiveCheckRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupLiveCheck not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetLiveInviteCnt(context.Context, *GetLiveInviteCntReq) (*GetLiveInviteCntRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveInviteCnt not implemented")
}
func (UnimplementedApiGatewayServiceServer) KickFromChannel(context.Context, *ReqKickFromChannel) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickFromChannel not implemented")
}
func (UnimplementedApiGatewayServiceServer) CheckUserInGroup(context.Context, *CheckUserInGroupReq) (*CheckUserInGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserInGroup not implemented")
}
func (UnimplementedApiGatewayServiceServer) LivePush(context.Context, *LivePushReq) (*LivePushResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivePush not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetGroupUserIds(context.Context, *GetGroupUserIdsReq) (*GetGroupUserIdsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupUserIds not implemented")
}
func (UnimplementedApiGatewayServiceServer) mustEmbedUnimplementedApiGatewayServiceServer() {}

// UnsafeApiGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiGatewayServiceServer will
// result in compilation errors.
type UnsafeApiGatewayServiceServer interface {
	mustEmbedUnimplementedApiGatewayServiceServer()
}

func RegisterApiGatewayServiceServer(s grpc.ServiceRegistrar, srv ApiGatewayServiceServer) {
	s.RegisterService(&ApiGatewayService_ServiceDesc, srv)
}

func _ApiGatewayService_RegisterUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).RegisterUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/RegisterUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).RegisterUserInfo(ctx, req.(*RegisterUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_RegisterRedBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).RegisterRedBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/RegisterRedBotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).RegisterRedBotInfo(ctx, req.(*RegisterUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateuserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).UpdateUserName(ctx, req.(*UpdateuserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_DeleteUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).DeleteUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/DeleteUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).DeleteUserInfoById(ctx, req.(*DeleteAccountByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_DeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).DeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/DeleteMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).DeleteMessages(ctx, req.(*ReqDeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_BotCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBotCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).BotCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/BotCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).BotCall(ctx, req.(*ReqBotCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetMessageByUserIdMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageByUserIdMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetMessageByUserIdMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetMessageByUserIdMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetMessageByUserIdMsgId(ctx, req.(*ReqGetMessageByUserIdMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFullchannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetFullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetFullChannel(ctx, req.(*ReqFullchannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetChannelDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetchannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetChannelDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetChannelDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetChannelDifference(ctx, req.(*ReqGetchannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetParticipants(ctx, req.(*ReqParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetAllChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAllChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetAllChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetAllChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetAllChats(ctx, req.(*ReqGetAllChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLeaveChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/LeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).LeaveChannel(ctx, req.(*ReqLeaveChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_UpdatePinnedChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdatePinnedChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).UpdatePinnedChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/UpdatePinnedChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).UpdatePinnedChannelMessage(ctx, req.(*ReqUpdatePinnedChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_UpdateBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotUpdateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).UpdateBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/UpdateBotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).UpdateBotInfo(ctx, req.(*BotUpdateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_EditChannelTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).EditChannelTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/EditChannelTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).EditChannelTitle(ctx, req.(*ReqEditChannelTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_EditChannelAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).EditChannelAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/EditChannelAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).EditChannelAbout(ctx, req.(*ReqEditChannelAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).UploadFile(ctx, req.(*MsgUploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GatewayUploadFileDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFileDescReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GatewayUploadFileDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GatewayUploadFileDesc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GatewayUploadFileDesc(ctx, req.(*MsgFileDescReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_SendRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).SendRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/SendRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).SendRDP(ctx, req.(*SendRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_CheckRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).CheckRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/CheckRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).CheckRDP(ctx, req.(*CheckRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_ReceiveRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).ReceiveRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/ReceiveRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).ReceiveRDP(ctx, req.(*ReceiveRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetFullUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetFullUser(ctx, req.(*GetFullUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetUserInfoById(ctx, req.(*GetUserInfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_SendRedGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGameRedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).SendRedGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/SendRedGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).SendRedGame(ctx, req.(*SendGameRedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_ReceiveRedGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RcvGameRedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).ReceiveRedGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/ReceiveRedGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).ReceiveRedGame(ctx, req.(*RcvGameRedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_QueryRedGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryGameRdpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).QueryRedGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/QueryRedGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).QueryRedGame(ctx, req.(*QryGameRdpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetUserIdByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetUserIdByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetUserIdByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetUserIdByUserName(ctx, req.(*GetUserByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_SetUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).SetUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/SetUserDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).SetUserDetail(ctx, req.(*SetUserDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_UpdateBotPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).UpdateBotPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/UpdateBotPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).UpdateBotPic(ctx, req.(*UpdateBotPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDownloadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).DownloadFile(ctx, req.(*MsgDownloadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_OtherTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtherTransReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).OtherTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/OtherTrans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).OtherTrans(ctx, req.(*OtherTransReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_IntegralUniversalBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqIntegralUniversalBusiness)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).IntegralUniversalBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/IntegralUniversalBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).IntegralUniversalBusiness(ctx, req.(*ReqIntegralUniversalBusiness))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessageByChannelIdMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetChannelMsg(ctx, req.(*ReqGetChannelMessageByChannelIdMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_SetBotVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBotVerifiedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).SetBotVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/SetBotVerified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).SetBotVerified(ctx, req.(*SetBotVerifiedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetMessageByUserIdUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageByUserIdUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetMessageByUserIdUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetMessageByUserIdUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetMessageByUserIdUuid(ctx, req.(*ReqGetMessageByUserIdUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_ContactsGetCommonContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsGetCommonContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).ContactsGetCommonContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/ContactsGetCommonContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).ContactsGetCommonContacts(ctx, req.(*ContactsGetCommonContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_UpdateMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateMoments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).UpdateMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/UpdateMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).UpdateMoments(ctx, req.(*ReqUpdateMoments))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_ContactsGetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContatsGetContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).ContactsGetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/ContactsGetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).ContactsGetContacts(ctx, req.(*ContatsGetContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_CheckIsMuteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsMuteContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).CheckIsMuteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/CheckIsMuteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).CheckIsMuteContact(ctx, req.(*CheckIsMuteContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_MomentNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).MomentNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/MomentNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).MomentNotify(ctx, req.(*MomentNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_SearchUserByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserByNicknameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).SearchUserByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/SearchUserByNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).SearchUserByNickname(ctx, req.(*SearchUserByNicknameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_SendMediaSysNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMediaSysNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).SendMediaSysNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/SendMediaSysNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).SendMediaSysNotify(ctx, req.(*SendMediaSysNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_MomentFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).MomentFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/MomentFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).MomentFollow(ctx, req.(*MomentFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_CheckIsSelfContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsSelfContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).CheckIsSelfContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/CheckIsSelfContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).CheckIsSelfContact(ctx, req.(*CheckIsSelfContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetUserInfoByIdArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetUserInfoByIdArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetUserInfoByIdArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetUserInfoByIdArr(ctx, req.(*GetUserInfoByIdArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetChannelUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetChannelUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetChannelUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetChannelUserInfo(ctx, req.(*GetChannelUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_EditEveryoneQuiet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditEveryoneQuiet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).EditEveryoneQuiet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/EditEveryoneQuiet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).EditEveryoneQuiet(ctx, req.(*ReqEditEveryoneQuiet))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_EditBanChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditBanChannelUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).EditBanChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/EditBanChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).EditBanChannelUser(ctx, req.(*ReqEditBanChannelUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetUserInfoByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByphone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetUserInfoByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetUserInfoByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetUserInfoByPhone(ctx, req.(*GetUserByphone))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_SendCodeMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendCodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).SendCodeMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/SendCodeMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).SendCodeMsg(ctx, req.(*ReqSendCodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GroupLiveStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GroupLiveStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GroupLiveStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GroupLiveStart(ctx, req.(*LiveStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GroupLiveStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GroupLiveStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GroupLiveStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GroupLiveStop(ctx, req.(*LiveStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetLiveInviteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveInviteUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetLiveInviteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetLiveInviteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetLiveInviteUrl(ctx, req.(*GetLiveInviteUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_CheckUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).CheckUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/CheckUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).CheckUserName(ctx, req.(*CheckUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_EditLiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditLiveInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).EditLiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/EditLiveInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).EditLiveInfo(ctx, req.(*EditLiveInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GroupLiveCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupLiveCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GroupLiveCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GroupLiveCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GroupLiveCheck(ctx, req.(*GroupLiveCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetLiveInviteCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveInviteCntReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetLiveInviteCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetLiveInviteCnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetLiveInviteCnt(ctx, req.(*GetLiveInviteCntReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_KickFromChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqKickFromChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).KickFromChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/KickFromChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).KickFromChannel(ctx, req.(*ReqKickFromChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_CheckUserInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserInGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).CheckUserInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/CheckUserInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).CheckUserInGroup(ctx, req.(*CheckUserInGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_LivePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivePushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).LivePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/LivePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).LivePush(ctx, req.(*LivePushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetGroupUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupUserIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetGroupUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imapigateway.ApiGatewayService/GetGroupUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetGroupUserIds(ctx, req.(*GetGroupUserIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiGatewayService_ServiceDesc is the grpc.ServiceDesc for ApiGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imapigateway.ApiGatewayService",
	HandlerType: (*ApiGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUserInfo",
			Handler:    _ApiGatewayService_RegisterUserInfo_Handler,
		},
		{
			MethodName: "RegisterRedBotInfo",
			Handler:    _ApiGatewayService_RegisterRedBotInfo_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _ApiGatewayService_UpdateUserName_Handler,
		},
		{
			MethodName: "DeleteUserInfoById",
			Handler:    _ApiGatewayService_DeleteUserInfoById_Handler,
		},
		{
			MethodName: "DeleteMessages",
			Handler:    _ApiGatewayService_DeleteMessages_Handler,
		},
		{
			MethodName: "BotCall",
			Handler:    _ApiGatewayService_BotCall_Handler,
		},
		{
			MethodName: "GetMessageByUserIdMsgId",
			Handler:    _ApiGatewayService_GetMessageByUserIdMsgId_Handler,
		},
		{
			MethodName: "GetFullChannel",
			Handler:    _ApiGatewayService_GetFullChannel_Handler,
		},
		{
			MethodName: "GetChannelDifference",
			Handler:    _ApiGatewayService_GetChannelDifference_Handler,
		},
		{
			MethodName: "GetParticipants",
			Handler:    _ApiGatewayService_GetParticipants_Handler,
		},
		{
			MethodName: "GetAllChats",
			Handler:    _ApiGatewayService_GetAllChats_Handler,
		},
		{
			MethodName: "LeaveChannel",
			Handler:    _ApiGatewayService_LeaveChannel_Handler,
		},
		{
			MethodName: "UpdatePinnedChannelMessage",
			Handler:    _ApiGatewayService_UpdatePinnedChannelMessage_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _ApiGatewayService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "UpdateBotInfo",
			Handler:    _ApiGatewayService_UpdateBotInfo_Handler,
		},
		{
			MethodName: "EditChannelTitle",
			Handler:    _ApiGatewayService_EditChannelTitle_Handler,
		},
		{
			MethodName: "EditChannelAbout",
			Handler:    _ApiGatewayService_EditChannelAbout_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _ApiGatewayService_UploadFile_Handler,
		},
		{
			MethodName: "GatewayUploadFileDesc",
			Handler:    _ApiGatewayService_GatewayUploadFileDesc_Handler,
		},
		{
			MethodName: "SendRDP",
			Handler:    _ApiGatewayService_SendRDP_Handler,
		},
		{
			MethodName: "CheckRDP",
			Handler:    _ApiGatewayService_CheckRDP_Handler,
		},
		{
			MethodName: "ReceiveRDP",
			Handler:    _ApiGatewayService_ReceiveRDP_Handler,
		},
		{
			MethodName: "GetFullUser",
			Handler:    _ApiGatewayService_GetFullUser_Handler,
		},
		{
			MethodName: "GetUserInfoById",
			Handler:    _ApiGatewayService_GetUserInfoById_Handler,
		},
		{
			MethodName: "SendRedGame",
			Handler:    _ApiGatewayService_SendRedGame_Handler,
		},
		{
			MethodName: "ReceiveRedGame",
			Handler:    _ApiGatewayService_ReceiveRedGame_Handler,
		},
		{
			MethodName: "QueryRedGame",
			Handler:    _ApiGatewayService_QueryRedGame_Handler,
		},
		{
			MethodName: "GetUserIdByUserName",
			Handler:    _ApiGatewayService_GetUserIdByUserName_Handler,
		},
		{
			MethodName: "SetUserDetail",
			Handler:    _ApiGatewayService_SetUserDetail_Handler,
		},
		{
			MethodName: "UpdateBotPic",
			Handler:    _ApiGatewayService_UpdateBotPic_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _ApiGatewayService_DownloadFile_Handler,
		},
		{
			MethodName: "OtherTrans",
			Handler:    _ApiGatewayService_OtherTrans_Handler,
		},
		{
			MethodName: "IntegralUniversalBusiness",
			Handler:    _ApiGatewayService_IntegralUniversalBusiness_Handler,
		},
		{
			MethodName: "GetChannelMsg",
			Handler:    _ApiGatewayService_GetChannelMsg_Handler,
		},
		{
			MethodName: "SetBotVerified",
			Handler:    _ApiGatewayService_SetBotVerified_Handler,
		},
		{
			MethodName: "GetMessageByUserIdUuid",
			Handler:    _ApiGatewayService_GetMessageByUserIdUuid_Handler,
		},
		{
			MethodName: "ContactsGetCommonContacts",
			Handler:    _ApiGatewayService_ContactsGetCommonContacts_Handler,
		},
		{
			MethodName: "UpdateMoments",
			Handler:    _ApiGatewayService_UpdateMoments_Handler,
		},
		{
			MethodName: "ContactsGetContacts",
			Handler:    _ApiGatewayService_ContactsGetContacts_Handler,
		},
		{
			MethodName: "CheckIsMuteContact",
			Handler:    _ApiGatewayService_CheckIsMuteContact_Handler,
		},
		{
			MethodName: "MomentNotify",
			Handler:    _ApiGatewayService_MomentNotify_Handler,
		},
		{
			MethodName: "SearchUserByNickname",
			Handler:    _ApiGatewayService_SearchUserByNickname_Handler,
		},
		{
			MethodName: "SendMediaSysNotify",
			Handler:    _ApiGatewayService_SendMediaSysNotify_Handler,
		},
		{
			MethodName: "MomentFollow",
			Handler:    _ApiGatewayService_MomentFollow_Handler,
		},
		{
			MethodName: "CheckIsSelfContact",
			Handler:    _ApiGatewayService_CheckIsSelfContact_Handler,
		},
		{
			MethodName: "GetUserInfoByIdArr",
			Handler:    _ApiGatewayService_GetUserInfoByIdArr_Handler,
		},
		{
			MethodName: "GetChannelUserInfo",
			Handler:    _ApiGatewayService_GetChannelUserInfo_Handler,
		},
		{
			MethodName: "EditEveryoneQuiet",
			Handler:    _ApiGatewayService_EditEveryoneQuiet_Handler,
		},
		{
			MethodName: "EditBanChannelUser",
			Handler:    _ApiGatewayService_EditBanChannelUser_Handler,
		},
		{
			MethodName: "GetUserInfoByPhone",
			Handler:    _ApiGatewayService_GetUserInfoByPhone_Handler,
		},
		{
			MethodName: "SendCodeMsg",
			Handler:    _ApiGatewayService_SendCodeMsg_Handler,
		},
		{
			MethodName: "GroupLiveStart",
			Handler:    _ApiGatewayService_GroupLiveStart_Handler,
		},
		{
			MethodName: "GroupLiveStop",
			Handler:    _ApiGatewayService_GroupLiveStop_Handler,
		},
		{
			MethodName: "GetLiveInviteUrl",
			Handler:    _ApiGatewayService_GetLiveInviteUrl_Handler,
		},
		{
			MethodName: "CheckUserName",
			Handler:    _ApiGatewayService_CheckUserName_Handler,
		},
		{
			MethodName: "EditLiveInfo",
			Handler:    _ApiGatewayService_EditLiveInfo_Handler,
		},
		{
			MethodName: "GroupLiveCheck",
			Handler:    _ApiGatewayService_GroupLiveCheck_Handler,
		},
		{
			MethodName: "GetLiveInviteCnt",
			Handler:    _ApiGatewayService_GetLiveInviteCnt_Handler,
		},
		{
			MethodName: "KickFromChannel",
			Handler:    _ApiGatewayService_KickFromChannel_Handler,
		},
		{
			MethodName: "CheckUserInGroup",
			Handler:    _ApiGatewayService_CheckUserInGroup_Handler,
		},
		{
			MethodName: "LivePush",
			Handler:    _ApiGatewayService_LivePush_Handler,
		},
		{
			MethodName: "GetGroupUserIds",
			Handler:    _ApiGatewayService_GetGroupUserIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imapigateway.proto",
}
