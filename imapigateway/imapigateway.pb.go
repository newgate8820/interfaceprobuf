//protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/imapigateway/*.proto
//protoc --go_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/imapigateway/*.proto
//protoc -I. --grpc-gateway_out=logtostderr=true,paths=source_relative:. gitlab.chatserver.im/interfaceprobuf/imapigateway/*.proto
//protoc -I. --swagger_out=logtostderr=true:. gitlab.chatserver.im/interfaceprobuf/imapigateway/*.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: imapigateway.proto

package imapigateway

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	storageservice "interfaceprobuf/storageservice"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GroupLiveReplyCode int32

const (
	GroupLiveReplyCode_Successfuly GroupLiveReplyCode = 0
	GroupLiveReplyCode_UserUnknown GroupLiveReplyCode = 90001 // 用户不存在
	GroupLiveReplyCode_ChanUnknown GroupLiveReplyCode = 90002 // 群组不存在
	GroupLiveReplyCode_LiveUnknown GroupLiveReplyCode = 90003 // 直播不存在
	GroupLiveReplyCode_LiveOnGoing GroupLiveReplyCode = 90004 // 直播进行中
	GroupLiveReplyCode_HaveNoPower GroupLiveReplyCode = 90005 // 没有权限
	GroupLiveReplyCode_IllegalArgs GroupLiveReplyCode = 90006 // 非法参数
	GroupLiveReplyCode_InternalErr GroupLiveReplyCode = 90007 // 服务内部错误
)

// Enum value maps for GroupLiveReplyCode.
var (
	GroupLiveReplyCode_name = map[int32]string{
		0:     "Successfuly",
		90001: "UserUnknown",
		90002: "ChanUnknown",
		90003: "LiveUnknown",
		90004: "LiveOnGoing",
		90005: "HaveNoPower",
		90006: "IllegalArgs",
		90007: "InternalErr",
	}
	GroupLiveReplyCode_value = map[string]int32{
		"Successfuly": 0,
		"UserUnknown": 90001,
		"ChanUnknown": 90002,
		"LiveUnknown": 90003,
		"LiveOnGoing": 90004,
		"HaveNoPower": 90005,
		"IllegalArgs": 90006,
		"InternalErr": 90007,
	}
)

func (x GroupLiveReplyCode) Enum() *GroupLiveReplyCode {
	p := new(GroupLiveReplyCode)
	*p = x
	return p
}

func (x GroupLiveReplyCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupLiveReplyCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imapigateway_proto_enumTypes[0].Descriptor()
}

func (GroupLiveReplyCode) Type() protoreflect.EnumType {
	return &file_imapigateway_proto_enumTypes[0]
}

func (x GroupLiveReplyCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupLiveReplyCode.Descriptor instead.
func (GroupLiveReplyCode) EnumDescriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{0}
}

// ChatType 聊天类型
type ChatType int32

const (
	ChatType_ChatTypeZero ChatType = 0 //用户
	ChatType_PeerUser     ChatType = 1 //用户聊天
	ChatType_PeerChat     ChatType = 2 //普通群聊天
	ChatType_ChannelChat  ChatType = 3 //超级群聊天
)

// Enum value maps for ChatType.
var (
	ChatType_name = map[int32]string{
		0: "ChatTypeZero",
		1: "PeerUser",
		2: "PeerChat",
		3: "ChannelChat",
	}
	ChatType_value = map[string]int32{
		"ChatTypeZero": 0,
		"PeerUser":     1,
		"PeerChat":     2,
		"ChannelChat":  3,
	}
)

func (x ChatType) Enum() *ChatType {
	p := new(ChatType)
	*p = x
	return p
}

func (x ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_imapigateway_proto_enumTypes[1].Descriptor()
}

func (ChatType) Type() protoreflect.EnumType {
	return &file_imapigateway_proto_enumTypes[1]
}

func (x ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatType.Descriptor instead.
func (ChatType) EnumDescriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{1}
}

// 消息来源ID定义
type MsgFromID int32

const (
	MsgFromID_MFI_UNKNOWN       MsgFromID = 0 // 未知来源
	MsgFromID_MFI_IM            MsgFromID = 1 // 表示来源移动端（IM）
	MsgFromID_MFI_Integral_Mall MsgFromID = 2 // 表示来源积分商城
	MsgFromID_MFI_GameApi       MsgFromID = 3 // 表示来源GameAPI接口服务
)

// Enum value maps for MsgFromID.
var (
	MsgFromID_name = map[int32]string{
		0: "MFI_UNKNOWN",
		1: "MFI_IM",
		2: "MFI_Integral_Mall",
		3: "MFI_GameApi",
	}
	MsgFromID_value = map[string]int32{
		"MFI_UNKNOWN":       0,
		"MFI_IM":            1,
		"MFI_Integral_Mall": 2,
		"MFI_GameApi":       3,
	}
)

func (x MsgFromID) Enum() *MsgFromID {
	p := new(MsgFromID)
	*p = x
	return p
}

func (x MsgFromID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgFromID) Descriptor() protoreflect.EnumDescriptor {
	return file_imapigateway_proto_enumTypes[2].Descriptor()
}

func (MsgFromID) Type() protoreflect.EnumType {
	return &file_imapigateway_proto_enumTypes[2]
}

func (x MsgFromID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgFromID.Descriptor instead.
func (MsgFromID) EnumDescriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{2}
}

// ###################################  avthumb.pb.go  #############################
// StatusCode 状态码
type StatusCode int32

const (
	StatusCode_StatusCodeOK   StatusCode = 0 // 操作成功
	StatusCode_StatusCodeFail StatusCode = 1 // 操作失败
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0: "StatusCodeOK",
		1: "StatusCodeFail",
	}
	StatusCode_value = map[string]int32{
		"StatusCodeOK":   0,
		"StatusCodeFail": 1,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imapigateway_proto_enumTypes[3].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_imapigateway_proto_enumTypes[3]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{3}
}

type ErrorCode int32

const (
	ErrorCode_ErrorCodeOk           ErrorCode = 0
	ErrorCode_ErrorCodeUserNotExist ErrorCode = 10001
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:     "ErrorCodeOk",
		10001: "ErrorCodeUserNotExist",
	}
	ErrorCode_value = map[string]int32{
		"ErrorCodeOk":           0,
		"ErrorCodeUserNotExist": 10001,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imapigateway_proto_enumTypes[4].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_imapigateway_proto_enumTypes[4]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{4}
}

type CheckIsMuteContactResult_ResultCode int32

const (
	CheckIsMuteContactResult_Success       CheckIsMuteContactResult_ResultCode = 0
	CheckIsMuteContactResult_InternalError CheckIsMuteContactResult_ResultCode = 1
)

// Enum value maps for CheckIsMuteContactResult_ResultCode.
var (
	CheckIsMuteContactResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	CheckIsMuteContactResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x CheckIsMuteContactResult_ResultCode) Enum() *CheckIsMuteContactResult_ResultCode {
	p := new(CheckIsMuteContactResult_ResultCode)
	*p = x
	return p
}

func (x CheckIsMuteContactResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckIsMuteContactResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imapigateway_proto_enumTypes[5].Descriptor()
}

func (CheckIsMuteContactResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imapigateway_proto_enumTypes[5]
}

func (x CheckIsMuteContactResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckIsMuteContactResult_ResultCode.Descriptor instead.
func (CheckIsMuteContactResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{46, 0}
}

type AuthSignUpResult_ResultCode int32

const (
	AuthSignUpResult_Success             AuthSignUpResult_ResultCode = 0
	AuthSignUpResult_InternalError       AuthSignUpResult_ResultCode = 1 // 服务器内部错误
	AuthSignUpResult_PhoneNumberInvalid  AuthSignUpResult_ResultCode = 2 // 无效的电话号码
	AuthSignUpResult_PhoneNumberOccupied AuthSignUpResult_ResultCode = 3 // 电话号码已注册
	AuthSignUpResult_CaptchaExpired      AuthSignUpResult_ResultCode = 4 // 验证码失效
	AuthSignUpResult_CaptchaInvalid      AuthSignUpResult_ResultCode = 5 // 验证码无效
	AuthSignUpResult_FloodWait           AuthSignUpResult_ResultCode = 6
	AuthSignUpResult_SignUpRobotBlocked  AuthSignUpResult_ResultCode = 7 // 机器人注册接口暂时关闭
)

// Enum value maps for AuthSignUpResult_ResultCode.
var (
	AuthSignUpResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "PhoneNumberInvalid",
		3: "PhoneNumberOccupied",
		4: "CaptchaExpired",
		5: "CaptchaInvalid",
		6: "FloodWait",
		7: "SignUpRobotBlocked",
	}
	AuthSignUpResult_ResultCode_value = map[string]int32{
		"Success":             0,
		"InternalError":       1,
		"PhoneNumberInvalid":  2,
		"PhoneNumberOccupied": 3,
		"CaptchaExpired":      4,
		"CaptchaInvalid":      5,
		"FloodWait":           6,
		"SignUpRobotBlocked":  7,
	}
)

func (x AuthSignUpResult_ResultCode) Enum() *AuthSignUpResult_ResultCode {
	p := new(AuthSignUpResult_ResultCode)
	*p = x
	return p
}

func (x AuthSignUpResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthSignUpResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imapigateway_proto_enumTypes[6].Descriptor()
}

func (AuthSignUpResult_ResultCode) Type() protoreflect.EnumType {
	return &file_imapigateway_proto_enumTypes[6]
}

func (x AuthSignUpResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthSignUpResult_ResultCode.Descriptor instead.
func (AuthSignUpResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{211, 0}
}

type GetGroupUserIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChanId int32 `protobuf:"varint,1,opt,name=chanId,proto3" json:"chanId,omitempty"` // 群组频道id
	UserId int32 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"` // userid
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"` // offset
	Length int32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"` // length
}

func (x *GetGroupUserIdsReq) Reset() {
	*x = GetGroupUserIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupUserIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupUserIdsReq) ProtoMessage() {}

func (x *GetGroupUserIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupUserIdsReq.ProtoReflect.Descriptor instead.
func (*GetGroupUserIdsReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{0}
}

func (x *GetGroupUserIdsReq) GetChanId() int32 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *GetGroupUserIdsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetGroupUserIdsReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGroupUserIdsReq) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type GetGroupUserIdsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetNo GroupLiveReplyCode `protobuf:"varint,1,opt,name=RetNo,proto3,enum=imapigateway.GroupLiveReplyCode" json:"RetNo,omitempty"` // 返回错误码
	Total int32              `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`                                      // 群组成员总数
	Count int32              `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`                                      // 本次获取成员数
	Users []int32            `protobuf:"varint,4,rep,packed,name=Users,proto3" json:"Users,omitempty"`                               // 成员ID列表
}

func (x *GetGroupUserIdsRsp) Reset() {
	*x = GetGroupUserIdsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupUserIdsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupUserIdsRsp) ProtoMessage() {}

func (x *GetGroupUserIdsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupUserIdsRsp.ProtoReflect.Descriptor instead.
func (*GetGroupUserIdsRsp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{1}
}

func (x *GetGroupUserIdsRsp) GetRetNo() GroupLiveReplyCode {
	if x != nil {
		return x.RetNo
	}
	return GroupLiveReplyCode_Successfuly
}

func (x *GetGroupUserIdsRsp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetGroupUserIdsRsp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetGroupUserIdsRsp) GetUsers() []int32 {
	if x != nil {
		return x.Users
	}
	return nil
}

// @ added by qingsong at 2020.12.01 for live start
// rpc GroupLiveStart(LiveStartReq) returns (LiveStarRsp) {}
// 开播请求
type LiveStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginAt  int32  `protobuf:"varint,1,opt,name=BeginAt,proto3" json:"BeginAt,omitempty"` // 必填：开播时间
	GroupId  int32  `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"` // 必填：直播群组 ID
	LiveStat int32  `protobuf:"varint,3,opt,name=LiveStat,proto3" json:"LiveStat,omitempty"`
	LiveType int32  `protobuf:"varint,4,opt,name=LiveType,proto3" json:"LiveType,omitempty"` // 必填：直播类型（公开，私密，...）
	LiveUser int32  `protobuf:"varint,5,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"` // 必填：主播用户 ID
	LiveRoom int32  `protobuf:"varint,6,opt,name=LiveRoom,proto3" json:"LiveRoom,omitempty"`
	LivePkId int64  `protobuf:"varint,7,opt,name=LivePkId,proto3" json:"LivePkId,omitempty"` // 必填：直播房间唯一ID
	LiveFlag string `protobuf:"bytes,8,opt,name=LiveFlag,proto3" json:"LiveFlag,omitempty"`  // 必填：直播标签(热舞，游戏 等)
	LiveName string `protobuf:"bytes,9,opt,name=LiveName,proto3" json:"LiveName,omitempty"`  // 必填：直播房间名称
	LiveIcon string `protobuf:"bytes,10,opt,name=LiveIcon,proto3" json:"LiveIcon,omitempty"` // 必填：直播封面图片
}

func (x *LiveStartReq) Reset() {
	*x = LiveStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStartReq) ProtoMessage() {}

func (x *LiveStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStartReq.ProtoReflect.Descriptor instead.
func (*LiveStartReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{2}
}

func (x *LiveStartReq) GetBeginAt() int32 {
	if x != nil {
		return x.BeginAt
	}
	return 0
}

func (x *LiveStartReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *LiveStartReq) GetLiveStat() int32 {
	if x != nil {
		return x.LiveStat
	}
	return 0
}

func (x *LiveStartReq) GetLiveType() int32 {
	if x != nil {
		return x.LiveType
	}
	return 0
}

func (x *LiveStartReq) GetLiveUser() int32 {
	if x != nil {
		return x.LiveUser
	}
	return 0
}

func (x *LiveStartReq) GetLiveRoom() int32 {
	if x != nil {
		return x.LiveRoom
	}
	return 0
}

func (x *LiveStartReq) GetLivePkId() int64 {
	if x != nil {
		return x.LivePkId
	}
	return 0
}

func (x *LiveStartReq) GetLiveFlag() string {
	if x != nil {
		return x.LiveFlag
	}
	return ""
}

func (x *LiveStartReq) GetLiveName() string {
	if x != nil {
		return x.LiveName
	}
	return ""
}

func (x *LiveStartReq) GetLiveIcon() string {
	if x != nil {
		return x.LiveIcon
	}
	return ""
}

// 开播返回
type LiveStartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=ReplyCode,proto3,enum=imapigateway.GroupLiveReplyCode" json:"ReplyCode,omitempty"` //
	InviteUrl string             `protobuf:"bytes,2,opt,name=InviteUrl,proto3" json:"InviteUrl,omitempty"`                                       // 主播直播期间邀请入群链接
}

func (x *LiveStartRsp) Reset() {
	*x = LiveStartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStartRsp) ProtoMessage() {}

func (x *LiveStartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStartRsp.ProtoReflect.Descriptor instead.
func (*LiveStartRsp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{3}
}

func (x *LiveStartRsp) GetReplyCode() GroupLiveReplyCode {
	if x != nil {
		return x.ReplyCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (x *LiveStartRsp) GetInviteUrl() string {
	if x != nil {
		return x.InviteUrl
	}
	return ""
}

// @ added by qingsong at 2020.12.01 for live stop
// rpc GroupLiveStop(LiveStopReq) returns (LiveStopRsp) {}
// 停播请求
type LiveStopReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int32  `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	LiveUser int32  `protobuf:"varint,2,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"`
	LiveStat int32  `protobuf:"varint,3,opt,name=LiveStat,proto3" json:"LiveStat,omitempty"`
	LiveCode string `protobuf:"bytes,4,opt,name=LiveCode,proto3" json:"LiveCode,omitempty"` // 直播房间唯一识别码
}

func (x *LiveStopReq) Reset() {
	*x = LiveStopReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStopReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStopReq) ProtoMessage() {}

func (x *LiveStopReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStopReq.ProtoReflect.Descriptor instead.
func (*LiveStopReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{4}
}

func (x *LiveStopReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *LiveStopReq) GetLiveUser() int32 {
	if x != nil {
		return x.LiveUser
	}
	return 0
}

func (x *LiveStopReq) GetLiveStat() int32 {
	if x != nil {
		return x.LiveStat
	}
	return 0
}

func (x *LiveStopReq) GetLiveCode() string {
	if x != nil {
		return x.LiveCode
	}
	return ""
}

// 停播应答
type LiveStopRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=RetCode,proto3,enum=imapigateway.GroupLiveReplyCode" json:"RetCode,omitempty"`
	Invited int32              `protobuf:"varint,2,opt,name=Invited,proto3" json:"Invited,omitempty"` // 主播本场直播邀请入群人数
}

func (x *LiveStopRsp) Reset() {
	*x = LiveStopRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStopRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStopRsp) ProtoMessage() {}

func (x *LiveStopRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStopRsp.ProtoReflect.Descriptor instead.
func (*LiveStopRsp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{5}
}

func (x *LiveStopRsp) GetRetCode() GroupLiveReplyCode {
	if x != nil {
		return x.RetCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (x *LiveStopRsp) GetInvited() int32 {
	if x != nil {
		return x.Invited
	}
	return 0
}

// @ added by qingsong at 2020.12.01 for live user invite link
// 获取主播邀请链接
type GetLiveInviteUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginAt  int32 `protobuf:"varint,1,opt,name=BeginAt,proto3" json:"BeginAt,omitempty"`
	GroupId  int32 `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`   // 必填：直播群组 ID
	LiveUser int32 `protobuf:"varint,3,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"` // 必填：主播用户 ID
}

func (x *GetLiveInviteUrlReq) Reset() {
	*x = GetLiveInviteUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveInviteUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveInviteUrlReq) ProtoMessage() {}

func (x *GetLiveInviteUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveInviteUrlReq.ProtoReflect.Descriptor instead.
func (*GetLiveInviteUrlReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{6}
}

func (x *GetLiveInviteUrlReq) GetBeginAt() int32 {
	if x != nil {
		return x.BeginAt
	}
	return 0
}

func (x *GetLiveInviteUrlReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetLiveInviteUrlReq) GetLiveUser() int32 {
	if x != nil {
		return x.LiveUser
	}
	return 0
}

type GetLiveInviteUrlRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=ReplyCode,proto3,enum=imapigateway.GroupLiveReplyCode" json:"ReplyCode,omitempty"` //
	InviteUrl string             `protobuf:"bytes,2,opt,name=InviteUrl,proto3" json:"InviteUrl,omitempty"`                                       // 主播直播期间邀请入群链接
}

func (x *GetLiveInviteUrlRsp) Reset() {
	*x = GetLiveInviteUrlRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveInviteUrlRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveInviteUrlRsp) ProtoMessage() {}

func (x *GetLiveInviteUrlRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveInviteUrlRsp.ProtoReflect.Descriptor instead.
func (*GetLiveInviteUrlRsp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{7}
}

func (x *GetLiveInviteUrlRsp) GetReplyCode() GroupLiveReplyCode {
	if x != nil {
		return x.ReplyCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (x *GetLiveInviteUrlRsp) GetInviteUrl() string {
	if x != nil {
		return x.InviteUrl
	}
	return ""
}

// rpc EditLiveInfo(EditLiveInfoReq) returns (EditLiveInfoRsp) {}
// 编辑请求
type EditLiveInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginAt  int32  `protobuf:"varint,1,opt,name=BeginAt,proto3" json:"BeginAt,omitempty"` // 必填：开播时间
	GroupId  int32  `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"` // 必填：直播群组 ID
	LiveStat int32  `protobuf:"varint,3,opt,name=LiveStat,proto3" json:"LiveStat,omitempty"`
	LiveType int32  `protobuf:"varint,4,opt,name=LiveType,proto3" json:"LiveType,omitempty"` // 必填：直播类型（公开，私密，...）
	LiveUser int32  `protobuf:"varint,5,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"` // 必填：主播用户 ID
	LiveRoom int32  `protobuf:"varint,6,opt,name=LiveRoom,proto3" json:"LiveRoom,omitempty"`
	LiveFlag string `protobuf:"bytes,7,opt,name=LiveFlag,proto3" json:"LiveFlag,omitempty"` // 必填：直播标签(热舞，游戏 等)
	LiveName string `protobuf:"bytes,8,opt,name=LiveName,proto3" json:"LiveName,omitempty"` // 必填：直播房间名称
	LiveIcon string `protobuf:"bytes,9,opt,name=LiveIcon,proto3" json:"LiveIcon,omitempty"` // 必填：直播封面图片
}

func (x *EditLiveInfoReq) Reset() {
	*x = EditLiveInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditLiveInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditLiveInfoReq) ProtoMessage() {}

func (x *EditLiveInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditLiveInfoReq.ProtoReflect.Descriptor instead.
func (*EditLiveInfoReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{8}
}

func (x *EditLiveInfoReq) GetBeginAt() int32 {
	if x != nil {
		return x.BeginAt
	}
	return 0
}

func (x *EditLiveInfoReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *EditLiveInfoReq) GetLiveStat() int32 {
	if x != nil {
		return x.LiveStat
	}
	return 0
}

func (x *EditLiveInfoReq) GetLiveType() int32 {
	if x != nil {
		return x.LiveType
	}
	return 0
}

func (x *EditLiveInfoReq) GetLiveUser() int32 {
	if x != nil {
		return x.LiveUser
	}
	return 0
}

func (x *EditLiveInfoReq) GetLiveRoom() int32 {
	if x != nil {
		return x.LiveRoom
	}
	return 0
}

func (x *EditLiveInfoReq) GetLiveFlag() string {
	if x != nil {
		return x.LiveFlag
	}
	return ""
}

func (x *EditLiveInfoReq) GetLiveName() string {
	if x != nil {
		return x.LiveName
	}
	return ""
}

func (x *EditLiveInfoReq) GetLiveIcon() string {
	if x != nil {
		return x.LiveIcon
	}
	return ""
}

type EditLiveInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=ReplyCode,proto3,enum=imapigateway.GroupLiveReplyCode" json:"ReplyCode,omitempty"` //
	ReplyData string             `protobuf:"bytes,2,opt,name=ReplyData,proto3" json:"ReplyData,omitempty"`                                       // error information.
}

func (x *EditLiveInfoRsp) Reset() {
	*x = EditLiveInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditLiveInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditLiveInfoRsp) ProtoMessage() {}

func (x *EditLiveInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditLiveInfoRsp.ProtoReflect.Descriptor instead.
func (*EditLiveInfoRsp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{9}
}

func (x *EditLiveInfoRsp) GetReplyCode() GroupLiveReplyCode {
	if x != nil {
		return x.ReplyCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (x *EditLiveInfoRsp) GetReplyData() string {
	if x != nil {
		return x.ReplyData
	}
	return ""
}

// @ brief : group live rights check.
// rpc GroupLiveCheck(GroupLiveCheckReq)returns(GroupLiveCheckRsp){}
type GroupLiveCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	LiveUser int32 `protobuf:"varint,2,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"`
}

func (x *GroupLiveCheckReq) Reset() {
	*x = GroupLiveCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupLiveCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupLiveCheckReq) ProtoMessage() {}

func (x *GroupLiveCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupLiveCheckReq.ProtoReflect.Descriptor instead.
func (*GroupLiveCheckReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{10}
}

func (x *GroupLiveCheckReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupLiveCheckReq) GetLiveUser() int32 {
	if x != nil {
		return x.LiveUser
	}
	return 0
}

type GroupLiveCheckRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=ReplyCode,proto3,enum=imapigateway.GroupLiveReplyCode" json:"ReplyCode,omitempty"` //
	ReplyData string             `protobuf:"bytes,2,opt,name=ReplyData,proto3" json:"ReplyData,omitempty"`                                       // error information.
}

func (x *GroupLiveCheckRsp) Reset() {
	*x = GroupLiveCheckRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupLiveCheckRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupLiveCheckRsp) ProtoMessage() {}

func (x *GroupLiveCheckRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupLiveCheckRsp.ProtoReflect.Descriptor instead.
func (*GroupLiveCheckRsp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{11}
}

func (x *GroupLiveCheckRsp) GetReplyCode() GroupLiveReplyCode {
	if x != nil {
		return x.ReplyCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (x *GroupLiveCheckRsp) GetReplyData() string {
	if x != nil {
		return x.ReplyData
	}
	return ""
}

// @ brief : get live invite user count.
// rpc GetLiveInviteCnt(GetLiveInviteCntReq) returns (GetLiveInviteCntRsp) {}
type GetLiveInviteCntReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	LiveUser int32 `protobuf:"varint,2,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"`
}

func (x *GetLiveInviteCntReq) Reset() {
	*x = GetLiveInviteCntReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveInviteCntReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveInviteCntReq) ProtoMessage() {}

func (x *GetLiveInviteCntReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveInviteCntReq.ProtoReflect.Descriptor instead.
func (*GetLiveInviteCntReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{12}
}

func (x *GetLiveInviteCntReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetLiveInviteCntReq) GetLiveUser() int32 {
	if x != nil {
		return x.LiveUser
	}
	return 0
}

type GetLiveInviteCntRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=RetCode,proto3,enum=imapigateway.GroupLiveReplyCode" json:"RetCode,omitempty"` // // error information.
	Invited int32              `protobuf:"varint,2,opt,name=Invited,proto3" json:"Invited,omitempty"`
}

func (x *GetLiveInviteCntRsp) Reset() {
	*x = GetLiveInviteCntRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveInviteCntRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveInviteCntRsp) ProtoMessage() {}

func (x *GetLiveInviteCntRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveInviteCntRsp.ProtoReflect.Descriptor instead.
func (*GetLiveInviteCntRsp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{13}
}

func (x *GetLiveInviteCntRsp) GetRetCode() GroupLiveReplyCode {
	if x != nil {
		return x.RetCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (x *GetLiveInviteCntRsp) GetInvited() int32 {
	if x != nil {
		return x.Invited
	}
	return 0
}

// rpc CheckUserInGroup(CheckUserInGroupReq) returns (CheckUserInGroupRsp)
type CheckUserInGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	UserId  int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *CheckUserInGroupReq) Reset() {
	*x = CheckUserInGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserInGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserInGroupReq) ProtoMessage() {}

func (x *CheckUserInGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserInGroupReq.ProtoReflect.Descriptor instead.
func (*CheckUserInGroupReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{14}
}

func (x *CheckUserInGroupReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CheckUserInGroupReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CheckUserInGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InGroup bool `protobuf:"varint,1,opt,name=InGroup,proto3" json:"InGroup,omitempty"`
}

func (x *CheckUserInGroupRsp) Reset() {
	*x = CheckUserInGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserInGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserInGroupRsp) ProtoMessage() {}

func (x *CheckUserInGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserInGroupRsp.ProtoReflect.Descriptor instead.
func (*CheckUserInGroupRsp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{15}
}

func (x *CheckUserInGroupRsp) GetInGroup() bool {
	if x != nil {
		return x.InGroup
	}
	return false
}

// 直播推送请求
type LivePushReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []int32 `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	SelfId  int32   `protobuf:"varint,2,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Text    string  `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Type    int32   `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *LivePushReq) Reset() {
	*x = LivePushReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivePushReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivePushReq) ProtoMessage() {}

func (x *LivePushReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivePushReq.ProtoReflect.Descriptor instead.
func (*LivePushReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{16}
}

func (x *LivePushReq) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *LivePushReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *LivePushReq) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *LivePushReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type LivePushResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *LivePushResult) Reset() {
	*x = LivePushResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivePushResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivePushResult) ProtoMessage() {}

func (x *LivePushResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivePushResult.ProtoReflect.Descriptor instead.
func (*LivePushResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{17}
}

func (x *LivePushResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 踢人
type ReqKickFromChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32  `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Kicker    int32  `protobuf:"varint,2,opt,name=kicker,proto3" json:"kicker,omitempty"`                          //谁踢人
	Kickee    int32  `protobuf:"varint,3,opt,name=kickee,proto3" json:"kickee,omitempty"`                          //谁被踢
	IsBotUser bool   `protobuf:"varint,4,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"` //被邀请者是不是机器人
	IsKicked  bool   `protobuf:"varint,5,opt,name=is_kicked,json=isKicked,proto3" json:"is_kicked,omitempty"`      // 是否是离开超级群\频道
	KickedId  int32  `protobuf:"varint,6,opt,name=Kicked_id,json=KickedId,proto3" json:"Kicked_id,omitempty"`      //如果是超级群被踢的话将，此用户保存到被踢列表中
	FromKeyid int64  `protobuf:"varint,7,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`   //踢人者的KEYID
	Debug     *Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqKickFromChannel) Reset() {
	*x = ReqKickFromChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqKickFromChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqKickFromChannel) ProtoMessage() {}

func (x *ReqKickFromChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqKickFromChannel.ProtoReflect.Descriptor instead.
func (*ReqKickFromChannel) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{18}
}

func (x *ReqKickFromChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqKickFromChannel) GetKicker() int32 {
	if x != nil {
		return x.Kicker
	}
	return 0
}

func (x *ReqKickFromChannel) GetKickee() int32 {
	if x != nil {
		return x.Kickee
	}
	return 0
}

func (x *ReqKickFromChannel) GetIsBotUser() bool {
	if x != nil {
		return x.IsBotUser
	}
	return false
}

func (x *ReqKickFromChannel) GetIsKicked() bool {
	if x != nil {
		return x.IsKicked
	}
	return false
}

func (x *ReqKickFromChannel) GetKickedId() int32 {
	if x != nil {
		return x.KickedId
	}
	return 0
}

func (x *ReqKickFromChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqKickFromChannel) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type CheckUserNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Debug    *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckUserNameReq) Reset() {
	*x = CheckUserNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserNameReq) ProtoMessage() {}

func (x *CheckUserNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserNameReq.ProtoReflect.Descriptor instead.
func (*CheckUserNameReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{19}
}

func (x *CheckUserNameReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckUserNameReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CheckUserNameReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type CheckUserNameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Occpuy    bool   `protobuf:"varint,1,opt,name=occpuy,proto3" json:"occpuy,omitempty"` //是否被占用
	ErrorCode uint32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg  string `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *CheckUserNameResp) Reset() {
	*x = CheckUserNameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserNameResp) ProtoMessage() {}

func (x *CheckUserNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserNameResp.ProtoReflect.Descriptor instead.
func (*CheckUserNameResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{20}
}

func (x *CheckUserNameResp) GetOccpuy() bool {
	if x != nil {
		return x.Occpuy
	}
	return false
}

func (x *CheckUserNameResp) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *CheckUserNameResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// 发送短信
type ReqSendCodeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid     int32  `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                           // 发送短信用户id
	AccessHash int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` // 用户hash
	Keyid      uint64 `protobuf:"varint,3,opt,name=keyid,proto3" json:"keyid,omitempty"`                             // 当前用户keyid
	Code       string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`                                // 验证码
	Debug      *Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`                              // debug日志
}

func (x *ReqSendCodeMsg) Reset() {
	*x = ReqSendCodeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendCodeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendCodeMsg) ProtoMessage() {}

func (x *ReqSendCodeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendCodeMsg.ProtoReflect.Descriptor instead.
func (*ReqSendCodeMsg) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{21}
}

func (x *ReqSendCodeMsg) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqSendCodeMsg) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqSendCodeMsg) GetKeyid() uint64 {
	if x != nil {
		return x.Keyid
	}
	return 0
}

func (x *ReqSendCodeMsg) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ReqSendCodeMsg) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 禁言单个用户
type ChannelBannedRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags        int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	ViewMessages bool  `protobuf:"varint,2,opt,name=view_messages,json=viewMessages,proto3" json:"view_messages,omitempty"`
	SendMessages bool  `protobuf:"varint,3,opt,name=send_messages,json=sendMessages,proto3" json:"send_messages,omitempty"`
	SendMedia    bool  `protobuf:"varint,4,opt,name=send_media,json=sendMedia,proto3" json:"send_media,omitempty"`
	SendStickers bool  `protobuf:"varint,5,opt,name=send_stickers,json=sendStickers,proto3" json:"send_stickers,omitempty"`
	SendGifs     bool  `protobuf:"varint,6,opt,name=send_gifs,json=sendGifs,proto3" json:"send_gifs,omitempty"`
	SendGames    bool  `protobuf:"varint,7,opt,name=send_games,json=sendGames,proto3" json:"send_games,omitempty"`
	SendInline   bool  `protobuf:"varint,8,opt,name=send_inline,json=sendInline,proto3" json:"send_inline,omitempty"`
	EmbedLinks   bool  `protobuf:"varint,9,opt,name=embed_links,json=embedLinks,proto3" json:"embed_links,omitempty"`
	UntilDate    int32 `protobuf:"varint,10,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
	// @ add by Qingsong at 2019-11-14 for ban member rights.
	InviteUser      bool `protobuf:"varint,11,opt,name=invite_user,json=inviteUser,proto3" json:"invite_user,omitempty"`                  // 邀請用戶
	PinMessage      bool `protobuf:"varint,12,opt,name=pin_message,json=pinMessage,proto3" json:"pin_message,omitempty"`                  // 置頂消息
	ChangeGroupInfo bool `protobuf:"varint,13,opt,name=change_group_info,json=changeGroupInfo,proto3" json:"change_group_info,omitempty"` // 修群组信息
	SendPolls       bool `protobuf:"varint,14,opt,name=send_polls,json=sendPolls,proto3" json:"send_polls,omitempty"`                     // 发起投票权限
}

func (x *ChannelBannedRights) Reset() {
	*x = ChannelBannedRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelBannedRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelBannedRights) ProtoMessage() {}

func (x *ChannelBannedRights) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelBannedRights.ProtoReflect.Descriptor instead.
func (*ChannelBannedRights) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{22}
}

func (x *ChannelBannedRights) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ChannelBannedRights) GetViewMessages() bool {
	if x != nil {
		return x.ViewMessages
	}
	return false
}

func (x *ChannelBannedRights) GetSendMessages() bool {
	if x != nil {
		return x.SendMessages
	}
	return false
}

func (x *ChannelBannedRights) GetSendMedia() bool {
	if x != nil {
		return x.SendMedia
	}
	return false
}

func (x *ChannelBannedRights) GetSendStickers() bool {
	if x != nil {
		return x.SendStickers
	}
	return false
}

func (x *ChannelBannedRights) GetSendGifs() bool {
	if x != nil {
		return x.SendGifs
	}
	return false
}

func (x *ChannelBannedRights) GetSendGames() bool {
	if x != nil {
		return x.SendGames
	}
	return false
}

func (x *ChannelBannedRights) GetSendInline() bool {
	if x != nil {
		return x.SendInline
	}
	return false
}

func (x *ChannelBannedRights) GetEmbedLinks() bool {
	if x != nil {
		return x.EmbedLinks
	}
	return false
}

func (x *ChannelBannedRights) GetUntilDate() int32 {
	if x != nil {
		return x.UntilDate
	}
	return 0
}

func (x *ChannelBannedRights) GetInviteUser() bool {
	if x != nil {
		return x.InviteUser
	}
	return false
}

func (x *ChannelBannedRights) GetPinMessage() bool {
	if x != nil {
		return x.PinMessage
	}
	return false
}

func (x *ChannelBannedRights) GetChangeGroupInfo() bool {
	if x != nil {
		return x.ChangeGroupInfo
	}
	return false
}

func (x *ChannelBannedRights) GetSendPolls() bool {
	if x != nil {
		return x.SendPolls
	}
	return false
}

type ReqEditBanChannelUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId              int32                `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId           int64                `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId           int32                `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	BannedUserId        int32                `protobuf:"varint,4,opt,name=bannedUserId,proto3" json:"bannedUserId,omitempty"`
	AccessHash          int64                `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	UtilDate            int32                `protobuf:"varint,6,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ChannelBannedRights *ChannelBannedRights `protobuf:"bytes,7,opt,name=channelBannedRights,proto3" json:"channelBannedRights,omitempty"`
	Debug               *Debug               `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditBanChannelUser) Reset() {
	*x = ReqEditBanChannelUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditBanChannelUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditBanChannelUser) ProtoMessage() {}

func (x *ReqEditBanChannelUser) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditBanChannelUser.ProtoReflect.Descriptor instead.
func (*ReqEditBanChannelUser) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{23}
}

func (x *ReqEditBanChannelUser) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetBannedUserId() int32 {
	if x != nil {
		return x.BannedUserId
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetUtilDate() int32 {
	if x != nil {
		return x.UtilDate
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetChannelBannedRights() *ChannelBannedRights {
	if x != nil {
		return x.ChannelBannedRights
	}
	return nil
}

func (x *ReqEditBanChannelUser) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 超级群全体禁言
type ReqEditEveryoneQuiet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`       // 是否频道
	ChannelId int32  `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 是否超级群
	Quiet     bool   `protobuf:"varint,3,opt,name=quiet,proto3" json:"quiet,omitempty"`         // infoserver给的ID
	Debug     *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditEveryoneQuiet) Reset() {
	*x = ReqEditEveryoneQuiet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditEveryoneQuiet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditEveryoneQuiet) ProtoMessage() {}

func (x *ReqEditEveryoneQuiet) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditEveryoneQuiet.ProtoReflect.Descriptor instead.
func (*ReqEditEveryoneQuiet) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{24}
}

func (x *ReqEditEveryoneQuiet) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqEditEveryoneQuiet) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditEveryoneQuiet) GetQuiet() bool {
	if x != nil {
		return x.Quiet
	}
	return false
}

func (x *ReqEditEveryoneQuiet) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取群用户信息
type GetChannelUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32  `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId     int32  `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserId     int32  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	AccessHash int64  `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetChannelUserInfoReq) Reset() {
	*x = GetChannelUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelUserInfoReq) ProtoMessage() {}

func (x *GetChannelUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelUserInfoReq.ProtoReflect.Descriptor instead.
func (*GetChannelUserInfoReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{25}
}

func (x *GetChannelUserInfoReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelUserInfoReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *GetChannelUserInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChannelUserInfoReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetChannelUserInfoReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetChannelUserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply      []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode  int32  `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"` //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
	ChannelId  int32  `protobuf:"varint,3,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 是否超级群
	AccessHash int64  `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FromId     int32  `protobuf:"varint,5,opt,name=FromId,proto3" json:"FromId,omitempty"`
}

func (x *GetChannelUserInfoResp) Reset() {
	*x = GetChannelUserInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelUserInfoResp) ProtoMessage() {}

func (x *GetChannelUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelUserInfoResp.ProtoReflect.Descriptor instead.
func (*GetChannelUserInfoResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{26}
}

func (x *GetChannelUserInfoResp) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *GetChannelUserInfoResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetChannelUserInfoResp) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelUserInfoResp) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetChannelUserInfoResp) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

// 检测是否是对方是否是自己的联系人
type CheckIsSelfContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32  `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"` //自己的Id
	UserId int32  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"` //检测方的id
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckIsSelfContactReq) Reset() {
	*x = CheckIsSelfContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsSelfContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsSelfContactReq) ProtoMessage() {}

func (x *CheckIsSelfContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsSelfContactReq.ProtoReflect.Descriptor instead.
func (*CheckIsSelfContactReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{27}
}

func (x *CheckIsSelfContactReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *CheckIsSelfContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckIsSelfContactReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 检测是否是自己是否是对方的联系人的返回结果
type CheckIsSelfContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSelfContact bool      `protobuf:"varint,1,opt,name=IsSelfContact,proto3" json:"IsSelfContact,omitempty"`                     //对方是否是自己的联系人
	Errorcode     ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *CheckIsSelfContactResult) Reset() {
	*x = CheckIsSelfContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsSelfContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsSelfContactResult) ProtoMessage() {}

func (x *CheckIsSelfContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsSelfContactResult.ProtoReflect.Descriptor instead.
func (*CheckIsSelfContactResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{28}
}

func (x *CheckIsSelfContactResult) GetIsSelfContact() bool {
	if x != nil {
		return x.IsSelfContact
	}
	return false
}

func (x *CheckIsSelfContactResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 朋友圈关注接口
type MomentFollowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 谁关注
	FollowId int64 `protobuf:"varint,2,opt,name=follow_id,json=followId,proto3" json:"follow_id,omitempty"` // 被关注的用户
	IsFollow int32 `protobuf:"varint,3,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"` // 1-关注 2-取消
}

func (x *MomentFollowReq) Reset() {
	*x = MomentFollowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentFollowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentFollowReq) ProtoMessage() {}

func (x *MomentFollowReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentFollowReq.ProtoReflect.Descriptor instead.
func (*MomentFollowReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{29}
}

func (x *MomentFollowReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MomentFollowReq) GetFollowId() int64 {
	if x != nil {
		return x.FollowId
	}
	return 0
}

func (x *MomentFollowReq) GetIsFollow() int32 {
	if x != nil {
		return x.IsFollow
	}
	return 0
}

// 朋友圈关注接口
type MomentFollowResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *MomentFollowResp) Reset() {
	*x = MomentFollowResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentFollowResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentFollowResp) ProtoMessage() {}

func (x *MomentFollowResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentFollowResp.ProtoReflect.Descriptor instead.
func (*MomentFollowResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{30}
}

func (x *MomentFollowResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type MomentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForumId    int64  `protobuf:"varint,1,opt,name=forum_id,json=forumId,proto3" json:"forum_id,omitempty"`         // 发起该消息的帖子id
	ForumType  int64  `protobuf:"varint,2,opt,name=forum_type,json=forumType,proto3" json:"forum_type,omitempty"`   // 发起该消息的帖子类型
	ForumImage string `protobuf:"bytes,3,opt,name=forum_image,json=forumImage,proto3" json:"forum_image,omitempty"` // 发起该消息的帖子一张图片
	ForumText  string `protobuf:"bytes,4,opt,name=forum_text,json=forumText,proto3" json:"forum_text,omitempty"`    // 发起该消息的帖子内容
	WithId     int32  `protobuf:"varint,5,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`
	MsgId      int64  `protobuf:"varint,6,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                // 发起该消息的互动消息内容Id
	MsgContent string `protobuf:"bytes,7,opt,name=msg_content,json=msgContent,proto3" json:"msg_content,omitempty"`  // 发起该消息的互动消息内容
	IsFollowed int64  `protobuf:"varint,8,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed,omitempty"` // 是否关注该用户
}

func (x *MomentData) Reset() {
	*x = MomentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentData) ProtoMessage() {}

func (x *MomentData) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentData.ProtoReflect.Descriptor instead.
func (*MomentData) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{31}
}

func (x *MomentData) GetForumId() int64 {
	if x != nil {
		return x.ForumId
	}
	return 0
}

func (x *MomentData) GetForumType() int64 {
	if x != nil {
		return x.ForumType
	}
	return 0
}

func (x *MomentData) GetForumImage() string {
	if x != nil {
		return x.ForumImage
	}
	return ""
}

func (x *MomentData) GetForumText() string {
	if x != nil {
		return x.ForumText
	}
	return ""
}

func (x *MomentData) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *MomentData) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *MomentData) GetMsgContent() string {
	if x != nil {
		return x.MsgContent
	}
	return ""
}

func (x *MomentData) GetIsFollowed() int64 {
	if x != nil {
		return x.IsFollowed
	}
	return 0
}

type SysNotifyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgTitle      string      `protobuf:"bytes,1,opt,name=msg_title,json=msgTitle,proto3" json:"msg_title,omitempty"`
	MsgTime       int64       `protobuf:"varint,2,opt,name=msg_time,json=msgTime,proto3" json:"msg_time,omitempty"`
	MsgUrl        string      `protobuf:"bytes,3,opt,name=msg_url,json=msgUrl,proto3" json:"msg_url,omitempty"`
	MsgButtonText string      `protobuf:"bytes,4,opt,name=msg_button_text,json=msgButtonText,proto3" json:"msg_button_text,omitempty"`
	InteractMsg   *MomentData `protobuf:"bytes,5,opt,name=interact_msg,json=interactMsg,proto3" json:"interact_msg,omitempty"`
	IsPush        bool        `protobuf:"varint,6,opt,name=is_push,json=isPush,proto3" json:"is_push,omitempty"`
}

func (x *SysNotifyData) Reset() {
	*x = SysNotifyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysNotifyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysNotifyData) ProtoMessage() {}

func (x *SysNotifyData) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysNotifyData.ProtoReflect.Descriptor instead.
func (*SysNotifyData) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{32}
}

func (x *SysNotifyData) GetMsgTitle() string {
	if x != nil {
		return x.MsgTitle
	}
	return ""
}

func (x *SysNotifyData) GetMsgTime() int64 {
	if x != nil {
		return x.MsgTime
	}
	return 0
}

func (x *SysNotifyData) GetMsgUrl() string {
	if x != nil {
		return x.MsgUrl
	}
	return ""
}

func (x *SysNotifyData) GetMsgButtonText() string {
	if x != nil {
		return x.MsgButtonText
	}
	return ""
}

func (x *SysNotifyData) GetInteractMsg() *MomentData {
	if x != nil {
		return x.InteractMsg
	}
	return nil
}

func (x *SysNotifyData) GetIsPush() bool {
	if x != nil {
		return x.IsPush
	}
	return false
}

type NotifyMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq         int64  `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Fid         string `protobuf:"bytes,2,opt,name=fid,proto3" json:"fid,omitempty"`
	ContentType string `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	PartNum     int64  `protobuf:"varint,4,opt,name=part_num,json=partNum,proto3" json:"part_num,omitempty"`
	FileName    string `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Md5         string `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
	Width       int32  `protobuf:"varint,7,opt,name=width,proto3" json:"width,omitempty"`
	Height      int32  `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *NotifyMedia) Reset() {
	*x = NotifyMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMedia) ProtoMessage() {}

func (x *NotifyMedia) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMedia.ProtoReflect.Descriptor instead.
func (*NotifyMedia) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{33}
}

func (x *NotifyMedia) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *NotifyMedia) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

func (x *NotifyMedia) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *NotifyMedia) GetPartNum() int64 {
	if x != nil {
		return x.PartNum
	}
	return 0
}

func (x *NotifyMedia) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *NotifyMedia) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *NotifyMedia) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *NotifyMedia) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type NotifyText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq  int64  `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *NotifyText) Reset() {
	*x = NotifyText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyText) ProtoMessage() {}

func (x *NotifyText) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyText.ProtoReflect.Descriptor instead.
func (*NotifyText) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{34}
}

func (x *NotifyText) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *NotifyText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type SendMediaSysNotifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCode   int32          `protobuf:"varint,1,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty"`       // 朋友圈消息填1
	BusinessCode int32          `protobuf:"varint,2,opt,name=business_code,json=businessCode,proto3" json:"business_code,omitempty"` // 4-朋友圈评论消息 5-朋友圈回复消息 6-朋友圈点赞消息(只推送点赞消息,不推送取消点赞) 7-朋友圈@消息 8-朋友圈关注消息(只推送关注消息,不推送取消关注) 9-朋友圈提及消息
	NotifyMedias []*NotifyMedia `protobuf:"bytes,3,rep,name=notify_medias,json=notifyMedias,proto3" json:"notify_medias,omitempty"`
	NotifyTexts  []*NotifyText  `protobuf:"bytes,4,rep,name=notify_texts,json=notifyTexts,proto3" json:"notify_texts,omitempty"`
	Users        []int32        `protobuf:"varint,5,rep,packed,name=users,proto3" json:"users,omitempty"`
	Data         *SysNotifyData `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	FromId       int32          `protobuf:"varint,7,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	MsgId        string         `protobuf:"bytes,8,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *SendMediaSysNotifyReq) Reset() {
	*x = SendMediaSysNotifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMediaSysNotifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMediaSysNotifyReq) ProtoMessage() {}

func (x *SendMediaSysNotifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMediaSysNotifyReq.ProtoReflect.Descriptor instead.
func (*SendMediaSysNotifyReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{35}
}

func (x *SendMediaSysNotifyReq) GetSourceCode() int32 {
	if x != nil {
		return x.SourceCode
	}
	return 0
}

func (x *SendMediaSysNotifyReq) GetBusinessCode() int32 {
	if x != nil {
		return x.BusinessCode
	}
	return 0
}

func (x *SendMediaSysNotifyReq) GetNotifyMedias() []*NotifyMedia {
	if x != nil {
		return x.NotifyMedias
	}
	return nil
}

func (x *SendMediaSysNotifyReq) GetNotifyTexts() []*NotifyText {
	if x != nil {
		return x.NotifyTexts
	}
	return nil
}

func (x *SendMediaSysNotifyReq) GetUsers() []int32 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *SendMediaSysNotifyReq) GetData() *SysNotifyData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendMediaSysNotifyReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *SendMediaSysNotifyReq) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

type FailUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User int32  `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *FailUser) Reset() {
	*x = FailUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailUser) ProtoMessage() {}

func (x *FailUser) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailUser.ProtoReflect.Descriptor instead.
func (*FailUser) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{36}
}

func (x *FailUser) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *FailUser) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SucceedUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User int32  `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SucceedUser) Reset() {
	*x = SucceedUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SucceedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SucceedUser) ProtoMessage() {}

func (x *SucceedUser) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SucceedUser.ProtoReflect.Descriptor instead.
func (*SucceedUser) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{37}
}

func (x *SucceedUser) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *SucceedUser) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SendMediaSysNotifyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    uint32         `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg     string         `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	FailUsers    []*FailUser    `protobuf:"bytes,3,rep,name=failUsers,proto3" json:"failUsers,omitempty"`
	SucceedUsers []*SucceedUser `protobuf:"bytes,4,rep,name=SucceedUsers,proto3" json:"SucceedUsers,omitempty"`
}

func (x *SendMediaSysNotifyResult) Reset() {
	*x = SendMediaSysNotifyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMediaSysNotifyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMediaSysNotifyResult) ProtoMessage() {}

func (x *SendMediaSysNotifyResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMediaSysNotifyResult.ProtoReflect.Descriptor instead.
func (*SendMediaSysNotifyResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{38}
}

func (x *SendMediaSysNotifyResult) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *SendMediaSysNotifyResult) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *SendMediaSysNotifyResult) GetFailUsers() []*FailUser {
	if x != nil {
		return x.FailUsers
	}
	return nil
}

func (x *SendMediaSysNotifyResult) GetSucceedUsers() []*SucceedUser {
	if x != nil {
		return x.SucceedUsers
	}
	return nil
}

type SearchUserByNicknameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname string  `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	UserIds  []int32 `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	Offset   int32   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	SelfId   int32   `protobuf:"varint,5,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
}

func (x *SearchUserByNicknameReq) Reset() {
	*x = SearchUserByNicknameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserByNicknameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserByNicknameReq) ProtoMessage() {}

func (x *SearchUserByNicknameReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserByNicknameReq.ProtoReflect.Descriptor instead.
func (*SearchUserByNicknameReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{39}
}

func (x *SearchUserByNicknameReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SearchUserByNicknameReq) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *SearchUserByNicknameReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchUserByNicknameReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchUserByNicknameReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

type SearchUserByNicknameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfos []*UserInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"`
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *SearchUserByNicknameResult) Reset() {
	*x = SearchUserByNicknameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserByNicknameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserByNicknameResult) ProtoMessage() {}

func (x *SearchUserByNicknameResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserByNicknameResult.ProtoReflect.Descriptor instead.
func (*SearchUserByNicknameResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{40}
}

func (x *SearchUserByNicknameResult) GetUserInfos() []*UserInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

func (x *SearchUserByNicknameResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Length int32  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	UserId uint32 `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Url    string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{41}
}

func (x *Entity) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Entity) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Entity) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Entity) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Entity) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type MomentNotifyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCode   int32     `protobuf:"varint,1,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty"`       // 朋友圈消息填1
	BusinessCode int32     `protobuf:"varint,2,opt,name=business_code,json=businessCode,proto3" json:"business_code,omitempty"` // 4-朋友圈评论消息 5-朋友圈回复消息 6-朋友圈点赞消息(只推送点赞消息,不推送取消点赞) 7-朋友圈@消息 8-朋友圈关注消息(只推送关注消息,不推送取消关注) 9-朋友圈提及消息
	ToId         int32     `protobuf:"varint,3,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`                         // 接受通知的用户Id
	WithId       int32     `protobuf:"varint,4,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`                   // 发起该消息的用户Id
	ForumId      int64     `protobuf:"varint,5,opt,name=forum_id,json=forumId,proto3" json:"forum_id,omitempty"`                // 发起该消息的帖子id
	ForumType    int64     `protobuf:"varint,6,opt,name=forum_type,json=forumType,proto3" json:"forum_type,omitempty"`          // 发起该消息的帖子类型
	ForumImage   string    `protobuf:"bytes,7,opt,name=forum_image,json=forumImage,proto3" json:"forum_image,omitempty"`        // 发起该消息的帖子一张图片
	ForumText    string    `protobuf:"bytes,8,opt,name=forum_text,json=forumText,proto3" json:"forum_text,omitempty"`           // 发起该消息的帖子内容
	MsgId        int64     `protobuf:"varint,9,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                      // 发起该消息的互动消息内容Id
	MsgContent   string    `protobuf:"bytes,10,opt,name=msg_content,json=msgContent,proto3" json:"msg_content,omitempty"`       // 发起该消息的互动消息内容
	IsFollowed   int64     `protobuf:"varint,11,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed,omitempty"`      // 是否关注该用户
	MsgTime      int64     `protobuf:"varint,12,opt,name=msg_time,json=msgTime,proto3" json:"msg_time,omitempty"`               // 发帖时间
	Entites      []*Entity `protobuf:"bytes,13,rep,name=entites,proto3" json:"entites,omitempty"`                               // 高亮
}

func (x *MomentNotifyData) Reset() {
	*x = MomentNotifyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentNotifyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentNotifyData) ProtoMessage() {}

func (x *MomentNotifyData) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentNotifyData.ProtoReflect.Descriptor instead.
func (*MomentNotifyData) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{42}
}

func (x *MomentNotifyData) GetSourceCode() int32 {
	if x != nil {
		return x.SourceCode
	}
	return 0
}

func (x *MomentNotifyData) GetBusinessCode() int32 {
	if x != nil {
		return x.BusinessCode
	}
	return 0
}

func (x *MomentNotifyData) GetToId() int32 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *MomentNotifyData) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *MomentNotifyData) GetForumId() int64 {
	if x != nil {
		return x.ForumId
	}
	return 0
}

func (x *MomentNotifyData) GetForumType() int64 {
	if x != nil {
		return x.ForumType
	}
	return 0
}

func (x *MomentNotifyData) GetForumImage() string {
	if x != nil {
		return x.ForumImage
	}
	return ""
}

func (x *MomentNotifyData) GetForumText() string {
	if x != nil {
		return x.ForumText
	}
	return ""
}

func (x *MomentNotifyData) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *MomentNotifyData) GetMsgContent() string {
	if x != nil {
		return x.MsgContent
	}
	return ""
}

func (x *MomentNotifyData) GetIsFollowed() int64 {
	if x != nil {
		return x.IsFollowed
	}
	return 0
}

func (x *MomentNotifyData) GetMsgTime() int64 {
	if x != nil {
		return x.MsgTime
	}
	return 0
}

func (x *MomentNotifyData) GetEntites() []*Entity {
	if x != nil {
		return x.Entites
	}
	return nil
}

type MomentNotifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MomentNotifyData []*MomentNotifyData `protobuf:"bytes,1,rep,name=moment_notify_data,json=momentNotifyData,proto3" json:"moment_notify_data,omitempty"` // 朋友圈通知消息
}

func (x *MomentNotifyReq) Reset() {
	*x = MomentNotifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentNotifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentNotifyReq) ProtoMessage() {}

func (x *MomentNotifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentNotifyReq.ProtoReflect.Descriptor instead.
func (*MomentNotifyReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{43}
}

func (x *MomentNotifyReq) GetMomentNotifyData() []*MomentNotifyData {
	if x != nil {
		return x.MomentNotifyData
	}
	return nil
}

type MomentNotifyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg  string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *MomentNotifyResult) Reset() {
	*x = MomentNotifyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentNotifyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentNotifyResult) ProtoMessage() {}

func (x *MomentNotifyResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentNotifyResult.ProtoReflect.Descriptor instead.
func (*MomentNotifyResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{44}
}

func (x *MomentNotifyResult) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *MomentNotifyResult) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// 根据用户Id来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
type CheckIsMuteContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32 `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CheckIsMuteContactReq) Reset() {
	*x = CheckIsMuteContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsMuteContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsMuteContactReq) ProtoMessage() {}

func (x *CheckIsMuteContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsMuteContactReq.ProtoReflect.Descriptor instead.
func (*CheckIsMuteContactReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{45}
}

func (x *CheckIsMuteContactReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *CheckIsMuteContactReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CheckIsMuteContactResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode CheckIsMuteContactResult_ResultCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=imapigateway.CheckIsMuteContactResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Result    bool                                `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`                                                             //
}

func (x *CheckIsMuteContactResult) Reset() {
	*x = CheckIsMuteContactResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsMuteContactResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsMuteContactResult) ProtoMessage() {}

func (x *CheckIsMuteContactResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsMuteContactResult.ProtoReflect.Descriptor instead.
func (*CheckIsMuteContactResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{46}
}

func (x *CheckIsMuteContactResult) GetErrorCode() CheckIsMuteContactResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return CheckIsMuteContactResult_Success
}

func (x *CheckIsMuteContactResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 联系人的基本信息
type ContactInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                              //用户自己的id
	ContactId       int32  `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`                     //联系人的id
	FirstName       string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`                      //联系人备注
	LastName        string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`                         //联系人备注
	IsSelfContacted bool   `protobuf:"varint,5,opt,name=is_self_contacted,json=isSelfContacted,proto3" json:"is_self_contacted,omitempty"` //此联系人是否是自己的联系人
	SelfIsContacted bool   `protobuf:"varint,6,opt,name=self_is_contacted,json=selfIsContacted,proto3" json:"self_is_contacted,omitempty"` //自己是不是此联系人的联系人
	StarMark        bool   `protobuf:"varint,7,opt,name=star_mark,json=starMark,proto3" json:"star_mark,omitempty"`                        //  是否为星标联系人
	HasPhone        bool   `protobuf:"varint,8,opt,name=has_phone,json=hasPhone,proto3" json:"has_phone,omitempty"`                        // 是否通过电话号码添加
	GroupId         int32  `protobuf:"varint,9,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	About           string `protobuf:"bytes,10,opt,name=about,proto3" json:"about,omitempty"`
}

func (x *ContactInfo) Reset() {
	*x = ContactInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInfo) ProtoMessage() {}

func (x *ContactInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInfo.ProtoReflect.Descriptor instead.
func (*ContactInfo) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{47}
}

func (x *ContactInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactInfo) GetContactId() int32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *ContactInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ContactInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ContactInfo) GetIsSelfContacted() bool {
	if x != nil {
		return x.IsSelfContacted
	}
	return false
}

func (x *ContactInfo) GetSelfIsContacted() bool {
	if x != nil {
		return x.SelfIsContacted
	}
	return false
}

func (x *ContactInfo) GetStarMark() bool {
	if x != nil {
		return x.StarMark
	}
	return false
}

func (x *ContactInfo) GetHasPhone() bool {
	if x != nil {
		return x.HasPhone
	}
	return false
}

func (x *ContactInfo) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ContactInfo) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

// 获取用户联系人列表的请求
type ContatsGetContactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`          //用户的Id
	KeyId       int64  `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`            // 用户的keyId
	Contacthash string `protobuf:"bytes,3,opt,name=contacthash,proto3" json:"contacthash,omitempty"` //用户联系人的哈希值
	Debug       *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ContatsGetContactsReq) Reset() {
	*x = ContatsGetContactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContatsGetContactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContatsGetContactsReq) ProtoMessage() {}

func (x *ContatsGetContactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContatsGetContactsReq.ProtoReflect.Descriptor instead.
func (*ContatsGetContactsReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{48}
}

func (x *ContatsGetContactsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContatsGetContactsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ContatsGetContactsReq) GetContacthash() string {
	if x != nil {
		return x.Contacthash
	}
	return ""
}

func (x *ContatsGetContactsReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 用户联系人列表获取的返回
type ContatsGetContactsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactArr  []*ContactInfo `protobuf:"bytes,1,rep,name=contactArr,proto3" json:"contactArr,omitempty"`                            //联系人的的信息们
	UserInfoArr []*UserInfo    `protobuf:"bytes,2,rep,name=userInfoArr,proto3" json:"userInfoArr,omitempty"`                          //联系人们的用户信息们
	Errorcode   ReErrCode      `protobuf:"varint,3,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *ContatsGetContactsResult) Reset() {
	*x = ContatsGetContactsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContatsGetContactsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContatsGetContactsResult) ProtoMessage() {}

func (x *ContatsGetContactsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContatsGetContactsResult.ProtoReflect.Descriptor instead.
func (*ContatsGetContactsResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{49}
}

func (x *ContatsGetContactsResult) GetContactArr() []*ContactInfo {
	if x != nil {
		return x.ContactArr
	}
	return nil
}

func (x *ContatsGetContactsResult) GetUserInfoArr() []*UserInfo {
	if x != nil {
		return x.UserInfoArr
	}
	return nil
}

func (x *ContatsGetContactsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type MomentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId []int32 `protobuf:"varint,1,rep,packed,name=userId,proto3" json:"userId,omitempty"`
	Type   int32   `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *MomentState) Reset() {
	*x = MomentState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentState) ProtoMessage() {}

func (x *MomentState) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentState.ProtoReflect.Descriptor instead.
func (*MomentState) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{50}
}

func (x *MomentState) GetUserId() []int32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *MomentState) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ReqUpdateMoments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MomentStates []*MomentState `protobuf:"bytes,1,rep,name=momentStates,proto3" json:"momentStates,omitempty"` //被更新用户ID列表
	SelfId       int32          `protobuf:"varint,2,opt,name=selfId,proto3" json:"selfId,omitempty"`            //发送用户id
}

func (x *ReqUpdateMoments) Reset() {
	*x = ReqUpdateMoments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateMoments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateMoments) ProtoMessage() {}

func (x *ReqUpdateMoments) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateMoments.ProtoReflect.Descriptor instead.
func (*ReqUpdateMoments) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{51}
}

func (x *ReqUpdateMoments) GetMomentStates() []*MomentState {
	if x != nil {
		return x.MomentStates
	}
	return nil
}

func (x *ReqUpdateMoments) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

type ResUpdateMoments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` //1为成功,-1为失败
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    //返回描述
}

func (x *ResUpdateMoments) Reset() {
	*x = ResUpdateMoments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResUpdateMoments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResUpdateMoments) ProtoMessage() {}

func (x *ResUpdateMoments) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResUpdateMoments.ProtoReflect.Descriptor instead.
func (*ResUpdateMoments) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{52}
}

func (x *ResUpdateMoments) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResUpdateMoments) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 积分业务通用协议请求
type ReqIntegralUniversalBusiness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip         string    `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`                                      // 用户ip
	ImUserId   int32     `protobuf:"varint,2,opt,name=imUserId,proto3" json:"imUserId,omitempty"`                         // im侧用户标识
	ImKeyId    uint64    `protobuf:"varint,3,opt,name=imKeyId,proto3" json:"imKeyId,omitempty"`                           // im客户端keyid
	BusinessId int32     `protobuf:"varint,4,opt,name=businessId,proto3" json:"businessId,omitempty"`                     // 业务标识
	FromId     MsgFromID `protobuf:"varint,5,opt,name=fromId,proto3,enum=imapigateway.MsgFromID" json:"fromId,omitempty"` // 来源标识　１表示来源移动端,2表示来源积分商城
	Data       []byte    `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`                                  // JSON数据
}

func (x *ReqIntegralUniversalBusiness) Reset() {
	*x = ReqIntegralUniversalBusiness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqIntegralUniversalBusiness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqIntegralUniversalBusiness) ProtoMessage() {}

func (x *ReqIntegralUniversalBusiness) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqIntegralUniversalBusiness.ProtoReflect.Descriptor instead.
func (*ReqIntegralUniversalBusiness) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{53}
}

func (x *ReqIntegralUniversalBusiness) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ReqIntegralUniversalBusiness) GetImUserId() int32 {
	if x != nil {
		return x.ImUserId
	}
	return 0
}

func (x *ReqIntegralUniversalBusiness) GetImKeyId() uint64 {
	if x != nil {
		return x.ImKeyId
	}
	return 0
}

func (x *ReqIntegralUniversalBusiness) GetBusinessId() int32 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *ReqIntegralUniversalBusiness) GetFromId() MsgFromID {
	if x != nil {
		return x.FromId
	}
	return MsgFromID_MFI_UNKNOWN
}

func (x *ReqIntegralUniversalBusiness) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 积分业务通用协议响应
type ReplyIntegralUniversalBusiness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // JSON数据
}

func (x *ReplyIntegralUniversalBusiness) Reset() {
	*x = ReplyIntegralUniversalBusiness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyIntegralUniversalBusiness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyIntegralUniversalBusiness) ProtoMessage() {}

func (x *ReplyIntegralUniversalBusiness) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyIntegralUniversalBusiness.ProtoReflect.Descriptor instead.
func (*ReplyIntegralUniversalBusiness) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{54}
}

func (x *ReplyIntegralUniversalBusiness) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 游戏规则获取借口
type OtherTransReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	KeyId       int64  `protobuf:"varint,2,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	IpAddr      string `protobuf:"bytes,3,opt,name=IpAddr,proto3" json:"IpAddr,omitempty"`
	ReqMessagId int64  `protobuf:"varint,4,opt,name=ReqMessagId,proto3" json:"ReqMessagId,omitempty"`
	ReqBytes    []byte `protobuf:"bytes,5,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
}

func (x *OtherTransReq) Reset() {
	*x = OtherTransReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherTransReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherTransReq) ProtoMessage() {}

func (x *OtherTransReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherTransReq.ProtoReflect.Descriptor instead.
func (*OtherTransReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{55}
}

func (x *OtherTransReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OtherTransReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *OtherTransReq) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

func (x *OtherTransReq) GetReqMessagId() int64 {
	if x != nil {
		return x.ReqMessagId
	}
	return 0
}

func (x *OtherTransReq) GetReqBytes() []byte {
	if x != nil {
		return x.ReqBytes
	}
	return nil
}

// 游戏规则响应
type OtherTransResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
}

func (x *OtherTransResp) Reset() {
	*x = OtherTransResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherTransResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherTransResp) ProtoMessage() {}

func (x *OtherTransResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherTransResp.ProtoReflect.Descriptor instead.
func (*OtherTransResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{56}
}

func (x *OtherTransResp) GetRespBytes() []byte {
	if x != nil {
		return x.RespBytes
	}
	return nil
}

// 设置用户性别和生日
type SetUserDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`         //用户ID
	Flags     int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`                         //位标识
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"` //用户昵称
	Photo     string `protobuf:"bytes,4,opt,name=photo,proto3" json:"photo,omitempty"`
	Sex       int32  `protobuf:"varint,5,opt,name=sex,proto3" json:"sex,omitempty"`           // 用户性别
	Birthday  int32  `protobuf:"varint,6,opt,name=birthday,proto3" json:"birthday,omitempty"` // 用户性别
	Extend    string `protobuf:"bytes,7,opt,name=extend,proto3" json:"extend,omitempty"`      // 用户其它详情扩展字段
}

func (x *SetUserDetailReq) Reset() {
	*x = SetUserDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserDetailReq) ProtoMessage() {}

func (x *SetUserDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserDetailReq.ProtoReflect.Descriptor instead.
func (*SetUserDetailReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{57}
}

func (x *SetUserDetailReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetUserDetailReq) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SetUserDetailReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *SetUserDetailReq) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *SetUserDetailReq) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *SetUserDetailReq) GetBirthday() int32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *SetUserDetailReq) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

// 设置用户性别和生日响应
type SetUserDetailResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"` //是否成功
}

func (x *SetUserDetailResult) Reset() {
	*x = SetUserDetailResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserDetailResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserDetailResult) ProtoMessage() {}

func (x *SetUserDetailResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserDetailResult.ProtoReflect.Descriptor instead.
func (*SetUserDetailResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{58}
}

func (x *SetUserDetailResult) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

// 根据用户userName来获取用户基本信息
type GetUserByUsernameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId   int32  `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *GetUserByUsernameReq) Reset() {
	*x = GetUserByUsernameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByUsernameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByUsernameReq) ProtoMessage() {}

func (x *GetUserByUsernameReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByUsernameReq.ProtoReflect.Descriptor instead.
func (*GetUserByUsernameReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{59}
}

func (x *GetUserByUsernameReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetUserByUsernameReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// 获取用户基本信息的返回结果
type GetUserInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                      ///用户的基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserInfoResult) Reset() {
	*x = GetUserInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResult) ProtoMessage() {}

func (x *GetUserInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResult.ProtoReflect.Descriptor instead.
func (*GetUserInfoResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{60}
}

func (x *GetUserInfoResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *GetUserInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// ####################################　红包游戏　######################################
// 发送红包游戏请求
type SendGameRedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKeyId int64  `protobuf:"varint,1,opt,name=FromKeyId,proto3" json:"FromKeyId,omitempty"`
	FromId    uint32 `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Req       []byte `protobuf:"bytes,3,opt,name=Req,proto3" json:"Req,omitempty"`
	RdpRsp    []byte `protobuf:"bytes,4,opt,name=RdpRsp,proto3" json:"RdpRsp,omitempty"`
}

func (x *SendGameRedReq) Reset() {
	*x = SendGameRedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendGameRedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGameRedReq) ProtoMessage() {}

func (x *SendGameRedReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGameRedReq.ProtoReflect.Descriptor instead.
func (*SendGameRedReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{61}
}

func (x *SendGameRedReq) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *SendGameRedReq) GetFromId() uint32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *SendGameRedReq) GetReq() []byte {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *SendGameRedReq) GetRdpRsp() []byte {
	if x != nil {
		return x.RdpRsp
	}
	return nil
}

// 查询红包游戏请求
type QryGameRdpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKeyId int64  `protobuf:"varint,1,opt,name=FromKeyId,proto3" json:"FromKeyId,omitempty"`
	FromId    uint32 `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Req       []byte `protobuf:"bytes,4,opt,name=Req,proto3" json:"Req,omitempty"`
}

func (x *QryGameRdpReq) Reset() {
	*x = QryGameRdpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QryGameRdpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QryGameRdpReq) ProtoMessage() {}

func (x *QryGameRdpReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QryGameRdpReq.ProtoReflect.Descriptor instead.
func (*QryGameRdpReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{62}
}

func (x *QryGameRdpReq) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *QryGameRdpReq) GetFromId() uint32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *QryGameRdpReq) GetReq() []byte {
	if x != nil {
		return x.Req
	}
	return nil
}

// 领取红包游戏请求
type RcvGameRedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKeyId int64  `protobuf:"varint,1,opt,name=FromKeyId,proto3" json:"FromKeyId,omitempty"`
	FromId    uint32 `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Req       []byte `protobuf:"bytes,3,opt,name=Req,proto3" json:"Req,omitempty"`
	RdpRsp    []byte `protobuf:"bytes,4,opt,name=RdpRsp,proto3" json:"RdpRsp,omitempty"`
}

func (x *RcvGameRedReq) Reset() {
	*x = RcvGameRedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RcvGameRedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RcvGameRedReq) ProtoMessage() {}

func (x *RcvGameRedReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RcvGameRedReq.ProtoReflect.Descriptor instead.
func (*RcvGameRedReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{63}
}

func (x *RcvGameRedReq) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *RcvGameRedReq) GetFromId() uint32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *RcvGameRedReq) GetReq() []byte {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *RcvGameRedReq) GetRdpRsp() []byte {
	if x != nil {
		return x.RdpRsp
	}
	return nil
}

// 红包游戏响应
type GameRedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	Code   int32  `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Msg    string `protobuf:"bytes,3,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (x *GameRedResp) Reset() {
	*x = GameRedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRedResp) ProtoMessage() {}

func (x *GameRedResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRedResp.ProtoReflect.Descriptor instead.
func (*GameRedResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{64}
}

func (x *GameRedResp) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GameRedResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GameRedResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// ################################# 红包相关协议转发　###############################
// 发送红包请求
type SendRDPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug        *Debug `protobuf:"bytes,1,opt,name=Debug,proto3" json:"Debug,omitempty"`
	ReqMessageId int64  `protobuf:"varint,2,opt,name=req_messageId,json=reqMessageId,proto3" json:"req_messageId,omitempty"` //請求的messagId
	ReqBytes     []byte `protobuf:"bytes,3,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`                              //请求的端表示
	RedMessageId int32  `protobuf:"varint,4,opt,name=red_messageId,json=redMessageId,proto3" json:"red_messageId,omitempty"` //請求的messagId
	RedChanelId  int32  `protobuf:"varint,5,opt,name=red_chanelId,json=redChanelId,proto3" json:"red_chanelId,omitempty"`    //請求的messagId
}

func (x *SendRDPReq) Reset() {
	*x = SendRDPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRDPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRDPReq) ProtoMessage() {}

func (x *SendRDPReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRDPReq.ProtoReflect.Descriptor instead.
func (*SendRDPReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{65}
}

func (x *SendRDPReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SendRDPReq) GetReqMessageId() int64 {
	if x != nil {
		return x.ReqMessageId
	}
	return 0
}

func (x *SendRDPReq) GetReqBytes() []byte {
	if x != nil {
		return x.ReqBytes
	}
	return nil
}

func (x *SendRDPReq) GetRedMessageId() int32 {
	if x != nil {
		return x.RedMessageId
	}
	return 0
}

func (x *SendRDPReq) GetRedChanelId() int32 {
	if x != nil {
		return x.RedChanelId
	}
	return 0
}

// 发送红包/转账返回
type SendRDPResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"` //返回结构
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *SendRDPResp) Reset() {
	*x = SendRDPResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRDPResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRDPResp) ProtoMessage() {}

func (x *SendRDPResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRDPResp.ProtoReflect.Descriptor instead.
func (*SendRDPResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{66}
}

func (x *SendRDPResp) GetRespBytes() []byte {
	if x != nil {
		return x.RespBytes
	}
	return nil
}

func (x *SendRDPResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 查看红包/转账请求
type CheckRDPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug        *Debug `protobuf:"bytes,1,opt,name=Debug,proto3" json:"Debug,omitempty"`
	ReqMessageId int64  `protobuf:"varint,2,opt,name=req_messageId,json=reqMessageId,proto3" json:"req_messageId,omitempty"` //請求的messagId
	ReqBytes     []byte `protobuf:"bytes,3,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`                              //请求的端表示
}

func (x *CheckRDPReq) Reset() {
	*x = CheckRDPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRDPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRDPReq) ProtoMessage() {}

func (x *CheckRDPReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRDPReq.ProtoReflect.Descriptor instead.
func (*CheckRDPReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{67}
}

func (x *CheckRDPReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *CheckRDPReq) GetReqMessageId() int64 {
	if x != nil {
		return x.ReqMessageId
	}
	return 0
}

func (x *CheckRDPReq) GetReqBytes() []byte {
	if x != nil {
		return x.ReqBytes
	}
	return nil
}

// 查看红包/转账返回
type CheckRDPResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"` //返回结构
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *CheckRDPResp) Reset() {
	*x = CheckRDPResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRDPResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRDPResp) ProtoMessage() {}

func (x *CheckRDPResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRDPResp.ProtoReflect.Descriptor instead.
func (*CheckRDPResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{68}
}

func (x *CheckRDPResp) GetRespBytes() []byte {
	if x != nil {
		return x.RespBytes
	}
	return nil
}

func (x *CheckRDPResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 接收红包/转账请求
type ReceiveRDPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug        *Debug `protobuf:"bytes,1,opt,name=Debug,proto3" json:"Debug,omitempty"`
	ReqMessageId int64  `protobuf:"varint,2,opt,name=req_messageId,json=reqMessageId,proto3" json:"req_messageId,omitempty"` //請求的messagId
	ReqBytes     []byte `protobuf:"bytes,3,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`                              //请求的端表示
}

func (x *ReceiveRDPReq) Reset() {
	*x = ReceiveRDPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveRDPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveRDPReq) ProtoMessage() {}

func (x *ReceiveRDPReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveRDPReq.ProtoReflect.Descriptor instead.
func (*ReceiveRDPReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{69}
}

func (x *ReceiveRDPReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReceiveRDPReq) GetReqMessageId() int64 {
	if x != nil {
		return x.ReqMessageId
	}
	return 0
}

func (x *ReceiveRDPReq) GetReqBytes() []byte {
	if x != nil {
		return x.ReqBytes
	}
	return nil
}

// 接收红包/转账返回
type ReceiveRDPResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"` //返回结构
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReceiveRDPResp) Reset() {
	*x = ReceiveRDPResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveRDPResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveRDPResp) ProtoMessage() {}

func (x *ReceiveRDPResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveRDPResp.ProtoReflect.Descriptor instead.
func (*ReceiveRDPResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{70}
}

func (x *ReceiveRDPResp) GetRespBytes() []byte {
	if x != nil {
		return x.RespBytes
	}
	return nil
}

func (x *ReceiveRDPResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ################################ 编辑超级群群说明信息 editAbout ######################
// 返回参数
type ReplyEditChannelAbout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed   bool  `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	ErrorCode int32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyEditChannelAbout) Reset() {
	*x = ReplyEditChannelAbout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyEditChannelAbout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyEditChannelAbout) ProtoMessage() {}

func (x *ReplyEditChannelAbout) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyEditChannelAbout.ProtoReflect.Descriptor instead.
func (*ReplyEditChannelAbout) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{71}
}

func (x *ReplyEditChannelAbout) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *ReplyEditChannelAbout) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ack to the title editing
type ReplyEditChannelTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyEditChannelTitle) Reset() {
	*x = ReplyEditChannelTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyEditChannelTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyEditChannelTitle) ProtoMessage() {}

func (x *ReplyEditChannelTitle) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyEditChannelTitle.ProtoReflect.Descriptor instead.
func (*ReplyEditChannelTitle) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{72}
}

func (x *ReplyEditChannelTitle) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyEditChannelTitle) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 机器人基础信息更改
type BotUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotInfoVersion int32  `protobuf:"varint,2,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,3,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChat      bool   `protobuf:"varint,4,opt,name=bot_no_chat,json=botNoChat,proto3" json:"bot_no_chat,omitempty"`
	Debug          *Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *BotUpdateInfo) Reset() {
	*x = BotUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotUpdateInfo) ProtoMessage() {}

func (x *BotUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotUpdateInfo.ProtoReflect.Descriptor instead.
func (*BotUpdateInfo) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{73}
}

func (x *BotUpdateInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BotUpdateInfo) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *BotUpdateInfo) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *BotUpdateInfo) GetBotNoChat() bool {
	if x != nil {
		return x.BotNoChat
	}
	return false
}

func (x *BotUpdateInfo) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 机器人更改信息的返回结果
type BotUpdateInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *BotUpdateInfoResult) Reset() {
	*x = BotUpdateInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotUpdateInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotUpdateInfoResult) ProtoMessage() {}

func (x *BotUpdateInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotUpdateInfoResult.ProtoReflect.Descriptor instead.
func (*BotUpdateInfoResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{74}
}

func (x *BotUpdateInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 返回参数
type ReplyUpdatePinnedChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyUpdatePinnedChannelMessage) Reset() {
	*x = ReplyUpdatePinnedChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdatePinnedChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdatePinnedChannelMessage) ProtoMessage() {}

func (x *ReplyUpdatePinnedChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdatePinnedChannelMessage.ProtoReflect.Descriptor instead.
func (*ReplyUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{75}
}

func (x *ReplyUpdatePinnedChannelMessage) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyUpdatePinnedChannelMessage) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 推出超级群返回
type ReplyLeaveChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyLeaveChannel) Reset() {
	*x = ReplyLeaveChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyLeaveChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyLeaveChannel) ProtoMessage() {}

func (x *ReplyLeaveChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyLeaveChannel.ProtoReflect.Descriptor instead.
func (*ReplyLeaveChannel) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{76}
}

func (x *ReplyLeaveChannel) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyLeaveChannel) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqGetAllChats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid int32  `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Debug  *Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetAllChats) Reset() {
	*x = ReqGetAllChats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetAllChats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetAllChats) ProtoMessage() {}

func (x *ReqGetAllChats) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetAllChats.ProtoReflect.Descriptor instead.
func (*ReqGetAllChats) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{77}
}

func (x *ReqGetAllChats) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqGetAllChats) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetAllChats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chats []int32 `protobuf:"varint,1,rep,packed,name=chats,proto3" json:"chats,omitempty"`
	Error int32   `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyGetAllChats) Reset() {
	*x = ReplyGetAllChats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetAllChats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetAllChats) ProtoMessage() {}

func (x *ReplyGetAllChats) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetAllChats.ProtoReflect.Descriptor instead.
func (*ReplyGetAllChats) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{78}
}

func (x *ReplyGetAllChats) GetChats() []int32 {
	if x != nil {
		return x.Chats
	}
	return nil
}

func (x *ReplyGetAllChats) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// #####################超级群get diff###################
type ReqGetchannelDifference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId      int32  `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId   int64  `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Flags       int32  `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	Force       bool   `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	ChannelId   int32  `protobuf:"varint,5,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Pts         int32  `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
	Limit       int32  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Range_MinId int32  `protobuf:"varint,8,opt,name=range_MinId,json=rangeMinId,proto3" json:"range_MinId,omitempty"`
	Range_MaxId int32  `protobuf:"varint,9,opt,name=range_MaxId,json=rangeMaxId,proto3" json:"range_MaxId,omitempty"`
	Device      int32  `protobuf:"varint,10,opt,name=device,proto3" json:"device,omitempty"` //1, pc 2, android 3, ios
	Debug       *Debug `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetchannelDifference) Reset() {
	*x = ReqGetchannelDifference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetchannelDifference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetchannelDifference) ProtoMessage() {}

func (x *ReqGetchannelDifference) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetchannelDifference.ProtoReflect.Descriptor instead.
func (*ReqGetchannelDifference) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{79}
}

func (x *ReqGetchannelDifference) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetchannelDifference) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqGetchannelDifference) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqGetchannelDifference) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *ReqGetchannelDifference) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetchannelDifference) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReqGetchannelDifference) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetchannelDifference) GetRange_MinId() int32 {
	if x != nil {
		return x.Range_MinId
	}
	return 0
}

func (x *ReqGetchannelDifference) GetRange_MaxId() int32 {
	if x != nil {
		return x.Range_MaxId
	}
	return 0
}

func (x *ReqGetchannelDifference) GetDevice() int32 {
	if x != nil {
		return x.Device
	}
	return 0
}

func (x *ReqGetchannelDifference) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyChannelDiffCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difference []byte `protobuf:"bytes,1,opt,name=difference,proto3" json:"difference,omitempty"` //  1: ReplyGetChannelDifferenceEmpty 2: ReplyGetChannelDifference 3: ReplyGetChannelDifferenceTooLong tooLong
	ErrorCode  int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyChannelDiffCommon) Reset() {
	*x = ReplyChannelDiffCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelDiffCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelDiffCommon) ProtoMessage() {}

func (x *ReplyChannelDiffCommon) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelDiffCommon.ProtoReflect.Descriptor instead.
func (*ReplyChannelDiffCommon) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{80}
}

func (x *ReplyChannelDiffCommon) GetDifference() []byte {
	if x != nil {
		return x.Difference
	}
	return nil
}

func (x *ReplyChannelDiffCommon) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 获取fullchannel
type ReqFullchannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32  `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannelId  int32  `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64  `protobuf:"varint,3,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqFullchannel) Reset() {
	*x = ReqFullchannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFullchannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFullchannel) ProtoMessage() {}

func (x *ReqFullchannel) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFullchannel.ProtoReflect.Descriptor instead.
func (*ReqFullchannel) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{81}
}

func (x *ReqFullchannel) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqFullchannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFullchannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqFullchannel) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回fullchannel
type ReplyFullChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyFullChannel) Reset() {
	*x = ReplyFullChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyFullChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyFullChannel) ProtoMessage() {}

func (x *ReplyFullChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyFullChannel.ProtoReflect.Descriptor instead.
func (*ReplyFullChannel) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{82}
}

func (x *ReplyFullChannel) GetUpdates() []byte {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ReplyFullChannel) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ############################# 删除消息 ####################
type ReqDeleteMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32   `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 删除方id
	FromKeyid uint64  `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Flags     int32   `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`   //标识
	Revoke    bool    `protobuf:"varint,4,opt,name=revoke,proto3" json:"revoke,omitempty"` // shifou wei duifang shanchu
	Id        []int32 `protobuf:"varint,5,rep,packed,name=id,proto3" json:"id,omitempty"`
	Channelid int32   `protobuf:"varint,6,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Debug     *Debug  `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteMessages) Reset() {
	*x = ReqDeleteMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteMessages) ProtoMessage() {}

func (x *ReqDeleteMessages) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteMessages.ProtoReflect.Descriptor instead.
func (*ReqDeleteMessages) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{83}
}

func (x *ReqDeleteMessages) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqDeleteMessages) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqDeleteMessages) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqDeleteMessages) GetRevoke() bool {
	if x != nil {
		return x.Revoke
	}
	return false
}

func (x *ReqDeleteMessages) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReqDeleteMessages) GetChannelid() int32 {
	if x != nil {
		return x.Channelid
	}
	return 0
}

func (x *ReqDeleteMessages) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDeleteMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1.获取失败 2.删除失败
}

func (x *ReplyDeleteMessages) Reset() {
	*x = ReplyDeleteMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteMessages) ProtoMessage() {}

func (x *ReplyDeleteMessages) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteMessages.ProtoReflect.Descriptor instead.
func (*ReplyDeleteMessages) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{84}
}

func (x *ReplyDeleteMessages) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyDeleteMessages) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 注册指定用户的请求
type RegisterUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash     int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	PhoneNumber    string `protobuf:"bytes,3,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"` //电话号码
	FirstName      string `protobuf:"bytes,4,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName       string `protobuf:"bytes,5,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot          bool   `protobuf:"varint,6,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32  `protobuf:"varint,7,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,8,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool   `protobuf:"varint,9,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	CountryCode    string `protobuf:"bytes,10,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	LocalPhone     string `protobuf:"bytes,11,opt,name=LocalPhone,proto3" json:"LocalPhone,omitempty"`
	Dc             int32  `protobuf:"varint,12,opt,name=dc,proto3" json:"dc,omitempty"`
	GroupNow       int32  `protobuf:"varint,13,opt,name=GroupNow,proto3" json:"GroupNow,omitempty"`
	Debug          *Debug `protobuf:"bytes,14,opt,name=debug,proto3" json:"debug,omitempty"`
	Sex            int32  `protobuf:"varint,15,opt,name=Sex,proto3" json:"Sex,omitempty"`
	Birthday       int32  `protobuf:"varint,16,opt,name=birthday,proto3" json:"birthday,omitempty"`
}

func (x *RegisterUserInfoReq) Reset() {
	*x = RegisterUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserInfoReq) ProtoMessage() {}

func (x *RegisterUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserInfoReq.ProtoReflect.Descriptor instead.
func (*RegisterUserInfoReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{85}
}

func (x *RegisterUserInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RegisterUserInfoReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *RegisterUserInfoReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RegisterUserInfoReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RegisterUserInfoReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RegisterUserInfoReq) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *RegisterUserInfoReq) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *RegisterUserInfoReq) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *RegisterUserInfoReq) GetBotNoChats() bool {
	if x != nil {
		return x.BotNoChats
	}
	return false
}

func (x *RegisterUserInfoReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *RegisterUserInfoReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

func (x *RegisterUserInfoReq) GetDc() int32 {
	if x != nil {
		return x.Dc
	}
	return 0
}

func (x *RegisterUserInfoReq) GetGroupNow() int32 {
	if x != nil {
		return x.GroupNow
	}
	return 0
}

func (x *RegisterUserInfoReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *RegisterUserInfoReq) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *RegisterUserInfoReq) GetBirthday() int32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

// 获取fullchannel
type ReqGetFullChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32  `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannelId  int32  `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64  `protobuf:"varint,3,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetFullChannel) Reset() {
	*x = ReqGetFullChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetFullChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetFullChannel) ProtoMessage() {}

func (x *ReqGetFullChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetFullChannel.ProtoReflect.Descriptor instead.
func (*ReqGetFullChannel) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{86}
}

func (x *ReqGetFullChannel) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetFullChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetFullChannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqGetFullChannel) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取participants
type ReqGetParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffSet    int32  `protobuf:"varint,1,opt,name=offSet,proto3" json:"offSet,omitempty"`
	Limit     int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PartiType int32  `protobuf:"varint,3,opt,name=partiType,proto3" json:"partiType,omitempty"`
	ChannelId int32  `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32  `protobuf:"varint,5,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Q         string `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Hash      int32  `protobuf:"varint,7,opt,name=Hash,proto3" json:"Hash,omitempty"` // 校验唯一的， 如果不为0 则要进行唯一判断
	Debug     *Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetParticipants) Reset() {
	*x = ReqGetParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetParticipants) ProtoMessage() {}

func (x *ReqGetParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetParticipants.ProtoReflect.Descriptor instead.
func (*ReqGetParticipants) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{87}
}

func (x *ReqGetParticipants) GetOffSet() int32 {
	if x != nil {
		return x.OffSet
	}
	return 0
}

func (x *ReqGetParticipants) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetParticipants) GetPartiType() int32 {
	if x != nil {
		return x.PartiType
	}
	return 0
}

func (x *ReqGetParticipants) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetParticipants) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetParticipants) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ReqGetParticipants) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *ReqGetParticipants) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 请求参数
type ReqUpdatePinnedChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId int32 `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Flags  int32 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent bool  `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	//    InputChannel channel = 4;
	ChannelId int32  `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Id        int32  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	FromKeyid int64  `protobuf:"varint,6,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqUpdatePinnedChannelMessage) Reset() {
	*x = ReqUpdatePinnedChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdatePinnedChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdatePinnedChannelMessage) ProtoMessage() {}

func (x *ReqUpdatePinnedChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdatePinnedChannelMessage.ProtoReflect.Descriptor instead.
func (*ReqUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{88}
}

func (x *ReqUpdatePinnedChannelMessage) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *ReqUpdatePinnedChannelMessage) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 请求参数
type ReqEditChannelAbout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32  `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	FromKeyId  int64  `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId  int32  `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	About      string `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	AccessHash int64  `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChannelAbout) Reset() {
	*x = ReqEditChannelAbout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChannelAbout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChannelAbout) ProtoMessage() {}

func (x *ReqEditChannelAbout) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChannelAbout.ProtoReflect.Descriptor instead.
func (*ReqEditChannelAbout) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{89}
}

func (x *ReqEditChannelAbout) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqEditChannelAbout) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqEditChannelAbout) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditChannelAbout) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *ReqEditChannelAbout) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqEditChannelAbout) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// edit title
type ReqEditChannelTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32  `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId    int32  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid int64  `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChannelTitle) Reset() {
	*x = ReqEditChannelTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChannelTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChannelTitle) ProtoMessage() {}

func (x *ReqEditChannelTitle) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChannelTitle.ProtoReflect.Descriptor instead.
func (*ReqEditChannelTitle) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{90}
}

func (x *ReqEditChannelTitle) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditChannelTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReqEditChannelTitle) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqEditChannelTitle) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqEditChannelTitle) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyChannelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"` //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
	ChannelId int32  `protobuf:"varint,4,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 是否超级群
	FromId    int32  `protobuf:"varint,5,opt,name=FromId,proto3" json:"FromId,omitempty"`
}

func (x *ReplyChannelData) Reset() {
	*x = ReplyChannelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelData) ProtoMessage() {}

func (x *ReplyChannelData) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelData.ProtoReflect.Descriptor instead.
func (*ReplyChannelData) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{91}
}

func (x *ReplyChannelData) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyChannelData) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ReplyChannelData) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReplyChannelData) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

type ReqDelManualBlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnBlockUser *BlockUser `protobuf:"bytes,1,opt,name=UnBlockUser,proto3" json:"UnBlockUser,omitempty"`
	BotId       int32      `protobuf:"varint,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Debug       *Debug     `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDelManualBlockList) Reset() {
	*x = ReqDelManualBlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDelManualBlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDelManualBlockList) ProtoMessage() {}

func (x *ReqDelManualBlockList) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDelManualBlockList.ProtoReflect.Descriptor instead.
func (*ReqDelManualBlockList) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{92}
}

func (x *ReqDelManualBlockList) GetUnBlockUser() *BlockUser {
	if x != nil {
		return x.UnBlockUser
	}
	return nil
}

func (x *ReqDelManualBlockList) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *ReqDelManualBlockList) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqSetManualBlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockUser *BlockUser `protobuf:"bytes,1,opt,name=BlockUser,proto3" json:"BlockUser,omitempty"`
	BotId     int32      `protobuf:"varint,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Debug     *Debug     `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqSetManualBlockList) Reset() {
	*x = ReqSetManualBlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSetManualBlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSetManualBlockList) ProtoMessage() {}

func (x *ReqSetManualBlockList) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSetManualBlockList.ProtoReflect.Descriptor instead.
func (*ReqSetManualBlockList) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{93}
}

func (x *ReqSetManualBlockList) GetBlockUser() *BlockUser {
	if x != nil {
		return x.BlockUser
	}
	return nil
}

func (x *ReqSetManualBlockList) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *ReqSetManualBlockList) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 禁言某用戶
type BlockUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	BlockTime int64 `protobuf:"varint,2,opt,name=blockTime,proto3" json:"blockTime,omitempty"` //禁言时间
	GroupId   int64 `protobuf:"varint,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *BlockUser) Reset() {
	*x = BlockUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUser) ProtoMessage() {}

func (x *BlockUser) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUser.ProtoReflect.Descriptor instead.
func (*BlockUser) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{94}
}

func (x *BlockUser) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BlockUser) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *BlockUser) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type ManualBlockReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyData []byte `protobuf:"bytes,1,opt,name=replyData,proto3" json:"replyData,omitempty"`
	Reply     bool   `protobuf:"varint,2,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *ManualBlockReplyData) Reset() {
	*x = ManualBlockReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualBlockReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualBlockReplyData) ProtoMessage() {}

func (x *ManualBlockReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualBlockReplyData.ProtoReflect.Descriptor instead.
func (*ManualBlockReplyData) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{95}
}

func (x *ManualBlockReplyData) GetReplyData() []byte {
	if x != nil {
		return x.ReplyData
	}
	return nil
}

func (x *ManualBlockReplyData) GetReply() bool {
	if x != nil {
		return x.Reply
	}
	return false
}

func (x *ManualBlockReplyData) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 存储sticker 集合概要 Documents请求
type StoreShopStickerSetDocumentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Documents []int32 `protobuf:"varint,2,rep,packed,name=documents,proto3" json:"documents,omitempty"`
	Debug     *Debug  `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreShopStickerSetDocumentsReq) Reset() {
	*x = StoreShopStickerSetDocumentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetDocumentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetDocumentsReq) ProtoMessage() {}

func (x *StoreShopStickerSetDocumentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetDocumentsReq.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetDocumentsReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{96}
}

func (x *StoreShopStickerSetDocumentsReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreShopStickerSetDocumentsReq) GetDocuments() []int32 {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *StoreShopStickerSetDocumentsReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 存储sticker 集合概要 Documents返回结果
type StoreShopStickerSetDocumentsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreShopStickerSetDocumentsResult) Reset() {
	*x = StoreShopStickerSetDocumentsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetDocumentsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetDocumentsResult) ProtoMessage() {}

func (x *StoreShopStickerSetDocumentsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetDocumentsResult.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetDocumentsResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{97}
}

func (x *StoreShopStickerSetDocumentsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 结构体AuthorStickerSet
type AuthorStickerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int64  `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	ShortName    string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Archived     bool   `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool   `protobuf:"varint,5,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool   `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Ordered      int32  `protobuf:"varint,7,opt,name=ordered,proto3" json:"ordered,omitempty"`
	Created      int32  `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Updated      int32  `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *AuthorStickerSet) Reset() {
	*x = AuthorStickerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorStickerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorStickerSet) ProtoMessage() {}

func (x *AuthorStickerSet) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorStickerSet.ProtoReflect.Descriptor instead.
func (*AuthorStickerSet) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{98}
}

func (x *AuthorStickerSet) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuthorStickerSet) GetStickersetId() int64 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *AuthorStickerSet) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *AuthorStickerSet) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *AuthorStickerSet) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *AuthorStickerSet) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *AuthorStickerSet) GetOrdered() int32 {
	if x != nil {
		return x.Ordered
	}
	return 0
}

func (x *AuthorStickerSet) GetCreated() int32 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *AuthorStickerSet) GetUpdated() int32 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// 获取作者所有sticker
type GetAuthorAllStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetAuthorAllStickerSetReq) Reset() {
	*x = GetAuthorAllStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorAllStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorAllStickerSetReq) ProtoMessage() {}

func (x *GetAuthorAllStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorAllStickerSetReq.ProtoReflect.Descriptor instead.
func (*GetAuthorAllStickerSetReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{99}
}

func (x *GetAuthorAllStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 获取作者所有sticker返回
type GetAuthorAllStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ReErrCode           `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=imapigateway.ReErrCode" json:"ErrorCode,omitempty"` //返回错误码
	Sets      []*AuthorStickerSet `protobuf:"bytes,2,rep,name=sets,proto3" json:"sets,omitempty"`
}

func (x *GetAuthorAllStickerSetResult) Reset() {
	*x = GetAuthorAllStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorAllStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorAllStickerSetResult) ProtoMessage() {}

func (x *GetAuthorAllStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorAllStickerSetResult.ProtoReflect.Descriptor instead.
func (*GetAuthorAllStickerSetResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{100}
}

func (x *GetAuthorAllStickerSetResult) GetErrorCode() ReErrCode {
	if x != nil {
		return x.ErrorCode
	}
	return ReErrCode_Success
}

func (x *GetAuthorAllStickerSetResult) GetSets() []*AuthorStickerSet {
	if x != nil {
		return x.Sets
	}
	return nil
}

// 删除单个sticker
type DeleteStickerPackDocumentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StickersetId int64 `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
}

func (x *DeleteStickerPackDocumentReq) Reset() {
	*x = DeleteStickerPackDocumentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerPackDocumentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerPackDocumentReq) ProtoMessage() {}

func (x *DeleteStickerPackDocumentReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerPackDocumentReq.ProtoReflect.Descriptor instead.
func (*DeleteStickerPackDocumentReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{101}
}

func (x *DeleteStickerPackDocumentReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteStickerPackDocumentReq) GetStickersetId() int64 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

// 删除单个sticker返回
type DeleteStickerPackDocumentResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DeleteStickerPackDocumentResult) Reset() {
	*x = DeleteStickerPackDocumentResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerPackDocumentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerPackDocumentResult) ProtoMessage() {}

func (x *DeleteStickerPackDocumentResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerPackDocumentResult.ProtoReflect.Descriptor instead.
func (*DeleteStickerPackDocumentResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{102}
}

func (x *DeleteStickerPackDocumentResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 获取指定的sticker集合的请求
type GetStickerSetInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //sticker的id
	ShortName string `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	IsId      bool   `protobuf:"varint,3,opt,name=is_id,json=isId,proto3" json:"is_id,omitempty"` //是否是根据Id来查 true 根据Id查询 false根据short_name 查询
	Debug     *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetStickerSetInfoReq) Reset() {
	*x = GetStickerSetInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetInfoReq) ProtoMessage() {}

func (x *GetStickerSetInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetInfoReq.ProtoReflect.Descriptor instead.
func (*GetStickerSetInfoReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{103}
}

func (x *GetStickerSetInfoReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetStickerSetInfoReq) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *GetStickerSetInfoReq) GetIsId() bool {
	if x != nil {
		return x.IsId
	}
	return false
}

func (x *GetStickerSetInfoReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// sticker set 的基础信息
type StickerSetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64   `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool    `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool    `protobuf:"varint,4,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool    `protobuf:"varint,5,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string  `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string  `protobuf:"bytes,7,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32   `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64   `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string  `protobuf:"bytes,10,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  []int32 `protobuf:"varint,11,rep,packed,name=documents,proto3" json:"documents,omitempty"`
}

func (x *StickerSetInfo) Reset() {
	*x = StickerSetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerSetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerSetInfo) ProtoMessage() {}

func (x *StickerSetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerSetInfo.ProtoReflect.Descriptor instead.
func (*StickerSetInfo) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{104}
}

func (x *StickerSetInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StickerSetInfo) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *StickerSetInfo) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *StickerSetInfo) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

func (x *StickerSetInfo) GetMasks() bool {
	if x != nil {
		return x.Masks
	}
	return false
}

func (x *StickerSetInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StickerSetInfo) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *StickerSetInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StickerSetInfo) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *StickerSetInfo) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

func (x *StickerSetInfo) GetDocuments() []int32 {
	if x != nil {
		return x.Documents
	}
	return nil
}

// //获取指定的sticker集合的返回
type GetStickerSetInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerSetInfo *StickerSetInfo `protobuf:"bytes,1,opt,name=stickerSetInfo,proto3" json:"stickerSetInfo,omitempty"`                    //sticker的基础信息
	Errorcode      ReErrCode       `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetStickerSetInfoResult) Reset() {
	*x = GetStickerSetInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetInfoResult) ProtoMessage() {}

func (x *GetStickerSetInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetInfoResult.ProtoReflect.Descriptor instead.
func (*GetStickerSetInfoResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{105}
}

func (x *GetStickerSetInfoResult) GetStickerSetInfo() *StickerSetInfo {
	if x != nil {
		return x.StickerSetInfo
	}
	return nil
}

func (x *GetStickerSetInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除sticker商城的请求
type DeleteStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickerId int32  `protobuf:"varint,1,opt,name=stickerId,proto3" json:"stickerId,omitempty"`
	Debug     *Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId    int32  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //sticker作者id - 2018.10.18 新增
}

func (x *DeleteStickerSetReq) Reset() {
	*x = DeleteStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerSetReq) ProtoMessage() {}

func (x *DeleteStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerSetReq.ProtoReflect.Descriptor instead.
func (*DeleteStickerSetReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{106}
}

func (x *DeleteStickerSetReq) GetStickerId() int32 {
	if x != nil {
		return x.StickerId
	}
	return 0
}

func (x *DeleteStickerSetReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *DeleteStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 删除sticker商城的返回
type DeleteStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DeleteStickerSetResult) Reset() {
	*x = DeleteStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerSetResult) ProtoMessage() {}

func (x *DeleteStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerSetResult.ProtoReflect.Descriptor instead.
func (*DeleteStickerSetResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{107}
}

func (x *DeleteStickerSetResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 用户安装sticker集合的请求
type StoreUserStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickersetId int32  `protobuf:"varint,2,opt,name=stickerset_id,json=stickersetId,proto3" json:"stickerset_id,omitempty"`
	Installed    bool   `protobuf:"varint,3,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool   `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Order        int32  `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	Archived     bool   `protobuf:"varint,6,opt,name=archived,proto3" json:"archived,omitempty"`
	Debug        *Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreUserStickerSetReq) Reset() {
	*x = StoreUserStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreUserStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreUserStickerSetReq) ProtoMessage() {}

func (x *StoreUserStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreUserStickerSetReq.ProtoReflect.Descriptor instead.
func (*StoreUserStickerSetReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{108}
}

func (x *StoreUserStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *StoreUserStickerSetReq) GetStickersetId() int32 {
	if x != nil {
		return x.StickersetId
	}
	return 0
}

func (x *StoreUserStickerSetReq) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *StoreUserStickerSetReq) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *StoreUserStickerSetReq) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *StoreUserStickerSetReq) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *StoreUserStickerSetReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 用户安装sticker集合的返回
type StoreUserStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreUserStickerSetResult) Reset() {
	*x = StoreUserStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreUserStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreUserStickerSetResult) ProtoMessage() {}

func (x *StoreUserStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreUserStickerSetResult.ProtoReflect.Descriptor instead.
func (*StoreUserStickerSetResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{109}
}

func (x *StoreUserStickerSetResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 存储sticker文档的请求
type StoreStickerPackDcReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stickpackbase *StickerPackDocumentBase `protobuf:"bytes,1,opt,name=stickpackbase,proto3" json:"stickpackbase,omitempty"`
	Debug         *Debug                   `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *StoreStickerPackDcReq) Reset() {
	*x = StoreStickerPackDcReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStickerPackDcReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStickerPackDcReq) ProtoMessage() {}

func (x *StoreStickerPackDcReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStickerPackDcReq.ProtoReflect.Descriptor instead.
func (*StoreStickerPackDcReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{110}
}

func (x *StoreStickerPackDcReq) GetStickpackbase() *StickerPackDocumentBase {
	if x != nil {
		return x.Stickpackbase
	}
	return nil
}

func (x *StoreStickerPackDcReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 存储sticker文档的返回
type StoreStickerPackDcResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreStickerPackDcResult) Reset() {
	*x = StoreStickerPackDcResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStickerPackDcResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStickerPackDcResult) ProtoMessage() {}

func (x *StoreStickerPackDcResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStickerPackDcResult.ProtoReflect.Descriptor instead.
func (*StoreStickerPackDcResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{111}
}

func (x *StoreStickerPackDcResult) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreStickerPackDcResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 存储sticker 集合概要的请求参数
type StoreShopStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessHash int64   `protobuf:"varint,1,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool    `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool    `protobuf:"varint,3,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool    `protobuf:"varint,4,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string  `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string  `protobuf:"bytes,6,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32   `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64   `protobuf:"varint,8,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string  `protobuf:"bytes,9,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  []int32 `protobuf:"varint,10,rep,packed,name=documents,proto3" json:"documents,omitempty"`
	Debug      *Debug  `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId     int32   `protobuf:"varint,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //sticker作者id - 2018.10.18 新增
}

func (x *StoreShopStickerSetReq) Reset() {
	*x = StoreShopStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetReq) ProtoMessage() {}

func (x *StoreShopStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetReq.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{112}
}

func (x *StoreShopStickerSetReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *StoreShopStickerSetReq) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *StoreShopStickerSetReq) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

func (x *StoreShopStickerSetReq) GetMasks() bool {
	if x != nil {
		return x.Masks
	}
	return false
}

func (x *StoreShopStickerSetReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StoreShopStickerSetReq) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *StoreShopStickerSetReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StoreShopStickerSetReq) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *StoreShopStickerSetReq) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

func (x *StoreShopStickerSetReq) GetDocuments() []int32 {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *StoreShopStickerSetReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *StoreShopStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 存储sticker 集合概要的返回
type StoreShopStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                           //Sticker生成的id
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *StoreShopStickerSetResult) Reset() {
	*x = StoreShopStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetResult) ProtoMessage() {}

func (x *StoreShopStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetResult.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{113}
}

func (x *StoreShopStickerSetResult) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreShopStickerSetResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// ResizeRequest 重设图片大小请求
type ResizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`      // 图片数据
	Width  uint32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // 图片宽度
	Height uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // 图片高度
}

func (x *ResizeRequest) Reset() {
	*x = ResizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeRequest) ProtoMessage() {}

func (x *ResizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeRequest.ProtoReflect.Descriptor instead.
func (*ResizeRequest) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{114}
}

func (x *ResizeRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResizeRequest) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ResizeRequest) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// ResizeReply 重设图片大小响应
type ResizeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imapigateway.StatusCode" json:"status,omitempty"` // 状态码
	Data   []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                                   // 图片数据
}

func (x *ResizeReply) Reset() {
	*x = ResizeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeReply) ProtoMessage() {}

func (x *ResizeReply) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeReply.ProtoReflect.Descriptor instead.
func (*ResizeReply) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{115}
}

func (x *ResizeReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_StatusCodeOK
}

func (x *ResizeReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// ConstraintRequest 约束图片大小请求
type ConstraintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                                // 图片数据
	MaxSize    uint32 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`          // 最大尺寸
	OutputWebp bool   `protobuf:"varint,3,opt,name=output_webp,json=outputWebp,proto3" json:"output_webp,omitempty"` // 输出webp格式
}

func (x *ConstraintRequest) Reset() {
	*x = ConstraintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintRequest) ProtoMessage() {}

func (x *ConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintRequest.ProtoReflect.Descriptor instead.
func (*ConstraintRequest) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{116}
}

func (x *ConstraintRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ConstraintRequest) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *ConstraintRequest) GetOutputWebp() bool {
	if x != nil {
		return x.OutputWebp
	}
	return false
}

// ConstraintReply 约束图片大小响应
type ConstraintReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imapigateway.StatusCode" json:"status,omitempty"`    // 状态码
	Data         []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                                      // 图片数据
	Width        uint32     `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`                                   // 图片宽度
	Height       uint32     `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`                                 // 图片高度
	OriginWidth  uint32     `protobuf:"varint,5,opt,name=origin_width,json=originWidth,proto3" json:"origin_width,omitempty"`    // 图片原始宽度
	OriginHeight uint32     `protobuf:"varint,6,opt,name=origin_height,json=originHeight,proto3" json:"origin_height,omitempty"` // 图片原始高度
}

func (x *ConstraintReply) Reset() {
	*x = ConstraintReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintReply) ProtoMessage() {}

func (x *ConstraintReply) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintReply.ProtoReflect.Descriptor instead.
func (*ConstraintReply) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{117}
}

func (x *ConstraintReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_StatusCodeOK
}

func (x *ConstraintReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ConstraintReply) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ConstraintReply) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ConstraintReply) GetOriginWidth() uint32 {
	if x != nil {
		return x.OriginWidth
	}
	return 0
}

func (x *ConstraintReply) GetOriginHeight() uint32 {
	if x != nil {
		return x.OriginHeight
	}
	return 0
}

// CompressImageRequest 压缩图片请求
type CompressImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`        // 图片数据
	Quality uint32 `protobuf:"varint,2,opt,name=quality,proto3" json:"quality,omitempty"` // 图片质量(0-100)
}

func (x *CompressImageRequest) Reset() {
	*x = CompressImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressImageRequest) ProtoMessage() {}

func (x *CompressImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressImageRequest.ProtoReflect.Descriptor instead.
func (*CompressImageRequest) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{118}
}

func (x *CompressImageRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CompressImageRequest) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

// CompressImageReply 压缩图片响应
type CompressImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imapigateway.StatusCode" json:"status,omitempty"` // 状态码
	Data   []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                                   // 图片数据
}

func (x *CompressImageReply) Reset() {
	*x = CompressImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressImageReply) ProtoMessage() {}

func (x *CompressImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressImageReply.ProtoReflect.Descriptor instead.
func (*CompressImageReply) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{119}
}

func (x *CompressImageReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_StatusCodeOK
}

func (x *CompressImageReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// VideoPreviewRequest 获取视频预览请求
type VideoPreviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                       // 视频数据
	MaxSize uint32 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"` // 预览图最大尺寸
}

func (x *VideoPreviewRequest) Reset() {
	*x = VideoPreviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoPreviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoPreviewRequest) ProtoMessage() {}

func (x *VideoPreviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoPreviewRequest.ProtoReflect.Descriptor instead.
func (*VideoPreviewRequest) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{120}
}

func (x *VideoPreviewRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VideoPreviewRequest) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

// VideoPreviewReply 获取视频预览响应
type VideoPreviewReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imapigateway.StatusCode" json:"status,omitempty"` // 状态码
	Duration uint32     `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`                          // 播放时长
	Preview  []byte     `protobuf:"bytes,3,opt,name=preview,proto3" json:"preview,omitempty"`                             // 图片预览
	Width    uint32     `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`                                // 预览图宽度
	Height   uint32     `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`                              // 预览图高度
}

func (x *VideoPreviewReply) Reset() {
	*x = VideoPreviewReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoPreviewReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoPreviewReply) ProtoMessage() {}

func (x *VideoPreviewReply) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoPreviewReply.ProtoReflect.Descriptor instead.
func (*VideoPreviewReply) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{121}
}

func (x *VideoPreviewReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_StatusCodeOK
}

func (x *VideoPreviewReply) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VideoPreviewReply) GetPreview() []byte {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *VideoPreviewReply) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoPreviewReply) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// AudioPreviewRequest 获取音频预览请求
type AudioPreviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                       // 音频数据
	MaxSize uint32 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"` // 封面图最大尺寸
}

func (x *AudioPreviewRequest) Reset() {
	*x = AudioPreviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioPreviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioPreviewRequest) ProtoMessage() {}

func (x *AudioPreviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioPreviewRequest.ProtoReflect.Descriptor instead.
func (*AudioPreviewRequest) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{122}
}

func (x *AudioPreviewRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AudioPreviewRequest) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

// AudioPreviewReply 获取音频预览响应
type AudioPreviewReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=imapigateway.StatusCode" json:"status,omitempty"` // 状态码
	Duration uint32     `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`                          // 播放时长
	Cover    []byte     `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`                                 // 封面图片
	Title    string     `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                 // 标题
	Artist   string     `protobuf:"bytes,5,opt,name=artist,proto3" json:"artist,omitempty"`                               // 演奏者
	Width    uint32     `protobuf:"varint,6,opt,name=width,proto3" json:"width,omitempty"`                                // 封面图宽度
	Height   uint32     `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`                              // 封面图高度
}

func (x *AudioPreviewReply) Reset() {
	*x = AudioPreviewReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioPreviewReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioPreviewReply) ProtoMessage() {}

func (x *AudioPreviewReply) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioPreviewReply.ProtoReflect.Descriptor instead.
func (*AudioPreviewReply) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{123}
}

func (x *AudioPreviewReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_StatusCodeOK
}

func (x *AudioPreviewReply) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AudioPreviewReply) GetCover() []byte {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *AudioPreviewReply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AudioPreviewReply) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *AudioPreviewReply) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *AudioPreviewReply) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// ###################################  pbmessageserver.pb.go  #############################
// 获取participants
type ReqParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffSet    int32  `protobuf:"varint,1,opt,name=offSet,proto3" json:"offSet,omitempty"`
	Limit     int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PartiType int32  `protobuf:"varint,3,opt,name=partiType,proto3" json:"partiType,omitempty"`
	ChannelId int32  `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32  `protobuf:"varint,5,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Q         string `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Hash      int32  `protobuf:"varint,7,opt,name=Hash,proto3" json:"Hash,omitempty"` // 校验唯一的， 如果不为0 则要进行唯一判断
	Debug     *Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqParticipants) Reset() {
	*x = ReqParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqParticipants) ProtoMessage() {}

func (x *ReqParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqParticipants.ProtoReflect.Descriptor instead.
func (*ReqParticipants) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{124}
}

func (x *ReqParticipants) GetOffSet() int32 {
	if x != nil {
		return x.OffSet
	}
	return 0
}

func (x *ReqParticipants) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqParticipants) GetPartiType() int32 {
	if x != nil {
		return x.PartiType
	}
	return 0
}

func (x *ReqParticipants) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqParticipants) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqParticipants) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ReqParticipants) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *ReqParticipants) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回participants
type ReplyParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyParticipants) Reset() {
	*x = ReplyParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyParticipants) ProtoMessage() {}

func (x *ReplyParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyParticipants.ProtoReflect.Descriptor instead.
func (*ReplyParticipants) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{125}
}

func (x *ReplyParticipants) GetUpdates() []byte {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ReplyParticipants) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqCreateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid    int32   `protobuf:"varint,1,opt,name=chatid,proto3" json:"chatid,omitempty"`      // 群id
	Title     string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`         // 名称
	Creator   int32   `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`    // 创建者
	Users     []int32 `protobuf:"varint,4,rep,packed,name=users,proto3" json:"users,omitempty"` // 用户数据
	FromKeyid uint64  `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug  `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqCreateChat) Reset() {
	*x = ReqCreateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateChat) ProtoMessage() {}

func (x *ReqCreateChat) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateChat.ProtoReflect.Descriptor instead.
func (*ReqCreateChat) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{126}
}

func (x *ReqCreateChat) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqCreateChat) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReqCreateChat) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *ReqCreateChat) GetUsers() []int32 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ReqCreateChat) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqCreateChat) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyCreateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // 创建普通群返回
	Error  int32  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`  // 1: 创建者id为0 2: 被加入的成员不允许 3: 成员不允许被添加 4: 其他, 5: 消息处理出错
}

func (x *ReplyCreateChat) Reset() {
	*x = ReplyCreateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyCreateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyCreateChat) ProtoMessage() {}

func (x *ReplyCreateChat) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyCreateChat.ProtoReflect.Descriptor instead.
func (*ReplyCreateChat) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{127}
}

func (x *ReplyCreateChat) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyCreateChat) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type ReqMigrateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid int32 `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 邀请者id
	Chatid int32 `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"` //等待升级的普通群ID
	//    int32 channelid = 3; //升级后的超级群ID
	//    string title = 4; // 群标题
	//    repeated int32 members = 5; //现有用户
	//    string Phone = 6; //电话
	Fromkeyid uint64 `protobuf:"varint,3,opt,name=fromkeyid,proto3" json:"fromkeyid,omitempty"` //邀请者的KEYID
	//    bool isBroadCast = 8; //超级群还是频道
	Debug *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqMigrateChat) Reset() {
	*x = ReqMigrateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMigrateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMigrateChat) ProtoMessage() {}

func (x *ReqMigrateChat) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMigrateChat.ProtoReflect.Descriptor instead.
func (*ReqMigrateChat) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{128}
}

func (x *ReqMigrateChat) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqMigrateChat) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqMigrateChat) GetFromkeyid() uint64 {
	if x != nil {
		return x.Fromkeyid
	}
	return 0
}

func (x *ReqMigrateChat) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyMigrateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//    int32 msgid = 1; // 消息id
	//    int64 randomid = 2; // 消息随机id
	//    int32 date = 3; // 消息时间
	//    int32 pts = 4; // 消息pts
	//    int32 channelmsgid = 5; //频道的消息ID
	//    int32 channelpts = 6; //频道的PTS
	Result []byte `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	Error  int32  `protobuf:"varint,8,opt,name=error,proto3" json:"error,omitempty"`  // 1. 普通群处理失败 2. 超级群处理失败 3. 其他错误
}

func (x *ReplyMigrateChat) Reset() {
	*x = ReplyMigrateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyMigrateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMigrateChat) ProtoMessage() {}

func (x *ReplyMigrateChat) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMigrateChat.ProtoReflect.Descriptor instead.
func (*ReplyMigrateChat) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{129}
}

func (x *ReplyMigrateChat) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyMigrateChat) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 邀请用户进入超级群
type ReqJoinChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32  `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`                  //超级群ID
	UserId     int32  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`                        // 自己的ID
	FromKeyid  int64  `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"` //自己的KEYID
	AccessHash int64  `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`                //超级群的哈希
	ByLink     bool   `protobuf:"varint,7,opt,name=byLink,proto3" json:"byLink,omitempty"`                        //是否通过链接加入
	Invitor    int32  `protobuf:"varint,8,opt,name=invitor,proto3" json:"invitor,omitempty"`
	InviteType int32  `protobuf:"varint,9,opt,name=invite_type,json=inviteType,proto3" json:"invite_type,omitempty"` //邀请类型 0-链接 1-二维码
	Debug      *Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqJoinChannel) Reset() {
	*x = ReqJoinChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqJoinChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqJoinChannel) ProtoMessage() {}

func (x *ReqJoinChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqJoinChannel.ProtoReflect.Descriptor instead.
func (*ReqJoinChannel) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{130}
}

func (x *ReqJoinChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqJoinChannel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqJoinChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqJoinChannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqJoinChannel) GetByLink() bool {
	if x != nil {
		return x.ByLink
	}
	return false
}

func (x *ReqJoinChannel) GetInvitor() int32 {
	if x != nil {
		return x.Invitor
	}
	return 0
}

func (x *ReqJoinChannel) GetInviteType() int32 {
	if x != nil {
		return x.InviteType
	}
	return 0
}

func (x *ReqJoinChannel) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 邀请操作的ACK
type ReplyJoinChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyJoinChannel) Reset() {
	*x = ReplyJoinChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyJoinChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyJoinChannel) ProtoMessage() {}

func (x *ReplyJoinChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyJoinChannel.ProtoReflect.Descriptor instead.
func (*ReplyJoinChannel) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{131}
}

func (x *ReplyJoinChannel) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyJoinChannel) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 转移群主
type ReqChangeGroupAndChannelCrator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	FromId     int32 `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	OperatorId int32 `protobuf:"varint,3,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	IsChat     bool  `protobuf:"varint,4,opt,name=IsChat,proto3" json:"IsChat,omitempty"`
}

func (x *ReqChangeGroupAndChannelCrator) Reset() {
	*x = ReqChangeGroupAndChannelCrator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChangeGroupAndChannelCrator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChangeGroupAndChannelCrator) ProtoMessage() {}

func (x *ReqChangeGroupAndChannelCrator) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChangeGroupAndChannelCrator.ProtoReflect.Descriptor instead.
func (*ReqChangeGroupAndChannelCrator) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{132}
}

func (x *ReqChangeGroupAndChannelCrator) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ReqChangeGroupAndChannelCrator) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqChangeGroupAndChannelCrator) GetOperatorId() int32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ReqChangeGroupAndChannelCrator) GetIsChat() bool {
	if x != nil {
		return x.IsChat
	}
	return false
}

// 回复转移群主
type ReplyChangeGroupAndChannelCrator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid     bool  `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ErrorCode int32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyChangeGroupAndChannelCrator) Reset() {
	*x = ReplyChangeGroupAndChannelCrator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChangeGroupAndChannelCrator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChangeGroupAndChannelCrator) ProtoMessage() {}

func (x *ReplyChangeGroupAndChannelCrator) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChangeGroupAndChannelCrator.ProtoReflect.Descriptor instead.
func (*ReplyChangeGroupAndChannelCrator) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{133}
}

func (x *ReplyChangeGroupAndChannelCrator) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ReplyChangeGroupAndChannelCrator) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 机器人调用接口
type ReqBotCallMessageMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromBotId int32  `protobuf:"varint,1,opt,name=fromBotId,proto3" json:"fromBotId,omitempty"`
	MsgTxt    string `protobuf:"bytes,2,opt,name=MsgTxt,proto3" json:"MsgTxt,omitempty"`
	Request   []byte `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	Layer     int32  `protobuf:"varint,4,opt,name=layer,proto3" json:"layer,omitempty"`
	Debug     *Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqBotCallMessageMedia) Reset() {
	*x = ReqBotCallMessageMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBotCallMessageMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBotCallMessageMedia) ProtoMessage() {}

func (x *ReqBotCallMessageMedia) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBotCallMessageMedia.ProtoReflect.Descriptor instead.
func (*ReqBotCallMessageMedia) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{134}
}

func (x *ReqBotCallMessageMedia) GetFromBotId() int32 {
	if x != nil {
		return x.FromBotId
	}
	return 0
}

func (x *ReqBotCallMessageMedia) GetMsgTxt() string {
	if x != nil {
		return x.MsgTxt
	}
	return ""
}

func (x *ReqBotCallMessageMedia) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ReqBotCallMessageMedia) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *ReqBotCallMessageMedia) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取dialog接口
type RequestDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid     int32  `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                           // 用户id
	Flags      int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`                             // 标识位
	OffsetDate int32  `protobuf:"varint,3,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"` // 偏移时间
	OffsetId   int32  `protobuf:"varint,4,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`       // 偏移id
	OffsetPeer []byte `protobuf:"bytes,5,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`  // 偏移对象 (mt 协议)
	Limit      int32  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`                             // 偏移长度
	Debug      *Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *RequestDialog) Reset() {
	*x = RequestDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDialog) ProtoMessage() {}

func (x *RequestDialog) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDialog.ProtoReflect.Descriptor instead.
func (*RequestDialog) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{135}
}

func (x *RequestDialog) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *RequestDialog) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RequestDialog) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *RequestDialog) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *RequestDialog) GetOffsetPeer() []byte {
	if x != nil {
		return x.OffsetPeer
	}
	return nil
}

func (x *RequestDialog) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RequestDialog) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回dialog
type ReplyDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//    repeated DialogSlice dialog = 1;
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // 对话框数据返回
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`  // 1: 无法获取到 2: userid 为0  3: 数据库返回超时 4: 消息服务crash
}

func (x *ReplyDialog) Reset() {
	*x = ReplyDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDialog) ProtoMessage() {}

func (x *ReplyDialog) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDialog.ProtoReflect.Descriptor instead.
func (*ReplyDialog) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{136}
}

func (x *ReplyDialog) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyDialog) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 用户分数
type UserScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32 `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` // 用户id
	Score  int32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`   // 用户分数
}

func (x *UserScore) Reset() {
	*x = UserScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScore) ProtoMessage() {}

func (x *UserScore) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScore.ProtoReflect.Descriptor instead.
func (*UserScore) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{137}
}

func (x *UserScore) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *UserScore) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// 调用设置分数
type ReqSetGameScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid             int32        `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                                                     // 用户id
	Scores             []*UserScore `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`                                                      // 新分数（非负数）
	Force              bool         `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`                                                       // 如果为true 则覆盖原分数  如果为false则新分数大于旧的分数才会更新
	DisableEditMessage bool         `protobuf:"varint,4,opt,name=disable_edit_message,json=disableEditMessage,proto3" json:"disable_edit_message,omitempty"` // 为true则不编辑
	ChatId             int32        `protobuf:"varint,5,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                                       // 如果未指定inline_message_id，这里就需要填chatid
	ChatType           int32        `protobuf:"varint,6,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`                                 // 1-单聊 2-普通群 3-超级群
	MessageId          int32        `protobuf:"varint,7,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`                              // 如果未指定inline_message_id，则需要填这里的message_id
	InlineMessageId    string       `protobuf:"bytes,8,opt,name=inline_message_id,json=inlineMessageId,proto3" json:"inline_message_id,omitempty"`           // 如果未指定chatid或者message_id 就需要填写inline_message_id
	Botid              int32        `protobuf:"varint,9,opt,name=botid,proto3" json:"botid,omitempty"`                                                       // 请求的机器人id
	Debug              *Debug       `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`                                                       // debug
}

func (x *ReqSetGameScore) Reset() {
	*x = ReqSetGameScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSetGameScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSetGameScore) ProtoMessage() {}

func (x *ReqSetGameScore) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSetGameScore.ProtoReflect.Descriptor instead.
func (*ReqSetGameScore) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{138}
}

func (x *ReqSetGameScore) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqSetGameScore) GetScores() []*UserScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *ReqSetGameScore) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *ReqSetGameScore) GetDisableEditMessage() bool {
	if x != nil {
		return x.DisableEditMessage
	}
	return false
}

func (x *ReqSetGameScore) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReqSetGameScore) GetChatType() int32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *ReqSetGameScore) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReqSetGameScore) GetInlineMessageId() string {
	if x != nil {
		return x.InlineMessageId
	}
	return ""
}

func (x *ReqSetGameScore) GetBotid() int32 {
	if x != nil {
		return x.Botid
	}
	return 0
}

func (x *ReqSetGameScore) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 设置分数返回
type ReplySetGameScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed   bool   `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Errorcode int32  `protobuf:"varint,3,opt,name=errorcode,proto3" json:"errorcode,omitempty"`
}

func (x *ReplySetGameScore) Reset() {
	*x = ReplySetGameScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplySetGameScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplySetGameScore) ProtoMessage() {}

func (x *ReplySetGameScore) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplySetGameScore.ProtoReflect.Descriptor instead.
func (*ReplySetGameScore) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{139}
}

func (x *ReplySetGameScore) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *ReplySetGameScore) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ReplySetGameScore) GetErrorcode() int32 {
	if x != nil {
		return x.Errorcode
	}
	return 0
}

type ReplyBanChannelUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyBanChannelUser) Reset() {
	*x = ReplyBanChannelUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBanChannelUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBanChannelUser) ProtoMessage() {}

func (x *ReplyBanChannelUser) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBanChannelUser.ProtoReflect.Descriptor instead.
func (*ReplyBanChannelUser) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{140}
}

func (x *ReplyBanChannelUser) GetUpdates() []byte {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ReplyBanChannelUser) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqBanChannelUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId              int32                `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId           int64                `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId           int32                `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	BannedUserId        int32                `protobuf:"varint,4,opt,name=bannedUserId,proto3" json:"bannedUserId,omitempty"`
	AccessHash          int64                `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	UtilDate            int32                `protobuf:"varint,6,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ChannelBannedRights *ChannelBannedRights `protobuf:"bytes,7,opt,name=channelBannedRights,proto3" json:"channelBannedRights,omitempty"`
	Debug               *Debug               `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqBanChannelUser) Reset() {
	*x = ReqBanChannelUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBanChannelUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBanChannelUser) ProtoMessage() {}

func (x *ReqBanChannelUser) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBanChannelUser.ProtoReflect.Descriptor instead.
func (*ReqBanChannelUser) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{141}
}

func (x *ReqBanChannelUser) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqBanChannelUser) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqBanChannelUser) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqBanChannelUser) GetBannedUserId() int32 {
	if x != nil {
		return x.BannedUserId
	}
	return 0
}

func (x *ReqBanChannelUser) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqBanChannelUser) GetUtilDate() int32 {
	if x != nil {
		return x.UtilDate
	}
	return 0
}

func (x *ReqBanChannelUser) GetChannelBannedRights() *ChannelBannedRights {
	if x != nil {
		return x.ChannelBannedRights
	}
	return nil
}

func (x *ReqBanChannelUser) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 请求给定channel
type ReqGetChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelIds []int32 `protobuf:"varint,1,rep,packed,name=channelIds,proto3" json:"channelIds,omitempty"`
	FromId     int32   `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug      *Debug  `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannels) Reset() {
	*x = ReqGetChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannels) ProtoMessage() {}

func (x *ReqGetChannels) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannels.ProtoReflect.Descriptor instead.
func (*ReqGetChannels) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{142}
}

func (x *ReqGetChannels) GetChannelIds() []int32 {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

func (x *ReqGetChannels) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetChannels) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回get channles
type ReplyGetChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetChannels) Reset() {
	*x = ReplyGetChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannels) ProtoMessage() {}

func (x *ReplyGetChannels) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannels.ProtoReflect.Descriptor instead.
func (*ReplyGetChannels) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{143}
}

func (x *ReplyGetChannels) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyGetChannels) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqDeleteChatUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32  `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 用户id
	Chatid    int32  `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"` // 群id
	Userid    int32  `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"` // 被删除人id
	FromKeyid uint64 `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteChatUser) Reset() {
	*x = ReqDeleteChatUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChatUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChatUser) ProtoMessage() {}

func (x *ReqDeleteChatUser) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChatUser.ProtoReflect.Descriptor instead.
func (*ReqDeleteChatUser) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{144}
}

func (x *ReqDeleteChatUser) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqDeleteChatUser) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqDeleteChatUser) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqDeleteChatUser) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqDeleteChatUser) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDeleteChatUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1.发起方id为0 2: 群id为0 3: 自增pts和msgid失败
}

func (x *ReplyDeleteChatUser) Reset() {
	*x = ReplyDeleteChatUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteChatUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteChatUser) ProtoMessage() {}

func (x *ReplyDeleteChatUser) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteChatUser.ProtoReflect.Descriptor instead.
func (*ReplyDeleteChatUser) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{145}
}

func (x *ReplyDeleteChatUser) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyDeleteChatUser) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type ChannelInactiveUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`          //用户ID
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`       //用户名
	Time    int32  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`      //活跃时间
	TimeStr string `protobuf:"bytes,4,opt,name=timeStr,proto3" json:"timeStr,omitempty"` //活跃时间格式化字符串
}

func (x *ChannelInactiveUser) Reset() {
	*x = ChannelInactiveUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInactiveUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInactiveUser) ProtoMessage() {}

func (x *ChannelInactiveUser) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInactiveUser.ProtoReflect.Descriptor instead.
func (*ChannelInactiveUser) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{146}
}

func (x *ChannelInactiveUser) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelInactiveUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelInactiveUser) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ChannelInactiveUser) GetTimeStr() string {
	if x != nil {
		return x.TimeStr
	}
	return ""
}

type GetChannelInactiveUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Limit     int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Userid    int32 `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (x *GetChannelInactiveUsersReq) Reset() {
	*x = GetChannelInactiveUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInactiveUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInactiveUsersReq) ProtoMessage() {}

func (x *GetChannelInactiveUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInactiveUsersReq.ProtoReflect.Descriptor instead.
func (*GetChannelInactiveUsersReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{147}
}

func (x *GetChannelInactiveUsersReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelInactiveUsersReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetChannelInactiveUsersReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

type GetChannelInactiveUsersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users   []*ChannelInactiveUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Count   int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`     //群当前总人数
	Errcode int32                  `protobuf:"varint,3,opt,name=errcode,proto3" json:"errcode,omitempty"` //返回错误码
}

func (x *GetChannelInactiveUsersResult) Reset() {
	*x = GetChannelInactiveUsersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInactiveUsersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInactiveUsersResult) ProtoMessage() {}

func (x *GetChannelInactiveUsersResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInactiveUsersResult.ProtoReflect.Descriptor instead.
func (*GetChannelInactiveUsersResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{148}
}

func (x *GetChannelInactiveUsersResult) GetUsers() []*ChannelInactiveUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetChannelInactiveUsersResult) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetChannelInactiveUsersResult) GetErrcode() int32 {
	if x != nil {
		return x.Errcode
	}
	return 0
}

// 机器人调用接口-Inline
type ReqBotInlineCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug     *Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`                           // debug
	UserId    int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户id
	BotId     int32  `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`             // 机器人id
	MessageId uint64 `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` // msg_id
	KeyId     uint64 `protobuf:"varint,5,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             // keyid
	SessionId uint64 `protobuf:"varint,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // sessionid
	Data      []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`                             // tl encode data
	Id        string `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`                                 // sendInline时客户端带的id
}

func (x *ReqBotInlineCall) Reset() {
	*x = ReqBotInlineCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBotInlineCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBotInlineCall) ProtoMessage() {}

func (x *ReqBotInlineCall) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBotInlineCall.ProtoReflect.Descriptor instead.
func (*ReqBotInlineCall) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{149}
}

func (x *ReqBotInlineCall) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqBotInlineCall) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqBotInlineCall) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *ReqBotInlineCall) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReqBotInlineCall) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReqBotInlineCall) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ReqBotInlineCall) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReqBotInlineCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 机器人返回接口-Inline
type ReplyBotInlineCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode    int32       `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	Message    string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Inlinecall *InlineCall `protobuf:"bytes,3,opt,name=inlinecall,proto3" json:"inlinecall,omitempty"`
}

func (x *ReplyBotInlineCall) Reset() {
	*x = ReplyBotInlineCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBotInlineCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBotInlineCall) ProtoMessage() {}

func (x *ReplyBotInlineCall) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBotInlineCall.ProtoReflect.Descriptor instead.
func (*ReplyBotInlineCall) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{150}
}

func (x *ReplyBotInlineCall) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ReplyBotInlineCall) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReplyBotInlineCall) GetInlinecall() *InlineCall {
	if x != nil {
		return x.Inlinecall
	}
	return nil
}

type InlineCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    int32 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	FromId   int32 `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	ChatId   int32 `protobuf:"varint,3,opt,name=ChatId,proto3" json:"ChatId,omitempty"`
	ChatType int32 `protobuf:"varint,4,opt,name=ChatType,proto3" json:"ChatType,omitempty"`
	BotId    int32 `protobuf:"varint,5,opt,name=BotId,proto3" json:"BotId,omitempty"`
}

func (x *InlineCall) Reset() {
	*x = InlineCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlineCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineCall) ProtoMessage() {}

func (x *InlineCall) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineCall.ProtoReflect.Descriptor instead.
func (*InlineCall) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{151}
}

func (x *InlineCall) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *InlineCall) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *InlineCall) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *InlineCall) GetChatType() int32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *InlineCall) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

// 发送给对方所有端
type ReqSendUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32  `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`       // 发送方id
	FromKeyId int64  `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"` // 发送方keyid
	Toid      int32  `protobuf:"varint,3,opt,name=toid,proto3" json:"toid,omitempty"`           // 接收方id
	Data      []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`            // Mt数据
	Debug     *Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`          // debug日志
}

func (x *ReqSendUserMsg) Reset() {
	*x = ReqSendUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendUserMsg) ProtoMessage() {}

func (x *ReqSendUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendUserMsg.ProtoReflect.Descriptor instead.
func (*ReqSendUserMsg) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{152}
}

func (x *ReqSendUserMsg) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqSendUserMsg) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqSendUserMsg) GetToid() int32 {
	if x != nil {
		return x.Toid
	}
	return 0
}

func (x *ReqSendUserMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReqSendUserMsg) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 置顶对话框返回
type ReplyBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1: 对话框不存在  2:无法置顶 3:其他错误
}

func (x *ReplyBool) Reset() {
	*x = ReplyBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBool) ProtoMessage() {}

func (x *ReplyBool) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBool.ProtoReflect.Descriptor instead.
func (*ReplyBool) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{153}
}

func (x *ReplyBool) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ReplyBool) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 机器人调用接口
type ReqBotCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrombotId int32  `protobuf:"varint,1,opt,name=frombotId,proto3" json:"frombotId,omitempty"`
	Request   []byte `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Layer     int32  `protobuf:"varint,3,opt,name=layer,proto3" json:"layer,omitempty"`
	Debug     *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqBotCall) Reset() {
	*x = ReqBotCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBotCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBotCall) ProtoMessage() {}

func (x *ReqBotCall) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBotCall.ProtoReflect.Descriptor instead.
func (*ReqBotCall) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{154}
}

func (x *ReqBotCall) GetFrombotId() int32 {
	if x != nil {
		return x.FrombotId
	}
	return 0
}

func (x *ReqBotCall) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ReqBotCall) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *ReqBotCall) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 机器人返回接口
type ReplyBotCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyBotCall) Reset() {
	*x = ReplyBotCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBotCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBotCall) ProtoMessage() {}

func (x *ReplyBotCall) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBotCall.ProtoReflect.Descriptor instead.
func (*ReplyBotCall) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{155}
}

func (x *ReplyBotCall) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyBotCall) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type ReqGetMessageByUserIdUuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Uuid   int64  `protobuf:"varint,2,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetMessageByUserIdUuid) Reset() {
	*x = ReqGetMessageByUserIdUuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetMessageByUserIdUuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetMessageByUserIdUuid) ProtoMessage() {}

func (x *ReqGetMessageByUserIdUuid) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetMessageByUserIdUuid.ProtoReflect.Descriptor instead.
func (*ReqGetMessageByUserIdUuid) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{156}
}

func (x *ReqGetMessageByUserIdUuid) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetMessageByUserIdUuid) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *ReqGetMessageByUserIdUuid) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetMessageByUserIdUuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMessage *UserMsg `protobuf:"bytes,1,opt,name=UserMessage,proto3" json:"UserMessage,omitempty"`
	ErrorCode   int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetMessageByUserIdUuid) Reset() {
	*x = ReplyGetMessageByUserIdUuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetMessageByUserIdUuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetMessageByUserIdUuid) ProtoMessage() {}

func (x *ReplyGetMessageByUserIdUuid) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetMessageByUserIdUuid.ProtoReflect.Descriptor instead.
func (*ReplyGetMessageByUserIdUuid) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{157}
}

func (x *ReplyGetMessageByUserIdUuid) GetUserMessage() *UserMsg {
	if x != nil {
		return x.UserMessage
	}
	return nil
}

func (x *ReplyGetMessageByUserIdUuid) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqGetChannelMessageByChannelIdMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32  `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32  `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug     *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannelMessageByChannelIdMsgId) Reset() {
	*x = ReqGetChannelMessageByChannelIdMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMessageByChannelIdMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMessageByChannelIdMsgId) ProtoMessage() {}

func (x *ReqGetChannelMessageByChannelIdMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMessageByChannelIdMsgId.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMessageByChannelIdMsgId) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{158}
}

func (x *ReqGetChannelMessageByChannelIdMsgId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMessageByChannelIdMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqGetChannelMessageByChannelIdMsgId) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMessageByChannelIdMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMessage *UserMsg `protobuf:"bytes,1,opt,name=UserMessage,proto3" json:"UserMessage,omitempty"`
	ErrorCode   int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetChannelMessageByChannelIdMsgId) Reset() {
	*x = ReplyGetChannelMessageByChannelIdMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMessageByChannelIdMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMessageByChannelIdMsgId) ProtoMessage() {}

func (x *ReplyGetChannelMessageByChannelIdMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMessageByChannelIdMsgId.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMessageByChannelIdMsgId) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{159}
}

func (x *ReplyGetChannelMessageByChannelIdMsgId) GetUserMessage() *UserMsg {
	if x != nil {
		return x.UserMessage
	}
	return nil
}

func (x *ReplyGetChannelMessageByChannelIdMsgId) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqGetMessageByUserIdMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId  int32  `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetMessageByUserIdMsgId) Reset() {
	*x = ReqGetMessageByUserIdMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetMessageByUserIdMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetMessageByUserIdMsgId) ProtoMessage() {}

func (x *ReqGetMessageByUserIdMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetMessageByUserIdMsgId.ProtoReflect.Descriptor instead.
func (*ReqGetMessageByUserIdMsgId) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{160}
}

func (x *ReqGetMessageByUserIdMsgId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetMessageByUserIdMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqGetMessageByUserIdMsgId) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetMessageByUserIdMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMessage *UserMsg `protobuf:"bytes,1,opt,name=UserMessage,proto3" json:"UserMessage,omitempty"`
	ErrorCode   int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetMessageByUserIdMsgId) Reset() {
	*x = ReplyGetMessageByUserIdMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetMessageByUserIdMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetMessageByUserIdMsgId) ProtoMessage() {}

func (x *ReplyGetMessageByUserIdMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetMessageByUserIdMsgId.ProtoReflect.Descriptor instead.
func (*ReplyGetMessageByUserIdMsgId) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{161}
}

func (x *ReplyGetMessageByUserIdMsgId) GetUserMessage() *UserMsg {
	if x != nil {
		return x.UserMessage
	}
	return nil
}

func (x *ReplyGetMessageByUserIdMsgId) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ###################################  storage_proto.pb.go  #############################
// 网关上传文件描述信息请求
type MsgFileDescReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid        uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`                                 // 存储服务分配存储文件的唯一标识
	AccessHash uint64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` // 访问hash
	Data       []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                                // 数据
}

func (x *MsgFileDescReq) Reset() {
	*x = MsgFileDescReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFileDescReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFileDescReq) ProtoMessage() {}

func (x *MsgFileDescReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFileDescReq.ProtoReflect.Descriptor instead.
func (*MsgFileDescReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{162}
}

func (x *MsgFileDescReq) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *MsgFileDescReq) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *MsgFileDescReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 网关上传文件描述信息响应
type MsgFileDescResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ERpcResultCode `protobuf:"varint,1,opt,name=result,proto3,enum=imapigateway.ERpcResultCode" json:"result,omitempty"` // 结果码
}

func (x *MsgFileDescResp) Reset() {
	*x = MsgFileDescResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFileDescResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFileDescResp) ProtoMessage() {}

func (x *MsgFileDescResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFileDescResp.ProtoReflect.Descriptor instead.
func (*MsgFileDescResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{163}
}

func (x *MsgFileDescResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

// 服务上传下载限制请求
type MsgServiceLimitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved uint32 `protobuf:"varint,1,opt,name=reserved,proto3" json:"reserved,omitempty"` // 保留用
}

func (x *MsgServiceLimitReq) Reset() {
	*x = MsgServiceLimitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgServiceLimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgServiceLimitReq) ProtoMessage() {}

func (x *MsgServiceLimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgServiceLimitReq.ProtoReflect.Descriptor instead.
func (*MsgServiceLimitReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{164}
}

func (x *MsgServiceLimitReq) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

// 服务上传下载限制响应(单位：Byte)
type MsgServiceLimitResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usfsl  uint32 `protobuf:"varint,1,opt,name=usfsl,proto3" json:"usfsl,omitempty"`   // 上传小文件大小限制，usfsl=>upload small file size limit
	Ubfssl uint32 `protobuf:"varint,2,opt,name=ubfssl,proto3" json:"ubfssl,omitempty"` // 上传大文件分片大小限制，ubfsl=>upload big file slice size limit
	Dssl   uint32 `protobuf:"varint,3,opt,name=dssl,proto3" json:"dssl,omitempty"`     // 下载分片大小限制，usfsl=>download slice size limit
}

func (x *MsgServiceLimitResp) Reset() {
	*x = MsgServiceLimitResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgServiceLimitResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgServiceLimitResp) ProtoMessage() {}

func (x *MsgServiceLimitResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgServiceLimitResp.ProtoReflect.Descriptor instead.
func (*MsgServiceLimitResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{165}
}

func (x *MsgServiceLimitResp) GetUsfsl() uint32 {
	if x != nil {
		return x.Usfsl
	}
	return 0
}

func (x *MsgServiceLimitResp) GetUbfssl() uint32 {
	if x != nil {
		return x.Ubfssl
	}
	return 0
}

func (x *MsgServiceLimitResp) GetDssl() uint32 {
	if x != nil {
		return x.Dssl
	}
	return 0
}

// 网关取Fid请求
type MsgGetFidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyid     uint64 `protobuf:"varint,1,opt,name=keyid,proto3" json:"keyid,omitempty"`                          // Ref 消息协议
	Fileid    int64  `protobuf:"varint,2,opt,name=fileid,proto3" json:"fileid,omitempty"`                        // Ref 消息协议
	FileType  uint32 `protobuf:"varint,3,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`    // Ref 消息协议 1 small 2: big
	Md5       string `protobuf:"bytes,4,opt,name=md5,proto3" json:"md5,omitempty"`                               // file_type为1时的文件hash，如果与服务实际收到不符丢掉；另外加密聊天客户端没有传md5,为空放弃校检
	PartTotal uint32 `protobuf:"varint,5,opt,name=part_total,json=partTotal,proto3" json:"part_total,omitempty"` // file_type为2时的文件分片总数，如果与服务实际收到不符丢掉
}

func (x *MsgGetFidReq) Reset() {
	*x = MsgGetFidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGetFidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGetFidReq) ProtoMessage() {}

func (x *MsgGetFidReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgGetFidReq.ProtoReflect.Descriptor instead.
func (*MsgGetFidReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{166}
}

func (x *MsgGetFidReq) GetKeyid() uint64 {
	if x != nil {
		return x.Keyid
	}
	return 0
}

func (x *MsgGetFidReq) GetFileid() int64 {
	if x != nil {
		return x.Fileid
	}
	return 0
}

func (x *MsgGetFidReq) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *MsgGetFidReq) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *MsgGetFidReq) GetPartTotal() uint32 {
	if x != nil {
		return x.PartTotal
	}
	return 0
}

// 网关取Fid响应
type MsgGetFidResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid        uint64         `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`                                        // 存储服务分配存储文件的唯一标识
	AccessHash uint64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`        // 访问hash
	FileSize   uint64         `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`              // 文件大小
	Result     ERpcResultCode `protobuf:"varint,4,opt,name=result,proto3,enum=imapigateway.ERpcResultCode" json:"result,omitempty"` // 结果码
}

func (x *MsgGetFidResp) Reset() {
	*x = MsgGetFidResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGetFidResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGetFidResp) ProtoMessage() {}

func (x *MsgGetFidResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgGetFidResp.ProtoReflect.Descriptor instead.
func (*MsgGetFidResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{167}
}

func (x *MsgGetFidResp) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *MsgGetFidResp) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *MsgGetFidResp) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *MsgGetFidResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

// 网关上传文件请求
type MsgFilePartsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyid     uint64 `protobuf:"varint,1,opt,name=keyid,proto3" json:"keyid,omitempty"`                          // Ref 消息协议
	Fileid    int64  `protobuf:"varint,2,opt,name=fileid,proto3" json:"fileid,omitempty"`                        // Ref 消息协议
	PartId    uint32 `protobuf:"varint,3,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`          // 文件片ID，备注：从0开始分配
	FileType  uint32 `protobuf:"varint,4,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`    // Ref 消息协议 1 small 2: big
	PartTotal uint32 `protobuf:"varint,5,opt,name=part_total,json=partTotal,proto3" json:"part_total,omitempty"` // file_type为2时有效，大文件片总数，小文件没有
	Data      []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`                             // 数据
}

func (x *MsgFilePartsReq) Reset() {
	*x = MsgFilePartsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFilePartsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFilePartsReq) ProtoMessage() {}

func (x *MsgFilePartsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFilePartsReq.ProtoReflect.Descriptor instead.
func (*MsgFilePartsReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{168}
}

func (x *MsgFilePartsReq) GetKeyid() uint64 {
	if x != nil {
		return x.Keyid
	}
	return 0
}

func (x *MsgFilePartsReq) GetFileid() int64 {
	if x != nil {
		return x.Fileid
	}
	return 0
}

func (x *MsgFilePartsReq) GetPartId() uint32 {
	if x != nil {
		return x.PartId
	}
	return 0
}

func (x *MsgFilePartsReq) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *MsgFilePartsReq) GetPartTotal() uint32 {
	if x != nil {
		return x.PartTotal
	}
	return 0
}

func (x *MsgFilePartsReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 网关上传文件响应
type MsgFilePartsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ERpcResultCode `protobuf:"varint,1,opt,name=result,proto3,enum=imapigateway.ERpcResultCode" json:"result,omitempty"` // 结果码
}

func (x *MsgFilePartsResp) Reset() {
	*x = MsgFilePartsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFilePartsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFilePartsResp) ProtoMessage() {}

func (x *MsgFilePartsResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFilePartsResp.ProtoReflect.Descriptor instead.
func (*MsgFilePartsResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{169}
}

func (x *MsgFilePartsResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

// 上传文件请求
type MsgUploadFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Para1 *storageservice.UploadReqPara1 `protobuf:"bytes,1,opt,name=para1,proto3" json:"para1,omitempty"` // Ref
	Para2 *storageservice.UploadReqPara2 `protobuf:"bytes,2,opt,name=para2,proto3" json:"para2,omitempty"` // Ref
	Data  []byte                         `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`   // 数据
}

func (x *MsgUploadFileReq) Reset() {
	*x = MsgUploadFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUploadFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUploadFileReq) ProtoMessage() {}

func (x *MsgUploadFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgUploadFileReq.ProtoReflect.Descriptor instead.
func (*MsgUploadFileReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{170}
}

func (x *MsgUploadFileReq) GetPara1() *storageservice.UploadReqPara1 {
	if x != nil {
		return x.Para1
	}
	return nil
}

func (x *MsgUploadFileReq) GetPara2() *storageservice.UploadReqPara2 {
	if x != nil {
		return x.Para2
	}
	return nil
}

func (x *MsgUploadFileReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 上传文件响应
type MsgUploadFileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     ERpcResultCode                     `protobuf:"varint,1,opt,name=result,proto3,enum=imapigateway.ERpcResultCode" json:"result,omitempty"` // 结果码
	Para1      *storageservice.FileUploadRespPara `protobuf:"bytes,2,opt,name=para1,proto3" json:"para1,omitempty"`                                     // Ref
	Para2      *FidPara                           `protobuf:"bytes,3,opt,name=para2,proto3" json:"para2,omitempty"`                                     // Ref，仅用于非分片文件上传
	AccessHash uint64                             `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`        // 仅用于非分片文件上传存储之后的访问hash
}

func (x *MsgUploadFileResp) Reset() {
	*x = MsgUploadFileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUploadFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUploadFileResp) ProtoMessage() {}

func (x *MsgUploadFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgUploadFileResp.ProtoReflect.Descriptor instead.
func (*MsgUploadFileResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{171}
}

func (x *MsgUploadFileResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

func (x *MsgUploadFileResp) GetPara1() *storageservice.FileUploadRespPara {
	if x != nil {
		return x.Para1
	}
	return nil
}

func (x *MsgUploadFileResp) GetPara2() *FidPara {
	if x != nil {
		return x.Para2
	}
	return nil
}

func (x *MsgUploadFileResp) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// 下载文件请求
type MsgDownloadFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid        uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`                                 // 存储服务分配存储文件的唯一标识
	AccessHash uint64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` // 访问hash
	Offset     uint32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                           // 起始偏移，从0开始
	Length     uint32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`                           // 长度
}

func (x *MsgDownloadFileReq) Reset() {
	*x = MsgDownloadFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDownloadFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDownloadFileReq) ProtoMessage() {}

func (x *MsgDownloadFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDownloadFileReq.ProtoReflect.Descriptor instead.
func (*MsgDownloadFileReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{172}
}

func (x *MsgDownloadFileReq) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *MsgDownloadFileReq) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *MsgDownloadFileReq) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MsgDownloadFileReq) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

// 下载文件响应参数1
type DownloadFileRespPara1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid      uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`                          // 存储服务分配存储文件的唯一标识
	Offset   uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`                    // 起始偏移，从0开始
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"` // 上传文件时的文件名
}

func (x *DownloadFileRespPara1) Reset() {
	*x = DownloadFileRespPara1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFileRespPara1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileRespPara1) ProtoMessage() {}

func (x *DownloadFileRespPara1) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileRespPara1.ProtoReflect.Descriptor instead.
func (*DownloadFileRespPara1) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{173}
}

func (x *DownloadFileRespPara1) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *DownloadFileRespPara1) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DownloadFileRespPara1) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// 下载文件响应参数2
type DownloadFileRespPara2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length uint32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"` // 长度
	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`      // 数据
}

func (x *DownloadFileRespPara2) Reset() {
	*x = DownloadFileRespPara2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFileRespPara2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileRespPara2) ProtoMessage() {}

func (x *DownloadFileRespPara2) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileRespPara2.ProtoReflect.Descriptor instead.
func (*DownloadFileRespPara2) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{174}
}

func (x *DownloadFileRespPara2) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *DownloadFileRespPara2) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 下载文件响应
type MsgDownloadFileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ERpcResultCode         `protobuf:"varint,1,opt,name=result,proto3,enum=imapigateway.ERpcResultCode" json:"result,omitempty"` // 结果码
	Para1  *DownloadFileRespPara1 `protobuf:"bytes,2,opt,name=para1,proto3" json:"para1,omitempty"`                                     // Ref, 保留选用，当result = RRC_OK 且选用时有效
	Para2  *DownloadFileRespPara2 `protobuf:"bytes,3,opt,name=para2,proto3" json:"para2,omitempty"`                                     // Ref，当result = RRC_OK有效
}

func (x *MsgDownloadFileResp) Reset() {
	*x = MsgDownloadFileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDownloadFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDownloadFileResp) ProtoMessage() {}

func (x *MsgDownloadFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDownloadFileResp.ProtoReflect.Descriptor instead.
func (*MsgDownloadFileResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{175}
}

func (x *MsgDownloadFileResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

func (x *MsgDownloadFileResp) GetPara1() *DownloadFileRespPara1 {
	if x != nil {
		return x.Para1
	}
	return nil
}

func (x *MsgDownloadFileResp) GetPara2() *DownloadFileRespPara2 {
	if x != nil {
		return x.Para2
	}
	return nil
}

// 查询对象信息请求
type MsgQueryObjInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"` // 存储服务分配存储文件的唯一标识
}

func (x *MsgQueryObjInfoReq) Reset() {
	*x = MsgQueryObjInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgQueryObjInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgQueryObjInfoReq) ProtoMessage() {}

func (x *MsgQueryObjInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgQueryObjInfoReq.ProtoReflect.Descriptor instead.
func (*MsgQueryObjInfoReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{176}
}

func (x *MsgQueryObjInfoReq) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

// 查询对象信息响应参数
type QueryObjInfoRespPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                // 文件名
	Size       uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`                               // 文件大小（Byte）
	AccessHash uint64 `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` // 访问hash，仅针对机器人服务返回处理
}

func (x *QueryObjInfoRespPara) Reset() {
	*x = QueryObjInfoRespPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryObjInfoRespPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryObjInfoRespPara) ProtoMessage() {}

func (x *QueryObjInfoRespPara) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryObjInfoRespPara.ProtoReflect.Descriptor instead.
func (*QueryObjInfoRespPara) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{177}
}

func (x *QueryObjInfoRespPara) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryObjInfoRespPara) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QueryObjInfoRespPara) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// 查询对象信息响应
type MsgQueryObjInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Para   *QueryObjInfoRespPara `protobuf:"bytes,1,opt,name=para,proto3" json:"para,omitempty"`                                       // Ref
	Result ERpcResultCode        `protobuf:"varint,2,opt,name=result,proto3,enum=imapigateway.ERpcResultCode" json:"result,omitempty"` // 结果码
}

func (x *MsgQueryObjInfoResp) Reset() {
	*x = MsgQueryObjInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgQueryObjInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgQueryObjInfoResp) ProtoMessage() {}

func (x *MsgQueryObjInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgQueryObjInfoResp.ProtoReflect.Descriptor instead.
func (*MsgQueryObjInfoResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{178}
}

func (x *MsgQueryObjInfoResp) GetPara() *QueryObjInfoRespPara {
	if x != nil {
		return x.Para
	}
	return nil
}

func (x *MsgQueryObjInfoResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

// 网关获取文件描述信息请求
type MsgGetFileDescReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid        uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`                                 // 存储服务分配存储文件的唯一标识
	AccessHash uint64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` // 访问hash
}

func (x *MsgGetFileDescReq) Reset() {
	*x = MsgGetFileDescReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGetFileDescReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGetFileDescReq) ProtoMessage() {}

func (x *MsgGetFileDescReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgGetFileDescReq.ProtoReflect.Descriptor instead.
func (*MsgGetFileDescReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{179}
}

func (x *MsgGetFileDescReq) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *MsgGetFileDescReq) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// 网关获取文件描述信息响应
type MsgGetFileDescResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ERpcResultCode `protobuf:"varint,1,opt,name=result,proto3,enum=imapigateway.ERpcResultCode" json:"result,omitempty"` // 结果码
	Data   []byte         `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                                       // 数据
}

func (x *MsgGetFileDescResp) Reset() {
	*x = MsgGetFileDescResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGetFileDescResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGetFileDescResp) ProtoMessage() {}

func (x *MsgGetFileDescResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgGetFileDescResp.ProtoReflect.Descriptor instead.
func (*MsgGetFileDescResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{180}
}

func (x *MsgGetFileDescResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

func (x *MsgGetFileDescResp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// ###################################  channelservice.pb.go  #############################
// 获取channel信息  不带user信息
type GetChannelInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32  `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //channle的Id
	AccessHash int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	Dlog       *Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                //日志
}

func (x *GetChannelInfoReq) Reset() {
	*x = GetChannelInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInfoReq) ProtoMessage() {}

func (x *GetChannelInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInfoReq.ProtoReflect.Descriptor instead.
func (*GetChannelInfoReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{181}
}

func (x *GetChannelInfoReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelInfoReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetChannelInfoReq) GetDlog() *Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 群基础信息
type GetChannelInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseInfo   *ChannelInfoBase `protobuf:"bytes,1,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`                                       //基础信息  不带user信息
	Resultcode ChatResultCode   `protobuf:"varint,2,opt,name=resultcode,proto3,enum=imapigateway.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *GetChannelInfoResp) Reset() {
	*x = GetChannelInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInfoResp) ProtoMessage() {}

func (x *GetChannelInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInfoResp.ProtoReflect.Descriptor instead.
func (*GetChannelInfoResp) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{182}
}

func (x *GetChannelInfoResp) GetBaseInfo() *ChannelInfoBase {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *GetChannelInfoResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// ###################################  botserver.pb.go  #############################
type ReqGetAdminGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	//int32 PeerFilter = 2; // 2：只要普通群 4：只要超级群 8：只要频道 （可相互组合 ex: 2|4|8 暂时不支持单聊)
	Debug *Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetAdminGroups) Reset() {
	*x = ReqGetAdminGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetAdminGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetAdminGroups) ProtoMessage() {}

func (x *ReqGetAdminGroups) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetAdminGroups.ProtoReflect.Descriptor instead.
func (*ReqGetAdminGroups) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{183}
}

func (x *ReqGetAdminGroups) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReqGetAdminGroups) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	PeerFilter int32 `protobuf:"varint,2,opt,name=PeerFilter,proto3" json:"PeerFilter,omitempty"` // 2：只要普通群 4：只要超级群 8：只要频道 （可相互组合 ex: 2|4|8 暂时不支持单聊)
}

func (x *ReqGetGroups) Reset() {
	*x = ReqGetGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetGroups) ProtoMessage() {}

func (x *ReqGetGroups) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetGroups.ProtoReflect.Descriptor instead.
func (*ReqGetGroups) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{184}
}

func (x *ReqGetGroups) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReqGetGroups) GetPeerFilter() int32 {
	if x != nil {
		return x.PeerFilter
	}
	return 0
}

type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerID   int32  `protobuf:"varint,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	PeerName string `protobuf:"bytes,2,opt,name=PeerName,proto3" json:"PeerName,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{185}
}

func (x *Peer) GetPeerID() int32 {
	if x != nil {
		return x.PeerID
	}
	return 0
}

func (x *Peer) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

type ReplyGetGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups      []*Peer `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`           // 普通群
	SuperGroups []*Peer `protobuf:"bytes,2,rep,name=SuperGroups,proto3" json:"SuperGroups,omitempty"` // 超级群
	Channels    []*Peer `protobuf:"bytes,3,rep,name=Channels,proto3" json:"Channels,omitempty"`       // 频道
}

func (x *ReplyGetGroups) Reset() {
	*x = ReplyGetGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetGroups) ProtoMessage() {}

func (x *ReplyGetGroups) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetGroups.ProtoReflect.Descriptor instead.
func (*ReplyGetGroups) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{186}
}

func (x *ReplyGetGroups) GetGroups() []*Peer {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ReplyGetGroups) GetSuperGroups() []*Peer {
	if x != nil {
		return x.SuperGroups
	}
	return nil
}

func (x *ReplyGetGroups) GetChannels() []*Peer {
	if x != nil {
		return x.Channels
	}
	return nil
}

type ReqDeleteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imapigateway.ChatType" json:"ChatType,omitempty"`
	UserId   int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId   int32    `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MsgId    []int32  `protobuf:"varint,4,rep,packed,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Debug    *Debug   `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteMessage) Reset() {
	*x = ReqDeleteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteMessage) ProtoMessage() {}

func (x *ReqDeleteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteMessage.ProtoReflect.Descriptor instead.
func (*ReqDeleteMessage) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{187}
}

func (x *ReqDeleteMessage) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeZero
}

func (x *ReqDeleteMessage) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqDeleteMessage) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReqDeleteMessage) GetMsgId() []int32 {
	if x != nil {
		return x.MsgId
	}
	return nil
}

func (x *ReqDeleteMessage) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqSendChatAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType   ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imapigateway.ChatType" json:"ChatType,omitempty"`
	UserId     int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId     int32    `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ActionData []byte   `protobuf:"bytes,4,opt,name=actionData,proto3" json:"actionData,omitempty"`
	Debug      *Debug   `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqSendChatAction) Reset() {
	*x = ReqSendChatAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendChatAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendChatAction) ProtoMessage() {}

func (x *ReqSendChatAction) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendChatAction.ProtoReflect.Descriptor instead.
func (*ReqSendChatAction) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{188}
}

func (x *ReqSendChatAction) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeZero
}

func (x *ReqSendChatAction) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqSendChatAction) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReqSendChatAction) GetActionData() []byte {
	if x != nil {
		return x.ActionData
	}
	return nil
}

func (x *ReqSendChatAction) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imapigateway.ChatType" json:"ChatType,omitempty"`
	ReqData  []byte   `protobuf:"bytes,2,opt,name=reqData,proto3" json:"reqData,omitempty"`
	BotId    int32    `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
}

func (x *ReqData) Reset() {
	*x = ReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqData) ProtoMessage() {}

func (x *ReqData) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqData.ProtoReflect.Descriptor instead.
func (*ReqData) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{189}
}

func (x *ReqData) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeZero
}

func (x *ReqData) GetReqData() []byte {
	if x != nil {
		return x.ReqData
	}
	return nil
}

func (x *ReqData) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

type ReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` //回覆結果
	Error int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyData) Reset() {
	*x = ReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyData) ProtoMessage() {}

func (x *ReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyData.ProtoReflect.Descriptor instead.
func (*ReplyData) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{190}
}

func (x *ReplyData) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyData) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type ReqGetChatMembersCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=imapigateway.ChatType" json:"ChatType,omitempty"`
	UserId   int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId   int32    `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Debug    *Debug   `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChatMembersCount) Reset() {
	*x = ReqGetChatMembersCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChatMembersCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChatMembersCount) ProtoMessage() {}

func (x *ReqGetChatMembersCount) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChatMembersCount.ProtoReflect.Descriptor instead.
func (*ReqGetChatMembersCount) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{191}
}

func (x *ReqGetChatMembersCount) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeZero
}

func (x *ReqGetChatMembersCount) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetChatMembersCount) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReqGetChatMembersCount) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChatMembersCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatMembersCount int32 `protobuf:"varint,1,opt,name=ChatMembersCount,proto3" json:"ChatMembersCount,omitempty"`
	ErrorCode        int32 `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (x *ReplyGetChatMembersCount) Reset() {
	*x = ReplyGetChatMembersCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChatMembersCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChatMembersCount) ProtoMessage() {}

func (x *ReplyGetChatMembersCount) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChatMembersCount.ProtoReflect.Descriptor instead.
func (*ReplyGetChatMembersCount) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{192}
}

func (x *ReplyGetChatMembersCount) GetChatMembersCount() int32 {
	if x != nil {
		return x.ChatMembersCount
	}
	return 0
}

func (x *ReplyGetChatMembersCount) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 通过群Id 用户Id 获取群基本信息
type GetChatInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId   int32  `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`       //群id
	UserId   int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       //用户id
	RobotGet bool   `protobuf:"varint,3,opt,name=robot_get,json=robotGet,proto3" json:"robot_get,omitempty"` //是否是机器人获取
	Dlog     *Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                          //日志
}

func (x *GetChatInfoReq) Reset() {
	*x = GetChatInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatInfoReq) ProtoMessage() {}

func (x *GetChatInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatInfoReq.ProtoReflect.Descriptor instead.
func (*GetChatInfoReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{193}
}

func (x *GetChatInfoReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *GetChatInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChatInfoReq) GetRobotGet() bool {
	if x != nil {
		return x.RobotGet
	}
	return false
}

func (x *GetChatInfoReq) GetDlog() *Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 获取用户信息、群、超级群信息的请求
type GetUsersChatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid        int32   `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                                    // 获取方id
	Users         []int32 `protobuf:"varint,2,rep,packed,name=users,proto3" json:"users,omitempty"`                               // 获取用户信息的用户id数组
	Chatid        []int32 `protobuf:"varint,3,rep,packed,name=chatid,proto3" json:"chatid,omitempty"`                             //获取普通群信息的群id数组
	Channelid     []int32 `protobuf:"varint,4,rep,packed,name=channelid,proto3" json:"channelid,omitempty"`                       // 获取超级群用户信息的超级群id数组
	ProtocolLayer int32   `protobuf:"varint,5,opt,name=protocol_layer,json=protocolLayer,proto3" json:"protocol_layer,omitempty"` // 协议层数
	Dlog          *Debug  `protobuf:"bytes,6,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                         //日志
}

func (x *GetUsersChatsReq) Reset() {
	*x = GetUsersChatsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersChatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersChatsReq) ProtoMessage() {}

func (x *GetUsersChatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersChatsReq.ProtoReflect.Descriptor instead.
func (*GetUsersChatsReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{194}
}

func (x *GetUsersChatsReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *GetUsersChatsReq) GetUsers() []int32 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetUsersChatsReq) GetChatid() []int32 {
	if x != nil {
		return x.Chatid
	}
	return nil
}

func (x *GetUsersChatsReq) GetChannelid() []int32 {
	if x != nil {
		return x.Channelid
	}
	return nil
}

func (x *GetUsersChatsReq) GetProtocolLayer() int32 {
	if x != nil {
		return x.ProtocolLayer
	}
	return 0
}

func (x *GetUsersChatsReq) GetDlog() *Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 获取用户信息、群、超级群信息的返回
type GetUsersChatsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//repeated ChannelInfoBase channels = 1;
	//repeated GetChatInfoResp chats = 3;
	Channels   [][]byte       `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	Users      *UserInfoArray `protobuf:"bytes,2,opt,name=users,proto3" json:"users,omitempty"`
	Chats      [][]byte       `protobuf:"bytes,3,rep,name=chats,proto3" json:"chats,omitempty"`
	NoChats    []int32        `protobuf:"varint,4,rep,packed,name=no_chats,json=noChats,proto3" json:"no_chats,omitempty"`
	NoChans    []int32        `protobuf:"varint,5,rep,packed,name=no_chans,json=noChans,proto3" json:"no_chans,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,6,opt,name=resultcode,proto3,enum=imapigateway.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *GetUsersChatsResult) Reset() {
	*x = GetUsersChatsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersChatsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersChatsResult) ProtoMessage() {}

func (x *GetUsersChatsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersChatsResult.ProtoReflect.Descriptor instead.
func (*GetUsersChatsResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{195}
}

func (x *GetUsersChatsResult) GetChannels() [][]byte {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *GetUsersChatsResult) GetUsers() *UserInfoArray {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetUsersChatsResult) GetChats() [][]byte {
	if x != nil {
		return x.Chats
	}
	return nil
}

func (x *GetUsersChatsResult) GetNoChats() []int32 {
	if x != nil {
		return x.NoChats
	}
	return nil
}

func (x *GetUsersChatsResult) GetNoChans() []int32 {
	if x != nil {
		return x.NoChans
	}
	return nil
}

func (x *GetUsersChatsResult) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 根据用户id获取用户ID
type GetUserInfoByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32  `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //自己的用户ＩＤ
	UserId int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //需要获取的用户ID
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserInfoByIdReq) Reset() {
	*x = GetUserInfoByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoByIdReq) ProtoMessage() {}

func (x *GetUserInfoByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoByIdReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoByIdReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{196}
}

func (x *GetUserInfoByIdReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetUserInfoByIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserInfoByIdReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetUserInfoByIdArrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId  int32   `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`           //自己的用户ＩＤ
	UserIds []int32 `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"` //需要获取的用户ID
	Debug   *Debug  `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserInfoByIdArrReq) Reset() {
	*x = GetUserInfoByIdArrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoByIdArrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoByIdArrReq) ProtoMessage() {}

func (x *GetUserInfoByIdArrReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoByIdArrReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoByIdArrReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{197}
}

func (x *GetUserInfoByIdArrReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetUserInfoByIdArrReq) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetUserInfoByIdArrReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户信息
type UpdateUserProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	Flags     int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`                 // flags 第0 位 为更新firstName 第一位 last_name 第二位为 about
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	About     string `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	Debug     *Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateUserProfileReq) Reset() {
	*x = UpdateUserProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserProfileReq) ProtoMessage() {}

func (x *UpdateUserProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserProfileReq.ProtoReflect.Descriptor instead.
func (*UpdateUserProfileReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{198}
}

func (x *UpdateUserProfileReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserProfileReq) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UpdateUserProfileReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpdateUserProfileReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpdateUserProfileReq) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *UpdateUserProfileReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 更新用户昵称等的返回结果
type UpdateUserProfileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                      //用户基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateUserProfileResult) Reset() {
	*x = UpdateUserProfileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserProfileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserProfileResult) ProtoMessage() {}

func (x *UpdateUserProfileResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserProfileResult.ProtoReflect.Descriptor instead.
func (*UpdateUserProfileResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{199}
}

func (x *UpdateUserProfileResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *UpdateUserProfileResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 根据用户电话号码来获取用户信息
type GetUserByphone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Debug *Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserByphone) Reset() {
	*x = GetUserByphone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByphone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByphone) ProtoMessage() {}

func (x *GetUserByphone) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByphone.ProtoReflect.Descriptor instead.
func (*GetUserByphone) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{200}
}

func (x *GetUserByphone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetUserByphone) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateBotInfoSuppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Placeholder string `protobuf:"bytes,2,opt,name=Placeholder,proto3" json:"Placeholder,omitempty"`
	Geo         bool   `protobuf:"varint,3,opt,name=geo,proto3" json:"geo,omitempty"`
	Debug       *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateBotInfoSuppReq) Reset() {
	*x = UpdateBotInfoSuppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotInfoSuppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotInfoSuppReq) ProtoMessage() {}

func (x *UpdateBotInfoSuppReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotInfoSuppReq.ProtoReflect.Descriptor instead.
func (*UpdateBotInfoSuppReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{201}
}

func (x *UpdateBotInfoSuppReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateBotInfoSuppReq) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *UpdateBotInfoSuppReq) GetGeo() bool {
	if x != nil {
		return x.Geo
	}
	return false
}

func (x *UpdateBotInfoSuppReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateBotInfoSuppResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *UpdateBotInfoSuppResult) Reset() {
	*x = UpdateBotInfoSuppResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotInfoSuppResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotInfoSuppResult) ProtoMessage() {}

func (x *UpdateBotInfoSuppResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotInfoSuppResult.ProtoReflect.Descriptor instead.
func (*UpdateBotInfoSuppResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{202}
}

func (x *UpdateBotInfoSuppResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新机器人头像请求
type UpdateBotPicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotId int32  `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Photo []byte `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"` //(mtproto.TL_photo_layer105)
	Debug *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateBotPicRequest) Reset() {
	*x = UpdateBotPicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotPicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotPicRequest) ProtoMessage() {}

func (x *UpdateBotPicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotPicRequest.ProtoReflect.Descriptor instead.
func (*UpdateBotPicRequest) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{203}
}

func (x *UpdateBotPicRequest) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *UpdateBotPicRequest) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *UpdateBotPicRequest) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateBotPicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateBotPicResult) Reset() {
	*x = UpdateBotPicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBotPicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBotPicResult) ProtoMessage() {}

func (x *UpdateBotPicResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBotPicResult.ProtoReflect.Descriptor instead.
func (*UpdateBotPicResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{204}
}

func (x *UpdateBotPicResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 更新用户的username的请求
type UpdateuserNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户的ID
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`            //需要更新的用户名
	Debug    *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	KeyId    int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *UpdateuserNameReq) Reset() {
	*x = UpdateuserNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateuserNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateuserNameReq) ProtoMessage() {}

func (x *UpdateuserNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateuserNameReq.ProtoReflect.Descriptor instead.
func (*UpdateuserNameReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{205}
}

func (x *UpdateuserNameReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateuserNameReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UpdateuserNameReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *UpdateuserNameReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

// 更新用户的username的返回结果
type UpdateuserNameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                      ///用户的基本信息
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *UpdateuserNameResult) Reset() {
	*x = UpdateuserNameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateuserNameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateuserNameResult) ProtoMessage() {}

func (x *UpdateuserNameResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateuserNameResult.ProtoReflect.Descriptor instead.
func (*UpdateuserNameResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{206}
}

func (x *UpdateuserNameResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *UpdateuserNameResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 注册指定用户的请求
type RegisterUserInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     *UserInfo `protobuf:"bytes,1,opt,name=uinfo,proto3" json:"uinfo,omitempty"`
	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *RegisterUserInfoResult) Reset() {
	*x = RegisterUserInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserInfoResult) ProtoMessage() {}

func (x *RegisterUserInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserInfoResult.ProtoReflect.Descriptor instead.
func (*RegisterUserInfoResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{207}
}

func (x *RegisterUserInfoResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *RegisterUserInfoResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 删除账号的请求
type DeleteAccountByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //被删除账号的用户id
	DelId  int32  `protobuf:"varint,2,opt,name=del_id,json=delId,proto3" json:"del_id,omitempty"`    //删除者的Id
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DeleteAccountByIdReq) Reset() {
	*x = DeleteAccountByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountByIdReq) ProtoMessage() {}

func (x *DeleteAccountByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountByIdReq.ProtoReflect.Descriptor instead.
func (*DeleteAccountByIdReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{208}
}

func (x *DeleteAccountByIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteAccountByIdReq) GetDelId() int32 {
	if x != nil {
		return x.DelId
	}
	return 0
}

func (x *DeleteAccountByIdReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 删除账号的返回结果
type DelAccountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,1,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *DelAccountResult) Reset() {
	*x = DelAccountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAccountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAccountResult) ProtoMessage() {}

func (x *DelAccountResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAccountResult.ProtoReflect.Descriptor instead.
func (*DelAccountResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{209}
}

func (x *DelAccountResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 用户注册的请求结构
type SignUpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber    string `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"` //电话号码
	PhoneCodeHash  string `protobuf:"bytes,2,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode      string `protobuf:"bytes,3,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"` //验证码
	KeyId          int64  `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`        //用户的keyId(端的标识)
	FirstName      string `protobuf:"bytes,6,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName       string `protobuf:"bytes,7,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot          bool   `protobuf:"varint,8,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32  `protobuf:"varint,9,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool   `protobuf:"varint,10,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool   `protobuf:"varint,11,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	DcId           int32  `protobuf:"varint,12,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Debug          *Debug `protobuf:"bytes,13,opt,name=debug,proto3" json:"debug,omitempty"`
	CountryCode    string `protobuf:"bytes,14,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` // 国家码
	LocalPhone     string `protobuf:"bytes,15,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`    // 不带国家码的号码
}

func (x *SignUpReq) Reset() {
	*x = SignUpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpReq) ProtoMessage() {}

func (x *SignUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpReq.ProtoReflect.Descriptor instead.
func (*SignUpReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{210}
}

func (x *SignUpReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SignUpReq) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *SignUpReq) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

func (x *SignUpReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SignUpReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *SignUpReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *SignUpReq) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *SignUpReq) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *SignUpReq) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *SignUpReq) GetBotNoChats() bool {
	if x != nil {
		return x.BotNoChats
	}
	return false
}

func (x *SignUpReq) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

func (x *SignUpReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SignUpReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SignUpReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

type AuthSignUpResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     AuthSignUpResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=imapigateway.AuthSignUpResult_ResultCode" json:"code,omitempty"`
	UserInfo *UserInfo                   `protobuf:"bytes,2,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
}

func (x *AuthSignUpResult) Reset() {
	*x = AuthSignUpResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSignUpResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSignUpResult) ProtoMessage() {}

func (x *AuthSignUpResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSignUpResult.ProtoReflect.Descriptor instead.
func (*AuthSignUpResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{211}
}

func (x *AuthSignUpResult) GetCode() AuthSignUpResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return AuthSignUpResult_Success
}

func (x *AuthSignUpResult) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// getfull user的请求
type GetFullUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId     int32  `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`         //自己的用户Id
	UserId     int32  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 需要获取的用户的ID
	AccessHash int64  `protobuf:"varint,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"` //需要获取的用户的哈希值
	Debug      *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`            //日志记录相关的
}

func (x *GetFullUserReq) Reset() {
	*x = GetFullUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullUserReq) ProtoMessage() {}

func (x *GetFullUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullUserReq.ProtoReflect.Descriptor instead.
func (*GetFullUserReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{212}
}

func (x *GetFullUserReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetFullUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFullUserReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetFullUserReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// getfull user的请求
type GetFullUserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo               *UserInfo `protobuf:"bytes,1,opt,name=uinfo,proto3" json:"uinfo,omitempty"`                                                           //用户的基础信息
	Isblocked           bool      `protobuf:"varint,2,opt,name=isblocked,proto3" json:"isblocked,omitempty"`                                                  //此用户是否是自己的黑名单
	PhoneCallsPrivate   bool      `protobuf:"varint,3,opt,name=phone_calls_private,json=phoneCallsPrivate,proto3" json:"phone_calls_private,omitempty"`       //userfull需要
	PhoneCallsAvailable bool      `protobuf:"varint,4,opt,name=phone_calls_available,json=phoneCallsAvailable,proto3" json:"phone_calls_available,omitempty"` //userfull需要
	About               string    `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`                                                           //用户的个性签名
	CommonChat          int32     `protobuf:"varint,6,opt,name=common_chat,json=commonChat,proto3" json:"common_chat,omitempty"`                              //共同群的个数
	Extend              string    `protobuf:"bytes,7,opt,name=extend,proto3" json:"extend,omitempty"`                                                         //用户的扩展字段们 年龄，性别 {Age:1111, Sex: 1, Address: "china"}
	Errorcode           ReErrCode `protobuf:"varint,8,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`                      //返回错误码
}

func (x *GetFullUserResult) Reset() {
	*x = GetFullUserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullUserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullUserResult) ProtoMessage() {}

func (x *GetFullUserResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullUserResult.ProtoReflect.Descriptor instead.
func (*GetFullUserResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{213}
}

func (x *GetFullUserResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *GetFullUserResult) GetIsblocked() bool {
	if x != nil {
		return x.Isblocked
	}
	return false
}

func (x *GetFullUserResult) GetPhoneCallsPrivate() bool {
	if x != nil {
		return x.PhoneCallsPrivate
	}
	return false
}

func (x *GetFullUserResult) GetPhoneCallsAvailable() bool {
	if x != nil {
		return x.PhoneCallsAvailable
	}
	return false
}

func (x *GetFullUserResult) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *GetFullUserResult) GetCommonChat() int32 {
	if x != nil {
		return x.CommonChat
	}
	return 0
}

func (x *GetFullUserResult) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

func (x *GetFullUserResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

// 根据用户userName来获取用户基本信息
type GetUserByUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId   int32  `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Debug    *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserByUsername) Reset() {
	*x = GetUserByUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByUsername) ProtoMessage() {}

func (x *GetUserByUsername) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByUsername.ProtoReflect.Descriptor instead.
func (*GetUserByUsername) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{214}
}

func (x *GetUserByUsername) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetUserByUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetUserByUsername) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取群的完整信息
type ReqGetFullChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid int32  `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid int32  `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Debug  *Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetFullChat) Reset() {
	*x = ReqGetFullChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetFullChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetFullChat) ProtoMessage() {}

func (x *ReqGetFullChat) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetFullChat.ProtoReflect.Descriptor instead.
func (*ReqGetFullChat) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{215}
}

func (x *ReqGetFullChat) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqGetFullChat) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqGetFullChat) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetFullChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyGetFullChat) Reset() {
	*x = ReplyGetFullChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetFullChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetFullChat) ProtoMessage() {}

func (x *ReplyGetFullChat) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetFullChat.ProtoReflect.Descriptor instead.
func (*ReplyGetFullChat) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{216}
}

func (x *ReplyGetFullChat) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyGetFullChat) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 退出超级群
type ReqLeaveChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32  `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`                  //退出的超级群ID
	UserId    int32  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`                        // 退出的用户
	FromKeyid int64  `protobuf:"varint,3,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"` //退出用户的KEYID
	Debug     *Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqLeaveChannel) Reset() {
	*x = ReqLeaveChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLeaveChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLeaveChannel) ProtoMessage() {}

func (x *ReqLeaveChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLeaveChannel.ProtoReflect.Descriptor instead.
func (*ReqLeaveChannel) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{217}
}

func (x *ReqLeaveChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqLeaveChannel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqLeaveChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqLeaveChannel) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 发送媒体
type ReqSendMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid       int32    `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 发送方id
	Flags        int32    `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent       bool     `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool     `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool     `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         []byte   `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32    `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Media        []byte   `protobuf:"bytes,8,opt,name=media,proto3" json:"media,omitempty"`
	MultiMedia   [][]byte `protobuf:"bytes,9,rep,name=multi_media,json=multiMedia,proto3" json:"multi_media,omitempty"`
	RandomId     int64    `protobuf:"varint,10,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup  []byte   `protobuf:"bytes,11,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Newfileid    int64    `protobuf:"varint,12,opt,name=newfileid,proto3" json:"newfileid,omitempty"`
	FromkeyId    uint64   `protobuf:"varint,13,opt,name=fromkey_id,json=fromkeyId,proto3" json:"fromkey_id,omitempty"` // 发送方的key_id
	Chatmeber    []int32  `protobuf:"varint,14,rep,packed,name=chatmeber,proto3" json:"chatmeber,omitempty"`
	Debug        *Debug   `protobuf:"bytes,15,opt,name=debug,proto3" json:"debug,omitempty"`
	ViaBotId     int32    `protobuf:"varint,16,opt,name=via_bot_id,json=viaBotId,proto3" json:"via_bot_id,omitempty"` //via_bot_id
}

func (x *ReqSendMedia) Reset() {
	*x = ReqSendMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendMedia) ProtoMessage() {}

func (x *ReqSendMedia) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendMedia.ProtoReflect.Descriptor instead.
func (*ReqSendMedia) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{218}
}

func (x *ReqSendMedia) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqSendMedia) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqSendMedia) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *ReqSendMedia) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *ReqSendMedia) GetClearDraft() bool {
	if x != nil {
		return x.ClearDraft
	}
	return false
}

func (x *ReqSendMedia) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqSendMedia) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *ReqSendMedia) GetMedia() []byte {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *ReqSendMedia) GetMultiMedia() [][]byte {
	if x != nil {
		return x.MultiMedia
	}
	return nil
}

func (x *ReqSendMedia) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *ReqSendMedia) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *ReqSendMedia) GetNewfileid() int64 {
	if x != nil {
		return x.Newfileid
	}
	return 0
}

func (x *ReqSendMedia) GetFromkeyId() uint64 {
	if x != nil {
		return x.FromkeyId
	}
	return 0
}

func (x *ReqSendMedia) GetChatmeber() []int32 {
	if x != nil {
		return x.Chatmeber
	}
	return nil
}

func (x *ReqSendMedia) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqSendMedia) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

// 状态返回
type ReplyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
}

func (x *ReplyResult) Reset() {
	*x = ReplyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyResult) ProtoMessage() {}

func (x *ReplyResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyResult.ProtoReflect.Descriptor instead.
func (*ReplyResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{219}
}

func (x *ReplyResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyResult) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 编辑群名字
type ReqEditChatTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32  `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 用户id
	Chatid    int32  `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	FromKeyid uint64 `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChatTitle) Reset() {
	*x = ReqEditChatTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChatTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChatTitle) ProtoMessage() {}

func (x *ReqEditChatTitle) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChatTitle.ProtoReflect.Descriptor instead.
func (*ReqEditChatTitle) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{220}
}

func (x *ReqEditChatTitle) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqEditChatTitle) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqEditChatTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReqEditChatTitle) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqEditChatTitle) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyEditChatTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"` //1. 群不存在 2. 编辑失败
}

func (x *ReplyEditChatTitle) Reset() {
	*x = ReplyEditChatTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyEditChatTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyEditChatTitle) ProtoMessage() {}

func (x *ReplyEditChatTitle) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyEditChatTitle.ProtoReflect.Descriptor instead.
func (*ReplyEditChatTitle) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{221}
}

func (x *ReplyEditChatTitle) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyEditChatTitle) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 获取一个sticker下面的所有贴图信息的请求
type GetStickerSetPackDcInfosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //stickerSet 的id
	Debug *Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetStickerSetPackDcInfosReq) Reset() {
	*x = GetStickerSetPackDcInfosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetPackDcInfosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetPackDcInfosReq) ProtoMessage() {}

func (x *GetStickerSetPackDcInfosReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetPackDcInfosReq.ProtoReflect.Descriptor instead.
func (*GetStickerSetPackDcInfosReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{222}
}

func (x *GetStickerSetPackDcInfosReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetStickerSetPackDcInfosReq) GetDebug() *Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取一个sticker下面的所有贴图信息的返回
type GetStickerSetPackDcInfosResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StPDcInfo []*StickerPackDocumentInfo `protobuf:"bytes,1,rep,name=StPDcInfo,proto3" json:"StPDcInfo,omitempty"`
}

func (x *GetStickerSetPackDcInfosResult) Reset() {
	*x = GetStickerSetPackDcInfosResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerSetPackDcInfosResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerSetPackDcInfosResult) ProtoMessage() {}

func (x *GetStickerSetPackDcInfosResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerSetPackDcInfosResult.ProtoReflect.Descriptor instead.
func (*GetStickerSetPackDcInfosResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{223}
}

func (x *GetStickerSetPackDcInfosResult) GetStPDcInfo() []*StickerPackDocumentInfo {
	if x != nil {
		return x.StPDcInfo
	}
	return nil
}

// sticker集合里面具体内容
// 存储单个sticker内容请求
type StickerPackDocumentBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributesStikerSetId         int64  `protobuf:"varint,1,opt,name=attributes_stiker_set_id,json=attributesStikerSetId,proto3" json:"attributes_stiker_set_id,omitempty"`
	DocumentId                    uint64 `protobuf:"varint,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	AccessHash                    int64  `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	MimeType                      string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size                          int32  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Thumb                         string `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`
	DcId                          int32  `protobuf:"varint,7,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Date                          int32  `protobuf:"varint,8,opt,name=date,proto3" json:"date,omitempty"`
	AttributesImageSizeW          int32  `protobuf:"varint,9,opt,name=attributes_image_size_w,json=attributesImageSizeW,proto3" json:"attributes_image_size_w,omitempty"`
	AttributesImageSizeH          int32  `protobuf:"varint,10,opt,name=attributes_image_size_h,json=attributesImageSizeH,proto3" json:"attributes_image_size_h,omitempty"`
	AttributesStikerAlt           string `protobuf:"bytes,11,opt,name=attributes_stiker_alt,json=attributesStikerAlt,proto3" json:"attributes_stiker_alt,omitempty"`
	AttributesStikerSetAccessHash int64  `protobuf:"varint,12,opt,name=attributes_stiker_set_access_hash,json=attributesStikerSetAccessHash,proto3" json:"attributes_stiker_set_access_hash,omitempty"`
	AttributesFileName            string `protobuf:"bytes,13,opt,name=attributes_file_name,json=attributesFileName,proto3" json:"attributes_file_name,omitempty"`
}

func (x *StickerPackDocumentBase) Reset() {
	*x = StickerPackDocumentBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerPackDocumentBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerPackDocumentBase) ProtoMessage() {}

func (x *StickerPackDocumentBase) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerPackDocumentBase.ProtoReflect.Descriptor instead.
func (*StickerPackDocumentBase) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{224}
}

func (x *StickerPackDocumentBase) GetAttributesStikerSetId() int64 {
	if x != nil {
		return x.AttributesStikerSetId
	}
	return 0
}

func (x *StickerPackDocumentBase) GetDocumentId() uint64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *StickerPackDocumentBase) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *StickerPackDocumentBase) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *StickerPackDocumentBase) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *StickerPackDocumentBase) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

func (x *StickerPackDocumentBase) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesImageSizeW() int32 {
	if x != nil {
		return x.AttributesImageSizeW
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesImageSizeH() int32 {
	if x != nil {
		return x.AttributesImageSizeH
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesStikerAlt() string {
	if x != nil {
		return x.AttributesStikerAlt
	}
	return ""
}

func (x *StickerPackDocumentBase) GetAttributesStikerSetAccessHash() int64 {
	if x != nil {
		return x.AttributesStikerSetAccessHash
	}
	return 0
}

func (x *StickerPackDocumentBase) GetAttributesFileName() string {
	if x != nil {
		return x.AttributesFileName
	}
	return ""
}

type StickerPackDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InfoBase *StickerPackDocumentBase `protobuf:"bytes,2,opt,name=infoBase,proto3" json:"infoBase,omitempty"`
}

func (x *StickerPackDocumentInfo) Reset() {
	*x = StickerPackDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerPackDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerPackDocumentInfo) ProtoMessage() {}

func (x *StickerPackDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerPackDocumentInfo.ProtoReflect.Descriptor instead.
func (*StickerPackDocumentInfo) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{225}
}

func (x *StickerPackDocumentInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StickerPackDocumentInfo) GetInfoBase() *StickerPackDocumentBase {
	if x != nil {
		return x.InfoBase
	}
	return nil
}

type GetUserInfoByIdArrResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo     []*UserInfo `protobuf:"bytes,1,rep,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                      ///用户的基本信息
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetUserInfoByIdArrResult) Reset() {
	*x = GetUserInfoByIdArrResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoByIdArrResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoByIdArrResult) ProtoMessage() {}

func (x *GetUserInfoByIdArrResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoByIdArrResult.ProtoReflect.Descriptor instead.
func (*GetUserInfoByIdArrResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{226}
}

func (x *GetUserInfoByIdArrResult) GetUinfo() []*UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *GetUserInfoByIdArrResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type SetBotVerifiedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	Verified bool  `protobuf:"varint,2,opt,name=verified,proto3" json:"verified,omitempty"`           // 是否是官方
}

func (x *SetBotVerifiedReq) Reset() {
	*x = SetBotVerifiedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBotVerifiedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBotVerifiedReq) ProtoMessage() {}

func (x *SetBotVerifiedReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBotVerifiedReq.ProtoReflect.Descriptor instead.
func (*SetBotVerifiedReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{227}
}

func (x *SetBotVerifiedReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetBotVerifiedReq) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type SetBotVerifiedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode ReErrCode `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *SetBotVerifiedReply) Reset() {
	*x = SetBotVerifiedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBotVerifiedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBotVerifiedReply) ProtoMessage() {}

func (x *SetBotVerifiedReply) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBotVerifiedReply.ProtoReflect.Descriptor instead.
func (*SetBotVerifiedReply) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{228}
}

func (x *SetBotVerifiedReply) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type ContactsGetCommonContactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []int32 `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *ContactsGetCommonContactsReq) Reset() {
	*x = ContactsGetCommonContactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGetCommonContactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGetCommonContactsReq) ProtoMessage() {}

func (x *ContactsGetCommonContactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGetCommonContactsReq.ProtoReflect.Descriptor instead.
func (*ContactsGetCommonContactsReq) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{229}
}

func (x *ContactsGetCommonContactsReq) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type ContactsGetCommonContactsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfos []*UserInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"`
	Errorcode ReErrCode   `protobuf:"varint,2,opt,name=Errorcode,proto3,enum=imapigateway.ReErrCode" json:"Errorcode,omitempty"`
}

func (x *ContactsGetCommonContactsResult) Reset() {
	*x = ContactsGetCommonContactsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imapigateway_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsGetCommonContactsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsGetCommonContactsResult) ProtoMessage() {}

func (x *ContactsGetCommonContactsResult) ProtoReflect() protoreflect.Message {
	mi := &file_imapigateway_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsGetCommonContactsResult.ProtoReflect.Descriptor instead.
func (*ContactsGetCommonContactsResult) Descriptor() ([]byte, []int) {
	return file_imapigateway_proto_rawDescGZIP(), []int{230}
}

func (x *ContactsGetCommonContactsResult) GetUserInfos() []*UserInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

func (x *ContactsGetCommonContactsResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

var File_imapigateway_proto protoreflect.FileDescriptor

var file_imapigateway_proto_rawDesc = []byte{
	0x0a, 0x12, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x36, 0x0a, 0x05, 0x52, 0x65, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x05, 0x52, 0x65, 0x74, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x0c,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x6b, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4c, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x22, 0x6c, 0x0a, 0x0c, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70,
	0x12, 0x3e, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x7b,
	0x0a, 0x0b, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x63, 0x0a, 0x0b, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x07, 0x52, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x52,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64,
	0x22, 0x65, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c,
	0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x3e,
	0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x89, 0x02, 0x0a,
	0x0f, 0x45, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x4c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4c, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x0f, 0x45, 0x64, 0x69, 0x74,
	0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x09, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x11, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x09, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x07, 0x52,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x64, 0x22, 0x47, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x69, 0x0a, 0x0b, 0x4c,
	0x69, 0x76, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2a, 0x0a, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x4b, 0x69, 0x63, 0x6b, 0x46, 0x72,
	0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x6f,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x42, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x71, 0x0a, 0x10, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x67,
	0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x63, 0x63, 0x70, 0x75, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x63, 0x63, 0x70, 0x75, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x9e, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xe3, 0x03, 0x0a, 0x13, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76,
	0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x69, 0x66,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x22, 0xcc,
	0x02, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a,
	0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x13, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x8d, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e,
	0x65, 0x51, 0x75, 0x69, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x69, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x69,
	0x65, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xb0, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0xa3, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x73, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x77, 0x0a, 0x18, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x53, 0x65, 0x6c, 0x66,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49,
	0x73, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x64, 0x0a, 0x0f, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x30, 0x0a, 0x10, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x0a,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f,
	0x72, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x6f,
	0x72, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x73, 0x67,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x73, 0x67,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x73, 0x67, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x50, 0x75, 0x73, 0x68, 0x22, 0xcc, 0x01, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x32, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xd1, 0x02, 0x0a, 0x15, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x79, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x0c, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x79, 0x73, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x30,
	0x0a, 0x08, 0x46, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x33, 0x0a, 0x0b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xcb, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x53, 0x79, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x34,
	0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x22, 0x8a, 0x01,
	0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x77, 0x0a, 0x06, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0xa4, 0x03, 0x0a, 0x10, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x13,
	0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x6f, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x0f, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x4c, 0x0a,
	0x12, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x6d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x12, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x49, 0x0a,
	0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x4d,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2c,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0xc4, 0x02, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53,
	0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x74, 0x73, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x68, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc6, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72,
	0x12, 0x38, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x39, 0x0a, 0x0b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x69, 0x0a, 0x10,
	0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0c, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0xc9, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x6c, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x69, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x49,
	0x44, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x34, 0x0a,
	0x1e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x93, 0x01, 0x0a, 0x0d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x52,
	0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x71, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x52, 0x65, 0x71, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x0e, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x65, 0x73, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x52, 0x65, 0x73, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x53, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x73, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x22, 0x35, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22,
	0x4b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2c, 0x0a, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x72, 0x6f,
	0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x52, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x64, 0x70, 0x52, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x52, 0x64, 0x70, 0x52, 0x73, 0x70, 0x22, 0x57, 0x0a, 0x0d, 0x51, 0x72, 0x79, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x64, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f,
	0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x72,
	0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x65,
	0x71, 0x22, 0x6f, 0x0a, 0x0d, 0x52, 0x63, 0x76, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x64,
	0x70, 0x52, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52, 0x64, 0x70, 0x52,
	0x73, 0x70, 0x22, 0x4b, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x22,
	0xc0, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x44, 0x50, 0x52, 0x65, 0x71, 0x12, 0x29,
	0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x71, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x52, 0x65, 0x71, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x44, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x52, 0x65, 0x73, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x79,
	0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x44, 0x50, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x71, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x52, 0x65, 0x71, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x0c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73,
	0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x52, 0x65,
	0x73, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7b, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x52, 0x44, 0x50, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x71, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x44,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x70, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x52, 0x65, 0x73, 0x70, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x50, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x4c, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4c, 0x0a, 0x13,
	0x42, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x56, 0x0a, 0x1f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x48, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x53, 0x0a, 0x0e,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x3e, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xc6, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4d,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x57, 0x0a, 0x16, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x46, 0x75, 0x6c, 0x6c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4b, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x43, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xff, 0x03,
	0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42,
	0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x62, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f,
	0x74, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x63,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x64, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x77, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x53, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x22,
	0x94, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xe3, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x0c, 0x0a, 0x01, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xde, 0x01, 0x0a,
	0x1d, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xcb, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xab, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x7c, 0x0a, 0x10, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x44,
	0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x0b, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x0b, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x90,
	0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x5b, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x68,
	0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7a, 0x0a, 0x1f, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x5b, 0x0a, 0x22, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f,
	0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x93, 0x02, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x34, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x89, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x52, 0x04, 0x73, 0x65, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x1c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x58,
	0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x69, 0x73, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0xa0, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x6f,
	0x74, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x6f,
	0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x44, 0x0a, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x77, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x52, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44,
	0x63, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x70, 0x61, 0x63,
	0x6b, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x61, 0x0a, 0x18,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x44, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xdc, 0x02, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x62,
	0x0a, 0x19, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x51, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x53, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x63, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x65, 0x62, 0x70, 0x22,
	0xcd, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x44, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x5a, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x44, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x44, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x11, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0xe0, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x4c, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3f, 0x0a, 0x0f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x0e,
	0x52, 0x65, 0x71, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x40, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x83, 0x02, 0x0a, 0x0e, 0x52, 0x65,
	0x71, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x62, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x47, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x71,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x49, 0x73, 0x43, 0x68, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49,
	0x73, 0x43, 0x68, 0x61, 0x74, 0x22, 0x57, 0x0a, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa9,
	0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f,
	0x6d, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x54, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3b, 0x0a, 0x0b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x39, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x64, 0x69, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x74, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x61, 0x0a, 0x11, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x13,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc8, 0x02, 0x0a,
	0x11, 0x52, 0x65, 0x71, 0x42, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x74,
	0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75,
	0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x73, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x47, 0x0a, 0x10,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x43, 0x0a,
	0x13, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x67, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x22, 0x68, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xe6, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x0a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x22,
	0x84, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x53, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x6f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x39, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x85, 0x01,
	0x0a, 0x0a, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3c, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x72, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x75, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x85,
	0x01, 0x0a, 0x24, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x80, 0x01, 0x0a, 0x26, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a, 0x1a, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x76, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x47, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x45, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x30, 0x0a, 0x12, 0x4d, 0x73,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0x57, 0x0a, 0x13,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x66, 0x73, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x75, 0x73, 0x66, 0x73, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x62, 0x66,
	0x73, 0x73, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x62, 0x66, 0x73, 0x73,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x64, 0x73, 0x73, 0x6c, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x65, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x64, 0x35, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x45, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x0f, 0x4d,
	0x73, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x92, 0x01, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x50, 0x61,
	0x72, 0x61, 0x31, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x31, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x61, 0x32, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x32,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x52, 0x70, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x31, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x46, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x77, 0x0a, 0x12, 0x4d, 0x73, 0x67, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x22, 0x5e, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x43, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc1, 0x01, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x52,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x31, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x31, 0x12,
	0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x32, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x32, 0x22, 0x26, 0x0a, 0x12, 0x4d, 0x73,
	0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66,
	0x69, 0x64, 0x22, 0x5f, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4f, 0x62, 0x6a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x70,
	0x61, 0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62,
	0x6a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x52, 0x04, 0x70,
	0x61, 0x72, 0x61, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x45, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x46, 0x0a, 0x11, 0x4d, 0x73, 0x67,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x5e, 0x0a, 0x12, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x7c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22,
	0x8d, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x56, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x46, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x3a, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2a,
	0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x0b, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x2e, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x22, 0xba, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc4, 0x01,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43,
	0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x6e, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x32, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a,
	0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62,
	0x6f, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa9, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x64, 0x0a, 0x18, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x88, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x47, 0x65,
	0x74, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xc6, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x6c,
	0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44,
	0x6c, 0x6f, 0x67, 0x22, 0xee, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x07, 0x6e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6e,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c,
	0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x76, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0xc2, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x7e, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2c, 0x0a, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x50, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x70, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x22, 0x7b, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x55, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x7d, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x75, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x71,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x49, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd2, 0x03, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x62,
	0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x13, 0x0a,
	0x05, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x63,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x22, 0xb4, 0x02, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x70,
	0x74, 0x63, 0x68, 0x61, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x04, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x57, 0x61, 0x69, 0x74, 0x10, 0x06,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x07, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x6c, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c,
	0x66, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc9, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x05,
	0x75, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x73, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6b, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x40, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xeb, 0x03, 0x0a, 0x0c, 0x52,
	0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61,
	0x72, 0x6b, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x66, 0x69, 0x6c, 0x65, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x66, 0x69, 0x6c, 0x65,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x76, 0x69,
	0x61, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x76, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x42, 0x0a, 0x12, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x58,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x65, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x53, 0x74,
	0x50, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x53, 0x74, 0x50, 0x44, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xa2, 0x04, 0x0a, 0x17, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x69, 0x6b, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x74, 0x69, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x13, 0x0a,
	0x05, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x63,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x57, 0x12, 0x35, 0x0a,
	0x17, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x48, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x5f, 0x73, 0x74, 0x69, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53,
	0x74, 0x69, 0x6b, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x69, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53,
	0x74, 0x69, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x17, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x61,
	0x73, 0x65, 0x22, 0x7f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c,
	0x0a, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x48, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x4c, 0x0a,
	0x13, 0x53, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x39, 0x0a, 0x1c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x2a, 0xaa, 0x01, 0x0a, 0x12, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x79, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x91, 0xbf, 0x05, 0x12, 0x11, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x92, 0xbf, 0x05, 0x12, 0x11, 0x0a, 0x0b, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x93, 0xbf, 0x05, 0x12, 0x11, 0x0a, 0x0b, 0x4c, 0x69, 0x76,
	0x65, 0x4f, 0x6e, 0x47, 0x6f, 0x69, 0x6e, 0x67, 0x10, 0x94, 0xbf, 0x05, 0x12, 0x11, 0x0a, 0x0b,
	0x48, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x95, 0xbf, 0x05, 0x12,
	0x11, 0x0a, 0x0b, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x10, 0x96,
	0xbf, 0x05, 0x12, 0x11, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x10, 0x97, 0xbf, 0x05, 0x2a, 0x49, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5a, 0x65, 0x72,
	0x6f, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x10, 0x03,
	0x2a, 0x50, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x46, 0x49, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x46, 0x49, 0x5f, 0x49, 0x4d, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x46,
	0x49, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x5f, 0x4d, 0x61, 0x6c, 0x6c, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x46, 0x49, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x70, 0x69,
	0x10, 0x03, 0x2a, 0x32, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x2a, 0x38, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x4f, 0x6b, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x91, 0x4e,
	0x32, 0xca, 0x2b, 0x0a, 0x11, 0x41, 0x70, 0x69, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x21,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x07, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x18,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x71, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x1a, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x28, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x1a, 0x2a, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x75,
	0x6c, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x75,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43,
	0x68, 0x61, 0x74, 0x73, 0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43,
	0x68, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x2d, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x42, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10, 0x45, 0x64, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71,
	0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x1a, 0x23, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x1a, 0x23,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62,
	0x6f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x15, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d,
	0x73, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x44, 0x50, 0x12, 0x18, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x44, 0x50,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x44, 0x50, 0x12, 0x19, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x44, 0x50, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x44, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x52, 0x44, 0x50, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x44, 0x50, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x20, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x52, 0x63, 0x76, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x51, 0x72,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x64, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x12, 0x21, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x6c, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x2a, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x1a, 0x2c,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x7b,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12,
	0x32, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x1a, 0x34, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e, 0x53,
	0x65, 0x74, 0x42, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1f, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x74,
	0x42, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x65,
	0x74, 0x42, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x55, 0x75, 0x69, 0x64, 0x1a, 0x29, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x55, 0x75, 0x69,
	0x64, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x2a, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x1e,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x74, 0x73, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x73, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x79, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x23, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x79, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x79, 0x73,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0c, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1d,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x63, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x53, 0x65, 0x6c, 0x66,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x73, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x41, 0x72, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x41, 0x72,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x11,
	0x45, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x69, 0x65,
	0x74, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65,
	0x51, 0x75, 0x69, 0x65, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x42,
	0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71,
	0x45, 0x64, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x79, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70,
	0x12, 0x19, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0c, 0x45, 0x64, 0x69, 0x74,
	0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x6e, 0x74, 0x12, 0x21, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x43, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x4b, 0x69,
	0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x2e,
	0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x71,
	0x4b, 0x69, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a,
	0x1e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x00, 0x12, 0x5a, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x08, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x75, 0x73, 0x68, 0x12, 0x19, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x75, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x1e, 0x5a,
	0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x69, 0x6d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_imapigateway_proto_rawDescOnce sync.Once
	file_imapigateway_proto_rawDescData = file_imapigateway_proto_rawDesc
)

func file_imapigateway_proto_rawDescGZIP() []byte {
	file_imapigateway_proto_rawDescOnce.Do(func() {
		file_imapigateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_imapigateway_proto_rawDescData)
	})
	return file_imapigateway_proto_rawDescData
}

var file_imapigateway_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_imapigateway_proto_msgTypes = make([]protoimpl.MessageInfo, 231)
var file_imapigateway_proto_goTypes = []interface{}{
	(GroupLiveReplyCode)(0),                        // 0: imapigateway.GroupLiveReplyCode
	(ChatType)(0),                                  // 1: imapigateway.ChatType
	(MsgFromID)(0),                                 // 2: imapigateway.MsgFromID
	(StatusCode)(0),                                // 3: imapigateway.StatusCode
	(ErrorCode)(0),                                 // 4: imapigateway.ErrorCode
	(CheckIsMuteContactResult_ResultCode)(0),       // 5: imapigateway.CheckIsMuteContactResult.ResultCode
	(AuthSignUpResult_ResultCode)(0),               // 6: imapigateway.AuthSignUpResult.ResultCode
	(*GetGroupUserIdsReq)(nil),                     // 7: imapigateway.GetGroupUserIdsReq
	(*GetGroupUserIdsRsp)(nil),                     // 8: imapigateway.GetGroupUserIdsRsp
	(*LiveStartReq)(nil),                           // 9: imapigateway.LiveStartReq
	(*LiveStartRsp)(nil),                           // 10: imapigateway.LiveStartRsp
	(*LiveStopReq)(nil),                            // 11: imapigateway.LiveStopReq
	(*LiveStopRsp)(nil),                            // 12: imapigateway.LiveStopRsp
	(*GetLiveInviteUrlReq)(nil),                    // 13: imapigateway.GetLiveInviteUrlReq
	(*GetLiveInviteUrlRsp)(nil),                    // 14: imapigateway.GetLiveInviteUrlRsp
	(*EditLiveInfoReq)(nil),                        // 15: imapigateway.EditLiveInfoReq
	(*EditLiveInfoRsp)(nil),                        // 16: imapigateway.EditLiveInfoRsp
	(*GroupLiveCheckReq)(nil),                      // 17: imapigateway.GroupLiveCheckReq
	(*GroupLiveCheckRsp)(nil),                      // 18: imapigateway.GroupLiveCheckRsp
	(*GetLiveInviteCntReq)(nil),                    // 19: imapigateway.GetLiveInviteCntReq
	(*GetLiveInviteCntRsp)(nil),                    // 20: imapigateway.GetLiveInviteCntRsp
	(*CheckUserInGroupReq)(nil),                    // 21: imapigateway.CheckUserInGroupReq
	(*CheckUserInGroupRsp)(nil),                    // 22: imapigateway.CheckUserInGroupRsp
	(*LivePushReq)(nil),                            // 23: imapigateway.LivePushReq
	(*LivePushResult)(nil),                         // 24: imapigateway.LivePushResult
	(*ReqKickFromChannel)(nil),                     // 25: imapigateway.ReqKickFromChannel
	(*CheckUserNameReq)(nil),                       // 26: imapigateway.CheckUserNameReq
	(*CheckUserNameResp)(nil),                      // 27: imapigateway.CheckUserNameResp
	(*ReqSendCodeMsg)(nil),                         // 28: imapigateway.ReqSendCodeMsg
	(*ChannelBannedRights)(nil),                    // 29: imapigateway.ChannelBannedRights
	(*ReqEditBanChannelUser)(nil),                  // 30: imapigateway.ReqEditBanChannelUser
	(*ReqEditEveryoneQuiet)(nil),                   // 31: imapigateway.ReqEditEveryoneQuiet
	(*GetChannelUserInfoReq)(nil),                  // 32: imapigateway.GetChannelUserInfoReq
	(*GetChannelUserInfoResp)(nil),                 // 33: imapigateway.GetChannelUserInfoResp
	(*CheckIsSelfContactReq)(nil),                  // 34: imapigateway.CheckIsSelfContactReq
	(*CheckIsSelfContactResult)(nil),               // 35: imapigateway.CheckIsSelfContactResult
	(*MomentFollowReq)(nil),                        // 36: imapigateway.MomentFollowReq
	(*MomentFollowResp)(nil),                       // 37: imapigateway.MomentFollowResp
	(*MomentData)(nil),                             // 38: imapigateway.MomentData
	(*SysNotifyData)(nil),                          // 39: imapigateway.SysNotifyData
	(*NotifyMedia)(nil),                            // 40: imapigateway.NotifyMedia
	(*NotifyText)(nil),                             // 41: imapigateway.NotifyText
	(*SendMediaSysNotifyReq)(nil),                  // 42: imapigateway.SendMediaSysNotifyReq
	(*FailUser)(nil),                               // 43: imapigateway.FailUser
	(*SucceedUser)(nil),                            // 44: imapigateway.SucceedUser
	(*SendMediaSysNotifyResult)(nil),               // 45: imapigateway.SendMediaSysNotifyResult
	(*SearchUserByNicknameReq)(nil),                // 46: imapigateway.SearchUserByNicknameReq
	(*SearchUserByNicknameResult)(nil),             // 47: imapigateway.SearchUserByNicknameResult
	(*Entity)(nil),                                 // 48: imapigateway.Entity
	(*MomentNotifyData)(nil),                       // 49: imapigateway.MomentNotifyData
	(*MomentNotifyReq)(nil),                        // 50: imapigateway.MomentNotifyReq
	(*MomentNotifyResult)(nil),                     // 51: imapigateway.MomentNotifyResult
	(*CheckIsMuteContactReq)(nil),                  // 52: imapigateway.CheckIsMuteContactReq
	(*CheckIsMuteContactResult)(nil),               // 53: imapigateway.CheckIsMuteContactResult
	(*ContactInfo)(nil),                            // 54: imapigateway.contactInfo
	(*ContatsGetContactsReq)(nil),                  // 55: imapigateway.ContatsGetContactsReq
	(*ContatsGetContactsResult)(nil),               // 56: imapigateway.ContatsGetContactsResult
	(*MomentState)(nil),                            // 57: imapigateway.MomentState
	(*ReqUpdateMoments)(nil),                       // 58: imapigateway.ReqUpdateMoments
	(*ResUpdateMoments)(nil),                       // 59: imapigateway.ResUpdateMoments
	(*ReqIntegralUniversalBusiness)(nil),           // 60: imapigateway.ReqIntegralUniversalBusiness
	(*ReplyIntegralUniversalBusiness)(nil),         // 61: imapigateway.ReplyIntegralUniversalBusiness
	(*OtherTransReq)(nil),                          // 62: imapigateway.OtherTransReq
	(*OtherTransResp)(nil),                         // 63: imapigateway.OtherTransResp
	(*SetUserDetailReq)(nil),                       // 64: imapigateway.SetUserDetailReq
	(*SetUserDetailResult)(nil),                    // 65: imapigateway.SetUserDetailResult
	(*GetUserByUsernameReq)(nil),                   // 66: imapigateway.GetUserByUsernameReq
	(*GetUserInfoResult)(nil),                      // 67: imapigateway.GetUserInfoResult
	(*SendGameRedReq)(nil),                         // 68: imapigateway.SendGameRedReq
	(*QryGameRdpReq)(nil),                          // 69: imapigateway.QryGameRdpReq
	(*RcvGameRedReq)(nil),                          // 70: imapigateway.RcvGameRedReq
	(*GameRedResp)(nil),                            // 71: imapigateway.GameRedResp
	(*SendRDPReq)(nil),                             // 72: imapigateway.SendRDPReq
	(*SendRDPResp)(nil),                            // 73: imapigateway.SendRDPResp
	(*CheckRDPReq)(nil),                            // 74: imapigateway.CheckRDPReq
	(*CheckRDPResp)(nil),                           // 75: imapigateway.CheckRDPResp
	(*ReceiveRDPReq)(nil),                          // 76: imapigateway.ReceiveRDPReq
	(*ReceiveRDPResp)(nil),                         // 77: imapigateway.ReceiveRDPResp
	(*ReplyEditChannelAbout)(nil),                  // 78: imapigateway.ReplyEditChannelAbout
	(*ReplyEditChannelTitle)(nil),                  // 79: imapigateway.ReplyEditChannelTitle
	(*BotUpdateInfo)(nil),                          // 80: imapigateway.BotUpdateInfo
	(*BotUpdateInfoResult)(nil),                    // 81: imapigateway.BotUpdateInfoResult
	(*ReplyUpdatePinnedChannelMessage)(nil),        // 82: imapigateway.ReplyUpdatePinnedChannelMessage
	(*ReplyLeaveChannel)(nil),                      // 83: imapigateway.ReplyLeaveChannel
	(*ReqGetAllChats)(nil),                         // 84: imapigateway.ReqGetAllChats
	(*ReplyGetAllChats)(nil),                       // 85: imapigateway.ReplyGetAllChats
	(*ReqGetchannelDifference)(nil),                // 86: imapigateway.ReqGetchannelDifference
	(*ReplyChannelDiffCommon)(nil),                 // 87: imapigateway.ReplyChannelDiffCommon
	(*ReqFullchannel)(nil),                         // 88: imapigateway.ReqFullchannel
	(*ReplyFullChannel)(nil),                       // 89: imapigateway.ReplyFullChannel
	(*ReqDeleteMessages)(nil),                      // 90: imapigateway.ReqDeleteMessages
	(*ReplyDeleteMessages)(nil),                    // 91: imapigateway.ReplyDeleteMessages
	(*RegisterUserInfoReq)(nil),                    // 92: imapigateway.RegisterUserInfoReq
	(*ReqGetFullChannel)(nil),                      // 93: imapigateway.ReqGetFullChannel
	(*ReqGetParticipants)(nil),                     // 94: imapigateway.ReqGetParticipants
	(*ReqUpdatePinnedChannelMessage)(nil),          // 95: imapigateway.ReqUpdatePinnedChannelMessage
	(*ReqEditChannelAbout)(nil),                    // 96: imapigateway.ReqEditChannelAbout
	(*ReqEditChannelTitle)(nil),                    // 97: imapigateway.ReqEditChannelTitle
	(*ReplyChannelData)(nil),                       // 98: imapigateway.ReplyChannelData
	(*ReqDelManualBlockList)(nil),                  // 99: imapigateway.ReqDelManualBlockList
	(*ReqSetManualBlockList)(nil),                  // 100: imapigateway.ReqSetManualBlockList
	(*BlockUser)(nil),                              // 101: imapigateway.BlockUser
	(*ManualBlockReplyData)(nil),                   // 102: imapigateway.ManualBlockReplyData
	(*StoreShopStickerSetDocumentsReq)(nil),        // 103: imapigateway.StoreShopStickerSetDocumentsReq
	(*StoreShopStickerSetDocumentsResult)(nil),     // 104: imapigateway.StoreShopStickerSetDocumentsResult
	(*AuthorStickerSet)(nil),                       // 105: imapigateway.AuthorStickerSet
	(*GetAuthorAllStickerSetReq)(nil),              // 106: imapigateway.GetAuthorAllStickerSetReq
	(*GetAuthorAllStickerSetResult)(nil),           // 107: imapigateway.GetAuthorAllStickerSetResult
	(*DeleteStickerPackDocumentReq)(nil),           // 108: imapigateway.DeleteStickerPackDocumentReq
	(*DeleteStickerPackDocumentResult)(nil),        // 109: imapigateway.DeleteStickerPackDocumentResult
	(*GetStickerSetInfoReq)(nil),                   // 110: imapigateway.GetStickerSetInfoReq
	(*StickerSetInfo)(nil),                         // 111: imapigateway.StickerSetInfo
	(*GetStickerSetInfoResult)(nil),                // 112: imapigateway.GetStickerSetInfoResult
	(*DeleteStickerSetReq)(nil),                    // 113: imapigateway.DeleteStickerSetReq
	(*DeleteStickerSetResult)(nil),                 // 114: imapigateway.DeleteStickerSetResult
	(*StoreUserStickerSetReq)(nil),                 // 115: imapigateway.StoreUserStickerSetReq
	(*StoreUserStickerSetResult)(nil),              // 116: imapigateway.StoreUserStickerSetResult
	(*StoreStickerPackDcReq)(nil),                  // 117: imapigateway.StoreStickerPackDcReq
	(*StoreStickerPackDcResult)(nil),               // 118: imapigateway.StoreStickerPackDcResult
	(*StoreShopStickerSetReq)(nil),                 // 119: imapigateway.StoreShopStickerSetReq
	(*StoreShopStickerSetResult)(nil),              // 120: imapigateway.StoreShopStickerSetResult
	(*ResizeRequest)(nil),                          // 121: imapigateway.ResizeRequest
	(*ResizeReply)(nil),                            // 122: imapigateway.ResizeReply
	(*ConstraintRequest)(nil),                      // 123: imapigateway.ConstraintRequest
	(*ConstraintReply)(nil),                        // 124: imapigateway.ConstraintReply
	(*CompressImageRequest)(nil),                   // 125: imapigateway.CompressImageRequest
	(*CompressImageReply)(nil),                     // 126: imapigateway.CompressImageReply
	(*VideoPreviewRequest)(nil),                    // 127: imapigateway.VideoPreviewRequest
	(*VideoPreviewReply)(nil),                      // 128: imapigateway.VideoPreviewReply
	(*AudioPreviewRequest)(nil),                    // 129: imapigateway.AudioPreviewRequest
	(*AudioPreviewReply)(nil),                      // 130: imapigateway.AudioPreviewReply
	(*ReqParticipants)(nil),                        // 131: imapigateway.ReqParticipants
	(*ReplyParticipants)(nil),                      // 132: imapigateway.ReplyParticipants
	(*ReqCreateChat)(nil),                          // 133: imapigateway.ReqCreateChat
	(*ReplyCreateChat)(nil),                        // 134: imapigateway.ReplyCreateChat
	(*ReqMigrateChat)(nil),                         // 135: imapigateway.ReqMigrateChat
	(*ReplyMigrateChat)(nil),                       // 136: imapigateway.ReplyMigrateChat
	(*ReqJoinChannel)(nil),                         // 137: imapigateway.ReqJoinChannel
	(*ReplyJoinChannel)(nil),                       // 138: imapigateway.ReplyJoinChannel
	(*ReqChangeGroupAndChannelCrator)(nil),         // 139: imapigateway.ReqChangeGroupAndChannelCrator
	(*ReplyChangeGroupAndChannelCrator)(nil),       // 140: imapigateway.ReplyChangeGroupAndChannelCrator
	(*ReqBotCallMessageMedia)(nil),                 // 141: imapigateway.ReqBotCallMessageMedia
	(*RequestDialog)(nil),                          // 142: imapigateway.RequestDialog
	(*ReplyDialog)(nil),                            // 143: imapigateway.ReplyDialog
	(*UserScore)(nil),                              // 144: imapigateway.UserScore
	(*ReqSetGameScore)(nil),                        // 145: imapigateway.ReqSetGameScore
	(*ReplySetGameScore)(nil),                      // 146: imapigateway.ReplySetGameScore
	(*ReplyBanChannelUser)(nil),                    // 147: imapigateway.ReplyBanChannelUser
	(*ReqBanChannelUser)(nil),                      // 148: imapigateway.ReqBanChannelUser
	(*ReqGetChannels)(nil),                         // 149: imapigateway.ReqGetChannels
	(*ReplyGetChannels)(nil),                       // 150: imapigateway.ReplyGetChannels
	(*ReqDeleteChatUser)(nil),                      // 151: imapigateway.ReqDeleteChatUser
	(*ReplyDeleteChatUser)(nil),                    // 152: imapigateway.ReplyDeleteChatUser
	(*ChannelInactiveUser)(nil),                    // 153: imapigateway.ChannelInactiveUser
	(*GetChannelInactiveUsersReq)(nil),             // 154: imapigateway.GetChannelInactiveUsersReq
	(*GetChannelInactiveUsersResult)(nil),          // 155: imapigateway.GetChannelInactiveUsersResult
	(*ReqBotInlineCall)(nil),                       // 156: imapigateway.ReqBotInlineCall
	(*ReplyBotInlineCall)(nil),                     // 157: imapigateway.ReplyBotInlineCall
	(*InlineCall)(nil),                             // 158: imapigateway.InlineCall
	(*ReqSendUserMsg)(nil),                         // 159: imapigateway.ReqSendUserMsg
	(*ReplyBool)(nil),                              // 160: imapigateway.ReplyBool
	(*ReqBotCall)(nil),                             // 161: imapigateway.ReqBotCall
	(*ReplyBotCall)(nil),                           // 162: imapigateway.ReplyBotCall
	(*ReqGetMessageByUserIdUuid)(nil),              // 163: imapigateway.ReqGetMessageByUserIdUuid
	(*ReplyGetMessageByUserIdUuid)(nil),            // 164: imapigateway.ReplyGetMessageByUserIdUuid
	(*ReqGetChannelMessageByChannelIdMsgId)(nil),   // 165: imapigateway.ReqGetChannelMessageByChannelIdMsgId
	(*ReplyGetChannelMessageByChannelIdMsgId)(nil), // 166: imapigateway.ReplyGetChannelMessageByChannelIdMsgId
	(*ReqGetMessageByUserIdMsgId)(nil),             // 167: imapigateway.ReqGetMessageByUserIdMsgId
	(*ReplyGetMessageByUserIdMsgId)(nil),           // 168: imapigateway.ReplyGetMessageByUserIdMsgId
	(*MsgFileDescReq)(nil),                         // 169: imapigateway.MsgFileDescReq
	(*MsgFileDescResp)(nil),                        // 170: imapigateway.MsgFileDescResp
	(*MsgServiceLimitReq)(nil),                     // 171: imapigateway.MsgServiceLimitReq
	(*MsgServiceLimitResp)(nil),                    // 172: imapigateway.MsgServiceLimitResp
	(*MsgGetFidReq)(nil),                           // 173: imapigateway.MsgGetFidReq
	(*MsgGetFidResp)(nil),                          // 174: imapigateway.MsgGetFidResp
	(*MsgFilePartsReq)(nil),                        // 175: imapigateway.MsgFilePartsReq
	(*MsgFilePartsResp)(nil),                       // 176: imapigateway.MsgFilePartsResp
	(*MsgUploadFileReq)(nil),                       // 177: imapigateway.MsgUploadFileReq
	(*MsgUploadFileResp)(nil),                      // 178: imapigateway.MsgUploadFileResp
	(*MsgDownloadFileReq)(nil),                     // 179: imapigateway.MsgDownloadFileReq
	(*DownloadFileRespPara1)(nil),                  // 180: imapigateway.DownloadFileRespPara1
	(*DownloadFileRespPara2)(nil),                  // 181: imapigateway.DownloadFileRespPara2
	(*MsgDownloadFileResp)(nil),                    // 182: imapigateway.MsgDownloadFileResp
	(*MsgQueryObjInfoReq)(nil),                     // 183: imapigateway.MsgQueryObjInfoReq
	(*QueryObjInfoRespPara)(nil),                   // 184: imapigateway.QueryObjInfoRespPara
	(*MsgQueryObjInfoResp)(nil),                    // 185: imapigateway.MsgQueryObjInfoResp
	(*MsgGetFileDescReq)(nil),                      // 186: imapigateway.MsgGetFileDescReq
	(*MsgGetFileDescResp)(nil),                     // 187: imapigateway.MsgGetFileDescResp
	(*GetChannelInfoReq)(nil),                      // 188: imapigateway.GetChannelInfoReq
	(*GetChannelInfoResp)(nil),                     // 189: imapigateway.GetChannelInfoResp
	(*ReqGetAdminGroups)(nil),                      // 190: imapigateway.ReqGetAdminGroups
	(*ReqGetGroups)(nil),                           // 191: imapigateway.ReqGetGroups
	(*Peer)(nil),                                   // 192: imapigateway.Peer
	(*ReplyGetGroups)(nil),                         // 193: imapigateway.ReplyGetGroups
	(*ReqDeleteMessage)(nil),                       // 194: imapigateway.ReqDeleteMessage
	(*ReqSendChatAction)(nil),                      // 195: imapigateway.ReqSendChatAction
	(*ReqData)(nil),                                // 196: imapigateway.ReqData
	(*ReplyData)(nil),                              // 197: imapigateway.ReplyData
	(*ReqGetChatMembersCount)(nil),                 // 198: imapigateway.ReqGetChatMembersCount
	(*ReplyGetChatMembersCount)(nil),               // 199: imapigateway.ReplyGetChatMembersCount
	(*GetChatInfoReq)(nil),                         // 200: imapigateway.GetChatInfoReq
	(*GetUsersChatsReq)(nil),                       // 201: imapigateway.GetUsersChatsReq
	(*GetUsersChatsResult)(nil),                    // 202: imapigateway.GetUsersChatsResult
	(*GetUserInfoByIdReq)(nil),                     // 203: imapigateway.GetUserInfoByIdReq
	(*GetUserInfoByIdArrReq)(nil),                  // 204: imapigateway.GetUserInfoByIdArrReq
	(*UpdateUserProfileReq)(nil),                   // 205: imapigateway.UpdateUserProfileReq
	(*UpdateUserProfileResult)(nil),                // 206: imapigateway.UpdateUserProfileResult
	(*GetUserByphone)(nil),                         // 207: imapigateway.GetUserByphone
	(*UpdateBotInfoSuppReq)(nil),                   // 208: imapigateway.UpdateBotInfoSuppReq
	(*UpdateBotInfoSuppResult)(nil),                // 209: imapigateway.UpdateBotInfoSuppResult
	(*UpdateBotPicRequest)(nil),                    // 210: imapigateway.UpdateBotPicRequest
	(*UpdateBotPicResult)(nil),                     // 211: imapigateway.UpdateBotPicResult
	(*UpdateuserNameReq)(nil),                      // 212: imapigateway.UpdateuserNameReq
	(*UpdateuserNameResult)(nil),                   // 213: imapigateway.UpdateuserNameResult
	(*RegisterUserInfoResult)(nil),                 // 214: imapigateway.RegisterUserInfoResult
	(*DeleteAccountByIdReq)(nil),                   // 215: imapigateway.DeleteAccountByIdReq
	(*DelAccountResult)(nil),                       // 216: imapigateway.DelAccountResult
	(*SignUpReq)(nil),                              // 217: imapigateway.SignUpReq
	(*AuthSignUpResult)(nil),                       // 218: imapigateway.AuthSignUpResult
	(*GetFullUserReq)(nil),                         // 219: imapigateway.GetFullUserReq
	(*GetFullUserResult)(nil),                      // 220: imapigateway.GetFullUserResult
	(*GetUserByUsername)(nil),                      // 221: imapigateway.GetUserByUsername
	(*ReqGetFullChat)(nil),                         // 222: imapigateway.ReqGetFullChat
	(*ReplyGetFullChat)(nil),                       // 223: imapigateway.ReplyGetFullChat
	(*ReqLeaveChannel)(nil),                        // 224: imapigateway.ReqLeaveChannel
	(*ReqSendMedia)(nil),                           // 225: imapigateway.ReqSendMedia
	(*ReplyResult)(nil),                            // 226: imapigateway.ReplyResult
	(*ReqEditChatTitle)(nil),                       // 227: imapigateway.ReqEditChatTitle
	(*ReplyEditChatTitle)(nil),                     // 228: imapigateway.ReplyEditChatTitle
	(*GetStickerSetPackDcInfosReq)(nil),            // 229: imapigateway.GetStickerSetPackDcInfosReq
	(*GetStickerSetPackDcInfosResult)(nil),         // 230: imapigateway.GetStickerSetPackDcInfosResult
	(*StickerPackDocumentBase)(nil),                // 231: imapigateway.StickerPackDocumentBase
	(*StickerPackDocumentInfo)(nil),                // 232: imapigateway.StickerPackDocumentInfo
	(*GetUserInfoByIdArrResult)(nil),               // 233: imapigateway.GetUserInfoByIdArrResult
	(*SetBotVerifiedReq)(nil),                      // 234: imapigateway.SetBotVerifiedReq
	(*SetBotVerifiedReply)(nil),                    // 235: imapigateway.SetBotVerifiedReply
	(*ContactsGetCommonContactsReq)(nil),           // 236: imapigateway.ContactsGetCommonContactsReq
	(*ContactsGetCommonContactsResult)(nil),        // 237: imapigateway.ContactsGetCommonContactsResult
	(*Debug)(nil),                                  // 238: imapigateway.Debug
	(ReErrCode)(0),                                 // 239: imapigateway.ReErrCode
	(*UserInfo)(nil),                               // 240: imapigateway.userInfo
	(*UserMsg)(nil),                                // 241: imapigateway.UserMsg
	(ERpcResultCode)(0),                            // 242: imapigateway.ERpcResultCode
	(*storageservice.UploadReqPara1)(nil),          // 243: storageservice.UploadReqPara1
	(*storageservice.UploadReqPara2)(nil),          // 244: storageservice.UploadReqPara2
	(*storageservice.FileUploadRespPara)(nil),      // 245: storageservice.FileUploadRespPara
	(*FidPara)(nil),                                // 246: imapigateway.FidPara
	(*ChannelInfoBase)(nil),                        // 247: imapigateway.ChannelInfoBase
	(ChatResultCode)(0),                            // 248: imapigateway.ChatResultCode
	(*UserInfoArray)(nil),                          // 249: imapigateway.UserInfoArray
}
var file_imapigateway_proto_depIdxs = []int32{
	0,   // 0: imapigateway.GetGroupUserIdsRsp.RetNo:type_name -> imapigateway.GroupLiveReplyCode
	0,   // 1: imapigateway.LiveStartRsp.ReplyCode:type_name -> imapigateway.GroupLiveReplyCode
	0,   // 2: imapigateway.LiveStopRsp.RetCode:type_name -> imapigateway.GroupLiveReplyCode
	0,   // 3: imapigateway.GetLiveInviteUrlRsp.ReplyCode:type_name -> imapigateway.GroupLiveReplyCode
	0,   // 4: imapigateway.EditLiveInfoRsp.ReplyCode:type_name -> imapigateway.GroupLiveReplyCode
	0,   // 5: imapigateway.GroupLiveCheckRsp.ReplyCode:type_name -> imapigateway.GroupLiveReplyCode
	0,   // 6: imapigateway.GetLiveInviteCntRsp.RetCode:type_name -> imapigateway.GroupLiveReplyCode
	238, // 7: imapigateway.ReqKickFromChannel.debug:type_name -> imapigateway.Debug
	238, // 8: imapigateway.CheckUserNameReq.debug:type_name -> imapigateway.Debug
	238, // 9: imapigateway.ReqSendCodeMsg.debug:type_name -> imapigateway.Debug
	29,  // 10: imapigateway.ReqEditBanChannelUser.channelBannedRights:type_name -> imapigateway.ChannelBannedRights
	238, // 11: imapigateway.ReqEditBanChannelUser.debug:type_name -> imapigateway.Debug
	238, // 12: imapigateway.ReqEditEveryoneQuiet.debug:type_name -> imapigateway.Debug
	238, // 13: imapigateway.GetChannelUserInfoReq.debug:type_name -> imapigateway.Debug
	238, // 14: imapigateway.CheckIsSelfContactReq.debug:type_name -> imapigateway.Debug
	239, // 15: imapigateway.CheckIsSelfContactResult.Errorcode:type_name -> imapigateway.ReErrCode
	38,  // 16: imapigateway.SysNotifyData.interact_msg:type_name -> imapigateway.MomentData
	40,  // 17: imapigateway.SendMediaSysNotifyReq.notify_medias:type_name -> imapigateway.NotifyMedia
	41,  // 18: imapigateway.SendMediaSysNotifyReq.notify_texts:type_name -> imapigateway.NotifyText
	39,  // 19: imapigateway.SendMediaSysNotifyReq.data:type_name -> imapigateway.SysNotifyData
	43,  // 20: imapigateway.SendMediaSysNotifyResult.failUsers:type_name -> imapigateway.FailUser
	44,  // 21: imapigateway.SendMediaSysNotifyResult.SucceedUsers:type_name -> imapigateway.SucceedUser
	240, // 22: imapigateway.SearchUserByNicknameResult.user_infos:type_name -> imapigateway.userInfo
	239, // 23: imapigateway.SearchUserByNicknameResult.Errorcode:type_name -> imapigateway.ReErrCode
	48,  // 24: imapigateway.MomentNotifyData.entites:type_name -> imapigateway.Entity
	49,  // 25: imapigateway.MomentNotifyReq.moment_notify_data:type_name -> imapigateway.MomentNotifyData
	5,   // 26: imapigateway.CheckIsMuteContactResult.ErrorCode:type_name -> imapigateway.CheckIsMuteContactResult.ResultCode
	238, // 27: imapigateway.ContatsGetContactsReq.debug:type_name -> imapigateway.Debug
	54,  // 28: imapigateway.ContatsGetContactsResult.contactArr:type_name -> imapigateway.contactInfo
	240, // 29: imapigateway.ContatsGetContactsResult.userInfoArr:type_name -> imapigateway.userInfo
	239, // 30: imapigateway.ContatsGetContactsResult.Errorcode:type_name -> imapigateway.ReErrCode
	57,  // 31: imapigateway.ReqUpdateMoments.momentStates:type_name -> imapigateway.MomentState
	2,   // 32: imapigateway.ReqIntegralUniversalBusiness.fromId:type_name -> imapigateway.MsgFromID
	240, // 33: imapigateway.GetUserInfoResult.Uinfo:type_name -> imapigateway.userInfo
	239, // 34: imapigateway.GetUserInfoResult.Errorcode:type_name -> imapigateway.ReErrCode
	238, // 35: imapigateway.SendRDPReq.Debug:type_name -> imapigateway.Debug
	238, // 36: imapigateway.CheckRDPReq.Debug:type_name -> imapigateway.Debug
	238, // 37: imapigateway.ReceiveRDPReq.Debug:type_name -> imapigateway.Debug
	238, // 38: imapigateway.BotUpdateInfo.debug:type_name -> imapigateway.Debug
	239, // 39: imapigateway.BotUpdateInfoResult.Errorcode:type_name -> imapigateway.ReErrCode
	238, // 40: imapigateway.ReqGetAllChats.debug:type_name -> imapigateway.Debug
	238, // 41: imapigateway.ReqGetchannelDifference.debug:type_name -> imapigateway.Debug
	238, // 42: imapigateway.ReqFullchannel.debug:type_name -> imapigateway.Debug
	238, // 43: imapigateway.ReqDeleteMessages.debug:type_name -> imapigateway.Debug
	238, // 44: imapigateway.RegisterUserInfoReq.debug:type_name -> imapigateway.Debug
	238, // 45: imapigateway.ReqGetFullChannel.debug:type_name -> imapigateway.Debug
	238, // 46: imapigateway.ReqGetParticipants.debug:type_name -> imapigateway.Debug
	238, // 47: imapigateway.ReqUpdatePinnedChannelMessage.debug:type_name -> imapigateway.Debug
	238, // 48: imapigateway.ReqEditChannelAbout.debug:type_name -> imapigateway.Debug
	238, // 49: imapigateway.ReqEditChannelTitle.debug:type_name -> imapigateway.Debug
	101, // 50: imapigateway.ReqDelManualBlockList.UnBlockUser:type_name -> imapigateway.BlockUser
	238, // 51: imapigateway.ReqDelManualBlockList.debug:type_name -> imapigateway.Debug
	101, // 52: imapigateway.ReqSetManualBlockList.BlockUser:type_name -> imapigateway.BlockUser
	238, // 53: imapigateway.ReqSetManualBlockList.debug:type_name -> imapigateway.Debug
	238, // 54: imapigateway.StoreShopStickerSetDocumentsReq.debug:type_name -> imapigateway.Debug
	239, // 55: imapigateway.StoreShopStickerSetDocumentsResult.Errorcode:type_name -> imapigateway.ReErrCode
	239, // 56: imapigateway.GetAuthorAllStickerSetResult.ErrorCode:type_name -> imapigateway.ReErrCode
	105, // 57: imapigateway.GetAuthorAllStickerSetResult.sets:type_name -> imapigateway.AuthorStickerSet
	239, // 58: imapigateway.DeleteStickerPackDocumentResult.Errorcode:type_name -> imapigateway.ReErrCode
	238, // 59: imapigateway.GetStickerSetInfoReq.debug:type_name -> imapigateway.Debug
	111, // 60: imapigateway.GetStickerSetInfoResult.stickerSetInfo:type_name -> imapigateway.StickerSetInfo
	239, // 61: imapigateway.GetStickerSetInfoResult.Errorcode:type_name -> imapigateway.ReErrCode
	238, // 62: imapigateway.DeleteStickerSetReq.debug:type_name -> imapigateway.Debug
	239, // 63: imapigateway.DeleteStickerSetResult.Errorcode:type_name -> imapigateway.ReErrCode
	238, // 64: imapigateway.StoreUserStickerSetReq.debug:type_name -> imapigateway.Debug
	239, // 65: imapigateway.StoreUserStickerSetResult.Errorcode:type_name -> imapigateway.ReErrCode
	231, // 66: imapigateway.StoreStickerPackDcReq.stickpackbase:type_name -> imapigateway.StickerPackDocumentBase
	238, // 67: imapigateway.StoreStickerPackDcReq.debug:type_name -> imapigateway.Debug
	239, // 68: imapigateway.StoreStickerPackDcResult.Errorcode:type_name -> imapigateway.ReErrCode
	238, // 69: imapigateway.StoreShopStickerSetReq.debug:type_name -> imapigateway.Debug
	239, // 70: imapigateway.StoreShopStickerSetResult.Errorcode:type_name -> imapigateway.ReErrCode
	3,   // 71: imapigateway.ResizeReply.status:type_name -> imapigateway.StatusCode
	3,   // 72: imapigateway.ConstraintReply.status:type_name -> imapigateway.StatusCode
	3,   // 73: imapigateway.CompressImageReply.status:type_name -> imapigateway.StatusCode
	3,   // 74: imapigateway.VideoPreviewReply.status:type_name -> imapigateway.StatusCode
	3,   // 75: imapigateway.AudioPreviewReply.status:type_name -> imapigateway.StatusCode
	238, // 76: imapigateway.ReqParticipants.debug:type_name -> imapigateway.Debug
	238, // 77: imapigateway.ReqCreateChat.debug:type_name -> imapigateway.Debug
	238, // 78: imapigateway.ReqMigrateChat.debug:type_name -> imapigateway.Debug
	238, // 79: imapigateway.ReqJoinChannel.debug:type_name -> imapigateway.Debug
	238, // 80: imapigateway.ReqBotCallMessageMedia.debug:type_name -> imapigateway.Debug
	238, // 81: imapigateway.RequestDialog.debug:type_name -> imapigateway.Debug
	144, // 82: imapigateway.ReqSetGameScore.scores:type_name -> imapigateway.UserScore
	238, // 83: imapigateway.ReqSetGameScore.debug:type_name -> imapigateway.Debug
	29,  // 84: imapigateway.ReqBanChannelUser.channelBannedRights:type_name -> imapigateway.ChannelBannedRights
	238, // 85: imapigateway.ReqBanChannelUser.debug:type_name -> imapigateway.Debug
	238, // 86: imapigateway.ReqGetChannels.debug:type_name -> imapigateway.Debug
	238, // 87: imapigateway.ReqDeleteChatUser.debug:type_name -> imapigateway.Debug
	153, // 88: imapigateway.GetChannelInactiveUsersResult.users:type_name -> imapigateway.ChannelInactiveUser
	238, // 89: imapigateway.ReqBotInlineCall.debug:type_name -> imapigateway.Debug
	158, // 90: imapigateway.ReplyBotInlineCall.inlinecall:type_name -> imapigateway.InlineCall
	238, // 91: imapigateway.ReqSendUserMsg.debug:type_name -> imapigateway.Debug
	238, // 92: imapigateway.ReqBotCall.debug:type_name -> imapigateway.Debug
	238, // 93: imapigateway.ReqGetMessageByUserIdUuid.debug:type_name -> imapigateway.Debug
	241, // 94: imapigateway.ReplyGetMessageByUserIdUuid.UserMessage:type_name -> imapigateway.UserMsg
	238, // 95: imapigateway.ReqGetChannelMessageByChannelIdMsgId.debug:type_name -> imapigateway.Debug
	241, // 96: imapigateway.ReplyGetChannelMessageByChannelIdMsgId.UserMessage:type_name -> imapigateway.UserMsg
	238, // 97: imapigateway.ReqGetMessageByUserIdMsgId.debug:type_name -> imapigateway.Debug
	241, // 98: imapigateway.ReplyGetMessageByUserIdMsgId.UserMessage:type_name -> imapigateway.UserMsg
	242, // 99: imapigateway.MsgFileDescResp.result:type_name -> imapigateway.ERpcResultCode
	242, // 100: imapigateway.MsgGetFidResp.result:type_name -> imapigateway.ERpcResultCode
	242, // 101: imapigateway.MsgFilePartsResp.result:type_name -> imapigateway.ERpcResultCode
	243, // 102: imapigateway.MsgUploadFileReq.para1:type_name -> storageservice.UploadReqPara1
	244, // 103: imapigateway.MsgUploadFileReq.para2:type_name -> storageservice.UploadReqPara2
	242, // 104: imapigateway.MsgUploadFileResp.result:type_name -> imapigateway.ERpcResultCode
	245, // 105: imapigateway.MsgUploadFileResp.para1:type_name -> storageservice.FileUploadRespPara
	246, // 106: imapigateway.MsgUploadFileResp.para2:type_name -> imapigateway.FidPara
	242, // 107: imapigateway.MsgDownloadFileResp.result:type_name -> imapigateway.ERpcResultCode
	180, // 108: imapigateway.MsgDownloadFileResp.para1:type_name -> imapigateway.DownloadFileRespPara1
	181, // 109: imapigateway.MsgDownloadFileResp.para2:type_name -> imapigateway.DownloadFileRespPara2
	184, // 110: imapigateway.MsgQueryObjInfoResp.para:type_name -> imapigateway.QueryObjInfoRespPara
	242, // 111: imapigateway.MsgQueryObjInfoResp.result:type_name -> imapigateway.ERpcResultCode
	242, // 112: imapigateway.MsgGetFileDescResp.result:type_name -> imapigateway.ERpcResultCode
	238, // 113: imapigateway.GetChannelInfoReq.Dlog:type_name -> imapigateway.Debug
	247, // 114: imapigateway.GetChannelInfoResp.baseInfo:type_name -> imapigateway.ChannelInfoBase
	248, // 115: imapigateway.GetChannelInfoResp.resultcode:type_name -> imapigateway.ChatResultCode
	238, // 116: imapigateway.ReqGetAdminGroups.debug:type_name -> imapigateway.Debug
	192, // 117: imapigateway.ReplyGetGroups.Groups:type_name -> imapigateway.Peer
	192, // 118: imapigateway.ReplyGetGroups.SuperGroups:type_name -> imapigateway.Peer
	192, // 119: imapigateway.ReplyGetGroups.Channels:type_name -> imapigateway.Peer
	1,   // 120: imapigateway.ReqDeleteMessage.ChatType:type_name -> imapigateway.ChatType
	238, // 121: imapigateway.ReqDeleteMessage.debug:type_name -> imapigateway.Debug
	1,   // 122: imapigateway.ReqSendChatAction.ChatType:type_name -> imapigateway.ChatType
	238, // 123: imapigateway.ReqSendChatAction.debug:type_name -> imapigateway.Debug
	1,   // 124: imapigateway.ReqData.ChatType:type_name -> imapigateway.ChatType
	1,   // 125: imapigateway.ReqGetChatMembersCount.ChatType:type_name -> imapigateway.ChatType
	238, // 126: imapigateway.ReqGetChatMembersCount.debug:type_name -> imapigateway.Debug
	238, // 127: imapigateway.GetChatInfoReq.Dlog:type_name -> imapigateway.Debug
	238, // 128: imapigateway.GetUsersChatsReq.Dlog:type_name -> imapigateway.Debug
	249, // 129: imapigateway.GetUsersChatsResult.users:type_name -> imapigateway.UserInfoArray
	248, // 130: imapigateway.GetUsersChatsResult.resultcode:type_name -> imapigateway.ChatResultCode
	238, // 131: imapigateway.GetUserInfoByIdReq.debug:type_name -> imapigateway.Debug
	238, // 132: imapigateway.GetUserInfoByIdArrReq.debug:type_name -> imapigateway.Debug
	238, // 133: imapigateway.UpdateUserProfileReq.debug:type_name -> imapigateway.Debug
	240, // 134: imapigateway.UpdateUserProfileResult.Uinfo:type_name -> imapigateway.userInfo
	239, // 135: imapigateway.UpdateUserProfileResult.Errorcode:type_name -> imapigateway.ReErrCode
	238, // 136: imapigateway.GetUserByphone.debug:type_name -> imapigateway.Debug
	238, // 137: imapigateway.UpdateBotInfoSuppReq.debug:type_name -> imapigateway.Debug
	239, // 138: imapigateway.UpdateBotInfoSuppResult.Errorcode:type_name -> imapigateway.ReErrCode
	238, // 139: imapigateway.UpdateBotPicRequest.debug:type_name -> imapigateway.Debug
	239, // 140: imapigateway.UpdateBotPicResult.Errorcode:type_name -> imapigateway.ReErrCode
	238, // 141: imapigateway.UpdateuserNameReq.debug:type_name -> imapigateway.Debug
	240, // 142: imapigateway.UpdateuserNameResult.Uinfo:type_name -> imapigateway.userInfo
	239, // 143: imapigateway.UpdateuserNameResult.Errorcode:type_name -> imapigateway.ReErrCode
	240, // 144: imapigateway.RegisterUserInfoResult.uinfo:type_name -> imapigateway.userInfo
	239, // 145: imapigateway.RegisterUserInfoResult.Errorcode:type_name -> imapigateway.ReErrCode
	238, // 146: imapigateway.DeleteAccountByIdReq.debug:type_name -> imapigateway.Debug
	239, // 147: imapigateway.DelAccountResult.Errorcode:type_name -> imapigateway.ReErrCode
	238, // 148: imapigateway.SignUpReq.debug:type_name -> imapigateway.Debug
	6,   // 149: imapigateway.AuthSignUpResult.code:type_name -> imapigateway.AuthSignUpResult.ResultCode
	240, // 150: imapigateway.AuthSignUpResult.userInfo:type_name -> imapigateway.userInfo
	238, // 151: imapigateway.GetFullUserReq.debug:type_name -> imapigateway.Debug
	240, // 152: imapigateway.GetFullUserResult.uinfo:type_name -> imapigateway.userInfo
	239, // 153: imapigateway.GetFullUserResult.Errorcode:type_name -> imapigateway.ReErrCode
	238, // 154: imapigateway.GetUserByUsername.debug:type_name -> imapigateway.Debug
	238, // 155: imapigateway.ReqGetFullChat.debug:type_name -> imapigateway.Debug
	238, // 156: imapigateway.ReqLeaveChannel.debug:type_name -> imapigateway.Debug
	238, // 157: imapigateway.ReqSendMedia.debug:type_name -> imapigateway.Debug
	238, // 158: imapigateway.ReqEditChatTitle.debug:type_name -> imapigateway.Debug
	238, // 159: imapigateway.GetStickerSetPackDcInfosReq.debug:type_name -> imapigateway.Debug
	232, // 160: imapigateway.GetStickerSetPackDcInfosResult.StPDcInfo:type_name -> imapigateway.StickerPackDocumentInfo
	231, // 161: imapigateway.StickerPackDocumentInfo.infoBase:type_name -> imapigateway.StickerPackDocumentBase
	240, // 162: imapigateway.GetUserInfoByIdArrResult.Uinfo:type_name -> imapigateway.userInfo
	239, // 163: imapigateway.GetUserInfoByIdArrResult.Errorcode:type_name -> imapigateway.ReErrCode
	239, // 164: imapigateway.SetBotVerifiedReply.Errorcode:type_name -> imapigateway.ReErrCode
	240, // 165: imapigateway.ContactsGetCommonContactsResult.user_infos:type_name -> imapigateway.userInfo
	239, // 166: imapigateway.ContactsGetCommonContactsResult.Errorcode:type_name -> imapigateway.ReErrCode
	92,  // 167: imapigateway.ApiGatewayService.RegisterUserInfo:input_type -> imapigateway.RegisterUserInfoReq
	92,  // 168: imapigateway.ApiGatewayService.RegisterRedBotInfo:input_type -> imapigateway.RegisterUserInfoReq
	212, // 169: imapigateway.ApiGatewayService.UpdateUserName:input_type -> imapigateway.UpdateuserNameReq
	215, // 170: imapigateway.ApiGatewayService.DeleteUserInfoById:input_type -> imapigateway.DeleteAccountByIdReq
	90,  // 171: imapigateway.ApiGatewayService.DeleteMessages:input_type -> imapigateway.ReqDeleteMessages
	161, // 172: imapigateway.ApiGatewayService.BotCall:input_type -> imapigateway.ReqBotCall
	167, // 173: imapigateway.ApiGatewayService.GetMessageByUserIdMsgId:input_type -> imapigateway.ReqGetMessageByUserIdMsgId
	88,  // 174: imapigateway.ApiGatewayService.GetFullChannel:input_type -> imapigateway.ReqFullchannel
	86,  // 175: imapigateway.ApiGatewayService.GetChannelDifference:input_type -> imapigateway.ReqGetchannelDifference
	131, // 176: imapigateway.ApiGatewayService.GetParticipants:input_type -> imapigateway.ReqParticipants
	84,  // 177: imapigateway.ApiGatewayService.GetAllChats:input_type -> imapigateway.ReqGetAllChats
	224, // 178: imapigateway.ApiGatewayService.LeaveChannel:input_type -> imapigateway.ReqLeaveChannel
	95,  // 179: imapigateway.ApiGatewayService.UpdatePinnedChannelMessage:input_type -> imapigateway.ReqUpdatePinnedChannelMessage
	205, // 180: imapigateway.ApiGatewayService.UpdateUserProfile:input_type -> imapigateway.UpdateUserProfileReq
	80,  // 181: imapigateway.ApiGatewayService.UpdateBotInfo:input_type -> imapigateway.BotUpdateInfo
	97,  // 182: imapigateway.ApiGatewayService.EditChannelTitle:input_type -> imapigateway.ReqEditChannelTitle
	96,  // 183: imapigateway.ApiGatewayService.EditChannelAbout:input_type -> imapigateway.ReqEditChannelAbout
	177, // 184: imapigateway.ApiGatewayService.UploadFile:input_type -> imapigateway.MsgUploadFileReq
	169, // 185: imapigateway.ApiGatewayService.GatewayUploadFileDesc:input_type -> imapigateway.MsgFileDescReq
	72,  // 186: imapigateway.ApiGatewayService.SendRDP:input_type -> imapigateway.SendRDPReq
	74,  // 187: imapigateway.ApiGatewayService.CheckRDP:input_type -> imapigateway.CheckRDPReq
	76,  // 188: imapigateway.ApiGatewayService.ReceiveRDP:input_type -> imapigateway.ReceiveRDPReq
	219, // 189: imapigateway.ApiGatewayService.GetFullUser:input_type -> imapigateway.GetFullUserReq
	203, // 190: imapigateway.ApiGatewayService.GetUserInfoById:input_type -> imapigateway.GetUserInfoByIdReq
	68,  // 191: imapigateway.ApiGatewayService.SendRedGame:input_type -> imapigateway.SendGameRedReq
	70,  // 192: imapigateway.ApiGatewayService.ReceiveRedGame:input_type -> imapigateway.RcvGameRedReq
	69,  // 193: imapigateway.ApiGatewayService.QueryRedGame:input_type -> imapigateway.QryGameRdpReq
	66,  // 194: imapigateway.ApiGatewayService.GetUserIdByUserName:input_type -> imapigateway.GetUserByUsernameReq
	64,  // 195: imapigateway.ApiGatewayService.SetUserDetail:input_type -> imapigateway.SetUserDetailReq
	210, // 196: imapigateway.ApiGatewayService.UpdateBotPic:input_type -> imapigateway.UpdateBotPicRequest
	179, // 197: imapigateway.ApiGatewayService.DownloadFile:input_type -> imapigateway.MsgDownloadFileReq
	62,  // 198: imapigateway.ApiGatewayService.OtherTrans:input_type -> imapigateway.OtherTransReq
	60,  // 199: imapigateway.ApiGatewayService.IntegralUniversalBusiness:input_type -> imapigateway.ReqIntegralUniversalBusiness
	165, // 200: imapigateway.ApiGatewayService.GetChannelMsg:input_type -> imapigateway.ReqGetChannelMessageByChannelIdMsgId
	234, // 201: imapigateway.ApiGatewayService.SetBotVerified:input_type -> imapigateway.SetBotVerifiedReq
	163, // 202: imapigateway.ApiGatewayService.GetMessageByUserIdUuid:input_type -> imapigateway.ReqGetMessageByUserIdUuid
	236, // 203: imapigateway.ApiGatewayService.ContactsGetCommonContacts:input_type -> imapigateway.ContactsGetCommonContactsReq
	58,  // 204: imapigateway.ApiGatewayService.UpdateMoments:input_type -> imapigateway.ReqUpdateMoments
	55,  // 205: imapigateway.ApiGatewayService.ContactsGetContacts:input_type -> imapigateway.ContatsGetContactsReq
	52,  // 206: imapigateway.ApiGatewayService.CheckIsMuteContact:input_type -> imapigateway.CheckIsMuteContactReq
	50,  // 207: imapigateway.ApiGatewayService.MomentNotify:input_type -> imapigateway.MomentNotifyReq
	46,  // 208: imapigateway.ApiGatewayService.SearchUserByNickname:input_type -> imapigateway.SearchUserByNicknameReq
	42,  // 209: imapigateway.ApiGatewayService.SendMediaSysNotify:input_type -> imapigateway.SendMediaSysNotifyReq
	36,  // 210: imapigateway.ApiGatewayService.MomentFollow:input_type -> imapigateway.MomentFollowReq
	34,  // 211: imapigateway.ApiGatewayService.CheckIsSelfContact:input_type -> imapigateway.CheckIsSelfContactReq
	204, // 212: imapigateway.ApiGatewayService.GetUserInfoByIdArr:input_type -> imapigateway.GetUserInfoByIdArrReq
	32,  // 213: imapigateway.ApiGatewayService.GetChannelUserInfo:input_type -> imapigateway.GetChannelUserInfoReq
	31,  // 214: imapigateway.ApiGatewayService.EditEveryoneQuiet:input_type -> imapigateway.ReqEditEveryoneQuiet
	30,  // 215: imapigateway.ApiGatewayService.EditBanChannelUser:input_type -> imapigateway.ReqEditBanChannelUser
	207, // 216: imapigateway.ApiGatewayService.GetUserInfoByPhone:input_type -> imapigateway.GetUserByphone
	28,  // 217: imapigateway.ApiGatewayService.SendCodeMsg:input_type -> imapigateway.ReqSendCodeMsg
	9,   // 218: imapigateway.ApiGatewayService.GroupLiveStart:input_type -> imapigateway.LiveStartReq
	11,  // 219: imapigateway.ApiGatewayService.GroupLiveStop:input_type -> imapigateway.LiveStopReq
	13,  // 220: imapigateway.ApiGatewayService.GetLiveInviteUrl:input_type -> imapigateway.GetLiveInviteUrlReq
	26,  // 221: imapigateway.ApiGatewayService.CheckUserName:input_type -> imapigateway.CheckUserNameReq
	15,  // 222: imapigateway.ApiGatewayService.EditLiveInfo:input_type -> imapigateway.EditLiveInfoReq
	17,  // 223: imapigateway.ApiGatewayService.GroupLiveCheck:input_type -> imapigateway.GroupLiveCheckReq
	19,  // 224: imapigateway.ApiGatewayService.GetLiveInviteCnt:input_type -> imapigateway.GetLiveInviteCntReq
	25,  // 225: imapigateway.ApiGatewayService.KickFromChannel:input_type -> imapigateway.ReqKickFromChannel
	21,  // 226: imapigateway.ApiGatewayService.CheckUserInGroup:input_type -> imapigateway.CheckUserInGroupReq
	23,  // 227: imapigateway.ApiGatewayService.LivePush:input_type -> imapigateway.LivePushReq
	7,   // 228: imapigateway.ApiGatewayService.GetGroupUserIds:input_type -> imapigateway.GetGroupUserIdsReq
	214, // 229: imapigateway.ApiGatewayService.RegisterUserInfo:output_type -> imapigateway.RegisterUserInfoResult
	214, // 230: imapigateway.ApiGatewayService.RegisterRedBotInfo:output_type -> imapigateway.RegisterUserInfoResult
	213, // 231: imapigateway.ApiGatewayService.UpdateUserName:output_type -> imapigateway.UpdateuserNameResult
	216, // 232: imapigateway.ApiGatewayService.DeleteUserInfoById:output_type -> imapigateway.DelAccountResult
	91,  // 233: imapigateway.ApiGatewayService.DeleteMessages:output_type -> imapigateway.ReplyDeleteMessages
	162, // 234: imapigateway.ApiGatewayService.BotCall:output_type -> imapigateway.ReplyBotCall
	168, // 235: imapigateway.ApiGatewayService.GetMessageByUserIdMsgId:output_type -> imapigateway.ReplyGetMessageByUserIdMsgId
	89,  // 236: imapigateway.ApiGatewayService.GetFullChannel:output_type -> imapigateway.ReplyFullChannel
	87,  // 237: imapigateway.ApiGatewayService.GetChannelDifference:output_type -> imapigateway.ReplyChannelDiffCommon
	132, // 238: imapigateway.ApiGatewayService.GetParticipants:output_type -> imapigateway.ReplyParticipants
	85,  // 239: imapigateway.ApiGatewayService.GetAllChats:output_type -> imapigateway.ReplyGetAllChats
	83,  // 240: imapigateway.ApiGatewayService.LeaveChannel:output_type -> imapigateway.ReplyLeaveChannel
	82,  // 241: imapigateway.ApiGatewayService.UpdatePinnedChannelMessage:output_type -> imapigateway.ReplyUpdatePinnedChannelMessage
	206, // 242: imapigateway.ApiGatewayService.UpdateUserProfile:output_type -> imapigateway.UpdateUserProfileResult
	81,  // 243: imapigateway.ApiGatewayService.UpdateBotInfo:output_type -> imapigateway.BotUpdateInfoResult
	79,  // 244: imapigateway.ApiGatewayService.EditChannelTitle:output_type -> imapigateway.ReplyEditChannelTitle
	78,  // 245: imapigateway.ApiGatewayService.EditChannelAbout:output_type -> imapigateway.ReplyEditChannelAbout
	178, // 246: imapigateway.ApiGatewayService.UploadFile:output_type -> imapigateway.MsgUploadFileResp
	170, // 247: imapigateway.ApiGatewayService.GatewayUploadFileDesc:output_type -> imapigateway.MsgFileDescResp
	73,  // 248: imapigateway.ApiGatewayService.SendRDP:output_type -> imapigateway.SendRDPResp
	75,  // 249: imapigateway.ApiGatewayService.CheckRDP:output_type -> imapigateway.CheckRDPResp
	77,  // 250: imapigateway.ApiGatewayService.ReceiveRDP:output_type -> imapigateway.ReceiveRDPResp
	220, // 251: imapigateway.ApiGatewayService.GetFullUser:output_type -> imapigateway.GetFullUserResult
	67,  // 252: imapigateway.ApiGatewayService.GetUserInfoById:output_type -> imapigateway.GetUserInfoResult
	71,  // 253: imapigateway.ApiGatewayService.SendRedGame:output_type -> imapigateway.GameRedResp
	71,  // 254: imapigateway.ApiGatewayService.ReceiveRedGame:output_type -> imapigateway.GameRedResp
	71,  // 255: imapigateway.ApiGatewayService.QueryRedGame:output_type -> imapigateway.GameRedResp
	67,  // 256: imapigateway.ApiGatewayService.GetUserIdByUserName:output_type -> imapigateway.GetUserInfoResult
	65,  // 257: imapigateway.ApiGatewayService.SetUserDetail:output_type -> imapigateway.SetUserDetailResult
	211, // 258: imapigateway.ApiGatewayService.UpdateBotPic:output_type -> imapigateway.UpdateBotPicResult
	182, // 259: imapigateway.ApiGatewayService.DownloadFile:output_type -> imapigateway.MsgDownloadFileResp
	63,  // 260: imapigateway.ApiGatewayService.OtherTrans:output_type -> imapigateway.OtherTransResp
	61,  // 261: imapigateway.ApiGatewayService.IntegralUniversalBusiness:output_type -> imapigateway.ReplyIntegralUniversalBusiness
	166, // 262: imapigateway.ApiGatewayService.GetChannelMsg:output_type -> imapigateway.ReplyGetChannelMessageByChannelIdMsgId
	235, // 263: imapigateway.ApiGatewayService.SetBotVerified:output_type -> imapigateway.SetBotVerifiedReply
	164, // 264: imapigateway.ApiGatewayService.GetMessageByUserIdUuid:output_type -> imapigateway.ReplyGetMessageByUserIdUuid
	237, // 265: imapigateway.ApiGatewayService.ContactsGetCommonContacts:output_type -> imapigateway.ContactsGetCommonContactsResult
	59,  // 266: imapigateway.ApiGatewayService.UpdateMoments:output_type -> imapigateway.ResUpdateMoments
	56,  // 267: imapigateway.ApiGatewayService.ContactsGetContacts:output_type -> imapigateway.ContatsGetContactsResult
	53,  // 268: imapigateway.ApiGatewayService.CheckIsMuteContact:output_type -> imapigateway.CheckIsMuteContactResult
	51,  // 269: imapigateway.ApiGatewayService.MomentNotify:output_type -> imapigateway.MomentNotifyResult
	47,  // 270: imapigateway.ApiGatewayService.SearchUserByNickname:output_type -> imapigateway.SearchUserByNicknameResult
	45,  // 271: imapigateway.ApiGatewayService.SendMediaSysNotify:output_type -> imapigateway.SendMediaSysNotifyResult
	37,  // 272: imapigateway.ApiGatewayService.MomentFollow:output_type -> imapigateway.MomentFollowResp
	35,  // 273: imapigateway.ApiGatewayService.CheckIsSelfContact:output_type -> imapigateway.CheckIsSelfContactResult
	233, // 274: imapigateway.ApiGatewayService.GetUserInfoByIdArr:output_type -> imapigateway.GetUserInfoByIdArrResult
	33,  // 275: imapigateway.ApiGatewayService.GetChannelUserInfo:output_type -> imapigateway.GetChannelUserInfoResp
	98,  // 276: imapigateway.ApiGatewayService.EditEveryoneQuiet:output_type -> imapigateway.ReplyChannelData
	98,  // 277: imapigateway.ApiGatewayService.EditBanChannelUser:output_type -> imapigateway.ReplyChannelData
	67,  // 278: imapigateway.ApiGatewayService.GetUserInfoByPhone:output_type -> imapigateway.GetUserInfoResult
	160, // 279: imapigateway.ApiGatewayService.SendCodeMsg:output_type -> imapigateway.ReplyBool
	10,  // 280: imapigateway.ApiGatewayService.GroupLiveStart:output_type -> imapigateway.LiveStartRsp
	12,  // 281: imapigateway.ApiGatewayService.GroupLiveStop:output_type -> imapigateway.LiveStopRsp
	14,  // 282: imapigateway.ApiGatewayService.GetLiveInviteUrl:output_type -> imapigateway.GetLiveInviteUrlRsp
	27,  // 283: imapigateway.ApiGatewayService.CheckUserName:output_type -> imapigateway.CheckUserNameResp
	16,  // 284: imapigateway.ApiGatewayService.EditLiveInfo:output_type -> imapigateway.EditLiveInfoRsp
	18,  // 285: imapigateway.ApiGatewayService.GroupLiveCheck:output_type -> imapigateway.GroupLiveCheckRsp
	20,  // 286: imapigateway.ApiGatewayService.GetLiveInviteCnt:output_type -> imapigateway.GetLiveInviteCntRsp
	98,  // 287: imapigateway.ApiGatewayService.KickFromChannel:output_type -> imapigateway.ReplyChannelData
	22,  // 288: imapigateway.ApiGatewayService.CheckUserInGroup:output_type -> imapigateway.CheckUserInGroupRsp
	24,  // 289: imapigateway.ApiGatewayService.LivePush:output_type -> imapigateway.LivePushResult
	8,   // 290: imapigateway.ApiGatewayService.GetGroupUserIds:output_type -> imapigateway.GetGroupUserIdsRsp
	229, // [229:291] is the sub-list for method output_type
	167, // [167:229] is the sub-list for method input_type
	167, // [167:167] is the sub-list for extension type_name
	167, // [167:167] is the sub-list for extension extendee
	0,   // [0:167] is the sub-list for field type_name
}

func init() { file_imapigateway_proto_init() }
func file_imapigateway_proto_init() {
	if File_imapigateway_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_imapigateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupUserIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupUserIdsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStopReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStopRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveInviteUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveInviteUrlRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditLiveInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditLiveInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupLiveCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupLiveCheckRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveInviteCntReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveInviteCntRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserInGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserInGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivePushReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivePushResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqKickFromChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserNameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendCodeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelBannedRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditBanChannelUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditEveryoneQuiet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelUserInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsSelfContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsSelfContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentFollowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentFollowResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysNotifyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMediaSysNotifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SucceedUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMediaSysNotifyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserByNicknameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserByNicknameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentNotifyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentNotifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentNotifyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsMuteContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsMuteContactResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContatsGetContactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContatsGetContactsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateMoments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResUpdateMoments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqIntegralUniversalBusiness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyIntegralUniversalBusiness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtherTransReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtherTransResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserDetailResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByUsernameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendGameRedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QryGameRdpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RcvGameRedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRDPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRDPResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRDPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRDPResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveRDPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveRDPResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyEditChannelAbout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyEditChannelTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotUpdateInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdatePinnedChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyLeaveChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetAllChats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetAllChats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetchannelDifference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelDiffCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFullchannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyFullChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetFullChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdatePinnedChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChannelAbout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChannelTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDelManualBlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSetManualBlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualBlockReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetDocumentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetDocumentsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorStickerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorAllStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorAllStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerPackDocumentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerPackDocumentResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerSetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreUserStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreUserStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStickerPackDcReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStickerPackDcResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoPreviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoPreviewReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioPreviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioPreviewReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyCreateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMigrateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyMigrateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqJoinChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyJoinChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChangeGroupAndChannelCrator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChangeGroupAndChannelCrator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBotCallMessageMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSetGameScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplySetGameScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBanChannelUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBanChannelUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChatUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteChatUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInactiveUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInactiveUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInactiveUsersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBotInlineCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBotInlineCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlineCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBotCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBotCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetMessageByUserIdUuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetMessageByUserIdUuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMessageByChannelIdMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMessageByChannelIdMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetMessageByUserIdMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetMessageByUserIdMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFileDescReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFileDescResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgServiceLimitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgServiceLimitResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGetFidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGetFidResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFilePartsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFilePartsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUploadFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUploadFileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDownloadFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadFileRespPara1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadFileRespPara2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDownloadFileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgQueryObjInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryObjInfoRespPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgQueryObjInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGetFileDescReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGetFileDescResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetAdminGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendChatAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChatMembersCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChatMembersCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersChatsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersChatsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoByIdArrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserProfileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByphone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotInfoSuppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotInfoSuppResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotPicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBotPicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateuserNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateuserNameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAccountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSignUpResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullUserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetFullChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetFullChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLeaveChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChatTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyEditChatTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetPackDcInfosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerSetPackDcInfosResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerPackDocumentBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerPackDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoByIdArrResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBotVerifiedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBotVerifiedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGetCommonContactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imapigateway_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsGetCommonContactsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imapigateway_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   231,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imapigateway_proto_goTypes,
		DependencyIndexes: file_imapigateway_proto_depIdxs,
		EnumInfos:         file_imapigateway_proto_enumTypes,
		MessageInfos:      file_imapigateway_proto_msgTypes,
	}.Build()
	File_imapigateway_proto = out.File
	file_imapigateway_proto_rawDesc = nil
	file_imapigateway_proto_goTypes = nil
	file_imapigateway_proto_depIdxs = nil
}
