//protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/imapigateway/*.proto
//protoc --go_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/imapigateway/*.proto
//protoc -I. --grpc-gateway_out=logtostderr=true,paths=source_relative:. gitlab.chatserver.im/interfaceprobuf/imapigateway/*.proto
//protoc -I. --swagger_out=logtostderr=true:. gitlab.chatserver.im/interfaceprobuf/imapigateway/*.proto
syntax = "proto3";
package imapigateway;
import "gitlab.chatserver.im/interfaceprobuf/imapigateway/common.proto";
import "gitlab.chatserver.im/interfaceprobuf/storageservice/storage_pub.proto";
import "gitlab.chatserver.im/interfaceprobuf/storageservice/storage_proto.proto";

// 网关服务
service ApiGatewayService{
    // 注册用户和普通机器人信息
    rpc RegisterUserInfo (RegisterUserInfoReq) returns (RegisterUserInfoResult){
    }
    // 注册红包机器人接口
    rpc RegisterRedBotInfo (RegisterUserInfoReq) returns (RegisterUserInfoResult){
    }
    // 更新用户的username
    rpc UpdateUserName (UpdateuserNameReq) returns (UpdateuserNameResult) {
    }
    // 账号(标记删除)
    rpc DeleteUserInfoById (DeleteAccountByIdReq) returns (DelAccountResult) {
    }
    // 删除消息
    rpc DeleteMessages (ReqDeleteMessages) returns (ReplyDeleteMessages) {
    }
    // 机器人调用接口
    rpc BotCall (ReqBotCall) returns (ReplyBotCall) {
    }
    // 根据 消息id和用户id 获取单聊消息\普通群消息
    rpc GetMessageByUserIdMsgId (ReqGetMessageByUserIdMsgId) returns (ReplyGetMessageByUserIdMsgId) {
    }
    // 获取full channel
    rpc GetFullChannel (ReqFullchannel) returns (ReplyFullChannel) {
    }
    // 获取超级群或者频道的修正信息
    rpc GetChannelDifference (ReqGetchannelDifference) returns (ReplyChannelDiffCommon) {
    }
    // 获取成员信息
    rpc GetParticipants (ReqParticipants) returns (ReplyParticipants) {
    }
    // 获取所有群 (除去部分)
    rpc GetAllChats (ReqGetAllChats) returns (ReplyGetAllChats) {
    }
    // 离开超级群或者频道
    rpc LeaveChannel (ReqLeaveChannel) returns (ReplyLeaveChannel) {
    }
    // 置顶超级群或者频道的消息
    rpc UpdatePinnedChannelMessage (ReqUpdatePinnedChannelMessage) returns (ReplyUpdatePinnedChannelMessage) {
    }
    // 更新firstName,lastName和about
    rpc UpdateUserProfile (UpdateUserProfileReq) returns (UpdateUserProfileResult) {
    }
    // 更新机器人相关信息
    rpc UpdateBotInfo (BotUpdateInfo) returns (BotUpdateInfoResult) {
    }
    // 编辑超级群或者频道的标题
    rpc EditChannelTitle (ReqEditChannelTitle) returns (ReplyEditChannelTitle) {
    }
    // 修改超级群或者频道的描述信息
    rpc EditChannelAbout (ReqEditChannelAbout) returns (ReplyEditChannelAbout) {
    }
    // UploadFile 上传文件或文件片
    rpc UploadFile(MsgUploadFileReq) returns (MsgUploadFileResp) {
    }
    // 网关上传文件描述信息
    rpc GatewayUploadFileDesc(MsgFileDescReq) returns (MsgFileDescResp) {
    }

    // 发送红包
    rpc SendRDP (SendRDPReq) returns (SendRDPResp) {
    }
    //　检查红包
    rpc CheckRDP (CheckRDPReq) returns (CheckRDPResp) {
    }
    //　领取红包
    rpc ReceiveRDP (ReceiveRDPReq) returns (ReceiveRDPResp) {
    }
    /*********************************红包游戏*******************************/
    // 获取全部用户信息
    rpc GetFullUser(GetFullUserReq) returns (GetFullUserResult){
    };

    // 新增获取用户信息接口　
    rpc GetUserInfoById(GetUserInfoByIdReq) returns (GetUserInfoResult){
    }
    // 发送红包游戏
    rpc SendRedGame(SendGameRedReq) returns (GameRedResp){
    }
    // 领取红包游戏
    rpc ReceiveRedGame(RcvGameRedReq) returns (GameRedResp){
    }
    // 查询游戏红包详情
    rpc QueryRedGame (QryGameRdpReq) returns (GameRedResp) {
    }

    // 通过用户名获取用户Id
    rpc GetUserIdByUserName (GetUserByUsernameReq) returns (GetUserInfoResult) {
    }
    // 设置用户生日和性别
    rpc SetUserDetail(SetUserDetailReq)returns(SetUserDetailResult){
    }
    // 更新机器人头像请求
    rpc UpdateBotPic(UpdateBotPicRequest)returns(UpdateBotPicResult){
    }
    // DownloadFile 下载文件或文件片
    rpc DownloadFile(MsgDownloadFileReq) returns (MsgDownloadFileResp) {
    }
    // 新增支付获取游戏规则借口　
    rpc OtherTrans(OtherTransReq) returns (OtherTransResp){
    }
    // 积分通用接口
    rpc IntegralUniversalBusiness(ReqIntegralUniversalBusiness) returns (ReplyIntegralUniversalBusiness) {
    }
    // 获取回复消息
    rpc GetChannelMsg(ReqGetChannelMessageByChannelIdMsgId)returns (ReplyGetChannelMessageByChannelIdMsgId){
    }
    // 新增官方标志设置（内部调用）
    rpc SetBotVerified(SetBotVerifiedReq)returns (SetBotVerifiedReply){
    }
    // 获取机器人消息Id通过uuid
    rpc GetMessageByUserIdUuid(ReqGetMessageByUserIdUuid)returns(ReplyGetMessageByUserIdUuid){
    }
    // 获取多个好友的共同好友
    rpc ContactsGetCommonContacts (ContactsGetCommonContactsReq) returns (ContactsGetCommonContactsResult){
    }
    // 更新朋友圈通知
    rpc UpdateMoments(ReqUpdateMoments)returns(ResUpdateMoments){
    }
    // 获取用户联系人列表
    rpc ContactsGetContacts (ContatsGetContactsReq) returns (ContatsGetContactsResult) {
    }
    // 根据用户Id来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
    rpc CheckIsMuteContact (CheckIsMuteContactReq) returns (CheckIsMuteContactResult) {
    }
    // 朋友圈互动通知
    rpc MomentNotify(MomentNotifyReq) returns (MomentNotifyResult){
    }
    // 根据用户昵称搜索
    rpc SearchUserByNickname (SearchUserByNicknameReq) returns (SearchUserByNicknameResult) {
    }
    // 系统号发送消息
    rpc SendMediaSysNotify(SendMediaSysNotifyReq) returns (SendMediaSysNotifyResult){
    }
    // 朋友圈关注用户
    rpc MomentFollow(MomentFollowReq) returns (MomentFollowResp){
    }
    // 检测是否是自己的好友
    rpc CheckIsSelfContact (CheckIsSelfContactReq) returns (CheckIsSelfContactResult) {
    }
    // 新增获取用户信息
    rpc GetUserInfoByIdArr(GetUserInfoByIdArrReq) returns (GetUserInfoByIdArrResult){
    };
    // 获取某个群成员信息
    rpc GetChannelUserInfo(GetChannelUserInfoReq) returns (GetChannelUserInfoResp){
    }
    // 超级群全体禁言
    rpc EditEveryoneQuiet (ReqEditEveryoneQuiet) returns (ReplyChannelData) {
    }
    // 禁言单个用户
    rpc EditBanChannelUser (ReqEditBanChannelUser) returns (ReplyChannelData) {
    }
    // 通过手机号获取用户信息
    rpc GetUserInfoByPhone (GetUserByphone) returns (GetUserInfoResult) {
    }
    // 发送短信消息接口
    rpc SendCodeMsg (ReqSendCodeMsg) returns (ReplyBool) {
    }
    // 群直播开始
    rpc GroupLiveStart(LiveStartReq) returns (LiveStartRsp) {
    }
    // 群直播结束
    rpc GroupLiveStop(LiveStopReq) returns (LiveStopRsp) {
    }
    // 获取主播邀请链接
    rpc GetLiveInviteUrl(GetLiveInviteUrlReq) returns (GetLiveInviteUrlRsp){
    }
    // 获取用户名是否唯一
    rpc CheckUserName(CheckUserNameReq) returns (CheckUserNameResp){
    }
    // 修改直播信息
    rpc EditLiveInfo(EditLiveInfoReq) returns (EditLiveInfoRsp) {
    }
    // 检测直播信息
    rpc GroupLiveCheck(GroupLiveCheckReq)returns(GroupLiveCheckRsp){
    }
    // 获取链接邀请
    rpc GetLiveInviteCnt(GetLiveInviteCntReq) returns (GetLiveInviteCntRsp) {
    }
    //踢人出超级群或者频道
    rpc KickFromChannel (ReqKickFromChannel) returns (ReplyChannelData) {
    }
    // 检查用户是否是在群里
    rpc CheckUserInGroup(CheckUserInGroupReq) returns (CheckUserInGroupRsp){
    }
    // 推送消息通知
    rpc LivePush (LivePushReq) returns (LivePushResult){
    }
    // 分页获取群用户id 用于直播推送
    rpc GetGroupUserIds(GetGroupUserIdsReq) returns (GetGroupUserIdsRsp) {
    }
}

message GetGroupUserIdsReq {
    int32   chanId = 1; // 群组频道id
    int32   userId = 2; // userid
    int32   offset = 3; // offset
    int32   length = 4; // length
}
message GetGroupUserIdsRsp {
    GroupLiveReplyCode   RetNo = 1; // 返回错误码
    int32   Total = 2; // 群组成员总数
    int32   Count = 3; // 本次获取成员数
    repeated int32   Users = 4; // 成员ID列表
}

enum GroupLiveReplyCode {
    Successfuly = 0;
    UserUnknown = 90001; // 用户不存在
    ChanUnknown = 90002; // 群组不存在
    LiveUnknown = 90003; // 直播不存在
    LiveOnGoing = 90004; // 直播进行中
    HaveNoPower = 90005; // 没有权限
    IllegalArgs = 90006; // 非法参数
    InternalErr = 90007; // 服务内部错误
}

// @ added by qingsong at 2020.12.01 for live start
// rpc GroupLiveStart(LiveStartReq) returns (LiveStarRsp) {}
// 开播请求
message LiveStartReq {
    int32   BeginAt = 1;  // 必填：开播时间
    int32   GroupId = 2;  // 必填：直播群组 ID
    int32   LiveStat = 3;
    int32   LiveType = 4; // 必填：直播类型（公开，私密，...）
    int32   LiveUser = 5; // 必填：主播用户 ID
    int32   LiveRoom = 6;
    int64   LivePkId = 7; // 必填：直播房间唯一ID
    string  LiveFlag = 8; // 必填：直播标签(热舞，游戏 等)
    string  LiveName = 9; // 必填：直播房间名称
    string  LiveIcon = 10; // 必填：直播封面图片
}
// 开播返回
message LiveStartRsp {
    GroupLiveReplyCode ReplyCode = 1; //
    string  InviteUrl = 2; // 主播直播期间邀请入群链接
}
// @ added by qingsong at 2020.12.01 for live stop
// rpc GroupLiveStop(LiveStopReq) returns (LiveStopRsp) {}
// 停播请求
message LiveStopReq {
    int32   GroupId = 1;
    int32   LiveUser = 2;
    int32   LiveStat = 3;
    string  LiveCode = 4; // 直播房间唯一识别码
}
// 停播应答
message LiveStopRsp {
    GroupLiveReplyCode RetCode = 1;
    int32   Invited = 2; // 主播本场直播邀请入群人数
}
// @ added by qingsong at 2020.12.01 for live user invite link
// 获取主播邀请链接
message GetLiveInviteUrlReq {
    int32   BeginAt  = 1;
    int32   GroupId  = 2;// 必填：直播群组 ID
    int32   LiveUser = 3; // 必填：主播用户 ID
}
message GetLiveInviteUrlRsp {
    GroupLiveReplyCode ReplyCode = 1; //
    string  InviteUrl = 2; // 主播直播期间邀请入群链接
}

// rpc EditLiveInfo(EditLiveInfoReq) returns (EditLiveInfoRsp) {}
// 编辑请求
message EditLiveInfoReq {
    int32   BeginAt = 1;  // 必填：开播时间
    int32   GroupId = 2;  // 必填：直播群组 ID
    int32   LiveStat = 3;
    int32   LiveType = 4; // 必填：直播类型（公开，私密，...）
    int32   LiveUser = 5; // 必填：主播用户 ID
    int32   LiveRoom = 6;
    string  LiveFlag = 7; // 必填：直播标签(热舞，游戏 等)
    string  LiveName = 8; // 必填：直播房间名称
    string  LiveIcon = 9; // 必填：直播封面图片
}

message EditLiveInfoRsp {
    GroupLiveReplyCode ReplyCode = 1; //
    string  ReplyData = 2; // error information.
}
// @ brief : group live rights check.
// rpc GroupLiveCheck(GroupLiveCheckReq)returns(GroupLiveCheckRsp){}
message GroupLiveCheckReq {
    int32   GroupId = 1;
    int32   LiveUser = 2;
}
message GroupLiveCheckRsp {
    GroupLiveReplyCode ReplyCode = 1; //
    string  ReplyData = 2; // error information.
}

// @ brief : get live invite user count.
// rpc GetLiveInviteCnt(GetLiveInviteCntReq) returns (GetLiveInviteCntRsp) {}
message GetLiveInviteCntReq {
    int32   GroupId = 1;
    int32   LiveUser = 2;
}
message GetLiveInviteCntRsp {
    GroupLiveReplyCode RetCode = 1; // // error information.
    int32   Invited = 2;
}
// rpc CheckUserInGroup(CheckUserInGroupReq) returns (CheckUserInGroupRsp)
message CheckUserInGroupReq {
    int32  GroupId = 1;
    int32  UserId = 2;
}
message CheckUserInGroupRsp {
    bool   InGroup = 1;
}

// 直播推送请求
message LivePushReq {
    repeated int32 user_ids = 1;
    int32 self_id = 2;
    string text = 3;
    int32 type = 4;
}

message LivePushResult{
    bool success = 1;
}

// 踢人
message ReqKickFromChannel {
    int32 channelId = 1;
    int32 kicker = 2; //谁踢人
    int32 kickee = 3; //谁被踢
    bool is_bot_user = 4; //被邀请者是不是机器人
    bool is_kicked = 5; // 是否是离开超级群\频道
    int32 Kicked_id = 6; //如果是超级群被踢的话将，此用户保存到被踢列表中
    int64 from_keyid = 7; //踢人者的KEYID
    Debug debug = 8;
}


message CheckUserNameReq{
    int32 userId = 1;
    string userName = 2;
    Debug debug = 3;
}

message CheckUserNameResp{
    bool occpuy = 1; //是否被占用
    uint32 error_code = 2;
    string error_msg = 3;
}


// 发送短信
message ReqSendCodeMsg {
    int32 userid = 1; // 发送短信用户id
    int64 access_hash = 2; // 用户hash
    uint64 keyid = 3; // 当前用户keyid
    string code = 4; // 验证码
    Debug debug = 5; // debug日志
}

// 禁言单个用户
message ChannelBannedRights {
    int32 flags = 1;
    bool view_messages = 2;
    bool send_messages = 3;
    bool send_media = 4;
    bool send_stickers = 5;
    bool send_gifs = 6;
    bool send_games = 7;
    bool send_inline = 8;
    bool embed_links = 9;
    int32 until_date = 10;

    /* @ add by Qingsong at 2019-11-14 for ban member rights. */
    bool invite_user = 11; // 邀請用戶
    bool pin_message = 12; // 置頂消息
    bool change_group_info = 13; // 修群组信息
    bool send_polls = 14; // 发起投票权限
}

message ReqEditBanChannelUser {
    int32 fromId = 1;
    int64 fromKeyId = 2;
    int32 channelId = 3;
    int32 bannedUserId = 4;
    int64 accessHash = 5;
    int32 util_date = 6;
    ChannelBannedRights channelBannedRights = 7;
    Debug debug = 8;
}


// 超级群全体禁言
message ReqEditEveryoneQuiet {
    int32 UserId = 1; // 是否频道
    int32 ChannelId = 2; // 是否超级群
    bool quiet = 3; // infoserver给的ID
    Debug debug = 4;
}

// 获取群用户信息
message GetChannelUserInfoReq{
    int32 channelId = 1;
    int32 fromId = 2;
    int32 userId = 3;
    int64 accessHash = 4;
    Debug debug = 5;
}

message GetChannelUserInfoResp {
    bytes reply = 1;
    int32 errorCode = 2; //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
    int32 ChannelId = 3; // 是否超级群
    int64 access_hash = 4;
    int32 FromId = 5;
}


//检测是否是对方是否是自己的联系人
message CheckIsSelfContactReq {
    int32 selfId = 1; //自己的Id
    int32 userId = 2; //检测方的id
    Debug debug = 3;
}

//检测是否是自己是否是对方的联系人的返回结果
message CheckIsSelfContactResult {
    bool IsSelfContact = 1; //对方是否是自己的联系人
    ReErrCode Errorcode = 2; //返回错误码
}

// 朋友圈关注接口
message MomentFollowReq{
    int64 user_id = 1; // 谁关注
    int64 follow_id = 2; // 被关注的用户
    int32 is_follow = 3; // 1-关注 2-取消
}

// 朋友圈关注接口
message MomentFollowResp{
    int32 errorCode = 1;
}


message MomentData{
    int64 forum_id = 1; // 发起该消息的帖子id
    int64 forum_type =2; // 发起该消息的帖子类型
    string forum_image = 3; // 发起该消息的帖子一张图片
    string forum_text = 4; // 发起该消息的帖子内容
    int32 with_id = 5;
    int64 msg_id = 6; // 发起该消息的互动消息内容Id
    string msg_content = 7; // 发起该消息的互动消息内容
    int64 is_followed = 8; // 是否关注该用户
}


message SysNotifyData{
    string msg_title = 1;
    int64 msg_time = 2;
    string msg_url = 3;
    string msg_button_text = 4;
    MomentData interact_msg = 5;
    bool is_push = 6;
}

message NotifyMedia{
    int64 seq = 1;
    string fid = 2;
    string content_type = 3;
    int64 part_num = 4;
    string file_name = 5;
    string md5 = 6;
    int32 width = 7;
    int32 height = 8;
}

message NotifyText{
    int64 seq = 1;
    string text = 2;
}

message SendMediaSysNotifyReq{
    int32 source_code = 1; // 朋友圈消息填1
    int32 business_code = 2; // 4-朋友圈评论消息 5-朋友圈回复消息 6-朋友圈点赞消息(只推送点赞消息,不推送取消点赞) 7-朋友圈@消息 8-朋友圈关注消息(只推送关注消息,不推送取消关注) 9-朋友圈提及消息
    repeated NotifyMedia notify_medias = 3;
    repeated NotifyText notify_texts = 4;
    repeated int32 users = 5;
    SysNotifyData data = 6;
    int32 from_id = 7;
    string msg_id = 8;
}



message FailUser{
    int32 user = 1;
    string msg = 2;
}

message SucceedUser{
    int32 user = 1;
    string msg = 2;
}

message SendMediaSysNotifyResult{
    uint32 error_code = 1;
    string error_msg = 2;
    repeated FailUser failUsers = 3;
    repeated SucceedUser SucceedUsers = 4;
}


message SearchUserByNicknameReq {
    string nickname = 1;
    repeated int32 user_ids = 2;
    int32 offset = 3;
    int32 limit = 4;
    int32 self_id = 5;
}

message SearchUserByNicknameResult{
    repeated userInfo user_infos = 1;
    ReErrCode Errorcode = 2;
}

message Entity{
    int32 type = 1;
    int32 offset = 2;
    int32 length = 3;
    uint32 user_id = 4;
    string url = 5;
}

message MomentNotifyData {
    int32 source_code = 1; // 朋友圈消息填1
    int32 business_code = 2; // 4-朋友圈评论消息 5-朋友圈回复消息 6-朋友圈点赞消息(只推送点赞消息,不推送取消点赞) 7-朋友圈@消息 8-朋友圈关注消息(只推送关注消息,不推送取消关注) 9-朋友圈提及消息
    int32 to_id = 3; // 接受通知的用户Id
    int32 with_id = 4; // 发起该消息的用户Id
    int64 forum_id = 5; // 发起该消息的帖子id
    int64 forum_type =6; // 发起该消息的帖子类型
    string forum_image = 7; // 发起该消息的帖子一张图片
    string forum_text = 8; // 发起该消息的帖子内容
    int64 msg_id = 9; // 发起该消息的互动消息内容Id
    string msg_content = 10; // 发起该消息的互动消息内容
    int64 is_followed = 11; // 是否关注该用户
    int64 msg_time = 12; // 发帖时间
    repeated Entity entites = 13; // 高亮
}

message MomentNotifyReq {
   repeated MomentNotifyData moment_notify_data = 1; // 朋友圈通知消息
}

message MomentNotifyResult {
    uint32 error_code = 1;
    string error_msg = 2;
}

//根据用户Id来获取用户信息selfId 代表自己的Id userId 代表需要获取的用户的Id
message CheckIsMuteContactReq {
    int32 self_id = 1;
    int32 user_id = 2;
}
message CheckIsMuteContactResult {
    ResultCode ErrorCode = 1; // 失败的错误码
    bool result = 2; //
    enum ResultCode {
        Success = 0;
        InternalError = 1;
    }
}

//联系人的基本信息
message contactInfo {
    int32 user_id = 1; //用户自己的id
    int32 contact_id = 2; //联系人的id
    string first_name = 3; //联系人备注
    string last_name = 4; //联系人备注
    bool is_self_contacted = 5; //此联系人是否是自己的联系人
    bool self_is_contacted = 6; //自己是不是此联系人的联系人
    bool star_mark = 7; //  是否为星标联系人
    bool has_phone = 8; // 是否通过电话号码添加
    int32 group_id = 9;
    string about = 10;
}


//获取用户联系人列表的请求
message ContatsGetContactsReq {
    int32 userId = 1; //用户的Id
    int64 keyId = 2; // 用户的keyId
    string contacthash = 3; //用户联系人的哈希值
    Debug debug = 4;
}

//用户联系人列表获取的返回
message ContatsGetContactsResult {
    repeated contactInfo contactArr = 1; //联系人的的信息们
    repeated userInfo userInfoArr = 2; //联系人们的用户信息们
    ReErrCode Errorcode = 3; //返回错误码

}

message MomentState {
    repeated int32 userId = 1;
    int32 type = 2;
}


message ReqUpdateMoments {
    repeated MomentState momentStates = 1;  //被更新用户ID列表
    int32 selfId = 2;           //发送用户id

}

message ResUpdateMoments{
    int32 code = 1; //1为成功,-1为失败
    string msg = 2; //返回描述
}



// ChatType 聊天类型
enum ChatType {
    ChatTypeZero = 0;       //用户
    PeerUser = 1;       //用户聊天
    PeerChat = 2;       //普通群聊天
    ChannelChat = 3;    //超级群聊天
}

// 消息来源ID定义
enum MsgFromID {
    MFI_UNKNOWN                                    = 0;                   // 未知来源
    MFI_IM                                         = 1;                   // 表示来源移动端（IM）
    MFI_Integral_Mall                              = 2;                   // 表示来源积分商城
    MFI_GameApi                                    = 3;                   // 表示来源GameAPI接口服务
}

// 积分业务通用协议请求
message ReqIntegralUniversalBusiness {
    string ip = 1; // 用户ip
    int32 imUserId = 2; // im侧用户标识
    uint64 imKeyId = 3; // im客户端keyid
    int32 businessId = 4; // 业务标识
    MsgFromID fromId = 5; // 来源标识　１表示来源移动端,2表示来源积分商城
    bytes data = 6; // JSON数据
}

// 积分业务通用协议响应
message ReplyIntegralUniversalBusiness {
    string data = 1; // JSON数据
}

// 游戏规则获取借口
message OtherTransReq{
     int32  UserId = 1;
     int64  KeyId = 2;
     string  IpAddr = 3;
     int64  ReqMessagId = 4;
     bytes  ReqBytes = 5;
}
// 游戏规则响应
message OtherTransResp{
    bytes RespBytes = 1;
}

// 设置用户性别和生日
message SetUserDetailReq {
    int32 user_id = 1; //用户ID
    int32 flags = 2; //位标识
    string first_name = 3; //用户昵称
    string photo = 4;
    int32 sex = 5; // 用户性别
    int32 birthday = 6; // 用户性别
    string extend = 7; // 用户其它详情扩展字段
}
// 设置用户性别和生日响应
message SetUserDetailResult {
    bool successful = 1; //是否成功
}

//根据用户userName来获取用户基本信息
message GetUserByUsernameReq {
    int32 self_id = 1;
    string username = 2;
}
//获取用户基本信息的返回结果
message GetUserInfoResult {
    userInfo Uinfo = 1; ///用户的基本信息
    ReErrCode Errorcode = 2; //返回错误码
}

// ####################################　红包游戏　######################################
// 发送红包游戏请求
message SendGameRedReq {
    int64 FromKeyId = 1;
    uint32 FromId = 2;
    bytes Req = 3;
    bytes RdpRsp = 4;
}
// 查询红包游戏请求
message QryGameRdpReq {
    int64 FromKeyId = 1;
    uint32 FromId = 2;
    bytes Req = 4;
}

// 领取红包游戏请求
message RcvGameRedReq {
    int64 FromKeyId = 1;
    uint32 FromId = 2;
    bytes Req = 3;
    bytes RdpRsp = 4;
}
// 红包游戏响应
message GameRedResp {
    bytes Result = 1;
    int32 Code = 2;
    string Msg = 3;
}


//################################# 红包相关协议转发　###############################
//发送红包请求
message SendRDPReq {
    Debug Debug = 1;
    int64 req_messageId = 2; //請求的messagId
    bytes ReqBytes = 3; //请求的端表示
    int32 red_messageId = 4; //請求的messagId
    int32 red_chanelId = 5; //請求的messagId
}
//发送红包/转账返回
message SendRDPResp {
    bytes RespBytes = 1; //返回结构
    int32 error_code = 2;
}

//查看红包/转账请求
message CheckRDPReq {
    Debug Debug = 1;
    int64 req_messageId = 2; //請求的messagId
    bytes ReqBytes = 3; //请求的端表示
}
//查看红包/转账返回
message CheckRDPResp {
    bytes RespBytes = 1; //返回结构
    int32 error_code = 2;
}

//接收红包/转账请求
message ReceiveRDPReq {
    Debug Debug = 1;
    int64 req_messageId = 2; //請求的messagId
    bytes ReqBytes = 3; //请求的端表示
}
//接收红包/转账返回
message ReceiveRDPResp {
    bytes RespBytes = 1; //返回结构
    int32 error_code = 2;
}

//################################ 编辑超级群群说明信息 editAbout ######################
// 返回参数
message ReplyEditChannelAbout {
    bool succeed = 1;
    int32 error_code = 2;
}

//ack to the title editing
message ReplyEditChannelTitle {
    bytes reply = 1; // 二进制，真实类型是mtproto.tl_updates_layer62
    int32 error_code = 2;
}
//机器人基础信息更改
message BotUpdateInfo {
    int32 user_id = 1;
    int32 bot_info_version = 2;
    bool bot_chat_history = 3;
    bool bot_no_chat = 4;
    Debug debug = 5;
}

//机器人更改信息的返回结果
message BotUpdateInfoResult {
    ReErrCode Errorcode = 1; //返回错误码
}

//################################ 超级群中置顶一条消息 updatePinnedMessage ######################

// 返回参数
message ReplyUpdatePinnedChannelMessage {
    bytes reply = 1; // 二进制，真实类型是mtproto.tl_updates_layer62
    int32 error_code = 2;
}

// 推出超级群返回
message ReplyLeaveChannel {
    bytes reply = 1; // 二进制，真实类型是mtproto.tl_updates_layer62
    int32 error_code = 2;
}


message ReqGetAllChats {
    int32 fromid = 1;
    Debug debug = 2;
}

message ReplyGetAllChats {
    repeated int32 chats = 1;
    int32 error = 2;
}

//#####################超级群get diff###################
message ReqGetchannelDifference {
    int32 fromId = 1;
    int64 fromKeyId = 2;
    int32 flags = 3;
    bool force = 4;
    int32 channelId = 5;
    int32 pts = 6;
    int32 limit = 7;
    int32 range_MinId = 8;
    int32 range_MaxId = 9;
    int32 device = 10; //1, pc 2, android 3, ios
    Debug debug = 11;
}

message ReplyChannelDiffCommon {
    bytes difference = 1; //  1: ReplyGetChannelDifferenceEmpty 2: ReplyGetChannelDifference 3: ReplyGetChannelDifferenceTooLong tooLong
    int32 error_code = 2;
}
//获取fullchannel
message ReqFullchannel {
    int32 fromId = 1;
    int32 channelId = 2;
    int64 accessHash = 3;
    Debug debug = 4;
}
//返回fullchannel
message ReplyFullChannel {
    bytes Updates = 1; // 二进制，真实类型是mtproto.tl_updates_layer62
    int32 error_code = 2;
}

//############################# 删除消息 ####################
message ReqDeleteMessages {
    int32 fromid = 1; // 删除方id
    uint64 from_keyid = 2;
    int32 flags = 3; //标识
    bool revoke = 4; // shifou wei duifang shanchu
    repeated int32 id = 5;
    int32 channelid = 6;
    Debug debug = 8;
}

message ReplyDeleteMessages {
    bytes result = 1;
    int32 error = 2; // 1.获取失败 2.删除失败
}

//注册指定用户的请求
message RegisterUserInfoReq {
    int32 user_id = 1;
    int64 access_hash = 2;
    string PhoneNumber = 3; //电话号码
    string FirstName = 4;
    string LastName = 5;
    bool is_bot = 6;
    int32 bot_info_version = 7;
    bool bot_chat_history = 8;
    bool bot_no_chats = 9;
    string CountryCode = 10;
    string LocalPhone = 11;
    int32 dc = 12;
    int32 GroupNow = 13;
    Debug debug = 14;
    int32 Sex = 15;
    int32 birthday = 16;
}

//获取fullchannel
message ReqGetFullChannel {
    int32 fromId = 1;
    int32 channelId = 2;
    int64 accessHash = 3;
    Debug debug = 4;
    //messagedb.UserDialogAndMsg ChannelDialog = 5;
    //ChatMsgMeta msgMeta = 6;
}

//获取participants
message ReqGetParticipants {
    int32 offSet = 1;
    int32 limit = 2;
    int32 partiType = 3;
    int32 channelId = 4;
    int32 fromId = 5;
    string q = 6;
    int32 Hash = 7; // 校验唯一的， 如果不为0 则要进行唯一判断
    Debug debug = 8;
}

// 请求参数
message ReqUpdatePinnedChannelMessage {
    int32 from_id = 1;
    int32 flags = 2;
    bool silent = 3;
    //    InputChannel channel = 4;
    int32 channelId = 4;
    int32 id = 5;
    int64 from_keyid = 6;
    Debug debug = 7;

}

// 请求参数
message ReqEditChannelAbout {
    int32 from_id = 1;
    int64 fromKeyId = 2;
    int32 channelId = 3;
    string about = 4;
    int64 accessHash = 5;
    Debug debug = 6;
}

// edit title
message ReqEditChannelTitle {
    int32 channelId = 1;
    string title = 2;
    int32 userId = 3;
    int64 from_keyid = 4;
    Debug debug = 5;
}

message ReplyChannelData {
    bytes reply = 1;
    int32 errorCode = 2; //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
    int32 ChannelId = 4; // 是否超级群
    int32 FromId = 5;
}


message ReqDelManualBlockList{
    BlockUser UnBlockUser =1;
    int32 bot_id = 2;
    Debug debug = 3;
}

message ReqSetManualBlockList{
    BlockUser BlockUser =1;
    int32 bot_id = 2;
    Debug debug = 3;
}

//禁言某用戶
message BlockUser {
    int32 userId =1;
    int64 blockTime =2;  //禁言时间
    int64 groupId =3;
}

message ManualBlockReplyData{
    bytes replyData = 1;
    bool reply = 2;
    int32 errorCode = 3;
}

//存储sticker 集合概要 Documents请求
message StoreShopStickerSetDocumentsReq {
    int32 id = 1;
    repeated int32 documents = 2;
    Debug debug = 3;
}

//存储sticker 集合概要 Documents返回结果
message StoreShopStickerSetDocumentsResult {
    ReErrCode Errorcode = 1; //返回错误码
}

//结构体AuthorStickerSet
message AuthorStickerSet{
    int32 user_id =1;
    int64 stickerset_id = 2;
    string short_name = 3;
    bool archived = 4;
    bool installed = 5;
    bool disabled = 6;
    int32 ordered = 7;
    int32 created = 8;
    int32 updated = 9;
}

//获取作者所有sticker
message GetAuthorAllStickerSetReq{
   int32 user_id = 1;
}

//获取作者所有sticker返回
message GetAuthorAllStickerSetResult{
   ReErrCode ErrorCode = 1; //返回错误码
   repeated AuthorStickerSet sets = 2;
}

//删除单个sticker
message DeleteStickerPackDocumentReq{
    int32 id = 1;
    int64 stickerset_id = 2;
}

//删除单个sticker返回
message DeleteStickerPackDocumentResult{
    ReErrCode Errorcode = 1; //返回错误码
}

//获取指定的sticker集合的请求
message GetStickerSetInfoReq {
    int32 id = 1; //sticker的id
    string short_name = 2;
    bool is_id = 3; //是否是根据Id来查 true 根据Id查询 false根据short_name 查询
    Debug debug = 4;
}

//sticker set 的基础信息
message StickerSetInfo {
    int32 id = 1;
    int64 access_hash = 2;
    bool free = 3;
    bool official = 4;
    bool masks = 5;
    string title = 6;
    string short_name = 7;
    int32 count = 8;
    int64 hash = 9;
    string emoticon = 10;
    repeated int32 documents = 11;
}

////获取指定的sticker集合的返回
message GetStickerSetInfoResult {
    StickerSetInfo stickerSetInfo = 1; //sticker的基础信息
    ReErrCode Errorcode = 2; //返回错误码
}

//删除sticker商城的请求
message DeleteStickerSetReq {
    int32 stickerId = 1;
    Debug debug = 2;
    int32 user_id = 3; //sticker作者id - 2018.10.18 新增
}

//删除sticker商城的返回
message DeleteStickerSetResult {
    ReErrCode Errorcode = 1; //返回错误码
}

//用户安装sticker集合的请求
message StoreUserStickerSetReq {
    int32 user_id = 1;
    int32 stickerset_id = 2;
    bool installed = 3;
    bool disabled = 4;
    int32 order = 5;
    bool archived = 6;
    Debug debug = 7;
}

//用户安装sticker集合的返回
message StoreUserStickerSetResult {
    ReErrCode Errorcode = 2; //返回错误码
}

//存储sticker文档的请求
message StoreStickerPackDcReq {
    StickerPackDocumentBase stickpackbase = 1;
    Debug debug = 2;
}

//存储sticker文档的返回
message StoreStickerPackDcResult {
    int32 id = 1;
    ReErrCode Errorcode = 2; //返回错误码
}
//存储sticker 集合概要的请求参数
message StoreShopStickerSetReq {
    int64 access_hash = 1;
    bool free = 2;
    bool official = 3;
    bool masks = 4;
    string title = 5;
    string short_name = 6;
    int32 count = 7;
    int64 hash = 8;
    string emoticon = 9;
    repeated int32 documents = 10;
    Debug debug = 11;
    int32 user_id = 12; //sticker作者id - 2018.10.18 新增
}
//存储sticker 集合概要的返回
message StoreShopStickerSetResult {
    int32 id = 1; //Sticker生成的id
    ReErrCode Errorcode = 2; //返回错误码
}
//###################################  avthumb.pb.go  #############################
// StatusCode 状态码
enum StatusCode {
    StatusCodeOK = 0;   // 操作成功
    StatusCodeFail = 1; // 操作失败
}

// ResizeRequest 重设图片大小请求
message ResizeRequest {
    bytes data = 1;         // 图片数据
    uint32 width = 2;       // 图片宽度
    uint32 height = 3;      // 图片高度
}

// ResizeReply 重设图片大小响应
message ResizeReply {
    StatusCode status = 1;  // 状态码
    bytes data = 2;         // 图片数据
}

// ConstraintRequest 约束图片大小请求
message ConstraintRequest {
    bytes data = 1;         // 图片数据
    uint32 max_size = 2;    // 最大尺寸
    bool output_webp = 3;   // 输出webp格式
}

// ConstraintReply 约束图片大小响应
message ConstraintReply {
    StatusCode status = 1;          // 状态码
    bytes data = 2;                 // 图片数据
    uint32 width = 3;               // 图片宽度
    uint32 height = 4;              // 图片高度
    uint32 origin_width = 5;        // 图片原始宽度
    uint32 origin_height = 6;       // 图片原始高度
}

// CompressImageRequest 压缩图片请求
message CompressImageRequest {
    bytes data = 1;         // 图片数据
    uint32 quality = 2;     // 图片质量(0-100)
}

// CompressImageReply 压缩图片响应
message CompressImageReply {
    StatusCode status = 1;  // 状态码
    bytes data = 2;         // 图片数据
}

// VideoPreviewRequest 获取视频预览请求
message VideoPreviewRequest {
    bytes data = 1;         // 视频数据
    uint32 max_size = 2;    // 预览图最大尺寸
}

// VideoPreviewReply 获取视频预览响应
message VideoPreviewReply {
    StatusCode status = 1;  // 状态码
    uint32 duration = 2;    // 播放时长
    bytes preview = 3;      // 图片预览
    uint32 width = 4;       // 预览图宽度
    uint32 height = 5;      // 预览图高度
}

// AudioPreviewRequest 获取音频预览请求
message AudioPreviewRequest {
    bytes data = 1;         // 音频数据
    uint32 max_size = 2;    // 封面图最大尺寸
}

// AudioPreviewReply 获取音频预览响应
message AudioPreviewReply {
    StatusCode status = 1;  // 状态码
    uint32 duration = 2;    // 播放时长
    bytes cover = 3;        // 封面图片
    string title = 4;       // 标题
    string artist = 5;      // 演奏者
    uint32 width = 6;       // 封面图宽度
    uint32 height = 7;      // 封面图高度
}

//###################################  pbmessageserver.pb.go  #############################
//获取participants
message ReqParticipants {
    int32 offSet = 1;
    int32 limit = 2;
    int32 partiType = 3;
    int32 channelId = 4;
    int32 fromId = 5;
    string q = 6;
    int32 Hash = 7; // 校验唯一的， 如果不为0 则要进行唯一判断
    Debug debug = 8;
}

//返回participants
message ReplyParticipants {
    bytes Updates = 1; // 二进制，真实类型是mtproto.tl_updates_layer62
    int32 error_code = 2;
}

message ReqCreateChat {
    int32 chatid = 1; // 群id
    string title = 2; // 名称
    int32 creator = 3; // 创建者
    repeated int32 users = 4; // 用户数据
    uint64 from_keyid = 5;
    Debug debug = 6;
}

message ReplyCreateChat {
    bytes result = 1; // 创建普通群返回
    int32 error = 5; // 1: 创建者id为0 2: 被加入的成员不允许 3: 成员不允许被添加 4: 其他, 5: 消息处理出错
}

message ReqMigrateChat {
    int32 fromid = 1; // 邀请者id
    int32 chatid = 2; //等待升级的普通群ID
    //    int32 channelid = 3; //升级后的超级群ID
    //    string title = 4; // 群标题
    //    repeated int32 members = 5; //现有用户
    //    string Phone = 6; //电话
    uint64 fromkeyid = 3; //邀请者的KEYID
    //    bool isBroadCast = 8; //超级群还是频道
    Debug debug = 4;
}

message ReplyMigrateChat {
    //    int32 msgid = 1; // 消息id
    //    int64 randomid = 2; // 消息随机id
    //    int32 date = 3; // 消息时间
    //    int32 pts = 4; // 消息pts
    //    int32 channelmsgid = 5; //频道的消息ID
    //    int32 channelpts = 6; //频道的PTS
    bytes result = 7; // 二进制，真实类型是mtproto.tl_updates_layer62
    int32 error = 8; // 1. 普通群处理失败 2. 超级群处理失败 3. 其他错误
}

//邀请用户进入超级群
message ReqJoinChannel {
    int32 channelId = 1; //超级群ID
    int32 userId = 3; // 自己的ID
    int64 from_keyid = 5; //自己的KEYID
    int64 accessHash = 6; //超级群的哈希
    bool byLink = 7; //是否通过链接加入
    int32 invitor = 8;
    int32 invite_type = 9;//邀请类型 0-链接 1-二维码
    Debug debug = 10;
}

//邀请操作的ACK
message ReplyJoinChannel {
    bytes reply = 1; // 二进制，真实类型是mtproto.tl_updates_layer62
    int32 error_code = 2;
}

//转移群主
message ReqChangeGroupAndChannelCrator {
    int32 GroupId = 1;
    int32 fromId = 2;
    int32 OperatorId = 3;
    bool IsChat = 4;
}

//回复转移群主
message ReplyChangeGroupAndChannelCrator {
    bool valid = 1;
    int32 error_code = 2;
}

// 机器人调用接口
message ReqBotCallMessageMedia {
    int32 fromBotId = 1;
    string MsgTxt = 2;
    bytes request = 3;
    int32 layer = 4;
    Debug debug = 5;
}

// 获取dialog接口
message RequestDialog {
    int32 userid = 1; // 用户id
    int32 flags = 2; // 标识位
    int32 offset_date = 3; // 偏移时间
    int32 offset_id = 4; // 偏移id
    bytes offset_peer = 5; // 偏移对象 (mt 协议)
    int32 limit = 6; // 偏移长度
    Debug debug = 7;
}
// 返回dialog
message ReplyDialog {
    //    repeated DialogSlice dialog = 1;
    bytes result = 1; // 对话框数据返回
    int32 error = 2; // 1: 无法获取到 2: userid 为0  3: 数据库返回超时 4: 消息服务crash
}

// 用户分数
message UserScore {
    int32 userid = 1;  // 用户id
    int32 score = 2;  // 用户分数
}

// 调用设置分数
message ReqSetGameScore {
    int32  userid = 1;  // 用户id
    repeated UserScore  scores  = 2;  // 新分数（非负数）
    bool   force  = 3;  // 如果为true 则覆盖原分数  如果为false则新分数大于旧的分数才会更新
    bool   disable_edit_message = 4; // 为true则不编辑
    int32  chat_id = 5; // 如果未指定inline_message_id，这里就需要填chatid
    int32  chat_type = 6;// 1-单聊 2-普通群 3-超级群
    int32  message_id = 7;  // 如果未指定inline_message_id，则需要填这里的message_id
    string inline_message_id = 8; // 如果未指定chatid或者message_id 就需要填写inline_message_id
    int32  botid = 9;  // 请求的机器人id
    Debug debug = 10; // debug
}
// 设置分数返回
message ReplySetGameScore {
    bool succeed = 1;
    string error = 2;
    int32  errorcode = 3;
}

message ReplyBanChannelUser {
    bytes Updates = 1; // 二进制，真实类型是mtproto.tl_updates_layer62
    int32 error_code = 2;
}
message ReqBanChannelUser {
    int32 fromId = 1;
    int64 fromKeyId = 2;
    int32 channelId = 3;
    int32 bannedUserId = 4;
    int64 accessHash = 5;
    int32 util_date = 6;
    ChannelBannedRights channelBannedRights = 7;
    Debug debug = 8;
}


//请求给定channel
message ReqGetChannels {
    repeated int32 channelIds = 1;
    int32 fromId = 2;
    Debug debug = 3;
}

//返回get channles
message ReplyGetChannels {
    bytes reply = 1;
    int32 error_code = 2;
}

message ReqDeleteChatUser {
    int32 fromid = 1; // 用户id
    int32 chatid = 2; // 群id
    int32 userid = 3; // 被删除人id
    uint64 from_keyid = 4;
    Debug debug = 6;
}

message ReplyDeleteChatUser {
    bytes result = 1;
    int32 error = 2; // 1.发起方id为0 2: 群id为0 3: 自增pts和msgid失败
}

message ChannelInactiveUser{
	int32 id = 1;           //用户ID
	string name = 2;        //用户名
	int32 time = 3;         //活跃时间
	string timeStr = 4;     //活跃时间格式化字符串
}
message GetChannelInactiveUsersReq{
    int32 channelId = 1;
    int32 limit = 2;
    int32 userid = 3;
}
message GetChannelInactiveUsersResult{
    repeated ChannelInactiveUser users = 1;
    int32 count = 2;    //群当前总人数
    int32 errcode = 3; //返回错误码
}

// 机器人调用接口-Inline
message ReqBotInlineCall {
    Debug debug = 1; // debug
    int32 user_id = 2; // 用户id
    int32 bot_id = 3; // 机器人id
    uint64 message_id = 4; // msg_id
    uint64 key_id = 5; // keyid
    uint64 session_id = 6; // sessionid
    bytes data = 7; // tl encode data
    string id = 8; // sendInline时客户端带的id
}
// 机器人返回接口-Inline
message ReplyBotInlineCall {
    int32 err_code = 1;
    string message = 2;
    InlineCall inlinecall=3;

}
message InlineCall{
    int32 MsgId = 1;
    int32 FromId = 2;
    int32 ChatId = 3;
    int32 ChatType = 4;
    int32 BotId = 5;
}

// 发送给对方所有端
message ReqSendUserMsg {
    int32 fromid = 1; // 发送方id
    int64 fromKeyId = 2; // 发送方keyid
    int32 toid = 3; // 接收方id
    bytes data = 4; // Mt数据
    Debug debug = 5; // debug日志
}
// 置顶对话框返回
message ReplyBool {
    bool result = 1;
    int32 error = 2; // 1: 对话框不存在  2:无法置顶 3:其他错误
}

// 机器人调用接口
message ReqBotCall {
    int32 frombotId = 1;
    bytes request = 2;
    int32 layer = 3;
    Debug debug = 4;
}

// 机器人返回接口
message ReplyBotCall {
    bytes result = 1;
    int32 error = 2;
}


message ReqGetMessageByUserIdUuid {
    int32 UserId = 1;
    int64 Uuid = 2;
    Debug debug = 3;
}
message ReplyGetMessageByUserIdUuid {
    UserMsg UserMessage = 1;
    int32 error_code = 2;
}


message ReqGetChannelMessageByChannelIdMsgId {
    int32 ChannelId = 1;
    int32 MsgId = 2;
    Debug debug = 3;
}
message ReplyGetChannelMessageByChannelIdMsgId {
    UserMsg UserMessage = 1;
    int32 error_code = 2;
}

message ReqGetMessageByUserIdMsgId {
    int32 UserId = 1;
    int32 MsgId = 2;
    Debug debug = 3;
}
message ReplyGetMessageByUserIdMsgId {
    UserMsg UserMessage = 1;
    int32 error_code = 2;
}

//###################################  storage_proto.pb.go  #############################
// 网关上传文件描述信息请求
message MsgFileDescReq {
    uint64                 fid           = 1;        // 存储服务分配存储文件的唯一标识
    uint64                 access_hash   = 2;        // 访问hash
    bytes                  data          = 3;        // 数据
}
// 网关上传文件描述信息响应
message MsgFileDescResp{
    ERpcResultCode         result        = 1;        // 结果码
}

// 服务上传下载限制请求
message MsgServiceLimitReq {
    uint32                 reserved      = 1;        // 保留用
}
// 服务上传下载限制响应(单位：Byte)
message MsgServiceLimitResp {
    uint32                 usfsl         = 1;        // 上传小文件大小限制，usfsl=>upload small file size limit
    uint32                 ubfssl        = 2;        // 上传大文件分片大小限制，ubfsl=>upload big file slice size limit
    uint32                 dssl          = 3;        // 下载分片大小限制，usfsl=>download slice size limit
}

// 网关取Fid请求
message MsgGetFidReq {
    uint64                 keyid         = 1;        // Ref 消息协议
    int64                  fileid        = 2;        // Ref 消息协议
    uint32                 file_type     = 3;        // Ref 消息协议 1 small 2: big
    string                 md5           = 4;        // file_type为1时的文件hash，如果与服务实际收到不符丢掉；另外加密聊天客户端没有传md5,为空放弃校检
    uint32                 part_total    = 5;        // file_type为2时的文件分片总数，如果与服务实际收到不符丢掉
}
// 网关取Fid响应
message MsgGetFidResp{
    uint64                 fid           = 1;        // 存储服务分配存储文件的唯一标识
    uint64                 access_hash   = 2;        // 访问hash
    uint64                 file_size     = 3;        // 文件大小
    ERpcResultCode         result        = 4;        // 结果码
}

// 网关上传文件请求
message MsgFilePartsReq {
    uint64                 keyid         = 1;        // Ref 消息协议
    int64                  fileid        = 2;        // Ref 消息协议
    uint32                 part_id       = 3;        // 文件片ID，备注：从0开始分配
    uint32                 file_type     = 4;        // Ref 消息协议 1 small 2: big
    uint32                 part_total    = 5;        // file_type为2时有效，大文件片总数，小文件没有
    bytes                  data          = 6;        // 数据
}
// 网关上传文件响应
message MsgFilePartsResp{
    ERpcResultCode         result        = 1;        // 结果码
}

// 上传文件请求
message MsgUploadFileReq {
    storageservice.UploadReqPara1         para1         = 1;        // Ref
    storageservice.UploadReqPara2         para2         = 2;        // Ref
    bytes                  data          = 3;        // 数据
}


// 上传文件响应
message MsgUploadFileResp {
    ERpcResultCode         result        = 1;        // 结果码
    storageservice.FileUploadRespPara     para1         = 2;        // Ref
    storageservice.FidPara                para2         = 3;        // Ref，仅用于非分片文件上传
    uint64                 access_hash   = 4;        // 仅用于非分片文件上传存储之后的访问hash
}

// 下载文件请求
message MsgDownloadFileReq {
    uint64                 fid           = 1;        // 存储服务分配存储文件的唯一标识
    uint64                 access_hash   = 2;        // 访问hash
    uint32                 offset        = 3;        // 起始偏移，从0开始
    uint32                 length        = 4;        // 长度
}
// 下载文件响应参数1
message DownloadFileRespPara1 {
    uint64                 fid           = 1;        // 存储服务分配存储文件的唯一标识
    uint32                 offset        = 2;        // 起始偏移，从0开始
    string                 file_name     = 3;        // 上传文件时的文件名
}
// 下载文件响应参数2
message DownloadFileRespPara2 {
    uint32                 length        = 2;        // 长度
    bytes                  data          = 3;        // 数据
}
// 下载文件响应
message MsgDownloadFileResp {
    ERpcResultCode         result        = 1;        // 结果码
    DownloadFileRespPara1  para1         = 2;        // Ref, 保留选用，当result = RRC_OK 且选用时有效
    DownloadFileRespPara2  para2         = 3;        // Ref，当result = RRC_OK有效
}

// 查询对象信息请求
message MsgQueryObjInfoReq {
    uint64                 fid           = 1;        // 存储服务分配存储文件的唯一标识
}
// 查询对象信息响应参数
message QueryObjInfoRespPara {
    string                 name          = 1;        // 文件名
    uint64                 size          = 2;        // 文件大小（Byte）
    uint64                 access_hash   = 3;        // 访问hash，仅针对机器人服务返回处理
}
// 查询对象信息响应
message MsgQueryObjInfoResp {
    QueryObjInfoRespPara   para          = 1;        // Ref
    ERpcResultCode         result        = 2;        // 结果码
}

// 网关获取文件描述信息请求
message MsgGetFileDescReq {
    uint64                 fid           = 1;        // 存储服务分配存储文件的唯一标识
    uint64                 access_hash   = 2;        // 访问hash
}
// 网关获取文件描述信息响应
message MsgGetFileDescResp{
    ERpcResultCode         result        = 1;        // 结果码
    bytes                  data          = 2;        // 数据
}

//###################################  channelservice.pb.go  #############################
//获取channel信息  不带user信息
message GetChannelInfoReq {
    int32 channel_id  = 1 ; //channle的Id
    int64 access_hash = 2 ; //哈希值
    Debug Dlog = 3 ; //日志
}
//群基础信息
message GetChannelInfoResp {
    ChannelInfoBase  baseInfo    = 1 ;  //基础信息  不带user信息
    ChatResultCode   resultcode  = 2 ;     //返回结果码
}

//###################################  botserver.pb.go  #############################
message ReqGetAdminGroups {
    int32 UserID     = 1;
    //int32 PeerFilter = 2; // 2：只要普通群 4：只要超级群 8：只要频道 （可相互组合 ex: 2|4|8 暂时不支持单聊)
    Debug debug = 2;
}

message ReqGetGroups {
    int32 UserID     = 1;
    int32 PeerFilter = 2; // 2：只要普通群 4：只要超级群 8：只要频道 （可相互组合 ex: 2|4|8 暂时不支持单聊)
}

message Peer {
    int32 PeerID    = 1;
    string PeerName = 2;
}

message ReplyGetGroups {
    repeated Peer Groups      = 1; // 普通群
    repeated Peer SuperGroups = 2; // 超级群
    repeated Peer Channels    = 3; // 频道
}

message ReqDeleteMessage{
    ChatType ChatType =1;
    int32 user_id = 2;
    int32 chat_id = 3;
    repeated int32 msg_id = 4;
    Debug debug = 5;
}

message ReqSendChatAction{
    ChatType ChatType =1;
    int32 user_id = 2;
    int32 chat_id = 3;
    bytes actionData = 4 ;
    Debug debug = 5;
}

message ReqData{
    ChatType ChatType =1;
    bytes reqData = 2 ;
    int32 bot_id = 3;
}

message ReplyData{
    bytes reply = 1; //回覆結果
    int32 error = 2;
}

message ReqGetChatMembersCount{
    ChatType ChatType =1;
    int32 user_id = 2;
    int32 chat_id = 3;
    Debug debug = 4;
}

message ReplyGetChatMembersCount{
    int32 ChatMembersCount = 1;
    int32 ErrorCode = 2;
}

//通过群Id 用户Id 获取群基本信息
message GetChatInfoReq {
    int32        chat_id    = 1 ; //群id
    int32        user_id    = 2 ; //用户id
    bool         robot_get  = 3 ; //是否是机器人获取
    Debug Dlog       = 4 ; //日志
}

//获取用户信息、群、超级群信息的请求
message GetUsersChatsReq {
    int32 userid             = 1; // 获取方id
    repeated int32 users     = 2; // 获取用户信息的用户id数组
    repeated int32 chatid    = 3; //获取普通群信息的群id数组
    repeated int32 channelid = 4; // 获取超级群用户信息的超级群id数组
    int32 protocol_layer     = 5; // 协议层数
    Debug Dlog        = 6; //日志
}

//获取用户信息、群、超级群信息的返回
message GetUsersChatsResult {
    //repeated ChannelInfoBase channels = 1;
    //repeated GetChatInfoResp chats = 3;
    repeated bytes channels = 1;
    UserInfoArray users = 2;
    repeated bytes chats = 3;
    repeated int32 no_chats = 4;
    repeated int32 no_chans = 5;
    ChatResultCode resultcode = 6;//结果码
}

//根据用户id获取用户ID
message GetUserInfoByIdReq {
    int32 self_id = 1; //自己的用户ＩＤ
    int32 user_id = 2; //需要获取的用户ID
    Debug debug = 3;
}

message GetUserInfoByIdArrReq {
    int32 self_id = 1; //自己的用户ＩＤ
    repeated int32 user_ids = 2; //需要获取的用户ID
    Debug debug = 3;
}

//更新用户信息
message UpdateUserProfileReq {
    int32 user_id = 1; //用户ID
    int32 flags = 2; // flags 第0 位 为更新firstName 第一位 last_name 第二位为 about
    string first_name = 3;
    string last_name = 4;
    string about = 5;
    Debug debug = 6;
}

//更新用户昵称等的返回结果
message UpdateUserProfileResult {
    userInfo Uinfo = 1; //用户基本信息
    ReErrCode Errorcode = 2; //返回错误码
}

//根据用户电话号码来获取用户信息
message GetUserByphone {
    string phone = 1;
    Debug debug = 2;
}

message UpdateBotInfoSuppReq{
    int32 UserId = 1;
    string Placeholder = 2;
    bool  geo = 3;
    Debug debug = 4;
}

message UpdateBotInfoSuppResult{
    ReErrCode Errorcode = 1;
}


//更新机器人头像请求
message UpdateBotPicRequest {
    int32 bot_id = 1;
    bytes photo = 2; //(mtproto.TL_photo_layer105)
    Debug debug = 3;
}

message UpdateBotPicResult {
    ReErrCode Errorcode = 2; //返回错误码
}

//更新用户的username的请求
message UpdateuserNameReq {
    int32 user_id = 1; //用户的ID
    string userName = 2; //需要更新的用户名
    Debug debug = 3;
    int64 key_id = 4;
}

//更新用户的username的返回结果
message UpdateuserNameResult {
    userInfo Uinfo = 1; ///用户的基本信息
    ReErrCode Errorcode = 2; //返回错误码
}


//注册指定用户的请求
message RegisterUserInfoResult {
    userInfo uinfo = 1;
    ReErrCode Errorcode = 2; //返回错误码
}

//删除账号的请求
message DeleteAccountByIdReq {
    int32 user_id = 1; //被删除账号的用户id
    int32 del_id = 2; //删除者的Id
    Debug debug = 3;
}

//删除账号的返回结果
message DelAccountResult {
    ReErrCode Errorcode = 1; //返回错误码
}

//用户注册的请求结构
message SignUpReq {
    string PhoneNumber = 1; //电话号码
    string PhoneCodeHash = 2;
    string PhoneCode = 3; //验证码
    int64 keyId = 5; //用户的keyId(端的标识)
    string FirstName = 6;
    string LastName = 7;
    bool is_bot = 8;
    int32 bot_info_version = 9;
    bool bot_chat_history = 10;
    bool bot_no_chats = 11;
    int32 dc_id = 12;
    Debug debug = 13;
    string country_code = 14; // 国家码
    string local_phone = 15; // 不带国家码的号码
}

message AuthSignUpResult {
    ResultCode code = 1;
    userInfo userInfo = 2;
    enum ResultCode {
        Success = 0;
        InternalError = 1; // 服务器内部错误
        PhoneNumberInvalid = 2; // 无效的电话号码
        PhoneNumberOccupied = 3; // 电话号码已注册
        CaptchaExpired = 4; // 验证码失效
        CaptchaInvalid = 5; // 验证码无效
        FloodWait = 6;
        SignUpRobotBlocked = 7; // 机器人注册接口暂时关闭
    }
}

//getfull user的请求
message GetFullUserReq {
    int32 selfId = 1; //自己的用户Id
    int32 UserId = 2; // 需要获取的用户的ID
    int64 AccessHash = 3; //需要获取的用户的哈希值
    Debug debug = 4; //日志记录相关的
}

//getfull user的请求
message GetFullUserResult {
    userInfo uinfo = 1; //用户的基础信息
    bool isblocked = 2; //此用户是否是自己的黑名单
    bool phone_calls_private = 3; //userfull需要
    bool phone_calls_available = 4; //userfull需要
    string about = 5; //用户的个性签名
    int32 common_chat = 6; //共同群的个数
    string extend = 7; //用户的扩展字段们 年龄，性别 {Age:1111, Sex: 1, Address: "china"}
    ReErrCode Errorcode = 8; //返回错误码
}

//根据用户userName来获取用户基本信息
message GetUserByUsername {
    int32 self_id = 1;
    string username = 2;
    Debug debug = 3;
}

//获取群的完整信息
message ReqGetFullChat {
    int32 fromid = 1;
    int32 chatid = 2;
    Debug debug = 3;
}
message ReplyGetFullChat {
    bytes result = 1;
    int32 error = 2;
}

// 退出超级群
message ReqLeaveChannel {
    int32 channelId = 1; //退出的超级群ID
    int32 userId = 2; // 退出的用户
    int64 from_keyid = 3; //退出用户的KEYID
    Debug debug = 4;
}


//发送媒体
message ReqSendMedia {
    int32 fromid = 1; // 发送方id
    int32 flags = 2;
    bool silent = 3;
    bool background = 4;
    bool clear_draft = 5;
    bytes peer = 6;
    int32 reply_to_msg_id = 7;
    bytes media = 8;
    repeated bytes multi_media = 9;
    int64 random_id = 10;
    bytes reply_markup = 11;
    int64 newfileid = 12;
    uint64 fromkey_id = 13; // 发送方的key_id
    repeated int32 chatmeber = 14;
    Debug debug = 15;
    int32 via_bot_id = 16; //via_bot_id
}
// 状态返回
message ReplyResult {
    bytes result = 1;
    int32 error = 2; //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
}

//编辑群名字
message ReqEditChatTitle {
    int32 fromid = 1; // 用户id
    int32 chatid = 2;
    string title = 3;
    uint64 from_keyid = 4;
    Debug debug = 5;
}

message ReplyEditChatTitle {
    bytes result = 1;
    int32 error = 5; //1. 群不存在 2. 编辑失败
}

//获取一个sticker下面的所有贴图信息的请求
message GetStickerSetPackDcInfosReq {
    int32 id = 1; //stickerSet 的id
    Debug debug = 2;
}

//获取一个sticker下面的所有贴图信息的返回
message GetStickerSetPackDcInfosResult {
    repeated StickerPackDocumentInfo StPDcInfo = 1;
}
//sticker集合里面具体内容
//存储单个sticker内容请求
message StickerPackDocumentBase {
    int64 attributes_stiker_set_id = 1;
    uint64 document_id = 2;
    int64 access_hash = 3;
    string mime_type = 4;
    int32 size = 5;
    string thumb = 6;
    int32 dc_id = 7;
    int32 date = 8;
    int32 attributes_image_size_w = 9;
    int32 attributes_image_size_h = 10;
    string attributes_stiker_alt = 11;
    int64 attributes_stiker_set_access_hash = 12;
    string attributes_file_name = 13;
}

message StickerPackDocumentInfo {
    int32 id = 1;
    StickerPackDocumentBase infoBase = 2;
}

message GetUserInfoByIdArrResult {
    repeated userInfo Uinfo = 1; ///用户的基本信息
    ReErrCode Errorcode = 2; //返回错误码
}

enum ErrorCode{
    ErrorCodeOk = 0;
    ErrorCodeUserNotExist = 10001;
}

message SetBotVerifiedReq{
    int32 user_id = 1; //用户ID
    bool verified =2; // 是否是官方
}

message SetBotVerifiedReply{
    ReErrCode Errorcode = 2; //返回错误码
}

message ContactsGetCommonContactsReq {
    repeated int32 user_ids = 1;
}

message ContactsGetCommonContactsResult{
    repeated userInfo user_infos = 1;
    ReErrCode Errorcode = 2;
}