// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: checkmsgrepeat.proto

package imcheckmsgrepeat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckMsgRepeatClient is the client API for CheckMsgRepeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckMsgRepeatClient interface {
	// CheckIsRepeated 检测是否重复message
	CheckIsRepeated(ctx context.Context, in *CheckIsRepeatedRequest, opts ...grpc.CallOption) (*CheckIsRepeatedReply, error)
	// StoreShortMessage 存储short_message
	StoreShortMessage(ctx context.Context, in *StoreShortMessageRequest, opts ...grpc.CallOption) (*StoreShortMessageReply, error)
	// DeleteShortMessage 删除short_message
	DeleteShortMessage(ctx context.Context, in *DeleteShortMessageRequest, opts ...grpc.CallOption) (*DeleteShortMessageReply, error)
	// DeleteShortMessageByDate 根据时间删除消息
	DeleteShortMessageByDate(ctx context.Context, in *DeleteShortMessageByDateRequest, opts ...grpc.CallOption) (*DeleteShortMessageByDateReply, error)
}

type checkMsgRepeatClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckMsgRepeatClient(cc grpc.ClientConnInterface) CheckMsgRepeatClient {
	return &checkMsgRepeatClient{cc}
}

func (c *checkMsgRepeatClient) CheckIsRepeated(ctx context.Context, in *CheckIsRepeatedRequest, opts ...grpc.CallOption) (*CheckIsRepeatedReply, error) {
	out := new(CheckIsRepeatedReply)
	err := c.cc.Invoke(ctx, "/imcheckmsgrepeat.CheckMsgRepeat/CheckIsRepeated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkMsgRepeatClient) StoreShortMessage(ctx context.Context, in *StoreShortMessageRequest, opts ...grpc.CallOption) (*StoreShortMessageReply, error) {
	out := new(StoreShortMessageReply)
	err := c.cc.Invoke(ctx, "/imcheckmsgrepeat.CheckMsgRepeat/StoreShortMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkMsgRepeatClient) DeleteShortMessage(ctx context.Context, in *DeleteShortMessageRequest, opts ...grpc.CallOption) (*DeleteShortMessageReply, error) {
	out := new(DeleteShortMessageReply)
	err := c.cc.Invoke(ctx, "/imcheckmsgrepeat.CheckMsgRepeat/DeleteShortMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkMsgRepeatClient) DeleteShortMessageByDate(ctx context.Context, in *DeleteShortMessageByDateRequest, opts ...grpc.CallOption) (*DeleteShortMessageByDateReply, error) {
	out := new(DeleteShortMessageByDateReply)
	err := c.cc.Invoke(ctx, "/imcheckmsgrepeat.CheckMsgRepeat/DeleteShortMessageByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckMsgRepeatServer is the server API for CheckMsgRepeat service.
// All implementations must embed UnimplementedCheckMsgRepeatServer
// for forward compatibility
type CheckMsgRepeatServer interface {
	// CheckIsRepeated 检测是否重复message
	CheckIsRepeated(context.Context, *CheckIsRepeatedRequest) (*CheckIsRepeatedReply, error)
	// StoreShortMessage 存储short_message
	StoreShortMessage(context.Context, *StoreShortMessageRequest) (*StoreShortMessageReply, error)
	// DeleteShortMessage 删除short_message
	DeleteShortMessage(context.Context, *DeleteShortMessageRequest) (*DeleteShortMessageReply, error)
	// DeleteShortMessageByDate 根据时间删除消息
	DeleteShortMessageByDate(context.Context, *DeleteShortMessageByDateRequest) (*DeleteShortMessageByDateReply, error)
	mustEmbedUnimplementedCheckMsgRepeatServer()
}

// UnimplementedCheckMsgRepeatServer must be embedded to have forward compatible implementations.
type UnimplementedCheckMsgRepeatServer struct {
}

func (UnimplementedCheckMsgRepeatServer) CheckIsRepeated(context.Context, *CheckIsRepeatedRequest) (*CheckIsRepeatedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsRepeated not implemented")
}
func (UnimplementedCheckMsgRepeatServer) StoreShortMessage(context.Context, *StoreShortMessageRequest) (*StoreShortMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreShortMessage not implemented")
}
func (UnimplementedCheckMsgRepeatServer) DeleteShortMessage(context.Context, *DeleteShortMessageRequest) (*DeleteShortMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortMessage not implemented")
}
func (UnimplementedCheckMsgRepeatServer) DeleteShortMessageByDate(context.Context, *DeleteShortMessageByDateRequest) (*DeleteShortMessageByDateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortMessageByDate not implemented")
}
func (UnimplementedCheckMsgRepeatServer) mustEmbedUnimplementedCheckMsgRepeatServer() {}

// UnsafeCheckMsgRepeatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckMsgRepeatServer will
// result in compilation errors.
type UnsafeCheckMsgRepeatServer interface {
	mustEmbedUnimplementedCheckMsgRepeatServer()
}

func RegisterCheckMsgRepeatServer(s grpc.ServiceRegistrar, srv CheckMsgRepeatServer) {
	s.RegisterService(&CheckMsgRepeat_ServiceDesc, srv)
}

func _CheckMsgRepeat_CheckIsRepeated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsRepeatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckMsgRepeatServer).CheckIsRepeated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imcheckmsgrepeat.CheckMsgRepeat/CheckIsRepeated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckMsgRepeatServer).CheckIsRepeated(ctx, req.(*CheckIsRepeatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckMsgRepeat_StoreShortMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreShortMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckMsgRepeatServer).StoreShortMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imcheckmsgrepeat.CheckMsgRepeat/StoreShortMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckMsgRepeatServer).StoreShortMessage(ctx, req.(*StoreShortMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckMsgRepeat_DeleteShortMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckMsgRepeatServer).DeleteShortMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imcheckmsgrepeat.CheckMsgRepeat/DeleteShortMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckMsgRepeatServer).DeleteShortMessage(ctx, req.(*DeleteShortMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckMsgRepeat_DeleteShortMessageByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortMessageByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckMsgRepeatServer).DeleteShortMessageByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imcheckmsgrepeat.CheckMsgRepeat/DeleteShortMessageByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckMsgRepeatServer).DeleteShortMessageByDate(ctx, req.(*DeleteShortMessageByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckMsgRepeat_ServiceDesc is the grpc.ServiceDesc for CheckMsgRepeat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckMsgRepeat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imcheckmsgrepeat.CheckMsgRepeat",
	HandlerType: (*CheckMsgRepeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckIsRepeated",
			Handler:    _CheckMsgRepeat_CheckIsRepeated_Handler,
		},
		{
			MethodName: "StoreShortMessage",
			Handler:    _CheckMsgRepeat_StoreShortMessage_Handler,
		},
		{
			MethodName: "DeleteShortMessage",
			Handler:    _CheckMsgRepeat_DeleteShortMessage_Handler,
		},
		{
			MethodName: "DeleteShortMessageByDate",
			Handler:    _CheckMsgRepeat_DeleteShortMessageByDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checkmsgrepeat.proto",
}
