// Code generated by protoc-gen-gogo.
// source: checkmsgrepeat.proto
// DO NOT EDIT!

/*
Package imcheckmsgrepeat is a generated protocol buffer package.

It is generated from these files:

	checkmsgrepeat.proto

It has these top-level messages:

	CheckIsRepeatedRequest
	CheckIsRepeatedReply
	StoreShortMessageRequest
	StoreShortMessageReply
	DeleteShortMessageRequest
	DeleteShortMessageReply
	DeleteShortMessageByDateRequest
	DeleteShortMessageByDateReply
	StoredMessage
*/
package imcheckmsgrepeat

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// CheckIsRepeatedRequest
type CheckIsRepeatedRequest struct {
	KeyID       int64 `protobuf:"varint,1,opt,name=KeyID,proto3" json:"KeyID,omitempty" ck:"? == 0"`
	RandomID    int64 `protobuf:"varint,2,opt,name=RandomID,proto3" json:"RandomID,omitempty" ck:"? == 0"`
	RequestTime int32 `protobuf:"varint,3,opt,name=RequestTime,proto3" json:"RequestTime,omitempty" ck:"? == 0"`
}

func (m *CheckIsRepeatedRequest) Reset()         { *m = CheckIsRepeatedRequest{} }
func (m *CheckIsRepeatedRequest) String() string { return proto.CompactTextString(m) }
func (*CheckIsRepeatedRequest) ProtoMessage()    {}
func (*CheckIsRepeatedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCheckmsgrepeat, []int{0}
}

func (m *CheckIsRepeatedRequest) GetKeyID() int64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

func (m *CheckIsRepeatedRequest) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *CheckIsRepeatedRequest) GetRequestTime() int32 {
	if m != nil {
		return m.RequestTime
	}
	return 0
}

// CheckIsRepeatedReply
type CheckIsRepeatedReply struct {
	Ok               bool   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	FirstRequestTime int32  `protobuf:"varint,2,opt,name=FirstRequestTime,proto3" json:"FirstRequestTime,omitempty"`
	MessageObj       []byte `protobuf:"bytes,3,opt,name=MessageObj,proto3" json:"MessageObj,omitempty"`
}

func (m *CheckIsRepeatedReply) Reset()         { *m = CheckIsRepeatedReply{} }
func (m *CheckIsRepeatedReply) String() string { return proto.CompactTextString(m) }
func (*CheckIsRepeatedReply) ProtoMessage()    {}
func (*CheckIsRepeatedReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCheckmsgrepeat, []int{1}
}

func (m *CheckIsRepeatedReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *CheckIsRepeatedReply) GetFirstRequestTime() int32 {
	if m != nil {
		return m.FirstRequestTime
	}
	return 0
}

func (m *CheckIsRepeatedReply) GetMessageObj() []byte {
	if m != nil {
		return m.MessageObj
	}
	return nil
}

// StoreShortMessageRequest
type StoreShortMessageRequest struct {
	KeyID      int64  `protobuf:"varint,1,opt,name=KeyID,proto3" json:"KeyID,omitempty" ck:"? == 0"`
	RandomID   int64  `protobuf:"varint,2,opt,name=RandomID,proto3" json:"RandomID,omitempty" ck:"? == 0"`
	MessageObj []byte `protobuf:"bytes,3,opt,name=MessageObj,proto3" json:"MessageObj,omitempty" ck:"len(?) == 0"`
}

func (m *StoreShortMessageRequest) Reset()         { *m = StoreShortMessageRequest{} }
func (m *StoreShortMessageRequest) String() string { return proto.CompactTextString(m) }
func (*StoreShortMessageRequest) ProtoMessage()    {}
func (*StoreShortMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCheckmsgrepeat, []int{2}
}

func (m *StoreShortMessageRequest) GetKeyID() int64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

func (m *StoreShortMessageRequest) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *StoreShortMessageRequest) GetMessageObj() []byte {
	if m != nil {
		return m.MessageObj
	}
	return nil
}

// StoreShortMessageReply
type StoreShortMessageReply struct {
}

func (m *StoreShortMessageReply) Reset()         { *m = StoreShortMessageReply{} }
func (m *StoreShortMessageReply) String() string { return proto.CompactTextString(m) }
func (*StoreShortMessageReply) ProtoMessage()    {}
func (*StoreShortMessageReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCheckmsgrepeat, []int{3}
}

// DeleteShortMessageRequest
type DeleteShortMessageRequest struct {
	KeyID    int64 `protobuf:"varint,1,opt,name=KeyID,proto3" json:"KeyID,omitempty" ck:"? == 0"`
	RandomID int64 `protobuf:"varint,2,opt,name=RandomID,proto3" json:"RandomID,omitempty" ck:"? == 0"`
}

func (m *DeleteShortMessageRequest) Reset()         { *m = DeleteShortMessageRequest{} }
func (m *DeleteShortMessageRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteShortMessageRequest) ProtoMessage()    {}
func (*DeleteShortMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCheckmsgrepeat, []int{4}
}

func (m *DeleteShortMessageRequest) GetKeyID() int64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

func (m *DeleteShortMessageRequest) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

// DeleteShortMessageReply
type DeleteShortMessageReply struct {
}

func (m *DeleteShortMessageReply) Reset()         { *m = DeleteShortMessageReply{} }
func (m *DeleteShortMessageReply) String() string { return proto.CompactTextString(m) }
func (*DeleteShortMessageReply) ProtoMessage()    {}
func (*DeleteShortMessageReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCheckmsgrepeat, []int{5}
}

// DeleteShortMessageByDateRequest
type DeleteShortMessageByDateRequest struct {
	KeyID    int64 `protobuf:"varint,1,opt,name=KeyID,proto3" json:"KeyID,omitempty" ck:"? == 0"`
	RandomID int64 `protobuf:"varint,2,opt,name=RandomID,proto3" json:"RandomID,omitempty" ck:"? == 0"`
	AckTime  int32 `protobuf:"varint,3,opt,name=AckTime,proto3" json:"AckTime,omitempty" ck:"? == 0"`
}

func (m *DeleteShortMessageByDateRequest) Reset()         { *m = DeleteShortMessageByDateRequest{} }
func (m *DeleteShortMessageByDateRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteShortMessageByDateRequest) ProtoMessage()    {}
func (*DeleteShortMessageByDateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCheckmsgrepeat, []int{6}
}

func (m *DeleteShortMessageByDateRequest) GetKeyID() int64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

func (m *DeleteShortMessageByDateRequest) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *DeleteShortMessageByDateRequest) GetAckTime() int32 {
	if m != nil {
		return m.AckTime
	}
	return 0
}

// DeleteShortMessageByDateReply
type DeleteShortMessageByDateReply struct {
}

func (m *DeleteShortMessageByDateReply) Reset()         { *m = DeleteShortMessageByDateReply{} }
func (m *DeleteShortMessageByDateReply) String() string { return proto.CompactTextString(m) }
func (*DeleteShortMessageByDateReply) ProtoMessage()    {}
func (*DeleteShortMessageByDateReply) Descriptor() ([]byte, []int) {
	return fileDescriptorCheckmsgrepeat, []int{7}
}

// StoredMessage 保存的消息数据
type StoredMessage struct {
	RequestTime int32  `protobuf:"varint,1,opt,name=RequestTime,proto3" json:"RequestTime,omitempty"`
	RandomID    int64  `protobuf:"varint,2,opt,name=RandomID,proto3" json:"RandomID,omitempty"`
	MessageObj  []byte `protobuf:"bytes,3,opt,name=MessageObj,proto3" json:"MessageObj,omitempty"`
}

func (m *StoredMessage) Reset()                    { *m = StoredMessage{} }
func (m *StoredMessage) String() string            { return proto.CompactTextString(m) }
func (*StoredMessage) ProtoMessage()               {}
func (*StoredMessage) Descriptor() ([]byte, []int) { return fileDescriptorCheckmsgrepeat, []int{8} }

func (m *StoredMessage) GetRequestTime() int32 {
	if m != nil {
		return m.RequestTime
	}
	return 0
}

func (m *StoredMessage) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *StoredMessage) GetMessageObj() []byte {
	if m != nil {
		return m.MessageObj
	}
	return nil
}

func init() {
	proto.RegisterType((*CheckIsRepeatedRequest)(nil), "imcheckmsgrepeat.CheckIsRepeatedRequest")
	proto.RegisterType((*CheckIsRepeatedReply)(nil), "imcheckmsgrepeat.CheckIsRepeatedReply")
	proto.RegisterType((*StoreShortMessageRequest)(nil), "imcheckmsgrepeat.StoreShortMessageRequest")
	proto.RegisterType((*StoreShortMessageReply)(nil), "imcheckmsgrepeat.StoreShortMessageReply")
	proto.RegisterType((*DeleteShortMessageRequest)(nil), "imcheckmsgrepeat.DeleteShortMessageRequest")
	proto.RegisterType((*DeleteShortMessageReply)(nil), "imcheckmsgrepeat.DeleteShortMessageReply")
	proto.RegisterType((*DeleteShortMessageByDateRequest)(nil), "imcheckmsgrepeat.DeleteShortMessageByDateRequest")
	proto.RegisterType((*DeleteShortMessageByDateReply)(nil), "imcheckmsgrepeat.DeleteShortMessageByDateReply")
	proto.RegisterType((*StoredMessage)(nil), "imcheckmsgrepeat.StoredMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CheckMsgRepeat service

type CheckMsgRepeatClient interface {
	// CheckIsRepeated 检测是否重复message
	CheckIsRepeated(ctx context.Context, in *CheckIsRepeatedRequest, opts ...grpc.CallOption) (*CheckIsRepeatedReply, error)
	// StoreShortMessage 存储short_message
	StoreShortMessage(ctx context.Context, in *StoreShortMessageRequest, opts ...grpc.CallOption) (*StoreShortMessageReply, error)
	// DeleteShortMessage 删除short_message
	DeleteShortMessage(ctx context.Context, in *DeleteShortMessageRequest, opts ...grpc.CallOption) (*DeleteShortMessageReply, error)
	// DeleteShortMessageByDate 根据时间删除消息
	DeleteShortMessageByDate(ctx context.Context, in *DeleteShortMessageByDateRequest, opts ...grpc.CallOption) (*DeleteShortMessageByDateReply, error)
}

type checkMsgRepeatClient struct {
	cc *grpc.ClientConn
}

func NewCheckMsgRepeatClient(cc *grpc.ClientConn) CheckMsgRepeatClient {
	return &checkMsgRepeatClient{cc}
}

func (c *checkMsgRepeatClient) CheckIsRepeated(ctx context.Context, in *CheckIsRepeatedRequest, opts ...grpc.CallOption) (*CheckIsRepeatedReply, error) {
	out := new(CheckIsRepeatedReply)
	err := grpc.Invoke(ctx, "/imcheckmsgrepeat.CheckMsgRepeat/CheckIsRepeated", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkMsgRepeatClient) StoreShortMessage(ctx context.Context, in *StoreShortMessageRequest, opts ...grpc.CallOption) (*StoreShortMessageReply, error) {
	out := new(StoreShortMessageReply)
	err := grpc.Invoke(ctx, "/imcheckmsgrepeat.CheckMsgRepeat/StoreShortMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkMsgRepeatClient) DeleteShortMessage(ctx context.Context, in *DeleteShortMessageRequest, opts ...grpc.CallOption) (*DeleteShortMessageReply, error) {
	out := new(DeleteShortMessageReply)
	err := grpc.Invoke(ctx, "/imcheckmsgrepeat.CheckMsgRepeat/DeleteShortMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkMsgRepeatClient) DeleteShortMessageByDate(ctx context.Context, in *DeleteShortMessageByDateRequest, opts ...grpc.CallOption) (*DeleteShortMessageByDateReply, error) {
	out := new(DeleteShortMessageByDateReply)
	err := grpc.Invoke(ctx, "/imcheckmsgrepeat.CheckMsgRepeat/DeleteShortMessageByDate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CheckMsgRepeat service

type CheckMsgRepeatServer interface {
	// CheckIsRepeated 检测是否重复message
	CheckIsRepeated(context.Context, *CheckIsRepeatedRequest) (*CheckIsRepeatedReply, error)
	// StoreShortMessage 存储short_message
	StoreShortMessage(context.Context, *StoreShortMessageRequest) (*StoreShortMessageReply, error)
	// DeleteShortMessage 删除short_message
	DeleteShortMessage(context.Context, *DeleteShortMessageRequest) (*DeleteShortMessageReply, error)
	// DeleteShortMessageByDate 根据时间删除消息
	DeleteShortMessageByDate(context.Context, *DeleteShortMessageByDateRequest) (*DeleteShortMessageByDateReply, error)
}

func RegisterCheckMsgRepeatServer(s *grpc.Server, srv CheckMsgRepeatServer) {
	s.RegisterService(&_CheckMsgRepeat_serviceDesc, srv)
}

func _CheckMsgRepeat_CheckIsRepeated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsRepeatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckMsgRepeatServer).CheckIsRepeated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imcheckmsgrepeat.CheckMsgRepeat/CheckIsRepeated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckMsgRepeatServer).CheckIsRepeated(ctx, req.(*CheckIsRepeatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckMsgRepeat_StoreShortMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreShortMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckMsgRepeatServer).StoreShortMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imcheckmsgrepeat.CheckMsgRepeat/StoreShortMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckMsgRepeatServer).StoreShortMessage(ctx, req.(*StoreShortMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckMsgRepeat_DeleteShortMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckMsgRepeatServer).DeleteShortMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imcheckmsgrepeat.CheckMsgRepeat/DeleteShortMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckMsgRepeatServer).DeleteShortMessage(ctx, req.(*DeleteShortMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckMsgRepeat_DeleteShortMessageByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortMessageByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckMsgRepeatServer).DeleteShortMessageByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imcheckmsgrepeat.CheckMsgRepeat/DeleteShortMessageByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckMsgRepeatServer).DeleteShortMessageByDate(ctx, req.(*DeleteShortMessageByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckMsgRepeat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imcheckmsgrepeat.CheckMsgRepeat",
	HandlerType: (*CheckMsgRepeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckIsRepeated",
			Handler:    _CheckMsgRepeat_CheckIsRepeated_Handler,
		},
		{
			MethodName: "StoreShortMessage",
			Handler:    _CheckMsgRepeat_StoreShortMessage_Handler,
		},
		{
			MethodName: "DeleteShortMessage",
			Handler:    _CheckMsgRepeat_DeleteShortMessage_Handler,
		},
		{
			MethodName: "DeleteShortMessageByDate",
			Handler:    _CheckMsgRepeat_DeleteShortMessageByDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checkmsgrepeat.proto",
}

func (m *CheckIsRepeatedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsRepeatedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.KeyID))
	}
	if m.RandomID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.RandomID))
	}
	if m.RequestTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.RequestTime))
	}
	return i, nil
}

func (m *CheckIsRepeatedReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsRepeatedReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FirstRequestTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.FirstRequestTime))
	}
	if len(m.MessageObj) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(len(m.MessageObj)))
		i += copy(dAtA[i:], m.MessageObj)
	}
	return i, nil
}

func (m *StoreShortMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShortMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.KeyID))
	}
	if m.RandomID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.RandomID))
	}
	if len(m.MessageObj) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(len(m.MessageObj)))
		i += copy(dAtA[i:], m.MessageObj)
	}
	return i, nil
}

func (m *StoreShortMessageReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShortMessageReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteShortMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteShortMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.KeyID))
	}
	if m.RandomID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.RandomID))
	}
	return i, nil
}

func (m *DeleteShortMessageReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteShortMessageReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteShortMessageByDateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteShortMessageByDateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.KeyID))
	}
	if m.RandomID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.RandomID))
	}
	if m.AckTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.AckTime))
	}
	return i, nil
}

func (m *DeleteShortMessageByDateReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteShortMessageByDateReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StoredMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.RequestTime))
	}
	if m.RandomID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.RandomID))
	}
	if len(m.MessageObj) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(len(m.MessageObj)))
		i += copy(dAtA[i:], m.MessageObj)
	}
	return i, nil
}

func encodeFixed64Checkmsgrepeat(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Checkmsgrepeat(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCheckmsgrepeat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CheckIsRepeatedRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.KeyID))
	}
	if m.RandomID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.RandomID))
	}
	if m.RequestTime != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.RequestTime))
	}
	return n
}

func (m *CheckIsRepeatedReply) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.FirstRequestTime != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.FirstRequestTime))
	}
	l = len(m.MessageObj)
	if l > 0 {
		n += 1 + l + sovCheckmsgrepeat(uint64(l))
	}
	return n
}

func (m *StoreShortMessageRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.KeyID))
	}
	if m.RandomID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.RandomID))
	}
	l = len(m.MessageObj)
	if l > 0 {
		n += 1 + l + sovCheckmsgrepeat(uint64(l))
	}
	return n
}

func (m *StoreShortMessageReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteShortMessageRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.KeyID))
	}
	if m.RandomID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.RandomID))
	}
	return n
}

func (m *DeleteShortMessageReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteShortMessageByDateRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.KeyID))
	}
	if m.RandomID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.RandomID))
	}
	if m.AckTime != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.AckTime))
	}
	return n
}

func (m *DeleteShortMessageByDateReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StoredMessage) Size() (n int) {
	var l int
	_ = l
	if m.RequestTime != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.RequestTime))
	}
	if m.RandomID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.RandomID))
	}
	l = len(m.MessageObj)
	if l > 0 {
		n += 1 + l + sovCheckmsgrepeat(uint64(l))
	}
	return n
}

func sovCheckmsgrepeat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCheckmsgrepeat(x uint64) (n int) {
	return sovCheckmsgrepeat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckIsRepeatedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsRepeatedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsRepeatedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			m.KeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			m.RequestTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsRepeatedReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsRepeatedReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsRepeatedReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstRequestTime", wireType)
			}
			m.FirstRequestTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstRequestTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageObj", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageObj = append(m.MessageObj[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageObj == nil {
				m.MessageObj = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShortMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShortMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShortMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			m.KeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageObj", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageObj = append(m.MessageObj[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageObj == nil {
				m.MessageObj = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShortMessageReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShortMessageReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShortMessageReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteShortMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteShortMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteShortMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			m.KeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteShortMessageReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteShortMessageReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteShortMessageReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteShortMessageByDateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteShortMessageByDateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteShortMessageByDateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			m.KeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckTime", wireType)
			}
			m.AckTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteShortMessageByDateReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteShortMessageByDateReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteShortMessageByDateReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoredMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoredMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoredMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			m.RequestTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageObj", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageObj = append(m.MessageObj[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageObj == nil {
				m.MessageObj = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCheckmsgrepeat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCheckmsgrepeat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCheckmsgrepeat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCheckmsgrepeat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCheckmsgrepeat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCheckmsgrepeat   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("checkmsgrepeat.proto", fileDescriptorCheckmsgrepeat) }

var fileDescriptorCheckmsgrepeat = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x65, 0x13, 0x05, 0xaa, 0x69, 0x69, 0xc3, 0x28, 0x2a, 0xae, 0x25, 0x12, 0x6b, 0x25, 0x90,
	0xd3, 0x8a, 0x84, 0x02, 0x27, 0xa4, 0xaa, 0x22, 0x44, 0x48, 0x11, 0xaa, 0x22, 0xb9, 0xfc, 0x40,
	0xe2, 0x2c, 0x4e, 0xb0, 0x9d, 0x35, 0xf6, 0xe6, 0xe0, 0x1b, 0x7f, 0x02, 0x07, 0x3e, 0x86, 0x23,
	0x37, 0x6e, 0x15, 0xca, 0x27, 0xf4, 0x0b, 0x90, 0xd7, 0x06, 0x39, 0x59, 0x1b, 0xcc, 0xa1, 0xdc,
	0xb2, 0x33, 0x6f, 0xde, 0xbc, 0x99, 0xbc, 0x31, 0xb4, 0xec, 0x39, 0xb3, 0x5d, 0x3f, 0x72, 0x42,
	0x16, 0xb0, 0x89, 0xe8, 0x05, 0x21, 0x17, 0x1c, 0x9b, 0x0b, 0x7f, 0x33, 0xae, 0x3f, 0x76, 0x16,
	0x62, 0xbe, 0x9a, 0xf6, 0x6c, 0xee, 0xf7, 0x1d, 0xee, 0xf0, 0xbe, 0x04, 0x4e, 0x57, 0xef, 0xe4,
	0x4b, 0x3e, 0xe4, 0xaf, 0x94, 0x80, 0x7e, 0x22, 0x70, 0xf8, 0x2a, 0x61, 0x18, 0x45, 0x96, 0x24,
	0x60, 0x33, 0x8b, 0x7d, 0x58, 0xb1, 0x48, 0xe0, 0x43, 0x68, 0xbc, 0x61, 0xf1, 0x68, 0xa8, 0x11,
	0x83, 0x98, 0xf5, 0xc1, 0xc1, 0xf5, 0x55, 0x67, 0xd7, 0x76, 0x5f, 0xd0, 0x73, 0xe3, 0xec, 0xcc,
	0x78, 0x42, 0xad, 0x34, 0x8b, 0x27, 0xb0, 0x63, 0x4d, 0x96, 0x33, 0xee, 0x8f, 0x86, 0x5a, 0xad,
	0x18, 0xf9, 0x1b, 0x80, 0xa7, 0xb0, 0x9b, 0xd1, 0xbf, 0x5d, 0xf8, 0x4c, 0xab, 0x1b, 0xc4, 0x6c,
	0xa8, 0xf8, 0x3c, 0x86, 0x86, 0xd0, 0x52, 0x04, 0x06, 0x5e, 0x8c, 0xfb, 0x50, 0x1b, 0xbb, 0x52,
	0xdb, 0x8e, 0x55, 0x1b, 0xbb, 0x78, 0x0c, 0xcd, 0xd7, 0x8b, 0x30, 0x12, 0x79, 0xfe, 0x44, 0x4f,
	0xc3, 0x52, 0xe2, 0xd8, 0x06, 0xb8, 0x60, 0x51, 0x34, 0x71, 0xd8, 0x78, 0xfa, 0x5e, 0xaa, 0xd8,
	0xb3, 0x72, 0x11, 0xfa, 0x85, 0x80, 0x76, 0x29, 0x78, 0xc8, 0x2e, 0xe7, 0x3c, 0x14, 0x59, 0xe2,
	0x26, 0xf7, 0xf2, 0x5c, 0x15, 0x34, 0x68, 0x5d, 0x5f, 0x75, 0x9a, 0x09, 0xdc, 0x63, 0x4b, 0xf3,
	0xbc, 0x9b, 0xd5, 0xe4, 0x65, 0x6a, 0x70, 0x58, 0xa0, 0x32, 0xf0, 0x62, 0xca, 0xe1, 0x68, 0xc8,
	0x3c, 0x26, 0xfe, 0xd7, 0x00, 0xf4, 0x08, 0xee, 0x17, 0x35, 0x4c, 0xb4, 0x7c, 0x26, 0xd0, 0x51,
	0x73, 0x83, 0x78, 0x38, 0x11, 0x37, 0xba, 0xd3, 0x2e, 0xdc, 0x79, 0x69, 0xbb, 0x7f, 0xf2, 0xd9,
	0xaf, 0x3c, 0xed, 0xc0, 0x83, 0x72, 0x85, 0xc9, 0x0c, 0x3e, 0xdc, 0x95, 0x9b, 0x9e, 0x65, 0x39,
	0x34, 0x36, 0x8d, 0x4c, 0xa4, 0xd1, 0xf2, 0x21, 0xd4, 0xb7, 0xb5, 0xe6, 0xa4, 0xfd, 0xc5, 0x7f,
	0x4f, 0xbf, 0xd7, 0x61, 0x5f, 0x9a, 0xfe, 0x22, 0x72, 0x52, 0xd7, 0x23, 0x83, 0x83, 0xad, 0x33,
	0x40, 0xb3, 0xb7, 0x7d, 0xfd, 0xbd, 0xe2, 0x53, 0xd6, 0x1f, 0x55, 0x40, 0x26, 0x63, 0xde, 0x42,
	0x17, 0xee, 0x29, 0x96, 0xc2, 0x63, 0xb5, 0xbc, 0xec, 0x3a, 0x74, 0xb3, 0x12, 0x36, 0x6d, 0xb6,
	0x04, 0x54, 0xd7, 0x8e, 0x27, 0x2a, 0x43, 0xa9, 0x97, 0xf5, 0x6e, 0x35, 0x70, 0xda, 0xef, 0x23,
	0x01, 0xad, 0xec, 0x7f, 0xc6, 0xd3, 0x2a, 0x4c, 0x1b, 0xae, 0xd5, 0xfb, 0xff, 0x52, 0x22, 0x25,
	0x0c, 0xf6, 0xbe, 0xae, 0xdb, 0xe4, 0xdb, 0xba, 0x4d, 0x7e, 0xac, 0xdb, 0x64, 0x7a, 0x5b, 0x7e,
	0x84, 0x9f, 0xfd, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x45, 0x2d, 0x88, 0xdd, 0x05, 0x00, 0x00,
}
