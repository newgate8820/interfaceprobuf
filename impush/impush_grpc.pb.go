// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: impush.proto

package impush

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImPushServerClient is the client API for ImPushServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImPushServerClient interface {
	GetKeyStatus(ctx context.Context, in *ReqGetKeyStatus, opts ...grpc.CallOption) (*GetKeyStatusReply, error)
	UserCall(ctx context.Context, in *UserCallReq, opts ...grpc.CallOption) (*UserCallResult, error)
}

type imPushServerClient struct {
	cc grpc.ClientConnInterface
}

func NewImPushServerClient(cc grpc.ClientConnInterface) ImPushServerClient {
	return &imPushServerClient{cc}
}

func (c *imPushServerClient) GetKeyStatus(ctx context.Context, in *ReqGetKeyStatus, opts ...grpc.CallOption) (*GetKeyStatusReply, error) {
	out := new(GetKeyStatusReply)
	err := c.cc.Invoke(ctx, "/impushserver.ImPushServer/GetKeyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imPushServerClient) UserCall(ctx context.Context, in *UserCallReq, opts ...grpc.CallOption) (*UserCallResult, error) {
	out := new(UserCallResult)
	err := c.cc.Invoke(ctx, "/impushserver.ImPushServer/UserCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImPushServerServer is the server API for ImPushServer service.
// All implementations must embed UnimplementedImPushServerServer
// for forward compatibility
type ImPushServerServer interface {
	GetKeyStatus(context.Context, *ReqGetKeyStatus) (*GetKeyStatusReply, error)
	UserCall(context.Context, *UserCallReq) (*UserCallResult, error)
	mustEmbedUnimplementedImPushServerServer()
}

// UnimplementedImPushServerServer must be embedded to have forward compatible implementations.
type UnimplementedImPushServerServer struct {
}

func (UnimplementedImPushServerServer) GetKeyStatus(context.Context, *ReqGetKeyStatus) (*GetKeyStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyStatus not implemented")
}
func (UnimplementedImPushServerServer) UserCall(context.Context, *UserCallReq) (*UserCallResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCall not implemented")
}
func (UnimplementedImPushServerServer) mustEmbedUnimplementedImPushServerServer() {}

// UnsafeImPushServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImPushServerServer will
// result in compilation errors.
type UnsafeImPushServerServer interface {
	mustEmbedUnimplementedImPushServerServer()
}

func RegisterImPushServerServer(s grpc.ServiceRegistrar, srv ImPushServerServer) {
	s.RegisterService(&ImPushServer_ServiceDesc, srv)
}

func _ImPushServer_GetKeyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetKeyStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImPushServerServer).GetKeyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impushserver.ImPushServer/GetKeyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImPushServerServer).GetKeyStatus(ctx, req.(*ReqGetKeyStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImPushServer_UserCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImPushServerServer).UserCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impushserver.ImPushServer/UserCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImPushServerServer).UserCall(ctx, req.(*UserCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ImPushServer_ServiceDesc is the grpc.ServiceDesc for ImPushServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImPushServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "impushserver.ImPushServer",
	HandlerType: (*ImPushServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeyStatus",
			Handler:    _ImPushServer_GetKeyStatus_Handler,
		},
		{
			MethodName: "UserCall",
			Handler:    _ImPushServer_UserCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "impush.proto",
}
