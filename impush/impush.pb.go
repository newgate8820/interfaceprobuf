// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/impush/impush.proto

/*
Package impushserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/impush/impush.proto

It has these top-level messages:

	UserCallReq
	UserCallResult
	ReqGetKeyStatus
	KeyStatus
	GetKeyStatusReply
*/
package impushserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UserCallResult_ResultCode int32

const (
	UserCallResult_Success       UserCallResult_ResultCode = 0
	UserCallResult_InternalError UserCallResult_ResultCode = 1
)

var UserCallResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var UserCallResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x UserCallResult_ResultCode) String() string {
	return proto.EnumName(UserCallResult_ResultCode_name, int32(x))
}
func (UserCallResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImpush, []int{1, 0}
}

type UserCallReq struct {
	FromId int32 `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *UserCallReq) Reset()                    { *m = UserCallReq{} }
func (m *UserCallReq) String() string            { return proto.CompactTextString(m) }
func (*UserCallReq) ProtoMessage()               {}
func (*UserCallReq) Descriptor() ([]byte, []int) { return fileDescriptorImpush, []int{0} }

func (m *UserCallReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UserCallReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type UserCallResult struct {
	Code UserCallResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=impushserver.UserCallResult_ResultCode" json:"code,omitempty"`
}

func (m *UserCallResult) Reset()                    { *m = UserCallResult{} }
func (m *UserCallResult) String() string            { return proto.CompactTextString(m) }
func (*UserCallResult) ProtoMessage()               {}
func (*UserCallResult) Descriptor() ([]byte, []int) { return fileDescriptorImpush, []int{1} }

func (m *UserCallResult) GetCode() UserCallResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return UserCallResult_Success
}

type ReqGetKeyStatus struct {
	UserId      uint32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	DelaySecond uint32 `protobuf:"varint,2,opt,name=DelaySecond,proto3" json:"DelaySecond,omitempty"`
}

func (m *ReqGetKeyStatus) Reset()                    { *m = ReqGetKeyStatus{} }
func (m *ReqGetKeyStatus) String() string            { return proto.CompactTextString(m) }
func (*ReqGetKeyStatus) ProtoMessage()               {}
func (*ReqGetKeyStatus) Descriptor() ([]byte, []int) { return fileDescriptorImpush, []int{2} }

func (m *ReqGetKeyStatus) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetKeyStatus) GetDelaySecond() uint32 {
	if m != nil {
		return m.DelaySecond
	}
	return 0
}

type KeyStatus struct {
	KeyId uint64 `protobuf:"varint,1,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
}

func (m *KeyStatus) Reset()                    { *m = KeyStatus{} }
func (m *KeyStatus) String() string            { return proto.CompactTextString(m) }
func (*KeyStatus) ProtoMessage()               {}
func (*KeyStatus) Descriptor() ([]byte, []int) { return fileDescriptorImpush, []int{3} }

func (m *KeyStatus) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

type GetKeyStatusReply struct {
	Ok   bool         `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Keys []*KeyStatus `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
}

func (m *GetKeyStatusReply) Reset()                    { *m = GetKeyStatusReply{} }
func (m *GetKeyStatusReply) String() string            { return proto.CompactTextString(m) }
func (*GetKeyStatusReply) ProtoMessage()               {}
func (*GetKeyStatusReply) Descriptor() ([]byte, []int) { return fileDescriptorImpush, []int{4} }

func (m *GetKeyStatusReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetKeyStatusReply) GetKeys() []*KeyStatus {
	if m != nil {
		return m.Keys
	}
	return nil
}

func init() {
	proto.RegisterType((*UserCallReq)(nil), "impushserver.UserCallReq")
	proto.RegisterType((*UserCallResult)(nil), "impushserver.UserCallResult")
	proto.RegisterType((*ReqGetKeyStatus)(nil), "impushserver.ReqGetKeyStatus")
	proto.RegisterType((*KeyStatus)(nil), "impushserver.KeyStatus")
	proto.RegisterType((*GetKeyStatusReply)(nil), "impushserver.GetKeyStatusReply")
	proto.RegisterEnum("impushserver.UserCallResult_ResultCode", UserCallResult_ResultCode_name, UserCallResult_ResultCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImPushServer service

type ImPushServerClient interface {
	GetKeyStatus(ctx context.Context, in *ReqGetKeyStatus, opts ...grpc.CallOption) (*GetKeyStatusReply, error)
	UserCall(ctx context.Context, in *UserCallReq, opts ...grpc.CallOption) (*UserCallResult, error)
}

type imPushServerClient struct {
	cc *grpc.ClientConn
}

func NewImPushServerClient(cc *grpc.ClientConn) ImPushServerClient {
	return &imPushServerClient{cc}
}

func (c *imPushServerClient) GetKeyStatus(ctx context.Context, in *ReqGetKeyStatus, opts ...grpc.CallOption) (*GetKeyStatusReply, error) {
	out := new(GetKeyStatusReply)
	err := grpc.Invoke(ctx, "/impushserver.ImPushServer/GetKeyStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imPushServerClient) UserCall(ctx context.Context, in *UserCallReq, opts ...grpc.CallOption) (*UserCallResult, error) {
	out := new(UserCallResult)
	err := grpc.Invoke(ctx, "/impushserver.ImPushServer/UserCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImPushServer service

type ImPushServerServer interface {
	GetKeyStatus(context.Context, *ReqGetKeyStatus) (*GetKeyStatusReply, error)
	UserCall(context.Context, *UserCallReq) (*UserCallResult, error)
}

func RegisterImPushServerServer(s *grpc.Server, srv ImPushServerServer) {
	s.RegisterService(&_ImPushServer_serviceDesc, srv)
}

func _ImPushServer_GetKeyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetKeyStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImPushServerServer).GetKeyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impushserver.ImPushServer/GetKeyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImPushServerServer).GetKeyStatus(ctx, req.(*ReqGetKeyStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImPushServer_UserCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImPushServerServer).UserCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impushserver.ImPushServer/UserCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImPushServerServer).UserCall(ctx, req.(*UserCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImPushServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "impushserver.ImPushServer",
	HandlerType: (*ImPushServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeyStatus",
			Handler:    _ImPushServer_GetKeyStatus_Handler,
		},
		{
			MethodName: "UserCall",
			Handler:    _ImPushServer_UserCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/impush/impush.proto",
}

func (m *UserCallReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCallReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImpush(dAtA, i, uint64(m.FromId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpush(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *UserCallResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCallResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImpush(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *ReqGetKeyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetKeyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImpush(dAtA, i, uint64(m.UserId))
	}
	if m.DelaySecond != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpush(dAtA, i, uint64(m.DelaySecond))
	}
	return i, nil
}

func (m *KeyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImpush(dAtA, i, uint64(m.KeyId))
	}
	return i, nil
}

func (m *GetKeyStatusReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetKeyStatusReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Keys) > 0 {
		for _, msg := range m.Keys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintImpush(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintImpush(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserCallReq) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovImpush(uint64(m.FromId))
	}
	if m.UserId != 0 {
		n += 1 + sovImpush(uint64(m.UserId))
	}
	return n
}

func (m *UserCallResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovImpush(uint64(m.Code))
	}
	return n
}

func (m *ReqGetKeyStatus) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImpush(uint64(m.UserId))
	}
	if m.DelaySecond != 0 {
		n += 1 + sovImpush(uint64(m.DelaySecond))
	}
	return n
}

func (m *KeyStatus) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovImpush(uint64(m.KeyId))
	}
	return n
}

func (m *GetKeyStatusReply) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovImpush(uint64(l))
		}
	}
	return n
}

func sovImpush(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImpush(x uint64) (n int) {
	return sovImpush(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserCallReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCallReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCallReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImpush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserCallResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCallResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCallResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (UserCallResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImpush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetKeyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetKeyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetKeyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelaySecond", wireType)
			}
			m.DelaySecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelaySecond |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImpush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImpush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetKeyStatusReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetKeyStatusReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetKeyStatusReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImpush
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &KeyStatus{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImpush(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImpush
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImpush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImpush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImpush
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImpush
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImpush(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImpush = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImpush   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/impush/impush.proto", fileDescriptorImpush)
}

var fileDescriptorImpush = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0xce, 0xd2, 0x40,
	0x14, 0xa5, 0x95, 0x0f, 0xf0, 0xb6, 0x20, 0x4c, 0x8c, 0x20, 0x51, 0xc4, 0xd9, 0x48, 0xa2, 0x29,
	0x09, 0x6e, 0x4c, 0x5c, 0x98, 0x88, 0xc4, 0x34, 0x6c, 0xc8, 0x34, 0xac, 0x4d, 0x69, 0x2f, 0xd2,
	0xd0, 0x32, 0x65, 0x66, 0x6a, 0xd2, 0xf8, 0x40, 0xbe, 0x8a, 0x4b, 0x1f, 0xc1, 0xf0, 0x24, 0xa6,
	0x53, 0x4c, 0xa9, 0x46, 0x57, 0x93, 0x33, 0xe7, 0xe7, 0xce, 0xe9, 0x2d, 0xbc, 0xf9, 0x1c, 0xa9,
	0xd8, 0xdf, 0x39, 0xc1, 0xc1, 0x57, 0x12, 0xc5, 0x17, 0x14, 0x4e, 0x94, 0xcc, 0xa3, 0x93, 0x42,
	0xb1, 0xf7, 0x03, 0x4c, 0x05, 0xdf, 0x65, 0xfb, 0x79, 0x94, 0xa4, 0x99, 0x3c, 0x5c, 0x0f, 0x27,
	0x15, 0x5c, 0x71, 0x62, 0x97, 0xa8, 0x34, 0xd1, 0x77, 0x60, 0x6d, 0x25, 0x8a, 0xa5, 0x1f, 0xc7,
	0x0c, 0xcf, 0x64, 0x08, 0xed, 0xbd, 0xe0, 0xc9, 0xa7, 0x28, 0x1c, 0x19, 0x53, 0x63, 0x76, 0xc7,
	0x5a, 0x05, 0x74, 0xc3, 0x82, 0xc8, 0x24, 0x8a, 0x82, 0x30, 0x4b, 0xa2, 0x80, 0x6e, 0x48, 0xbf,
	0x42, 0xaf, 0x0a, 0x90, 0x59, 0xac, 0xc8, 0x5b, 0x68, 0x06, 0x3c, 0x44, 0x1d, 0xd0, 0x5b, 0xbc,
	0x70, 0x6e, 0xe7, 0x39, 0x75, 0xad, 0x53, 0x1e, 0x4b, 0x1e, 0x22, 0xd3, 0x26, 0xfa, 0x0a, 0xa0,
	0xba, 0x23, 0x16, 0xb4, 0xbd, 0x2c, 0x08, 0x50, 0xca, 0x7e, 0x83, 0x0c, 0xa0, 0xeb, 0x16, 0xfd,
	0x4e, 0x7e, 0xbc, 0x12, 0x82, 0x8b, 0xbe, 0x41, 0xd7, 0xf0, 0x80, 0xe1, 0xf9, 0x23, 0xaa, 0x35,
	0xe6, 0x9e, 0xf2, 0x55, 0x26, 0xc9, 0x23, 0x68, 0x6d, 0xf5, 0xcb, 0xf4, 0xfc, 0x2e, 0xbb, 0x22,
	0x32, 0x05, 0xeb, 0x03, 0xc6, 0x7e, 0xee, 0x61, 0xc0, 0x4f, 0x65, 0x89, 0x2e, 0xbb, 0xbd, 0xa2,
	0xcf, 0xe1, 0x7e, 0x15, 0xf3, 0x10, 0xee, 0xd6, 0x98, 0x5f, 0x53, 0x9a, 0xac, 0x04, 0x74, 0x03,
	0x83, 0xdb, 0x61, 0x0c, 0xd3, 0x38, 0x27, 0x3d, 0x30, 0xf9, 0x51, 0xeb, 0x3a, 0xcc, 0xe4, 0x47,
	0xf2, 0x12, 0x9a, 0x47, 0xcc, 0xe5, 0xc8, 0x9c, 0xde, 0x9b, 0x59, 0x8b, 0x61, 0xbd, 0x7f, 0xe5,
	0xd5, 0xa2, 0xc5, 0x37, 0x03, 0x6c, 0x37, 0xd9, 0x64, 0xf2, 0xe0, 0x69, 0x01, 0xd9, 0x80, 0x5d,
	0xeb, 0xf3, 0xb4, 0xee, 0xff, 0xa3, 0xee, 0xf8, 0x59, 0x9d, 0xfe, 0xeb, 0x75, 0xb4, 0x41, 0x56,
	0xd0, 0xf9, 0xfd, 0xd5, 0xc9, 0xe3, 0x7f, 0x6d, 0xe3, 0x3c, 0x7e, 0xf2, 0xbf, 0x45, 0xd1, 0xc6,
	0x7b, 0xfb, 0xfb, 0x65, 0x62, 0xfc, 0xb8, 0x4c, 0x8c, 0x9f, 0x97, 0x89, 0xb1, 0x6b, 0xe9, 0x9f,
	0xe9, 0xf5, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x8a, 0x27, 0xe6, 0x88, 0x02, 0x00, 0x00,
}
