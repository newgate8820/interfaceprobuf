// protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/imstickergifservice/stickergif.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: stickergif.proto

package imstickergifservice

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HandleLogicReq
type HandleLogicClearRecentStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicClearRecentStickersReq) Reset() {
	*x = HandleLogicClearRecentStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicClearRecentStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicClearRecentStickersReq) ProtoMessage() {}

func (x *HandleLogicClearRecentStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicClearRecentStickersReq.ProtoReflect.Descriptor instead.
func (*HandleLogicClearRecentStickersReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{0}
}

func (x *HandleLogicClearRecentStickersReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicClearRecentStickersReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicClearRecentStickersReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicClearRecentStickersReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicClearRecentStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicAddStickerToSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicAddStickerToSetReq) Reset() {
	*x = HandleLogicAddStickerToSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicAddStickerToSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicAddStickerToSetReq) ProtoMessage() {}

func (x *HandleLogicAddStickerToSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicAddStickerToSetReq.ProtoReflect.Descriptor instead.
func (*HandleLogicAddStickerToSetReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{1}
}

func (x *HandleLogicAddStickerToSetReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicAddStickerToSetReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicAddStickerToSetReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicAddStickerToSetReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicAddStickerToSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicChangeStickerPositionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicChangeStickerPositionReq) Reset() {
	*x = HandleLogicChangeStickerPositionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicChangeStickerPositionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicChangeStickerPositionReq) ProtoMessage() {}

func (x *HandleLogicChangeStickerPositionReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicChangeStickerPositionReq.ProtoReflect.Descriptor instead.
func (*HandleLogicChangeStickerPositionReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{2}
}

func (x *HandleLogicChangeStickerPositionReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicChangeStickerPositionReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicChangeStickerPositionReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicChangeStickerPositionReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicChangeStickerPositionReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicCreateStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicCreateStickerSetReq) Reset() {
	*x = HandleLogicCreateStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicCreateStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicCreateStickerSetReq) ProtoMessage() {}

func (x *HandleLogicCreateStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicCreateStickerSetReq.ProtoReflect.Descriptor instead.
func (*HandleLogicCreateStickerSetReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{3}
}

func (x *HandleLogicCreateStickerSetReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicCreateStickerSetReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicCreateStickerSetReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicCreateStickerSetReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicCreateStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicFaveStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicFaveStickersReq) Reset() {
	*x = HandleLogicFaveStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicFaveStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicFaveStickersReq) ProtoMessage() {}

func (x *HandleLogicFaveStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicFaveStickersReq.ProtoReflect.Descriptor instead.
func (*HandleLogicFaveStickersReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{4}
}

func (x *HandleLogicFaveStickersReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicFaveStickersReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicFaveStickersReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicFaveStickersReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicFaveStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicGetAllStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicGetAllStickersReq) Reset() {
	*x = HandleLogicGetAllStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicGetAllStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicGetAllStickersReq) ProtoMessage() {}

func (x *HandleLogicGetAllStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicGetAllStickersReq.ProtoReflect.Descriptor instead.
func (*HandleLogicGetAllStickersReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{5}
}

func (x *HandleLogicGetAllStickersReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicGetAllStickersReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicGetAllStickersReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicGetAllStickersReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicGetAllStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicGetArchivedStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicGetArchivedStickersReq) Reset() {
	*x = HandleLogicGetArchivedStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicGetArchivedStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicGetArchivedStickersReq) ProtoMessage() {}

func (x *HandleLogicGetArchivedStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicGetArchivedStickersReq.ProtoReflect.Descriptor instead.
func (*HandleLogicGetArchivedStickersReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{6}
}

func (x *HandleLogicGetArchivedStickersReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicGetArchivedStickersReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicGetArchivedStickersReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicGetArchivedStickersReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicGetArchivedStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicGetAttachedStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicGetAttachedStickersReq) Reset() {
	*x = HandleLogicGetAttachedStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicGetAttachedStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicGetAttachedStickersReq) ProtoMessage() {}

func (x *HandleLogicGetAttachedStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicGetAttachedStickersReq.ProtoReflect.Descriptor instead.
func (*HandleLogicGetAttachedStickersReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{7}
}

func (x *HandleLogicGetAttachedStickersReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicGetAttachedStickersReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicGetAttachedStickersReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicGetAttachedStickersReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicGetAttachedStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicGetFeaturedStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicGetFeaturedStickersReq) Reset() {
	*x = HandleLogicGetFeaturedStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicGetFeaturedStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicGetFeaturedStickersReq) ProtoMessage() {}

func (x *HandleLogicGetFeaturedStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicGetFeaturedStickersReq.ProtoReflect.Descriptor instead.
func (*HandleLogicGetFeaturedStickersReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{8}
}

func (x *HandleLogicGetFeaturedStickersReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicGetFeaturedStickersReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicGetFeaturedStickersReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicGetFeaturedStickersReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicGetFeaturedStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicGetRecentStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicGetRecentStickersReq) Reset() {
	*x = HandleLogicGetRecentStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicGetRecentStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicGetRecentStickersReq) ProtoMessage() {}

func (x *HandleLogicGetRecentStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicGetRecentStickersReq.ProtoReflect.Descriptor instead.
func (*HandleLogicGetRecentStickersReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{9}
}

func (x *HandleLogicGetRecentStickersReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicGetRecentStickersReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicGetRecentStickersReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicGetRecentStickersReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicGetRecentStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicGetStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicGetStickerSetReq) Reset() {
	*x = HandleLogicGetStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicGetStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicGetStickerSetReq) ProtoMessage() {}

func (x *HandleLogicGetStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicGetStickerSetReq.ProtoReflect.Descriptor instead.
func (*HandleLogicGetStickerSetReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{10}
}

func (x *HandleLogicGetStickerSetReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicGetStickerSetReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicGetStickerSetReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicGetStickerSetReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicGetStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicInstallStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicInstallStickerSetReq) Reset() {
	*x = HandleLogicInstallStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicInstallStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicInstallStickerSetReq) ProtoMessage() {}

func (x *HandleLogicInstallStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicInstallStickerSetReq.ProtoReflect.Descriptor instead.
func (*HandleLogicInstallStickerSetReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{11}
}

func (x *HandleLogicInstallStickerSetReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicInstallStickerSetReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicInstallStickerSetReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicInstallStickerSetReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicInstallStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicReadFeaturedStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicReadFeaturedStickersReq) Reset() {
	*x = HandleLogicReadFeaturedStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicReadFeaturedStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicReadFeaturedStickersReq) ProtoMessage() {}

func (x *HandleLogicReadFeaturedStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicReadFeaturedStickersReq.ProtoReflect.Descriptor instead.
func (*HandleLogicReadFeaturedStickersReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{12}
}

func (x *HandleLogicReadFeaturedStickersReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicReadFeaturedStickersReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicReadFeaturedStickersReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicReadFeaturedStickersReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicReadFeaturedStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicRemoveStickerFromSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicRemoveStickerFromSetReq) Reset() {
	*x = HandleLogicRemoveStickerFromSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicRemoveStickerFromSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicRemoveStickerFromSetReq) ProtoMessage() {}

func (x *HandleLogicRemoveStickerFromSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicRemoveStickerFromSetReq.ProtoReflect.Descriptor instead.
func (*HandleLogicRemoveStickerFromSetReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{13}
}

func (x *HandleLogicRemoveStickerFromSetReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicRemoveStickerFromSetReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicRemoveStickerFromSetReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicRemoveStickerFromSetReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicRemoveStickerFromSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicReorderStickerSetsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicReorderStickerSetsReq) Reset() {
	*x = HandleLogicReorderStickerSetsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicReorderStickerSetsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicReorderStickerSetsReq) ProtoMessage() {}

func (x *HandleLogicReorderStickerSetsReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicReorderStickerSetsReq.ProtoReflect.Descriptor instead.
func (*HandleLogicReorderStickerSetsReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{14}
}

func (x *HandleLogicReorderStickerSetsReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicReorderStickerSetsReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicReorderStickerSetsReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicReorderStickerSetsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicReorderStickerSetsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicSaveRecentStickerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicSaveRecentStickerReq) Reset() {
	*x = HandleLogicSaveRecentStickerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicSaveRecentStickerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicSaveRecentStickerReq) ProtoMessage() {}

func (x *HandleLogicSaveRecentStickerReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicSaveRecentStickerReq.ProtoReflect.Descriptor instead.
func (*HandleLogicSaveRecentStickerReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{15}
}

func (x *HandleLogicSaveRecentStickerReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicSaveRecentStickerReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicSaveRecentStickerReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicSaveRecentStickerReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicSaveRecentStickerReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicUninstallStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicUninstallStickerSetReq) Reset() {
	*x = HandleLogicUninstallStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicUninstallStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicUninstallStickerSetReq) ProtoMessage() {}

func (x *HandleLogicUninstallStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicUninstallStickerSetReq.ProtoReflect.Descriptor instead.
func (*HandleLogicUninstallStickerSetReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{16}
}

func (x *HandleLogicUninstallStickerSetReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicUninstallStickerSetReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicUninstallStickerSetReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicUninstallStickerSetReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicUninstallStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicMaskStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicMaskStickersReq) Reset() {
	*x = HandleLogicMaskStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicMaskStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicMaskStickersReq) ProtoMessage() {}

func (x *HandleLogicMaskStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicMaskStickersReq.ProtoReflect.Descriptor instead.
func (*HandleLogicMaskStickersReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{17}
}

func (x *HandleLogicMaskStickersReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicMaskStickersReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicMaskStickersReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicMaskStickersReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicMaskStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicRecentStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicRecentStickersReq) Reset() {
	*x = HandleLogicRecentStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicRecentStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicRecentStickersReq) ProtoMessage() {}

func (x *HandleLogicRecentStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicRecentStickersReq.ProtoReflect.Descriptor instead.
func (*HandleLogicRecentStickersReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{18}
}

func (x *HandleLogicRecentStickersReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicRecentStickersReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicRecentStickersReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicRecentStickersReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicRecentStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicFavedStickersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicFavedStickersReq) Reset() {
	*x = HandleLogicFavedStickersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicFavedStickersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicFavedStickersReq) ProtoMessage() {}

func (x *HandleLogicFavedStickersReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicFavedStickersReq.ProtoReflect.Descriptor instead.
func (*HandleLogicFavedStickersReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{19}
}

func (x *HandleLogicFavedStickersReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicFavedStickersReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicFavedStickersReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicFavedStickersReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicFavedStickersReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicStickerSetReq) Reset() {
	*x = HandleLogicStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicStickerSetReq) ProtoMessage() {}

func (x *HandleLogicStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicStickerSetReq.ProtoReflect.Descriptor instead.
func (*HandleLogicStickerSetReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{20}
}

func (x *HandleLogicStickerSetReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicStickerSetReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicStickerSetReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicStickerSetReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicrReorderStickerSetsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicrReorderStickerSetsReq) Reset() {
	*x = HandleLogicrReorderStickerSetsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicrReorderStickerSetsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicrReorderStickerSetsReq) ProtoMessage() {}

func (x *HandleLogicrReorderStickerSetsReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicrReorderStickerSetsReq.ProtoReflect.Descriptor instead.
func (*HandleLogicrReorderStickerSetsReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{21}
}

func (x *HandleLogicrReorderStickerSetsReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicrReorderStickerSetsReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicrReorderStickerSetsReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicrReorderStickerSetsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicrReorderStickerSetsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicSaveRecentStickerIosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicSaveRecentStickerIosReq) Reset() {
	*x = HandleLogicSaveRecentStickerIosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicSaveRecentStickerIosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicSaveRecentStickerIosReq) ProtoMessage() {}

func (x *HandleLogicSaveRecentStickerIosReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicSaveRecentStickerIosReq.ProtoReflect.Descriptor instead.
func (*HandleLogicSaveRecentStickerIosReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{22}
}

func (x *HandleLogicSaveRecentStickerIosReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicSaveRecentStickerIosReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicSaveRecentStickerIosReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicSaveRecentStickerIosReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicSaveRecentStickerIosReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicBotsAdjustCollectedBotsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicBotsAdjustCollectedBotsReq) Reset() {
	*x = HandleLogicBotsAdjustCollectedBotsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicBotsAdjustCollectedBotsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicBotsAdjustCollectedBotsReq) ProtoMessage() {}

func (x *HandleLogicBotsAdjustCollectedBotsReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicBotsAdjustCollectedBotsReq.ProtoReflect.Descriptor instead.
func (*HandleLogicBotsAdjustCollectedBotsReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{23}
}

func (x *HandleLogicBotsAdjustCollectedBotsReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicBotsAdjustCollectedBotsReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicBotsAdjustCollectedBotsReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicBotsAdjustCollectedBotsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicBotsAdjustCollectedBotsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicBotsAnswerWebhookJSONQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicBotsAnswerWebhookJSONQueryReq) Reset() {
	*x = HandleLogicBotsAnswerWebhookJSONQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicBotsAnswerWebhookJSONQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicBotsAnswerWebhookJSONQueryReq) ProtoMessage() {}

func (x *HandleLogicBotsAnswerWebhookJSONQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicBotsAnswerWebhookJSONQueryReq.ProtoReflect.Descriptor instead.
func (*HandleLogicBotsAnswerWebhookJSONQueryReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{24}
}

func (x *HandleLogicBotsAnswerWebhookJSONQueryReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicBotsAnswerWebhookJSONQueryReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicBotsAnswerWebhookJSONQueryReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicBotsAnswerWebhookJSONQueryReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicBotsAnswerWebhookJSONQueryReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicBotsCollectBotReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicBotsCollectBotReq) Reset() {
	*x = HandleLogicBotsCollectBotReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicBotsCollectBotReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicBotsCollectBotReq) ProtoMessage() {}

func (x *HandleLogicBotsCollectBotReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicBotsCollectBotReq.ProtoReflect.Descriptor instead.
func (*HandleLogicBotsCollectBotReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{25}
}

func (x *HandleLogicBotsCollectBotReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicBotsCollectBotReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicBotsCollectBotReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicBotsCollectBotReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicBotsCollectBotReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicBotsGetBotListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicBotsGetBotListReq) Reset() {
	*x = HandleLogicBotsGetBotListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicBotsGetBotListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicBotsGetBotListReq) ProtoMessage() {}

func (x *HandleLogicBotsGetBotListReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicBotsGetBotListReq.ProtoReflect.Descriptor instead.
func (*HandleLogicBotsGetBotListReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{26}
}

func (x *HandleLogicBotsGetBotListReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicBotsGetBotListReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicBotsGetBotListReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicBotsGetBotListReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicBotsGetBotListReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicBotsGetCollectedBotsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicBotsGetCollectedBotsReq) Reset() {
	*x = HandleLogicBotsGetCollectedBotsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicBotsGetCollectedBotsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicBotsGetCollectedBotsReq) ProtoMessage() {}

func (x *HandleLogicBotsGetCollectedBotsReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicBotsGetCollectedBotsReq.ProtoReflect.Descriptor instead.
func (*HandleLogicBotsGetCollectedBotsReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{27}
}

func (x *HandleLogicBotsGetCollectedBotsReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicBotsGetCollectedBotsReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicBotsGetCollectedBotsReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicBotsGetCollectedBotsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicBotsGetCollectedBotsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicBotsGetUserBotListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicBotsGetUserBotListReq) Reset() {
	*x = HandleLogicBotsGetUserBotListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicBotsGetUserBotListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicBotsGetUserBotListReq) ProtoMessage() {}

func (x *HandleLogicBotsGetUserBotListReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicBotsGetUserBotListReq.ProtoReflect.Descriptor instead.
func (*HandleLogicBotsGetUserBotListReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{28}
}

func (x *HandleLogicBotsGetUserBotListReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicBotsGetUserBotListReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicBotsGetUserBotListReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicBotsGetUserBotListReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicBotsGetUserBotListReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicBotsSendCustomRequestReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicBotsSendCustomRequestReq) Reset() {
	*x = HandleLogicBotsSendCustomRequestReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicBotsSendCustomRequestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicBotsSendCustomRequestReq) ProtoMessage() {}

func (x *HandleLogicBotsSendCustomRequestReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicBotsSendCustomRequestReq.ProtoReflect.Descriptor instead.
func (*HandleLogicBotsSendCustomRequestReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{29}
}

func (x *HandleLogicBotsSendCustomRequestReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicBotsSendCustomRequestReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicBotsSendCustomRequestReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicBotsSendCustomRequestReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicBotsSendCustomRequestReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicSavedGifsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicSavedGifsReq) Reset() {
	*x = HandleLogicSavedGifsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicSavedGifsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicSavedGifsReq) ProtoMessage() {}

func (x *HandleLogicSavedGifsReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicSavedGifsReq.ProtoReflect.Descriptor instead.
func (*HandleLogicSavedGifsReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{30}
}

func (x *HandleLogicSavedGifsReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicSavedGifsReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicSavedGifsReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicSavedGifsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicSavedGifsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicSaveGifReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicSaveGifReq) Reset() {
	*x = HandleLogicSaveGifReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicSaveGifReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicSaveGifReq) ProtoMessage() {}

func (x *HandleLogicSaveGifReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicSaveGifReq.ProtoReflect.Descriptor instead.
func (*HandleLogicSaveGifReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{31}
}

func (x *HandleLogicSaveGifReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicSaveGifReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicSaveGifReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicSaveGifReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicSaveGifReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicSearchGifsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicSearchGifsReq) Reset() {
	*x = HandleLogicSearchGifsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicSearchGifsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicSearchGifsReq) ProtoMessage() {}

func (x *HandleLogicSearchGifsReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicSearchGifsReq.ProtoReflect.Descriptor instead.
func (*HandleLogicSearchGifsReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{32}
}

func (x *HandleLogicSearchGifsReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicSearchGifsReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicSearchGifsReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicSearchGifsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicSearchGifsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HandleLogicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`           //请求二进制
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`             //crc协议值
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //message_id
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //key_id
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //user_id
}

func (x *HandleLogicReq) Reset() {
	*x = HandleLogicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicReq) ProtoMessage() {}

func (x *HandleLogicReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicReq.ProtoReflect.Descriptor instead.
func (*HandleLogicReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{33}
}

func (x *HandleLogicReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// HandleLogicResult
type HandleLogicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`                         //返回二进制
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` //返回错误码
}

func (x *HandleLogicResult) Reset() {
	*x = HandleLogicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicResult) ProtoMessage() {}

func (x *HandleLogicResult) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicResult.ProtoReflect.Descriptor instead.
func (*HandleLogicResult) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{34}
}

func (x *HandleLogicResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *HandleLogicResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ShopStickerSet
type ShopStickerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool   `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool   `protobuf:"varint,4,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool   `protobuf:"varint,5,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string `protobuf:"bytes,7,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32  `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64  `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string `protobuf:"bytes,10,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  string `protobuf:"bytes,11,opt,name=documents,proto3" json:"documents,omitempty"`
}

func (x *ShopStickerSet) Reset() {
	*x = ShopStickerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopStickerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopStickerSet) ProtoMessage() {}

func (x *ShopStickerSet) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopStickerSet.ProtoReflect.Descriptor instead.
func (*ShopStickerSet) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{35}
}

func (x *ShopStickerSet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShopStickerSet) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ShopStickerSet) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *ShopStickerSet) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

func (x *ShopStickerSet) GetMasks() bool {
	if x != nil {
		return x.Masks
	}
	return false
}

func (x *ShopStickerSet) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ShopStickerSet) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *ShopStickerSet) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ShopStickerSet) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *ShopStickerSet) GetEmoticon() string {
	if x != nil {
		return x.Emoticon
	}
	return ""
}

func (x *ShopStickerSet) GetDocuments() string {
	if x != nil {
		return x.Documents
	}
	return ""
}

// StickerPackDoc
type StickerPackDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AttributesStickerSetId         int64  `protobuf:"varint,2,opt,name=attributes_sticker_set_id,json=attributesStickerSetId,proto3" json:"attributes_sticker_set_id,omitempty"`
	DocumentId                     int64  `protobuf:"varint,3,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	AccessHash                     int64  `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	MimeType                       string `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size                           int32  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Thumb                          string `protobuf:"bytes,7,opt,name=thumb,proto3" json:"thumb,omitempty"`
	DcId                           int32  `protobuf:"varint,8,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Date                           int32  `protobuf:"varint,9,opt,name=date,proto3" json:"date,omitempty"`
	AttributesImageSizeW           int32  `protobuf:"varint,10,opt,name=attributes_image_size_w,json=attributesImageSizeW,proto3" json:"attributes_image_size_w,omitempty"`
	AttributesImageSizeH           int32  `protobuf:"varint,11,opt,name=attributes_image_size_h,json=attributesImageSizeH,proto3" json:"attributes_image_size_h,omitempty"`
	AttributesStickerAlt           string `protobuf:"bytes,12,opt,name=attributes_sticker_alt,json=attributesStickerAlt,proto3" json:"attributes_sticker_alt,omitempty"`
	AttributesStickerSetAccessHash int64  `protobuf:"varint,13,opt,name=attributes_sticker_set_access_hash,json=attributesStickerSetAccessHash,proto3" json:"attributes_sticker_set_access_hash,omitempty"`
	AttributesFileName             string `protobuf:"bytes,14,opt,name=attributes_file_name,json=attributesFileName,proto3" json:"attributes_file_name,omitempty"`
}

func (x *StickerPackDoc) Reset() {
	*x = StickerPackDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerPackDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerPackDoc) ProtoMessage() {}

func (x *StickerPackDoc) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerPackDoc.ProtoReflect.Descriptor instead.
func (*StickerPackDoc) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{36}
}

func (x *StickerPackDoc) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StickerPackDoc) GetAttributesStickerSetId() int64 {
	if x != nil {
		return x.AttributesStickerSetId
	}
	return 0
}

func (x *StickerPackDoc) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *StickerPackDoc) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *StickerPackDoc) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *StickerPackDoc) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *StickerPackDoc) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *StickerPackDoc) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

func (x *StickerPackDoc) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *StickerPackDoc) GetAttributesImageSizeW() int32 {
	if x != nil {
		return x.AttributesImageSizeW
	}
	return 0
}

func (x *StickerPackDoc) GetAttributesImageSizeH() int32 {
	if x != nil {
		return x.AttributesImageSizeH
	}
	return 0
}

func (x *StickerPackDoc) GetAttributesStickerAlt() string {
	if x != nil {
		return x.AttributesStickerAlt
	}
	return ""
}

func (x *StickerPackDoc) GetAttributesStickerSetAccessHash() int64 {
	if x != nil {
		return x.AttributesStickerSetAccessHash
	}
	return 0
}

func (x *StickerPackDoc) GetAttributesFileName() string {
	if x != nil {
		return x.AttributesFileName
	}
	return ""
}

// AuthorStickerSet
type AuthorStickerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickerSetId int64  `protobuf:"varint,2,opt,name=sticker_set_id,json=stickerSetId,proto3" json:"sticker_set_id,omitempty"`
	ShortName    string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Archived     bool   `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool   `protobuf:"varint,5,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool   `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Ordered      int64  `protobuf:"varint,7,opt,name=ordered,proto3" json:"ordered,omitempty"`
	CreateTime   int32  `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *AuthorStickerSet) Reset() {
	*x = AuthorStickerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorStickerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorStickerSet) ProtoMessage() {}

func (x *AuthorStickerSet) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorStickerSet.ProtoReflect.Descriptor instead.
func (*AuthorStickerSet) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{37}
}

func (x *AuthorStickerSet) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuthorStickerSet) GetStickerSetId() int64 {
	if x != nil {
		return x.StickerSetId
	}
	return 0
}

func (x *AuthorStickerSet) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *AuthorStickerSet) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *AuthorStickerSet) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *AuthorStickerSet) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *AuthorStickerSet) GetOrdered() int64 {
	if x != nil {
		return x.Ordered
	}
	return 0
}

func (x *AuthorStickerSet) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// UserStickerSet
type UserStickerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickerSetId int64 `protobuf:"varint,2,opt,name=sticker_set_id,json=stickerSetId,proto3" json:"sticker_set_id,omitempty"`
	Archived     bool  `protobuf:"varint,3,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool  `protobuf:"varint,4,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool  `protobuf:"varint,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Ordered      int64 `protobuf:"varint,6,opt,name=ordered,proto3" json:"ordered,omitempty"`
}

func (x *UserStickerSet) Reset() {
	*x = UserStickerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStickerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStickerSet) ProtoMessage() {}

func (x *UserStickerSet) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStickerSet.ProtoReflect.Descriptor instead.
func (*UserStickerSet) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{38}
}

func (x *UserStickerSet) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserStickerSet) GetStickerSetId() int64 {
	if x != nil {
		return x.StickerSetId
	}
	return 0
}

func (x *UserStickerSet) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *UserStickerSet) GetInstalled() bool {
	if x != nil {
		return x.Installed
	}
	return false
}

func (x *UserStickerSet) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *UserStickerSet) GetOrdered() int64 {
	if x != nil {
		return x.Ordered
	}
	return 0
}

// StoreShopStickerSetReq
type StoreShopStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set    *ShopStickerSet `protobuf:"bytes,1,opt,name=set,proto3" json:"set,omitempty"`
	UserId int32           `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *StoreShopStickerSetReq) Reset() {
	*x = StoreShopStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetReq) ProtoMessage() {}

func (x *StoreShopStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetReq.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{39}
}

func (x *StoreShopStickerSetReq) GetSet() *ShopStickerSet {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *StoreShopStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// StoreShopStickerSetResult
type StoreShopStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` //返回错误码
	Id        int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                //返回id
}

func (x *StoreShopStickerSetResult) Reset() {
	*x = StoreShopStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreShopStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreShopStickerSetResult) ProtoMessage() {}

func (x *StoreShopStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreShopStickerSetResult.ProtoReflect.Descriptor instead.
func (*StoreShopStickerSetResult) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{40}
}

func (x *StoreShopStickerSetResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StoreShopStickerSetResult) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// StoreStickerPackDocReq
type StoreStickerPackDocReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Doc *StickerPackDoc `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"`
}

func (x *StoreStickerPackDocReq) Reset() {
	*x = StoreStickerPackDocReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStickerPackDocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStickerPackDocReq) ProtoMessage() {}

func (x *StoreStickerPackDocReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStickerPackDocReq.ProtoReflect.Descriptor instead.
func (*StoreStickerPackDocReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{41}
}

func (x *StoreStickerPackDocReq) GetDoc() *StickerPackDoc {
	if x != nil {
		return x.Doc
	}
	return nil
}

// StoreStickerPackDocResult
type StoreStickerPackDocResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` //返回错误码
	Id        int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                //返回id
}

func (x *StoreStickerPackDocResult) Reset() {
	*x = StoreStickerPackDocResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStickerPackDocResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStickerPackDocResult) ProtoMessage() {}

func (x *StoreStickerPackDocResult) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStickerPackDocResult.ProtoReflect.Descriptor instead.
func (*StoreStickerPackDocResult) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{42}
}

func (x *StoreStickerPackDocResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StoreStickerPackDocResult) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// StoreAuthorStickerSetReq
type StoreAuthorStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set *AuthorStickerSet `protobuf:"bytes,1,opt,name=set,proto3" json:"set,omitempty"`
}

func (x *StoreAuthorStickerSetReq) Reset() {
	*x = StoreAuthorStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreAuthorStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreAuthorStickerSetReq) ProtoMessage() {}

func (x *StoreAuthorStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreAuthorStickerSetReq.ProtoReflect.Descriptor instead.
func (*StoreAuthorStickerSetReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{43}
}

func (x *StoreAuthorStickerSetReq) GetSet() *AuthorStickerSet {
	if x != nil {
		return x.Set
	}
	return nil
}

// StoreAuthorStickerSetResult
type StoreAuthorStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` //返回错误码
	Id        int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                //返回id
}

func (x *StoreAuthorStickerSetResult) Reset() {
	*x = StoreAuthorStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreAuthorStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreAuthorStickerSetResult) ProtoMessage() {}

func (x *StoreAuthorStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreAuthorStickerSetResult.ProtoReflect.Descriptor instead.
func (*StoreAuthorStickerSetResult) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{44}
}

func (x *StoreAuthorStickerSetResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StoreAuthorStickerSetResult) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// StoreUserStickerSetReq
type StoreUserStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set *UserStickerSet `protobuf:"bytes,1,opt,name=set,proto3" json:"set,omitempty"`
}

func (x *StoreUserStickerSetReq) Reset() {
	*x = StoreUserStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreUserStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreUserStickerSetReq) ProtoMessage() {}

func (x *StoreUserStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreUserStickerSetReq.ProtoReflect.Descriptor instead.
func (*StoreUserStickerSetReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{45}
}

func (x *StoreUserStickerSetReq) GetSet() *UserStickerSet {
	if x != nil {
		return x.Set
	}
	return nil
}

// StoreUserStickerSetResult
type StoreUserStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` //返回错误码
	Id        int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                //返回id
}

func (x *StoreUserStickerSetResult) Reset() {
	*x = StoreUserStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreUserStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreUserStickerSetResult) ProtoMessage() {}

func (x *StoreUserStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreUserStickerSetResult.ProtoReflect.Descriptor instead.
func (*StoreUserStickerSetResult) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{46}
}

func (x *StoreUserStickerSetResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StoreUserStickerSetResult) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// GetStickerPackDocsReq
type GetStickerPackDocsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetId int64 `protobuf:"varint,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
}

func (x *GetStickerPackDocsReq) Reset() {
	*x = GetStickerPackDocsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerPackDocsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerPackDocsReq) ProtoMessage() {}

func (x *GetStickerPackDocsReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerPackDocsReq.ProtoReflect.Descriptor instead.
func (*GetStickerPackDocsReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{47}
}

func (x *GetStickerPackDocsReq) GetSetId() int64 {
	if x != nil {
		return x.SetId
	}
	return 0
}

// GetStickerPackDocsResult
type GetStickerPackDocsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32             `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` //返回错误码
	Docs      []*StickerPackDoc `protobuf:"bytes,2,rep,name=docs,proto3" json:"docs,omitempty"`
}

func (x *GetStickerPackDocsResult) Reset() {
	*x = GetStickerPackDocsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStickerPackDocsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStickerPackDocsResult) ProtoMessage() {}

func (x *GetStickerPackDocsResult) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStickerPackDocsResult.ProtoReflect.Descriptor instead.
func (*GetStickerPackDocsResult) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{48}
}

func (x *GetStickerPackDocsResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetStickerPackDocsResult) GetDocs() []*StickerPackDoc {
	if x != nil {
		return x.Docs
	}
	return nil
}

// GetShopStickerSetReq
type GetShopStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortName string `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
}

func (x *GetShopStickerSetReq) Reset() {
	*x = GetShopStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShopStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShopStickerSetReq) ProtoMessage() {}

func (x *GetShopStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShopStickerSetReq.ProtoReflect.Descriptor instead.
func (*GetShopStickerSetReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{49}
}

func (x *GetShopStickerSetReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetShopStickerSetReq) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

// GetShopStickerSetResult
type GetShopStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32           `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` //返回错误码
	Set       *ShopStickerSet `protobuf:"bytes,2,opt,name=set,proto3" json:"set,omitempty"`                               //
}

func (x *GetShopStickerSetResult) Reset() {
	*x = GetShopStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShopStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShopStickerSetResult) ProtoMessage() {}

func (x *GetShopStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShopStickerSetResult.ProtoReflect.Descriptor instead.
func (*GetShopStickerSetResult) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{50}
}

func (x *GetShopStickerSetResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetShopStickerSetResult) GetSet() *ShopStickerSet {
	if x != nil {
		return x.Set
	}
	return nil
}

// GetAuthorAllStickerSetsReq
type GetAuthorAllStickerSetsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetAuthorAllStickerSetsReq) Reset() {
	*x = GetAuthorAllStickerSetsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorAllStickerSetsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorAllStickerSetsReq) ProtoMessage() {}

func (x *GetAuthorAllStickerSetsReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorAllStickerSetsReq.ProtoReflect.Descriptor instead.
func (*GetAuthorAllStickerSetsReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{51}
}

func (x *GetAuthorAllStickerSetsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// GetAuthorAllStickerSetsResult
type GetAuthorAllStickerSetsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32               `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` //返回错误码
	Sets      []*AuthorStickerSet `protobuf:"bytes,2,rep,name=Sets,proto3" json:"Sets,omitempty"`                             //
}

func (x *GetAuthorAllStickerSetsResult) Reset() {
	*x = GetAuthorAllStickerSetsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorAllStickerSetsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorAllStickerSetsResult) ProtoMessage() {}

func (x *GetAuthorAllStickerSetsResult) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorAllStickerSetsResult.ProtoReflect.Descriptor instead.
func (*GetAuthorAllStickerSetsResult) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{52}
}

func (x *GetAuthorAllStickerSetsResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetAuthorAllStickerSetsResult) GetSets() []*AuthorStickerSet {
	if x != nil {
		return x.Sets
	}
	return nil
}

// DeleteShopStickerSetReq
type DeleteShopStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SetId  int64 `protobuf:"varint,2,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
}

func (x *DeleteShopStickerSetReq) Reset() {
	*x = DeleteShopStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteShopStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShopStickerSetReq) ProtoMessage() {}

func (x *DeleteShopStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShopStickerSetReq.ProtoReflect.Descriptor instead.
func (*DeleteShopStickerSetReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteShopStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteShopStickerSetReq) GetSetId() int64 {
	if x != nil {
		return x.SetId
	}
	return 0
}

// DeleteShopStickerSetResult
type DeleteShopStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` //返回错误码
}

func (x *DeleteShopStickerSetResult) Reset() {
	*x = DeleteShopStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteShopStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShopStickerSetResult) ProtoMessage() {}

func (x *DeleteShopStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShopStickerSetResult.ProtoReflect.Descriptor instead.
func (*DeleteShopStickerSetResult) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{54}
}

func (x *DeleteShopStickerSetResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// DeleteStickerPackDocReq
type DeleteStickerPackDocReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SetId int64 `protobuf:"varint,2,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
}

func (x *DeleteStickerPackDocReq) Reset() {
	*x = DeleteStickerPackDocReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerPackDocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerPackDocReq) ProtoMessage() {}

func (x *DeleteStickerPackDocReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerPackDocReq.ProtoReflect.Descriptor instead.
func (*DeleteStickerPackDocReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{55}
}

func (x *DeleteStickerPackDocReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteStickerPackDocReq) GetSetId() int64 {
	if x != nil {
		return x.SetId
	}
	return 0
}

// DeleteStickerPackDocResult
type DeleteStickerPackDocResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` //返回错误码
}

func (x *DeleteStickerPackDocResult) Reset() {
	*x = DeleteStickerPackDocResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStickerPackDocResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStickerPackDocResult) ProtoMessage() {}

func (x *DeleteStickerPackDocResult) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStickerPackDocResult.ProtoReflect.Descriptor instead.
func (*DeleteStickerPackDocResult) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{56}
}

func (x *DeleteStickerPackDocResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// DeleteAuthorStickerSetReq
type DeleteAuthorStickerSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SetId  int64 `protobuf:"varint,2,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
}

func (x *DeleteAuthorStickerSetReq) Reset() {
	*x = DeleteAuthorStickerSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuthorStickerSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuthorStickerSetReq) ProtoMessage() {}

func (x *DeleteAuthorStickerSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuthorStickerSetReq.ProtoReflect.Descriptor instead.
func (*DeleteAuthorStickerSetReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{57}
}

func (x *DeleteAuthorStickerSetReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteAuthorStickerSetReq) GetSetId() int64 {
	if x != nil {
		return x.SetId
	}
	return 0
}

// DeleteAuthorStickerSetResult
type DeleteAuthorStickerSetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` //返回错误码
}

func (x *DeleteAuthorStickerSetResult) Reset() {
	*x = DeleteAuthorStickerSetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuthorStickerSetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuthorStickerSetResult) ProtoMessage() {}

func (x *DeleteAuthorStickerSetResult) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuthorStickerSetResult.ProtoReflect.Descriptor instead.
func (*DeleteAuthorStickerSetResult) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{58}
}

func (x *DeleteAuthorStickerSetResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// UpdateStickerPackDocReq
type UpdateShopStickerSetDocReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DocIds []int64 `protobuf:"varint,2,rep,packed,name=doc_ids,json=docIds,proto3" json:"doc_ids,omitempty"`
}

func (x *UpdateShopStickerSetDocReq) Reset() {
	*x = UpdateShopStickerSetDocReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShopStickerSetDocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShopStickerSetDocReq) ProtoMessage() {}

func (x *UpdateShopStickerSetDocReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShopStickerSetDocReq.ProtoReflect.Descriptor instead.
func (*UpdateShopStickerSetDocReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{59}
}

func (x *UpdateShopStickerSetDocReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateShopStickerSetDocReq) GetDocIds() []int64 {
	if x != nil {
		return x.DocIds
	}
	return nil
}

// UpdateShopStickerSetDocResult
type UpdateShopStickerSetDocResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` //返回错误码
}

func (x *UpdateShopStickerSetDocResult) Reset() {
	*x = UpdateShopStickerSetDocResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShopStickerSetDocResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShopStickerSetDocResult) ProtoMessage() {}

func (x *UpdateShopStickerSetDocResult) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShopStickerSetDocResult.ProtoReflect.Descriptor instead.
func (*UpdateShopStickerSetDocResult) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{60}
}

func (x *UpdateShopStickerSetDocResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// BotInlineCallReq
type BotInlineCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotId      int32  `protobuf:"varint,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	KeyId      int64  `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	MessageId  int64  `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	MessageObj []byte `protobuf:"bytes,5,opt,name=message_obj,json=messageObj,proto3" json:"message_obj,omitempty"`
}

func (x *BotInlineCallReq) Reset() {
	*x = BotInlineCallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotInlineCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotInlineCallReq) ProtoMessage() {}

func (x *BotInlineCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotInlineCallReq.ProtoReflect.Descriptor instead.
func (*BotInlineCallReq) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{61}
}

func (x *BotInlineCallReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BotInlineCallReq) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *BotInlineCallReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *BotInlineCallReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *BotInlineCallReq) GetMessageObj() []byte {
	if x != nil {
		return x.MessageObj
	}
	return nil
}

// BotInlineCallResult
type BotInlineCallResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32       `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` //返回错误码
	Meta      *InlineMeta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`                             //
}

func (x *BotInlineCallResult) Reset() {
	*x = BotInlineCallResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotInlineCallResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotInlineCallResult) ProtoMessage() {}

func (x *BotInlineCallResult) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotInlineCallResult.ProtoReflect.Descriptor instead.
func (*BotInlineCallResult) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{62}
}

func (x *BotInlineCallResult) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *BotInlineCallResult) GetMeta() *InlineMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// InlineMeta
type InlineMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    int32 `protobuf:"varint,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	FromId   int32 `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChatId   int32 `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ChatType int32 `protobuf:"varint,4,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`
	BotId    int32 `protobuf:"varint,5,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
}

func (x *InlineMeta) Reset() {
	*x = InlineMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stickergif_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlineMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineMeta) ProtoMessage() {}

func (x *InlineMeta) ProtoReflect() protoreflect.Message {
	mi := &file_stickergif_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineMeta.ProtoReflect.Descriptor instead.
func (*InlineMeta) Descriptor() ([]byte, []int) {
	return file_stickergif_proto_rawDescGZIP(), []int{63}
}

func (x *InlineMeta) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *InlineMeta) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *InlineMeta) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *InlineMeta) GetChatType() int32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *InlineMeta) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

var File_stickergif_proto protoreflect.FileDescriptor

var file_stickergif_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x21, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a,
	0x1d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x41, 0x64, 0x64, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa4, 0x01,
	0x0a, 0x23, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x1e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x1a, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x46, 0x61, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x1c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x21, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62,
	0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x21, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa2,
	0x01, 0x0a, 0x21, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x65,
	0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a,
	0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x1f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x1b, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x1f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42,
	0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x22, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x61, 0x64, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa3,
	0x01, 0x0a, 0x22, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x20, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42,
	0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x1f, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x21,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x9b, 0x01, 0x0a, 0x1a, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x4d, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9d,
	0x01, 0x0a, 0x1c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9c,
	0x01, 0x0a, 0x1b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x46, 0x61,
	0x76, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x99, 0x01,
	0x0a, 0x18, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62,
	0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x21, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x72, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa3,
	0x01, 0x0a, 0x22, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49,
	0x6f, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x25, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x74, 0x73, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa9, 0x01,
	0x0a, 0x28, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x74,
	0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4a, 0x53,
	0x4f, 0x4e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62,
	0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x1c, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x74, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62,
	0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x1c, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x74, 0x73, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62,
	0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x22, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x74, 0x73, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xa1, 0x01, 0x0a, 0x20, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42,
	0x6f, 0x74, 0x73, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a,
	0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x23, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x42, 0x6f, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f,
	0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x17, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x61, 0x76, 0x65, 0x64, 0x47,
	0x69, 0x66, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x15, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x61, 0x76, 0x65, 0x47, 0x69, 0x66, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x99,
	0x01, 0x0a, 0x18, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x47, 0x69, 0x66, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f,
	0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x11,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x0e, 0x53, 0x68, 0x6f,
	0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x73,
	0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xaf, 0x04, 0x0a, 0x0e,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39,
	0x0a, 0x19, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x64, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x57, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f,
	0x61, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x12,
	0x4a, 0x0a, 0x22, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x02,
	0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a,
	0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6d, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52,
	0x03, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4a, 0x0a,
	0x19, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x16, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63,
	0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x44, 0x6f, 0x63, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x22, 0x4a, 0x0a, 0x19, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x37, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x4c, 0x0a, 0x1b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x16, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x4a, 0x0a, 0x19, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x44, 0x6f, 0x63, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x22, 0x45, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x6f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x03, 0x73,
	0x65, 0x74, 0x22, 0x35, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41,
	0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x53, 0x65, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x04,
	0x53, 0x65, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68,
	0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22,
	0x3b, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x40, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x3b,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x45, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44,
	0x6f, 0x63, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x73, 0x22, 0x3e,
	0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x99,
	0x01, 0x0a, 0x10, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x22, 0x69, 0x0a, 0x13, 0x42, 0x6f,
	0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x89, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49,
	0x64, 0x32, 0x10, 0x0a, 0x0e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x32, 0xfd, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x47,
	0x69, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1a, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x41, 0x64, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x54, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x41, 0x64, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x54, 0x6f, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x20, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69,
	0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a,
	0x1e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x36, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x7c, 0x0a, 0x1b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x12, 0x33, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x74, 0x0a, 0x17, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x46, 0x61,
	0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x2e, 0x69, 0x6d, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x46, 0x61, 0x76, 0x65,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x19, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x31, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69,
	0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x82, 0x01, 0x0a, 0x1e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x36, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69,
	0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x1e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x36, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x1e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x36, 0x2e, 0x69,
	0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x65,
	0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7e,
	0x0a, 0x1c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x34,
	0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x76,
	0x0a, 0x18, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x69, 0x6d, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69,
	0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x1c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x34, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69,
	0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x1f, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x61, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x37, 0x2e, 0x69, 0x6d, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x61, 0x64,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67,
	0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x84, 0x01,
	0x0a, 0x1f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65,
	0x74, 0x12, 0x37, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x1d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x35, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x1c, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x1f, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6f, 0x73, 0x12, 0x37, 0x2e, 0x69, 0x6d,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6f,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x82,
	0x01, 0x0a, 0x1e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x55, 0x6e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x12, 0x36, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x17, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x4d, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x2f,
	0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x4d, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x19, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x31, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x18, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x46, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x30, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x46, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x15, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67,
	0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x82, 0x01,
	0x0a, 0x1e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x72, 0x52, 0x65,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x12, 0x36, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x72, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x6e, 0x0a, 0x14, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x53, 0x61, 0x76, 0x65, 0x64, 0x47, 0x69, 0x66, 0x73, 0x12, 0x2c, 0x2e, 0x69, 0x6d, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x47, 0x69, 0x66, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x6a, 0x0a, 0x12, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x53, 0x61, 0x76, 0x65, 0x47, 0x69, 0x66, 0x12, 0x2a, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x61, 0x76, 0x65, 0x47, 0x69,
	0x66, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x70,
	0x0a, 0x15, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x47, 0x69, 0x66, 0x73, 0x12, 0x2d, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47,
	0x69, 0x66, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x8a, 0x01, 0x0a, 0x22, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x42, 0x6f, 0x74, 0x73, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x3a, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x74, 0x73, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67,
	0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x90, 0x01,
	0x0a, 0x25, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x74,
	0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4a, 0x53,
	0x4f, 0x4e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3d, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x74, 0x73, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4a, 0x53, 0x4f, 0x4e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x78, 0x0a, 0x19, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42,
	0x6f, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x6f, 0x74, 0x12, 0x31, 0x2e,
	0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42,
	0x6f, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x19, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x74, 0x73, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x74, 0x73, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x1f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x74, 0x73, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x37, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x74, 0x73, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x1d,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x74, 0x73, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x2e,
	0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42,
	0x6f, 0x74, 0x73, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x86,
	0x01, 0x0a, 0x20, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f,
	0x74, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67,
	0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x6f, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x2b,
	0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x69, 0x6d,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x74, 0x0a,
	0x13, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x44, 0x6f, 0x63, 0x12, 0x2b, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x52, 0x65,
	0x71, 0x1a, 0x2e, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x69,
	0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x69, 0x6d,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x74, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67,
	0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x2a, 0x2e, 0x69, 0x6d,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x29, 0x2e,
	0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67,
	0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x2f, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68,
	0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x12, 0x2c, 0x2e, 0x69,
	0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x69, 0x6d, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7d, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x12, 0x2f, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x69, 0x6d, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x0d, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x25, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x6f,
	0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x42, 0x25, 0x5a, 0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x67, 0x69, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_stickergif_proto_rawDescOnce sync.Once
	file_stickergif_proto_rawDescData = file_stickergif_proto_rawDesc
)

func file_stickergif_proto_rawDescGZIP() []byte {
	file_stickergif_proto_rawDescOnce.Do(func() {
		file_stickergif_proto_rawDescData = protoimpl.X.CompressGZIP(file_stickergif_proto_rawDescData)
	})
	return file_stickergif_proto_rawDescData
}

var file_stickergif_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_stickergif_proto_goTypes = []interface{}{
	(*HandleLogicClearRecentStickersReq)(nil),        // 0: imstickergifservice.HandleLogicClearRecentStickersReq
	(*HandleLogicAddStickerToSetReq)(nil),            // 1: imstickergifservice.HandleLogicAddStickerToSetReq
	(*HandleLogicChangeStickerPositionReq)(nil),      // 2: imstickergifservice.HandleLogicChangeStickerPositionReq
	(*HandleLogicCreateStickerSetReq)(nil),           // 3: imstickergifservice.HandleLogicCreateStickerSetReq
	(*HandleLogicFaveStickersReq)(nil),               // 4: imstickergifservice.HandleLogicFaveStickersReq
	(*HandleLogicGetAllStickersReq)(nil),             // 5: imstickergifservice.HandleLogicGetAllStickersReq
	(*HandleLogicGetArchivedStickersReq)(nil),        // 6: imstickergifservice.HandleLogicGetArchivedStickersReq
	(*HandleLogicGetAttachedStickersReq)(nil),        // 7: imstickergifservice.HandleLogicGetAttachedStickersReq
	(*HandleLogicGetFeaturedStickersReq)(nil),        // 8: imstickergifservice.HandleLogicGetFeaturedStickersReq
	(*HandleLogicGetRecentStickersReq)(nil),          // 9: imstickergifservice.HandleLogicGetRecentStickersReq
	(*HandleLogicGetStickerSetReq)(nil),              // 10: imstickergifservice.HandleLogicGetStickerSetReq
	(*HandleLogicInstallStickerSetReq)(nil),          // 11: imstickergifservice.HandleLogicInstallStickerSetReq
	(*HandleLogicReadFeaturedStickersReq)(nil),       // 12: imstickergifservice.HandleLogicReadFeaturedStickersReq
	(*HandleLogicRemoveStickerFromSetReq)(nil),       // 13: imstickergifservice.HandleLogicRemoveStickerFromSetReq
	(*HandleLogicReorderStickerSetsReq)(nil),         // 14: imstickergifservice.HandleLogicReorderStickerSetsReq
	(*HandleLogicSaveRecentStickerReq)(nil),          // 15: imstickergifservice.HandleLogicSaveRecentStickerReq
	(*HandleLogicUninstallStickerSetReq)(nil),        // 16: imstickergifservice.HandleLogicUninstallStickerSetReq
	(*HandleLogicMaskStickersReq)(nil),               // 17: imstickergifservice.HandleLogicMaskStickersReq
	(*HandleLogicRecentStickersReq)(nil),             // 18: imstickergifservice.HandleLogicRecentStickersReq
	(*HandleLogicFavedStickersReq)(nil),              // 19: imstickergifservice.HandleLogicFavedStickersReq
	(*HandleLogicStickerSetReq)(nil),                 // 20: imstickergifservice.HandleLogicStickerSetReq
	(*HandleLogicrReorderStickerSetsReq)(nil),        // 21: imstickergifservice.HandleLogicrReorderStickerSetsReq
	(*HandleLogicSaveRecentStickerIosReq)(nil),       // 22: imstickergifservice.HandleLogicSaveRecentStickerIosReq
	(*HandleLogicBotsAdjustCollectedBotsReq)(nil),    // 23: imstickergifservice.HandleLogicBotsAdjustCollectedBotsReq
	(*HandleLogicBotsAnswerWebhookJSONQueryReq)(nil), // 24: imstickergifservice.HandleLogicBotsAnswerWebhookJSONQueryReq
	(*HandleLogicBotsCollectBotReq)(nil),             // 25: imstickergifservice.HandleLogicBotsCollectBotReq
	(*HandleLogicBotsGetBotListReq)(nil),             // 26: imstickergifservice.HandleLogicBotsGetBotListReq
	(*HandleLogicBotsGetCollectedBotsReq)(nil),       // 27: imstickergifservice.HandleLogicBotsGetCollectedBotsReq
	(*HandleLogicBotsGetUserBotListReq)(nil),         // 28: imstickergifservice.HandleLogicBotsGetUserBotListReq
	(*HandleLogicBotsSendCustomRequestReq)(nil),      // 29: imstickergifservice.HandleLogicBotsSendCustomRequestReq
	(*HandleLogicSavedGifsReq)(nil),                  // 30: imstickergifservice.HandleLogicSavedGifsReq
	(*HandleLogicSaveGifReq)(nil),                    // 31: imstickergifservice.HandleLogicSaveGifReq
	(*HandleLogicSearchGifsReq)(nil),                 // 32: imstickergifservice.HandleLogicSearchGifsReq
	(*HandleLogicReq)(nil),                           // 33: imstickergifservice.HandleLogicReq
	(*HandleLogicResult)(nil),                        // 34: imstickergifservice.HandleLogicResult
	(*ShopStickerSet)(nil),                           // 35: imstickergifservice.ShopStickerSet
	(*StickerPackDoc)(nil),                           // 36: imstickergifservice.StickerPackDoc
	(*AuthorStickerSet)(nil),                         // 37: imstickergifservice.AuthorStickerSet
	(*UserStickerSet)(nil),                           // 38: imstickergifservice.UserStickerSet
	(*StoreShopStickerSetReq)(nil),                   // 39: imstickergifservice.StoreShopStickerSetReq
	(*StoreShopStickerSetResult)(nil),                // 40: imstickergifservice.StoreShopStickerSetResult
	(*StoreStickerPackDocReq)(nil),                   // 41: imstickergifservice.StoreStickerPackDocReq
	(*StoreStickerPackDocResult)(nil),                // 42: imstickergifservice.StoreStickerPackDocResult
	(*StoreAuthorStickerSetReq)(nil),                 // 43: imstickergifservice.StoreAuthorStickerSetReq
	(*StoreAuthorStickerSetResult)(nil),              // 44: imstickergifservice.StoreAuthorStickerSetResult
	(*StoreUserStickerSetReq)(nil),                   // 45: imstickergifservice.StoreUserStickerSetReq
	(*StoreUserStickerSetResult)(nil),                // 46: imstickergifservice.StoreUserStickerSetResult
	(*GetStickerPackDocsReq)(nil),                    // 47: imstickergifservice.GetStickerPackDocsReq
	(*GetStickerPackDocsResult)(nil),                 // 48: imstickergifservice.GetStickerPackDocsResult
	(*GetShopStickerSetReq)(nil),                     // 49: imstickergifservice.GetShopStickerSetReq
	(*GetShopStickerSetResult)(nil),                  // 50: imstickergifservice.GetShopStickerSetResult
	(*GetAuthorAllStickerSetsReq)(nil),               // 51: imstickergifservice.GetAuthorAllStickerSetsReq
	(*GetAuthorAllStickerSetsResult)(nil),            // 52: imstickergifservice.GetAuthorAllStickerSetsResult
	(*DeleteShopStickerSetReq)(nil),                  // 53: imstickergifservice.DeleteShopStickerSetReq
	(*DeleteShopStickerSetResult)(nil),               // 54: imstickergifservice.DeleteShopStickerSetResult
	(*DeleteStickerPackDocReq)(nil),                  // 55: imstickergifservice.DeleteStickerPackDocReq
	(*DeleteStickerPackDocResult)(nil),               // 56: imstickergifservice.DeleteStickerPackDocResult
	(*DeleteAuthorStickerSetReq)(nil),                // 57: imstickergifservice.DeleteAuthorStickerSetReq
	(*DeleteAuthorStickerSetResult)(nil),             // 58: imstickergifservice.DeleteAuthorStickerSetResult
	(*UpdateShopStickerSetDocReq)(nil),               // 59: imstickergifservice.UpdateShopStickerSetDocReq
	(*UpdateShopStickerSetDocResult)(nil),            // 60: imstickergifservice.UpdateShopStickerSetDocResult
	(*BotInlineCallReq)(nil),                         // 61: imstickergifservice.BotInlineCallReq
	(*BotInlineCallResult)(nil),                      // 62: imstickergifservice.BotInlineCallResult
	(*InlineMeta)(nil),                               // 63: imstickergifservice.InlineMeta
}
var file_stickergif_proto_depIdxs = []int32{
	35, // 0: imstickergifservice.StoreShopStickerSetReq.set:type_name -> imstickergifservice.ShopStickerSet
	36, // 1: imstickergifservice.StoreStickerPackDocReq.doc:type_name -> imstickergifservice.StickerPackDoc
	37, // 2: imstickergifservice.StoreAuthorStickerSetReq.set:type_name -> imstickergifservice.AuthorStickerSet
	38, // 3: imstickergifservice.StoreUserStickerSetReq.set:type_name -> imstickergifservice.UserStickerSet
	36, // 4: imstickergifservice.GetStickerPackDocsResult.docs:type_name -> imstickergifservice.StickerPackDoc
	35, // 5: imstickergifservice.GetShopStickerSetResult.set:type_name -> imstickergifservice.ShopStickerSet
	37, // 6: imstickergifservice.GetAuthorAllStickerSetsResult.Sets:type_name -> imstickergifservice.AuthorStickerSet
	63, // 7: imstickergifservice.BotInlineCallResult.meta:type_name -> imstickergifservice.InlineMeta
	33, // 8: imstickergifservice.StickerGifService.HandleLogic:input_type -> imstickergifservice.HandleLogicReq
	1,  // 9: imstickergifservice.StickerGifService.HandleLogicAddStickerToSet:input_type -> imstickergifservice.HandleLogicAddStickerToSetReq
	2,  // 10: imstickergifservice.StickerGifService.HandleLogicChangeStickerPosition:input_type -> imstickergifservice.HandleLogicChangeStickerPositionReq
	0,  // 11: imstickergifservice.StickerGifService.HandleLogicClearRecentStickers:input_type -> imstickergifservice.HandleLogicClearRecentStickersReq
	3,  // 12: imstickergifservice.StickerGifService.HandleLogicCreateStickerSet:input_type -> imstickergifservice.HandleLogicCreateStickerSetReq
	4,  // 13: imstickergifservice.StickerGifService.HandleLogicFaveStickers:input_type -> imstickergifservice.HandleLogicFaveStickersReq
	5,  // 14: imstickergifservice.StickerGifService.HandleLogicGetAllStickers:input_type -> imstickergifservice.HandleLogicGetAllStickersReq
	6,  // 15: imstickergifservice.StickerGifService.HandleLogicGetArchivedStickers:input_type -> imstickergifservice.HandleLogicGetArchivedStickersReq
	7,  // 16: imstickergifservice.StickerGifService.HandleLogicGetAttachedStickers:input_type -> imstickergifservice.HandleLogicGetAttachedStickersReq
	8,  // 17: imstickergifservice.StickerGifService.HandleLogicGetFeaturedStickers:input_type -> imstickergifservice.HandleLogicGetFeaturedStickersReq
	9,  // 18: imstickergifservice.StickerGifService.HandleLogicGetRecentStickers:input_type -> imstickergifservice.HandleLogicGetRecentStickersReq
	10, // 19: imstickergifservice.StickerGifService.HandleLogicGetStickerSet:input_type -> imstickergifservice.HandleLogicGetStickerSetReq
	11, // 20: imstickergifservice.StickerGifService.HandleLogicInstallStickerSet:input_type -> imstickergifservice.HandleLogicInstallStickerSetReq
	12, // 21: imstickergifservice.StickerGifService.HandleLogicReadFeaturedStickers:input_type -> imstickergifservice.HandleLogicReadFeaturedStickersReq
	13, // 22: imstickergifservice.StickerGifService.HandleLogicRemoveStickerFromSet:input_type -> imstickergifservice.HandleLogicRemoveStickerFromSetReq
	14, // 23: imstickergifservice.StickerGifService.HandleLogicReorderStickerSets:input_type -> imstickergifservice.HandleLogicReorderStickerSetsReq
	15, // 24: imstickergifservice.StickerGifService.HandleLogicSaveRecentSticker:input_type -> imstickergifservice.HandleLogicSaveRecentStickerReq
	22, // 25: imstickergifservice.StickerGifService.HandleLogicSaveRecentStickerIos:input_type -> imstickergifservice.HandleLogicSaveRecentStickerIosReq
	16, // 26: imstickergifservice.StickerGifService.HandleLogicUninstallStickerSet:input_type -> imstickergifservice.HandleLogicUninstallStickerSetReq
	17, // 27: imstickergifservice.StickerGifService.HandleLogicMaskStickers:input_type -> imstickergifservice.HandleLogicMaskStickersReq
	18, // 28: imstickergifservice.StickerGifService.HandleLogicRecentStickers:input_type -> imstickergifservice.HandleLogicRecentStickersReq
	19, // 29: imstickergifservice.StickerGifService.HandleLogicFavedStickers:input_type -> imstickergifservice.HandleLogicFavedStickersReq
	20, // 30: imstickergifservice.StickerGifService.HandleLogicStickerSet:input_type -> imstickergifservice.HandleLogicStickerSetReq
	21, // 31: imstickergifservice.StickerGifService.HandleLogicrReorderStickerSets:input_type -> imstickergifservice.HandleLogicrReorderStickerSetsReq
	30, // 32: imstickergifservice.StickerGifService.HandleLogicSavedGifs:input_type -> imstickergifservice.HandleLogicSavedGifsReq
	31, // 33: imstickergifservice.StickerGifService.HandleLogicSaveGif:input_type -> imstickergifservice.HandleLogicSaveGifReq
	32, // 34: imstickergifservice.StickerGifService.HandleLogicSearchGifs:input_type -> imstickergifservice.HandleLogicSearchGifsReq
	23, // 35: imstickergifservice.StickerGifService.HandleLogicBotsAdjustCollectedBots:input_type -> imstickergifservice.HandleLogicBotsAdjustCollectedBotsReq
	24, // 36: imstickergifservice.StickerGifService.HandleLogicBotsAnswerWebhookJSONQuery:input_type -> imstickergifservice.HandleLogicBotsAnswerWebhookJSONQueryReq
	25, // 37: imstickergifservice.StickerGifService.HandleLogicBotsCollectBot:input_type -> imstickergifservice.HandleLogicBotsCollectBotReq
	26, // 38: imstickergifservice.StickerGifService.HandleLogicBotsGetBotList:input_type -> imstickergifservice.HandleLogicBotsGetBotListReq
	27, // 39: imstickergifservice.StickerGifService.HandleLogicBotsGetCollectedBots:input_type -> imstickergifservice.HandleLogicBotsGetCollectedBotsReq
	28, // 40: imstickergifservice.StickerGifService.HandleLogicBotsGetUserBotList:input_type -> imstickergifservice.HandleLogicBotsGetUserBotListReq
	29, // 41: imstickergifservice.StickerGifService.HandleLogicBotsSendCustomRequest:input_type -> imstickergifservice.HandleLogicBotsSendCustomRequestReq
	39, // 42: imstickergifservice.StickerGifService.StoreShopStickerSet:input_type -> imstickergifservice.StoreShopStickerSetReq
	41, // 43: imstickergifservice.StickerGifService.StoreStickerPackDoc:input_type -> imstickergifservice.StoreStickerPackDocReq
	43, // 44: imstickergifservice.StickerGifService.StoreAuthorStickerSet:input_type -> imstickergifservice.StoreAuthorStickerSetReq
	45, // 45: imstickergifservice.StickerGifService.StoreUserStickerSet:input_type -> imstickergifservice.StoreUserStickerSetReq
	47, // 46: imstickergifservice.StickerGifService.GetStickerPackDocs:input_type -> imstickergifservice.GetStickerPackDocsReq
	49, // 47: imstickergifservice.StickerGifService.GetShopStickerSet:input_type -> imstickergifservice.GetShopStickerSetReq
	51, // 48: imstickergifservice.StickerGifService.GetAuthorAllStickerSets:input_type -> imstickergifservice.GetAuthorAllStickerSetsReq
	53, // 49: imstickergifservice.StickerGifService.DeleteShopStickerSet:input_type -> imstickergifservice.DeleteShopStickerSetReq
	55, // 50: imstickergifservice.StickerGifService.DeleteStickerPackDoc:input_type -> imstickergifservice.DeleteStickerPackDocReq
	57, // 51: imstickergifservice.StickerGifService.DeleteAuthorStickerSet:input_type -> imstickergifservice.DeleteAuthorStickerSetReq
	59, // 52: imstickergifservice.StickerGifService.UpdateShopStickerSetDoc:input_type -> imstickergifservice.UpdateShopStickerSetDocReq
	61, // 53: imstickergifservice.StickerGifService.BotInlineCall:input_type -> imstickergifservice.BotInlineCallReq
	34, // 54: imstickergifservice.StickerGifService.HandleLogic:output_type -> imstickergifservice.HandleLogicResult
	34, // 55: imstickergifservice.StickerGifService.HandleLogicAddStickerToSet:output_type -> imstickergifservice.HandleLogicResult
	34, // 56: imstickergifservice.StickerGifService.HandleLogicChangeStickerPosition:output_type -> imstickergifservice.HandleLogicResult
	34, // 57: imstickergifservice.StickerGifService.HandleLogicClearRecentStickers:output_type -> imstickergifservice.HandleLogicResult
	34, // 58: imstickergifservice.StickerGifService.HandleLogicCreateStickerSet:output_type -> imstickergifservice.HandleLogicResult
	34, // 59: imstickergifservice.StickerGifService.HandleLogicFaveStickers:output_type -> imstickergifservice.HandleLogicResult
	34, // 60: imstickergifservice.StickerGifService.HandleLogicGetAllStickers:output_type -> imstickergifservice.HandleLogicResult
	34, // 61: imstickergifservice.StickerGifService.HandleLogicGetArchivedStickers:output_type -> imstickergifservice.HandleLogicResult
	34, // 62: imstickergifservice.StickerGifService.HandleLogicGetAttachedStickers:output_type -> imstickergifservice.HandleLogicResult
	34, // 63: imstickergifservice.StickerGifService.HandleLogicGetFeaturedStickers:output_type -> imstickergifservice.HandleLogicResult
	34, // 64: imstickergifservice.StickerGifService.HandleLogicGetRecentStickers:output_type -> imstickergifservice.HandleLogicResult
	34, // 65: imstickergifservice.StickerGifService.HandleLogicGetStickerSet:output_type -> imstickergifservice.HandleLogicResult
	34, // 66: imstickergifservice.StickerGifService.HandleLogicInstallStickerSet:output_type -> imstickergifservice.HandleLogicResult
	34, // 67: imstickergifservice.StickerGifService.HandleLogicReadFeaturedStickers:output_type -> imstickergifservice.HandleLogicResult
	34, // 68: imstickergifservice.StickerGifService.HandleLogicRemoveStickerFromSet:output_type -> imstickergifservice.HandleLogicResult
	34, // 69: imstickergifservice.StickerGifService.HandleLogicReorderStickerSets:output_type -> imstickergifservice.HandleLogicResult
	34, // 70: imstickergifservice.StickerGifService.HandleLogicSaveRecentSticker:output_type -> imstickergifservice.HandleLogicResult
	34, // 71: imstickergifservice.StickerGifService.HandleLogicSaveRecentStickerIos:output_type -> imstickergifservice.HandleLogicResult
	34, // 72: imstickergifservice.StickerGifService.HandleLogicUninstallStickerSet:output_type -> imstickergifservice.HandleLogicResult
	34, // 73: imstickergifservice.StickerGifService.HandleLogicMaskStickers:output_type -> imstickergifservice.HandleLogicResult
	34, // 74: imstickergifservice.StickerGifService.HandleLogicRecentStickers:output_type -> imstickergifservice.HandleLogicResult
	34, // 75: imstickergifservice.StickerGifService.HandleLogicFavedStickers:output_type -> imstickergifservice.HandleLogicResult
	34, // 76: imstickergifservice.StickerGifService.HandleLogicStickerSet:output_type -> imstickergifservice.HandleLogicResult
	34, // 77: imstickergifservice.StickerGifService.HandleLogicrReorderStickerSets:output_type -> imstickergifservice.HandleLogicResult
	34, // 78: imstickergifservice.StickerGifService.HandleLogicSavedGifs:output_type -> imstickergifservice.HandleLogicResult
	34, // 79: imstickergifservice.StickerGifService.HandleLogicSaveGif:output_type -> imstickergifservice.HandleLogicResult
	34, // 80: imstickergifservice.StickerGifService.HandleLogicSearchGifs:output_type -> imstickergifservice.HandleLogicResult
	34, // 81: imstickergifservice.StickerGifService.HandleLogicBotsAdjustCollectedBots:output_type -> imstickergifservice.HandleLogicResult
	34, // 82: imstickergifservice.StickerGifService.HandleLogicBotsAnswerWebhookJSONQuery:output_type -> imstickergifservice.HandleLogicResult
	34, // 83: imstickergifservice.StickerGifService.HandleLogicBotsCollectBot:output_type -> imstickergifservice.HandleLogicResult
	34, // 84: imstickergifservice.StickerGifService.HandleLogicBotsGetBotList:output_type -> imstickergifservice.HandleLogicResult
	34, // 85: imstickergifservice.StickerGifService.HandleLogicBotsGetCollectedBots:output_type -> imstickergifservice.HandleLogicResult
	34, // 86: imstickergifservice.StickerGifService.HandleLogicBotsGetUserBotList:output_type -> imstickergifservice.HandleLogicResult
	34, // 87: imstickergifservice.StickerGifService.HandleLogicBotsSendCustomRequest:output_type -> imstickergifservice.HandleLogicResult
	40, // 88: imstickergifservice.StickerGifService.StoreShopStickerSet:output_type -> imstickergifservice.StoreShopStickerSetResult
	42, // 89: imstickergifservice.StickerGifService.StoreStickerPackDoc:output_type -> imstickergifservice.StoreStickerPackDocResult
	44, // 90: imstickergifservice.StickerGifService.StoreAuthorStickerSet:output_type -> imstickergifservice.StoreAuthorStickerSetResult
	46, // 91: imstickergifservice.StickerGifService.StoreUserStickerSet:output_type -> imstickergifservice.StoreUserStickerSetResult
	48, // 92: imstickergifservice.StickerGifService.GetStickerPackDocs:output_type -> imstickergifservice.GetStickerPackDocsResult
	50, // 93: imstickergifservice.StickerGifService.GetShopStickerSet:output_type -> imstickergifservice.GetShopStickerSetResult
	52, // 94: imstickergifservice.StickerGifService.GetAuthorAllStickerSets:output_type -> imstickergifservice.GetAuthorAllStickerSetsResult
	54, // 95: imstickergifservice.StickerGifService.DeleteShopStickerSet:output_type -> imstickergifservice.DeleteShopStickerSetResult
	56, // 96: imstickergifservice.StickerGifService.DeleteStickerPackDoc:output_type -> imstickergifservice.DeleteStickerPackDocResult
	58, // 97: imstickergifservice.StickerGifService.DeleteAuthorStickerSet:output_type -> imstickergifservice.DeleteAuthorStickerSetResult
	60, // 98: imstickergifservice.StickerGifService.UpdateShopStickerSetDoc:output_type -> imstickergifservice.UpdateShopStickerSetDocResult
	62, // 99: imstickergifservice.StickerGifService.BotInlineCall:output_type -> imstickergifservice.BotInlineCallResult
	54, // [54:100] is the sub-list for method output_type
	8,  // [8:54] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_stickergif_proto_init() }
func file_stickergif_proto_init() {
	if File_stickergif_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stickergif_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicClearRecentStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicAddStickerToSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicChangeStickerPositionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicCreateStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicFaveStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicGetAllStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicGetArchivedStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicGetAttachedStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicGetFeaturedStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicGetRecentStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicGetStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicInstallStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicReadFeaturedStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicRemoveStickerFromSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicReorderStickerSetsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicSaveRecentStickerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicUninstallStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicMaskStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicRecentStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicFavedStickersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicrReorderStickerSetsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicSaveRecentStickerIosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicBotsAdjustCollectedBotsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicBotsAnswerWebhookJSONQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicBotsCollectBotReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicBotsGetBotListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicBotsGetCollectedBotsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicBotsGetUserBotListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicBotsSendCustomRequestReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicSavedGifsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicSaveGifReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicSearchGifsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopStickerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickerPackDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorStickerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStickerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreShopStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStickerPackDocReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStickerPackDocResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreAuthorStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreAuthorStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreUserStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreUserStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerPackDocsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStickerPackDocsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShopStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShopStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorAllStickerSetsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorAllStickerSetsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteShopStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteShopStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerPackDocReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStickerPackDocResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAuthorStickerSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAuthorStickerSetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShopStickerSetDocReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShopStickerSetDocResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotInlineCallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotInlineCallResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stickergif_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlineMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stickergif_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_stickergif_proto_goTypes,
		DependencyIndexes: file_stickergif_proto_depIdxs,
		MessageInfos:      file_stickergif_proto_msgTypes,
	}.Build()
	File_stickergif_proto = out.File
	file_stickergif_proto_rawDesc = nil
	file_stickergif_proto_goTypes = nil
	file_stickergif_proto_depIdxs = nil
}
