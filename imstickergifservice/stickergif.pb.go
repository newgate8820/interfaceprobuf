// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/imstickergifservice/stickergif.proto

/*
Package imstickergifservice is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/imstickergifservice/stickergif.proto

It has these top-level messages:

	HandleLogicClearRecentStickersReq
	HandleLogicAddStickerToSetReq
	HandleLogicChangeStickerPositionReq
	HandleLogicCreateStickerSetReq
	HandleLogicFaveStickersReq
	HandleLogicGetAllStickersReq
	HandleLogicGetArchivedStickersReq
	HandleLogicGetAttachedStickersReq
	HandleLogicGetFeaturedStickersReq
	HandleLogicGetRecentStickersReq
	HandleLogicGetStickerSetReq
	HandleLogicInstallStickerSetReq
	HandleLogicReadFeaturedStickersReq
	HandleLogicRemoveStickerFromSetReq
	HandleLogicReorderStickerSetsReq
	HandleLogicSaveRecentStickerReq
	HandleLogicUninstallStickerSetReq
	HandleLogicMaskStickersReq
	HandleLogicRecentStickersReq
	HandleLogicFavedStickersReq
	HandleLogicStickerSetReq
	HandleLogicrReorderStickerSetsReq
	HandleLogicSaveRecentStickerIosReq
	HandleLogicBotsAdjustCollectedBotsReq
	HandleLogicBotsAnswerWebhookJSONQueryReq
	HandleLogicBotsCollectBotReq
	HandleLogicBotsGetBotListReq
	HandleLogicBotsGetCollectedBotsReq
	HandleLogicBotsGetUserBotListReq
	HandleLogicBotsSendCustomRequestReq
	HandleLogicSavedGifsReq
	HandleLogicSaveGifReq
	HandleLogicSearchGifsReq
	HandleLogicReq
	HandleLogicResult
	ShopStickerSet
	StickerPackDoc
	AuthorStickerSet
	UserStickerSet
	StoreShopStickerSetReq
	StoreShopStickerSetResult
	StoreStickerPackDocReq
	StoreStickerPackDocResult
	StoreAuthorStickerSetReq
	StoreAuthorStickerSetResult
	StoreUserStickerSetReq
	StoreUserStickerSetResult
	GetStickerPackDocsReq
	GetStickerPackDocsResult
	GetShopStickerSetReq
	GetShopStickerSetResult
	GetAuthorAllStickerSetsReq
	GetAuthorAllStickerSetsResult
	DeleteShopStickerSetReq
	DeleteShopStickerSetResult
	DeleteStickerPackDocReq
	DeleteStickerPackDocResult
	DeleteAuthorStickerSetReq
	DeleteAuthorStickerSetResult
	UpdateShopStickerSetDocReq
	UpdateShopStickerSetDocResult
	BotInlineCallReq
	BotInlineCallResult
	InlineMeta
*/
package imstickergifservice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// HandleLogicReq
type HandleLogicClearRecentStickersReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicClearRecentStickersReq) Reset()         { *m = HandleLogicClearRecentStickersReq{} }
func (m *HandleLogicClearRecentStickersReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicClearRecentStickersReq) ProtoMessage()    {}
func (*HandleLogicClearRecentStickersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{0}
}

func (m *HandleLogicClearRecentStickersReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicClearRecentStickersReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicClearRecentStickersReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicClearRecentStickersReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicClearRecentStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicAddStickerToSetReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicAddStickerToSetReq) Reset()         { *m = HandleLogicAddStickerToSetReq{} }
func (m *HandleLogicAddStickerToSetReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicAddStickerToSetReq) ProtoMessage()    {}
func (*HandleLogicAddStickerToSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{1}
}

func (m *HandleLogicAddStickerToSetReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicAddStickerToSetReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicAddStickerToSetReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicAddStickerToSetReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicAddStickerToSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicChangeStickerPositionReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicChangeStickerPositionReq) Reset()         { *m = HandleLogicChangeStickerPositionReq{} }
func (m *HandleLogicChangeStickerPositionReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicChangeStickerPositionReq) ProtoMessage()    {}
func (*HandleLogicChangeStickerPositionReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{2}
}

func (m *HandleLogicChangeStickerPositionReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicChangeStickerPositionReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicChangeStickerPositionReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicChangeStickerPositionReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicChangeStickerPositionReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicCreateStickerSetReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicCreateStickerSetReq) Reset()         { *m = HandleLogicCreateStickerSetReq{} }
func (m *HandleLogicCreateStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicCreateStickerSetReq) ProtoMessage()    {}
func (*HandleLogicCreateStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{3}
}

func (m *HandleLogicCreateStickerSetReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicCreateStickerSetReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicCreateStickerSetReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicCreateStickerSetReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicCreateStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicFaveStickersReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicFaveStickersReq) Reset()         { *m = HandleLogicFaveStickersReq{} }
func (m *HandleLogicFaveStickersReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicFaveStickersReq) ProtoMessage()    {}
func (*HandleLogicFaveStickersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{4}
}

func (m *HandleLogicFaveStickersReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicFaveStickersReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicFaveStickersReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicFaveStickersReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicFaveStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicGetAllStickersReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicGetAllStickersReq) Reset()         { *m = HandleLogicGetAllStickersReq{} }
func (m *HandleLogicGetAllStickersReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicGetAllStickersReq) ProtoMessage()    {}
func (*HandleLogicGetAllStickersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{5}
}

func (m *HandleLogicGetAllStickersReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicGetAllStickersReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicGetAllStickersReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicGetAllStickersReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicGetAllStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicGetArchivedStickersReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicGetArchivedStickersReq) Reset()         { *m = HandleLogicGetArchivedStickersReq{} }
func (m *HandleLogicGetArchivedStickersReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicGetArchivedStickersReq) ProtoMessage()    {}
func (*HandleLogicGetArchivedStickersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{6}
}

func (m *HandleLogicGetArchivedStickersReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicGetArchivedStickersReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicGetArchivedStickersReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicGetArchivedStickersReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicGetArchivedStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicGetAttachedStickersReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicGetAttachedStickersReq) Reset()         { *m = HandleLogicGetAttachedStickersReq{} }
func (m *HandleLogicGetAttachedStickersReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicGetAttachedStickersReq) ProtoMessage()    {}
func (*HandleLogicGetAttachedStickersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{7}
}

func (m *HandleLogicGetAttachedStickersReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicGetAttachedStickersReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicGetAttachedStickersReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicGetAttachedStickersReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicGetAttachedStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicGetFeaturedStickersReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicGetFeaturedStickersReq) Reset()         { *m = HandleLogicGetFeaturedStickersReq{} }
func (m *HandleLogicGetFeaturedStickersReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicGetFeaturedStickersReq) ProtoMessage()    {}
func (*HandleLogicGetFeaturedStickersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{8}
}

func (m *HandleLogicGetFeaturedStickersReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicGetFeaturedStickersReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicGetFeaturedStickersReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicGetFeaturedStickersReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicGetFeaturedStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicGetRecentStickersReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicGetRecentStickersReq) Reset()         { *m = HandleLogicGetRecentStickersReq{} }
func (m *HandleLogicGetRecentStickersReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicGetRecentStickersReq) ProtoMessage()    {}
func (*HandleLogicGetRecentStickersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{9}
}

func (m *HandleLogicGetRecentStickersReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicGetRecentStickersReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicGetRecentStickersReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicGetRecentStickersReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicGetRecentStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicGetStickerSetReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicGetStickerSetReq) Reset()         { *m = HandleLogicGetStickerSetReq{} }
func (m *HandleLogicGetStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicGetStickerSetReq) ProtoMessage()    {}
func (*HandleLogicGetStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{10}
}

func (m *HandleLogicGetStickerSetReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicGetStickerSetReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicGetStickerSetReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicGetStickerSetReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicGetStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicInstallStickerSetReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicInstallStickerSetReq) Reset()         { *m = HandleLogicInstallStickerSetReq{} }
func (m *HandleLogicInstallStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicInstallStickerSetReq) ProtoMessage()    {}
func (*HandleLogicInstallStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{11}
}

func (m *HandleLogicInstallStickerSetReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicInstallStickerSetReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicInstallStickerSetReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicInstallStickerSetReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicInstallStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicReadFeaturedStickersReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicReadFeaturedStickersReq) Reset()         { *m = HandleLogicReadFeaturedStickersReq{} }
func (m *HandleLogicReadFeaturedStickersReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicReadFeaturedStickersReq) ProtoMessage()    {}
func (*HandleLogicReadFeaturedStickersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{12}
}

func (m *HandleLogicReadFeaturedStickersReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicReadFeaturedStickersReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicReadFeaturedStickersReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicReadFeaturedStickersReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicReadFeaturedStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicRemoveStickerFromSetReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicRemoveStickerFromSetReq) Reset()         { *m = HandleLogicRemoveStickerFromSetReq{} }
func (m *HandleLogicRemoveStickerFromSetReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicRemoveStickerFromSetReq) ProtoMessage()    {}
func (*HandleLogicRemoveStickerFromSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{13}
}

func (m *HandleLogicRemoveStickerFromSetReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicRemoveStickerFromSetReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicRemoveStickerFromSetReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicRemoveStickerFromSetReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicRemoveStickerFromSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicReorderStickerSetsReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicReorderStickerSetsReq) Reset()         { *m = HandleLogicReorderStickerSetsReq{} }
func (m *HandleLogicReorderStickerSetsReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicReorderStickerSetsReq) ProtoMessage()    {}
func (*HandleLogicReorderStickerSetsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{14}
}

func (m *HandleLogicReorderStickerSetsReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicReorderStickerSetsReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicReorderStickerSetsReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicReorderStickerSetsReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicReorderStickerSetsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicSaveRecentStickerReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicSaveRecentStickerReq) Reset()         { *m = HandleLogicSaveRecentStickerReq{} }
func (m *HandleLogicSaveRecentStickerReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicSaveRecentStickerReq) ProtoMessage()    {}
func (*HandleLogicSaveRecentStickerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{15}
}

func (m *HandleLogicSaveRecentStickerReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicSaveRecentStickerReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicSaveRecentStickerReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicSaveRecentStickerReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicSaveRecentStickerReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicUninstallStickerSetReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicUninstallStickerSetReq) Reset()         { *m = HandleLogicUninstallStickerSetReq{} }
func (m *HandleLogicUninstallStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicUninstallStickerSetReq) ProtoMessage()    {}
func (*HandleLogicUninstallStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{16}
}

func (m *HandleLogicUninstallStickerSetReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicUninstallStickerSetReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicUninstallStickerSetReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicUninstallStickerSetReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicUninstallStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicMaskStickersReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicMaskStickersReq) Reset()         { *m = HandleLogicMaskStickersReq{} }
func (m *HandleLogicMaskStickersReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicMaskStickersReq) ProtoMessage()    {}
func (*HandleLogicMaskStickersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{17}
}

func (m *HandleLogicMaskStickersReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicMaskStickersReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicMaskStickersReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicMaskStickersReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicMaskStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicRecentStickersReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicRecentStickersReq) Reset()         { *m = HandleLogicRecentStickersReq{} }
func (m *HandleLogicRecentStickersReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicRecentStickersReq) ProtoMessage()    {}
func (*HandleLogicRecentStickersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{18}
}

func (m *HandleLogicRecentStickersReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicRecentStickersReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicRecentStickersReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicRecentStickersReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicRecentStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicFavedStickersReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicFavedStickersReq) Reset()         { *m = HandleLogicFavedStickersReq{} }
func (m *HandleLogicFavedStickersReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicFavedStickersReq) ProtoMessage()    {}
func (*HandleLogicFavedStickersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{19}
}

func (m *HandleLogicFavedStickersReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicFavedStickersReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicFavedStickersReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicFavedStickersReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicFavedStickersReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicStickerSetReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicStickerSetReq) Reset()         { *m = HandleLogicStickerSetReq{} }
func (m *HandleLogicStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicStickerSetReq) ProtoMessage()    {}
func (*HandleLogicStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{20}
}

func (m *HandleLogicStickerSetReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicStickerSetReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicStickerSetReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicStickerSetReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicrReorderStickerSetsReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicrReorderStickerSetsReq) Reset()         { *m = HandleLogicrReorderStickerSetsReq{} }
func (m *HandleLogicrReorderStickerSetsReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicrReorderStickerSetsReq) ProtoMessage()    {}
func (*HandleLogicrReorderStickerSetsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{21}
}

func (m *HandleLogicrReorderStickerSetsReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicrReorderStickerSetsReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicrReorderStickerSetsReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicrReorderStickerSetsReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicrReorderStickerSetsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicSaveRecentStickerIosReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicSaveRecentStickerIosReq) Reset()         { *m = HandleLogicSaveRecentStickerIosReq{} }
func (m *HandleLogicSaveRecentStickerIosReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicSaveRecentStickerIosReq) ProtoMessage()    {}
func (*HandleLogicSaveRecentStickerIosReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{22}
}

func (m *HandleLogicSaveRecentStickerIosReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicSaveRecentStickerIosReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicSaveRecentStickerIosReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicSaveRecentStickerIosReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicSaveRecentStickerIosReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicBotsAdjustCollectedBotsReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicBotsAdjustCollectedBotsReq) Reset()         { *m = HandleLogicBotsAdjustCollectedBotsReq{} }
func (m *HandleLogicBotsAdjustCollectedBotsReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicBotsAdjustCollectedBotsReq) ProtoMessage()    {}
func (*HandleLogicBotsAdjustCollectedBotsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{23}
}

func (m *HandleLogicBotsAdjustCollectedBotsReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicBotsAdjustCollectedBotsReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicBotsAdjustCollectedBotsReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicBotsAdjustCollectedBotsReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicBotsAdjustCollectedBotsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicBotsAnswerWebhookJSONQueryReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicBotsAnswerWebhookJSONQueryReq) Reset() {
	*m = HandleLogicBotsAnswerWebhookJSONQueryReq{}
}
func (m *HandleLogicBotsAnswerWebhookJSONQueryReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicBotsAnswerWebhookJSONQueryReq) ProtoMessage()    {}
func (*HandleLogicBotsAnswerWebhookJSONQueryReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{24}
}

func (m *HandleLogicBotsAnswerWebhookJSONQueryReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicBotsAnswerWebhookJSONQueryReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicBotsAnswerWebhookJSONQueryReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicBotsAnswerWebhookJSONQueryReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicBotsAnswerWebhookJSONQueryReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicBotsCollectBotReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicBotsCollectBotReq) Reset()         { *m = HandleLogicBotsCollectBotReq{} }
func (m *HandleLogicBotsCollectBotReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicBotsCollectBotReq) ProtoMessage()    {}
func (*HandleLogicBotsCollectBotReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{25}
}

func (m *HandleLogicBotsCollectBotReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicBotsCollectBotReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicBotsCollectBotReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicBotsCollectBotReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicBotsCollectBotReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicBotsGetBotListReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicBotsGetBotListReq) Reset()         { *m = HandleLogicBotsGetBotListReq{} }
func (m *HandleLogicBotsGetBotListReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicBotsGetBotListReq) ProtoMessage()    {}
func (*HandleLogicBotsGetBotListReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{26}
}

func (m *HandleLogicBotsGetBotListReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicBotsGetBotListReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicBotsGetBotListReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicBotsGetBotListReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicBotsGetBotListReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicBotsGetCollectedBotsReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicBotsGetCollectedBotsReq) Reset()         { *m = HandleLogicBotsGetCollectedBotsReq{} }
func (m *HandleLogicBotsGetCollectedBotsReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicBotsGetCollectedBotsReq) ProtoMessage()    {}
func (*HandleLogicBotsGetCollectedBotsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{27}
}

func (m *HandleLogicBotsGetCollectedBotsReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicBotsGetCollectedBotsReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicBotsGetCollectedBotsReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicBotsGetCollectedBotsReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicBotsGetCollectedBotsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicBotsGetUserBotListReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicBotsGetUserBotListReq) Reset()         { *m = HandleLogicBotsGetUserBotListReq{} }
func (m *HandleLogicBotsGetUserBotListReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicBotsGetUserBotListReq) ProtoMessage()    {}
func (*HandleLogicBotsGetUserBotListReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{28}
}

func (m *HandleLogicBotsGetUserBotListReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicBotsGetUserBotListReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicBotsGetUserBotListReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicBotsGetUserBotListReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicBotsGetUserBotListReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicBotsSendCustomRequestReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicBotsSendCustomRequestReq) Reset()         { *m = HandleLogicBotsSendCustomRequestReq{} }
func (m *HandleLogicBotsSendCustomRequestReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicBotsSendCustomRequestReq) ProtoMessage()    {}
func (*HandleLogicBotsSendCustomRequestReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{29}
}

func (m *HandleLogicBotsSendCustomRequestReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicBotsSendCustomRequestReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicBotsSendCustomRequestReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicBotsSendCustomRequestReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicBotsSendCustomRequestReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicSavedGifsReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicSavedGifsReq) Reset()         { *m = HandleLogicSavedGifsReq{} }
func (m *HandleLogicSavedGifsReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicSavedGifsReq) ProtoMessage()    {}
func (*HandleLogicSavedGifsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{30}
}

func (m *HandleLogicSavedGifsReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicSavedGifsReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicSavedGifsReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicSavedGifsReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicSavedGifsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicSaveGifReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicSaveGifReq) Reset()         { *m = HandleLogicSaveGifReq{} }
func (m *HandleLogicSaveGifReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicSaveGifReq) ProtoMessage()    {}
func (*HandleLogicSaveGifReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{31}
}

func (m *HandleLogicSaveGifReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicSaveGifReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicSaveGifReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicSaveGifReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicSaveGifReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicSearchGifsReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicSearchGifsReq) Reset()         { *m = HandleLogicSearchGifsReq{} }
func (m *HandleLogicSearchGifsReq) String() string { return proto.CompactTextString(m) }
func (*HandleLogicSearchGifsReq) ProtoMessage()    {}
func (*HandleLogicSearchGifsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{32}
}

func (m *HandleLogicSearchGifsReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicSearchGifsReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicSearchGifsReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicSearchGifsReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicSearchGifsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HandleLogicReq struct {
	ObjBin    []byte `protobuf:"bytes,1,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	CrcId     int64  `protobuf:"varint,2,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	MessageId int64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId     int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *HandleLogicReq) Reset()                    { *m = HandleLogicReq{} }
func (m *HandleLogicReq) String() string            { return proto.CompactTextString(m) }
func (*HandleLogicReq) ProtoMessage()               {}
func (*HandleLogicReq) Descriptor() ([]byte, []int) { return fileDescriptorStickergif, []int{33} }

func (m *HandleLogicReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *HandleLogicReq) GetCrcId() int64 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *HandleLogicReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *HandleLogicReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *HandleLogicReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// HandleLogicResult
type HandleLogicResult struct {
	Result    []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *HandleLogicResult) Reset()                    { *m = HandleLogicResult{} }
func (m *HandleLogicResult) String() string            { return proto.CompactTextString(m) }
func (*HandleLogicResult) ProtoMessage()               {}
func (*HandleLogicResult) Descriptor() ([]byte, []int) { return fileDescriptorStickergif, []int{34} }

func (m *HandleLogicResult) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *HandleLogicResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// ShopStickerSet
type ShopStickerSet struct {
	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Free       bool   `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
	Official   bool   `protobuf:"varint,4,opt,name=official,proto3" json:"official,omitempty"`
	Masks      bool   `protobuf:"varint,5,opt,name=masks,proto3" json:"masks,omitempty"`
	Title      string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	ShortName  string `protobuf:"bytes,7,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Count      int32  `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	Hash       int64  `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	Emoticon   string `protobuf:"bytes,10,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Documents  string `protobuf:"bytes,11,opt,name=documents,proto3" json:"documents,omitempty"`
}

func (m *ShopStickerSet) Reset()                    { *m = ShopStickerSet{} }
func (m *ShopStickerSet) String() string            { return proto.CompactTextString(m) }
func (*ShopStickerSet) ProtoMessage()               {}
func (*ShopStickerSet) Descriptor() ([]byte, []int) { return fileDescriptorStickergif, []int{35} }

func (m *ShopStickerSet) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ShopStickerSet) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ShopStickerSet) GetFree() bool {
	if m != nil {
		return m.Free
	}
	return false
}

func (m *ShopStickerSet) GetOfficial() bool {
	if m != nil {
		return m.Official
	}
	return false
}

func (m *ShopStickerSet) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *ShopStickerSet) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ShopStickerSet) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *ShopStickerSet) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ShopStickerSet) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *ShopStickerSet) GetEmoticon() string {
	if m != nil {
		return m.Emoticon
	}
	return ""
}

func (m *ShopStickerSet) GetDocuments() string {
	if m != nil {
		return m.Documents
	}
	return ""
}

// StickerPackDoc
type StickerPackDoc struct {
	Id                             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AttributesStickerSetId         int64  `protobuf:"varint,2,opt,name=attributes_sticker_set_id,json=attributesStickerSetId,proto3" json:"attributes_sticker_set_id,omitempty"`
	DocumentId                     int64  `protobuf:"varint,3,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	AccessHash                     int64  `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	MimeType                       string `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size_                          int32  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Thumb                          string `protobuf:"bytes,7,opt,name=thumb,proto3" json:"thumb,omitempty"`
	DcId                           int32  `protobuf:"varint,8,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Date                           int32  `protobuf:"varint,9,opt,name=date,proto3" json:"date,omitempty"`
	AttributesImageSizeW           int32  `protobuf:"varint,10,opt,name=attributes_image_size_w,json=attributesImageSizeW,proto3" json:"attributes_image_size_w,omitempty"`
	AttributesImageSizeH           int32  `protobuf:"varint,11,opt,name=attributes_image_size_h,json=attributesImageSizeH,proto3" json:"attributes_image_size_h,omitempty"`
	AttributesStickerAlt           string `protobuf:"bytes,12,opt,name=attributes_sticker_alt,json=attributesStickerAlt,proto3" json:"attributes_sticker_alt,omitempty"`
	AttributesStickerSetAccessHash int64  `protobuf:"varint,13,opt,name=attributes_sticker_set_access_hash,json=attributesStickerSetAccessHash,proto3" json:"attributes_sticker_set_access_hash,omitempty"`
	AttributesFileName             string `protobuf:"bytes,14,opt,name=attributes_file_name,json=attributesFileName,proto3" json:"attributes_file_name,omitempty"`
}

func (m *StickerPackDoc) Reset()                    { *m = StickerPackDoc{} }
func (m *StickerPackDoc) String() string            { return proto.CompactTextString(m) }
func (*StickerPackDoc) ProtoMessage()               {}
func (*StickerPackDoc) Descriptor() ([]byte, []int) { return fileDescriptorStickergif, []int{36} }

func (m *StickerPackDoc) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StickerPackDoc) GetAttributesStickerSetId() int64 {
	if m != nil {
		return m.AttributesStickerSetId
	}
	return 0
}

func (m *StickerPackDoc) GetDocumentId() int64 {
	if m != nil {
		return m.DocumentId
	}
	return 0
}

func (m *StickerPackDoc) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StickerPackDoc) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *StickerPackDoc) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *StickerPackDoc) GetThumb() string {
	if m != nil {
		return m.Thumb
	}
	return ""
}

func (m *StickerPackDoc) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

func (m *StickerPackDoc) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *StickerPackDoc) GetAttributesImageSizeW() int32 {
	if m != nil {
		return m.AttributesImageSizeW
	}
	return 0
}

func (m *StickerPackDoc) GetAttributesImageSizeH() int32 {
	if m != nil {
		return m.AttributesImageSizeH
	}
	return 0
}

func (m *StickerPackDoc) GetAttributesStickerAlt() string {
	if m != nil {
		return m.AttributesStickerAlt
	}
	return ""
}

func (m *StickerPackDoc) GetAttributesStickerSetAccessHash() int64 {
	if m != nil {
		return m.AttributesStickerSetAccessHash
	}
	return 0
}

func (m *StickerPackDoc) GetAttributesFileName() string {
	if m != nil {
		return m.AttributesFileName
	}
	return ""
}

// AuthorStickerSet
type AuthorStickerSet struct {
	UserId       int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickerSetId int64  `protobuf:"varint,2,opt,name=sticker_set_id,json=stickerSetId,proto3" json:"sticker_set_id,omitempty"`
	ShortName    string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Archived     bool   `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool   `protobuf:"varint,5,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool   `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Ordered      int64  `protobuf:"varint,7,opt,name=ordered,proto3" json:"ordered,omitempty"`
	CreateTime   int32  `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (m *AuthorStickerSet) Reset()                    { *m = AuthorStickerSet{} }
func (m *AuthorStickerSet) String() string            { return proto.CompactTextString(m) }
func (*AuthorStickerSet) ProtoMessage()               {}
func (*AuthorStickerSet) Descriptor() ([]byte, []int) { return fileDescriptorStickergif, []int{37} }

func (m *AuthorStickerSet) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AuthorStickerSet) GetStickerSetId() int64 {
	if m != nil {
		return m.StickerSetId
	}
	return 0
}

func (m *AuthorStickerSet) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *AuthorStickerSet) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *AuthorStickerSet) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *AuthorStickerSet) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *AuthorStickerSet) GetOrdered() int64 {
	if m != nil {
		return m.Ordered
	}
	return 0
}

func (m *AuthorStickerSet) GetCreateTime() int32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

// UserStickerSet
type UserStickerSet struct {
	UserId       int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StickerSetId int64 `protobuf:"varint,2,opt,name=sticker_set_id,json=stickerSetId,proto3" json:"sticker_set_id,omitempty"`
	Archived     bool  `protobuf:"varint,3,opt,name=archived,proto3" json:"archived,omitempty"`
	Installed    bool  `protobuf:"varint,4,opt,name=installed,proto3" json:"installed,omitempty"`
	Disabled     bool  `protobuf:"varint,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Ordered      int64 `protobuf:"varint,6,opt,name=ordered,proto3" json:"ordered,omitempty"`
}

func (m *UserStickerSet) Reset()                    { *m = UserStickerSet{} }
func (m *UserStickerSet) String() string            { return proto.CompactTextString(m) }
func (*UserStickerSet) ProtoMessage()               {}
func (*UserStickerSet) Descriptor() ([]byte, []int) { return fileDescriptorStickergif, []int{38} }

func (m *UserStickerSet) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserStickerSet) GetStickerSetId() int64 {
	if m != nil {
		return m.StickerSetId
	}
	return 0
}

func (m *UserStickerSet) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *UserStickerSet) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *UserStickerSet) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *UserStickerSet) GetOrdered() int64 {
	if m != nil {
		return m.Ordered
	}
	return 0
}

// StoreShopStickerSetReq
type StoreShopStickerSetReq struct {
	Set    *ShopStickerSet `protobuf:"bytes,1,opt,name=set" json:"set,omitempty"`
	UserId int32           `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *StoreShopStickerSetReq) Reset()         { *m = StoreShopStickerSetReq{} }
func (m *StoreShopStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetReq) ProtoMessage()    {}
func (*StoreShopStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{39}
}

func (m *StoreShopStickerSetReq) GetSet() *ShopStickerSet {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *StoreShopStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// StoreShopStickerSetResult
type StoreShopStickerSetResult struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Id        int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *StoreShopStickerSetResult) Reset()         { *m = StoreShopStickerSetResult{} }
func (m *StoreShopStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*StoreShopStickerSetResult) ProtoMessage()    {}
func (*StoreShopStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{40}
}

func (m *StoreShopStickerSetResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *StoreShopStickerSetResult) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// StoreStickerPackDocReq
type StoreStickerPackDocReq struct {
	Doc *StickerPackDoc `protobuf:"bytes,1,opt,name=doc" json:"doc,omitempty"`
}

func (m *StoreStickerPackDocReq) Reset()         { *m = StoreStickerPackDocReq{} }
func (m *StoreStickerPackDocReq) String() string { return proto.CompactTextString(m) }
func (*StoreStickerPackDocReq) ProtoMessage()    {}
func (*StoreStickerPackDocReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{41}
}

func (m *StoreStickerPackDocReq) GetDoc() *StickerPackDoc {
	if m != nil {
		return m.Doc
	}
	return nil
}

// StoreStickerPackDocResult
type StoreStickerPackDocResult struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Id        int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *StoreStickerPackDocResult) Reset()         { *m = StoreStickerPackDocResult{} }
func (m *StoreStickerPackDocResult) String() string { return proto.CompactTextString(m) }
func (*StoreStickerPackDocResult) ProtoMessage()    {}
func (*StoreStickerPackDocResult) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{42}
}

func (m *StoreStickerPackDocResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *StoreStickerPackDocResult) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// StoreAuthorStickerSetReq
type StoreAuthorStickerSetReq struct {
	Set *AuthorStickerSet `protobuf:"bytes,1,opt,name=set" json:"set,omitempty"`
}

func (m *StoreAuthorStickerSetReq) Reset()         { *m = StoreAuthorStickerSetReq{} }
func (m *StoreAuthorStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*StoreAuthorStickerSetReq) ProtoMessage()    {}
func (*StoreAuthorStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{43}
}

func (m *StoreAuthorStickerSetReq) GetSet() *AuthorStickerSet {
	if m != nil {
		return m.Set
	}
	return nil
}

// StoreAuthorStickerSetResult
type StoreAuthorStickerSetResult struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Id        int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *StoreAuthorStickerSetResult) Reset()         { *m = StoreAuthorStickerSetResult{} }
func (m *StoreAuthorStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*StoreAuthorStickerSetResult) ProtoMessage()    {}
func (*StoreAuthorStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{44}
}

func (m *StoreAuthorStickerSetResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *StoreAuthorStickerSetResult) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// StoreUserStickerSetReq
type StoreUserStickerSetReq struct {
	Set *UserStickerSet `protobuf:"bytes,1,opt,name=set" json:"set,omitempty"`
}

func (m *StoreUserStickerSetReq) Reset()         { *m = StoreUserStickerSetReq{} }
func (m *StoreUserStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*StoreUserStickerSetReq) ProtoMessage()    {}
func (*StoreUserStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{45}
}

func (m *StoreUserStickerSetReq) GetSet() *UserStickerSet {
	if m != nil {
		return m.Set
	}
	return nil
}

// StoreUserStickerSetResult
type StoreUserStickerSetResult struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Id        int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *StoreUserStickerSetResult) Reset()         { *m = StoreUserStickerSetResult{} }
func (m *StoreUserStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*StoreUserStickerSetResult) ProtoMessage()    {}
func (*StoreUserStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{46}
}

func (m *StoreUserStickerSetResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *StoreUserStickerSetResult) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// GetStickerPackDocsReq
type GetStickerPackDocsReq struct {
	SetId int64 `protobuf:"varint,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
}

func (m *GetStickerPackDocsReq) Reset()         { *m = GetStickerPackDocsReq{} }
func (m *GetStickerPackDocsReq) String() string { return proto.CompactTextString(m) }
func (*GetStickerPackDocsReq) ProtoMessage()    {}
func (*GetStickerPackDocsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{47}
}

func (m *GetStickerPackDocsReq) GetSetId() int64 {
	if m != nil {
		return m.SetId
	}
	return 0
}

// GetStickerPackDocsResult
type GetStickerPackDocsResult struct {
	ErrorCode int32             `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Docs      []*StickerPackDoc `protobuf:"bytes,2,rep,name=docs" json:"docs,omitempty"`
}

func (m *GetStickerPackDocsResult) Reset()         { *m = GetStickerPackDocsResult{} }
func (m *GetStickerPackDocsResult) String() string { return proto.CompactTextString(m) }
func (*GetStickerPackDocsResult) ProtoMessage()    {}
func (*GetStickerPackDocsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{48}
}

func (m *GetStickerPackDocsResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetStickerPackDocsResult) GetDocs() []*StickerPackDoc {
	if m != nil {
		return m.Docs
	}
	return nil
}

// GetShopStickerSetReq
type GetShopStickerSetReq struct {
	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortName string `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
}

func (m *GetShopStickerSetReq) Reset()                    { *m = GetShopStickerSetReq{} }
func (m *GetShopStickerSetReq) String() string            { return proto.CompactTextString(m) }
func (*GetShopStickerSetReq) ProtoMessage()               {}
func (*GetShopStickerSetReq) Descriptor() ([]byte, []int) { return fileDescriptorStickergif, []int{49} }

func (m *GetShopStickerSetReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetShopStickerSetReq) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

// GetShopStickerSetResult
type GetShopStickerSetResult struct {
	ErrorCode int32           `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Set       *ShopStickerSet `protobuf:"bytes,2,opt,name=set" json:"set,omitempty"`
}

func (m *GetShopStickerSetResult) Reset()         { *m = GetShopStickerSetResult{} }
func (m *GetShopStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*GetShopStickerSetResult) ProtoMessage()    {}
func (*GetShopStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{50}
}

func (m *GetShopStickerSetResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetShopStickerSetResult) GetSet() *ShopStickerSet {
	if m != nil {
		return m.Set
	}
	return nil
}

// GetAuthorAllStickerSetsReq
type GetAuthorAllStickerSetsReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetAuthorAllStickerSetsReq) Reset()         { *m = GetAuthorAllStickerSetsReq{} }
func (m *GetAuthorAllStickerSetsReq) String() string { return proto.CompactTextString(m) }
func (*GetAuthorAllStickerSetsReq) ProtoMessage()    {}
func (*GetAuthorAllStickerSetsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{51}
}

func (m *GetAuthorAllStickerSetsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// GetAuthorAllStickerSetsResult
type GetAuthorAllStickerSetsResult struct {
	ErrorCode int32               `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Sets      []*AuthorStickerSet `protobuf:"bytes,2,rep,name=Sets" json:"Sets,omitempty"`
}

func (m *GetAuthorAllStickerSetsResult) Reset()         { *m = GetAuthorAllStickerSetsResult{} }
func (m *GetAuthorAllStickerSetsResult) String() string { return proto.CompactTextString(m) }
func (*GetAuthorAllStickerSetsResult) ProtoMessage()    {}
func (*GetAuthorAllStickerSetsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{52}
}

func (m *GetAuthorAllStickerSetsResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAuthorAllStickerSetsResult) GetSets() []*AuthorStickerSet {
	if m != nil {
		return m.Sets
	}
	return nil
}

// DeleteShopStickerSetReq
type DeleteShopStickerSetReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SetId  int64 `protobuf:"varint,2,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
}

func (m *DeleteShopStickerSetReq) Reset()         { *m = DeleteShopStickerSetReq{} }
func (m *DeleteShopStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*DeleteShopStickerSetReq) ProtoMessage()    {}
func (*DeleteShopStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{53}
}

func (m *DeleteShopStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteShopStickerSetReq) GetSetId() int64 {
	if m != nil {
		return m.SetId
	}
	return 0
}

// DeleteShopStickerSetResult
type DeleteShopStickerSetResult struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *DeleteShopStickerSetResult) Reset()         { *m = DeleteShopStickerSetResult{} }
func (m *DeleteShopStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*DeleteShopStickerSetResult) ProtoMessage()    {}
func (*DeleteShopStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{54}
}

func (m *DeleteShopStickerSetResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// DeleteStickerPackDocReq
type DeleteStickerPackDocReq struct {
	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SetId int64 `protobuf:"varint,2,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
}

func (m *DeleteStickerPackDocReq) Reset()         { *m = DeleteStickerPackDocReq{} }
func (m *DeleteStickerPackDocReq) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerPackDocReq) ProtoMessage()    {}
func (*DeleteStickerPackDocReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{55}
}

func (m *DeleteStickerPackDocReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteStickerPackDocReq) GetSetId() int64 {
	if m != nil {
		return m.SetId
	}
	return 0
}

// DeleteStickerPackDocResult
type DeleteStickerPackDocResult struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *DeleteStickerPackDocResult) Reset()         { *m = DeleteStickerPackDocResult{} }
func (m *DeleteStickerPackDocResult) String() string { return proto.CompactTextString(m) }
func (*DeleteStickerPackDocResult) ProtoMessage()    {}
func (*DeleteStickerPackDocResult) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{56}
}

func (m *DeleteStickerPackDocResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// DeleteAuthorStickerSetReq
type DeleteAuthorStickerSetReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SetId  int64 `protobuf:"varint,2,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
}

func (m *DeleteAuthorStickerSetReq) Reset()         { *m = DeleteAuthorStickerSetReq{} }
func (m *DeleteAuthorStickerSetReq) String() string { return proto.CompactTextString(m) }
func (*DeleteAuthorStickerSetReq) ProtoMessage()    {}
func (*DeleteAuthorStickerSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{57}
}

func (m *DeleteAuthorStickerSetReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteAuthorStickerSetReq) GetSetId() int64 {
	if m != nil {
		return m.SetId
	}
	return 0
}

// DeleteAuthorStickerSetResult
type DeleteAuthorStickerSetResult struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *DeleteAuthorStickerSetResult) Reset()         { *m = DeleteAuthorStickerSetResult{} }
func (m *DeleteAuthorStickerSetResult) String() string { return proto.CompactTextString(m) }
func (*DeleteAuthorStickerSetResult) ProtoMessage()    {}
func (*DeleteAuthorStickerSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{58}
}

func (m *DeleteAuthorStickerSetResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// UpdateStickerPackDocReq
type UpdateShopStickerSetDocReq struct {
	Id     int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DocIds []int64 `protobuf:"varint,2,rep,packed,name=doc_ids,json=docIds" json:"doc_ids,omitempty"`
}

func (m *UpdateShopStickerSetDocReq) Reset()         { *m = UpdateShopStickerSetDocReq{} }
func (m *UpdateShopStickerSetDocReq) String() string { return proto.CompactTextString(m) }
func (*UpdateShopStickerSetDocReq) ProtoMessage()    {}
func (*UpdateShopStickerSetDocReq) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{59}
}

func (m *UpdateShopStickerSetDocReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateShopStickerSetDocReq) GetDocIds() []int64 {
	if m != nil {
		return m.DocIds
	}
	return nil
}

// UpdateShopStickerSetDocResult
type UpdateShopStickerSetDocResult struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *UpdateShopStickerSetDocResult) Reset()         { *m = UpdateShopStickerSetDocResult{} }
func (m *UpdateShopStickerSetDocResult) String() string { return proto.CompactTextString(m) }
func (*UpdateShopStickerSetDocResult) ProtoMessage()    {}
func (*UpdateShopStickerSetDocResult) Descriptor() ([]byte, []int) {
	return fileDescriptorStickergif, []int{60}
}

func (m *UpdateShopStickerSetDocResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// BotInlineCallReq
type BotInlineCallReq struct {
	UserId     int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotId      int32  `protobuf:"varint,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	KeyId      int64  `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	MessageId  int64  `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	MessageObj []byte `protobuf:"bytes,5,opt,name=message_obj,json=messageObj,proto3" json:"message_obj,omitempty"`
}

func (m *BotInlineCallReq) Reset()                    { *m = BotInlineCallReq{} }
func (m *BotInlineCallReq) String() string            { return proto.CompactTextString(m) }
func (*BotInlineCallReq) ProtoMessage()               {}
func (*BotInlineCallReq) Descriptor() ([]byte, []int) { return fileDescriptorStickergif, []int{61} }

func (m *BotInlineCallReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BotInlineCallReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *BotInlineCallReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *BotInlineCallReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *BotInlineCallReq) GetMessageObj() []byte {
	if m != nil {
		return m.MessageObj
	}
	return nil
}

// BotInlineCallResult
type BotInlineCallResult struct {
	ErrorCode int32       `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Meta      *InlineMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
}

func (m *BotInlineCallResult) Reset()                    { *m = BotInlineCallResult{} }
func (m *BotInlineCallResult) String() string            { return proto.CompactTextString(m) }
func (*BotInlineCallResult) ProtoMessage()               {}
func (*BotInlineCallResult) Descriptor() ([]byte, []int) { return fileDescriptorStickergif, []int{62} }

func (m *BotInlineCallResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *BotInlineCallResult) GetMeta() *InlineMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

// InlineMeta
type InlineMeta struct {
	MsgId    int32 `protobuf:"varint,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	FromId   int32 `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChatId   int32 `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ChatType int32 `protobuf:"varint,4,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`
	BotId    int32 `protobuf:"varint,5,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
}

func (m *InlineMeta) Reset()                    { *m = InlineMeta{} }
func (m *InlineMeta) String() string            { return proto.CompactTextString(m) }
func (*InlineMeta) ProtoMessage()               {}
func (*InlineMeta) Descriptor() ([]byte, []int) { return fileDescriptorStickergif, []int{63} }

func (m *InlineMeta) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *InlineMeta) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *InlineMeta) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *InlineMeta) GetChatType() int32 {
	if m != nil {
		return m.ChatType
	}
	return 0
}

func (m *InlineMeta) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func init() {
	proto.RegisterType((*HandleLogicClearRecentStickersReq)(nil), "imstickergifservice.HandleLogicClearRecentStickersReq")
	proto.RegisterType((*HandleLogicAddStickerToSetReq)(nil), "imstickergifservice.HandleLogicAddStickerToSetReq")
	proto.RegisterType((*HandleLogicChangeStickerPositionReq)(nil), "imstickergifservice.HandleLogicChangeStickerPositionReq")
	proto.RegisterType((*HandleLogicCreateStickerSetReq)(nil), "imstickergifservice.HandleLogicCreateStickerSetReq")
	proto.RegisterType((*HandleLogicFaveStickersReq)(nil), "imstickergifservice.HandleLogicFaveStickersReq")
	proto.RegisterType((*HandleLogicGetAllStickersReq)(nil), "imstickergifservice.HandleLogicGetAllStickersReq")
	proto.RegisterType((*HandleLogicGetArchivedStickersReq)(nil), "imstickergifservice.HandleLogicGetArchivedStickersReq")
	proto.RegisterType((*HandleLogicGetAttachedStickersReq)(nil), "imstickergifservice.HandleLogicGetAttachedStickersReq")
	proto.RegisterType((*HandleLogicGetFeaturedStickersReq)(nil), "imstickergifservice.HandleLogicGetFeaturedStickersReq")
	proto.RegisterType((*HandleLogicGetRecentStickersReq)(nil), "imstickergifservice.HandleLogicGetRecentStickersReq")
	proto.RegisterType((*HandleLogicGetStickerSetReq)(nil), "imstickergifservice.HandleLogicGetStickerSetReq")
	proto.RegisterType((*HandleLogicInstallStickerSetReq)(nil), "imstickergifservice.HandleLogicInstallStickerSetReq")
	proto.RegisterType((*HandleLogicReadFeaturedStickersReq)(nil), "imstickergifservice.HandleLogicReadFeaturedStickersReq")
	proto.RegisterType((*HandleLogicRemoveStickerFromSetReq)(nil), "imstickergifservice.HandleLogicRemoveStickerFromSetReq")
	proto.RegisterType((*HandleLogicReorderStickerSetsReq)(nil), "imstickergifservice.HandleLogicReorderStickerSetsReq")
	proto.RegisterType((*HandleLogicSaveRecentStickerReq)(nil), "imstickergifservice.HandleLogicSaveRecentStickerReq")
	proto.RegisterType((*HandleLogicUninstallStickerSetReq)(nil), "imstickergifservice.HandleLogicUninstallStickerSetReq")
	proto.RegisterType((*HandleLogicMaskStickersReq)(nil), "imstickergifservice.HandleLogicMaskStickersReq")
	proto.RegisterType((*HandleLogicRecentStickersReq)(nil), "imstickergifservice.HandleLogicRecentStickersReq")
	proto.RegisterType((*HandleLogicFavedStickersReq)(nil), "imstickergifservice.HandleLogicFavedStickersReq")
	proto.RegisterType((*HandleLogicStickerSetReq)(nil), "imstickergifservice.HandleLogicStickerSetReq")
	proto.RegisterType((*HandleLogicrReorderStickerSetsReq)(nil), "imstickergifservice.HandleLogicrReorderStickerSetsReq")
	proto.RegisterType((*HandleLogicSaveRecentStickerIosReq)(nil), "imstickergifservice.HandleLogicSaveRecentStickerIosReq")
	proto.RegisterType((*HandleLogicBotsAdjustCollectedBotsReq)(nil), "imstickergifservice.HandleLogicBotsAdjustCollectedBotsReq")
	proto.RegisterType((*HandleLogicBotsAnswerWebhookJSONQueryReq)(nil), "imstickergifservice.HandleLogicBotsAnswerWebhookJSONQueryReq")
	proto.RegisterType((*HandleLogicBotsCollectBotReq)(nil), "imstickergifservice.HandleLogicBotsCollectBotReq")
	proto.RegisterType((*HandleLogicBotsGetBotListReq)(nil), "imstickergifservice.HandleLogicBotsGetBotListReq")
	proto.RegisterType((*HandleLogicBotsGetCollectedBotsReq)(nil), "imstickergifservice.HandleLogicBotsGetCollectedBotsReq")
	proto.RegisterType((*HandleLogicBotsGetUserBotListReq)(nil), "imstickergifservice.HandleLogicBotsGetUserBotListReq")
	proto.RegisterType((*HandleLogicBotsSendCustomRequestReq)(nil), "imstickergifservice.HandleLogicBotsSendCustomRequestReq")
	proto.RegisterType((*HandleLogicSavedGifsReq)(nil), "imstickergifservice.HandleLogicSavedGifsReq")
	proto.RegisterType((*HandleLogicSaveGifReq)(nil), "imstickergifservice.HandleLogicSaveGifReq")
	proto.RegisterType((*HandleLogicSearchGifsReq)(nil), "imstickergifservice.HandleLogicSearchGifsReq")
	proto.RegisterType((*HandleLogicReq)(nil), "imstickergifservice.HandleLogicReq")
	proto.RegisterType((*HandleLogicResult)(nil), "imstickergifservice.HandleLogicResult")
	proto.RegisterType((*ShopStickerSet)(nil), "imstickergifservice.ShopStickerSet")
	proto.RegisterType((*StickerPackDoc)(nil), "imstickergifservice.StickerPackDoc")
	proto.RegisterType((*AuthorStickerSet)(nil), "imstickergifservice.AuthorStickerSet")
	proto.RegisterType((*UserStickerSet)(nil), "imstickergifservice.UserStickerSet")
	proto.RegisterType((*StoreShopStickerSetReq)(nil), "imstickergifservice.StoreShopStickerSetReq")
	proto.RegisterType((*StoreShopStickerSetResult)(nil), "imstickergifservice.StoreShopStickerSetResult")
	proto.RegisterType((*StoreStickerPackDocReq)(nil), "imstickergifservice.StoreStickerPackDocReq")
	proto.RegisterType((*StoreStickerPackDocResult)(nil), "imstickergifservice.StoreStickerPackDocResult")
	proto.RegisterType((*StoreAuthorStickerSetReq)(nil), "imstickergifservice.StoreAuthorStickerSetReq")
	proto.RegisterType((*StoreAuthorStickerSetResult)(nil), "imstickergifservice.StoreAuthorStickerSetResult")
	proto.RegisterType((*StoreUserStickerSetReq)(nil), "imstickergifservice.StoreUserStickerSetReq")
	proto.RegisterType((*StoreUserStickerSetResult)(nil), "imstickergifservice.StoreUserStickerSetResult")
	proto.RegisterType((*GetStickerPackDocsReq)(nil), "imstickergifservice.GetStickerPackDocsReq")
	proto.RegisterType((*GetStickerPackDocsResult)(nil), "imstickergifservice.GetStickerPackDocsResult")
	proto.RegisterType((*GetShopStickerSetReq)(nil), "imstickergifservice.GetShopStickerSetReq")
	proto.RegisterType((*GetShopStickerSetResult)(nil), "imstickergifservice.GetShopStickerSetResult")
	proto.RegisterType((*GetAuthorAllStickerSetsReq)(nil), "imstickergifservice.GetAuthorAllStickerSetsReq")
	proto.RegisterType((*GetAuthorAllStickerSetsResult)(nil), "imstickergifservice.GetAuthorAllStickerSetsResult")
	proto.RegisterType((*DeleteShopStickerSetReq)(nil), "imstickergifservice.DeleteShopStickerSetReq")
	proto.RegisterType((*DeleteShopStickerSetResult)(nil), "imstickergifservice.DeleteShopStickerSetResult")
	proto.RegisterType((*DeleteStickerPackDocReq)(nil), "imstickergifservice.DeleteStickerPackDocReq")
	proto.RegisterType((*DeleteStickerPackDocResult)(nil), "imstickergifservice.DeleteStickerPackDocResult")
	proto.RegisterType((*DeleteAuthorStickerSetReq)(nil), "imstickergifservice.DeleteAuthorStickerSetReq")
	proto.RegisterType((*DeleteAuthorStickerSetResult)(nil), "imstickergifservice.DeleteAuthorStickerSetResult")
	proto.RegisterType((*UpdateShopStickerSetDocReq)(nil), "imstickergifservice.UpdateShopStickerSetDocReq")
	proto.RegisterType((*UpdateShopStickerSetDocResult)(nil), "imstickergifservice.UpdateShopStickerSetDocResult")
	proto.RegisterType((*BotInlineCallReq)(nil), "imstickergifservice.BotInlineCallReq")
	proto.RegisterType((*BotInlineCallResult)(nil), "imstickergifservice.BotInlineCallResult")
	proto.RegisterType((*InlineMeta)(nil), "imstickergifservice.InlineMeta")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StickerService service

type StickerServiceClient interface {
}

type stickerServiceClient struct {
	cc *grpc.ClientConn
}

func NewStickerServiceClient(cc *grpc.ClientConn) StickerServiceClient {
	return &stickerServiceClient{cc}
}

// Server API for StickerService service

type StickerServiceServer interface {
}

func RegisterStickerServiceServer(s *grpc.Server, srv StickerServiceServer) {
	s.RegisterService(&_StickerService_serviceDesc, srv)
}

var _StickerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imstickergifservice.StickerService",
	HandlerType: (*StickerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "gitlab.chatserver.im/interfaceprobuf/imstickergifservice/stickergif.proto",
}

// Client API for StickerGifService service

type StickerGifServiceClient interface {
	// HandleLogic 处理调用sticker,gif及bots相关的协议逻辑
	HandleLogic(ctx context.Context, in *HandleLogicReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicAddStickerToSet
	HandleLogicAddStickerToSet(ctx context.Context, in *HandleLogicAddStickerToSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicChangeStickerPosition
	HandleLogicChangeStickerPosition(ctx context.Context, in *HandleLogicChangeStickerPositionReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicClearRecentStickers
	HandleLogicClearRecentStickers(ctx context.Context, in *HandleLogicClearRecentStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicCreateStickerSet
	HandleLogicCreateStickerSet(ctx context.Context, in *HandleLogicCreateStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicFaveStickers
	HandleLogicFaveStickers(ctx context.Context, in *HandleLogicFaveStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicGetAllStickers
	HandleLogicGetAllStickers(ctx context.Context, in *HandleLogicGetAllStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicGetArchivedStickers
	HandleLogicGetArchivedStickers(ctx context.Context, in *HandleLogicGetArchivedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicGetAttachedStickers
	HandleLogicGetAttachedStickers(ctx context.Context, in *HandleLogicGetAttachedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicGetFeaturedStickers
	HandleLogicGetFeaturedStickers(ctx context.Context, in *HandleLogicGetFeaturedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicGetRecentStickers
	HandleLogicGetRecentStickers(ctx context.Context, in *HandleLogicGetRecentStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicGetStickerSet
	HandleLogicGetStickerSet(ctx context.Context, in *HandleLogicGetStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicInstallStickerSet
	HandleLogicInstallStickerSet(ctx context.Context, in *HandleLogicInstallStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicReadFeaturedStickers
	HandleLogicReadFeaturedStickers(ctx context.Context, in *HandleLogicReadFeaturedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicRemoveStickerFromSet
	HandleLogicRemoveStickerFromSet(ctx context.Context, in *HandleLogicRemoveStickerFromSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicReorderStickerSets
	HandleLogicReorderStickerSets(ctx context.Context, in *HandleLogicReorderStickerSetsReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicSaveRecentSticker
	HandleLogicSaveRecentSticker(ctx context.Context, in *HandleLogicSaveRecentStickerReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicSaveRecentStickerIos(ctx context.Context, in *HandleLogicSaveRecentStickerIosReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicUninstallStickerSet
	HandleLogicUninstallStickerSet(ctx context.Context, in *HandleLogicUninstallStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicMaskStickers
	HandleLogicMaskStickers(ctx context.Context, in *HandleLogicMaskStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicRecentStickers
	HandleLogicRecentStickers(ctx context.Context, in *HandleLogicRecentStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicFavedStickers(ctx context.Context, in *HandleLogicFavedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicStickerSet(ctx context.Context, in *HandleLogicStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicrReorderStickerSets(ctx context.Context, in *HandleLogicrReorderStickerSetsReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicBotsAdjustCollectedBots(ctx context.Context, in *HandleLogicBotsAdjustCollectedBotsReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicBotsAnswerWebhookJSONQuery(ctx context.Context, in *HandleLogicBotsAnswerWebhookJSONQueryReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicBotsCollectBot(ctx context.Context, in *HandleLogicBotsCollectBotReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicBotsGetBotList(ctx context.Context, in *HandleLogicBotsGetBotListReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicBotsGetCollectedBots(ctx context.Context, in *HandleLogicBotsGetCollectedBotsReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicBotsGetUserBotList(ctx context.Context, in *HandleLogicBotsGetUserBotListReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicBotsSendCustomRequest(ctx context.Context, in *HandleLogicBotsSendCustomRequestReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicSavedGifs(ctx context.Context, in *HandleLogicSavedGifsReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicSaveGif(ctx context.Context, in *HandleLogicSaveGifReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicSearchGifs(ctx context.Context, in *HandleLogicSearchGifsReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// StoreShopStickerSet 存储shop_sticker_set
	StoreShopStickerSet(ctx context.Context, in *StoreShopStickerSetReq, opts ...grpc.CallOption) (*StoreShopStickerSetResult, error)
	// StoreStickerPackDoc 存储sticker_pack_document
	StoreStickerPackDoc(ctx context.Context, in *StoreStickerPackDocReq, opts ...grpc.CallOption) (*StoreStickerPackDocResult, error)
	// StoreAuthorStickerSet 储存author_sticker_set
	StoreAuthorStickerSet(ctx context.Context, in *StoreAuthorStickerSetReq, opts ...grpc.CallOption) (*StoreAuthorStickerSetResult, error)
	// StoreUserStickerSet 储存user_sticker_set
	StoreUserStickerSet(ctx context.Context, in *StoreUserStickerSetReq, opts ...grpc.CallOption) (*StoreUserStickerSetResult, error)
	// GetStickerPackDocs 获取sticker_pack_document集合
	GetStickerPackDocs(ctx context.Context, in *GetStickerPackDocsReq, opts ...grpc.CallOption) (*GetStickerPackDocsResult, error)
	// GetShopStickerSet 获取shop_sticker_set
	GetShopStickerSet(ctx context.Context, in *GetShopStickerSetReq, opts ...grpc.CallOption) (*GetShopStickerSetResult, error)
	// GetAuthorAllStickerSets 获取author_sticker_set集合
	GetAuthorAllStickerSets(ctx context.Context, in *GetAuthorAllStickerSetsReq, opts ...grpc.CallOption) (*GetAuthorAllStickerSetsResult, error)
	// DelShopStickerSet 删除shop_sticker_set
	DeleteShopStickerSet(ctx context.Context, in *DeleteShopStickerSetReq, opts ...grpc.CallOption) (*DeleteShopStickerSetResult, error)
	// DeleteStickerPackDoc 删除sticker_pack_document
	DeleteStickerPackDoc(ctx context.Context, in *DeleteStickerPackDocReq, opts ...grpc.CallOption) (*DeleteStickerPackDocResult, error)
	// DeleteAuthorStickerSet 删除author_sticker_set
	DeleteAuthorStickerSet(ctx context.Context, in *DeleteAuthorStickerSetReq, opts ...grpc.CallOption) (*DeleteAuthorStickerSetResult, error)
	// UpdateShopStickerSetDoc 更新shop_sticker_set doc
	UpdateShopStickerSetDoc(ctx context.Context, in *UpdateShopStickerSetDocReq, opts ...grpc.CallOption) (*UpdateShopStickerSetDocResult, error)
	// BotInlineCall 机器人内联调用
	BotInlineCall(ctx context.Context, in *BotInlineCallReq, opts ...grpc.CallOption) (*BotInlineCallResult, error)
}

type stickerGifServiceClient struct {
	cc *grpc.ClientConn
}

func NewStickerGifServiceClient(cc *grpc.ClientConn) StickerGifServiceClient {
	return &stickerGifServiceClient{cc}
}

func (c *stickerGifServiceClient) HandleLogic(ctx context.Context, in *HandleLogicReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicAddStickerToSet(ctx context.Context, in *HandleLogicAddStickerToSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicAddStickerToSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicChangeStickerPosition(ctx context.Context, in *HandleLogicChangeStickerPositionReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicChangeStickerPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicClearRecentStickers(ctx context.Context, in *HandleLogicClearRecentStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicClearRecentStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicCreateStickerSet(ctx context.Context, in *HandleLogicCreateStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicCreateStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicFaveStickers(ctx context.Context, in *HandleLogicFaveStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicFaveStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicGetAllStickers(ctx context.Context, in *HandleLogicGetAllStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicGetAllStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicGetArchivedStickers(ctx context.Context, in *HandleLogicGetArchivedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicGetArchivedStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicGetAttachedStickers(ctx context.Context, in *HandleLogicGetAttachedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicGetAttachedStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicGetFeaturedStickers(ctx context.Context, in *HandleLogicGetFeaturedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicGetFeaturedStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicGetRecentStickers(ctx context.Context, in *HandleLogicGetRecentStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicGetRecentStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicGetStickerSet(ctx context.Context, in *HandleLogicGetStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicGetStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicInstallStickerSet(ctx context.Context, in *HandleLogicInstallStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicInstallStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicReadFeaturedStickers(ctx context.Context, in *HandleLogicReadFeaturedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicReadFeaturedStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicRemoveStickerFromSet(ctx context.Context, in *HandleLogicRemoveStickerFromSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicRemoveStickerFromSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicReorderStickerSets(ctx context.Context, in *HandleLogicReorderStickerSetsReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicReorderStickerSets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicSaveRecentSticker(ctx context.Context, in *HandleLogicSaveRecentStickerReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicSaveRecentSticker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicSaveRecentStickerIos(ctx context.Context, in *HandleLogicSaveRecentStickerIosReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicSaveRecentStickerIos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicUninstallStickerSet(ctx context.Context, in *HandleLogicUninstallStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicUninstallStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicMaskStickers(ctx context.Context, in *HandleLogicMaskStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicMaskStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicRecentStickers(ctx context.Context, in *HandleLogicRecentStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicRecentStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicFavedStickers(ctx context.Context, in *HandleLogicFavedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicFavedStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicStickerSet(ctx context.Context, in *HandleLogicStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicrReorderStickerSets(ctx context.Context, in *HandleLogicrReorderStickerSetsReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicrReorderStickerSets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicBotsAdjustCollectedBots(ctx context.Context, in *HandleLogicBotsAdjustCollectedBotsReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicBotsAdjustCollectedBots", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicBotsAnswerWebhookJSONQuery(ctx context.Context, in *HandleLogicBotsAnswerWebhookJSONQueryReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicBotsAnswerWebhookJSONQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicBotsCollectBot(ctx context.Context, in *HandleLogicBotsCollectBotReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicBotsCollectBot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicBotsGetBotList(ctx context.Context, in *HandleLogicBotsGetBotListReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicBotsGetBotList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicBotsGetCollectedBots(ctx context.Context, in *HandleLogicBotsGetCollectedBotsReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicBotsGetCollectedBots", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicBotsGetUserBotList(ctx context.Context, in *HandleLogicBotsGetUserBotListReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicBotsGetUserBotList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicBotsSendCustomRequest(ctx context.Context, in *HandleLogicBotsSendCustomRequestReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicBotsSendCustomRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicSavedGifs(ctx context.Context, in *HandleLogicSavedGifsReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicSavedGifs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicSaveGif(ctx context.Context, in *HandleLogicSaveGifReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicSaveGif", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicSearchGifs(ctx context.Context, in *HandleLogicSearchGifsReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicSearchGifs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) StoreShopStickerSet(ctx context.Context, in *StoreShopStickerSetReq, opts ...grpc.CallOption) (*StoreShopStickerSetResult, error) {
	out := new(StoreShopStickerSetResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/StoreShopStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) StoreStickerPackDoc(ctx context.Context, in *StoreStickerPackDocReq, opts ...grpc.CallOption) (*StoreStickerPackDocResult, error) {
	out := new(StoreStickerPackDocResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/StoreStickerPackDoc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) StoreAuthorStickerSet(ctx context.Context, in *StoreAuthorStickerSetReq, opts ...grpc.CallOption) (*StoreAuthorStickerSetResult, error) {
	out := new(StoreAuthorStickerSetResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/StoreAuthorStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) StoreUserStickerSet(ctx context.Context, in *StoreUserStickerSetReq, opts ...grpc.CallOption) (*StoreUserStickerSetResult, error) {
	out := new(StoreUserStickerSetResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/StoreUserStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) GetStickerPackDocs(ctx context.Context, in *GetStickerPackDocsReq, opts ...grpc.CallOption) (*GetStickerPackDocsResult, error) {
	out := new(GetStickerPackDocsResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/GetStickerPackDocs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) GetShopStickerSet(ctx context.Context, in *GetShopStickerSetReq, opts ...grpc.CallOption) (*GetShopStickerSetResult, error) {
	out := new(GetShopStickerSetResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/GetShopStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) GetAuthorAllStickerSets(ctx context.Context, in *GetAuthorAllStickerSetsReq, opts ...grpc.CallOption) (*GetAuthorAllStickerSetsResult, error) {
	out := new(GetAuthorAllStickerSetsResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/GetAuthorAllStickerSets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) DeleteShopStickerSet(ctx context.Context, in *DeleteShopStickerSetReq, opts ...grpc.CallOption) (*DeleteShopStickerSetResult, error) {
	out := new(DeleteShopStickerSetResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/DeleteShopStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) DeleteStickerPackDoc(ctx context.Context, in *DeleteStickerPackDocReq, opts ...grpc.CallOption) (*DeleteStickerPackDocResult, error) {
	out := new(DeleteStickerPackDocResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/DeleteStickerPackDoc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) DeleteAuthorStickerSet(ctx context.Context, in *DeleteAuthorStickerSetReq, opts ...grpc.CallOption) (*DeleteAuthorStickerSetResult, error) {
	out := new(DeleteAuthorStickerSetResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/DeleteAuthorStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) UpdateShopStickerSetDoc(ctx context.Context, in *UpdateShopStickerSetDocReq, opts ...grpc.CallOption) (*UpdateShopStickerSetDocResult, error) {
	out := new(UpdateShopStickerSetDocResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/UpdateShopStickerSetDoc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) BotInlineCall(ctx context.Context, in *BotInlineCallReq, opts ...grpc.CallOption) (*BotInlineCallResult, error) {
	out := new(BotInlineCallResult)
	err := grpc.Invoke(ctx, "/imstickergifservice.StickerGifService/BotInlineCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StickerGifService service

type StickerGifServiceServer interface {
	// HandleLogic 处理调用sticker,gif及bots相关的协议逻辑
	HandleLogic(context.Context, *HandleLogicReq) (*HandleLogicResult, error)
	// HandleLogicAddStickerToSet
	HandleLogicAddStickerToSet(context.Context, *HandleLogicAddStickerToSetReq) (*HandleLogicResult, error)
	// HandleLogicChangeStickerPosition
	HandleLogicChangeStickerPosition(context.Context, *HandleLogicChangeStickerPositionReq) (*HandleLogicResult, error)
	// HandleLogicClearRecentStickers
	HandleLogicClearRecentStickers(context.Context, *HandleLogicClearRecentStickersReq) (*HandleLogicResult, error)
	// HandleLogicCreateStickerSet
	HandleLogicCreateStickerSet(context.Context, *HandleLogicCreateStickerSetReq) (*HandleLogicResult, error)
	// HandleLogicFaveStickers
	HandleLogicFaveStickers(context.Context, *HandleLogicFaveStickersReq) (*HandleLogicResult, error)
	// HandleLogicGetAllStickers
	HandleLogicGetAllStickers(context.Context, *HandleLogicGetAllStickersReq) (*HandleLogicResult, error)
	// HandleLogicGetArchivedStickers
	HandleLogicGetArchivedStickers(context.Context, *HandleLogicGetArchivedStickersReq) (*HandleLogicResult, error)
	// HandleLogicGetAttachedStickers
	HandleLogicGetAttachedStickers(context.Context, *HandleLogicGetAttachedStickersReq) (*HandleLogicResult, error)
	// HandleLogicGetFeaturedStickers
	HandleLogicGetFeaturedStickers(context.Context, *HandleLogicGetFeaturedStickersReq) (*HandleLogicResult, error)
	// HandleLogicGetRecentStickers
	HandleLogicGetRecentStickers(context.Context, *HandleLogicGetRecentStickersReq) (*HandleLogicResult, error)
	// HandleLogicGetStickerSet
	HandleLogicGetStickerSet(context.Context, *HandleLogicGetStickerSetReq) (*HandleLogicResult, error)
	// HandleLogicInstallStickerSet
	HandleLogicInstallStickerSet(context.Context, *HandleLogicInstallStickerSetReq) (*HandleLogicResult, error)
	// HandleLogicReadFeaturedStickers
	HandleLogicReadFeaturedStickers(context.Context, *HandleLogicReadFeaturedStickersReq) (*HandleLogicResult, error)
	// HandleLogicRemoveStickerFromSet
	HandleLogicRemoveStickerFromSet(context.Context, *HandleLogicRemoveStickerFromSetReq) (*HandleLogicResult, error)
	// HandleLogicReorderStickerSets
	HandleLogicReorderStickerSets(context.Context, *HandleLogicReorderStickerSetsReq) (*HandleLogicResult, error)
	// HandleLogicSaveRecentSticker
	HandleLogicSaveRecentSticker(context.Context, *HandleLogicSaveRecentStickerReq) (*HandleLogicResult, error)
	HandleLogicSaveRecentStickerIos(context.Context, *HandleLogicSaveRecentStickerIosReq) (*HandleLogicResult, error)
	// HandleLogicUninstallStickerSet
	HandleLogicUninstallStickerSet(context.Context, *HandleLogicUninstallStickerSetReq) (*HandleLogicResult, error)
	// HandleLogicMaskStickers
	HandleLogicMaskStickers(context.Context, *HandleLogicMaskStickersReq) (*HandleLogicResult, error)
	// HandleLogicRecentStickers
	HandleLogicRecentStickers(context.Context, *HandleLogicRecentStickersReq) (*HandleLogicResult, error)
	HandleLogicFavedStickers(context.Context, *HandleLogicFavedStickersReq) (*HandleLogicResult, error)
	HandleLogicStickerSet(context.Context, *HandleLogicStickerSetReq) (*HandleLogicResult, error)
	HandleLogicrReorderStickerSets(context.Context, *HandleLogicrReorderStickerSetsReq) (*HandleLogicResult, error)
	HandleLogicBotsAdjustCollectedBots(context.Context, *HandleLogicBotsAdjustCollectedBotsReq) (*HandleLogicResult, error)
	HandleLogicBotsAnswerWebhookJSONQuery(context.Context, *HandleLogicBotsAnswerWebhookJSONQueryReq) (*HandleLogicResult, error)
	HandleLogicBotsCollectBot(context.Context, *HandleLogicBotsCollectBotReq) (*HandleLogicResult, error)
	HandleLogicBotsGetBotList(context.Context, *HandleLogicBotsGetBotListReq) (*HandleLogicResult, error)
	HandleLogicBotsGetCollectedBots(context.Context, *HandleLogicBotsGetCollectedBotsReq) (*HandleLogicResult, error)
	HandleLogicBotsGetUserBotList(context.Context, *HandleLogicBotsGetUserBotListReq) (*HandleLogicResult, error)
	HandleLogicBotsSendCustomRequest(context.Context, *HandleLogicBotsSendCustomRequestReq) (*HandleLogicResult, error)
	HandleLogicSavedGifs(context.Context, *HandleLogicSavedGifsReq) (*HandleLogicResult, error)
	HandleLogicSaveGif(context.Context, *HandleLogicSaveGifReq) (*HandleLogicResult, error)
	HandleLogicSearchGifs(context.Context, *HandleLogicSearchGifsReq) (*HandleLogicResult, error)
	// StoreShopStickerSet 存储shop_sticker_set
	StoreShopStickerSet(context.Context, *StoreShopStickerSetReq) (*StoreShopStickerSetResult, error)
	// StoreStickerPackDoc 存储sticker_pack_document
	StoreStickerPackDoc(context.Context, *StoreStickerPackDocReq) (*StoreStickerPackDocResult, error)
	// StoreAuthorStickerSet 储存author_sticker_set
	StoreAuthorStickerSet(context.Context, *StoreAuthorStickerSetReq) (*StoreAuthorStickerSetResult, error)
	// StoreUserStickerSet 储存user_sticker_set
	StoreUserStickerSet(context.Context, *StoreUserStickerSetReq) (*StoreUserStickerSetResult, error)
	// GetStickerPackDocs 获取sticker_pack_document集合
	GetStickerPackDocs(context.Context, *GetStickerPackDocsReq) (*GetStickerPackDocsResult, error)
	// GetShopStickerSet 获取shop_sticker_set
	GetShopStickerSet(context.Context, *GetShopStickerSetReq) (*GetShopStickerSetResult, error)
	// GetAuthorAllStickerSets 获取author_sticker_set集合
	GetAuthorAllStickerSets(context.Context, *GetAuthorAllStickerSetsReq) (*GetAuthorAllStickerSetsResult, error)
	// DelShopStickerSet 删除shop_sticker_set
	DeleteShopStickerSet(context.Context, *DeleteShopStickerSetReq) (*DeleteShopStickerSetResult, error)
	// DeleteStickerPackDoc 删除sticker_pack_document
	DeleteStickerPackDoc(context.Context, *DeleteStickerPackDocReq) (*DeleteStickerPackDocResult, error)
	// DeleteAuthorStickerSet 删除author_sticker_set
	DeleteAuthorStickerSet(context.Context, *DeleteAuthorStickerSetReq) (*DeleteAuthorStickerSetResult, error)
	// UpdateShopStickerSetDoc 更新shop_sticker_set doc
	UpdateShopStickerSetDoc(context.Context, *UpdateShopStickerSetDocReq) (*UpdateShopStickerSetDocResult, error)
	// BotInlineCall 机器人内联调用
	BotInlineCall(context.Context, *BotInlineCallReq) (*BotInlineCallResult, error)
}

func RegisterStickerGifServiceServer(s *grpc.Server, srv StickerGifServiceServer) {
	s.RegisterService(&_StickerGifService_serviceDesc, srv)
}

func _StickerGifService_HandleLogic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogic(ctx, req.(*HandleLogicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicAddStickerToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicAddStickerToSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicAddStickerToSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicAddStickerToSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicAddStickerToSet(ctx, req.(*HandleLogicAddStickerToSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicChangeStickerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChangeStickerPositionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicChangeStickerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicChangeStickerPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicChangeStickerPosition(ctx, req.(*HandleLogicChangeStickerPositionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicClearRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicClearRecentStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicClearRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicClearRecentStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicClearRecentStickers(ctx, req.(*HandleLogicClearRecentStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicCreateStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicCreateStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicCreateStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicCreateStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicCreateStickerSet(ctx, req.(*HandleLogicCreateStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicFaveStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicFaveStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicFaveStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicFaveStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicFaveStickers(ctx, req.(*HandleLogicFaveStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicGetAllStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicGetAllStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicGetAllStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicGetAllStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicGetAllStickers(ctx, req.(*HandleLogicGetAllStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicGetArchivedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicGetArchivedStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicGetArchivedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicGetArchivedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicGetArchivedStickers(ctx, req.(*HandleLogicGetArchivedStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicGetAttachedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicGetAttachedStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicGetAttachedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicGetAttachedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicGetAttachedStickers(ctx, req.(*HandleLogicGetAttachedStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicGetFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicGetFeaturedStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicGetFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicGetFeaturedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicGetFeaturedStickers(ctx, req.(*HandleLogicGetFeaturedStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicGetRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicGetRecentStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicGetRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicGetRecentStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicGetRecentStickers(ctx, req.(*HandleLogicGetRecentStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicGetStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicGetStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicGetStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicGetStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicGetStickerSet(ctx, req.(*HandleLogicGetStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicInstallStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicInstallStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicInstallStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicInstallStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicInstallStickerSet(ctx, req.(*HandleLogicInstallStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicReadFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicReadFeaturedStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicReadFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicReadFeaturedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicReadFeaturedStickers(ctx, req.(*HandleLogicReadFeaturedStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicRemoveStickerFromSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicRemoveStickerFromSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicRemoveStickerFromSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicRemoveStickerFromSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicRemoveStickerFromSet(ctx, req.(*HandleLogicRemoveStickerFromSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicReorderStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicReorderStickerSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicReorderStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicReorderStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicReorderStickerSets(ctx, req.(*HandleLogicReorderStickerSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicSaveRecentSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicSaveRecentStickerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicSaveRecentSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicSaveRecentSticker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicSaveRecentSticker(ctx, req.(*HandleLogicSaveRecentStickerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicSaveRecentStickerIos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicSaveRecentStickerIosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicSaveRecentStickerIos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicSaveRecentStickerIos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicSaveRecentStickerIos(ctx, req.(*HandleLogicSaveRecentStickerIosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicUninstallStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicUninstallStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicUninstallStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicUninstallStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicUninstallStickerSet(ctx, req.(*HandleLogicUninstallStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicMaskStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicMaskStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicMaskStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicMaskStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicMaskStickers(ctx, req.(*HandleLogicMaskStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicRecentStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicRecentStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicRecentStickers(ctx, req.(*HandleLogicRecentStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicFavedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicFavedStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicFavedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicFavedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicFavedStickers(ctx, req.(*HandleLogicFavedStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicStickerSet(ctx, req.(*HandleLogicStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicrReorderStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicrReorderStickerSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicrReorderStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicrReorderStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicrReorderStickerSets(ctx, req.(*HandleLogicrReorderStickerSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicBotsAdjustCollectedBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicBotsAdjustCollectedBotsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicBotsAdjustCollectedBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicBotsAdjustCollectedBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicBotsAdjustCollectedBots(ctx, req.(*HandleLogicBotsAdjustCollectedBotsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicBotsAnswerWebhookJSONQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicBotsAnswerWebhookJSONQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicBotsAnswerWebhookJSONQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicBotsAnswerWebhookJSONQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicBotsAnswerWebhookJSONQuery(ctx, req.(*HandleLogicBotsAnswerWebhookJSONQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicBotsCollectBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicBotsCollectBotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicBotsCollectBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicBotsCollectBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicBotsCollectBot(ctx, req.(*HandleLogicBotsCollectBotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicBotsGetBotList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicBotsGetBotListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicBotsGetBotList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicBotsGetBotList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicBotsGetBotList(ctx, req.(*HandleLogicBotsGetBotListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicBotsGetCollectedBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicBotsGetCollectedBotsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicBotsGetCollectedBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicBotsGetCollectedBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicBotsGetCollectedBots(ctx, req.(*HandleLogicBotsGetCollectedBotsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicBotsGetUserBotList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicBotsGetUserBotListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicBotsGetUserBotList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicBotsGetUserBotList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicBotsGetUserBotList(ctx, req.(*HandleLogicBotsGetUserBotListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicBotsSendCustomRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicBotsSendCustomRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicBotsSendCustomRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicBotsSendCustomRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicBotsSendCustomRequest(ctx, req.(*HandleLogicBotsSendCustomRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicSavedGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicSavedGifsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicSavedGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicSavedGifs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicSavedGifs(ctx, req.(*HandleLogicSavedGifsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicSaveGif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicSaveGifReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicSaveGif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicSaveGif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicSaveGif(ctx, req.(*HandleLogicSaveGifReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicSearchGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicSearchGifsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicSearchGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicSearchGifs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicSearchGifs(ctx, req.(*HandleLogicSearchGifsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_StoreShopStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreShopStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).StoreShopStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/StoreShopStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).StoreShopStickerSet(ctx, req.(*StoreShopStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_StoreStickerPackDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStickerPackDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).StoreStickerPackDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/StoreStickerPackDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).StoreStickerPackDoc(ctx, req.(*StoreStickerPackDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_StoreAuthorStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreAuthorStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).StoreAuthorStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/StoreAuthorStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).StoreAuthorStickerSet(ctx, req.(*StoreAuthorStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_StoreUserStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreUserStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).StoreUserStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/StoreUserStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).StoreUserStickerSet(ctx, req.(*StoreUserStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_GetStickerPackDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStickerPackDocsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).GetStickerPackDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/GetStickerPackDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).GetStickerPackDocs(ctx, req.(*GetStickerPackDocsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_GetShopStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).GetShopStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/GetShopStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).GetShopStickerSet(ctx, req.(*GetShopStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_GetAuthorAllStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorAllStickerSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).GetAuthorAllStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/GetAuthorAllStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).GetAuthorAllStickerSets(ctx, req.(*GetAuthorAllStickerSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_DeleteShopStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShopStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).DeleteShopStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/DeleteShopStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).DeleteShopStickerSet(ctx, req.(*DeleteShopStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_DeleteStickerPackDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStickerPackDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).DeleteStickerPackDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/DeleteStickerPackDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).DeleteStickerPackDoc(ctx, req.(*DeleteStickerPackDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_DeleteAuthorStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthorStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).DeleteAuthorStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/DeleteAuthorStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).DeleteAuthorStickerSet(ctx, req.(*DeleteAuthorStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_UpdateShopStickerSetDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShopStickerSetDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).UpdateShopStickerSetDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/UpdateShopStickerSetDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).UpdateShopStickerSetDoc(ctx, req.(*UpdateShopStickerSetDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_BotInlineCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotInlineCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).BotInlineCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/BotInlineCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).BotInlineCall(ctx, req.(*BotInlineCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StickerGifService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imstickergifservice.StickerGifService",
	HandlerType: (*StickerGifServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleLogic",
			Handler:    _StickerGifService_HandleLogic_Handler,
		},
		{
			MethodName: "HandleLogicAddStickerToSet",
			Handler:    _StickerGifService_HandleLogicAddStickerToSet_Handler,
		},
		{
			MethodName: "HandleLogicChangeStickerPosition",
			Handler:    _StickerGifService_HandleLogicChangeStickerPosition_Handler,
		},
		{
			MethodName: "HandleLogicClearRecentStickers",
			Handler:    _StickerGifService_HandleLogicClearRecentStickers_Handler,
		},
		{
			MethodName: "HandleLogicCreateStickerSet",
			Handler:    _StickerGifService_HandleLogicCreateStickerSet_Handler,
		},
		{
			MethodName: "HandleLogicFaveStickers",
			Handler:    _StickerGifService_HandleLogicFaveStickers_Handler,
		},
		{
			MethodName: "HandleLogicGetAllStickers",
			Handler:    _StickerGifService_HandleLogicGetAllStickers_Handler,
		},
		{
			MethodName: "HandleLogicGetArchivedStickers",
			Handler:    _StickerGifService_HandleLogicGetArchivedStickers_Handler,
		},
		{
			MethodName: "HandleLogicGetAttachedStickers",
			Handler:    _StickerGifService_HandleLogicGetAttachedStickers_Handler,
		},
		{
			MethodName: "HandleLogicGetFeaturedStickers",
			Handler:    _StickerGifService_HandleLogicGetFeaturedStickers_Handler,
		},
		{
			MethodName: "HandleLogicGetRecentStickers",
			Handler:    _StickerGifService_HandleLogicGetRecentStickers_Handler,
		},
		{
			MethodName: "HandleLogicGetStickerSet",
			Handler:    _StickerGifService_HandleLogicGetStickerSet_Handler,
		},
		{
			MethodName: "HandleLogicInstallStickerSet",
			Handler:    _StickerGifService_HandleLogicInstallStickerSet_Handler,
		},
		{
			MethodName: "HandleLogicReadFeaturedStickers",
			Handler:    _StickerGifService_HandleLogicReadFeaturedStickers_Handler,
		},
		{
			MethodName: "HandleLogicRemoveStickerFromSet",
			Handler:    _StickerGifService_HandleLogicRemoveStickerFromSet_Handler,
		},
		{
			MethodName: "HandleLogicReorderStickerSets",
			Handler:    _StickerGifService_HandleLogicReorderStickerSets_Handler,
		},
		{
			MethodName: "HandleLogicSaveRecentSticker",
			Handler:    _StickerGifService_HandleLogicSaveRecentSticker_Handler,
		},
		{
			MethodName: "HandleLogicSaveRecentStickerIos",
			Handler:    _StickerGifService_HandleLogicSaveRecentStickerIos_Handler,
		},
		{
			MethodName: "HandleLogicUninstallStickerSet",
			Handler:    _StickerGifService_HandleLogicUninstallStickerSet_Handler,
		},
		{
			MethodName: "HandleLogicMaskStickers",
			Handler:    _StickerGifService_HandleLogicMaskStickers_Handler,
		},
		{
			MethodName: "HandleLogicRecentStickers",
			Handler:    _StickerGifService_HandleLogicRecentStickers_Handler,
		},
		{
			MethodName: "HandleLogicFavedStickers",
			Handler:    _StickerGifService_HandleLogicFavedStickers_Handler,
		},
		{
			MethodName: "HandleLogicStickerSet",
			Handler:    _StickerGifService_HandleLogicStickerSet_Handler,
		},
		{
			MethodName: "HandleLogicrReorderStickerSets",
			Handler:    _StickerGifService_HandleLogicrReorderStickerSets_Handler,
		},
		{
			MethodName: "HandleLogicBotsAdjustCollectedBots",
			Handler:    _StickerGifService_HandleLogicBotsAdjustCollectedBots_Handler,
		},
		{
			MethodName: "HandleLogicBotsAnswerWebhookJSONQuery",
			Handler:    _StickerGifService_HandleLogicBotsAnswerWebhookJSONQuery_Handler,
		},
		{
			MethodName: "HandleLogicBotsCollectBot",
			Handler:    _StickerGifService_HandleLogicBotsCollectBot_Handler,
		},
		{
			MethodName: "HandleLogicBotsGetBotList",
			Handler:    _StickerGifService_HandleLogicBotsGetBotList_Handler,
		},
		{
			MethodName: "HandleLogicBotsGetCollectedBots",
			Handler:    _StickerGifService_HandleLogicBotsGetCollectedBots_Handler,
		},
		{
			MethodName: "HandleLogicBotsGetUserBotList",
			Handler:    _StickerGifService_HandleLogicBotsGetUserBotList_Handler,
		},
		{
			MethodName: "HandleLogicBotsSendCustomRequest",
			Handler:    _StickerGifService_HandleLogicBotsSendCustomRequest_Handler,
		},
		{
			MethodName: "HandleLogicSavedGifs",
			Handler:    _StickerGifService_HandleLogicSavedGifs_Handler,
		},
		{
			MethodName: "HandleLogicSaveGif",
			Handler:    _StickerGifService_HandleLogicSaveGif_Handler,
		},
		{
			MethodName: "HandleLogicSearchGifs",
			Handler:    _StickerGifService_HandleLogicSearchGifs_Handler,
		},
		{
			MethodName: "StoreShopStickerSet",
			Handler:    _StickerGifService_StoreShopStickerSet_Handler,
		},
		{
			MethodName: "StoreStickerPackDoc",
			Handler:    _StickerGifService_StoreStickerPackDoc_Handler,
		},
		{
			MethodName: "StoreAuthorStickerSet",
			Handler:    _StickerGifService_StoreAuthorStickerSet_Handler,
		},
		{
			MethodName: "StoreUserStickerSet",
			Handler:    _StickerGifService_StoreUserStickerSet_Handler,
		},
		{
			MethodName: "GetStickerPackDocs",
			Handler:    _StickerGifService_GetStickerPackDocs_Handler,
		},
		{
			MethodName: "GetShopStickerSet",
			Handler:    _StickerGifService_GetShopStickerSet_Handler,
		},
		{
			MethodName: "GetAuthorAllStickerSets",
			Handler:    _StickerGifService_GetAuthorAllStickerSets_Handler,
		},
		{
			MethodName: "DeleteShopStickerSet",
			Handler:    _StickerGifService_DeleteShopStickerSet_Handler,
		},
		{
			MethodName: "DeleteStickerPackDoc",
			Handler:    _StickerGifService_DeleteStickerPackDoc_Handler,
		},
		{
			MethodName: "DeleteAuthorStickerSet",
			Handler:    _StickerGifService_DeleteAuthorStickerSet_Handler,
		},
		{
			MethodName: "UpdateShopStickerSetDoc",
			Handler:    _StickerGifService_UpdateShopStickerSetDoc_Handler,
		},
		{
			MethodName: "BotInlineCall",
			Handler:    _StickerGifService_BotInlineCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/imstickergifservice/stickergif.proto",
}

func (m *HandleLogicClearRecentStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicClearRecentStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicAddStickerToSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicAddStickerToSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicChangeStickerPositionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicChangeStickerPositionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicCreateStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicCreateStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicFaveStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicFaveStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicGetAllStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicGetAllStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicGetArchivedStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicGetArchivedStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicGetAttachedStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicGetAttachedStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicGetFeaturedStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicGetFeaturedStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicGetRecentStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicGetRecentStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicGetStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicGetStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicInstallStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicInstallStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicReadFeaturedStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicReadFeaturedStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicRemoveStickerFromSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicRemoveStickerFromSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicReorderStickerSetsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicReorderStickerSetsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicSaveRecentStickerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicSaveRecentStickerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicUninstallStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicUninstallStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicMaskStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicMaskStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicRecentStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicRecentStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicFavedStickersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicFavedStickersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicrReorderStickerSetsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicrReorderStickerSetsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicSaveRecentStickerIosReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicSaveRecentStickerIosReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicBotsAdjustCollectedBotsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicBotsAdjustCollectedBotsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicBotsAnswerWebhookJSONQueryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicBotsAnswerWebhookJSONQueryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicBotsCollectBotReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicBotsCollectBotReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicBotsGetBotListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicBotsGetBotListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicBotsGetCollectedBotsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicBotsGetCollectedBotsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicBotsGetUserBotListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicBotsGetUserBotListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicBotsSendCustomRequestReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicBotsSendCustomRequestReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicSavedGifsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicSavedGifsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicSaveGifReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicSaveGifReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicSearchGifsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicSearchGifsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HandleLogicResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleLogicResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ShopStickerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopStickerSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Id))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.AccessHash))
	}
	if m.Free {
		dAtA[i] = 0x18
		i++
		if m.Free {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Official {
		dAtA[i] = 0x20
		i++
		if m.Official {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Masks {
		dAtA[i] = 0x28
		i++
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.Count != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Count))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Hash))
	}
	if len(m.Emoticon) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.Emoticon)))
		i += copy(dAtA[i:], m.Emoticon)
	}
	if len(m.Documents) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.Documents)))
		i += copy(dAtA[i:], m.Documents)
	}
	return i, nil
}

func (m *StickerPackDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerPackDoc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Id))
	}
	if m.AttributesStickerSetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.AttributesStickerSetId))
	}
	if m.DocumentId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.DocumentId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.MimeType) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.MimeType)))
		i += copy(dAtA[i:], m.MimeType)
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Size_))
	}
	if len(m.Thumb) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.Thumb)))
		i += copy(dAtA[i:], m.Thumb)
	}
	if m.DcId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.DcId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Date))
	}
	if m.AttributesImageSizeW != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.AttributesImageSizeW))
	}
	if m.AttributesImageSizeH != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.AttributesImageSizeH))
	}
	if len(m.AttributesStickerAlt) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.AttributesStickerAlt)))
		i += copy(dAtA[i:], m.AttributesStickerAlt)
	}
	if m.AttributesStickerSetAccessHash != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.AttributesStickerSetAccessHash))
	}
	if len(m.AttributesFileName) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.AttributesFileName)))
		i += copy(dAtA[i:], m.AttributesFileName)
	}
	return i, nil
}

func (m *AuthorStickerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorStickerSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	if m.StickerSetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.StickerSetId))
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if m.Archived {
		dAtA[i] = 0x20
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Installed {
		dAtA[i] = 0x28
		i++
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Disabled {
		dAtA[i] = 0x30
		i++
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ordered != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Ordered))
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.CreateTime))
	}
	return i, nil
}

func (m *UserStickerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStickerSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	if m.StickerSetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.StickerSetId))
	}
	if m.Archived {
		dAtA[i] = 0x18
		i++
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Installed {
		dAtA[i] = 0x20
		i++
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Disabled {
		dAtA[i] = 0x28
		i++
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ordered != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Ordered))
	}
	return i, nil
}

func (m *StoreShopStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Set != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Set.Size()))
		n1, err := m.Set.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *StoreShopStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShopStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *StoreStickerPackDocReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStickerPackDocReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Doc != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Doc.Size()))
		n2, err := m.Doc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *StoreStickerPackDocResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStickerPackDocResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *StoreAuthorStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreAuthorStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Set != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Set.Size()))
		n3, err := m.Set.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *StoreAuthorStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreAuthorStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *StoreUserStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreUserStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Set != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Set.Size()))
		n4, err := m.Set.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *StoreUserStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreUserStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetStickerPackDocsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerPackDocsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SetId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.SetId))
	}
	return i, nil
}

func (m *GetStickerPackDocsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStickerPackDocsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Docs) > 0 {
		for _, msg := range m.Docs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintStickergif(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetShopStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShopStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Id))
	}
	if len(m.ShortName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	return i, nil
}

func (m *GetShopStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShopStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Set != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Set.Size()))
		n5, err := m.Set.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *GetAuthorAllStickerSetsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorAllStickerSetsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetAuthorAllStickerSetsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorAllStickerSetsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Sets) > 0 {
		for _, msg := range m.Sets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintStickergif(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeleteShopStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteShopStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	if m.SetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.SetId))
	}
	return i, nil
}

func (m *DeleteShopStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteShopStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *DeleteStickerPackDocReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerPackDocReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Id))
	}
	if m.SetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.SetId))
	}
	return i, nil
}

func (m *DeleteStickerPackDocResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStickerPackDocResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *DeleteAuthorStickerSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAuthorStickerSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	if m.SetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.SetId))
	}
	return i, nil
}

func (m *DeleteAuthorStickerSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAuthorStickerSetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *UpdateShopStickerSetDocReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateShopStickerSetDocReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Id))
	}
	if len(m.DocIds) > 0 {
		dAtA7 := make([]byte, len(m.DocIds)*10)
		var j6 int
		for _, num1 := range m.DocIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	return i, nil
}

func (m *UpdateShopStickerSetDocResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateShopStickerSetDocResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *BotInlineCallReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotInlineCallReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.UserId))
	}
	if m.BotId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.BotId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.KeyId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MessageId))
	}
	if len(m.MessageObj) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(len(m.MessageObj)))
		i += copy(dAtA[i:], m.MessageObj)
	}
	return i, nil
}

func (m *BotInlineCallResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotInlineCallResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Meta != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.Meta.Size()))
		n8, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *InlineMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InlineMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.MsgId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.FromId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ChatId))
	}
	if m.ChatType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.ChatType))
	}
	if m.BotId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStickergif(dAtA, i, uint64(m.BotId))
	}
	return i, nil
}

func encodeVarintStickergif(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HandleLogicClearRecentStickersReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicAddStickerToSetReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicChangeStickerPositionReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicCreateStickerSetReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicFaveStickersReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicGetAllStickersReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicGetArchivedStickersReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicGetAttachedStickersReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicGetFeaturedStickersReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicGetRecentStickersReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicGetStickerSetReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicInstallStickerSetReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicReadFeaturedStickersReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicRemoveStickerFromSetReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicReorderStickerSetsReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicSaveRecentStickerReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicUninstallStickerSetReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicMaskStickersReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicRecentStickersReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicFavedStickersReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicStickerSetReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicrReorderStickerSetsReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicSaveRecentStickerIosReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicBotsAdjustCollectedBotsReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicBotsAnswerWebhookJSONQueryReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicBotsCollectBotReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicBotsGetBotListReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicBotsGetCollectedBotsReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicBotsGetUserBotListReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicBotsSendCustomRequestReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicSavedGifsReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicSaveGifReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicSearchGifsReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovStickergif(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *HandleLogicResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovStickergif(uint64(m.ErrorCode))
	}
	return n
}

func (m *ShopStickerSet) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStickergif(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovStickergif(uint64(m.AccessHash))
	}
	if m.Free {
		n += 2
	}
	if m.Official {
		n += 2
	}
	if m.Masks {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovStickergif(uint64(m.Count))
	}
	if m.Hash != 0 {
		n += 1 + sovStickergif(uint64(m.Hash))
	}
	l = len(m.Emoticon)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	l = len(m.Documents)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	return n
}

func (m *StickerPackDoc) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStickergif(uint64(m.Id))
	}
	if m.AttributesStickerSetId != 0 {
		n += 1 + sovStickergif(uint64(m.AttributesStickerSetId))
	}
	if m.DocumentId != 0 {
		n += 1 + sovStickergif(uint64(m.DocumentId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovStickergif(uint64(m.AccessHash))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovStickergif(uint64(m.Size_))
	}
	l = len(m.Thumb)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.DcId != 0 {
		n += 1 + sovStickergif(uint64(m.DcId))
	}
	if m.Date != 0 {
		n += 1 + sovStickergif(uint64(m.Date))
	}
	if m.AttributesImageSizeW != 0 {
		n += 1 + sovStickergif(uint64(m.AttributesImageSizeW))
	}
	if m.AttributesImageSizeH != 0 {
		n += 1 + sovStickergif(uint64(m.AttributesImageSizeH))
	}
	l = len(m.AttributesStickerAlt)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.AttributesStickerSetAccessHash != 0 {
		n += 1 + sovStickergif(uint64(m.AttributesStickerSetAccessHash))
	}
	l = len(m.AttributesFileName)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	return n
}

func (m *AuthorStickerSet) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	if m.StickerSetId != 0 {
		n += 1 + sovStickergif(uint64(m.StickerSetId))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.Archived {
		n += 2
	}
	if m.Installed {
		n += 2
	}
	if m.Disabled {
		n += 2
	}
	if m.Ordered != 0 {
		n += 1 + sovStickergif(uint64(m.Ordered))
	}
	if m.CreateTime != 0 {
		n += 1 + sovStickergif(uint64(m.CreateTime))
	}
	return n
}

func (m *UserStickerSet) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	if m.StickerSetId != 0 {
		n += 1 + sovStickergif(uint64(m.StickerSetId))
	}
	if m.Archived {
		n += 2
	}
	if m.Installed {
		n += 2
	}
	if m.Disabled {
		n += 2
	}
	if m.Ordered != 0 {
		n += 1 + sovStickergif(uint64(m.Ordered))
	}
	return n
}

func (m *StoreShopStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.Set != nil {
		l = m.Set.Size()
		n += 1 + l + sovStickergif(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *StoreShopStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovStickergif(uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		n += 1 + sovStickergif(uint64(m.Id))
	}
	return n
}

func (m *StoreStickerPackDocReq) Size() (n int) {
	var l int
	_ = l
	if m.Doc != nil {
		l = m.Doc.Size()
		n += 1 + l + sovStickergif(uint64(l))
	}
	return n
}

func (m *StoreStickerPackDocResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovStickergif(uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		n += 1 + sovStickergif(uint64(m.Id))
	}
	return n
}

func (m *StoreAuthorStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.Set != nil {
		l = m.Set.Size()
		n += 1 + l + sovStickergif(uint64(l))
	}
	return n
}

func (m *StoreAuthorStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovStickergif(uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		n += 1 + sovStickergif(uint64(m.Id))
	}
	return n
}

func (m *StoreUserStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.Set != nil {
		l = m.Set.Size()
		n += 1 + l + sovStickergif(uint64(l))
	}
	return n
}

func (m *StoreUserStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovStickergif(uint64(m.ErrorCode))
	}
	if m.Id != 0 {
		n += 1 + sovStickergif(uint64(m.Id))
	}
	return n
}

func (m *GetStickerPackDocsReq) Size() (n int) {
	var l int
	_ = l
	if m.SetId != 0 {
		n += 1 + sovStickergif(uint64(m.SetId))
	}
	return n
}

func (m *GetStickerPackDocsResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovStickergif(uint64(m.ErrorCode))
	}
	if len(m.Docs) > 0 {
		for _, e := range m.Docs {
			l = e.Size()
			n += 1 + l + sovStickergif(uint64(l))
		}
	}
	return n
}

func (m *GetShopStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStickergif(uint64(m.Id))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	return n
}

func (m *GetShopStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovStickergif(uint64(m.ErrorCode))
	}
	if m.Set != nil {
		l = m.Set.Size()
		n += 1 + l + sovStickergif(uint64(l))
	}
	return n
}

func (m *GetAuthorAllStickerSetsReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	return n
}

func (m *GetAuthorAllStickerSetsResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovStickergif(uint64(m.ErrorCode))
	}
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			l = e.Size()
			n += 1 + l + sovStickergif(uint64(l))
		}
	}
	return n
}

func (m *DeleteShopStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	if m.SetId != 0 {
		n += 1 + sovStickergif(uint64(m.SetId))
	}
	return n
}

func (m *DeleteShopStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovStickergif(uint64(m.ErrorCode))
	}
	return n
}

func (m *DeleteStickerPackDocReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStickergif(uint64(m.Id))
	}
	if m.SetId != 0 {
		n += 1 + sovStickergif(uint64(m.SetId))
	}
	return n
}

func (m *DeleteStickerPackDocResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovStickergif(uint64(m.ErrorCode))
	}
	return n
}

func (m *DeleteAuthorStickerSetReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	if m.SetId != 0 {
		n += 1 + sovStickergif(uint64(m.SetId))
	}
	return n
}

func (m *DeleteAuthorStickerSetResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovStickergif(uint64(m.ErrorCode))
	}
	return n
}

func (m *UpdateShopStickerSetDocReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStickergif(uint64(m.Id))
	}
	if len(m.DocIds) > 0 {
		l = 0
		for _, e := range m.DocIds {
			l += sovStickergif(uint64(e))
		}
		n += 1 + sovStickergif(uint64(l)) + l
	}
	return n
}

func (m *UpdateShopStickerSetDocResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovStickergif(uint64(m.ErrorCode))
	}
	return n
}

func (m *BotInlineCallReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovStickergif(uint64(m.UserId))
	}
	if m.BotId != 0 {
		n += 1 + sovStickergif(uint64(m.BotId))
	}
	if m.KeyId != 0 {
		n += 1 + sovStickergif(uint64(m.KeyId))
	}
	if m.MessageId != 0 {
		n += 1 + sovStickergif(uint64(m.MessageId))
	}
	l = len(m.MessageObj)
	if l > 0 {
		n += 1 + l + sovStickergif(uint64(l))
	}
	return n
}

func (m *BotInlineCallResult) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovStickergif(uint64(m.ErrorCode))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovStickergif(uint64(l))
	}
	return n
}

func (m *InlineMeta) Size() (n int) {
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovStickergif(uint64(m.MsgId))
	}
	if m.FromId != 0 {
		n += 1 + sovStickergif(uint64(m.FromId))
	}
	if m.ChatId != 0 {
		n += 1 + sovStickergif(uint64(m.ChatId))
	}
	if m.ChatType != 0 {
		n += 1 + sovStickergif(uint64(m.ChatType))
	}
	if m.BotId != 0 {
		n += 1 + sovStickergif(uint64(m.BotId))
	}
	return n
}

func sovStickergif(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStickergif(x uint64) (n int) {
	return sovStickergif(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HandleLogicClearRecentStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicClearRecentStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicClearRecentStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicAddStickerToSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicAddStickerToSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicAddStickerToSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicChangeStickerPositionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicChangeStickerPositionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicChangeStickerPositionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicCreateStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicCreateStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicCreateStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicFaveStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicFaveStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicFaveStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicGetAllStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicGetAllStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicGetAllStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicGetArchivedStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicGetArchivedStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicGetArchivedStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicGetAttachedStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicGetAttachedStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicGetAttachedStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicGetFeaturedStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicGetFeaturedStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicGetFeaturedStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicGetRecentStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicGetRecentStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicGetRecentStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicGetStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicGetStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicGetStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicInstallStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicInstallStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicInstallStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicReadFeaturedStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicReadFeaturedStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicReadFeaturedStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicRemoveStickerFromSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicRemoveStickerFromSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicRemoveStickerFromSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicReorderStickerSetsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicReorderStickerSetsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicReorderStickerSetsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicSaveRecentStickerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicSaveRecentStickerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicSaveRecentStickerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicUninstallStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicUninstallStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicUninstallStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicMaskStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicMaskStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicMaskStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicRecentStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicRecentStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicRecentStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicFavedStickersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicFavedStickersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicFavedStickersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicrReorderStickerSetsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicrReorderStickerSetsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicrReorderStickerSetsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicSaveRecentStickerIosReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicSaveRecentStickerIosReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicSaveRecentStickerIosReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicBotsAdjustCollectedBotsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicBotsAdjustCollectedBotsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicBotsAdjustCollectedBotsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicBotsAnswerWebhookJSONQueryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicBotsAnswerWebhookJSONQueryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicBotsAnswerWebhookJSONQueryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicBotsCollectBotReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicBotsCollectBotReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicBotsCollectBotReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicBotsGetBotListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicBotsGetBotListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicBotsGetBotListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicBotsGetCollectedBotsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicBotsGetCollectedBotsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicBotsGetCollectedBotsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicBotsGetUserBotListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicBotsGetUserBotListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicBotsGetUserBotListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicBotsSendCustomRequestReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicBotsSendCustomRequestReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicBotsSendCustomRequestReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicSavedGifsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicSavedGifsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicSavedGifsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicSaveGifReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicSaveGifReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicSaveGifReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicSearchGifsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicSearchGifsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicSearchGifsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleLogicResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleLogicResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleLogicResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopStickerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopStickerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopStickerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Free = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Official = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Documents = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerPackDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerPackDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerPackDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStickerSetId", wireType)
			}
			m.AttributesStickerSetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesStickerSetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentId", wireType)
			}
			m.DocumentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocumentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesImageSizeW", wireType)
			}
			m.AttributesImageSizeW = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesImageSizeW |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesImageSizeH", wireType)
			}
			m.AttributesImageSizeH = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesImageSizeH |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStickerAlt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributesStickerAlt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesStickerSetAccessHash", wireType)
			}
			m.AttributesStickerSetAccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesStickerSetAccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributesFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorStickerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorStickerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorStickerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerSetId", wireType)
			}
			m.StickerSetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickerSetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ordered", wireType)
			}
			m.Ordered = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ordered |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStickerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStickerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStickerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerSetId", wireType)
			}
			m.StickerSetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickerSetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ordered", wireType)
			}
			m.Ordered = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ordered |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Set == nil {
				m.Set = &ShopStickerSet{}
			}
			if err := m.Set.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShopStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShopStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShopStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStickerPackDocReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStickerPackDocReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStickerPackDocReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Doc == nil {
				m.Doc = &StickerPackDoc{}
			}
			if err := m.Doc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStickerPackDocResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStickerPackDocResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStickerPackDocResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreAuthorStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreAuthorStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreAuthorStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Set == nil {
				m.Set = &AuthorStickerSet{}
			}
			if err := m.Set.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreAuthorStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreAuthorStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreAuthorStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreUserStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreUserStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreUserStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Set == nil {
				m.Set = &UserStickerSet{}
			}
			if err := m.Set.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreUserStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreUserStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreUserStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerPackDocsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerPackDocsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerPackDocsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetId", wireType)
			}
			m.SetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStickerPackDocsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStickerPackDocsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStickerPackDocsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docs = append(m.Docs, &StickerPackDoc{})
			if err := m.Docs[len(m.Docs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShopStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShopStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShopStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShopStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShopStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShopStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Set == nil {
				m.Set = &ShopStickerSet{}
			}
			if err := m.Set.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorAllStickerSetsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorAllStickerSetsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorAllStickerSetsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sets = append(m.Sets, &AuthorStickerSet{})
			if err := m.Sets[len(m.Sets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteShopStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteShopStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteShopStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetId", wireType)
			}
			m.SetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteShopStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteShopStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteShopStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerPackDocReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerPackDocReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerPackDocReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetId", wireType)
			}
			m.SetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStickerPackDocResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStickerPackDocResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStickerPackDocResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAuthorStickerSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAuthorStickerSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAuthorStickerSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetId", wireType)
			}
			m.SetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAuthorStickerSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAuthorStickerSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAuthorStickerSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateShopStickerSetDocReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateShopStickerSetDocReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateShopStickerSetDocReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStickergif
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DocIds = append(m.DocIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStickergif
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStickergif
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStickergif
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DocIds = append(m.DocIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DocIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateShopStickerSetDocResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateShopStickerSetDocResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateShopStickerSetDocResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotInlineCallReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotInlineCallReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotInlineCallReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageObj", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageObj = append(m.MessageObj[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageObj == nil {
				m.MessageObj = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotInlineCallResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotInlineCallResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotInlineCallResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickergif
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &InlineMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InlineMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InlineMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InlineMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickergif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickergif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStickergif(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStickergif
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStickergif
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStickergif
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStickergif
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStickergif(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStickergif = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStickergif   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/imstickergifservice/stickergif.proto", fileDescriptorStickergif)
}

var fileDescriptorStickergif = []byte{
	// 2303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5b, 0x5b, 0x6f, 0x1c, 0x49,
	0x15, 0x4e, 0xcf, 0x2d, 0xf6, 0x49, 0xd6, 0x4a, 0x2a, 0x8e, 0x3d, 0x99, 0x24, 0x8e, 0xe9, 0x65,
	0x91, 0x81, 0xac, 0x9d, 0x38, 0x1b, 0xc2, 0x82, 0x16, 0x61, 0x7b, 0x37, 0xce, 0x84, 0xec, 0x06,
	0x7a, 0x12, 0xed, 0x0b, 0xd2, 0xa8, 0xa7, 0xbb, 0xc6, 0x53, 0xf6, 0xf4, 0x94, 0xd3, 0x5d, 0xe3,
	0xe0, 0x08, 0x10, 0x20, 0x84, 0x04, 0x2f, 0xf0, 0x84, 0x58, 0x71, 0x5b, 0x2e, 0x42, 0xe2, 0x89,
	0x9f, 0xc0, 0x2b, 0x8f, 0xfc, 0x04, 0x94, 0xff, 0x81, 0x84, 0xaa, 0xba, 0x67, 0xba, 0xbb, 0xba,
	0x7a, 0xba, 0x7b, 0xbc, 0x12, 0xfd, 0x36, 0x55, 0x5d, 0x55, 0xe7, 0xab, 0x53, 0xe7, 0x9c, 0xba,
	0x9c, 0x6f, 0xa0, 0x7d, 0x40, 0xd8, 0xd0, 0xec, 0x6d, 0x5a, 0x03, 0x93, 0x79, 0xd8, 0x3d, 0xc1,
	0xee, 0x26, 0x71, 0xb6, 0xc8, 0x88, 0x61, 0xb7, 0x6f, 0x5a, 0xf8, 0xd8, 0xa5, 0xbd, 0x71, 0x7f,
	0x8b, 0x38, 0x1e, 0x23, 0xd6, 0x11, 0x76, 0x0f, 0x48, 0x9f, 0xb7, 0x22, 0x16, 0xde, 0x0a, 0x6b,
	0x36, 0x8f, 0x5d, 0xca, 0x28, 0xba, 0xa2, 0x68, 0xa5, 0xff, 0x59, 0x83, 0xcf, 0x3d, 0x32, 0x47,
	0xf6, 0x10, 0x3f, 0xa1, 0x07, 0xc4, 0xda, 0x1b, 0x62, 0xd3, 0x35, 0xb0, 0x85, 0x47, 0xac, 0xe3,
	0xb7, 0xf5, 0x0c, 0xfc, 0x02, 0xad, 0xc2, 0x79, 0xda, 0x3b, 0xec, 0xf6, 0xc8, 0xa8, 0xa9, 0xad,
	0x6b, 0x1b, 0x17, 0x8d, 0x06, 0xed, 0x1d, 0xee, 0x92, 0x11, 0xba, 0x0a, 0x0d, 0xcb, 0xb5, 0xba,
	0xc4, 0x6e, 0x56, 0xd6, 0xb5, 0x8d, 0xaa, 0x51, 0xb7, 0x5c, 0xab, 0x6d, 0xa3, 0x9b, 0x00, 0x0e,
	0xf6, 0x3c, 0xf3, 0x00, 0xf3, 0x4f, 0x55, 0xf1, 0x69, 0x31, 0xa8, 0x69, 0xdb, 0xbc, 0xd7, 0x11,
	0x3e, 0xe5, 0x9f, 0x6a, 0x7e, 0xaf, 0x23, 0x7c, 0xda, 0xb6, 0xb9, 0x94, 0xb1, 0x87, 0x5d, 0x5e,
	0x5f, 0x5f, 0xd7, 0x36, 0xea, 0x46, 0x83, 0x17, 0xdb, 0xb6, 0xfe, 0x07, 0x0d, 0x6e, 0x46, 0x40,
	0xee, 0xd8, 0x76, 0x00, 0xee, 0x19, 0xed, 0x60, 0x56, 0x02, 0x80, 0x7f, 0xd5, 0xe0, 0xcd, 0xa8,
	0x16, 0x07, 0xe6, 0xe8, 0x00, 0x07, 0x18, 0xbf, 0x4d, 0x3d, 0xc2, 0x08, 0x1d, 0x95, 0x00, 0xe6,
	0x1f, 0x35, 0x58, 0x8b, 0xc2, 0x74, 0xb1, 0xc9, 0x26, 0x30, 0xcb, 0xa1, 0xc8, 0xdf, 0x6a, 0xd0,
	0x8a, 0x20, 0x7c, 0x68, 0x9e, 0xe0, 0x12, 0xd9, 0xe1, 0xef, 0x35, 0xb8, 0x11, 0x41, 0xb7, 0x8f,
	0xd9, 0xce, 0x70, 0x58, 0x22, 0x7c, 0x92, 0x33, 0x73, 0x7c, 0xae, 0x35, 0x20, 0x27, 0xd8, 0x2e,
	0x37, 0x48, 0xc6, 0x4c, 0x6b, 0x50, 0x72, 0x90, 0x0f, 0xb1, 0xc9, 0xc6, 0x6e, 0xa9, 0x40, 0x7e,
	0xaa, 0xc1, 0xad, 0x38, 0xc8, 0xd2, 0x45, 0xee, 0xdf, 0x69, 0x70, 0x3d, 0x0e, 0xb1, 0x54, 0xe1,
	0x46, 0xd2, 0x60, 0x7b, 0xe4, 0x31, 0x73, 0xea, 0xd1, 0xe5, 0x80, 0xf8, 0x17, 0x0d, 0xf4, 0x08,
	0x44, 0x03, 0x9b, 0x76, 0x09, 0x4d, 0x31, 0x81, 0xd2, 0xa1, 0xd3, 0xc8, 0xfd, 0xd0, 0xa5, 0x4e,
	0x39, 0x74, 0xf9, 0x27, 0x0d, 0xd6, 0x63, 0x28, 0xa9, 0x6b, 0x63, 0x37, 0x5c, 0xee, 0x12, 0x3a,
	0x75, 0xc7, 0x3c, 0xc1, 0x31, 0xaf, 0x2e, 0x5f, 0x70, 0x7c, 0x3e, 0x22, 0x25, 0xf4, 0x1b, 0xe9,
	0x24, 0xf1, 0xa1, 0xe9, 0x1d, 0x95, 0xf7, 0x24, 0x51, 0xf6, 0xb8, 0xcd, 0xcf, 0x61, 0x65, 0x0a,
	0x37, 0x9f, 0x68, 0xd0, 0x8c, 0x3a, 0x49, 0x99, 0x0c, 0x4f, 0xf2, 0x0e, 0xb7, 0x94, 0x51, 0x46,
	0x8a, 0xd7, 0x89, 0x28, 0xd3, 0xa6, 0x65, 0x40, 0xf9, 0x37, 0x0d, 0xde, 0x8a, 0xa0, 0xdc, 0xa5,
	0xcc, 0xdb, 0xb1, 0x0f, 0xc7, 0x1e, 0xdb, 0xa3, 0xc3, 0x21, 0xb6, 0x18, 0xb6, 0x79, 0x55, 0x09,
	0x80, 0xfe, 0x5d, 0x83, 0x0d, 0x19, 0xe8, 0xc8, 0x7b, 0x89, 0xdd, 0x8f, 0x71, 0x6f, 0x40, 0xe9,
	0xd1, 0xe3, 0xce, 0xd3, 0x8f, 0xbe, 0x33, 0xc6, 0xee, 0x69, 0xf9, 0x42, 0x0f, 0xc7, 0x1a, 0xa8,
	0x73, 0x97, 0xb2, 0x72, 0xe2, 0xdb, 0xc7, 0x1c, 0xdb, 0x13, 0xe2, 0x95, 0xf0, 0x40, 0x16, 0xe0,
	0x2b, 0x9b, 0x45, 0x4a, 0x47, 0x9d, 0x00, 0xe5, 0x73, 0x0f, 0xbb, 0xe5, 0xd1, 0xa4, 0xf4, 0x6a,
	0xc2, 0x31, 0x76, 0xf0, 0xc8, 0xde, 0x1b, 0x7b, 0x8c, 0x3a, 0x06, 0x7e, 0x31, 0xc6, 0xa5, 0x80,
	0xf9, 0x1b, 0x0d, 0x56, 0xa5, 0x58, 0x69, 0xef, 0x93, 0x7e, 0x19, 0x56, 0xf9, 0xd7, 0x1a, 0x5c,
	0x95, 0xa0, 0xed, 0x93, 0x7e, 0x09, 0x37, 0x68, 0x6c, 0xba, 0xd6, 0xa0, 0x24, 0x4a, 0xfb, 0xa5,
	0x06, 0x4b, 0xb1, 0xb3, 0xd7, 0xff, 0x1d, 0xd1, 0x63, 0xb8, 0x1c, 0x03, 0xe4, 0x8d, 0x87, 0x0c,
	0xad, 0x40, 0xc3, 0x15, 0xbf, 0x26, 0x90, 0xfc, 0x12, 0x97, 0x8d, 0x5d, 0x97, 0xba, 0x5d, 0x8b,
	0xda, 0x58, 0xc0, 0xaa, 0x1b, 0x8b, 0xa2, 0x66, 0x8f, 0xda, 0x58, 0xff, 0xb4, 0x02, 0x4b, 0x9d,
	0x01, 0x3d, 0x0e, 0xcf, 0x1b, 0x68, 0x09, 0x2a, 0xc4, 0x16, 0xa3, 0x54, 0x8d, 0x0a, 0xb1, 0xd1,
	0x2d, 0xb8, 0x60, 0x5a, 0x16, 0xf6, 0xbc, 0xee, 0xc0, 0xf4, 0x06, 0xc1, 0xcc, 0xc0, 0xaf, 0x7a,
	0x64, 0x7a, 0x03, 0x84, 0xa0, 0xd6, 0x77, 0x31, 0x16, 0x13, 0x5b, 0x30, 0xc4, 0x6f, 0xd4, 0x82,
	0x05, 0xda, 0xef, 0x13, 0x8b, 0x98, 0x43, 0x31, 0xab, 0x05, 0x63, 0x5a, 0x46, 0xcb, 0x50, 0x77,
	0x4c, 0xef, 0xc8, 0x13, 0xd3, 0x5a, 0x30, 0xfc, 0x02, 0xaf, 0x65, 0x84, 0x0d, 0x71, 0xb3, 0xb1,
	0xae, 0x6d, 0x2c, 0x1a, 0x7e, 0x81, 0xc3, 0xf7, 0x06, 0xd4, 0x65, 0xdd, 0x91, 0xe9, 0xe0, 0xe6,
	0x79, 0xf1, 0x69, 0x51, 0xd4, 0x7c, 0x64, 0x3a, 0x98, 0x77, 0xb2, 0xe8, 0x78, 0xc4, 0x9a, 0x0b,
	0x62, 0x62, 0x7e, 0x81, 0x03, 0x12, 0x50, 0x17, 0x05, 0x54, 0xf1, 0x9b, 0x03, 0xc2, 0x0e, 0x65,
	0xc4, 0xa2, 0xa3, 0x26, 0x88, 0x61, 0xa6, 0x65, 0x74, 0x03, 0x16, 0x6d, 0x6a, 0x8d, 0x1d, 0x3c,
	0x62, 0x5e, 0xf3, 0x82, 0x2f, 0x63, 0x5a, 0xa1, 0xff, 0xa3, 0x06, 0x4b, 0x93, 0xc7, 0x59, 0xd3,
	0x3a, 0x7a, 0x9f, 0x5a, 0x09, 0x15, 0xbd, 0x0b, 0xd7, 0x4c, 0xc6, 0x5c, 0xd2, 0x1b, 0x33, 0xec,
	0x75, 0x83, 0x67, 0xf3, 0xae, 0x87, 0x59, 0x68, 0x0a, 0x2b, 0x61, 0x83, 0x50, 0xd7, 0x6d, 0xa1,
	0xdd, 0x89, 0xa8, 0xd0, 0x38, 0x60, 0x52, 0xd5, 0x4e, 0xa8, 0xbf, 0x96, 0x50, 0xff, 0x75, 0x58,
	0x74, 0x88, 0x83, 0xbb, 0xec, 0xf4, 0x18, 0x0b, 0x95, 0x2e, 0x1a, 0x0b, 0xbc, 0xe2, 0xd9, 0xe9,
	0x31, 0xe6, 0xaa, 0xf0, 0xc8, 0x2b, 0x5f, 0xa9, 0x75, 0x43, 0xfc, 0x16, 0x9a, 0x1e, 0x8c, 0x9d,
	0x5e, 0xa0, 0x4e, 0xbf, 0x80, 0xae, 0x40, 0xdd, 0x16, 0xa6, 0xeb, 0xab, 0xb2, 0x66, 0x73, 0xcb,
	0x45, 0x50, 0xb3, 0x4d, 0x86, 0x85, 0x26, 0x79, 0x9d, 0xc9, 0x30, 0xba, 0x0f, 0xab, 0x91, 0xc9,
	0x12, 0x87, 0x9b, 0x35, 0x1f, 0xb7, 0xfb, 0x52, 0x28, 0xb6, 0x6e, 0x2c, 0x87, 0x9f, 0xdb, 0xfc,
	0x6b, 0x87, 0xbc, 0xc2, 0x1f, 0xa7, 0x77, 0x1b, 0x08, 0x95, 0xab, 0xbb, 0x3d, 0x42, 0xef, 0xc0,
	0x8a, 0x42, 0xb5, 0xe6, 0x90, 0x35, 0x2f, 0x0a, 0xf4, 0xcb, 0x09, 0xbd, 0xee, 0x0c, 0x19, 0x7a,
	0x0c, 0x7a, 0xca, 0x82, 0x44, 0x75, 0xf9, 0x86, 0xd0, 0xe5, 0x9a, 0x6a, 0x65, 0x76, 0x42, 0xfd,
	0xde, 0x81, 0x88, 0x8c, 0x6e, 0x9f, 0x0c, 0xb1, 0x6f, 0x8c, 0x4b, 0x42, 0x3e, 0x0a, 0xbf, 0x3d,
	0x24, 0x43, 0xcc, 0xad, 0x52, 0xff, 0x71, 0x05, 0x2e, 0xed, 0x8c, 0xd9, 0x80, 0x46, 0x8e, 0xf1,
	0x51, 0x77, 0xd6, 0xa2, 0xee, 0x8c, 0x3e, 0x0f, 0x4b, 0x4a, 0x8b, 0xb9, 0xe8, 0x45, 0xed, 0x24,
	0xee, 0x08, 0x55, 0xd9, 0x11, 0x5a, 0xb0, 0x60, 0x06, 0x8f, 0xb7, 0x13, 0x7f, 0x9b, 0x94, 0xb9,
	0x79, 0x07, 0x57, 0x6e, 0x6c, 0x07, 0x3e, 0x17, 0x56, 0xf0, 0x9e, 0x36, 0xf1, 0xcc, 0x1e, 0xff,
	0xd8, 0xf0, 0x7b, 0x4e, 0xca, 0xa8, 0x09, 0xe7, 0xc5, 0x6d, 0x04, 0xdb, 0xc2, 0x56, 0xaa, 0xc6,
	0xa4, 0xc8, 0xad, 0xd2, 0x12, 0xf9, 0x80, 0x2e, 0x23, 0x0e, 0x0e, 0x6c, 0x06, 0xfc, 0xaa, 0x67,
	0xc4, 0xc1, 0xfa, 0x3f, 0x35, 0x58, 0xe2, 0xe7, 0x87, 0xcf, 0x4e, 0x03, 0xd1, 0x29, 0x56, 0x67,
	0x4d, 0xb1, 0x36, 0x6b, 0x8a, 0xf5, 0xf4, 0x29, 0x36, 0x62, 0x53, 0xd4, 0x07, 0xb0, 0xd2, 0x61,
	0xd4, 0xc5, 0xf1, 0xf0, 0xc8, 0xe3, 0xff, 0x7d, 0xa8, 0x7a, 0xd8, 0x0f, 0xb4, 0x17, 0xb6, 0xdf,
	0xdc, 0x54, 0x24, 0xca, 0x36, 0xa5, 0x4e, 0xbc, 0x7d, 0x74, 0xfe, 0x15, 0x29, 0xa0, 0x5f, 0x53,
	0x4a, 0x52, 0x04, 0x70, 0x4d, 0x0a, 0xe0, 0x41, 0x28, 0xaa, 0x4c, 0x42, 0x91, 0xfe, 0x74, 0x82,
	0x3a, 0x16, 0xb1, 0x02, 0xd4, 0x36, 0xb5, 0x66, 0xa3, 0x8e, 0x77, 0xe2, 0xed, 0x43, 0x70, 0xd2,
	0x80, 0xf3, 0x80, 0xeb, 0x40, 0x53, 0x8c, 0x25, 0x3b, 0x07, 0x87, 0xf7, 0x20, 0xaa, 0xd4, 0xb7,
	0x94, 0xf0, 0x12, 0xdd, 0x78, 0x0f, 0xfd, 0x09, 0x5c, 0x4f, 0x19, 0xf4, 0x2c, 0xfa, 0x8b, 0xdb,
	0x6e, 0xce, 0x55, 0x97, 0x3a, 0x09, 0x78, 0x13, 0xfd, 0xc9, 0x03, 0xce, 0x03, 0x6e, 0x13, 0xae,
	0x86, 0x6f, 0xe2, 0xc1, 0x4a, 0x88, 0x33, 0xd2, 0x55, 0x68, 0x04, 0x9e, 0xe3, 0x6f, 0x4a, 0x75,
	0x8f, 0xbb, 0x8c, 0xee, 0x42, 0x53, 0xd5, 0x3e, 0x8f, 0xe8, 0x07, 0x50, 0xb3, 0xa9, 0xe5, 0x35,
	0x2b, 0xeb, 0xd5, 0xbc, 0xe6, 0x22, 0x3a, 0xe8, 0x1f, 0xc0, 0x32, 0x97, 0x99, 0x70, 0x1a, 0x79,
	0xcf, 0x8c, 0x07, 0xb4, 0x8a, 0x14, 0xd0, 0x74, 0x0a, 0xab, 0x8a, 0x61, 0xf2, 0x20, 0x0f, 0xd6,
	0xa9, 0x52, 0xcc, 0x3b, 0xf5, 0xfb, 0xd0, 0xda, 0xc7, 0xcc, 0x37, 0xa2, 0x9d, 0xe8, 0xeb, 0xe4,
	0xe4, 0x10, 0xaa, 0x8c, 0x5d, 0xfa, 0x29, 0xdc, 0x4c, 0xed, 0x96, 0x07, 0xed, 0xbb, 0x50, 0xe3,
	0x8d, 0x03, 0x3d, 0xe7, 0xb4, 0x7b, 0xd1, 0x45, 0x6f, 0xc3, 0xea, 0xfb, 0x78, 0x88, 0x99, 0x22,
	0x42, 0xa5, 0x86, 0xda, 0xd0, 0x50, 0x2a, 0x51, 0x43, 0xf9, 0x3a, 0xb4, 0xd4, 0x43, 0xe5, 0x98,
	0x82, 0xfe, 0xcd, 0x29, 0x8e, 0x44, 0xcc, 0x91, 0x17, 0x3d, 0x53, 0x7c, 0xf1, 0x20, 0xa3, 0x7f,
	0x0b, 0xae, 0xf9, 0x9d, 0x55, 0x51, 0xa5, 0xa8, 0x22, 0xde, 0x83, 0x1b, 0x69, 0x83, 0xe5, 0xc1,
	0xf2, 0x01, 0xb4, 0x9e, 0x1f, 0xf3, 0x53, 0x52, 0x5c, 0x8f, 0x29, 0xda, 0x58, 0x85, 0xf3, 0x36,
	0xe5, 0x67, 0x2e, 0x7f, 0xf9, 0xab, 0x46, 0xc3, 0xa6, 0x56, 0xdb, 0xf6, 0xf4, 0x6f, 0xc0, 0xcd,
	0xd4, 0x61, 0xf2, 0xc0, 0xf8, 0x44, 0x83, 0x4b, 0xbb, 0x94, 0xb5, 0x47, 0x43, 0x32, 0xc2, 0x7b,
	0xe6, 0x70, 0x98, 0xa5, 0x8a, 0x1e, 0x65, 0xe1, 0xb6, 0x54, 0xef, 0x51, 0x16, 0xbb, 0x96, 0x54,
	0xa3, 0xd7, 0x92, 0xf8, 0x65, 0xa6, 0x26, 0x5f, 0x66, 0x6e, 0xc1, 0x85, 0xc9, 0x67, 0xda, 0x3b,
	0x14, 0xdb, 0xed, 0x45, 0x63, 0xd2, 0xe3, 0x69, 0xef, 0x50, 0x27, 0x70, 0x45, 0x82, 0x96, 0xc7,
	0x4d, 0xee, 0x41, 0xcd, 0xc1, 0xcc, 0x0c, 0xbc, 0xfa, 0x96, 0xd2, 0x4d, 0xfc, 0x31, 0x3f, 0xc4,
	0xcc, 0x34, 0x44, 0x63, 0xfd, 0xe7, 0x1a, 0x40, 0x58, 0xc9, 0x27, 0xe4, 0x78, 0x07, 0xe1, 0xfc,
	0xeb, 0x8e, 0x77, 0xe0, 0xdf, 0xb3, 0xfa, 0x2e, 0x75, 0x22, 0xdb, 0x32, 0x2f, 0xfa, 0x1f, 0xac,
	0x81, 0x39, 0x3d, 0x96, 0xd7, 0x8d, 0x06, 0x2f, 0xb6, 0x6d, 0x7e, 0xe2, 0x16, 0x1f, 0xc4, 0x89,
	0xbb, 0x26, 0x3e, 0x2d, 0xf0, 0x0a, 0x71, 0xe2, 0x0e, 0xb5, 0x59, 0x8f, 0x68, 0x73, 0xfb, 0xd2,
	0xf4, 0x12, 0xd1, 0xf1, 0xe1, 0x6e, 0xff, 0xf7, 0x36, 0x5c, 0x0e, 0xaa, 0xf6, 0x49, 0x3f, 0xa8,
	0x45, 0xdf, 0x85, 0x0b, 0x91, 0xcb, 0x1d, 0x52, 0xc7, 0xaf, 0xf8, 0x7d, 0xb4, 0xf5, 0x85, 0xec,
	0x46, 0x5c, 0xc7, 0xfa, 0x39, 0xf4, 0x2a, 0x96, 0xe5, 0x90, 0x98, 0x31, 0x68, 0x3b, 0x6b, 0x9c,
	0x24, 0x95, 0xa6, 0x80, 0xec, 0x9f, 0xc5, 0xdf, 0x98, 0x94, 0xac, 0x17, 0xf4, 0xd5, 0xac, 0xe1,
	0xd2, 0xc8, 0x32, 0x05, 0x80, 0xfc, 0x44, 0xe2, 0xb5, 0x24, 0x49, 0x4c, 0xe8, 0x2b, 0x99, 0x30,
	0x94, 0xcc, 0xa7, 0x02, 0x20, 0xbe, 0x1f, 0xcb, 0x98, 0xc8, 0xdc, 0x1a, 0x74, 0x2f, 0x13, 0x40,
	0x92, 0x8d, 0x53, 0x40, 0x3a, 0x8b, 0xbd, 0x51, 0x45, 0x79, 0x33, 0x68, 0x2b, 0x6b, 0x10, 0x89,
	0x65, 0x53, 0x40, 0xea, 0xf7, 0xe0, 0x5a, 0x2a, 0x1f, 0x06, 0xdd, 0xcd, 0x1a, 0x26, 0xc1, 0x9f,
	0x99, 0x7f, 0xc9, 0x15, 0x54, 0x97, 0xec, 0x25, 0x57, 0xf3, 0x63, 0xce, 0x06, 0x42, 0xa2, 0xb2,
	0xe4, 0x03, 0x91, 0xe4, 0xbf, 0x9c, 0x09, 0x84, 0xcc, 0x0f, 0xc8, 0x05, 0x42, 0x41, 0x2a, 0x28,
	0x00, 0xe2, 0x87, 0x32, 0x31, 0x4a, 0x72, 0xbf, 0x77, 0x72, 0x20, 0x38, 0x8b, 0xf3, 0x9d, 0xc4,
	0x9e, 0x1b, 0x63, 0x34, 0x13, 0x74, 0x27, 0x87, 0xec, 0x79, 0xdd, 0x2e, 0x3e, 0xef, 0x04, 0x7f,
	0x24, 0x7b, 0xde, 0x2a, 0xca, 0x49, 0x01, 0xf9, 0x3f, 0x8d, 0xb3, 0x05, 0x54, 0xec, 0x10, 0xf4,
	0x20, 0x7b, 0x34, 0x25, 0xa7, 0xe4, 0x2c, 0x30, 0x92, 0xf4, 0x8f, 0x3c, 0x30, 0x94, 0xa4, 0x91,
	0x02, 0x30, 0x7e, 0x14, 0xe7, 0x89, 0x26, 0x33, 0xaf, 0xe8, 0x7e, 0xf6, 0x58, 0x8a, 0x6c, 0xed,
	0xdc, 0x06, 0x91, 0xc8, 0xab, 0x66, 0x1b, 0x84, 0x8a, 0xf0, 0x31, 0xff, 0x4a, 0xa8, 0x12, 0xbb,
	0xd9, 0x2b, 0x91, 0x92, 0x0e, 0x9e, 0x3f, 0x28, 0x29, 0x28, 0x22, 0xd9, 0x41, 0x49, 0xcd, 0x2b,
	0x99, 0x7b, 0x4f, 0x8c, 0x32, 0x40, 0xb2, 0xf7, 0x44, 0x89, 0x2f, 0x32, 0xf7, 0x9e, 0x28, 0xc5,
	0xc1, 0xbb, 0xd9, 0xc3, 0x7c, 0x56, 0x41, 0x30, 0xc6, 0xd9, 0xc8, 0x0e, 0x82, 0x32, 0xc5, 0xa3,
	0x80, 0xdc, 0xe3, 0x78, 0x12, 0x2a, 0x5c, 0xe2, 0xb7, 0x33, 0x0d, 0x6d, 0xce, 0x95, 0x95, 0xcc,
	0x4b, 0xc1, 0xb1, 0xc8, 0x36, 0x2f, 0xf7, 0xac, 0xae, 0xfe, 0x8b, 0x64, 0x22, 0x58, 0xc1, 0x4e,
	0x40, 0x5f, 0xcb, 0x1a, 0x30, 0x9d, 0xd6, 0x50, 0x00, 0xcc, 0xaf, 0x14, 0x54, 0x09, 0x25, 0x03,
	0x01, 0xbd, 0x97, 0x0b, 0x4f, 0x1a, 0x7b, 0x61, 0x6e, 0x47, 0x88, 0xf3, 0x0c, 0xb2, 0x1d, 0x21,
	0xc1, 0x4b, 0x38, 0x93, 0xe4, 0x90, 0x41, 0x90, 0x4f, 0x72, 0x8c, 0x71, 0x30, 0x7f, 0xf8, 0x55,
	0x91, 0x03, 0xb2, 0xc3, 0x6f, 0x0a, 0xa5, 0x60, 0xfe, 0x8d, 0x30, 0x99, 0xfd, 0xcf, 0xde, 0x08,
	0x95, 0x8c, 0x81, 0xf9, 0x2f, 0x87, 0xca, 0xe4, 0x7e, 0xf6, 0xe5, 0x30, 0x8d, 0x13, 0x50, 0x00,
	0xc8, 0x08, 0x96, 0x55, 0xd9, 0x7b, 0x74, 0x3b, 0xcf, 0x2e, 0x38, 0x49, 0xf4, 0x17, 0x90, 0x77,
	0x08, 0x28, 0x99, 0x92, 0x47, 0x5f, 0xca, 0x23, 0xcd, 0xcf, 0xdd, 0xcf, 0x1f, 0x79, 0xa7, 0x59,
	0xf6, 0x1c, 0x91, 0x37, 0x9a, 0x91, 0x2f, 0xb4, 0xa7, 0x5e, 0x51, 0x64, 0x36, 0xd0, 0x97, 0x53,
	0x9e, 0x93, 0x55, 0xd9, 0x96, 0xd6, 0x66, 0xfe, 0xc6, 0xb2, 0xd4, 0x78, 0xd6, 0x76, 0x96, 0x54,
	0xf9, 0xe5, 0x72, 0xa6, 0x54, 0xc5, 0x23, 0xa5, 0x78, 0x5b, 0xb9, 0xaa, 0xcc, 0x43, 0xa4, 0x68,
	0x37, 0x2d, 0x11, 0xd2, 0xba, 0x53, 0xa4, 0xb9, 0x34, 0x63, 0x29, 0xe3, 0x36, 0x63, 0xc6, 0x89,
	0xfc, 0xc6, 0xac, 0x19, 0xab, 0x72, 0x17, 0xfa, 0x39, 0xf4, 0x02, 0x50, 0x32, 0xbd, 0x90, 0x62,
	0xbb, 0xca, 0xbc, 0x45, 0xeb, 0xed, 0xdc, 0x6d, 0xa7, 0xee, 0x79, 0x39, 0x91, 0x16, 0x40, 0x5f,
	0x4c, 0x1d, 0x25, 0x61, 0x4c, 0xb7, 0xf3, 0x36, 0x0d, 0x43, 0xe3, 0x6a, 0xca, 0xfb, 0x7e, 0xca,
	0xa9, 0x30, 0x3d, 0x89, 0xd0, 0xda, 0x2e, 0xd6, 0x21, 0x80, 0xf0, 0x12, 0x96, 0x55, 0x6f, 0xf3,
	0x29, 0x11, 0x29, 0x25, 0x23, 0xd0, 0xda, 0x2a, 0xd0, 0x3a, 0x21, 0x38, 0xee, 0x47, 0x33, 0x05,
	0x27, 0x1c, 0x69, 0xab, 0x40, 0xeb, 0x40, 0xf0, 0x0f, 0x60, 0x45, 0xfd, 0x08, 0x8f, 0x36, 0x67,
	0x0c, 0xa6, 0xf2, 0xa5, 0xbb, 0x85, 0xda, 0x47, 0xd6, 0x3c, 0xe5, 0xf9, 0x3d, 0x65, 0xcd, 0xd3,
	0xdf, 0xfc, 0x53, 0xd6, 0x7c, 0xe6, 0xeb, 0xbe, 0x7e, 0x0e, 0xf5, 0xe0, 0x8d, 0xd8, 0x23, 0x39,
	0x52, 0x27, 0x86, 0xe4, 0x37, 0xfe, 0xd6, 0x46, 0x9e, 0x66, 0xbe, 0x8c, 0xdd, 0x8b, 0xff, 0x7a,
	0xbd, 0xa6, 0xfd, 0xfb, 0xf5, 0x9a, 0xf6, 0x9f, 0xd7, 0x6b, 0x5a, 0xaf, 0x21, 0xfe, 0xf5, 0x79,
	0xef, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x45, 0xb5, 0x7d, 0x63, 0x42, 0x3a, 0x00, 0x00,
}
