// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: stickergif.proto

package imstickergifservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StickerServiceClient is the client API for StickerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StickerServiceClient interface {
}

type stickerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStickerServiceClient(cc grpc.ClientConnInterface) StickerServiceClient {
	return &stickerServiceClient{cc}
}

// StickerServiceServer is the server API for StickerService service.
// All implementations must embed UnimplementedStickerServiceServer
// for forward compatibility
type StickerServiceServer interface {
	mustEmbedUnimplementedStickerServiceServer()
}

// UnimplementedStickerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStickerServiceServer struct {
}

func (UnimplementedStickerServiceServer) mustEmbedUnimplementedStickerServiceServer() {}

// UnsafeStickerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StickerServiceServer will
// result in compilation errors.
type UnsafeStickerServiceServer interface {
	mustEmbedUnimplementedStickerServiceServer()
}

func RegisterStickerServiceServer(s grpc.ServiceRegistrar, srv StickerServiceServer) {
	s.RegisterService(&StickerService_ServiceDesc, srv)
}

// StickerService_ServiceDesc is the grpc.ServiceDesc for StickerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StickerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imstickergifservice.StickerService",
	HandlerType: (*StickerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "stickergif.proto",
}

// StickerGifServiceClient is the client API for StickerGifService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StickerGifServiceClient interface {
	// HandleLogic 处理调用sticker,gif及bots相关的协议逻辑
	HandleLogic(ctx context.Context, in *HandleLogicReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicAddStickerToSet
	HandleLogicAddStickerToSet(ctx context.Context, in *HandleLogicAddStickerToSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicChangeStickerPosition
	HandleLogicChangeStickerPosition(ctx context.Context, in *HandleLogicChangeStickerPositionReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicClearRecentStickers
	HandleLogicClearRecentStickers(ctx context.Context, in *HandleLogicClearRecentStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicCreateStickerSet
	HandleLogicCreateStickerSet(ctx context.Context, in *HandleLogicCreateStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicFaveStickers
	HandleLogicFaveStickers(ctx context.Context, in *HandleLogicFaveStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicGetAllStickers
	HandleLogicGetAllStickers(ctx context.Context, in *HandleLogicGetAllStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicGetArchivedStickers
	HandleLogicGetArchivedStickers(ctx context.Context, in *HandleLogicGetArchivedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicGetAttachedStickers
	HandleLogicGetAttachedStickers(ctx context.Context, in *HandleLogicGetAttachedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicGetFeaturedStickers
	HandleLogicGetFeaturedStickers(ctx context.Context, in *HandleLogicGetFeaturedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicGetRecentStickers
	HandleLogicGetRecentStickers(ctx context.Context, in *HandleLogicGetRecentStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicGetStickerSet
	HandleLogicGetStickerSet(ctx context.Context, in *HandleLogicGetStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicInstallStickerSet
	HandleLogicInstallStickerSet(ctx context.Context, in *HandleLogicInstallStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicReadFeaturedStickers
	HandleLogicReadFeaturedStickers(ctx context.Context, in *HandleLogicReadFeaturedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicRemoveStickerFromSet
	HandleLogicRemoveStickerFromSet(ctx context.Context, in *HandleLogicRemoveStickerFromSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicReorderStickerSets
	HandleLogicReorderStickerSets(ctx context.Context, in *HandleLogicReorderStickerSetsReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicSaveRecentSticker
	HandleLogicSaveRecentSticker(ctx context.Context, in *HandleLogicSaveRecentStickerReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicSaveRecentStickerIos(ctx context.Context, in *HandleLogicSaveRecentStickerIosReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicUninstallStickerSet
	HandleLogicUninstallStickerSet(ctx context.Context, in *HandleLogicUninstallStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicMaskStickers
	HandleLogicMaskStickers(ctx context.Context, in *HandleLogicMaskStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// HandleLogicRecentStickers
	HandleLogicRecentStickers(ctx context.Context, in *HandleLogicRecentStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicFavedStickers(ctx context.Context, in *HandleLogicFavedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicStickerSet(ctx context.Context, in *HandleLogicStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicrReorderStickerSets(ctx context.Context, in *HandleLogicrReorderStickerSetsReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicSavedGifs(ctx context.Context, in *HandleLogicSavedGifsReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicSaveGif(ctx context.Context, in *HandleLogicSaveGifReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicSearchGifs(ctx context.Context, in *HandleLogicSearchGifsReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicBotsAdjustCollectedBots(ctx context.Context, in *HandleLogicBotsAdjustCollectedBotsReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicBotsAnswerWebhookJSONQuery(ctx context.Context, in *HandleLogicBotsAnswerWebhookJSONQueryReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicBotsCollectBot(ctx context.Context, in *HandleLogicBotsCollectBotReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicBotsGetBotList(ctx context.Context, in *HandleLogicBotsGetBotListReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicBotsGetCollectedBots(ctx context.Context, in *HandleLogicBotsGetCollectedBotsReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicBotsGetUserBotList(ctx context.Context, in *HandleLogicBotsGetUserBotListReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	HandleLogicBotsSendCustomRequest(ctx context.Context, in *HandleLogicBotsSendCustomRequestReq, opts ...grpc.CallOption) (*HandleLogicResult, error)
	// StoreShopStickerSet 存储shop_sticker_set
	StoreShopStickerSet(ctx context.Context, in *StoreShopStickerSetReq, opts ...grpc.CallOption) (*StoreShopStickerSetResult, error)
	// StoreStickerPackDoc 存储sticker_pack_document
	StoreStickerPackDoc(ctx context.Context, in *StoreStickerPackDocReq, opts ...grpc.CallOption) (*StoreStickerPackDocResult, error)
	// StoreAuthorStickerSet 储存author_sticker_set
	StoreAuthorStickerSet(ctx context.Context, in *StoreAuthorStickerSetReq, opts ...grpc.CallOption) (*StoreAuthorStickerSetResult, error)
	// StoreUserStickerSet 储存user_sticker_set
	StoreUserStickerSet(ctx context.Context, in *StoreUserStickerSetReq, opts ...grpc.CallOption) (*StoreUserStickerSetResult, error)
	// GetStickerPackDocs 获取sticker_pack_document集合
	GetStickerPackDocs(ctx context.Context, in *GetStickerPackDocsReq, opts ...grpc.CallOption) (*GetStickerPackDocsResult, error)
	// GetShopStickerSet 获取shop_sticker_set
	GetShopStickerSet(ctx context.Context, in *GetShopStickerSetReq, opts ...grpc.CallOption) (*GetShopStickerSetResult, error)
	// GetAuthorAllStickerSets 获取author_sticker_set集合
	GetAuthorAllStickerSets(ctx context.Context, in *GetAuthorAllStickerSetsReq, opts ...grpc.CallOption) (*GetAuthorAllStickerSetsResult, error)
	// DelShopStickerSet 删除shop_sticker_set
	DeleteShopStickerSet(ctx context.Context, in *DeleteShopStickerSetReq, opts ...grpc.CallOption) (*DeleteShopStickerSetResult, error)
	// DeleteStickerPackDoc 删除sticker_pack_document
	DeleteStickerPackDoc(ctx context.Context, in *DeleteStickerPackDocReq, opts ...grpc.CallOption) (*DeleteStickerPackDocResult, error)
	// DeleteAuthorStickerSet 删除author_sticker_set
	DeleteAuthorStickerSet(ctx context.Context, in *DeleteAuthorStickerSetReq, opts ...grpc.CallOption) (*DeleteAuthorStickerSetResult, error)
	// UpdateShopStickerSetDoc 更新shop_sticker_set doc
	UpdateShopStickerSetDoc(ctx context.Context, in *UpdateShopStickerSetDocReq, opts ...grpc.CallOption) (*UpdateShopStickerSetDocResult, error)
	// BotInlineCall 机器人内联调用
	BotInlineCall(ctx context.Context, in *BotInlineCallReq, opts ...grpc.CallOption) (*BotInlineCallResult, error)
}

type stickerGifServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStickerGifServiceClient(cc grpc.ClientConnInterface) StickerGifServiceClient {
	return &stickerGifServiceClient{cc}
}

func (c *stickerGifServiceClient) HandleLogic(ctx context.Context, in *HandleLogicReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicAddStickerToSet(ctx context.Context, in *HandleLogicAddStickerToSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicAddStickerToSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicChangeStickerPosition(ctx context.Context, in *HandleLogicChangeStickerPositionReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicChangeStickerPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicClearRecentStickers(ctx context.Context, in *HandleLogicClearRecentStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicClearRecentStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicCreateStickerSet(ctx context.Context, in *HandleLogicCreateStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicCreateStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicFaveStickers(ctx context.Context, in *HandleLogicFaveStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicFaveStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicGetAllStickers(ctx context.Context, in *HandleLogicGetAllStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicGetAllStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicGetArchivedStickers(ctx context.Context, in *HandleLogicGetArchivedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicGetArchivedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicGetAttachedStickers(ctx context.Context, in *HandleLogicGetAttachedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicGetAttachedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicGetFeaturedStickers(ctx context.Context, in *HandleLogicGetFeaturedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicGetFeaturedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicGetRecentStickers(ctx context.Context, in *HandleLogicGetRecentStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicGetRecentStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicGetStickerSet(ctx context.Context, in *HandleLogicGetStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicGetStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicInstallStickerSet(ctx context.Context, in *HandleLogicInstallStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicInstallStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicReadFeaturedStickers(ctx context.Context, in *HandleLogicReadFeaturedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicReadFeaturedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicRemoveStickerFromSet(ctx context.Context, in *HandleLogicRemoveStickerFromSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicRemoveStickerFromSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicReorderStickerSets(ctx context.Context, in *HandleLogicReorderStickerSetsReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicReorderStickerSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicSaveRecentSticker(ctx context.Context, in *HandleLogicSaveRecentStickerReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicSaveRecentSticker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicSaveRecentStickerIos(ctx context.Context, in *HandleLogicSaveRecentStickerIosReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicSaveRecentStickerIos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicUninstallStickerSet(ctx context.Context, in *HandleLogicUninstallStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicUninstallStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicMaskStickers(ctx context.Context, in *HandleLogicMaskStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicMaskStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicRecentStickers(ctx context.Context, in *HandleLogicRecentStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicRecentStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicFavedStickers(ctx context.Context, in *HandleLogicFavedStickersReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicFavedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicStickerSet(ctx context.Context, in *HandleLogicStickerSetReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicrReorderStickerSets(ctx context.Context, in *HandleLogicrReorderStickerSetsReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicrReorderStickerSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicSavedGifs(ctx context.Context, in *HandleLogicSavedGifsReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicSavedGifs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicSaveGif(ctx context.Context, in *HandleLogicSaveGifReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicSaveGif", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicSearchGifs(ctx context.Context, in *HandleLogicSearchGifsReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicSearchGifs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicBotsAdjustCollectedBots(ctx context.Context, in *HandleLogicBotsAdjustCollectedBotsReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicBotsAdjustCollectedBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicBotsAnswerWebhookJSONQuery(ctx context.Context, in *HandleLogicBotsAnswerWebhookJSONQueryReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicBotsAnswerWebhookJSONQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicBotsCollectBot(ctx context.Context, in *HandleLogicBotsCollectBotReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicBotsCollectBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicBotsGetBotList(ctx context.Context, in *HandleLogicBotsGetBotListReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicBotsGetBotList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicBotsGetCollectedBots(ctx context.Context, in *HandleLogicBotsGetCollectedBotsReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicBotsGetCollectedBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicBotsGetUserBotList(ctx context.Context, in *HandleLogicBotsGetUserBotListReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicBotsGetUserBotList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) HandleLogicBotsSendCustomRequest(ctx context.Context, in *HandleLogicBotsSendCustomRequestReq, opts ...grpc.CallOption) (*HandleLogicResult, error) {
	out := new(HandleLogicResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/HandleLogicBotsSendCustomRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) StoreShopStickerSet(ctx context.Context, in *StoreShopStickerSetReq, opts ...grpc.CallOption) (*StoreShopStickerSetResult, error) {
	out := new(StoreShopStickerSetResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/StoreShopStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) StoreStickerPackDoc(ctx context.Context, in *StoreStickerPackDocReq, opts ...grpc.CallOption) (*StoreStickerPackDocResult, error) {
	out := new(StoreStickerPackDocResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/StoreStickerPackDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) StoreAuthorStickerSet(ctx context.Context, in *StoreAuthorStickerSetReq, opts ...grpc.CallOption) (*StoreAuthorStickerSetResult, error) {
	out := new(StoreAuthorStickerSetResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/StoreAuthorStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) StoreUserStickerSet(ctx context.Context, in *StoreUserStickerSetReq, opts ...grpc.CallOption) (*StoreUserStickerSetResult, error) {
	out := new(StoreUserStickerSetResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/StoreUserStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) GetStickerPackDocs(ctx context.Context, in *GetStickerPackDocsReq, opts ...grpc.CallOption) (*GetStickerPackDocsResult, error) {
	out := new(GetStickerPackDocsResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/GetStickerPackDocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) GetShopStickerSet(ctx context.Context, in *GetShopStickerSetReq, opts ...grpc.CallOption) (*GetShopStickerSetResult, error) {
	out := new(GetShopStickerSetResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/GetShopStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) GetAuthorAllStickerSets(ctx context.Context, in *GetAuthorAllStickerSetsReq, opts ...grpc.CallOption) (*GetAuthorAllStickerSetsResult, error) {
	out := new(GetAuthorAllStickerSetsResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/GetAuthorAllStickerSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) DeleteShopStickerSet(ctx context.Context, in *DeleteShopStickerSetReq, opts ...grpc.CallOption) (*DeleteShopStickerSetResult, error) {
	out := new(DeleteShopStickerSetResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/DeleteShopStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) DeleteStickerPackDoc(ctx context.Context, in *DeleteStickerPackDocReq, opts ...grpc.CallOption) (*DeleteStickerPackDocResult, error) {
	out := new(DeleteStickerPackDocResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/DeleteStickerPackDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) DeleteAuthorStickerSet(ctx context.Context, in *DeleteAuthorStickerSetReq, opts ...grpc.CallOption) (*DeleteAuthorStickerSetResult, error) {
	out := new(DeleteAuthorStickerSetResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/DeleteAuthorStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) UpdateShopStickerSetDoc(ctx context.Context, in *UpdateShopStickerSetDocReq, opts ...grpc.CallOption) (*UpdateShopStickerSetDocResult, error) {
	out := new(UpdateShopStickerSetDocResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/UpdateShopStickerSetDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickerGifServiceClient) BotInlineCall(ctx context.Context, in *BotInlineCallReq, opts ...grpc.CallOption) (*BotInlineCallResult, error) {
	out := new(BotInlineCallResult)
	err := c.cc.Invoke(ctx, "/imstickergifservice.StickerGifService/BotInlineCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StickerGifServiceServer is the server API for StickerGifService service.
// All implementations must embed UnimplementedStickerGifServiceServer
// for forward compatibility
type StickerGifServiceServer interface {
	// HandleLogic 处理调用sticker,gif及bots相关的协议逻辑
	HandleLogic(context.Context, *HandleLogicReq) (*HandleLogicResult, error)
	// HandleLogicAddStickerToSet
	HandleLogicAddStickerToSet(context.Context, *HandleLogicAddStickerToSetReq) (*HandleLogicResult, error)
	// HandleLogicChangeStickerPosition
	HandleLogicChangeStickerPosition(context.Context, *HandleLogicChangeStickerPositionReq) (*HandleLogicResult, error)
	// HandleLogicClearRecentStickers
	HandleLogicClearRecentStickers(context.Context, *HandleLogicClearRecentStickersReq) (*HandleLogicResult, error)
	// HandleLogicCreateStickerSet
	HandleLogicCreateStickerSet(context.Context, *HandleLogicCreateStickerSetReq) (*HandleLogicResult, error)
	// HandleLogicFaveStickers
	HandleLogicFaveStickers(context.Context, *HandleLogicFaveStickersReq) (*HandleLogicResult, error)
	// HandleLogicGetAllStickers
	HandleLogicGetAllStickers(context.Context, *HandleLogicGetAllStickersReq) (*HandleLogicResult, error)
	// HandleLogicGetArchivedStickers
	HandleLogicGetArchivedStickers(context.Context, *HandleLogicGetArchivedStickersReq) (*HandleLogicResult, error)
	// HandleLogicGetAttachedStickers
	HandleLogicGetAttachedStickers(context.Context, *HandleLogicGetAttachedStickersReq) (*HandleLogicResult, error)
	// HandleLogicGetFeaturedStickers
	HandleLogicGetFeaturedStickers(context.Context, *HandleLogicGetFeaturedStickersReq) (*HandleLogicResult, error)
	// HandleLogicGetRecentStickers
	HandleLogicGetRecentStickers(context.Context, *HandleLogicGetRecentStickersReq) (*HandleLogicResult, error)
	// HandleLogicGetStickerSet
	HandleLogicGetStickerSet(context.Context, *HandleLogicGetStickerSetReq) (*HandleLogicResult, error)
	// HandleLogicInstallStickerSet
	HandleLogicInstallStickerSet(context.Context, *HandleLogicInstallStickerSetReq) (*HandleLogicResult, error)
	// HandleLogicReadFeaturedStickers
	HandleLogicReadFeaturedStickers(context.Context, *HandleLogicReadFeaturedStickersReq) (*HandleLogicResult, error)
	// HandleLogicRemoveStickerFromSet
	HandleLogicRemoveStickerFromSet(context.Context, *HandleLogicRemoveStickerFromSetReq) (*HandleLogicResult, error)
	// HandleLogicReorderStickerSets
	HandleLogicReorderStickerSets(context.Context, *HandleLogicReorderStickerSetsReq) (*HandleLogicResult, error)
	// HandleLogicSaveRecentSticker
	HandleLogicSaveRecentSticker(context.Context, *HandleLogicSaveRecentStickerReq) (*HandleLogicResult, error)
	HandleLogicSaveRecentStickerIos(context.Context, *HandleLogicSaveRecentStickerIosReq) (*HandleLogicResult, error)
	// HandleLogicUninstallStickerSet
	HandleLogicUninstallStickerSet(context.Context, *HandleLogicUninstallStickerSetReq) (*HandleLogicResult, error)
	// HandleLogicMaskStickers
	HandleLogicMaskStickers(context.Context, *HandleLogicMaskStickersReq) (*HandleLogicResult, error)
	// HandleLogicRecentStickers
	HandleLogicRecentStickers(context.Context, *HandleLogicRecentStickersReq) (*HandleLogicResult, error)
	HandleLogicFavedStickers(context.Context, *HandleLogicFavedStickersReq) (*HandleLogicResult, error)
	HandleLogicStickerSet(context.Context, *HandleLogicStickerSetReq) (*HandleLogicResult, error)
	HandleLogicrReorderStickerSets(context.Context, *HandleLogicrReorderStickerSetsReq) (*HandleLogicResult, error)
	HandleLogicSavedGifs(context.Context, *HandleLogicSavedGifsReq) (*HandleLogicResult, error)
	HandleLogicSaveGif(context.Context, *HandleLogicSaveGifReq) (*HandleLogicResult, error)
	HandleLogicSearchGifs(context.Context, *HandleLogicSearchGifsReq) (*HandleLogicResult, error)
	HandleLogicBotsAdjustCollectedBots(context.Context, *HandleLogicBotsAdjustCollectedBotsReq) (*HandleLogicResult, error)
	HandleLogicBotsAnswerWebhookJSONQuery(context.Context, *HandleLogicBotsAnswerWebhookJSONQueryReq) (*HandleLogicResult, error)
	HandleLogicBotsCollectBot(context.Context, *HandleLogicBotsCollectBotReq) (*HandleLogicResult, error)
	HandleLogicBotsGetBotList(context.Context, *HandleLogicBotsGetBotListReq) (*HandleLogicResult, error)
	HandleLogicBotsGetCollectedBots(context.Context, *HandleLogicBotsGetCollectedBotsReq) (*HandleLogicResult, error)
	HandleLogicBotsGetUserBotList(context.Context, *HandleLogicBotsGetUserBotListReq) (*HandleLogicResult, error)
	HandleLogicBotsSendCustomRequest(context.Context, *HandleLogicBotsSendCustomRequestReq) (*HandleLogicResult, error)
	// StoreShopStickerSet 存储shop_sticker_set
	StoreShopStickerSet(context.Context, *StoreShopStickerSetReq) (*StoreShopStickerSetResult, error)
	// StoreStickerPackDoc 存储sticker_pack_document
	StoreStickerPackDoc(context.Context, *StoreStickerPackDocReq) (*StoreStickerPackDocResult, error)
	// StoreAuthorStickerSet 储存author_sticker_set
	StoreAuthorStickerSet(context.Context, *StoreAuthorStickerSetReq) (*StoreAuthorStickerSetResult, error)
	// StoreUserStickerSet 储存user_sticker_set
	StoreUserStickerSet(context.Context, *StoreUserStickerSetReq) (*StoreUserStickerSetResult, error)
	// GetStickerPackDocs 获取sticker_pack_document集合
	GetStickerPackDocs(context.Context, *GetStickerPackDocsReq) (*GetStickerPackDocsResult, error)
	// GetShopStickerSet 获取shop_sticker_set
	GetShopStickerSet(context.Context, *GetShopStickerSetReq) (*GetShopStickerSetResult, error)
	// GetAuthorAllStickerSets 获取author_sticker_set集合
	GetAuthorAllStickerSets(context.Context, *GetAuthorAllStickerSetsReq) (*GetAuthorAllStickerSetsResult, error)
	// DelShopStickerSet 删除shop_sticker_set
	DeleteShopStickerSet(context.Context, *DeleteShopStickerSetReq) (*DeleteShopStickerSetResult, error)
	// DeleteStickerPackDoc 删除sticker_pack_document
	DeleteStickerPackDoc(context.Context, *DeleteStickerPackDocReq) (*DeleteStickerPackDocResult, error)
	// DeleteAuthorStickerSet 删除author_sticker_set
	DeleteAuthorStickerSet(context.Context, *DeleteAuthorStickerSetReq) (*DeleteAuthorStickerSetResult, error)
	// UpdateShopStickerSetDoc 更新shop_sticker_set doc
	UpdateShopStickerSetDoc(context.Context, *UpdateShopStickerSetDocReq) (*UpdateShopStickerSetDocResult, error)
	// BotInlineCall 机器人内联调用
	BotInlineCall(context.Context, *BotInlineCallReq) (*BotInlineCallResult, error)
	mustEmbedUnimplementedStickerGifServiceServer()
}

// UnimplementedStickerGifServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStickerGifServiceServer struct {
}

func (UnimplementedStickerGifServiceServer) HandleLogic(context.Context, *HandleLogicReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogic not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicAddStickerToSet(context.Context, *HandleLogicAddStickerToSetReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicAddStickerToSet not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicChangeStickerPosition(context.Context, *HandleLogicChangeStickerPositionReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicChangeStickerPosition not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicClearRecentStickers(context.Context, *HandleLogicClearRecentStickersReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicClearRecentStickers not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicCreateStickerSet(context.Context, *HandleLogicCreateStickerSetReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicCreateStickerSet not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicFaveStickers(context.Context, *HandleLogicFaveStickersReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicFaveStickers not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicGetAllStickers(context.Context, *HandleLogicGetAllStickersReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicGetAllStickers not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicGetArchivedStickers(context.Context, *HandleLogicGetArchivedStickersReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicGetArchivedStickers not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicGetAttachedStickers(context.Context, *HandleLogicGetAttachedStickersReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicGetAttachedStickers not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicGetFeaturedStickers(context.Context, *HandleLogicGetFeaturedStickersReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicGetFeaturedStickers not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicGetRecentStickers(context.Context, *HandleLogicGetRecentStickersReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicGetRecentStickers not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicGetStickerSet(context.Context, *HandleLogicGetStickerSetReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicGetStickerSet not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicInstallStickerSet(context.Context, *HandleLogicInstallStickerSetReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicInstallStickerSet not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicReadFeaturedStickers(context.Context, *HandleLogicReadFeaturedStickersReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicReadFeaturedStickers not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicRemoveStickerFromSet(context.Context, *HandleLogicRemoveStickerFromSetReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicRemoveStickerFromSet not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicReorderStickerSets(context.Context, *HandleLogicReorderStickerSetsReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicReorderStickerSets not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicSaveRecentSticker(context.Context, *HandleLogicSaveRecentStickerReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicSaveRecentSticker not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicSaveRecentStickerIos(context.Context, *HandleLogicSaveRecentStickerIosReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicSaveRecentStickerIos not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicUninstallStickerSet(context.Context, *HandleLogicUninstallStickerSetReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicUninstallStickerSet not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicMaskStickers(context.Context, *HandleLogicMaskStickersReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicMaskStickers not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicRecentStickers(context.Context, *HandleLogicRecentStickersReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicRecentStickers not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicFavedStickers(context.Context, *HandleLogicFavedStickersReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicFavedStickers not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicStickerSet(context.Context, *HandleLogicStickerSetReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicStickerSet not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicrReorderStickerSets(context.Context, *HandleLogicrReorderStickerSetsReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicrReorderStickerSets not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicSavedGifs(context.Context, *HandleLogicSavedGifsReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicSavedGifs not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicSaveGif(context.Context, *HandleLogicSaveGifReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicSaveGif not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicSearchGifs(context.Context, *HandleLogicSearchGifsReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicSearchGifs not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicBotsAdjustCollectedBots(context.Context, *HandleLogicBotsAdjustCollectedBotsReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicBotsAdjustCollectedBots not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicBotsAnswerWebhookJSONQuery(context.Context, *HandleLogicBotsAnswerWebhookJSONQueryReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicBotsAnswerWebhookJSONQuery not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicBotsCollectBot(context.Context, *HandleLogicBotsCollectBotReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicBotsCollectBot not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicBotsGetBotList(context.Context, *HandleLogicBotsGetBotListReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicBotsGetBotList not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicBotsGetCollectedBots(context.Context, *HandleLogicBotsGetCollectedBotsReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicBotsGetCollectedBots not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicBotsGetUserBotList(context.Context, *HandleLogicBotsGetUserBotListReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicBotsGetUserBotList not implemented")
}
func (UnimplementedStickerGifServiceServer) HandleLogicBotsSendCustomRequest(context.Context, *HandleLogicBotsSendCustomRequestReq) (*HandleLogicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLogicBotsSendCustomRequest not implemented")
}
func (UnimplementedStickerGifServiceServer) StoreShopStickerSet(context.Context, *StoreShopStickerSetReq) (*StoreShopStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreShopStickerSet not implemented")
}
func (UnimplementedStickerGifServiceServer) StoreStickerPackDoc(context.Context, *StoreStickerPackDocReq) (*StoreStickerPackDocResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreStickerPackDoc not implemented")
}
func (UnimplementedStickerGifServiceServer) StoreAuthorStickerSet(context.Context, *StoreAuthorStickerSetReq) (*StoreAuthorStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreAuthorStickerSet not implemented")
}
func (UnimplementedStickerGifServiceServer) StoreUserStickerSet(context.Context, *StoreUserStickerSetReq) (*StoreUserStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreUserStickerSet not implemented")
}
func (UnimplementedStickerGifServiceServer) GetStickerPackDocs(context.Context, *GetStickerPackDocsReq) (*GetStickerPackDocsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStickerPackDocs not implemented")
}
func (UnimplementedStickerGifServiceServer) GetShopStickerSet(context.Context, *GetShopStickerSetReq) (*GetShopStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopStickerSet not implemented")
}
func (UnimplementedStickerGifServiceServer) GetAuthorAllStickerSets(context.Context, *GetAuthorAllStickerSetsReq) (*GetAuthorAllStickerSetsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorAllStickerSets not implemented")
}
func (UnimplementedStickerGifServiceServer) DeleteShopStickerSet(context.Context, *DeleteShopStickerSetReq) (*DeleteShopStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShopStickerSet not implemented")
}
func (UnimplementedStickerGifServiceServer) DeleteStickerPackDoc(context.Context, *DeleteStickerPackDocReq) (*DeleteStickerPackDocResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStickerPackDoc not implemented")
}
func (UnimplementedStickerGifServiceServer) DeleteAuthorStickerSet(context.Context, *DeleteAuthorStickerSetReq) (*DeleteAuthorStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthorStickerSet not implemented")
}
func (UnimplementedStickerGifServiceServer) UpdateShopStickerSetDoc(context.Context, *UpdateShopStickerSetDocReq) (*UpdateShopStickerSetDocResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShopStickerSetDoc not implemented")
}
func (UnimplementedStickerGifServiceServer) BotInlineCall(context.Context, *BotInlineCallReq) (*BotInlineCallResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotInlineCall not implemented")
}
func (UnimplementedStickerGifServiceServer) mustEmbedUnimplementedStickerGifServiceServer() {}

// UnsafeStickerGifServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StickerGifServiceServer will
// result in compilation errors.
type UnsafeStickerGifServiceServer interface {
	mustEmbedUnimplementedStickerGifServiceServer()
}

func RegisterStickerGifServiceServer(s grpc.ServiceRegistrar, srv StickerGifServiceServer) {
	s.RegisterService(&StickerGifService_ServiceDesc, srv)
}

func _StickerGifService_HandleLogic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogic(ctx, req.(*HandleLogicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicAddStickerToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicAddStickerToSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicAddStickerToSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicAddStickerToSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicAddStickerToSet(ctx, req.(*HandleLogicAddStickerToSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicChangeStickerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChangeStickerPositionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicChangeStickerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicChangeStickerPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicChangeStickerPosition(ctx, req.(*HandleLogicChangeStickerPositionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicClearRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicClearRecentStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicClearRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicClearRecentStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicClearRecentStickers(ctx, req.(*HandleLogicClearRecentStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicCreateStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicCreateStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicCreateStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicCreateStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicCreateStickerSet(ctx, req.(*HandleLogicCreateStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicFaveStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicFaveStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicFaveStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicFaveStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicFaveStickers(ctx, req.(*HandleLogicFaveStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicGetAllStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicGetAllStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicGetAllStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicGetAllStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicGetAllStickers(ctx, req.(*HandleLogicGetAllStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicGetArchivedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicGetArchivedStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicGetArchivedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicGetArchivedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicGetArchivedStickers(ctx, req.(*HandleLogicGetArchivedStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicGetAttachedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicGetAttachedStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicGetAttachedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicGetAttachedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicGetAttachedStickers(ctx, req.(*HandleLogicGetAttachedStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicGetFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicGetFeaturedStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicGetFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicGetFeaturedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicGetFeaturedStickers(ctx, req.(*HandleLogicGetFeaturedStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicGetRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicGetRecentStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicGetRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicGetRecentStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicGetRecentStickers(ctx, req.(*HandleLogicGetRecentStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicGetStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicGetStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicGetStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicGetStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicGetStickerSet(ctx, req.(*HandleLogicGetStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicInstallStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicInstallStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicInstallStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicInstallStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicInstallStickerSet(ctx, req.(*HandleLogicInstallStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicReadFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicReadFeaturedStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicReadFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicReadFeaturedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicReadFeaturedStickers(ctx, req.(*HandleLogicReadFeaturedStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicRemoveStickerFromSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicRemoveStickerFromSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicRemoveStickerFromSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicRemoveStickerFromSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicRemoveStickerFromSet(ctx, req.(*HandleLogicRemoveStickerFromSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicReorderStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicReorderStickerSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicReorderStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicReorderStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicReorderStickerSets(ctx, req.(*HandleLogicReorderStickerSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicSaveRecentSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicSaveRecentStickerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicSaveRecentSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicSaveRecentSticker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicSaveRecentSticker(ctx, req.(*HandleLogicSaveRecentStickerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicSaveRecentStickerIos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicSaveRecentStickerIosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicSaveRecentStickerIos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicSaveRecentStickerIos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicSaveRecentStickerIos(ctx, req.(*HandleLogicSaveRecentStickerIosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicUninstallStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicUninstallStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicUninstallStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicUninstallStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicUninstallStickerSet(ctx, req.(*HandleLogicUninstallStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicMaskStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicMaskStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicMaskStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicMaskStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicMaskStickers(ctx, req.(*HandleLogicMaskStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicRecentStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicRecentStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicRecentStickers(ctx, req.(*HandleLogicRecentStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicFavedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicFavedStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicFavedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicFavedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicFavedStickers(ctx, req.(*HandleLogicFavedStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicStickerSet(ctx, req.(*HandleLogicStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicrReorderStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicrReorderStickerSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicrReorderStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicrReorderStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicrReorderStickerSets(ctx, req.(*HandleLogicrReorderStickerSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicSavedGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicSavedGifsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicSavedGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicSavedGifs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicSavedGifs(ctx, req.(*HandleLogicSavedGifsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicSaveGif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicSaveGifReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicSaveGif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicSaveGif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicSaveGif(ctx, req.(*HandleLogicSaveGifReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicSearchGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicSearchGifsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicSearchGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicSearchGifs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicSearchGifs(ctx, req.(*HandleLogicSearchGifsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicBotsAdjustCollectedBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicBotsAdjustCollectedBotsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicBotsAdjustCollectedBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicBotsAdjustCollectedBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicBotsAdjustCollectedBots(ctx, req.(*HandleLogicBotsAdjustCollectedBotsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicBotsAnswerWebhookJSONQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicBotsAnswerWebhookJSONQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicBotsAnswerWebhookJSONQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicBotsAnswerWebhookJSONQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicBotsAnswerWebhookJSONQuery(ctx, req.(*HandleLogicBotsAnswerWebhookJSONQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicBotsCollectBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicBotsCollectBotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicBotsCollectBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicBotsCollectBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicBotsCollectBot(ctx, req.(*HandleLogicBotsCollectBotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicBotsGetBotList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicBotsGetBotListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicBotsGetBotList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicBotsGetBotList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicBotsGetBotList(ctx, req.(*HandleLogicBotsGetBotListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicBotsGetCollectedBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicBotsGetCollectedBotsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicBotsGetCollectedBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicBotsGetCollectedBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicBotsGetCollectedBots(ctx, req.(*HandleLogicBotsGetCollectedBotsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicBotsGetUserBotList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicBotsGetUserBotListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicBotsGetUserBotList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicBotsGetUserBotList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicBotsGetUserBotList(ctx, req.(*HandleLogicBotsGetUserBotListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_HandleLogicBotsSendCustomRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicBotsSendCustomRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).HandleLogicBotsSendCustomRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/HandleLogicBotsSendCustomRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).HandleLogicBotsSendCustomRequest(ctx, req.(*HandleLogicBotsSendCustomRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_StoreShopStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreShopStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).StoreShopStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/StoreShopStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).StoreShopStickerSet(ctx, req.(*StoreShopStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_StoreStickerPackDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStickerPackDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).StoreStickerPackDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/StoreStickerPackDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).StoreStickerPackDoc(ctx, req.(*StoreStickerPackDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_StoreAuthorStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreAuthorStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).StoreAuthorStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/StoreAuthorStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).StoreAuthorStickerSet(ctx, req.(*StoreAuthorStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_StoreUserStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreUserStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).StoreUserStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/StoreUserStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).StoreUserStickerSet(ctx, req.(*StoreUserStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_GetStickerPackDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStickerPackDocsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).GetStickerPackDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/GetStickerPackDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).GetStickerPackDocs(ctx, req.(*GetStickerPackDocsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_GetShopStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).GetShopStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/GetShopStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).GetShopStickerSet(ctx, req.(*GetShopStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_GetAuthorAllStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorAllStickerSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).GetAuthorAllStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/GetAuthorAllStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).GetAuthorAllStickerSets(ctx, req.(*GetAuthorAllStickerSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_DeleteShopStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShopStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).DeleteShopStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/DeleteShopStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).DeleteShopStickerSet(ctx, req.(*DeleteShopStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_DeleteStickerPackDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStickerPackDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).DeleteStickerPackDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/DeleteStickerPackDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).DeleteStickerPackDoc(ctx, req.(*DeleteStickerPackDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_DeleteAuthorStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthorStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).DeleteAuthorStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/DeleteAuthorStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).DeleteAuthorStickerSet(ctx, req.(*DeleteAuthorStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_UpdateShopStickerSetDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShopStickerSetDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).UpdateShopStickerSetDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/UpdateShopStickerSetDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).UpdateShopStickerSetDoc(ctx, req.(*UpdateShopStickerSetDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StickerGifService_BotInlineCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotInlineCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickerGifServiceServer).BotInlineCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstickergifservice.StickerGifService/BotInlineCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickerGifServiceServer).BotInlineCall(ctx, req.(*BotInlineCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StickerGifService_ServiceDesc is the grpc.ServiceDesc for StickerGifService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StickerGifService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imstickergifservice.StickerGifService",
	HandlerType: (*StickerGifServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleLogic",
			Handler:    _StickerGifService_HandleLogic_Handler,
		},
		{
			MethodName: "HandleLogicAddStickerToSet",
			Handler:    _StickerGifService_HandleLogicAddStickerToSet_Handler,
		},
		{
			MethodName: "HandleLogicChangeStickerPosition",
			Handler:    _StickerGifService_HandleLogicChangeStickerPosition_Handler,
		},
		{
			MethodName: "HandleLogicClearRecentStickers",
			Handler:    _StickerGifService_HandleLogicClearRecentStickers_Handler,
		},
		{
			MethodName: "HandleLogicCreateStickerSet",
			Handler:    _StickerGifService_HandleLogicCreateStickerSet_Handler,
		},
		{
			MethodName: "HandleLogicFaveStickers",
			Handler:    _StickerGifService_HandleLogicFaveStickers_Handler,
		},
		{
			MethodName: "HandleLogicGetAllStickers",
			Handler:    _StickerGifService_HandleLogicGetAllStickers_Handler,
		},
		{
			MethodName: "HandleLogicGetArchivedStickers",
			Handler:    _StickerGifService_HandleLogicGetArchivedStickers_Handler,
		},
		{
			MethodName: "HandleLogicGetAttachedStickers",
			Handler:    _StickerGifService_HandleLogicGetAttachedStickers_Handler,
		},
		{
			MethodName: "HandleLogicGetFeaturedStickers",
			Handler:    _StickerGifService_HandleLogicGetFeaturedStickers_Handler,
		},
		{
			MethodName: "HandleLogicGetRecentStickers",
			Handler:    _StickerGifService_HandleLogicGetRecentStickers_Handler,
		},
		{
			MethodName: "HandleLogicGetStickerSet",
			Handler:    _StickerGifService_HandleLogicGetStickerSet_Handler,
		},
		{
			MethodName: "HandleLogicInstallStickerSet",
			Handler:    _StickerGifService_HandleLogicInstallStickerSet_Handler,
		},
		{
			MethodName: "HandleLogicReadFeaturedStickers",
			Handler:    _StickerGifService_HandleLogicReadFeaturedStickers_Handler,
		},
		{
			MethodName: "HandleLogicRemoveStickerFromSet",
			Handler:    _StickerGifService_HandleLogicRemoveStickerFromSet_Handler,
		},
		{
			MethodName: "HandleLogicReorderStickerSets",
			Handler:    _StickerGifService_HandleLogicReorderStickerSets_Handler,
		},
		{
			MethodName: "HandleLogicSaveRecentSticker",
			Handler:    _StickerGifService_HandleLogicSaveRecentSticker_Handler,
		},
		{
			MethodName: "HandleLogicSaveRecentStickerIos",
			Handler:    _StickerGifService_HandleLogicSaveRecentStickerIos_Handler,
		},
		{
			MethodName: "HandleLogicUninstallStickerSet",
			Handler:    _StickerGifService_HandleLogicUninstallStickerSet_Handler,
		},
		{
			MethodName: "HandleLogicMaskStickers",
			Handler:    _StickerGifService_HandleLogicMaskStickers_Handler,
		},
		{
			MethodName: "HandleLogicRecentStickers",
			Handler:    _StickerGifService_HandleLogicRecentStickers_Handler,
		},
		{
			MethodName: "HandleLogicFavedStickers",
			Handler:    _StickerGifService_HandleLogicFavedStickers_Handler,
		},
		{
			MethodName: "HandleLogicStickerSet",
			Handler:    _StickerGifService_HandleLogicStickerSet_Handler,
		},
		{
			MethodName: "HandleLogicrReorderStickerSets",
			Handler:    _StickerGifService_HandleLogicrReorderStickerSets_Handler,
		},
		{
			MethodName: "HandleLogicSavedGifs",
			Handler:    _StickerGifService_HandleLogicSavedGifs_Handler,
		},
		{
			MethodName: "HandleLogicSaveGif",
			Handler:    _StickerGifService_HandleLogicSaveGif_Handler,
		},
		{
			MethodName: "HandleLogicSearchGifs",
			Handler:    _StickerGifService_HandleLogicSearchGifs_Handler,
		},
		{
			MethodName: "HandleLogicBotsAdjustCollectedBots",
			Handler:    _StickerGifService_HandleLogicBotsAdjustCollectedBots_Handler,
		},
		{
			MethodName: "HandleLogicBotsAnswerWebhookJSONQuery",
			Handler:    _StickerGifService_HandleLogicBotsAnswerWebhookJSONQuery_Handler,
		},
		{
			MethodName: "HandleLogicBotsCollectBot",
			Handler:    _StickerGifService_HandleLogicBotsCollectBot_Handler,
		},
		{
			MethodName: "HandleLogicBotsGetBotList",
			Handler:    _StickerGifService_HandleLogicBotsGetBotList_Handler,
		},
		{
			MethodName: "HandleLogicBotsGetCollectedBots",
			Handler:    _StickerGifService_HandleLogicBotsGetCollectedBots_Handler,
		},
		{
			MethodName: "HandleLogicBotsGetUserBotList",
			Handler:    _StickerGifService_HandleLogicBotsGetUserBotList_Handler,
		},
		{
			MethodName: "HandleLogicBotsSendCustomRequest",
			Handler:    _StickerGifService_HandleLogicBotsSendCustomRequest_Handler,
		},
		{
			MethodName: "StoreShopStickerSet",
			Handler:    _StickerGifService_StoreShopStickerSet_Handler,
		},
		{
			MethodName: "StoreStickerPackDoc",
			Handler:    _StickerGifService_StoreStickerPackDoc_Handler,
		},
		{
			MethodName: "StoreAuthorStickerSet",
			Handler:    _StickerGifService_StoreAuthorStickerSet_Handler,
		},
		{
			MethodName: "StoreUserStickerSet",
			Handler:    _StickerGifService_StoreUserStickerSet_Handler,
		},
		{
			MethodName: "GetStickerPackDocs",
			Handler:    _StickerGifService_GetStickerPackDocs_Handler,
		},
		{
			MethodName: "GetShopStickerSet",
			Handler:    _StickerGifService_GetShopStickerSet_Handler,
		},
		{
			MethodName: "GetAuthorAllStickerSets",
			Handler:    _StickerGifService_GetAuthorAllStickerSets_Handler,
		},
		{
			MethodName: "DeleteShopStickerSet",
			Handler:    _StickerGifService_DeleteShopStickerSet_Handler,
		},
		{
			MethodName: "DeleteStickerPackDoc",
			Handler:    _StickerGifService_DeleteStickerPackDoc_Handler,
		},
		{
			MethodName: "DeleteAuthorStickerSet",
			Handler:    _StickerGifService_DeleteAuthorStickerSet_Handler,
		},
		{
			MethodName: "UpdateShopStickerSetDoc",
			Handler:    _StickerGifService_UpdateShopStickerSetDoc_Handler,
		},
		{
			MethodName: "BotInlineCall",
			Handler:    _StickerGifService_BotInlineCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stickergif.proto",
}
