// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: imchannelslowserver.proto

/*
Package imchannelslowserver is a generated protocol buffer package.

protoc --gogofast_out=plugins=grpc:. imchannelslowserver.proto

It is generated from these files:

	imchannelslowserver.proto

It has these top-level messages:

	CheckIsSlowModelReq
	CheckIsSlowModelResp
	UpdateChannelSlowModuleReq
	UpdateChannelSlowModuleResp
*/
package imchannelslowserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 检查慢速模式
type CheckIsSlowModelReq struct {
	UserId    int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ChannelId int32 `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	SendTime  int32 `protobuf:"varint,3,opt,name=sendTime,proto3" json:"sendTime,omitempty"`
}

func (m *CheckIsSlowModelReq) Reset()         { *m = CheckIsSlowModelReq{} }
func (m *CheckIsSlowModelReq) String() string { return proto.CompactTextString(m) }
func (*CheckIsSlowModelReq) ProtoMessage()    {}
func (*CheckIsSlowModelReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImchannelslowserver, []int{0}
}

func (m *CheckIsSlowModelReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckIsSlowModelReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *CheckIsSlowModelReq) GetSendTime() int32 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

// 慢速模式返回,能不能发送消息
type CheckIsSlowModelResp struct {
	CanSendMessage bool  `protobuf:"varint,1,opt,name=canSendMessage,proto3" json:"canSendMessage,omitempty"`
	NextTime       int32 `protobuf:"varint,2,opt,name=nextTime,proto3" json:"nextTime,omitempty"`
}

func (m *CheckIsSlowModelResp) Reset()         { *m = CheckIsSlowModelResp{} }
func (m *CheckIsSlowModelResp) String() string { return proto.CompactTextString(m) }
func (*CheckIsSlowModelResp) ProtoMessage()    {}
func (*CheckIsSlowModelResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImchannelslowserver, []int{1}
}

func (m *CheckIsSlowModelResp) GetCanSendMessage() bool {
	if m != nil {
		return m.CanSendMessage
	}
	return false
}

func (m *CheckIsSlowModelResp) GetNextTime() int32 {
	if m != nil {
		return m.NextTime
	}
	return 0
}

// 设置或者修改群是否为慢速模式
type UpdateChannelSlowModuleReq struct {
	OpId           int32 `protobuf:"varint,1,opt,name=OpId,proto3" json:"OpId,omitempty"`
	KeyId          int64 `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	ChannelId      int32 `protobuf:"varint,4,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	IsSlowModule   bool  `protobuf:"varint,5,opt,name=IsSlowModule,proto3" json:"IsSlowModule,omitempty"`
	PeerSlowSecond int32 `protobuf:"varint,6,opt,name=PeerSlowSecond,proto3" json:"PeerSlowSecond,omitempty"`
}

func (m *UpdateChannelSlowModuleReq) Reset()         { *m = UpdateChannelSlowModuleReq{} }
func (m *UpdateChannelSlowModuleReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelSlowModuleReq) ProtoMessage()    {}
func (*UpdateChannelSlowModuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImchannelslowserver, []int{2}
}

func (m *UpdateChannelSlowModuleReq) GetOpId() int32 {
	if m != nil {
		return m.OpId
	}
	return 0
}

func (m *UpdateChannelSlowModuleReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *UpdateChannelSlowModuleReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChannelSlowModuleReq) GetIsSlowModule() bool {
	if m != nil {
		return m.IsSlowModule
	}
	return false
}

func (m *UpdateChannelSlowModuleReq) GetPeerSlowSecond() int32 {
	if m != nil {
		return m.PeerSlowSecond
	}
	return 0
}

type UpdateChannelSlowModuleResp struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *UpdateChannelSlowModuleResp) Reset()         { *m = UpdateChannelSlowModuleResp{} }
func (m *UpdateChannelSlowModuleResp) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelSlowModuleResp) ProtoMessage()    {}
func (*UpdateChannelSlowModuleResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImchannelslowserver, []int{3}
}

func (m *UpdateChannelSlowModuleResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*CheckIsSlowModelReq)(nil), "imchannelslowserver.CheckIsSlowModelReq")
	proto.RegisterType((*CheckIsSlowModelResp)(nil), "imchannelslowserver.CheckIsSlowModelResp")
	proto.RegisterType((*UpdateChannelSlowModuleReq)(nil), "imchannelslowserver.updateChannelSlowModuleReq")
	proto.RegisterType((*UpdateChannelSlowModuleResp)(nil), "imchannelslowserver.updateChannelSlowModuleResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImChanneSlowServerService service

type ImChanneSlowServerServiceClient interface {
	// 更新调用慢速模式
	UpdateChannelSlowModule(ctx context.Context, in *UpdateChannelSlowModuleReq, opts ...grpc.CallOption) (*UpdateChannelSlowModuleResp, error)
	// 校验是否慢速模式
	CheckIsSlowModel(ctx context.Context, in *CheckIsSlowModelReq, opts ...grpc.CallOption) (*CheckIsSlowModelResp, error)
}

type imChanneSlowServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewImChanneSlowServerServiceClient(cc *grpc.ClientConn) ImChanneSlowServerServiceClient {
	return &imChanneSlowServerServiceClient{cc}
}

func (c *imChanneSlowServerServiceClient) UpdateChannelSlowModule(ctx context.Context, in *UpdateChannelSlowModuleReq, opts ...grpc.CallOption) (*UpdateChannelSlowModuleResp, error) {
	out := new(UpdateChannelSlowModuleResp)
	err := grpc.Invoke(ctx, "/imchannelslowserver.imChanneSlowServerService/updateChannelSlowModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imChanneSlowServerServiceClient) CheckIsSlowModel(ctx context.Context, in *CheckIsSlowModelReq, opts ...grpc.CallOption) (*CheckIsSlowModelResp, error) {
	out := new(CheckIsSlowModelResp)
	err := grpc.Invoke(ctx, "/imchannelslowserver.imChanneSlowServerService/CheckIsSlowModel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImChanneSlowServerService service

type ImChanneSlowServerServiceServer interface {
	// 更新调用慢速模式
	UpdateChannelSlowModule(context.Context, *UpdateChannelSlowModuleReq) (*UpdateChannelSlowModuleResp, error)
	// 校验是否慢速模式
	CheckIsSlowModel(context.Context, *CheckIsSlowModelReq) (*CheckIsSlowModelResp, error)
}

func RegisterImChanneSlowServerServiceServer(s *grpc.Server, srv ImChanneSlowServerServiceServer) {
	s.RegisterService(&_ImChanneSlowServerService_serviceDesc, srv)
}

func _ImChanneSlowServerService_UpdateChannelSlowModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelSlowModuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImChanneSlowServerServiceServer).UpdateChannelSlowModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelslowserver.imChanneSlowServerService/UpdateChannelSlowModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImChanneSlowServerServiceServer).UpdateChannelSlowModule(ctx, req.(*UpdateChannelSlowModuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImChanneSlowServerService_CheckIsSlowModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsSlowModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImChanneSlowServerServiceServer).CheckIsSlowModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelslowserver.imChanneSlowServerService/CheckIsSlowModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImChanneSlowServerServiceServer).CheckIsSlowModel(ctx, req.(*CheckIsSlowModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImChanneSlowServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imchannelslowserver.imChanneSlowServerService",
	HandlerType: (*ImChanneSlowServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updateChannelSlowModule",
			Handler:    _ImChanneSlowServerService_UpdateChannelSlowModule_Handler,
		},
		{
			MethodName: "CheckIsSlowModel",
			Handler:    _ImChanneSlowServerService_CheckIsSlowModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imchannelslowserver.proto",
}

func (m *CheckIsSlowModelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsSlowModelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImchannelslowserver(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImchannelslowserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.SendTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImchannelslowserver(dAtA, i, uint64(m.SendTime))
	}
	return i, nil
}

func (m *CheckIsSlowModelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsSlowModelResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CanSendMessage {
		dAtA[i] = 0x8
		i++
		if m.CanSendMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NextTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImchannelslowserver(dAtA, i, uint64(m.NextTime))
	}
	return i, nil
}

func (m *UpdateChannelSlowModuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelSlowModuleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OpId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImchannelslowserver(dAtA, i, uint64(m.OpId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImchannelslowserver(dAtA, i, uint64(m.KeyId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImchannelslowserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.IsSlowModule {
		dAtA[i] = 0x28
		i++
		if m.IsSlowModule {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PeerSlowSecond != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintImchannelslowserver(dAtA, i, uint64(m.PeerSlowSecond))
	}
	return i, nil
}

func (m *UpdateChannelSlowModuleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelSlowModuleResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintImchannelslowserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CheckIsSlowModelReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImchannelslowserver(uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImchannelslowserver(uint64(m.ChannelId))
	}
	if m.SendTime != 0 {
		n += 1 + sovImchannelslowserver(uint64(m.SendTime))
	}
	return n
}

func (m *CheckIsSlowModelResp) Size() (n int) {
	var l int
	_ = l
	if m.CanSendMessage {
		n += 2
	}
	if m.NextTime != 0 {
		n += 1 + sovImchannelslowserver(uint64(m.NextTime))
	}
	return n
}

func (m *UpdateChannelSlowModuleReq) Size() (n int) {
	var l int
	_ = l
	if m.OpId != 0 {
		n += 1 + sovImchannelslowserver(uint64(m.OpId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImchannelslowserver(uint64(m.KeyId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovImchannelslowserver(uint64(m.ChannelId))
	}
	if m.IsSlowModule {
		n += 2
	}
	if m.PeerSlowSecond != 0 {
		n += 1 + sovImchannelslowserver(uint64(m.PeerSlowSecond))
	}
	return n
}

func (m *UpdateChannelSlowModuleResp) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func sovImchannelslowserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImchannelslowserver(x uint64) (n int) {
	return sovImchannelslowserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckIsSlowModelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImchannelslowserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsSlowModelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsSlowModelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImchannelslowserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImchannelslowserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImchannelslowserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImchannelslowserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImchannelslowserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsSlowModelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImchannelslowserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsSlowModelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsSlowModelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImchannelslowserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMessage = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTime", wireType)
			}
			m.NextTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImchannelslowserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImchannelslowserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImchannelslowserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelSlowModuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImchannelslowserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: updateChannelSlowModuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: updateChannelSlowModuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpId", wireType)
			}
			m.OpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImchannelslowserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImchannelslowserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImchannelslowserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSlowModule", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImchannelslowserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSlowModule = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerSlowSecond", wireType)
			}
			m.PeerSlowSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImchannelslowserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerSlowSecond |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImchannelslowserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImchannelslowserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelSlowModuleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImchannelslowserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: updateChannelSlowModuleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: updateChannelSlowModuleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImchannelslowserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImchannelslowserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImchannelslowserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImchannelslowserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImchannelslowserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImchannelslowserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImchannelslowserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImchannelslowserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImchannelslowserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImchannelslowserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImchannelslowserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImchannelslowserver   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("imchannelslowserver.proto", fileDescriptorImchannelslowserver) }

var fileDescriptorImchannelslowserver = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0x36, 0xfd, 0xa3, 0x0e, 0x45, 0x64, 0x5b, 0x34, 0x46, 0x29, 0x92, 0x83, 0xd4, 0x4b, 0x15,
	0xc5, 0x17, 0xb0, 0xa7, 0x1e, 0x8a, 0x92, 0x7a, 0xf2, 0x16, 0xb3, 0x43, 0x1b, 0xba, 0xdd, 0xc4,
	0xdd, 0xc4, 0xea, 0xc5, 0xa3, 0xcf, 0xe3, 0x63, 0x78, 0xf4, 0x11, 0xa4, 0x4f, 0x22, 0xbb, 0x59,
	0x22, 0x8d, 0x09, 0xe8, 0xa5, 0xf4, 0xfb, 0x26, 0xfb, 0x7d, 0xf3, 0xcd, 0x0c, 0x1c, 0x84, 0xcb,
	0x60, 0xee, 0x73, 0x8e, 0x4c, 0xb2, 0x68, 0x25, 0x51, 0x3c, 0xa1, 0x18, 0xc6, 0x22, 0x4a, 0x22,
	0xd2, 0x2d, 0x29, 0xb9, 0x33, 0xe8, 0x8e, 0xe6, 0x18, 0x2c, 0xc6, 0x72, 0xca, 0xa2, 0xd5, 0x24,
	0xa2, 0xc8, 0x3c, 0x7c, 0x24, 0x7b, 0xd0, 0x4a, 0x25, 0x8a, 0x31, 0xb5, 0xad, 0x63, 0x6b, 0xd0,
	0xf4, 0x0c, 0x22, 0x47, 0xb0, 0x3d, 0xca, 0x34, 0xc6, 0xd4, 0xae, 0xe9, 0xd2, 0x0f, 0x41, 0x1c,
	0x68, 0x4b, 0xe4, 0xf4, 0x2e, 0x5c, 0xa2, 0x5d, 0xd7, 0xc5, 0x1c, 0xbb, 0xf7, 0xd0, 0xfb, 0x6d,
	0x24, 0x63, 0x72, 0x02, 0x3b, 0x81, 0xcf, 0xa7, 0xc8, 0xe9, 0x04, 0xa5, 0xf4, 0x67, 0xa8, 0x1d,
	0xdb, 0x5e, 0x81, 0x55, 0xda, 0x1c, 0x9f, 0x13, 0xad, 0x9d, 0x19, 0xe7, 0xd8, 0x7d, 0xb7, 0xc0,
	0x49, 0x63, 0xea, 0x27, 0x68, 0x7a, 0x31, 0x16, 0x29, 0x43, 0x15, 0x86, 0x40, 0xe3, 0x26, 0xce,
	0xa3, 0xe8, 0xff, 0xa4, 0x07, 0xcd, 0x05, 0xbe, 0x98, 0x10, 0x75, 0x2f, 0x03, 0x9b, 0xf1, 0x1a,
	0xc5, 0x78, 0x2e, 0x74, 0xf2, 0xee, 0x53, 0x86, 0x76, 0x53, 0x37, 0xba, 0xc1, 0xa9, 0x38, 0xb7,
	0x88, 0x42, 0x31, 0x53, 0x0c, 0x22, 0x4e, 0xed, 0x96, 0x96, 0x29, 0xb0, 0xee, 0x15, 0x1c, 0x56,
	0x76, 0x2c, 0x63, 0x35, 0x7f, 0x81, 0x32, 0x65, 0x89, 0x99, 0x86, 0x41, 0x17, 0x6f, 0x35, 0xb5,
	0xe1, 0xec, 0x4d, 0xa6, 0xa6, 0xb6, 0xa8, 0x7e, 0xc3, 0x00, 0xc9, 0x2b, 0xec, 0x57, 0x88, 0x92,
	0xb3, 0x61, 0xd9, 0x61, 0x54, 0x0f, 0xcd, 0x39, 0xff, 0xdf, 0x03, 0x19, 0xbb, 0x5b, 0x24, 0x84,
	0xdd, 0xe2, 0x8e, 0xc9, 0xa0, 0x54, 0xa7, 0xe4, 0xe6, 0x9c, 0xd3, 0x3f, 0x7e, 0xa9, 0xac, 0xae,
	0x3b, 0x1f, 0xeb, 0xbe, 0xf5, 0xb9, 0xee, 0x5b, 0x5f, 0xeb, 0xbe, 0xf5, 0xd0, 0xd2, 0x17, 0x7e,
	0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x64, 0x9e, 0xb8, 0x26, 0xfe, 0x02, 0x00, 0x00,
}
