// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imchannelslowserver.proto

package imchannelslowserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImChanneSlowServerServiceClient is the client API for ImChanneSlowServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImChanneSlowServerServiceClient interface {
	// 更新调用慢速模式
	UpdateChannelSlowModule(ctx context.Context, in *UpdateChannelSlowModuleReq, opts ...grpc.CallOption) (*UpdateChannelSlowModuleResp, error)
	//校验是否慢速模式
	CheckIsSlowModel(ctx context.Context, in *CheckIsSlowModelReq, opts ...grpc.CallOption) (*CheckIsSlowModelResp, error)
}

type imChanneSlowServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImChanneSlowServerServiceClient(cc grpc.ClientConnInterface) ImChanneSlowServerServiceClient {
	return &imChanneSlowServerServiceClient{cc}
}

func (c *imChanneSlowServerServiceClient) UpdateChannelSlowModule(ctx context.Context, in *UpdateChannelSlowModuleReq, opts ...grpc.CallOption) (*UpdateChannelSlowModuleResp, error) {
	out := new(UpdateChannelSlowModuleResp)
	err := c.cc.Invoke(ctx, "/imchannelslowserver.imChanneSlowServerService/updateChannelSlowModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imChanneSlowServerServiceClient) CheckIsSlowModel(ctx context.Context, in *CheckIsSlowModelReq, opts ...grpc.CallOption) (*CheckIsSlowModelResp, error) {
	out := new(CheckIsSlowModelResp)
	err := c.cc.Invoke(ctx, "/imchannelslowserver.imChanneSlowServerService/CheckIsSlowModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImChanneSlowServerServiceServer is the server API for ImChanneSlowServerService service.
// All implementations must embed UnimplementedImChanneSlowServerServiceServer
// for forward compatibility
type ImChanneSlowServerServiceServer interface {
	// 更新调用慢速模式
	UpdateChannelSlowModule(context.Context, *UpdateChannelSlowModuleReq) (*UpdateChannelSlowModuleResp, error)
	//校验是否慢速模式
	CheckIsSlowModel(context.Context, *CheckIsSlowModelReq) (*CheckIsSlowModelResp, error)
	mustEmbedUnimplementedImChanneSlowServerServiceServer()
}

// UnimplementedImChanneSlowServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImChanneSlowServerServiceServer struct {
}

func (UnimplementedImChanneSlowServerServiceServer) UpdateChannelSlowModule(context.Context, *UpdateChannelSlowModuleReq) (*UpdateChannelSlowModuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelSlowModule not implemented")
}
func (UnimplementedImChanneSlowServerServiceServer) CheckIsSlowModel(context.Context, *CheckIsSlowModelReq) (*CheckIsSlowModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsSlowModel not implemented")
}
func (UnimplementedImChanneSlowServerServiceServer) mustEmbedUnimplementedImChanneSlowServerServiceServer() {
}

// UnsafeImChanneSlowServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImChanneSlowServerServiceServer will
// result in compilation errors.
type UnsafeImChanneSlowServerServiceServer interface {
	mustEmbedUnimplementedImChanneSlowServerServiceServer()
}

func RegisterImChanneSlowServerServiceServer(s grpc.ServiceRegistrar, srv ImChanneSlowServerServiceServer) {
	s.RegisterService(&ImChanneSlowServerService_ServiceDesc, srv)
}

func _ImChanneSlowServerService_UpdateChannelSlowModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelSlowModuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImChanneSlowServerServiceServer).UpdateChannelSlowModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelslowserver.imChanneSlowServerService/updateChannelSlowModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImChanneSlowServerServiceServer).UpdateChannelSlowModule(ctx, req.(*UpdateChannelSlowModuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImChanneSlowServerService_CheckIsSlowModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsSlowModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImChanneSlowServerServiceServer).CheckIsSlowModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelslowserver.imChanneSlowServerService/CheckIsSlowModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImChanneSlowServerServiceServer).CheckIsSlowModel(ctx, req.(*CheckIsSlowModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ImChanneSlowServerService_ServiceDesc is the grpc.ServiceDesc for ImChanneSlowServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImChanneSlowServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imchannelslowserver.imChanneSlowServerService",
	HandlerType: (*ImChanneSlowServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updateChannelSlowModule",
			Handler:    _ImChanneSlowServerService_UpdateChannelSlowModule_Handler,
		},
		{
			MethodName: "CheckIsSlowModel",
			Handler:    _ImChanneSlowServerService_CheckIsSlowModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imchannelslowserver.proto",
}
