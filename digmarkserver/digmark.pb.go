// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/digmarkserver/digmark.proto

/*
Package digmarkserver is a generated protocol buffer package.

protoc --gogofast_out=plugins=grpc:. *.proto
protoc --gogofast_out=plugins=grpc:. ./gitlab.chatserver.im/interfaceprobuf/digmarkserver/digmark.proto

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/digmarkserver/digmark.proto

It has these top-level messages:

	DigMarkCommonReq
	DigMarkCommonResp
*/
package digmarkserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 错误代码定义
type ErrorCode int32

const (
	ErrorCode_ErrorCodeOk         ErrorCode = 0
	ErrorCode_ErrorCodeInternal   ErrorCode = 1
	ErrorCode_ErrorCodeReq        ErrorCode = 2
	ErrorCode_ErrorCodeBusinessID ErrorCode = 3
	ErrorCode_ErrorCodeMysql      ErrorCode = 4
)

var ErrorCode_name = map[int32]string{
	0: "ErrorCodeOk",
	1: "ErrorCodeInternal",
	2: "ErrorCodeReq",
	3: "ErrorCodeBusinessID",
	4: "ErrorCodeMysql",
}
var ErrorCode_value = map[string]int32{
	"ErrorCodeOk":         0,
	"ErrorCodeInternal":   1,
	"ErrorCodeReq":        2,
	"ErrorCodeBusinessID": 3,
	"ErrorCodeMysql":      4,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorDigmark, []int{0} }

// 公共接口请求
type DigMarkCommonReq struct {
	BusinessID int32  `protobuf:"varint,1,opt,name=businessID,proto3" json:"businessID,omitempty"`
	ReqData    []byte `protobuf:"bytes,2,opt,name=reqData,proto3" json:"reqData,omitempty"`
}

func (m *DigMarkCommonReq) Reset()                    { *m = DigMarkCommonReq{} }
func (m *DigMarkCommonReq) String() string            { return proto.CompactTextString(m) }
func (*DigMarkCommonReq) ProtoMessage()               {}
func (*DigMarkCommonReq) Descriptor() ([]byte, []int) { return fileDescriptorDigmark, []int{0} }

func (m *DigMarkCommonReq) GetBusinessID() int32 {
	if m != nil {
		return m.BusinessID
	}
	return 0
}

func (m *DigMarkCommonReq) GetReqData() []byte {
	if m != nil {
		return m.ReqData
	}
	return nil
}

// 公共接口响应
type DigMarkCommonResp struct {
	RespData  string    `protobuf:"bytes,1,opt,name=respData,proto3" json:"respData,omitempty"`
	ErrorCode ErrorCode `protobuf:"varint,2,opt,name=errorCode,proto3,enum=digmarkserver.ErrorCode" json:"errorCode,omitempty"`
	ErrorMsg  string    `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (m *DigMarkCommonResp) Reset()                    { *m = DigMarkCommonResp{} }
func (m *DigMarkCommonResp) String() string            { return proto.CompactTextString(m) }
func (*DigMarkCommonResp) ProtoMessage()               {}
func (*DigMarkCommonResp) Descriptor() ([]byte, []int) { return fileDescriptorDigmark, []int{1} }

func (m *DigMarkCommonResp) GetRespData() string {
	if m != nil {
		return m.RespData
	}
	return ""
}

func (m *DigMarkCommonResp) GetErrorCode() ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ErrorCode_ErrorCodeOk
}

func (m *DigMarkCommonResp) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*DigMarkCommonReq)(nil), "digmarkserver.DigMarkCommonReq")
	proto.RegisterType((*DigMarkCommonResp)(nil), "digmarkserver.DigMarkCommonResp")
	proto.RegisterEnum("digmarkserver.ErrorCode", ErrorCode_name, ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DigMarkService service

type DigMarkServiceClient interface {
	// 公共接口
	DigMarkCommon(ctx context.Context, in *DigMarkCommonReq, opts ...grpc.CallOption) (*DigMarkCommonResp, error)
}

type digMarkServiceClient struct {
	cc *grpc.ClientConn
}

func NewDigMarkServiceClient(cc *grpc.ClientConn) DigMarkServiceClient {
	return &digMarkServiceClient{cc}
}

func (c *digMarkServiceClient) DigMarkCommon(ctx context.Context, in *DigMarkCommonReq, opts ...grpc.CallOption) (*DigMarkCommonResp, error) {
	out := new(DigMarkCommonResp)
	err := grpc.Invoke(ctx, "/digmarkserver.DigMarkService/DigMarkCommon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DigMarkService service

type DigMarkServiceServer interface {
	// 公共接口
	DigMarkCommon(context.Context, *DigMarkCommonReq) (*DigMarkCommonResp, error)
}

func RegisterDigMarkServiceServer(s *grpc.Server, srv DigMarkServiceServer) {
	s.RegisterService(&_DigMarkService_serviceDesc, srv)
}

func _DigMarkService_DigMarkCommon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DigMarkCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigMarkServiceServer).DigMarkCommon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/digmarkserver.DigMarkService/DigMarkCommon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigMarkServiceServer).DigMarkCommon(ctx, req.(*DigMarkCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DigMarkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "digmarkserver.DigMarkService",
	HandlerType: (*DigMarkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DigMarkCommon",
			Handler:    _DigMarkService_DigMarkCommon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/digmarkserver/digmark.proto",
}

func (m *DigMarkCommonReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DigMarkCommonReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BusinessID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDigmark(dAtA, i, uint64(m.BusinessID))
	}
	if len(m.ReqData) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDigmark(dAtA, i, uint64(len(m.ReqData)))
		i += copy(dAtA[i:], m.ReqData)
	}
	return i, nil
}

func (m *DigMarkCommonResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DigMarkCommonResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespData) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDigmark(dAtA, i, uint64(len(m.RespData)))
		i += copy(dAtA[i:], m.RespData)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDigmark(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDigmark(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	return i, nil
}

func encodeVarintDigmark(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DigMarkCommonReq) Size() (n int) {
	var l int
	_ = l
	if m.BusinessID != 0 {
		n += 1 + sovDigmark(uint64(m.BusinessID))
	}
	l = len(m.ReqData)
	if l > 0 {
		n += 1 + l + sovDigmark(uint64(l))
	}
	return n
}

func (m *DigMarkCommonResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespData)
	if l > 0 {
		n += 1 + l + sovDigmark(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovDigmark(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovDigmark(uint64(l))
	}
	return n
}

func sovDigmark(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDigmark(x uint64) (n int) {
	return sovDigmark(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DigMarkCommonReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDigmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DigMarkCommonReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DigMarkCommonReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessID", wireType)
			}
			m.BusinessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDigmark
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqData = append(m.ReqData[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqData == nil {
				m.ReqData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDigmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDigmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DigMarkCommonResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDigmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DigMarkCommonResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DigMarkCommonResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDigmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDigmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDigmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDigmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDigmark(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDigmark
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDigmark
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDigmark
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDigmark
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDigmark
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDigmark(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDigmark = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDigmark   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/digmarkserver/digmark.proto", fileDescriptorDigmark)
}

var fileDescriptorDigmark = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcd, 0x4e, 0xfa, 0x40,
	0x14, 0xc5, 0x19, 0xf8, 0x7f, 0xc8, 0x15, 0x70, 0x18, 0x63, 0x6c, 0x58, 0x54, 0xc2, 0x8a, 0xb8,
	0x28, 0x09, 0x26, 0xae, 0x0d, 0xe0, 0x82, 0x44, 0x62, 0x52, 0x7d, 0x81, 0x29, 0x5c, 0xea, 0x04,
	0xda, 0x69, 0xef, 0x14, 0x12, 0xd7, 0xbe, 0x9c, 0x4b, 0x1f, 0xc1, 0xf0, 0x24, 0x86, 0x62, 0x07,
	0x61, 0xe1, 0xf2, 0x77, 0xef, 0xb9, 0xa7, 0x3d, 0x67, 0xe0, 0x2e, 0x54, 0xd9, 0x52, 0x06, 0xde,
	0xf4, 0x45, 0x66, 0x06, 0x69, 0x8d, 0xe4, 0xa9, 0xa8, 0xa7, 0xe2, 0x0c, 0x69, 0x2e, 0xa7, 0x98,
	0x90, 0x0e, 0x56, 0xf3, 0xde, 0x4c, 0x85, 0x91, 0xa4, 0xc5, 0x4e, 0x50, 0x90, 0x97, 0x90, 0xce,
	0xb4, 0xa8, 0x1f, 0x2c, 0x3b, 0x0f, 0xc0, 0x47, 0x2a, 0x9c, 0x48, 0x5a, 0x0c, 0x75, 0x14, 0xe9,
	0xd8, 0xc7, 0x54, 0xb8, 0x00, 0xc1, 0xca, 0xa8, 0x18, 0x8d, 0x19, 0x8f, 0x1c, 0xd6, 0x66, 0xdd,
	0xbf, 0xfe, 0x8f, 0x89, 0x70, 0xe0, 0x3f, 0x61, 0x3a, 0x92, 0x99, 0x74, 0xca, 0x6d, 0xd6, 0xad,
	0xf9, 0x05, 0x76, 0xde, 0x18, 0x34, 0x8f, 0xec, 0x4c, 0x22, 0x5a, 0x70, 0x42, 0x68, 0x92, 0xfc,
	0x60, 0xeb, 0x56, 0xf5, 0x2d, 0x8b, 0x5b, 0xa8, 0x22, 0x91, 0xa6, 0xa1, 0x9e, 0x61, 0xee, 0xd6,
	0xe8, 0x3b, 0xde, 0xc1, 0x2f, 0x7a, 0xf7, 0xc5, 0xde, 0xdf, 0x4b, 0xb7, 0x9e, 0x39, 0x4c, 0x4c,
	0xe8, 0x54, 0x76, 0x9e, 0x05, 0x5f, 0x13, 0x54, 0xed, 0x8d, 0x38, 0x83, 0x53, 0x0b, 0x8f, 0x0b,
	0x5e, 0x12, 0x17, 0xd0, 0xb4, 0x83, 0xf1, 0xb6, 0xb8, 0x58, 0x2e, 0x39, 0x13, 0x1c, 0x6a, 0xfb,
	0x0f, 0x61, 0xca, 0xcb, 0xe2, 0x12, 0xce, 0xed, 0x64, 0x60, 0xd3, 0xf3, 0x8a, 0x10, 0xd0, 0xb0,
	0x8b, 0xc9, 0xab, 0x49, 0x97, 0xfc, 0x4f, 0x7f, 0x0e, 0x8d, 0xef, 0xe0, 0x4f, 0x48, 0x6b, 0x35,
	0x45, 0xf1, 0x0c, 0xf5, 0x83, 0x2a, 0xc4, 0xd5, 0x51, 0xae, 0xe3, 0xde, 0x5b, 0xed, 0xdf, 0x05,
	0x26, 0xe9, 0x94, 0x06, 0xb5, 0xf7, 0x8d, 0xcb, 0x3e, 0x36, 0x2e, 0xfb, 0xdc, 0xb8, 0x2c, 0xf8,
	0x97, 0xbf, 0xe9, 0xcd, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x24, 0x5a, 0x9e, 0x17, 0x02,
	0x00, 0x00,
}
