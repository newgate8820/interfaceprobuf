// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pushserver.proto

package pbpushserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PushServerServiceClient is the client API for PushServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushServerServiceClient interface {
	LivePush(ctx context.Context, in *LivePushReq, opts ...grpc.CallOption) (*LivePushResult, error)
}

type pushServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPushServerServiceClient(cc grpc.ClientConnInterface) PushServerServiceClient {
	return &pushServerServiceClient{cc}
}

func (c *pushServerServiceClient) LivePush(ctx context.Context, in *LivePushReq, opts ...grpc.CallOption) (*LivePushResult, error) {
	out := new(LivePushResult)
	err := c.cc.Invoke(ctx, "/pbpushserver.PushServerService/LivePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushServerServiceServer is the server API for PushServerService service.
// All implementations must embed UnimplementedPushServerServiceServer
// for forward compatibility
type PushServerServiceServer interface {
	LivePush(context.Context, *LivePushReq) (*LivePushResult, error)
	mustEmbedUnimplementedPushServerServiceServer()
}

// UnimplementedPushServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPushServerServiceServer struct {
}

func (UnimplementedPushServerServiceServer) LivePush(context.Context, *LivePushReq) (*LivePushResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivePush not implemented")
}
func (UnimplementedPushServerServiceServer) mustEmbedUnimplementedPushServerServiceServer() {}

// UnsafePushServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushServerServiceServer will
// result in compilation errors.
type UnsafePushServerServiceServer interface {
	mustEmbedUnimplementedPushServerServiceServer()
}

func RegisterPushServerServiceServer(s grpc.ServiceRegistrar, srv PushServerServiceServer) {
	s.RegisterService(&PushServerService_ServiceDesc, srv)
}

func _PushServerService_LivePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivePushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServerServiceServer).LivePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbpushserver.PushServerService/LivePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServerServiceServer).LivePush(ctx, req.(*LivePushReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PushServerService_ServiceDesc is the grpc.ServiceDesc for PushServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbpushserver.PushServerService",
	HandlerType: (*PushServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LivePush",
			Handler:    _PushServerService_LivePush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pushserver.proto",
}
