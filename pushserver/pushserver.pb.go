// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/pushserver/pushserver.proto

/*
Package pbpushserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/pushserver/pushserver.proto

It has these top-level messages:

	LivePushReq
	LivePushResult
*/
package pbpushserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LivePushReq struct {
	UserIds []int32 `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	SelfId  int32   `protobuf:"varint,2,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Text    string  `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Type    int32   `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *LivePushReq) Reset()                    { *m = LivePushReq{} }
func (m *LivePushReq) String() string            { return proto.CompactTextString(m) }
func (*LivePushReq) ProtoMessage()               {}
func (*LivePushReq) Descriptor() ([]byte, []int) { return fileDescriptorPushserver, []int{0} }

func (m *LivePushReq) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *LivePushReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *LivePushReq) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *LivePushReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type LivePushResult struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *LivePushResult) Reset()                    { *m = LivePushResult{} }
func (m *LivePushResult) String() string            { return proto.CompactTextString(m) }
func (*LivePushResult) ProtoMessage()               {}
func (*LivePushResult) Descriptor() ([]byte, []int) { return fileDescriptorPushserver, []int{1} }

func (m *LivePushResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*LivePushReq)(nil), "pbpushserver.LivePushReq")
	proto.RegisterType((*LivePushResult)(nil), "pbpushserver.LivePushResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PushServerService service

type PushServerServiceClient interface {
	LivePush(ctx context.Context, in *LivePushReq, opts ...grpc.CallOption) (*LivePushResult, error)
}

type pushServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPushServerServiceClient(cc *grpc.ClientConn) PushServerServiceClient {
	return &pushServerServiceClient{cc}
}

func (c *pushServerServiceClient) LivePush(ctx context.Context, in *LivePushReq, opts ...grpc.CallOption) (*LivePushResult, error) {
	out := new(LivePushResult)
	err := grpc.Invoke(ctx, "/pbpushserver.PushServerService/LivePush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PushServerService service

type PushServerServiceServer interface {
	LivePush(context.Context, *LivePushReq) (*LivePushResult, error)
}

func RegisterPushServerServiceServer(s *grpc.Server, srv PushServerServiceServer) {
	s.RegisterService(&_PushServerService_serviceDesc, srv)
}

func _PushServerService_LivePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivePushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServerServiceServer).LivePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbpushserver.PushServerService/LivePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServerServiceServer).LivePush(ctx, req.(*LivePushReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PushServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbpushserver.PushServerService",
	HandlerType: (*PushServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LivePush",
			Handler:    _PushServerService_LivePush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/pushserver/pushserver.proto",
}

func (m *LivePushReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LivePushReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		dAtA2 := make([]byte, len(m.UserIds)*10)
		var j1 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintPushserver(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.SelfId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPushserver(dAtA, i, uint64(m.SelfId))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPushserver(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPushserver(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *LivePushResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LivePushResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintPushserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LivePushReq) Size() (n int) {
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovPushserver(uint64(e))
		}
		n += 1 + sovPushserver(uint64(l)) + l
	}
	if m.SelfId != 0 {
		n += 1 + sovPushserver(uint64(m.SelfId))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovPushserver(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPushserver(uint64(m.Type))
	}
	return n
}

func (m *LivePushResult) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func sovPushserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPushserver(x uint64) (n int) {
	return sovPushserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LivePushReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LivePushReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LivePushReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPushserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPushserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPushserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPushserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPushserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LivePushResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LivePushResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LivePushResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPushserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPushserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPushserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPushserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPushserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPushserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPushserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPushserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPushserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPushserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/pushserver/pushserver.proto", fileDescriptorPushserver)
}

var fileDescriptorPushserver = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x50, 0x4d, 0x4a, 0xc4, 0x30,
	0x18, 0x35, 0xce, 0x4f, 0x6b, 0x1c, 0x04, 0xb3, 0xb1, 0x23, 0x52, 0x4a, 0x57, 0xc5, 0x45, 0x06,
	0xf4, 0x02, 0x22, 0xb8, 0x18, 0x70, 0x21, 0x71, 0xe7, 0x66, 0x68, 0xd3, 0xaf, 0x36, 0x50, 0x6d,
	0xcc, 0x97, 0x0c, 0x7a, 0x43, 0x97, 0x1e, 0x41, 0x7a, 0x12, 0x49, 0x64, 0x98, 0x6e, 0x66, 0x13,
	0xde, 0x1f, 0x79, 0x79, 0xa1, 0x77, 0xaf, 0xca, 0x76, 0x65, 0xc5, 0x65, 0x5b, 0x5a, 0x04, 0xb3,
	0x05, 0xc3, 0xd5, 0xdb, 0x4a, 0xbd, 0x5b, 0x30, 0x4d, 0x29, 0x41, 0x9b, 0xbe, 0x72, 0xcd, 0x4a,
	0x3b, 0x6c, 0xff, 0xdd, 0x11, 0xe4, 0xda, 0xf4, 0xb6, 0x67, 0x0b, 0x5d, 0xed, 0xb5, 0x5c, 0xd1,
	0xd3, 0x47, 0xb5, 0x85, 0x27, 0x87, 0xad, 0x80, 0x0f, 0xb6, 0xa4, 0xb1, 0x43, 0x30, 0x1b, 0x55,
	0x63, 0x42, 0xb2, 0x49, 0x31, 0x13, 0x91, 0xe7, 0xeb, 0x1a, 0xd9, 0x05, 0x8d, 0x10, 0xba, 0x66,
	0xa3, 0xea, 0xe4, 0x38, 0x23, 0xc5, 0x4c, 0xcc, 0x3d, 0x5d, 0xd7, 0x8c, 0xd1, 0xa9, 0x85, 0x4f,
	0x9b, 0x4c, 0x32, 0x52, 0x9c, 0x88, 0x80, 0x83, 0xf6, 0xa5, 0x21, 0x99, 0x86, 0x64, 0xc0, 0xf9,
	0x35, 0x3d, 0xdb, 0x57, 0xa1, 0xeb, 0x2c, 0x4b, 0x68, 0x84, 0x4e, 0x4a, 0x40, 0x5f, 0x46, 0x8a,
	0x58, 0xec, 0xe8, 0xcd, 0x0b, 0x3d, 0xf7, 0xb9, 0xe7, 0xf0, 0x48, 0x7f, 0x2a, 0x09, 0xec, 0x81,
	0xc6, 0xbb, 0x0b, 0xd8, 0x92, 0x8f, 0x67, 0xf0, 0xd1, 0x86, 0xcb, 0xab, 0x43, 0x96, 0xef, 0xcc,
	0x8f, 0xee, 0x17, 0xdf, 0x43, 0x4a, 0x7e, 0x86, 0x94, 0xfc, 0x0e, 0x29, 0xa9, 0xe6, 0xe1, 0x57,
	0x6e, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x85, 0xef, 0xfe, 0x62, 0x59, 0x01, 0x00, 0x00,
}
