// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: messagedb.proto

package messagedb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	pbcomm "interfaceprobuf/pbcomm"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageDbClient is the client API for MessageDb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageDbClient interface {
	//=========================================== HeartBeating =========================================================
	// HeartBeating
	HeartBeating(ctx context.Context, in *ReqHeartBeating, opts ...grpc.CallOption) (*ReplyHeartBeating, error)
	//=========================================== UserMsg =========================================================
	// 插入单条 usermsg 内容
	InsertOrUpdateUserMsg(ctx context.Context, in *ReqInsertOrUpdateUserMsg, opts ...grpc.CallOption) (*DialogIsCreated, error)
	// 查询转发消息
	GetForwardUserMsg(ctx context.Context, in *ReqGetForwardUserMsg, opts ...grpc.CallOption) (*ForWardUserMsgList, error)
	// 查询历史消息
	GetUserMsgHistory(ctx context.Context, in *ReqGetUserMsgHistory, opts ...grpc.CallOption) (*UserMsgList, error)
	// 查询用户消息UUID
	GetUserMsgUUID(ctx context.Context, in *ReqGetUserMsgUUID, opts ...grpc.CallOption) (*UUID, error)
	// 查询用户消息 通过 UUID
	GetUserMsgIdByUUID(ctx context.Context, in *ReqGetUserMsgIdByUUID, opts ...grpc.CallOption) (*MsgId, error)
	// 获取 消息UUID数组
	GetUserMsgListByUUIDs(ctx context.Context, in *ReqGetUserMsgListByUUIDs, opts ...grpc.CallOption) (*UserMsgList, error)
	// 删除用户信息
	DeleteUserMsg(ctx context.Context, in *ReqDeleteUserMsg, opts ...grpc.CallOption) (*ReplyNull, error)
	// 批量删除用户信息
	BatchDeleteUserMsg(ctx context.Context, in *ReqBatchDeleteUserMsg, opts ...grpc.CallOption) (*ReplyNull, error)
	// 查询一条用户信息通过ID
	GetOneUserMsgByUserIdAndMsgId(ctx context.Context, in *ReqGetOneUserMsgByUserIdAndMsgId, opts ...grpc.CallOption) (*pbcomm.UserMsg, error)
	// 删除信息
	DeleteUserMsgByUserIdAndWithIdAndEncry(ctx context.Context, in *ReqDeleteUserMsgByUserIdAndWithIdAndEncry, opts ...grpc.CallOption) (*ReplyNull, error)
	// 清除历史  用于清楚历史每次从最底部删除消息 每次删除100条 如果仍然有消息将最新的消息id返回 如没有消息将0返回 count=本次删除的消息条数
	ClearHistory(ctx context.Context, in *ReqClearHistory, opts ...grpc.CallOption) (*MsgIDList, error)
	// 查询打电话消息历史记录
	GetMessageHistoryPageByMedia(ctx context.Context, in *ReqGetMessageHistoryPageByMedia, opts ...grpc.CallOption) (*ReplyGetMessageHistoryPageByMedia, error)
	//=========================================== UserMediaMessageStatistics =========================================================
	// 根据userId、withId、withType、media获取UserMediaMessageStatistics
	GetUserMediaMessageStatisticsByMedia(ctx context.Context, in *ReqGetUserMediaMessageStatisticsByMedia, opts ...grpc.CallOption) (*ReplyGetUserMediaMessageStatisticsByMedia, error)
	// 获取最近操作的对话框 limit 个
	GetLastLimitDialog(ctx context.Context, in *ReqGetLastLimitDialog, opts ...grpc.CallOption) (*ReplyGetLastLimitDialog, error)
	//=========================================== msg_random(发消息去重) =================================================
	// 获取random 状态 如果有则返回true 没有就插入缓存 并且 返回false
	GetRandomStatus(ctx context.Context, in *ReqGetRandomStatus, opts ...grpc.CallOption) (*ReplyGetRandomStatus, error)
	// 设置超级群消息
	SetSuperGroupMsg(ctx context.Context, in *ReqSetSuperGroupMsg, opts ...grpc.CallOption) (*ReplySetSuperGroupMsg, error)
	// 获取超级群消息
	GetSuperGroupMsg(ctx context.Context, in *ReqGetSuperGroupMsg, opts ...grpc.CallOption) (*ReplyGetSuperGroupMsg, error)
	// 设置messagedb.user_dialog.unread_metions_count
	UserDialogSetUnreadMetionsCount(ctx context.Context, in *ReqUserDialogSetUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogSetUnreadMetionsCount, error)
	// 获取messagedb.user_dialog.unread_metions_count
	UserDialogGetUnreadMetionsCount(ctx context.Context, in *ReqUserDialogGetUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogGetUnreadMetionsCount, error)
	// 改变messagedb.user_dialog.unread_metions_count
	UserDialogChangeUnreadMetionsCount(ctx context.Context, in *ReqUserDialogChangeUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogChangeUnreadMetionsCount, error)
	// add for messagedb.user_message_at
	UserMessageAtAdd(ctx context.Context, in *ReqUserMessageAtAdd, opts ...grpc.CallOption) (*ReplyUserMessageAtAdd, error)
	// get for messagedb.user_message_at
	UserMessageAtGet(ctx context.Context, in *ReqUserMessageAtGet, opts ...grpc.CallOption) (*ReplyUserMessageAtGet, error)
	// delete for messagedb.user_message_at
	UserMessageAtDel(ctx context.Context, in *ReqUserMessageAtDel, opts ...grpc.CallOption) (*ReplyUserMessageAtDel, error)
	// GetMessageByMsgIDs 根据 UserID、MsgIDs 查询消息
	GetMessageByMsgIDs(ctx context.Context, in *GetMessageByMsgIDsReq, opts ...grpc.CallOption) (*GetMessageByMsgIDsResp, error)
	//=================================================== search =======================================================
	UpdateMessageMediaUnread(ctx context.Context, in *ReqUpdateMessageMediaUnread, opts ...grpc.CallOption) (*ReplyNull, error)
	GetUserMessageByUserIDRandomID(ctx context.Context, in *ReqGetUserMessageByUserIDRandomID, opts ...grpc.CallOption) (*pbcomm.UserMsg, error)
	SearchMessage(ctx context.Context, in *ReqSearch, opts ...grpc.CallOption) (*ReplySearch, error)
	GetUserMsgByUserIDMsgIDs(ctx context.Context, in *ReqGetUserMsgByUserIDMsgIDs, opts ...grpc.CallOption) (*ReplyGetUserMsgByUserIDMsgIDs, error)
	GetUserMsgByUserIDMsgIDsHotData(ctx context.Context, in *ReqGetUserMsgByUserIDMsgIDsHotData, opts ...grpc.CallOption) (*ReplyGetUserMsgByUserIDMsgIDs, error)
}

type messageDbClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageDbClient(cc grpc.ClientConnInterface) MessageDbClient {
	return &messageDbClient{cc}
}

func (c *messageDbClient) HeartBeating(ctx context.Context, in *ReqHeartBeating, opts ...grpc.CallOption) (*ReplyHeartBeating, error) {
	out := new(ReplyHeartBeating)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/HeartBeating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) InsertOrUpdateUserMsg(ctx context.Context, in *ReqInsertOrUpdateUserMsg, opts ...grpc.CallOption) (*DialogIsCreated, error) {
	out := new(DialogIsCreated)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/InsertOrUpdateUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetForwardUserMsg(ctx context.Context, in *ReqGetForwardUserMsg, opts ...grpc.CallOption) (*ForWardUserMsgList, error) {
	out := new(ForWardUserMsgList)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetForwardUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMsgHistory(ctx context.Context, in *ReqGetUserMsgHistory, opts ...grpc.CallOption) (*UserMsgList, error) {
	out := new(UserMsgList)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserMsgHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMsgUUID(ctx context.Context, in *ReqGetUserMsgUUID, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserMsgUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMsgIdByUUID(ctx context.Context, in *ReqGetUserMsgIdByUUID, opts ...grpc.CallOption) (*MsgId, error) {
	out := new(MsgId)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserMsgIdByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMsgListByUUIDs(ctx context.Context, in *ReqGetUserMsgListByUUIDs, opts ...grpc.CallOption) (*UserMsgList, error) {
	out := new(UserMsgList)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserMsgListByUUIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) DeleteUserMsg(ctx context.Context, in *ReqDeleteUserMsg, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/DeleteUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) BatchDeleteUserMsg(ctx context.Context, in *ReqBatchDeleteUserMsg, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/BatchDeleteUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetOneUserMsgByUserIdAndMsgId(ctx context.Context, in *ReqGetOneUserMsgByUserIdAndMsgId, opts ...grpc.CallOption) (*pbcomm.UserMsg, error) {
	out := new(pbcomm.UserMsg)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetOneUserMsgByUserIdAndMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) DeleteUserMsgByUserIdAndWithIdAndEncry(ctx context.Context, in *ReqDeleteUserMsgByUserIdAndWithIdAndEncry, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/DeleteUserMsgByUserIdAndWithIdAndEncry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) ClearHistory(ctx context.Context, in *ReqClearHistory, opts ...grpc.CallOption) (*MsgIDList, error) {
	out := new(MsgIDList)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/ClearHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetMessageHistoryPageByMedia(ctx context.Context, in *ReqGetMessageHistoryPageByMedia, opts ...grpc.CallOption) (*ReplyGetMessageHistoryPageByMedia, error) {
	out := new(ReplyGetMessageHistoryPageByMedia)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetMessageHistoryPageByMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMediaMessageStatisticsByMedia(ctx context.Context, in *ReqGetUserMediaMessageStatisticsByMedia, opts ...grpc.CallOption) (*ReplyGetUserMediaMessageStatisticsByMedia, error) {
	out := new(ReplyGetUserMediaMessageStatisticsByMedia)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserMediaMessageStatisticsByMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetLastLimitDialog(ctx context.Context, in *ReqGetLastLimitDialog, opts ...grpc.CallOption) (*ReplyGetLastLimitDialog, error) {
	out := new(ReplyGetLastLimitDialog)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetLastLimitDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetRandomStatus(ctx context.Context, in *ReqGetRandomStatus, opts ...grpc.CallOption) (*ReplyGetRandomStatus, error) {
	out := new(ReplyGetRandomStatus)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetRandomStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) SetSuperGroupMsg(ctx context.Context, in *ReqSetSuperGroupMsg, opts ...grpc.CallOption) (*ReplySetSuperGroupMsg, error) {
	out := new(ReplySetSuperGroupMsg)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/SetSuperGroupMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetSuperGroupMsg(ctx context.Context, in *ReqGetSuperGroupMsg, opts ...grpc.CallOption) (*ReplyGetSuperGroupMsg, error) {
	out := new(ReplyGetSuperGroupMsg)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetSuperGroupMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserDialogSetUnreadMetionsCount(ctx context.Context, in *ReqUserDialogSetUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogSetUnreadMetionsCount, error) {
	out := new(ReplyUserDialogSetUnreadMetionsCount)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UserDialogSetUnreadMetionsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserDialogGetUnreadMetionsCount(ctx context.Context, in *ReqUserDialogGetUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogGetUnreadMetionsCount, error) {
	out := new(ReplyUserDialogGetUnreadMetionsCount)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UserDialogGetUnreadMetionsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserDialogChangeUnreadMetionsCount(ctx context.Context, in *ReqUserDialogChangeUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogChangeUnreadMetionsCount, error) {
	out := new(ReplyUserDialogChangeUnreadMetionsCount)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UserDialogChangeUnreadMetionsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserMessageAtAdd(ctx context.Context, in *ReqUserMessageAtAdd, opts ...grpc.CallOption) (*ReplyUserMessageAtAdd, error) {
	out := new(ReplyUserMessageAtAdd)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UserMessageAtAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserMessageAtGet(ctx context.Context, in *ReqUserMessageAtGet, opts ...grpc.CallOption) (*ReplyUserMessageAtGet, error) {
	out := new(ReplyUserMessageAtGet)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UserMessageAtGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserMessageAtDel(ctx context.Context, in *ReqUserMessageAtDel, opts ...grpc.CallOption) (*ReplyUserMessageAtDel, error) {
	out := new(ReplyUserMessageAtDel)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UserMessageAtDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetMessageByMsgIDs(ctx context.Context, in *GetMessageByMsgIDsReq, opts ...grpc.CallOption) (*GetMessageByMsgIDsResp, error) {
	out := new(GetMessageByMsgIDsResp)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetMessageByMsgIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateMessageMediaUnread(ctx context.Context, in *ReqUpdateMessageMediaUnread, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UpdateMessageMediaUnread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMessageByUserIDRandomID(ctx context.Context, in *ReqGetUserMessageByUserIDRandomID, opts ...grpc.CallOption) (*pbcomm.UserMsg, error) {
	out := new(pbcomm.UserMsg)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserMessageByUserIDRandomID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) SearchMessage(ctx context.Context, in *ReqSearch, opts ...grpc.CallOption) (*ReplySearch, error) {
	out := new(ReplySearch)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/SearchMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMsgByUserIDMsgIDs(ctx context.Context, in *ReqGetUserMsgByUserIDMsgIDs, opts ...grpc.CallOption) (*ReplyGetUserMsgByUserIDMsgIDs, error) {
	out := new(ReplyGetUserMsgByUserIDMsgIDs)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserMsgByUserIDMsgIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMsgByUserIDMsgIDsHotData(ctx context.Context, in *ReqGetUserMsgByUserIDMsgIDsHotData, opts ...grpc.CallOption) (*ReplyGetUserMsgByUserIDMsgIDs, error) {
	out := new(ReplyGetUserMsgByUserIDMsgIDs)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserMsgByUserIDMsgIDsHotData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageDbServer is the server API for MessageDb service.
// All implementations must embed UnimplementedMessageDbServer
// for forward compatibility
type MessageDbServer interface {
	//=========================================== HeartBeating =========================================================
	// HeartBeating
	HeartBeating(context.Context, *ReqHeartBeating) (*ReplyHeartBeating, error)
	//=========================================== UserMsg =========================================================
	// 插入单条 usermsg 内容
	InsertOrUpdateUserMsg(context.Context, *ReqInsertOrUpdateUserMsg) (*DialogIsCreated, error)
	// 查询转发消息
	GetForwardUserMsg(context.Context, *ReqGetForwardUserMsg) (*ForWardUserMsgList, error)
	// 查询历史消息
	GetUserMsgHistory(context.Context, *ReqGetUserMsgHistory) (*UserMsgList, error)
	// 查询用户消息UUID
	GetUserMsgUUID(context.Context, *ReqGetUserMsgUUID) (*UUID, error)
	// 查询用户消息 通过 UUID
	GetUserMsgIdByUUID(context.Context, *ReqGetUserMsgIdByUUID) (*MsgId, error)
	// 获取 消息UUID数组
	GetUserMsgListByUUIDs(context.Context, *ReqGetUserMsgListByUUIDs) (*UserMsgList, error)
	// 删除用户信息
	DeleteUserMsg(context.Context, *ReqDeleteUserMsg) (*ReplyNull, error)
	// 批量删除用户信息
	BatchDeleteUserMsg(context.Context, *ReqBatchDeleteUserMsg) (*ReplyNull, error)
	// 查询一条用户信息通过ID
	GetOneUserMsgByUserIdAndMsgId(context.Context, *ReqGetOneUserMsgByUserIdAndMsgId) (*pbcomm.UserMsg, error)
	// 删除信息
	DeleteUserMsgByUserIdAndWithIdAndEncry(context.Context, *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) (*ReplyNull, error)
	// 清除历史  用于清楚历史每次从最底部删除消息 每次删除100条 如果仍然有消息将最新的消息id返回 如没有消息将0返回 count=本次删除的消息条数
	ClearHistory(context.Context, *ReqClearHistory) (*MsgIDList, error)
	// 查询打电话消息历史记录
	GetMessageHistoryPageByMedia(context.Context, *ReqGetMessageHistoryPageByMedia) (*ReplyGetMessageHistoryPageByMedia, error)
	//=========================================== UserMediaMessageStatistics =========================================================
	// 根据userId、withId、withType、media获取UserMediaMessageStatistics
	GetUserMediaMessageStatisticsByMedia(context.Context, *ReqGetUserMediaMessageStatisticsByMedia) (*ReplyGetUserMediaMessageStatisticsByMedia, error)
	// 获取最近操作的对话框 limit 个
	GetLastLimitDialog(context.Context, *ReqGetLastLimitDialog) (*ReplyGetLastLimitDialog, error)
	//=========================================== msg_random(发消息去重) =================================================
	// 获取random 状态 如果有则返回true 没有就插入缓存 并且 返回false
	GetRandomStatus(context.Context, *ReqGetRandomStatus) (*ReplyGetRandomStatus, error)
	// 设置超级群消息
	SetSuperGroupMsg(context.Context, *ReqSetSuperGroupMsg) (*ReplySetSuperGroupMsg, error)
	// 获取超级群消息
	GetSuperGroupMsg(context.Context, *ReqGetSuperGroupMsg) (*ReplyGetSuperGroupMsg, error)
	// 设置messagedb.user_dialog.unread_metions_count
	UserDialogSetUnreadMetionsCount(context.Context, *ReqUserDialogSetUnreadMetionsCount) (*ReplyUserDialogSetUnreadMetionsCount, error)
	// 获取messagedb.user_dialog.unread_metions_count
	UserDialogGetUnreadMetionsCount(context.Context, *ReqUserDialogGetUnreadMetionsCount) (*ReplyUserDialogGetUnreadMetionsCount, error)
	// 改变messagedb.user_dialog.unread_metions_count
	UserDialogChangeUnreadMetionsCount(context.Context, *ReqUserDialogChangeUnreadMetionsCount) (*ReplyUserDialogChangeUnreadMetionsCount, error)
	// add for messagedb.user_message_at
	UserMessageAtAdd(context.Context, *ReqUserMessageAtAdd) (*ReplyUserMessageAtAdd, error)
	// get for messagedb.user_message_at
	UserMessageAtGet(context.Context, *ReqUserMessageAtGet) (*ReplyUserMessageAtGet, error)
	// delete for messagedb.user_message_at
	UserMessageAtDel(context.Context, *ReqUserMessageAtDel) (*ReplyUserMessageAtDel, error)
	// GetMessageByMsgIDs 根据 UserID、MsgIDs 查询消息
	GetMessageByMsgIDs(context.Context, *GetMessageByMsgIDsReq) (*GetMessageByMsgIDsResp, error)
	//=================================================== search =======================================================
	UpdateMessageMediaUnread(context.Context, *ReqUpdateMessageMediaUnread) (*ReplyNull, error)
	GetUserMessageByUserIDRandomID(context.Context, *ReqGetUserMessageByUserIDRandomID) (*pbcomm.UserMsg, error)
	SearchMessage(context.Context, *ReqSearch) (*ReplySearch, error)
	GetUserMsgByUserIDMsgIDs(context.Context, *ReqGetUserMsgByUserIDMsgIDs) (*ReplyGetUserMsgByUserIDMsgIDs, error)
	GetUserMsgByUserIDMsgIDsHotData(context.Context, *ReqGetUserMsgByUserIDMsgIDsHotData) (*ReplyGetUserMsgByUserIDMsgIDs, error)
	mustEmbedUnimplementedMessageDbServer()
}

// UnimplementedMessageDbServer must be embedded to have forward compatible implementations.
type UnimplementedMessageDbServer struct {
}

func (UnimplementedMessageDbServer) HeartBeating(context.Context, *ReqHeartBeating) (*ReplyHeartBeating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeating not implemented")
}
func (UnimplementedMessageDbServer) InsertOrUpdateUserMsg(context.Context, *ReqInsertOrUpdateUserMsg) (*DialogIsCreated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOrUpdateUserMsg not implemented")
}
func (UnimplementedMessageDbServer) GetForwardUserMsg(context.Context, *ReqGetForwardUserMsg) (*ForWardUserMsgList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForwardUserMsg not implemented")
}
func (UnimplementedMessageDbServer) GetUserMsgHistory(context.Context, *ReqGetUserMsgHistory) (*UserMsgList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMsgHistory not implemented")
}
func (UnimplementedMessageDbServer) GetUserMsgUUID(context.Context, *ReqGetUserMsgUUID) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMsgUUID not implemented")
}
func (UnimplementedMessageDbServer) GetUserMsgIdByUUID(context.Context, *ReqGetUserMsgIdByUUID) (*MsgId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMsgIdByUUID not implemented")
}
func (UnimplementedMessageDbServer) GetUserMsgListByUUIDs(context.Context, *ReqGetUserMsgListByUUIDs) (*UserMsgList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMsgListByUUIDs not implemented")
}
func (UnimplementedMessageDbServer) DeleteUserMsg(context.Context, *ReqDeleteUserMsg) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMsg not implemented")
}
func (UnimplementedMessageDbServer) BatchDeleteUserMsg(context.Context, *ReqBatchDeleteUserMsg) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteUserMsg not implemented")
}
func (UnimplementedMessageDbServer) GetOneUserMsgByUserIdAndMsgId(context.Context, *ReqGetOneUserMsgByUserIdAndMsgId) (*pbcomm.UserMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneUserMsgByUserIdAndMsgId not implemented")
}
func (UnimplementedMessageDbServer) DeleteUserMsgByUserIdAndWithIdAndEncry(context.Context, *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMsgByUserIdAndWithIdAndEncry not implemented")
}
func (UnimplementedMessageDbServer) ClearHistory(context.Context, *ReqClearHistory) (*MsgIDList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearHistory not implemented")
}
func (UnimplementedMessageDbServer) GetMessageHistoryPageByMedia(context.Context, *ReqGetMessageHistoryPageByMedia) (*ReplyGetMessageHistoryPageByMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageHistoryPageByMedia not implemented")
}
func (UnimplementedMessageDbServer) GetUserMediaMessageStatisticsByMedia(context.Context, *ReqGetUserMediaMessageStatisticsByMedia) (*ReplyGetUserMediaMessageStatisticsByMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMediaMessageStatisticsByMedia not implemented")
}
func (UnimplementedMessageDbServer) GetLastLimitDialog(context.Context, *ReqGetLastLimitDialog) (*ReplyGetLastLimitDialog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastLimitDialog not implemented")
}
func (UnimplementedMessageDbServer) GetRandomStatus(context.Context, *ReqGetRandomStatus) (*ReplyGetRandomStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomStatus not implemented")
}
func (UnimplementedMessageDbServer) SetSuperGroupMsg(context.Context, *ReqSetSuperGroupMsg) (*ReplySetSuperGroupMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSuperGroupMsg not implemented")
}
func (UnimplementedMessageDbServer) GetSuperGroupMsg(context.Context, *ReqGetSuperGroupMsg) (*ReplyGetSuperGroupMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuperGroupMsg not implemented")
}
func (UnimplementedMessageDbServer) UserDialogSetUnreadMetionsCount(context.Context, *ReqUserDialogSetUnreadMetionsCount) (*ReplyUserDialogSetUnreadMetionsCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDialogSetUnreadMetionsCount not implemented")
}
func (UnimplementedMessageDbServer) UserDialogGetUnreadMetionsCount(context.Context, *ReqUserDialogGetUnreadMetionsCount) (*ReplyUserDialogGetUnreadMetionsCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDialogGetUnreadMetionsCount not implemented")
}
func (UnimplementedMessageDbServer) UserDialogChangeUnreadMetionsCount(context.Context, *ReqUserDialogChangeUnreadMetionsCount) (*ReplyUserDialogChangeUnreadMetionsCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDialogChangeUnreadMetionsCount not implemented")
}
func (UnimplementedMessageDbServer) UserMessageAtAdd(context.Context, *ReqUserMessageAtAdd) (*ReplyUserMessageAtAdd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMessageAtAdd not implemented")
}
func (UnimplementedMessageDbServer) UserMessageAtGet(context.Context, *ReqUserMessageAtGet) (*ReplyUserMessageAtGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMessageAtGet not implemented")
}
func (UnimplementedMessageDbServer) UserMessageAtDel(context.Context, *ReqUserMessageAtDel) (*ReplyUserMessageAtDel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMessageAtDel not implemented")
}
func (UnimplementedMessageDbServer) GetMessageByMsgIDs(context.Context, *GetMessageByMsgIDsReq) (*GetMessageByMsgIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageByMsgIDs not implemented")
}
func (UnimplementedMessageDbServer) UpdateMessageMediaUnread(context.Context, *ReqUpdateMessageMediaUnread) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessageMediaUnread not implemented")
}
func (UnimplementedMessageDbServer) GetUserMessageByUserIDRandomID(context.Context, *ReqGetUserMessageByUserIDRandomID) (*pbcomm.UserMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMessageByUserIDRandomID not implemented")
}
func (UnimplementedMessageDbServer) SearchMessage(context.Context, *ReqSearch) (*ReplySearch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMessage not implemented")
}
func (UnimplementedMessageDbServer) GetUserMsgByUserIDMsgIDs(context.Context, *ReqGetUserMsgByUserIDMsgIDs) (*ReplyGetUserMsgByUserIDMsgIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMsgByUserIDMsgIDs not implemented")
}
func (UnimplementedMessageDbServer) GetUserMsgByUserIDMsgIDsHotData(context.Context, *ReqGetUserMsgByUserIDMsgIDsHotData) (*ReplyGetUserMsgByUserIDMsgIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMsgByUserIDMsgIDsHotData not implemented")
}
func (UnimplementedMessageDbServer) mustEmbedUnimplementedMessageDbServer() {}

// UnsafeMessageDbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageDbServer will
// result in compilation errors.
type UnsafeMessageDbServer interface {
	mustEmbedUnimplementedMessageDbServer()
}

func RegisterMessageDbServer(s grpc.ServiceRegistrar, srv MessageDbServer) {
	s.RegisterService(&MessageDb_ServiceDesc, srv)
}

func _MessageDb_HeartBeating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHeartBeating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).HeartBeating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/HeartBeating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).HeartBeating(ctx, req.(*ReqHeartBeating))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_InsertOrUpdateUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertOrUpdateUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).InsertOrUpdateUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/InsertOrUpdateUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).InsertOrUpdateUserMsg(ctx, req.(*ReqInsertOrUpdateUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetForwardUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetForwardUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetForwardUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetForwardUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetForwardUserMsg(ctx, req.(*ReqGetForwardUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMsgHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMsgHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMsgHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMsgHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMsgHistory(ctx, req.(*ReqGetUserMsgHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMsgUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMsgUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMsgUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMsgUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMsgUUID(ctx, req.(*ReqGetUserMsgUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMsgIdByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMsgIdByUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMsgIdByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMsgIdByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMsgIdByUUID(ctx, req.(*ReqGetUserMsgIdByUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMsgListByUUIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMsgListByUUIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMsgListByUUIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMsgListByUUIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMsgListByUUIDs(ctx, req.(*ReqGetUserMsgListByUUIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_DeleteUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).DeleteUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/DeleteUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).DeleteUserMsg(ctx, req.(*ReqDeleteUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_BatchDeleteUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatchDeleteUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).BatchDeleteUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/BatchDeleteUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).BatchDeleteUserMsg(ctx, req.(*ReqBatchDeleteUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetOneUserMsgByUserIdAndMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetOneUserMsgByUserIdAndMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetOneUserMsgByUserIdAndMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetOneUserMsgByUserIdAndMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetOneUserMsgByUserIdAndMsgId(ctx, req.(*ReqGetOneUserMsgByUserIdAndMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_DeleteUserMsgByUserIdAndWithIdAndEncry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserMsgByUserIdAndWithIdAndEncry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).DeleteUserMsgByUserIdAndWithIdAndEncry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/DeleteUserMsgByUserIdAndWithIdAndEncry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).DeleteUserMsgByUserIdAndWithIdAndEncry(ctx, req.(*ReqDeleteUserMsgByUserIdAndWithIdAndEncry))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_ClearHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqClearHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).ClearHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/ClearHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).ClearHistory(ctx, req.(*ReqClearHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetMessageHistoryPageByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageHistoryPageByMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetMessageHistoryPageByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetMessageHistoryPageByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetMessageHistoryPageByMedia(ctx, req.(*ReqGetMessageHistoryPageByMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMediaMessageStatisticsByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMediaMessageStatisticsByMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMediaMessageStatisticsByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMediaMessageStatisticsByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMediaMessageStatisticsByMedia(ctx, req.(*ReqGetUserMediaMessageStatisticsByMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetLastLimitDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetLastLimitDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetLastLimitDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetLastLimitDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetLastLimitDialog(ctx, req.(*ReqGetLastLimitDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetRandomStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetRandomStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetRandomStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetRandomStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetRandomStatus(ctx, req.(*ReqGetRandomStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_SetSuperGroupMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetSuperGroupMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).SetSuperGroupMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/SetSuperGroupMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).SetSuperGroupMsg(ctx, req.(*ReqSetSuperGroupMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetSuperGroupMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetSuperGroupMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetSuperGroupMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetSuperGroupMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetSuperGroupMsg(ctx, req.(*ReqGetSuperGroupMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserDialogSetUnreadMetionsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserDialogSetUnreadMetionsCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserDialogSetUnreadMetionsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserDialogSetUnreadMetionsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserDialogSetUnreadMetionsCount(ctx, req.(*ReqUserDialogSetUnreadMetionsCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserDialogGetUnreadMetionsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserDialogGetUnreadMetionsCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserDialogGetUnreadMetionsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserDialogGetUnreadMetionsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserDialogGetUnreadMetionsCount(ctx, req.(*ReqUserDialogGetUnreadMetionsCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserDialogChangeUnreadMetionsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserDialogChangeUnreadMetionsCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserDialogChangeUnreadMetionsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserDialogChangeUnreadMetionsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserDialogChangeUnreadMetionsCount(ctx, req.(*ReqUserDialogChangeUnreadMetionsCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserMessageAtAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserMessageAtAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserMessageAtAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserMessageAtAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserMessageAtAdd(ctx, req.(*ReqUserMessageAtAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserMessageAtGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserMessageAtGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserMessageAtGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserMessageAtGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserMessageAtGet(ctx, req.(*ReqUserMessageAtGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserMessageAtDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserMessageAtDel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserMessageAtDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserMessageAtDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserMessageAtDel(ctx, req.(*ReqUserMessageAtDel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetMessageByMsgIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageByMsgIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetMessageByMsgIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetMessageByMsgIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetMessageByMsgIDs(ctx, req.(*GetMessageByMsgIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateMessageMediaUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateMessageMediaUnread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateMessageMediaUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateMessageMediaUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateMessageMediaUnread(ctx, req.(*ReqUpdateMessageMediaUnread))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMessageByUserIDRandomID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMessageByUserIDRandomID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMessageByUserIDRandomID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMessageByUserIDRandomID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMessageByUserIDRandomID(ctx, req.(*ReqGetUserMessageByUserIDRandomID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_SearchMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).SearchMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/SearchMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).SearchMessage(ctx, req.(*ReqSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMsgByUserIDMsgIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMsgByUserIDMsgIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMsgByUserIDMsgIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMsgByUserIDMsgIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMsgByUserIDMsgIDs(ctx, req.(*ReqGetUserMsgByUserIDMsgIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMsgByUserIDMsgIDsHotData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMsgByUserIDMsgIDsHotData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMsgByUserIDMsgIDsHotData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMsgByUserIDMsgIDsHotData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMsgByUserIDMsgIDsHotData(ctx, req.(*ReqGetUserMsgByUserIDMsgIDsHotData))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageDb_ServiceDesc is the grpc.ServiceDesc for MessageDb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageDb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messagedb.MessageDb",
	HandlerType: (*MessageDbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeating",
			Handler:    _MessageDb_HeartBeating_Handler,
		},
		{
			MethodName: "InsertOrUpdateUserMsg",
			Handler:    _MessageDb_InsertOrUpdateUserMsg_Handler,
		},
		{
			MethodName: "GetForwardUserMsg",
			Handler:    _MessageDb_GetForwardUserMsg_Handler,
		},
		{
			MethodName: "GetUserMsgHistory",
			Handler:    _MessageDb_GetUserMsgHistory_Handler,
		},
		{
			MethodName: "GetUserMsgUUID",
			Handler:    _MessageDb_GetUserMsgUUID_Handler,
		},
		{
			MethodName: "GetUserMsgIdByUUID",
			Handler:    _MessageDb_GetUserMsgIdByUUID_Handler,
		},
		{
			MethodName: "GetUserMsgListByUUIDs",
			Handler:    _MessageDb_GetUserMsgListByUUIDs_Handler,
		},
		{
			MethodName: "DeleteUserMsg",
			Handler:    _MessageDb_DeleteUserMsg_Handler,
		},
		{
			MethodName: "BatchDeleteUserMsg",
			Handler:    _MessageDb_BatchDeleteUserMsg_Handler,
		},
		{
			MethodName: "GetOneUserMsgByUserIdAndMsgId",
			Handler:    _MessageDb_GetOneUserMsgByUserIdAndMsgId_Handler,
		},
		{
			MethodName: "DeleteUserMsgByUserIdAndWithIdAndEncry",
			Handler:    _MessageDb_DeleteUserMsgByUserIdAndWithIdAndEncry_Handler,
		},
		{
			MethodName: "ClearHistory",
			Handler:    _MessageDb_ClearHistory_Handler,
		},
		{
			MethodName: "GetMessageHistoryPageByMedia",
			Handler:    _MessageDb_GetMessageHistoryPageByMedia_Handler,
		},
		{
			MethodName: "GetUserMediaMessageStatisticsByMedia",
			Handler:    _MessageDb_GetUserMediaMessageStatisticsByMedia_Handler,
		},
		{
			MethodName: "GetLastLimitDialog",
			Handler:    _MessageDb_GetLastLimitDialog_Handler,
		},
		{
			MethodName: "GetRandomStatus",
			Handler:    _MessageDb_GetRandomStatus_Handler,
		},
		{
			MethodName: "SetSuperGroupMsg",
			Handler:    _MessageDb_SetSuperGroupMsg_Handler,
		},
		{
			MethodName: "GetSuperGroupMsg",
			Handler:    _MessageDb_GetSuperGroupMsg_Handler,
		},
		{
			MethodName: "UserDialogSetUnreadMetionsCount",
			Handler:    _MessageDb_UserDialogSetUnreadMetionsCount_Handler,
		},
		{
			MethodName: "UserDialogGetUnreadMetionsCount",
			Handler:    _MessageDb_UserDialogGetUnreadMetionsCount_Handler,
		},
		{
			MethodName: "UserDialogChangeUnreadMetionsCount",
			Handler:    _MessageDb_UserDialogChangeUnreadMetionsCount_Handler,
		},
		{
			MethodName: "UserMessageAtAdd",
			Handler:    _MessageDb_UserMessageAtAdd_Handler,
		},
		{
			MethodName: "UserMessageAtGet",
			Handler:    _MessageDb_UserMessageAtGet_Handler,
		},
		{
			MethodName: "UserMessageAtDel",
			Handler:    _MessageDb_UserMessageAtDel_Handler,
		},
		{
			MethodName: "GetMessageByMsgIDs",
			Handler:    _MessageDb_GetMessageByMsgIDs_Handler,
		},
		{
			MethodName: "UpdateMessageMediaUnread",
			Handler:    _MessageDb_UpdateMessageMediaUnread_Handler,
		},
		{
			MethodName: "GetUserMessageByUserIDRandomID",
			Handler:    _MessageDb_GetUserMessageByUserIDRandomID_Handler,
		},
		{
			MethodName: "SearchMessage",
			Handler:    _MessageDb_SearchMessage_Handler,
		},
		{
			MethodName: "GetUserMsgByUserIDMsgIDs",
			Handler:    _MessageDb_GetUserMsgByUserIDMsgIDs_Handler,
		},
		{
			MethodName: "GetUserMsgByUserIDMsgIDsHotData",
			Handler:    _MessageDb_GetUserMsgByUserIDMsgIDsHotData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messagedb.proto",
}
