// protoc --gogofast_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: messagedb.proto

package messagedb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HeartBeating int32

const (
	HeartBeating_RpcExcept      HeartBeating = 0 // 包异常
	HeartBeating_PackageType    HeartBeating = 1 // 包类型
	HeartBeating_Identification HeartBeating = 2 // 服务标识
	HeartBeating_ResultSuccess  HeartBeating = 3 // 返回成功
)

// Enum value maps for HeartBeating.
var (
	HeartBeating_name = map[int32]string{
		0: "RpcExcept",
		1: "PackageType",
		2: "Identification",
		3: "ResultSuccess",
	}
	HeartBeating_value = map[string]int32{
		"RpcExcept":      0,
		"PackageType":    1,
		"Identification": 2,
		"ResultSuccess":  3,
	}
)

func (x HeartBeating) Enum() *HeartBeating {
	p := new(HeartBeating)
	*p = x
	return p
}

func (x HeartBeating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeartBeating) Descriptor() protoreflect.EnumDescriptor {
	return file_messagedb_proto_enumTypes[0].Descriptor()
}

func (HeartBeating) Type() protoreflect.EnumType {
	return &file_messagedb_proto_enumTypes[0]
}

func (x HeartBeating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeartBeating.Descriptor instead.
func (HeartBeating) EnumDescriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{0}
}

type GetMessageByMsgIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int32   `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	MsgIDs []int32 `protobuf:"varint,2,rep,packed,name=MsgIDs,proto3" json:"MsgIDs,omitempty"`
}

func (x *GetMessageByMsgIDsReq) Reset() {
	*x = GetMessageByMsgIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageByMsgIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageByMsgIDsReq) ProtoMessage() {}

func (x *GetMessageByMsgIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageByMsgIDsReq.ProtoReflect.Descriptor instead.
func (*GetMessageByMsgIDsReq) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{0}
}

func (x *GetMessageByMsgIDsReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GetMessageByMsgIDsReq) GetMsgIDs() []int32 {
	if x != nil {
		return x.MsgIDs
	}
	return nil
}

type GetMessageByMsgIDsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*pbcomm.UserMsg `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
}

func (x *GetMessageByMsgIDsResp) Reset() {
	*x = GetMessageByMsgIDsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageByMsgIDsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageByMsgIDsResp) ProtoMessage() {}

func (x *GetMessageByMsgIDsResp) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageByMsgIDsResp.ProtoReflect.Descriptor instead.
func (*GetMessageByMsgIDsResp) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{1}
}

func (x *GetMessageByMsgIDsResp) GetMessages() []*pbcomm.UserMsg {
	if x != nil {
		return x.Messages
	}
	return nil
}

// 返回空结构体
type ReplyNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplyNull) Reset() {
	*x = ReplyNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyNull) ProtoMessage() {}

func (x *ReplyNull) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyNull.ProtoReflect.Descriptor instead.
func (*ReplyNull) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{2}
}

type ReplyErr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode uint32 `protobuf:"varint,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"` // 錯誤碼 200 成功 201-300 緩存錯誤 301-400 database錯誤
	ErrMsg  string `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`    // 錯誤信息描述
}

func (x *ReplyErr) Reset() {
	*x = ReplyErr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyErr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyErr) ProtoMessage() {}

func (x *ReplyErr) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyErr.ProtoReflect.Descriptor instead.
func (*ReplyErr) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{3}
}

func (x *ReplyErr) GetErrCode() uint32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ReplyErr) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type ReqHeartBeating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           HeartBeating `protobuf:"varint,1,opt,name=Type,proto3,enum=messagedb.HeartBeating" json:"Type,omitempty"`                     // 包类型
	Identification HeartBeating `protobuf:"varint,2,opt,name=Identification,proto3,enum=messagedb.HeartBeating" json:"Identification,omitempty"` // 服务标识
}

func (x *ReqHeartBeating) Reset() {
	*x = ReqHeartBeating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqHeartBeating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqHeartBeating) ProtoMessage() {}

func (x *ReqHeartBeating) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqHeartBeating.ProtoReflect.Descriptor instead.
func (*ReqHeartBeating) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{4}
}

func (x *ReqHeartBeating) GetType() HeartBeating {
	if x != nil {
		return x.Type
	}
	return HeartBeating_RpcExcept
}

func (x *ReqHeartBeating) GetIdentification() HeartBeating {
	if x != nil {
		return x.Identification
	}
	return HeartBeating_RpcExcept
}

type ReplyHeartBeating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   HeartBeating `protobuf:"varint,1,opt,name=Type,proto3,enum=messagedb.HeartBeating" json:"Type,omitempty"`     // 包类型
	Result HeartBeating `protobuf:"varint,2,opt,name=Result,proto3,enum=messagedb.HeartBeating" json:"Result,omitempty"` // 服务标识
}

func (x *ReplyHeartBeating) Reset() {
	*x = ReplyHeartBeating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyHeartBeating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyHeartBeating) ProtoMessage() {}

func (x *ReplyHeartBeating) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyHeartBeating.ProtoReflect.Descriptor instead.
func (*ReplyHeartBeating) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{5}
}

func (x *ReplyHeartBeating) GetType() HeartBeating {
	if x != nil {
		return x.Type
	}
	return HeartBeating_RpcExcept
}

func (x *ReplyHeartBeating) GetResult() HeartBeating {
	if x != nil {
		return x.Result
	}
	return HeartBeating_RpcExcept
}

type ReqInsertOrUpdateUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsg *pbcomm.UserMsg `protobuf:"bytes,1,opt,name=UserMsg,proto3" json:"UserMsg,omitempty"` // 聊天消息
	Debug   *pbcomm.Debug   `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`     // 日志前缀信息
}

func (x *ReqInsertOrUpdateUserMsg) Reset() {
	*x = ReqInsertOrUpdateUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqInsertOrUpdateUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqInsertOrUpdateUserMsg) ProtoMessage() {}

func (x *ReqInsertOrUpdateUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqInsertOrUpdateUserMsg.ProtoReflect.Descriptor instead.
func (*ReqInsertOrUpdateUserMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{6}
}

func (x *ReqInsertOrUpdateUserMsg) GetUserMsg() *pbcomm.UserMsg {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

func (x *ReqInsertOrUpdateUserMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type DialogIsCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DialogIdCreated bool `protobuf:"varint,1,opt,name=DialogIdCreated,proto3" json:"DialogIdCreated,omitempty"` // 是否新建的dialog
}

func (x *DialogIsCreated) Reset() {
	*x = DialogIsCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialogIsCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialogIsCreated) ProtoMessage() {}

func (x *DialogIsCreated) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialogIsCreated.ProtoReflect.Descriptor instead.
func (*DialogIsCreated) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{7}
}

func (x *DialogIsCreated) GetDialogIdCreated() bool {
	if x != nil {
		return x.DialogIdCreated
	}
	return false
}

type ReqGetForwardUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息交互方ID
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"` // 对话框类型
	Encry      int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`           // 是否加密 0: 不加密 1：加密
	MsgIds     []int32       `protobuf:"varint,5,rep,packed,name=MsgIds,proto3" json:"MsgIds,omitempty"`  // 消息ID集合
	Debug      *pbcomm.Debug `protobuf:"bytes,11,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqGetForwardUserMsg) Reset() {
	*x = ReqGetForwardUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetForwardUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetForwardUserMsg) ProtoMessage() {}

func (x *ReqGetForwardUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetForwardUserMsg.ProtoReflect.Descriptor instead.
func (*ReqGetForwardUserMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{8}
}

func (x *ReqGetForwardUserMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetForwardUserMsg) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqGetForwardUserMsg) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *ReqGetForwardUserMsg) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqGetForwardUserMsg) GetMsgIds() []int32 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

func (x *ReqGetForwardUserMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ForWardUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date        int32    `protobuf:"varint,1,opt,name=Date,proto3" json:"Date,omitempty"`              // 时间
	Message     string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`         // 消息内容
	Media       int64    `protobuf:"varint,3,opt,name=Media,proto3" json:"Media,omitempty"`            // 媒体id
	MediaData   []byte   `protobuf:"bytes,4,opt,name=MediaData,proto3" json:"MediaData,omitempty"`     // 媒体二进制
	ReplyMarkup []byte   `protobuf:"bytes,5,opt,name=ReplyMarkup,proto3" json:"ReplyMarkup,omitempty"` // 小键盘
	Entities    [][]byte `protobuf:"bytes,6,rep,name=Entities,proto3" json:"Entities,omitempty"`       // 高亮
	FromId      int32    `protobuf:"varint,7,opt,name=FromId,proto3" json:"FromId,omitempty"`          // 发送方
	Encry       int32    `protobuf:"varint,8,opt,name=Encry,proto3" json:"Encry,omitempty"`            // 是否加密 0: 不加密 1：加密
	FwdFrom     []byte   `protobuf:"bytes,9,opt,name=FwdFrom,proto3" json:"FwdFrom,omitempty"`         // 原始转发信息
	GroupId     int64    `protobuf:"varint,10,opt,name=GroupId,proto3" json:"GroupId,omitempty"`       // 图片组ID
	ViaBotId    int32    `protobuf:"varint,11,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`     // 机器人id
	MsgID       int32    `protobuf:"varint,12,opt,name=MsgID,proto3" json:"MsgID,omitempty"`           // 消息ID
}

func (x *ForWardUserMsg) Reset() {
	*x = ForWardUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForWardUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForWardUserMsg) ProtoMessage() {}

func (x *ForWardUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForWardUserMsg.ProtoReflect.Descriptor instead.
func (*ForWardUserMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{9}
}

func (x *ForWardUserMsg) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ForWardUserMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ForWardUserMsg) GetMedia() int64 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *ForWardUserMsg) GetMediaData() []byte {
	if x != nil {
		return x.MediaData
	}
	return nil
}

func (x *ForWardUserMsg) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *ForWardUserMsg) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ForWardUserMsg) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ForWardUserMsg) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ForWardUserMsg) GetFwdFrom() []byte {
	if x != nil {
		return x.FwdFrom
	}
	return nil
}

func (x *ForWardUserMsg) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ForWardUserMsg) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

func (x *ForWardUserMsg) GetMsgID() int32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

type ForWardUserMsgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForWardUserMsg []*ForWardUserMsg `protobuf:"bytes,1,rep,name=ForWardUserMsg,proto3" json:"ForWardUserMsg,omitempty"` // 转发消息集合
}

func (x *ForWardUserMsgList) Reset() {
	*x = ForWardUserMsgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForWardUserMsgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForWardUserMsgList) ProtoMessage() {}

func (x *ForWardUserMsgList) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForWardUserMsgList.ProtoReflect.Descriptor instead.
func (*ForWardUserMsgList) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{10}
}

func (x *ForWardUserMsgList) GetForWardUserMsg() []*ForWardUserMsg {
	if x != nil {
		return x.ForWardUserMsg
	}
	return nil
}

type ReqGetUserMsgHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selfid     int32         `protobuf:"varint,1,opt,name=Selfid,proto3" json:"Selfid,omitempty"`         // 自身用户ID
	Withid     int32         `protobuf:"varint,2,opt,name=Withid,proto3" json:"Withid,omitempty"`         // 消息交互方ID
	Type       int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`             // 对话框类型 1:user 2: chat 3: channel
	OffsetId   int32         `protobuf:"varint,4,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`     // 消息ID， 查询小于OFfsetID limit- addoffset条 如果offsetID 等于0 则取最新的limit条
	OffsetDate int32         `protobuf:"varint,5,opt,name=OffsetDate,proto3" json:"OffsetDate,omitempty"` // 未使用字段
	AddOffset  int32         `protobuf:"varint,6,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`   // 向下取消息条数， 如果不等于0 则取 大于且等于OffsetId addOffset绝对值条
	MinId      int32         `protobuf:"varint,7,opt,name=MinId,proto3" json:"MinId,omitempty"`           // 未使用字段
	MaxId      int32         `protobuf:"varint,8,opt,name=MaxId,proto3" json:"MaxId,omitempty"`           // 未使用字段
	Limit      int32         `protobuf:"varint,9,opt,name=Limit,proto3" json:"Limit,omitempty"`           // 查询条数
	Encry      int32         `protobuf:"varint,10,opt,name=Encry,proto3" json:"Encry,omitempty"`          // ReqUserMsgHis是否加密 0: 不加密 1：加密
	DeletMark  int32         `protobuf:"varint,11,opt,name=DeletMark,proto3" json:"DeletMark,omitempty"`  // 超级群删除历史标记
	Debug      *pbcomm.Debug `protobuf:"bytes,12,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqGetUserMsgHistory) Reset() {
	*x = ReqGetUserMsgHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserMsgHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserMsgHistory) ProtoMessage() {}

func (x *ReqGetUserMsgHistory) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserMsgHistory.ProtoReflect.Descriptor instead.
func (*ReqGetUserMsgHistory) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{11}
}

func (x *ReqGetUserMsgHistory) GetSelfid() int32 {
	if x != nil {
		return x.Selfid
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetWithid() int32 {
	if x != nil {
		return x.Withid
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetDeletMark() int32 {
	if x != nil {
		return x.DeletMark
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UserMsgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgs []*pbcomm.UserMsg `protobuf:"bytes,1,rep,name=UserMsgs,proto3" json:"UserMsgs,omitempty"` // 消息集合
	Pts      int32             `protobuf:"varint,2,opt,name=pts,proto3" json:"pts,omitempty"`          // 当前PTS
}

func (x *UserMsgList) Reset() {
	*x = UserMsgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMsgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMsgList) ProtoMessage() {}

func (x *UserMsgList) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMsgList.ProtoReflect.Descriptor instead.
func (*UserMsgList) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{12}
}

func (x *UserMsgList) GetUserMsgs() []*pbcomm.UserMsg {
	if x != nil {
		return x.UserMsgs
	}
	return nil
}

func (x *UserMsgList) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

type ReqGetUserMsgUUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	MsgId  int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`   // 消息ID
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetUserMsgUUID) Reset() {
	*x = ReqGetUserMsgUUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserMsgUUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserMsgUUID) ProtoMessage() {}

func (x *ReqGetUserMsgUUID) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserMsgUUID.ProtoReflect.Descriptor instead.
func (*ReqGetUserMsgUUID) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{13}
}

func (x *ReqGetUserMsgUUID) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetUserMsgUUID) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqGetUserMsgUUID) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32 `protobuf:"varint,1,opt,name=Userid,proto3" json:"Userid,omitempty"` // 用户ID
	UUID   int64 `protobuf:"varint,2,opt,name=UUID,proto3" json:"UUID,omitempty"`     // 消息UUID
}

func (x *UUID) Reset() {
	*x = UUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{14}
}

func (x *UUID) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *UUID) GetUUID() int64 {
	if x != nil {
		return x.UUID
	}
	return 0
}

type ReqGetUserMsgIdByUUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=Userid,proto3" json:"Userid,omitempty"` // 用户ID
	UUID   int64         `protobuf:"varint,2,opt,name=UUID,proto3" json:"UUID,omitempty"`     // 消息UUID
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetUserMsgIdByUUID) Reset() {
	*x = ReqGetUserMsgIdByUUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserMsgIdByUUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserMsgIdByUUID) ProtoMessage() {}

func (x *ReqGetUserMsgIdByUUID) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserMsgIdByUUID.ProtoReflect.Descriptor instead.
func (*ReqGetUserMsgIdByUUID) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{15}
}

func (x *ReqGetUserMsgIdByUUID) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqGetUserMsgIdByUUID) GetUUID() int64 {
	if x != nil {
		return x.UUID
	}
	return 0
}

func (x *ReqGetUserMsgIdByUUID) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type MsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId int32 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"` // 消息ID
}

func (x *MsgId) Reset() {
	*x = MsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgId) ProtoMessage() {}

func (x *MsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgId.ProtoReflect.Descriptor instead.
func (*MsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{16}
}

func (x *MsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type ReqGetUserMsgListByUUIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`      // 用户ID
	UUIDS  []int64       `protobuf:"varint,2,rep,packed,name=UUIDS,proto3" json:"UUIDS,omitempty"` // 消息UUID集合
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`         // 日志前缀信息
}

func (x *ReqGetUserMsgListByUUIDs) Reset() {
	*x = ReqGetUserMsgListByUUIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserMsgListByUUIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserMsgListByUUIDs) ProtoMessage() {}

func (x *ReqGetUserMsgListByUUIDs) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserMsgListByUUIDs.ProtoReflect.Descriptor instead.
func (*ReqGetUserMsgListByUUIDs) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{17}
}

func (x *ReqGetUserMsgListByUUIDs) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqGetUserMsgListByUUIDs) GetUUIDS() []int64 {
	if x != nil {
		return x.UUIDS
	}
	return nil
}

func (x *ReqGetUserMsgListByUUIDs) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqDeleteUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	MsgId  int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`   // 消息ID
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqDeleteUserMsg) Reset() {
	*x = ReqDeleteUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteUserMsg) ProtoMessage() {}

func (x *ReqDeleteUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteUserMsg.ProtoReflect.Descriptor instead.
func (*ReqDeleteUserMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{18}
}

func (x *ReqDeleteUserMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqDeleteUserMsg) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqDeleteUserMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqBatchDeleteUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`        // 用户ID
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`        // 消息交互方ID
	MsgIds []int32       `protobuf:"varint,3,rep,packed,name=MsgIds,proto3" json:"MsgIds,omitempty"` // 消息ID集合
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqBatchDeleteUserMsg) Reset() {
	*x = ReqBatchDeleteUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBatchDeleteUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBatchDeleteUserMsg) ProtoMessage() {}

func (x *ReqBatchDeleteUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBatchDeleteUserMsg.ProtoReflect.Descriptor instead.
func (*ReqBatchDeleteUserMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{19}
}

func (x *ReqBatchDeleteUserMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqBatchDeleteUserMsg) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqBatchDeleteUserMsg) GetMsgIds() []int32 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

func (x *ReqBatchDeleteUserMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetOneUserMsgByUserIdAndMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	MsgId  int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`   // 消息ID
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetOneUserMsgByUserIdAndMsgId) Reset() {
	*x = ReqGetOneUserMsgByUserIdAndMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetOneUserMsgByUserIdAndMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetOneUserMsgByUserIdAndMsgId) ProtoMessage() {}

func (x *ReqGetOneUserMsgByUserIdAndMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetOneUserMsgByUserIdAndMsgId.ProtoReflect.Descriptor instead.
func (*ReqGetOneUserMsgByUserIdAndMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{20}
}

func (x *ReqGetOneUserMsgByUserIdAndMsgId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetOneUserMsgByUserIdAndMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqGetOneUserMsgByUserIdAndMsgId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqDeleteUserMsgByUserIdAndWithIdAndEncry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息交互方
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"` // 对话框类型
	Encry      int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`           // 是否加密 0: 不加密 1：加密
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`            // 日志前缀信息
}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) Reset() {
	*x = ReqDeleteUserMsgByUserIdAndWithIdAndEncry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteUserMsgByUserIdAndWithIdAndEncry) ProtoMessage() {}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteUserMsgByUserIdAndWithIdAndEncry.ProtoReflect.Descriptor instead.
func (*ReqDeleteUserMsgByUserIdAndWithIdAndEncry) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{21}
}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqClearHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息交互方
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"` // 对话框类型
	Encry      int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`           // 是否加密 0: 不加密 1：加密
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`            // 日志前缀信息
}

func (x *ReqClearHistory) Reset() {
	*x = ReqClearHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqClearHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqClearHistory) ProtoMessage() {}

func (x *ReqClearHistory) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqClearHistory.ProtoReflect.Descriptor instead.
func (*ReqClearHistory) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{22}
}

func (x *ReqClearHistory) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqClearHistory) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqClearHistory) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *ReqClearHistory) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqClearHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type MsgIDList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId     []int32 `protobuf:"varint,1,rep,packed,name=MsgId,proto3" json:"MsgId,omitempty"`  // 消息ID
	Pts       []int32 `protobuf:"varint,2,rep,packed,name=Pts,proto3" json:"Pts,omitempty"`      // pts
	LastMsgId int32   `protobuf:"varint,3,opt,name=LastMsgId,proto3" json:"LastMsgId,omitempty"` // 删除的最大消息ID
	Count     int32   `protobuf:"varint,4,opt,name=Count,proto3" json:"Count,omitempty"`         // 删除消息条数
}

func (x *MsgIDList) Reset() {
	*x = MsgIDList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgIDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgIDList) ProtoMessage() {}

func (x *MsgIDList) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgIDList.ProtoReflect.Descriptor instead.
func (*MsgIDList) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{23}
}

func (x *MsgIDList) GetMsgId() []int32 {
	if x != nil {
		return x.MsgId
	}
	return nil
}

func (x *MsgIDList) GetPts() []int32 {
	if x != nil {
		return x.Pts
	}
	return nil
}

func (x *MsgIDList) GetLastMsgId() int32 {
	if x != nil {
		return x.LastMsgId
	}
	return 0
}

func (x *MsgIDList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 查询打电话历史消息记录config 当 withid == withtype == 0 时 只搜索userid
type GetMessageHistoryPageByMediaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`        // 用户ID
	WithId   int32   `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`        // 消息交互方
	WithType int32   `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`    // 对话框类型
	MaxId    int32   `protobuf:"varint,4,opt,name=MaxId,proto3" json:"MaxId,omitempty"`          // 消息Id 如果为0 则从最后一条开始查询
	Encry    int32   `protobuf:"varint,5,opt,name=Encry,proto3" json:"Encry,omitempty"`          // 是否加密
	Medias   []int32 `protobuf:"varint,6,rep,packed,name=Medias,proto3" json:"Medias,omitempty"` // 媒体类型 20 电话
	Limit    int32   `protobuf:"varint,7,opt,name=Limit,proto3" json:"Limit,omitempty"`          // 分页查询条数
}

func (x *GetMessageHistoryPageByMediaConfig) Reset() {
	*x = GetMessageHistoryPageByMediaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageHistoryPageByMediaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageHistoryPageByMediaConfig) ProtoMessage() {}

func (x *GetMessageHistoryPageByMediaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageHistoryPageByMediaConfig.ProtoReflect.Descriptor instead.
func (*GetMessageHistoryPageByMediaConfig) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{24}
}

func (x *GetMessageHistoryPageByMediaConfig) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetMessageHistoryPageByMediaConfig) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *GetMessageHistoryPageByMediaConfig) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *GetMessageHistoryPageByMediaConfig) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *GetMessageHistoryPageByMediaConfig) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *GetMessageHistoryPageByMediaConfig) GetMedias() []int32 {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *GetMessageHistoryPageByMediaConfig) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ReqGetMessageHistoryPageByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetMessageHistoryPageByMediaConfig *GetMessageHistoryPageByMediaConfig `protobuf:"bytes,1,opt,name=GetMessageHistoryPageByMediaConfig,proto3" json:"GetMessageHistoryPageByMediaConfig,omitempty"` // 查询打电话历史消息记录config
	Debug                              *pbcomm.Debug                       `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`                                                           // 日志前缀信息
}

func (x *ReqGetMessageHistoryPageByMedia) Reset() {
	*x = ReqGetMessageHistoryPageByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetMessageHistoryPageByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetMessageHistoryPageByMedia) ProtoMessage() {}

func (x *ReqGetMessageHistoryPageByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetMessageHistoryPageByMedia.ProtoReflect.Descriptor instead.
func (*ReqGetMessageHistoryPageByMedia) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{25}
}

func (x *ReqGetMessageHistoryPageByMedia) GetGetMessageHistoryPageByMediaConfig() *GetMessageHistoryPageByMediaConfig {
	if x != nil {
		return x.GetMessageHistoryPageByMediaConfig
	}
	return nil
}

func (x *ReqGetMessageHistoryPageByMedia) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetMessageHistoryPageByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgs []*pbcomm.UserMsg `protobuf:"bytes,1,rep,name=UserMsgs,proto3" json:"UserMsgs,omitempty"` // 消息集合
}

func (x *ReplyGetMessageHistoryPageByMedia) Reset() {
	*x = ReplyGetMessageHistoryPageByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetMessageHistoryPageByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetMessageHistoryPageByMedia) ProtoMessage() {}

func (x *ReplyGetMessageHistoryPageByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetMessageHistoryPageByMedia.ProtoReflect.Descriptor instead.
func (*ReplyGetMessageHistoryPageByMedia) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{26}
}

func (x *ReplyGetMessageHistoryPageByMedia) GetUserMsgs() []*pbcomm.UserMsg {
	if x != nil {
		return x.UserMsgs
	}
	return nil
}

type ReqGetUserMediaMessageStatisticsByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`     // 用户ID
	WithId   int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`     // 消息接收方ID
	WithType int32         `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"` // 对话框类型
	Media    int32         `protobuf:"varint,4,opt,name=Media,proto3" json:"Media,omitempty"`       // 媒体类型
	Debug    *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`        // 日志前缀信息
}

func (x *ReqGetUserMediaMessageStatisticsByMedia) Reset() {
	*x = ReqGetUserMediaMessageStatisticsByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserMediaMessageStatisticsByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserMediaMessageStatisticsByMedia) ProtoMessage() {}

func (x *ReqGetUserMediaMessageStatisticsByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserMediaMessageStatisticsByMedia.ProtoReflect.Descriptor instead.
func (*ReqGetUserMediaMessageStatisticsByMedia) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{27}
}

func (x *ReqGetUserMediaMessageStatisticsByMedia) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetUserMediaMessageStatisticsByMedia) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqGetUserMediaMessageStatisticsByMedia) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *ReqGetUserMediaMessageStatisticsByMedia) GetMedia() int32 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *ReqGetUserMediaMessageStatisticsByMedia) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UserMediaMessageStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`     // 用户ID
	WithId   int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`     // 消息接收方ID
	WithType int32 `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"` // 对话框类型
	Media    int32 `protobuf:"varint,4,opt,name=Media,proto3" json:"Media,omitempty"`       // 媒体消息类型
	Count    int32 `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`       // 媒体消息计数
}

func (x *UserMediaMessageStatistics) Reset() {
	*x = UserMediaMessageStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMediaMessageStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMediaMessageStatistics) ProtoMessage() {}

func (x *UserMediaMessageStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMediaMessageStatistics.ProtoReflect.Descriptor instead.
func (*UserMediaMessageStatistics) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{28}
}

func (x *UserMediaMessageStatistics) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserMediaMessageStatistics) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UserMediaMessageStatistics) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *UserMediaMessageStatistics) GetMedia() int32 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *UserMediaMessageStatistics) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ReplyGetUserMediaMessageStatisticsByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMediaMessageStatistics *UserMediaMessageStatistics `protobuf:"bytes,1,opt,name=UserMediaMessageStatistics,proto3" json:"UserMediaMessageStatistics,omitempty"` // 媒体消息统计
}

func (x *ReplyGetUserMediaMessageStatisticsByMedia) Reset() {
	*x = ReplyGetUserMediaMessageStatisticsByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetUserMediaMessageStatisticsByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetUserMediaMessageStatisticsByMedia) ProtoMessage() {}

func (x *ReplyGetUserMediaMessageStatisticsByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetUserMediaMessageStatisticsByMedia.ProtoReflect.Descriptor instead.
func (*ReplyGetUserMediaMessageStatisticsByMedia) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{29}
}

func (x *ReplyGetUserMediaMessageStatisticsByMedia) GetUserMediaMessageStatistics() *UserMediaMessageStatistics {
	if x != nil {
		return x.UserMediaMessageStatistics
	}
	return nil
}

type ReqGetLastLimitDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Limit  int32         `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`   // 查询条数
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetLastLimitDialog) Reset() {
	*x = ReqGetLastLimitDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetLastLimitDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetLastLimitDialog) ProtoMessage() {}

func (x *ReqGetLastLimitDialog) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetLastLimitDialog.ProtoReflect.Descriptor instead.
func (*ReqGetLastLimitDialog) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{30}
}

func (x *ReqGetLastLimitDialog) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetLastLimitDialog) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetLastLimitDialog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UserRating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`  // 联系人用户ID
	Rating float64 `protobuf:"fixed64,2,opt,name=Rating,proto3" json:"Rating,omitempty"` // 联系人亲密度
}

func (x *UserRating) Reset() {
	*x = UserRating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRating) ProtoMessage() {}

func (x *UserRating) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRating.ProtoReflect.Descriptor instead.
func (*UserRating) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{31}
}

func (x *UserRating) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserRating) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

type ReplyGetLastLimitDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserRatingList []*UserRating `protobuf:"bytes,1,rep,name=UserRatingList,proto3" json:"UserRatingList,omitempty"` // 返回对话框切片
}

func (x *ReplyGetLastLimitDialog) Reset() {
	*x = ReplyGetLastLimitDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetLastLimitDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetLastLimitDialog) ProtoMessage() {}

func (x *ReplyGetLastLimitDialog) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetLastLimitDialog.ProtoReflect.Descriptor instead.
func (*ReplyGetLastLimitDialog) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{32}
}

func (x *ReplyGetLastLimitDialog) GetUserRatingList() []*UserRating {
	if x != nil {
		return x.UserRatingList
	}
	return nil
}

type ReqGetRandomStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyID    uint64        `protobuf:"varint,1,opt,name=KeyID,proto3" json:"KeyID,omitempty"`       // 用户id
	RandomID int64         `protobuf:"varint,2,opt,name=RandomID,proto3" json:"RandomID,omitempty"` // randomid
	Debug    *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`        // 日志前缀信息
}

func (x *ReqGetRandomStatus) Reset() {
	*x = ReqGetRandomStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetRandomStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetRandomStatus) ProtoMessage() {}

func (x *ReqGetRandomStatus) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetRandomStatus.ProtoReflect.Descriptor instead.
func (*ReqGetRandomStatus) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{33}
}

func (x *ReqGetRandomStatus) GetKeyID() uint64 {
	if x != nil {
		return x.KeyID
	}
	return 0
}

func (x *ReqGetRandomStatus) GetRandomID() int64 {
	if x != nil {
		return x.RandomID
	}
	return 0
}

func (x *ReqGetRandomStatus) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetRandomStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // 查询接口处理状态 true: 正在处理  false： 未处理
}

func (x *ReplyGetRandomStatus) Reset() {
	*x = ReplyGetRandomStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetRandomStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetRandomStatus) ProtoMessage() {}

func (x *ReplyGetRandomStatus) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetRandomStatus.ProtoReflect.Descriptor instead.
func (*ReplyGetRandomStatus) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{34}
}

func (x *ReplyGetRandomStatus) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type ReqSetSuperGroupMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date   int64         `protobuf:"varint,1,opt,name=Date,proto3" json:"Date,omitempty"`
	Msg    []byte        `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	UserId int32         `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqSetSuperGroupMsg) Reset() {
	*x = ReqSetSuperGroupMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSetSuperGroupMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSetSuperGroupMsg) ProtoMessage() {}

func (x *ReqSetSuperGroupMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSetSuperGroupMsg.ProtoReflect.Descriptor instead.
func (*ReqSetSuperGroupMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{35}
}

func (x *ReqSetSuperGroupMsg) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReqSetSuperGroupMsg) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *ReqSetSuperGroupMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqSetSuperGroupMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplySetSuperGroupMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplySetSuperGroupMsg) Reset() {
	*x = ReplySetSuperGroupMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplySetSuperGroupMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplySetSuperGroupMsg) ProtoMessage() {}

func (x *ReplySetSuperGroupMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplySetSuperGroupMsg.ProtoReflect.Descriptor instead.
func (*ReplySetSuperGroupMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{36}
}

type ReqGetSuperGroupMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date   int64         `protobuf:"varint,1,opt,name=Date,proto3" json:"Date,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Limit  int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"` // 分页查询条数
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`  // 日志前缀信息
}

func (x *ReqGetSuperGroupMsg) Reset() {
	*x = ReqGetSuperGroupMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetSuperGroupMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetSuperGroupMsg) ProtoMessage() {}

func (x *ReqGetSuperGroupMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetSuperGroupMsg.ProtoReflect.Descriptor instead.
func (*ReqGetSuperGroupMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{37}
}

func (x *ReqGetSuperGroupMsg) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReqGetSuperGroupMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetSuperGroupMsg) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetSuperGroupMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetSuperGroupMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    [][]byte `protobuf:"bytes,1,rep,name=Msg,proto3" json:"Msg,omitempty"`
	Date   int64    `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
	GetAll bool     `protobuf:"varint,3,opt,name=GetAll,proto3" json:"GetAll,omitempty"`
}

func (x *ReplyGetSuperGroupMsg) Reset() {
	*x = ReplyGetSuperGroupMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetSuperGroupMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetSuperGroupMsg) ProtoMessage() {}

func (x *ReplyGetSuperGroupMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetSuperGroupMsg.ProtoReflect.Descriptor instead.
func (*ReplyGetSuperGroupMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{38}
}

func (x *ReplyGetSuperGroupMsg) GetMsg() [][]byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *ReplyGetSuperGroupMsg) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReplyGetSuperGroupMsg) GetGetAll() bool {
	if x != nil {
		return x.GetAll
	}
	return false
}

type ReqUserDialogSetUnreadMetionsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelID          int32         `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Type               int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	UnreadMetionsCount int32         `protobuf:"varint,4,opt,name=UnreadMetionsCount,proto3" json:"UnreadMetionsCount,omitempty"`
	Debug              *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqUserDialogSetUnreadMetionsCount) Reset() {
	*x = ReqUserDialogSetUnreadMetionsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserDialogSetUnreadMetionsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserDialogSetUnreadMetionsCount) ProtoMessage() {}

func (x *ReqUserDialogSetUnreadMetionsCount) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserDialogSetUnreadMetionsCount.ProtoReflect.Descriptor instead.
func (*ReqUserDialogSetUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{39}
}

func (x *ReqUserDialogSetUnreadMetionsCount) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUserDialogSetUnreadMetionsCount) GetChannelID() int32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *ReqUserDialogSetUnreadMetionsCount) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqUserDialogSetUnreadMetionsCount) GetUnreadMetionsCount() int32 {
	if x != nil {
		return x.UnreadMetionsCount
	}
	return 0
}

func (x *ReqUserDialogSetUnreadMetionsCount) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUserDialogSetUnreadMetionsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyUserDialogSetUnreadMetionsCount) Reset() {
	*x = ReplyUserDialogSetUnreadMetionsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUserDialogSetUnreadMetionsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUserDialogSetUnreadMetionsCount) ProtoMessage() {}

func (x *ReplyUserDialogSetUnreadMetionsCount) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUserDialogSetUnreadMetionsCount.ProtoReflect.Descriptor instead.
func (*ReplyUserDialogSetUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{40}
}

func (x *ReplyUserDialogSetUnreadMetionsCount) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUserDialogGetUnreadMetionsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelID int32         `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Type      int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqUserDialogGetUnreadMetionsCount) Reset() {
	*x = ReqUserDialogGetUnreadMetionsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserDialogGetUnreadMetionsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserDialogGetUnreadMetionsCount) ProtoMessage() {}

func (x *ReqUserDialogGetUnreadMetionsCount) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserDialogGetUnreadMetionsCount.ProtoReflect.Descriptor instead.
func (*ReqUserDialogGetUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{41}
}

func (x *ReqUserDialogGetUnreadMetionsCount) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUserDialogGetUnreadMetionsCount) GetChannelID() int32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *ReqUserDialogGetUnreadMetionsCount) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqUserDialogGetUnreadMetionsCount) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUserDialogGetUnreadMetionsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnreadMetionsCount int32     `protobuf:"varint,1,opt,name=UnreadMetionsCount,proto3" json:"UnreadMetionsCount,omitempty"`
	ReplyErr           *ReplyErr `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyUserDialogGetUnreadMetionsCount) Reset() {
	*x = ReplyUserDialogGetUnreadMetionsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUserDialogGetUnreadMetionsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUserDialogGetUnreadMetionsCount) ProtoMessage() {}

func (x *ReplyUserDialogGetUnreadMetionsCount) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUserDialogGetUnreadMetionsCount.ProtoReflect.Descriptor instead.
func (*ReplyUserDialogGetUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{42}
}

func (x *ReplyUserDialogGetUnreadMetionsCount) GetUnreadMetionsCount() int32 {
	if x != nil {
		return x.UnreadMetionsCount
	}
	return 0
}

func (x *ReplyUserDialogGetUnreadMetionsCount) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUserDialogChangeUnreadMetionsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                        int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelID                     int32         `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Type                          int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	UnreadMetionsCountChangeValue int32         `protobuf:"varint,4,opt,name=UnreadMetionsCountChangeValue,proto3" json:"UnreadMetionsCountChangeValue,omitempty"` // UnreadMetionsCount变化值
	Debug                         *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqUserDialogChangeUnreadMetionsCount) Reset() {
	*x = ReqUserDialogChangeUnreadMetionsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserDialogChangeUnreadMetionsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserDialogChangeUnreadMetionsCount) ProtoMessage() {}

func (x *ReqUserDialogChangeUnreadMetionsCount) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserDialogChangeUnreadMetionsCount.ProtoReflect.Descriptor instead.
func (*ReqUserDialogChangeUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{43}
}

func (x *ReqUserDialogChangeUnreadMetionsCount) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUserDialogChangeUnreadMetionsCount) GetChannelID() int32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *ReqUserDialogChangeUnreadMetionsCount) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqUserDialogChangeUnreadMetionsCount) GetUnreadMetionsCountChangeValue() int32 {
	if x != nil {
		return x.UnreadMetionsCountChangeValue
	}
	return 0
}

func (x *ReqUserDialogChangeUnreadMetionsCount) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUserDialogChangeUnreadMetionsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyUserDialogChangeUnreadMetionsCount) Reset() {
	*x = ReplyUserDialogChangeUnreadMetionsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUserDialogChangeUnreadMetionsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUserDialogChangeUnreadMetionsCount) ProtoMessage() {}

func (x *ReplyUserDialogChangeUnreadMetionsCount) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUserDialogChangeUnreadMetionsCount.ProtoReflect.Descriptor instead.
func (*ReplyUserDialogChangeUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{44}
}

func (x *ReplyUserDialogChangeUnreadMetionsCount) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUserMessageAtAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Encry  int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqUserMessageAtAdd) Reset() {
	*x = ReqUserMessageAtAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserMessageAtAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserMessageAtAdd) ProtoMessage() {}

func (x *ReqUserMessageAtAdd) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserMessageAtAdd.ProtoReflect.Descriptor instead.
func (*ReqUserMessageAtAdd) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{45}
}

func (x *ReqUserMessageAtAdd) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUserMessageAtAdd) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUserMessageAtAdd) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqUserMessageAtAdd) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqUserMessageAtAdd) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUserMessageAtAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyUserMessageAtAdd) Reset() {
	*x = ReplyUserMessageAtAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUserMessageAtAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUserMessageAtAdd) ProtoMessage() {}

func (x *ReplyUserMessageAtAdd) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUserMessageAtAdd.ProtoReflect.Descriptor instead.
func (*ReplyUserMessageAtAdd) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{46}
}

func (x *ReplyUserMessageAtAdd) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUserMessageAtGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId    int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId     int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	AddOffset int32         `protobuf:"varint,4,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	Limit     int32         `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqUserMessageAtGet) Reset() {
	*x = ReqUserMessageAtGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserMessageAtGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserMessageAtGet) ProtoMessage() {}

func (x *ReqUserMessageAtGet) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserMessageAtGet.ProtoReflect.Descriptor instead.
func (*ReqUserMessageAtGet) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{47}
}

func (x *ReqUserMessageAtGet) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUserMessageAtGet) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUserMessageAtGet) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqUserMessageAtGet) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *ReqUserMessageAtGet) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqUserMessageAtGet) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUserMessageAtGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*pbcomm.UserMsg `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	ReplyErr *ReplyErr         `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyUserMessageAtGet) Reset() {
	*x = ReplyUserMessageAtGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUserMessageAtGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUserMessageAtGet) ProtoMessage() {}

func (x *ReplyUserMessageAtGet) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUserMessageAtGet.ProtoReflect.Descriptor instead.
func (*ReplyUserMessageAtGet) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{48}
}

func (x *ReplyUserMessageAtGet) GetMessages() []*pbcomm.UserMsg {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ReplyUserMessageAtGet) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUserMessageAtDel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqUserMessageAtDel) Reset() {
	*x = ReqUserMessageAtDel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserMessageAtDel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserMessageAtDel) ProtoMessage() {}

func (x *ReqUserMessageAtDel) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserMessageAtDel.ProtoReflect.Descriptor instead.
func (*ReqUserMessageAtDel) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{49}
}

func (x *ReqUserMessageAtDel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUserMessageAtDel) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUserMessageAtDel) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqUserMessageAtDel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUserMessageAtDel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyUserMessageAtDel) Reset() {
	*x = ReplyUserMessageAtDel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUserMessageAtDel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUserMessageAtDel) ProtoMessage() {}

func (x *ReplyUserMessageAtDel) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUserMessageAtDel.ProtoReflect.Descriptor instead.
func (*ReplyUserMessageAtDel) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{50}
}

func (x *ReplyUserMessageAtDel) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

// =================================================== search =======================================================
type ReqUpdateMessageMediaUnread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int32   `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	MsgIDs []int32 `protobuf:"varint,2,rep,packed,name=MsgIDs,proto3" json:"MsgIDs,omitempty"`
	Encry  int32   `protobuf:"varint,3,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (x *ReqUpdateMessageMediaUnread) Reset() {
	*x = ReqUpdateMessageMediaUnread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateMessageMediaUnread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateMessageMediaUnread) ProtoMessage() {}

func (x *ReqUpdateMessageMediaUnread) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateMessageMediaUnread.ProtoReflect.Descriptor instead.
func (*ReqUpdateMessageMediaUnread) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{51}
}

func (x *ReqUpdateMessageMediaUnread) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReqUpdateMessageMediaUnread) GetMsgIDs() []int32 {
	if x != nil {
		return x.MsgIDs
	}
	return nil
}

func (x *ReqUpdateMessageMediaUnread) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

type ReqGetUserMessageByUserIDRandomID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	RandomID int64 `protobuf:"varint,2,opt,name=RandomID,proto3" json:"RandomID,omitempty"`
	Encry    int32 `protobuf:"varint,3,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (x *ReqGetUserMessageByUserIDRandomID) Reset() {
	*x = ReqGetUserMessageByUserIDRandomID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserMessageByUserIDRandomID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserMessageByUserIDRandomID) ProtoMessage() {}

func (x *ReqGetUserMessageByUserIDRandomID) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserMessageByUserIDRandomID.ProtoReflect.Descriptor instead.
func (*ReqGetUserMessageByUserIDRandomID) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{52}
}

func (x *ReqGetUserMessageByUserIDRandomID) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReqGetUserMessageByUserIDRandomID) GetRandomID() int64 {
	if x != nil {
		return x.RandomID
	}
	return 0
}

func (x *ReqGetUserMessageByUserIDRandomID) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

type ReqSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    int32   `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`        // 用户ID
	WithID    int32   `protobuf:"varint,2,opt,name=WithID,proto3" json:"WithID,omitempty"`        // 消息接收者
	WithType  int32   `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`    // 对话框类型
	FromID    int32   `protobuf:"varint,4,opt,name=FromID,proto3" json:"FromID,omitempty"`        // 消息发送者
	Medias    []int32 `protobuf:"varint,5,rep,packed,name=Medias,proto3" json:"Medias,omitempty"` // 媒体类型
	OffsetID  int32   `protobuf:"varint,6,opt,name=OffsetID,proto3" json:"OffsetID,omitempty"`    // 偏移的MsgID
	AddOffset int32   `protobuf:"varint,7,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`  // 向后偏移量 （包括OffsetID）
	Encry     int32   `protobuf:"varint,8,opt,name=Encry,proto3" json:"Encry,omitempty"`          // 是否是加密库
	Limit     int32   `protobuf:"varint,9,opt,name=Limit,proto3" json:"Limit,omitempty"`          // 获取消息的条数限制
	MinDate   int32   `protobuf:"varint,10,opt,name=MinDate,proto3" json:"MinDate,omitempty"`     // 最小日期 暂时不用
	MaxDate   int32   `protobuf:"varint,11,opt,name=MaxDate,proto3" json:"MaxDate,omitempty"`     // 最大日期 暂时不用
	MinID     int32   `protobuf:"varint,12,opt,name=MinID,proto3" json:"MinID,omitempty"`         // 最小MsgID
	MaxID     int32   `protobuf:"varint,13,opt,name=MaxID,proto3" json:"MaxID,omitempty"`         // 最大MsgID 暂时不用
}

func (x *ReqSearch) Reset() {
	*x = ReqSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSearch) ProtoMessage() {}

func (x *ReqSearch) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSearch.ProtoReflect.Descriptor instead.
func (*ReqSearch) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{53}
}

func (x *ReqSearch) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReqSearch) GetWithID() int32 {
	if x != nil {
		return x.WithID
	}
	return 0
}

func (x *ReqSearch) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *ReqSearch) GetFromID() int32 {
	if x != nil {
		return x.FromID
	}
	return 0
}

func (x *ReqSearch) GetMedias() []int32 {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *ReqSearch) GetOffsetID() int32 {
	if x != nil {
		return x.OffsetID
	}
	return 0
}

func (x *ReqSearch) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *ReqSearch) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqSearch) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqSearch) GetMinDate() int32 {
	if x != nil {
		return x.MinDate
	}
	return 0
}

func (x *ReqSearch) GetMaxDate() int32 {
	if x != nil {
		return x.MaxDate
	}
	return 0
}

func (x *ReqSearch) GetMinID() int32 {
	if x != nil {
		return x.MinID
	}
	return 0
}

func (x *ReqSearch) GetMaxID() int32 {
	if x != nil {
		return x.MaxID
	}
	return 0
}

type ReplySearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*pbcomm.UserMsg `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
}

func (x *ReplySearch) Reset() {
	*x = ReplySearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplySearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplySearch) ProtoMessage() {}

func (x *ReplySearch) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplySearch.ProtoReflect.Descriptor instead.
func (*ReplySearch) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{54}
}

func (x *ReplySearch) GetMessages() []*pbcomm.UserMsg {
	if x != nil {
		return x.Messages
	}
	return nil
}

type ReqGetUserMsgByUserIDMsgIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   int32   `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`        // 用户ID
	WithID   int32   `protobuf:"varint,2,opt,name=WithID,proto3" json:"WithID,omitempty"`        // 消息接收者
	WithType int32   `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`    // 对话框类型
	MsgIDs   []int32 `protobuf:"varint,4,rep,packed,name=MsgIDs,proto3" json:"MsgIDs,omitempty"` // 消息ID数组
	Encry    int32   `protobuf:"varint,5,opt,name=Encry,proto3" json:"Encry,omitempty"`          // 是否加密
}

func (x *ReqGetUserMsgByUserIDMsgIDs) Reset() {
	*x = ReqGetUserMsgByUserIDMsgIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserMsgByUserIDMsgIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserMsgByUserIDMsgIDs) ProtoMessage() {}

func (x *ReqGetUserMsgByUserIDMsgIDs) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserMsgByUserIDMsgIDs.ProtoReflect.Descriptor instead.
func (*ReqGetUserMsgByUserIDMsgIDs) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{55}
}

func (x *ReqGetUserMsgByUserIDMsgIDs) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReqGetUserMsgByUserIDMsgIDs) GetWithID() int32 {
	if x != nil {
		return x.WithID
	}
	return 0
}

func (x *ReqGetUserMsgByUserIDMsgIDs) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *ReqGetUserMsgByUserIDMsgIDs) GetMsgIDs() []int32 {
	if x != nil {
		return x.MsgIDs
	}
	return nil
}

func (x *ReqGetUserMsgByUserIDMsgIDs) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

type ReplyGetUserMsgByUserIDMsgIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgs []*pbcomm.UserMsg `protobuf:"bytes,1,rep,name=UserMsgs,proto3" json:"UserMsgs,omitempty"`
}

func (x *ReplyGetUserMsgByUserIDMsgIDs) Reset() {
	*x = ReplyGetUserMsgByUserIDMsgIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetUserMsgByUserIDMsgIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetUserMsgByUserIDMsgIDs) ProtoMessage() {}

func (x *ReplyGetUserMsgByUserIDMsgIDs) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetUserMsgByUserIDMsgIDs.ProtoReflect.Descriptor instead.
func (*ReplyGetUserMsgByUserIDMsgIDs) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{56}
}

func (x *ReplyGetUserMsgByUserIDMsgIDs) GetUserMsgs() []*pbcomm.UserMsg {
	if x != nil {
		return x.UserMsgs
	}
	return nil
}

type ReqGetUserMsgByUserIDMsgIDsHotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   int32   `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`        // 用户ID
	WithID   int32   `protobuf:"varint,2,opt,name=WithID,proto3" json:"WithID,omitempty"`        // 消息接收者
	WithType int32   `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`    // 对话框类型
	MsgIDs   []int32 `protobuf:"varint,4,rep,packed,name=MsgIDs,proto3" json:"MsgIDs,omitempty"` // 消息ID数组
	Encry    int32   `protobuf:"varint,5,opt,name=Encry,proto3" json:"Encry,omitempty"`          // 是否加密
}

func (x *ReqGetUserMsgByUserIDMsgIDsHotData) Reset() {
	*x = ReqGetUserMsgByUserIDMsgIDsHotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserMsgByUserIDMsgIDsHotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserMsgByUserIDMsgIDsHotData) ProtoMessage() {}

func (x *ReqGetUserMsgByUserIDMsgIDsHotData) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserMsgByUserIDMsgIDsHotData.ProtoReflect.Descriptor instead.
func (*ReqGetUserMsgByUserIDMsgIDsHotData) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{57}
}

func (x *ReqGetUserMsgByUserIDMsgIDsHotData) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReqGetUserMsgByUserIDMsgIDsHotData) GetWithID() int32 {
	if x != nil {
		return x.WithID
	}
	return 0
}

func (x *ReqGetUserMsgByUserIDMsgIDsHotData) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *ReqGetUserMsgByUserIDMsgIDsHotData) GetMsgIDs() []int32 {
	if x != nil {
		return x.MsgIDs
	}
	return nil
}

func (x *ReqGetUserMsgByUserIDMsgIDsHotData) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

var File_messagedb_proto protoreflect.FileDescriptor

var file_messagedb_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x1a, 0x13, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x73,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x49,
	0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x73,
	0x22, 0x45, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x4d, 0x73, 0x67, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x08, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x0b, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x3c, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x72,
	0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x72, 0x72, 0x4d,
	0x73, 0x67, 0x22, 0x7f, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x42, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6a, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x29, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x3b, 0x0a, 0x0f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49,
	0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22,
	0xb9, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc4, 0x02, 0x0a, 0x0e,
	0x46, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x46, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x46,
	0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x56, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x44, 0x22, 0x57, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x57,
	0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x46, 0x6f, 0x72,
	0x57, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0e, 0x46, 0x6f, 0x72,
	0x57, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xcf, 0x02, 0x0a, 0x14,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x66, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x6c, 0x66, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x57, 0x69, 0x74, 0x68, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69,
	0x74, 0x68, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4c, 0x0a,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x22, 0x66, 0x0a, 0x11, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x32, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x68, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x1d, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x22, 0x6d, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x55, 0x49, 0x44, 0x53, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x05, 0x55, 0x55, 0x49, 0x44, 0x53, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x65, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x75, 0x0a,
	0x20, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x22, 0xb6, 0x01, 0x0a, 0x29, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x9c, 0x01,
	0x0a, 0x0f, 0x52, 0x65, 0x71, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x67, 0x0a, 0x09,
	0x4d, 0x73, 0x67, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x7d, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x50, 0x0a, 0x21, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x2b, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x22, 0xb0, 0x01, 0x0a,
	0x27, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x94, 0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x29, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x65, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x1a, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x6a, 0x0a, 0x15, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3c, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x58, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x12, 0x3d, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x6b, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x2e, 0x0a, 0x14,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x78, 0x0a, 0x13,
	0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53,
	0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x22,
	0x7c, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x55, 0x0a,
	0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x22, 0xc3, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x57, 0x0a, 0x24, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x87, 0x01, 0x0a, 0x24, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x47, 0x65, 0x74,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x22, 0xdc, 0x01, 0x0a, 0x25, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x5a, 0x0a, 0x27, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x96,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x74, 0x41, 0x64, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x48, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x41, 0x64, 0x64,
	0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x22, 0xb4, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x75, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65,
	0x74, 0x12, 0x2b, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22,
	0x80, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x48, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45,
	0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x63, 0x0a, 0x1b,
	0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x22, 0x6d, 0x0a, 0x21, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x22, 0xcd, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72,
	0x6f, 0x6d, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61,
	0x78, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x61, 0x78,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61,
	0x78, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x44,
	0x22, 0x3a, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x2b, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x52, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a,
	0x1b, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x49,
	0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x22, 0x4c, 0x0a, 0x1d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4d, 0x73,
	0x67, 0x49, 0x44, 0x73, 0x48, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x44,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x2a, 0x55, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x70, 0x63, 0x45, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x03, 0x32, 0xd6, 0x16, 0x0a,
	0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x62, 0x12, 0x4a, 0x0a, 0x0c, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a,
	0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x0f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x42, 0x79, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x42, 0x79,
	0x55, 0x55, 0x49, 0x44, 0x1a, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44,
	0x73, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x55, 0x55, 0x49, 0x44, 0x73, 0x1a, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x12, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x14,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x20, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x14,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x12, 0x34, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x14, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x2a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a,
	0x2c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x00, 0x12,
	0x92, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x32, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x34, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x1a, 0x22, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x1a, 0x20, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x74,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x73, 0x67, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x73, 0x67, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x1f, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x83, 0x01,
	0x0a, 0x1f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x2f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x22, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x32, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x74, 0x41, 0x64, 0x64, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x74, 0x41, 0x64, 0x64, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x74, 0x41, 0x64, 0x64, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65, 0x74, 0x12, 0x1e,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x20,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65, 0x74,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x73,
	0x12, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x1a, 0x14, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c,
	0x6c, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x2c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x49, 0x44, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x16, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4d, 0x73, 0x67,
	0x49, 0x44, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x73, 0x1a, 0x28, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4d,
	0x73, 0x67, 0x49, 0x44, 0x73, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4d, 0x73, 0x67,
	0x49, 0x44, 0x73, 0x48, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x49,
	0x44, 0x73, 0x48, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4d, 0x73, 0x67,
	0x49, 0x44, 0x73, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messagedb_proto_rawDescOnce sync.Once
	file_messagedb_proto_rawDescData = file_messagedb_proto_rawDesc
)

func file_messagedb_proto_rawDescGZIP() []byte {
	file_messagedb_proto_rawDescOnce.Do(func() {
		file_messagedb_proto_rawDescData = protoimpl.X.CompressGZIP(file_messagedb_proto_rawDescData)
	})
	return file_messagedb_proto_rawDescData
}

var file_messagedb_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_messagedb_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_messagedb_proto_goTypes = []interface{}{
	(HeartBeating)(0),                                 // 0: messagedb.HeartBeating
	(*GetMessageByMsgIDsReq)(nil),                     // 1: messagedb.GetMessageByMsgIDsReq
	(*GetMessageByMsgIDsResp)(nil),                    // 2: messagedb.GetMessageByMsgIDsResp
	(*ReplyNull)(nil),                                 // 3: messagedb.ReplyNull
	(*ReplyErr)(nil),                                  // 4: messagedb.ReplyErr
	(*ReqHeartBeating)(nil),                           // 5: messagedb.ReqHeartBeating
	(*ReplyHeartBeating)(nil),                         // 6: messagedb.ReplyHeartBeating
	(*ReqInsertOrUpdateUserMsg)(nil),                  // 7: messagedb.ReqInsertOrUpdateUserMsg
	(*DialogIsCreated)(nil),                           // 8: messagedb.DialogIsCreated
	(*ReqGetForwardUserMsg)(nil),                      // 9: messagedb.ReqGetForwardUserMsg
	(*ForWardUserMsg)(nil),                            // 10: messagedb.ForWardUserMsg
	(*ForWardUserMsgList)(nil),                        // 11: messagedb.ForWardUserMsgList
	(*ReqGetUserMsgHistory)(nil),                      // 12: messagedb.ReqGetUserMsgHistory
	(*UserMsgList)(nil),                               // 13: messagedb.UserMsgList
	(*ReqGetUserMsgUUID)(nil),                         // 14: messagedb.ReqGetUserMsgUUID
	(*UUID)(nil),                                      // 15: messagedb.UUID
	(*ReqGetUserMsgIdByUUID)(nil),                     // 16: messagedb.ReqGetUserMsgIdByUUID
	(*MsgId)(nil),                                     // 17: messagedb.MsgId
	(*ReqGetUserMsgListByUUIDs)(nil),                  // 18: messagedb.ReqGetUserMsgListByUUIDs
	(*ReqDeleteUserMsg)(nil),                          // 19: messagedb.ReqDeleteUserMsg
	(*ReqBatchDeleteUserMsg)(nil),                     // 20: messagedb.ReqBatchDeleteUserMsg
	(*ReqGetOneUserMsgByUserIdAndMsgId)(nil),          // 21: messagedb.ReqGetOneUserMsgByUserIdAndMsgId
	(*ReqDeleteUserMsgByUserIdAndWithIdAndEncry)(nil), // 22: messagedb.ReqDeleteUserMsgByUserIdAndWithIdAndEncry
	(*ReqClearHistory)(nil),                           // 23: messagedb.ReqClearHistory
	(*MsgIDList)(nil),                                 // 24: messagedb.MsgIDList
	(*GetMessageHistoryPageByMediaConfig)(nil),        // 25: messagedb.GetMessageHistoryPageByMediaConfig
	(*ReqGetMessageHistoryPageByMedia)(nil),           // 26: messagedb.ReqGetMessageHistoryPageByMedia
	(*ReplyGetMessageHistoryPageByMedia)(nil),         // 27: messagedb.ReplyGetMessageHistoryPageByMedia
	(*ReqGetUserMediaMessageStatisticsByMedia)(nil),   // 28: messagedb.ReqGetUserMediaMessageStatisticsByMedia
	(*UserMediaMessageStatistics)(nil),                // 29: messagedb.UserMediaMessageStatistics
	(*ReplyGetUserMediaMessageStatisticsByMedia)(nil), // 30: messagedb.ReplyGetUserMediaMessageStatisticsByMedia
	(*ReqGetLastLimitDialog)(nil),                     // 31: messagedb.ReqGetLastLimitDialog
	(*UserRating)(nil),                                // 32: messagedb.UserRating
	(*ReplyGetLastLimitDialog)(nil),                   // 33: messagedb.ReplyGetLastLimitDialog
	(*ReqGetRandomStatus)(nil),                        // 34: messagedb.ReqGetRandomStatus
	(*ReplyGetRandomStatus)(nil),                      // 35: messagedb.ReplyGetRandomStatus
	(*ReqSetSuperGroupMsg)(nil),                       // 36: messagedb.ReqSetSuperGroupMsg
	(*ReplySetSuperGroupMsg)(nil),                     // 37: messagedb.ReplySetSuperGroupMsg
	(*ReqGetSuperGroupMsg)(nil),                       // 38: messagedb.ReqGetSuperGroupMsg
	(*ReplyGetSuperGroupMsg)(nil),                     // 39: messagedb.ReplyGetSuperGroupMsg
	(*ReqUserDialogSetUnreadMetionsCount)(nil),        // 40: messagedb.ReqUserDialogSetUnreadMetionsCount
	(*ReplyUserDialogSetUnreadMetionsCount)(nil),      // 41: messagedb.ReplyUserDialogSetUnreadMetionsCount
	(*ReqUserDialogGetUnreadMetionsCount)(nil),        // 42: messagedb.ReqUserDialogGetUnreadMetionsCount
	(*ReplyUserDialogGetUnreadMetionsCount)(nil),      // 43: messagedb.ReplyUserDialogGetUnreadMetionsCount
	(*ReqUserDialogChangeUnreadMetionsCount)(nil),     // 44: messagedb.ReqUserDialogChangeUnreadMetionsCount
	(*ReplyUserDialogChangeUnreadMetionsCount)(nil),   // 45: messagedb.ReplyUserDialogChangeUnreadMetionsCount
	(*ReqUserMessageAtAdd)(nil),                       // 46: messagedb.ReqUserMessageAtAdd
	(*ReplyUserMessageAtAdd)(nil),                     // 47: messagedb.ReplyUserMessageAtAdd
	(*ReqUserMessageAtGet)(nil),                       // 48: messagedb.ReqUserMessageAtGet
	(*ReplyUserMessageAtGet)(nil),                     // 49: messagedb.ReplyUserMessageAtGet
	(*ReqUserMessageAtDel)(nil),                       // 50: messagedb.ReqUserMessageAtDel
	(*ReplyUserMessageAtDel)(nil),                     // 51: messagedb.ReplyUserMessageAtDel
	(*ReqUpdateMessageMediaUnread)(nil),               // 52: messagedb.ReqUpdateMessageMediaUnread
	(*ReqGetUserMessageByUserIDRandomID)(nil),         // 53: messagedb.ReqGetUserMessageByUserIDRandomID
	(*ReqSearch)(nil),                                 // 54: messagedb.ReqSearch
	(*ReplySearch)(nil),                               // 55: messagedb.ReplySearch
	(*ReqGetUserMsgByUserIDMsgIDs)(nil),               // 56: messagedb.ReqGetUserMsgByUserIDMsgIDs
	(*ReplyGetUserMsgByUserIDMsgIDs)(nil),             // 57: messagedb.ReplyGetUserMsgByUserIDMsgIDs
	(*ReqGetUserMsgByUserIDMsgIDsHotData)(nil),        // 58: messagedb.ReqGetUserMsgByUserIDMsgIDsHotData
	(*pbcomm.UserMsg)(nil),                            // 59: pbcomm.UserMsg
	(*pbcomm.Debug)(nil),                              // 60: pbcomm.Debug
}
var file_messagedb_proto_depIdxs = []int32{
	59, // 0: messagedb.GetMessageByMsgIDsResp.Messages:type_name -> pbcomm.UserMsg
	0,  // 1: messagedb.ReqHeartBeating.Type:type_name -> messagedb.HeartBeating
	0,  // 2: messagedb.ReqHeartBeating.Identification:type_name -> messagedb.HeartBeating
	0,  // 3: messagedb.ReplyHeartBeating.Type:type_name -> messagedb.HeartBeating
	0,  // 4: messagedb.ReplyHeartBeating.Result:type_name -> messagedb.HeartBeating
	59, // 5: messagedb.ReqInsertOrUpdateUserMsg.UserMsg:type_name -> pbcomm.UserMsg
	60, // 6: messagedb.ReqInsertOrUpdateUserMsg.Debug:type_name -> pbcomm.Debug
	60, // 7: messagedb.ReqGetForwardUserMsg.Debug:type_name -> pbcomm.Debug
	10, // 8: messagedb.ForWardUserMsgList.ForWardUserMsg:type_name -> messagedb.ForWardUserMsg
	60, // 9: messagedb.ReqGetUserMsgHistory.Debug:type_name -> pbcomm.Debug
	59, // 10: messagedb.UserMsgList.UserMsgs:type_name -> pbcomm.UserMsg
	60, // 11: messagedb.ReqGetUserMsgUUID.Debug:type_name -> pbcomm.Debug
	60, // 12: messagedb.ReqGetUserMsgIdByUUID.Debug:type_name -> pbcomm.Debug
	60, // 13: messagedb.ReqGetUserMsgListByUUIDs.Debug:type_name -> pbcomm.Debug
	60, // 14: messagedb.ReqDeleteUserMsg.Debug:type_name -> pbcomm.Debug
	60, // 15: messagedb.ReqBatchDeleteUserMsg.Debug:type_name -> pbcomm.Debug
	60, // 16: messagedb.ReqGetOneUserMsgByUserIdAndMsgId.Debug:type_name -> pbcomm.Debug
	60, // 17: messagedb.ReqDeleteUserMsgByUserIdAndWithIdAndEncry.Debug:type_name -> pbcomm.Debug
	60, // 18: messagedb.ReqClearHistory.Debug:type_name -> pbcomm.Debug
	25, // 19: messagedb.ReqGetMessageHistoryPageByMedia.GetMessageHistoryPageByMediaConfig:type_name -> messagedb.GetMessageHistoryPageByMediaConfig
	60, // 20: messagedb.ReqGetMessageHistoryPageByMedia.Debug:type_name -> pbcomm.Debug
	59, // 21: messagedb.ReplyGetMessageHistoryPageByMedia.UserMsgs:type_name -> pbcomm.UserMsg
	60, // 22: messagedb.ReqGetUserMediaMessageStatisticsByMedia.Debug:type_name -> pbcomm.Debug
	29, // 23: messagedb.ReplyGetUserMediaMessageStatisticsByMedia.UserMediaMessageStatistics:type_name -> messagedb.UserMediaMessageStatistics
	60, // 24: messagedb.ReqGetLastLimitDialog.Debug:type_name -> pbcomm.Debug
	32, // 25: messagedb.ReplyGetLastLimitDialog.UserRatingList:type_name -> messagedb.UserRating
	60, // 26: messagedb.ReqGetRandomStatus.Debug:type_name -> pbcomm.Debug
	60, // 27: messagedb.ReqSetSuperGroupMsg.Debug:type_name -> pbcomm.Debug
	60, // 28: messagedb.ReqGetSuperGroupMsg.Debug:type_name -> pbcomm.Debug
	60, // 29: messagedb.ReqUserDialogSetUnreadMetionsCount.Debug:type_name -> pbcomm.Debug
	4,  // 30: messagedb.ReplyUserDialogSetUnreadMetionsCount.ReplyErr:type_name -> messagedb.ReplyErr
	60, // 31: messagedb.ReqUserDialogGetUnreadMetionsCount.Debug:type_name -> pbcomm.Debug
	4,  // 32: messagedb.ReplyUserDialogGetUnreadMetionsCount.ReplyErr:type_name -> messagedb.ReplyErr
	60, // 33: messagedb.ReqUserDialogChangeUnreadMetionsCount.Debug:type_name -> pbcomm.Debug
	4,  // 34: messagedb.ReplyUserDialogChangeUnreadMetionsCount.ReplyErr:type_name -> messagedb.ReplyErr
	60, // 35: messagedb.ReqUserMessageAtAdd.Debug:type_name -> pbcomm.Debug
	4,  // 36: messagedb.ReplyUserMessageAtAdd.ReplyErr:type_name -> messagedb.ReplyErr
	60, // 37: messagedb.ReqUserMessageAtGet.Debug:type_name -> pbcomm.Debug
	59, // 38: messagedb.ReplyUserMessageAtGet.Messages:type_name -> pbcomm.UserMsg
	4,  // 39: messagedb.ReplyUserMessageAtGet.ReplyErr:type_name -> messagedb.ReplyErr
	60, // 40: messagedb.ReqUserMessageAtDel.Debug:type_name -> pbcomm.Debug
	4,  // 41: messagedb.ReplyUserMessageAtDel.ReplyErr:type_name -> messagedb.ReplyErr
	59, // 42: messagedb.ReplySearch.Messages:type_name -> pbcomm.UserMsg
	59, // 43: messagedb.ReplyGetUserMsgByUserIDMsgIDs.UserMsgs:type_name -> pbcomm.UserMsg
	5,  // 44: messagedb.MessageDb.HeartBeating:input_type -> messagedb.ReqHeartBeating
	7,  // 45: messagedb.MessageDb.InsertOrUpdateUserMsg:input_type -> messagedb.ReqInsertOrUpdateUserMsg
	9,  // 46: messagedb.MessageDb.GetForwardUserMsg:input_type -> messagedb.ReqGetForwardUserMsg
	12, // 47: messagedb.MessageDb.GetUserMsgHistory:input_type -> messagedb.ReqGetUserMsgHistory
	14, // 48: messagedb.MessageDb.GetUserMsgUUID:input_type -> messagedb.ReqGetUserMsgUUID
	16, // 49: messagedb.MessageDb.GetUserMsgIdByUUID:input_type -> messagedb.ReqGetUserMsgIdByUUID
	18, // 50: messagedb.MessageDb.GetUserMsgListByUUIDs:input_type -> messagedb.ReqGetUserMsgListByUUIDs
	19, // 51: messagedb.MessageDb.DeleteUserMsg:input_type -> messagedb.ReqDeleteUserMsg
	20, // 52: messagedb.MessageDb.BatchDeleteUserMsg:input_type -> messagedb.ReqBatchDeleteUserMsg
	21, // 53: messagedb.MessageDb.GetOneUserMsgByUserIdAndMsgId:input_type -> messagedb.ReqGetOneUserMsgByUserIdAndMsgId
	22, // 54: messagedb.MessageDb.DeleteUserMsgByUserIdAndWithIdAndEncry:input_type -> messagedb.ReqDeleteUserMsgByUserIdAndWithIdAndEncry
	23, // 55: messagedb.MessageDb.ClearHistory:input_type -> messagedb.ReqClearHistory
	26, // 56: messagedb.MessageDb.GetMessageHistoryPageByMedia:input_type -> messagedb.ReqGetMessageHistoryPageByMedia
	28, // 57: messagedb.MessageDb.GetUserMediaMessageStatisticsByMedia:input_type -> messagedb.ReqGetUserMediaMessageStatisticsByMedia
	31, // 58: messagedb.MessageDb.GetLastLimitDialog:input_type -> messagedb.ReqGetLastLimitDialog
	34, // 59: messagedb.MessageDb.GetRandomStatus:input_type -> messagedb.ReqGetRandomStatus
	36, // 60: messagedb.MessageDb.SetSuperGroupMsg:input_type -> messagedb.ReqSetSuperGroupMsg
	38, // 61: messagedb.MessageDb.GetSuperGroupMsg:input_type -> messagedb.ReqGetSuperGroupMsg
	40, // 62: messagedb.MessageDb.UserDialogSetUnreadMetionsCount:input_type -> messagedb.ReqUserDialogSetUnreadMetionsCount
	42, // 63: messagedb.MessageDb.UserDialogGetUnreadMetionsCount:input_type -> messagedb.ReqUserDialogGetUnreadMetionsCount
	44, // 64: messagedb.MessageDb.UserDialogChangeUnreadMetionsCount:input_type -> messagedb.ReqUserDialogChangeUnreadMetionsCount
	46, // 65: messagedb.MessageDb.UserMessageAtAdd:input_type -> messagedb.ReqUserMessageAtAdd
	48, // 66: messagedb.MessageDb.UserMessageAtGet:input_type -> messagedb.ReqUserMessageAtGet
	50, // 67: messagedb.MessageDb.UserMessageAtDel:input_type -> messagedb.ReqUserMessageAtDel
	1,  // 68: messagedb.MessageDb.GetMessageByMsgIDs:input_type -> messagedb.GetMessageByMsgIDsReq
	52, // 69: messagedb.MessageDb.UpdateMessageMediaUnread:input_type -> messagedb.ReqUpdateMessageMediaUnread
	53, // 70: messagedb.MessageDb.GetUserMessageByUserIDRandomID:input_type -> messagedb.ReqGetUserMessageByUserIDRandomID
	54, // 71: messagedb.MessageDb.SearchMessage:input_type -> messagedb.ReqSearch
	56, // 72: messagedb.MessageDb.GetUserMsgByUserIDMsgIDs:input_type -> messagedb.ReqGetUserMsgByUserIDMsgIDs
	58, // 73: messagedb.MessageDb.GetUserMsgByUserIDMsgIDsHotData:input_type -> messagedb.ReqGetUserMsgByUserIDMsgIDsHotData
	6,  // 74: messagedb.MessageDb.HeartBeating:output_type -> messagedb.ReplyHeartBeating
	8,  // 75: messagedb.MessageDb.InsertOrUpdateUserMsg:output_type -> messagedb.DialogIsCreated
	11, // 76: messagedb.MessageDb.GetForwardUserMsg:output_type -> messagedb.ForWardUserMsgList
	13, // 77: messagedb.MessageDb.GetUserMsgHistory:output_type -> messagedb.UserMsgList
	15, // 78: messagedb.MessageDb.GetUserMsgUUID:output_type -> messagedb.UUID
	17, // 79: messagedb.MessageDb.GetUserMsgIdByUUID:output_type -> messagedb.MsgId
	13, // 80: messagedb.MessageDb.GetUserMsgListByUUIDs:output_type -> messagedb.UserMsgList
	3,  // 81: messagedb.MessageDb.DeleteUserMsg:output_type -> messagedb.ReplyNull
	3,  // 82: messagedb.MessageDb.BatchDeleteUserMsg:output_type -> messagedb.ReplyNull
	59, // 83: messagedb.MessageDb.GetOneUserMsgByUserIdAndMsgId:output_type -> pbcomm.UserMsg
	3,  // 84: messagedb.MessageDb.DeleteUserMsgByUserIdAndWithIdAndEncry:output_type -> messagedb.ReplyNull
	24, // 85: messagedb.MessageDb.ClearHistory:output_type -> messagedb.MsgIDList
	27, // 86: messagedb.MessageDb.GetMessageHistoryPageByMedia:output_type -> messagedb.ReplyGetMessageHistoryPageByMedia
	30, // 87: messagedb.MessageDb.GetUserMediaMessageStatisticsByMedia:output_type -> messagedb.ReplyGetUserMediaMessageStatisticsByMedia
	33, // 88: messagedb.MessageDb.GetLastLimitDialog:output_type -> messagedb.ReplyGetLastLimitDialog
	35, // 89: messagedb.MessageDb.GetRandomStatus:output_type -> messagedb.ReplyGetRandomStatus
	37, // 90: messagedb.MessageDb.SetSuperGroupMsg:output_type -> messagedb.ReplySetSuperGroupMsg
	39, // 91: messagedb.MessageDb.GetSuperGroupMsg:output_type -> messagedb.ReplyGetSuperGroupMsg
	41, // 92: messagedb.MessageDb.UserDialogSetUnreadMetionsCount:output_type -> messagedb.ReplyUserDialogSetUnreadMetionsCount
	43, // 93: messagedb.MessageDb.UserDialogGetUnreadMetionsCount:output_type -> messagedb.ReplyUserDialogGetUnreadMetionsCount
	45, // 94: messagedb.MessageDb.UserDialogChangeUnreadMetionsCount:output_type -> messagedb.ReplyUserDialogChangeUnreadMetionsCount
	47, // 95: messagedb.MessageDb.UserMessageAtAdd:output_type -> messagedb.ReplyUserMessageAtAdd
	49, // 96: messagedb.MessageDb.UserMessageAtGet:output_type -> messagedb.ReplyUserMessageAtGet
	51, // 97: messagedb.MessageDb.UserMessageAtDel:output_type -> messagedb.ReplyUserMessageAtDel
	2,  // 98: messagedb.MessageDb.GetMessageByMsgIDs:output_type -> messagedb.GetMessageByMsgIDsResp
	3,  // 99: messagedb.MessageDb.UpdateMessageMediaUnread:output_type -> messagedb.ReplyNull
	59, // 100: messagedb.MessageDb.GetUserMessageByUserIDRandomID:output_type -> pbcomm.UserMsg
	55, // 101: messagedb.MessageDb.SearchMessage:output_type -> messagedb.ReplySearch
	57, // 102: messagedb.MessageDb.GetUserMsgByUserIDMsgIDs:output_type -> messagedb.ReplyGetUserMsgByUserIDMsgIDs
	57, // 103: messagedb.MessageDb.GetUserMsgByUserIDMsgIDsHotData:output_type -> messagedb.ReplyGetUserMsgByUserIDMsgIDs
	74, // [74:104] is the sub-list for method output_type
	44, // [44:74] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_messagedb_proto_init() }
func file_messagedb_proto_init() {
	if File_messagedb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messagedb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageByMsgIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageByMsgIDsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyErr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqHeartBeating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyHeartBeating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqInsertOrUpdateUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialogIsCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetForwardUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForWardUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForWardUserMsgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserMsgHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMsgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserMsgUUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserMsgIdByUUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserMsgListByUUIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBatchDeleteUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetOneUserMsgByUserIdAndMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteUserMsgByUserIdAndWithIdAndEncry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqClearHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgIDList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageHistoryPageByMediaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetMessageHistoryPageByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetMessageHistoryPageByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserMediaMessageStatisticsByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMediaMessageStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetUserMediaMessageStatisticsByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetLastLimitDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetLastLimitDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetRandomStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetRandomStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSetSuperGroupMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplySetSuperGroupMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetSuperGroupMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetSuperGroupMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserDialogSetUnreadMetionsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUserDialogSetUnreadMetionsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserDialogGetUnreadMetionsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUserDialogGetUnreadMetionsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserDialogChangeUnreadMetionsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUserDialogChangeUnreadMetionsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserMessageAtAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUserMessageAtAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserMessageAtGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUserMessageAtGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserMessageAtDel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUserMessageAtDel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateMessageMediaUnread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserMessageByUserIDRandomID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplySearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserMsgByUserIDMsgIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetUserMsgByUserIDMsgIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserMsgByUserIDMsgIDsHotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messagedb_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_messagedb_proto_goTypes,
		DependencyIndexes: file_messagedb_proto_depIdxs,
		EnumInfos:         file_messagedb_proto_enumTypes,
		MessageInfos:      file_messagedb_proto_msgTypes,
	}.Build()
	File_messagedb_proto = out.File
	file_messagedb_proto_rawDesc = nil
	file_messagedb_proto_goTypes = nil
	file_messagedb_proto_depIdxs = nil
}
