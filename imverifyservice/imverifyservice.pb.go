// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/imverifyservice/imverifyservice.proto

/*
Package imverifyservice is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/imverifyservice/imverifyservice.proto

It has these top-level messages:

	GetAccountTokenMsg
	GetAccountTokenMsgReply
	VerifyAccountTokenMsg
	VerifyAccountTokenMsgReply
*/
package imverifyservice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type VerifyServiceResultCode int32

const (
	VerifyServiceResultCode_ResultCode_Ok                             VerifyServiceResultCode = 0
	VerifyServiceResultCode_ResultCode_Token_Invalid                  VerifyServiceResultCode = 1001
	VerifyServiceResultCode_ResultCode_Parameter_Exception            VerifyServiceResultCode = 1002
	VerifyServiceResultCode_ResultCode_Cailiao_Side_Service_Exception VerifyServiceResultCode = 1003
	VerifyServiceResultCode_ResultCode_Game_Side_Service_Exception    VerifyServiceResultCode = 1004
)

var VerifyServiceResultCode_name = map[int32]string{
	0:    "ResultCode_Ok",
	1001: "ResultCode_Token_Invalid",
	1002: "ResultCode_Parameter_Exception",
	1003: "ResultCode_Cailiao_Side_Service_Exception",
	1004: "ResultCode_Game_Side_Service_Exception",
}
var VerifyServiceResultCode_value = map[string]int32{
	"ResultCode_Ok":                             0,
	"ResultCode_Token_Invalid":                  1001,
	"ResultCode_Parameter_Exception":            1002,
	"ResultCode_Cailiao_Side_Service_Exception": 1003,
	"ResultCode_Game_Side_Service_Exception":    1004,
}

func (x VerifyServiceResultCode) String() string {
	return proto.EnumName(VerifyServiceResultCode_name, int32(x))
}
func (VerifyServiceResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImverifyservice, []int{0}
}

// 获取帐户token消息请求参数
type GetAccountTokenMsg struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *GetAccountTokenMsg) Reset()         { *m = GetAccountTokenMsg{} }
func (m *GetAccountTokenMsg) String() string { return proto.CompactTextString(m) }
func (*GetAccountTokenMsg) ProtoMessage()    {}
func (*GetAccountTokenMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorImverifyservice, []int{0}
}

func (m *GetAccountTokenMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 获取帐户token消息响应参数
type GetAccountTokenMsgReply struct {
	ResultCode VerifyServiceResultCode `protobuf:"varint,1,opt,name=ResultCode,proto3,enum=imverifyservice.VerifyServiceResultCode" json:"ResultCode,omitempty"`
	Token      string                  `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	URL        string                  `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (m *GetAccountTokenMsgReply) Reset()         { *m = GetAccountTokenMsgReply{} }
func (m *GetAccountTokenMsgReply) String() string { return proto.CompactTextString(m) }
func (*GetAccountTokenMsgReply) ProtoMessage()    {}
func (*GetAccountTokenMsgReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImverifyservice, []int{1}
}

func (m *GetAccountTokenMsgReply) GetResultCode() VerifyServiceResultCode {
	if m != nil {
		return m.ResultCode
	}
	return VerifyServiceResultCode_ResultCode_Ok
}

func (m *GetAccountTokenMsgReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GetAccountTokenMsgReply) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

// 验证帐户token消息请求参数
type VerifyAccountTokenMsg struct {
	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *VerifyAccountTokenMsg) Reset()         { *m = VerifyAccountTokenMsg{} }
func (m *VerifyAccountTokenMsg) String() string { return proto.CompactTextString(m) }
func (*VerifyAccountTokenMsg) ProtoMessage()    {}
func (*VerifyAccountTokenMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorImverifyservice, []int{2}
}

func (m *VerifyAccountTokenMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *VerifyAccountTokenMsg) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 验证帐户token消息响应参数
type VerifyAccountTokenMsgReply struct {
	ResultCode VerifyServiceResultCode `protobuf:"varint,1,opt,name=ResultCode,proto3,enum=imverifyservice.VerifyServiceResultCode" json:"ResultCode,omitempty"`
	UserId     int32                   `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *VerifyAccountTokenMsgReply) Reset()         { *m = VerifyAccountTokenMsgReply{} }
func (m *VerifyAccountTokenMsgReply) String() string { return proto.CompactTextString(m) }
func (*VerifyAccountTokenMsgReply) ProtoMessage()    {}
func (*VerifyAccountTokenMsgReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImverifyservice, []int{3}
}

func (m *VerifyAccountTokenMsgReply) GetResultCode() VerifyServiceResultCode {
	if m != nil {
		return m.ResultCode
	}
	return VerifyServiceResultCode_ResultCode_Ok
}

func (m *VerifyAccountTokenMsgReply) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func init() {
	proto.RegisterType((*GetAccountTokenMsg)(nil), "imverifyservice.GetAccountTokenMsg")
	proto.RegisterType((*GetAccountTokenMsgReply)(nil), "imverifyservice.GetAccountTokenMsgReply")
	proto.RegisterType((*VerifyAccountTokenMsg)(nil), "imverifyservice.VerifyAccountTokenMsg")
	proto.RegisterType((*VerifyAccountTokenMsgReply)(nil), "imverifyservice.VerifyAccountTokenMsgReply")
	proto.RegisterEnum("imverifyservice.VerifyServiceResultCode", VerifyServiceResultCode_name, VerifyServiceResultCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImVerifyService service

type ImVerifyServiceClient interface {
	// 获取帐户token
	GetAccountToken(ctx context.Context, in *GetAccountTokenMsg, opts ...grpc.CallOption) (*GetAccountTokenMsgReply, error)
	// 验证帐户token
	VerifyAccountToken(ctx context.Context, in *VerifyAccountTokenMsg, opts ...grpc.CallOption) (*VerifyAccountTokenMsgReply, error)
}

type imVerifyServiceClient struct {
	cc *grpc.ClientConn
}

func NewImVerifyServiceClient(cc *grpc.ClientConn) ImVerifyServiceClient {
	return &imVerifyServiceClient{cc}
}

func (c *imVerifyServiceClient) GetAccountToken(ctx context.Context, in *GetAccountTokenMsg, opts ...grpc.CallOption) (*GetAccountTokenMsgReply, error) {
	out := new(GetAccountTokenMsgReply)
	err := grpc.Invoke(ctx, "/imverifyservice.ImVerifyService/GetAccountToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imVerifyServiceClient) VerifyAccountToken(ctx context.Context, in *VerifyAccountTokenMsg, opts ...grpc.CallOption) (*VerifyAccountTokenMsgReply, error) {
	out := new(VerifyAccountTokenMsgReply)
	err := grpc.Invoke(ctx, "/imverifyservice.ImVerifyService/VerifyAccountToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImVerifyService service

type ImVerifyServiceServer interface {
	// 获取帐户token
	GetAccountToken(context.Context, *GetAccountTokenMsg) (*GetAccountTokenMsgReply, error)
	// 验证帐户token
	VerifyAccountToken(context.Context, *VerifyAccountTokenMsg) (*VerifyAccountTokenMsgReply, error)
}

func RegisterImVerifyServiceServer(s *grpc.Server, srv ImVerifyServiceServer) {
	s.RegisterService(&_ImVerifyService_serviceDesc, srv)
}

func _ImVerifyService_GetAccountToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImVerifyServiceServer).GetAccountToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imverifyservice.ImVerifyService/GetAccountToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImVerifyServiceServer).GetAccountToken(ctx, req.(*GetAccountTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImVerifyService_VerifyAccountToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccountTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImVerifyServiceServer).VerifyAccountToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imverifyservice.ImVerifyService/VerifyAccountToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImVerifyServiceServer).VerifyAccountToken(ctx, req.(*VerifyAccountTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImVerifyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imverifyservice.ImVerifyService",
	HandlerType: (*ImVerifyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountToken",
			Handler:    _ImVerifyService_GetAccountToken_Handler,
		},
		{
			MethodName: "VerifyAccountToken",
			Handler:    _ImVerifyService_VerifyAccountToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/imverifyservice/imverifyservice.proto",
}

func (m *GetAccountTokenMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImverifyservice(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetAccountTokenMsgReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountTokenMsgReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResultCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImverifyservice(dAtA, i, uint64(m.ResultCode))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImverifyservice(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImverifyservice(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	return i, nil
}

func (m *VerifyAccountTokenMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyAccountTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImverifyservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImverifyservice(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *VerifyAccountTokenMsgReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyAccountTokenMsgReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResultCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImverifyservice(dAtA, i, uint64(m.ResultCode))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImverifyservice(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func encodeVarintImverifyservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetAccountTokenMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImverifyservice(uint64(m.UserId))
	}
	return n
}

func (m *GetAccountTokenMsgReply) Size() (n int) {
	var l int
	_ = l
	if m.ResultCode != 0 {
		n += 1 + sovImverifyservice(uint64(m.ResultCode))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovImverifyservice(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovImverifyservice(uint64(l))
	}
	return n
}

func (m *VerifyAccountTokenMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImverifyservice(uint64(m.UserId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovImverifyservice(uint64(l))
	}
	return n
}

func (m *VerifyAccountTokenMsgReply) Size() (n int) {
	var l int
	_ = l
	if m.ResultCode != 0 {
		n += 1 + sovImverifyservice(uint64(m.ResultCode))
	}
	if m.UserId != 0 {
		n += 1 + sovImverifyservice(uint64(m.UserId))
	}
	return n
}

func sovImverifyservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImverifyservice(x uint64) (n int) {
	return sovImverifyservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAccountTokenMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImverifyservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountTokenMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountTokenMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImverifyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImverifyservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImverifyservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountTokenMsgReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImverifyservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountTokenMsgReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountTokenMsgReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImverifyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= (VerifyServiceResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImverifyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImverifyservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImverifyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImverifyservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImverifyservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImverifyservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyAccountTokenMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImverifyservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyAccountTokenMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyAccountTokenMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImverifyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImverifyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImverifyservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImverifyservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImverifyservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyAccountTokenMsgReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImverifyservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyAccountTokenMsgReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyAccountTokenMsgReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImverifyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= (VerifyServiceResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImverifyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImverifyservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImverifyservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImverifyservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImverifyservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImverifyservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImverifyservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImverifyservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImverifyservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImverifyservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImverifyservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImverifyservice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/imverifyservice/imverifyservice.proto", fileDescriptorImverifyservice)
}

var fileDescriptorImverifyservice = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x77, 0x76, 0xd9, 0x0d, 0x1e, 0xd4, 0xc6, 0x83, 0xba, 0x61, 0xc1, 0xb0, 0x64, 0x61,
	0x89, 0xae, 0x64, 0x61, 0x7d, 0x02, 0x2d, 0xa5, 0x56, 0x14, 0x25, 0xb5, 0xde, 0x86, 0x49, 0x72,
	0x5a, 0x87, 0x26, 0x99, 0x30, 0x99, 0x16, 0x7b, 0xe3, 0x0b, 0xf8, 0x62, 0xde, 0x08, 0x3e, 0x82,
	0xe4, 0xce, 0x3f, 0x0f, 0x21, 0x4d, 0x0b, 0x8d, 0x49, 0x0b, 0xbd, 0xf0, 0x2e, 0xdf, 0xc9, 0xef,
	0x7c, 0xf3, 0x4d, 0xce, 0x09, 0xbc, 0x9a, 0x08, 0x9d, 0xf0, 0xd0, 0x8b, 0x3e, 0x72, 0x5d, 0x90,
	0x9a, 0x93, 0xf2, 0x44, 0x7a, 0x2d, 0x32, 0x4d, 0x6a, 0xcc, 0x23, 0xca, 0x95, 0x0c, 0x67, 0xe3,
	0x6b, 0x91, 0xce, 0x49, 0x89, 0xf1, 0x62, 0x49, 0x88, 0x88, 0x9a, 0xda, 0xcb, 0x95, 0xd4, 0x12,
	0x3b, 0x8d, 0xb2, 0xf3, 0x14, 0xb0, 0x4f, 0xfa, 0x79, 0x14, 0xc9, 0x59, 0xa6, 0xdf, 0xcb, 0x29,
	0x65, 0x6f, 0x8a, 0x09, 0x3e, 0x84, 0x93, 0x51, 0x41, 0x6a, 0x10, 0x5b, 0xec, 0x9c, 0xb9, 0xc7,
	0xfe, 0x5a, 0x39, 0x5f, 0x18, 0x9c, 0xb6, 0x71, 0x9f, 0xf2, 0x64, 0x81, 0x2f, 0x01, 0x7c, 0x2a,
	0x66, 0x89, 0xee, 0xca, 0x98, 0xaa, 0xbe, 0xbb, 0x37, 0xae, 0xd7, 0x8c, 0xf1, 0xa1, 0x52, 0xc3,
	0x95, 0xda, 0xf0, 0x7e, 0xad, 0x17, 0xef, 0xc3, 0x71, 0x65, 0x6d, 0x1d, 0x9e, 0x33, 0xf7, 0x96,
	0xbf, 0x12, 0x68, 0xc2, 0xd1, 0xc8, 0x7f, 0x6d, 0x1d, 0x55, 0xb5, 0xe5, 0xa3, 0xd3, 0x83, 0x07,
	0x2b, 0xbb, 0x3d, 0xe3, 0x6f, 0x37, 0x76, 0x3e, 0xc3, 0xd9, 0x56, 0x9b, 0xff, 0x7d, 0xad, 0x4d,
	0xaa, 0xc3, 0x7a, 0xaa, 0x27, 0xdf, 0x18, 0x9c, 0xee, 0xe8, 0xc7, 0x7b, 0x70, 0x67, 0xa3, 0x82,
	0xb7, 0x53, 0xf3, 0x00, 0x1f, 0x81, 0x55, 0x2b, 0x55, 0x61, 0x83, 0x41, 0x36, 0xe7, 0x89, 0x88,
	0xcd, 0x9f, 0x06, 0x5e, 0x80, 0x5d, 0x7b, 0xfd, 0x8e, 0x2b, 0x9e, 0x92, 0x26, 0x15, 0xf4, 0x3e,
	0x45, 0x94, 0x6b, 0x21, 0x33, 0xf3, 0x97, 0x81, 0x1e, 0x3c, 0xae, 0x41, 0x5d, 0x2e, 0x12, 0xc1,
	0x65, 0x30, 0x14, 0x31, 0x05, 0xeb, 0x0c, 0x35, 0xfe, 0xb7, 0x81, 0x57, 0x70, 0x59, 0xe3, 0xfb,
	0x3c, 0xa5, 0x5d, 0xf0, 0x1f, 0xe3, 0xa6, 0x64, 0xd0, 0x19, 0xa4, 0xff, 0xdc, 0x08, 0x43, 0xe8,
	0x34, 0xf6, 0x06, 0x2f, 0x5a, 0x1f, 0xb1, 0xbd, 0x59, 0x67, 0xee, 0x1e, 0x50, 0x35, 0x27, 0xe7,
	0x00, 0xa7, 0x80, 0xed, 0x39, 0xe2, 0xe5, 0x8e, 0x59, 0x35, 0x4f, 0xba, 0xda, 0x8f, 0x5b, 0x1f,
	0xf6, 0xe2, 0xf6, 0xd7, 0xd2, 0x66, 0xdf, 0x4b, 0x9b, 0xfd, 0x28, 0x6d, 0x16, 0x9e, 0x54, 0x7f,
	0xd7, 0xb3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x45, 0x63, 0x76, 0xab, 0x03, 0x00, 0x00,
}
