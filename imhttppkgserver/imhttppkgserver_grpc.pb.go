// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imhttppkgserver.proto

package imhttppkgserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImHttpPkgServerClient is the client API for ImHttpPkgServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImHttpPkgServerClient interface {
	StoreHttpPkg(ctx context.Context, in *ReqStoreHttpPkg, opts ...grpc.CallOption) (*ReplyStoreHttpPkg, error)
	// 批量插入数据
	StoreHttpPkgList(ctx context.Context, in *ReqStoreHttpPkgList, opts ...grpc.CallOption) (*ReplyStoreHttpPkgList, error)
	GetHttpRequest(ctx context.Context, in *ReqGetHttpRequest, opts ...grpc.CallOption) (*ReplyGetHttpRequest, error)
	StoreHttpPkgByKeySessionId(ctx context.Context, in *ReqStoreHttpPkgByKeySession, opts ...grpc.CallOption) (*ReplyStoreHttpPkg, error)
	GetHttpByKeySessionId(ctx context.Context, in *ReqGetHttpRequestByKeySession, opts ...grpc.CallOption) (*ReplyGetHttpRequest, error)
}

type imHttpPkgServerClient struct {
	cc grpc.ClientConnInterface
}

func NewImHttpPkgServerClient(cc grpc.ClientConnInterface) ImHttpPkgServerClient {
	return &imHttpPkgServerClient{cc}
}

func (c *imHttpPkgServerClient) StoreHttpPkg(ctx context.Context, in *ReqStoreHttpPkg, opts ...grpc.CallOption) (*ReplyStoreHttpPkg, error) {
	out := new(ReplyStoreHttpPkg)
	err := c.cc.Invoke(ctx, "/imhttppkgserver.ImHttpPkgServer/StoreHttpPkg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imHttpPkgServerClient) StoreHttpPkgList(ctx context.Context, in *ReqStoreHttpPkgList, opts ...grpc.CallOption) (*ReplyStoreHttpPkgList, error) {
	out := new(ReplyStoreHttpPkgList)
	err := c.cc.Invoke(ctx, "/imhttppkgserver.ImHttpPkgServer/StoreHttpPkgList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imHttpPkgServerClient) GetHttpRequest(ctx context.Context, in *ReqGetHttpRequest, opts ...grpc.CallOption) (*ReplyGetHttpRequest, error) {
	out := new(ReplyGetHttpRequest)
	err := c.cc.Invoke(ctx, "/imhttppkgserver.ImHttpPkgServer/GetHttpRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imHttpPkgServerClient) StoreHttpPkgByKeySessionId(ctx context.Context, in *ReqStoreHttpPkgByKeySession, opts ...grpc.CallOption) (*ReplyStoreHttpPkg, error) {
	out := new(ReplyStoreHttpPkg)
	err := c.cc.Invoke(ctx, "/imhttppkgserver.ImHttpPkgServer/StoreHttpPkgByKeySessionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imHttpPkgServerClient) GetHttpByKeySessionId(ctx context.Context, in *ReqGetHttpRequestByKeySession, opts ...grpc.CallOption) (*ReplyGetHttpRequest, error) {
	out := new(ReplyGetHttpRequest)
	err := c.cc.Invoke(ctx, "/imhttppkgserver.ImHttpPkgServer/GetHttpByKeySessionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImHttpPkgServerServer is the server API for ImHttpPkgServer service.
// All implementations must embed UnimplementedImHttpPkgServerServer
// for forward compatibility
type ImHttpPkgServerServer interface {
	StoreHttpPkg(context.Context, *ReqStoreHttpPkg) (*ReplyStoreHttpPkg, error)
	// 批量插入数据
	StoreHttpPkgList(context.Context, *ReqStoreHttpPkgList) (*ReplyStoreHttpPkgList, error)
	GetHttpRequest(context.Context, *ReqGetHttpRequest) (*ReplyGetHttpRequest, error)
	StoreHttpPkgByKeySessionId(context.Context, *ReqStoreHttpPkgByKeySession) (*ReplyStoreHttpPkg, error)
	GetHttpByKeySessionId(context.Context, *ReqGetHttpRequestByKeySession) (*ReplyGetHttpRequest, error)
	mustEmbedUnimplementedImHttpPkgServerServer()
}

// UnimplementedImHttpPkgServerServer must be embedded to have forward compatible implementations.
type UnimplementedImHttpPkgServerServer struct {
}

func (UnimplementedImHttpPkgServerServer) StoreHttpPkg(context.Context, *ReqStoreHttpPkg) (*ReplyStoreHttpPkg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreHttpPkg not implemented")
}
func (UnimplementedImHttpPkgServerServer) StoreHttpPkgList(context.Context, *ReqStoreHttpPkgList) (*ReplyStoreHttpPkgList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreHttpPkgList not implemented")
}
func (UnimplementedImHttpPkgServerServer) GetHttpRequest(context.Context, *ReqGetHttpRequest) (*ReplyGetHttpRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHttpRequest not implemented")
}
func (UnimplementedImHttpPkgServerServer) StoreHttpPkgByKeySessionId(context.Context, *ReqStoreHttpPkgByKeySession) (*ReplyStoreHttpPkg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreHttpPkgByKeySessionId not implemented")
}
func (UnimplementedImHttpPkgServerServer) GetHttpByKeySessionId(context.Context, *ReqGetHttpRequestByKeySession) (*ReplyGetHttpRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHttpByKeySessionId not implemented")
}
func (UnimplementedImHttpPkgServerServer) mustEmbedUnimplementedImHttpPkgServerServer() {}

// UnsafeImHttpPkgServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImHttpPkgServerServer will
// result in compilation errors.
type UnsafeImHttpPkgServerServer interface {
	mustEmbedUnimplementedImHttpPkgServerServer()
}

func RegisterImHttpPkgServerServer(s grpc.ServiceRegistrar, srv ImHttpPkgServerServer) {
	s.RegisterService(&ImHttpPkgServer_ServiceDesc, srv)
}

func _ImHttpPkgServer_StoreHttpPkg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreHttpPkg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImHttpPkgServerServer).StoreHttpPkg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imhttppkgserver.ImHttpPkgServer/StoreHttpPkg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImHttpPkgServerServer).StoreHttpPkg(ctx, req.(*ReqStoreHttpPkg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImHttpPkgServer_StoreHttpPkgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreHttpPkgList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImHttpPkgServerServer).StoreHttpPkgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imhttppkgserver.ImHttpPkgServer/StoreHttpPkgList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImHttpPkgServerServer).StoreHttpPkgList(ctx, req.(*ReqStoreHttpPkgList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImHttpPkgServer_GetHttpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetHttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImHttpPkgServerServer).GetHttpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imhttppkgserver.ImHttpPkgServer/GetHttpRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImHttpPkgServerServer).GetHttpRequest(ctx, req.(*ReqGetHttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImHttpPkgServer_StoreHttpPkgByKeySessionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreHttpPkgByKeySession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImHttpPkgServerServer).StoreHttpPkgByKeySessionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imhttppkgserver.ImHttpPkgServer/StoreHttpPkgByKeySessionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImHttpPkgServerServer).StoreHttpPkgByKeySessionId(ctx, req.(*ReqStoreHttpPkgByKeySession))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImHttpPkgServer_GetHttpByKeySessionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetHttpRequestByKeySession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImHttpPkgServerServer).GetHttpByKeySessionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imhttppkgserver.ImHttpPkgServer/GetHttpByKeySessionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImHttpPkgServerServer).GetHttpByKeySessionId(ctx, req.(*ReqGetHttpRequestByKeySession))
	}
	return interceptor(ctx, in, info, handler)
}

// ImHttpPkgServer_ServiceDesc is the grpc.ServiceDesc for ImHttpPkgServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImHttpPkgServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imhttppkgserver.ImHttpPkgServer",
	HandlerType: (*ImHttpPkgServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreHttpPkg",
			Handler:    _ImHttpPkgServer_StoreHttpPkg_Handler,
		},
		{
			MethodName: "StoreHttpPkgList",
			Handler:    _ImHttpPkgServer_StoreHttpPkgList_Handler,
		},
		{
			MethodName: "GetHttpRequest",
			Handler:    _ImHttpPkgServer_GetHttpRequest_Handler,
		},
		{
			MethodName: "StoreHttpPkgByKeySessionId",
			Handler:    _ImHttpPkgServer_StoreHttpPkgByKeySessionId_Handler,
		},
		{
			MethodName: "GetHttpByKeySessionId",
			Handler:    _ImHttpPkgServer_GetHttpByKeySessionId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imhttppkgserver.proto",
}
