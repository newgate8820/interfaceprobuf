// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: imhttppkgserver.proto

/*
Package imhttppkgserver is a generated protocol buffer package.

It is generated from these files:

	imhttppkgserver.proto

It has these top-level messages:

	ReqStoreHttpPkgByKeySession
	ReqGetHttpRequestByKeySession
	ReqStoreHttpPkg
	ReqStoreHttpPkgList
	ReplyStoreHttpPkgList
	ReplyStoreHttpPkg
	ReqGetHttpRequest
	ReplyGetHttpRequest
*/
package imhttppkgserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ReqStoreHttpPkgByKeySession struct {
	KeyId     uint64   `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	SessionId uint64   `protobuf:"varint,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	IsMedia   bool     `protobuf:"varint,3,opt,name=isMedia,proto3" json:"isMedia,omitempty"`
	Messages  [][]byte `protobuf:"bytes,4,rep,name=messages" json:"messages,omitempty"`
}

func (m *ReqStoreHttpPkgByKeySession) Reset()         { *m = ReqStoreHttpPkgByKeySession{} }
func (m *ReqStoreHttpPkgByKeySession) String() string { return proto.CompactTextString(m) }
func (*ReqStoreHttpPkgByKeySession) ProtoMessage()    {}
func (*ReqStoreHttpPkgByKeySession) Descriptor() ([]byte, []int) {
	return fileDescriptorImhttppkgserver, []int{0}
}

func (m *ReqStoreHttpPkgByKeySession) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqStoreHttpPkgByKeySession) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *ReqStoreHttpPkgByKeySession) GetIsMedia() bool {
	if m != nil {
		return m.IsMedia
	}
	return false
}

func (m *ReqStoreHttpPkgByKeySession) GetMessages() [][]byte {
	if m != nil {
		return m.Messages
	}
	return nil
}

type ReqGetHttpRequestByKeySession struct {
	KeyId     uint64 `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	SessionId uint64 `protobuf:"varint,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	IsMedia   bool   `protobuf:"varint,3,opt,name=isMedia,proto3" json:"isMedia,omitempty"`
}

func (m *ReqGetHttpRequestByKeySession) Reset()         { *m = ReqGetHttpRequestByKeySession{} }
func (m *ReqGetHttpRequestByKeySession) String() string { return proto.CompactTextString(m) }
func (*ReqGetHttpRequestByKeySession) ProtoMessage()    {}
func (*ReqGetHttpRequestByKeySession) Descriptor() ([]byte, []int) {
	return fileDescriptorImhttppkgserver, []int{1}
}

func (m *ReqGetHttpRequestByKeySession) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqGetHttpRequestByKeySession) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *ReqGetHttpRequestByKeySession) GetIsMedia() bool {
	if m != nil {
		return m.IsMedia
	}
	return false
}

type ReqStoreHttpPkg struct {
	KeyId   uint64 `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	IsMedia bool   `protobuf:"varint,2,opt,name=isMedia,proto3" json:"isMedia,omitempty"`
	Message []byte `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ReqStoreHttpPkg) Reset()                    { *m = ReqStoreHttpPkg{} }
func (m *ReqStoreHttpPkg) String() string            { return proto.CompactTextString(m) }
func (*ReqStoreHttpPkg) ProtoMessage()               {}
func (*ReqStoreHttpPkg) Descriptor() ([]byte, []int) { return fileDescriptorImhttppkgserver, []int{2} }

func (m *ReqStoreHttpPkg) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqStoreHttpPkg) GetIsMedia() bool {
	if m != nil {
		return m.IsMedia
	}
	return false
}

func (m *ReqStoreHttpPkg) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type ReqStoreHttpPkgList struct {
	KeyId    uint64   `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	IsMedia  bool     `protobuf:"varint,2,opt,name=isMedia,proto3" json:"isMedia,omitempty"`
	Messages [][]byte `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
}

func (m *ReqStoreHttpPkgList) Reset()         { *m = ReqStoreHttpPkgList{} }
func (m *ReqStoreHttpPkgList) String() string { return proto.CompactTextString(m) }
func (*ReqStoreHttpPkgList) ProtoMessage()    {}
func (*ReqStoreHttpPkgList) Descriptor() ([]byte, []int) {
	return fileDescriptorImhttppkgserver, []int{3}
}

func (m *ReqStoreHttpPkgList) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqStoreHttpPkgList) GetIsMedia() bool {
	if m != nil {
		return m.IsMedia
	}
	return false
}

func (m *ReqStoreHttpPkgList) GetMessages() [][]byte {
	if m != nil {
		return m.Messages
	}
	return nil
}

type ReplyStoreHttpPkgList struct {
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (m *ReplyStoreHttpPkgList) Reset()         { *m = ReplyStoreHttpPkgList{} }
func (m *ReplyStoreHttpPkgList) String() string { return proto.CompactTextString(m) }
func (*ReplyStoreHttpPkgList) ProtoMessage()    {}
func (*ReplyStoreHttpPkgList) Descriptor() ([]byte, []int) {
	return fileDescriptorImhttppkgserver, []int{4}
}

func (m *ReplyStoreHttpPkgList) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ReplyStoreHttpPkg struct {
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (m *ReplyStoreHttpPkg) Reset()         { *m = ReplyStoreHttpPkg{} }
func (m *ReplyStoreHttpPkg) String() string { return proto.CompactTextString(m) }
func (*ReplyStoreHttpPkg) ProtoMessage()    {}
func (*ReplyStoreHttpPkg) Descriptor() ([]byte, []int) {
	return fileDescriptorImhttppkgserver, []int{5}
}

func (m *ReplyStoreHttpPkg) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ReqGetHttpRequest struct {
	KeyId   uint64 `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	IsMedia bool   `protobuf:"varint,2,opt,name=isMedia,proto3" json:"isMedia,omitempty"`
}

func (m *ReqGetHttpRequest) Reset()         { *m = ReqGetHttpRequest{} }
func (m *ReqGetHttpRequest) String() string { return proto.CompactTextString(m) }
func (*ReqGetHttpRequest) ProtoMessage()    {}
func (*ReqGetHttpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorImhttppkgserver, []int{6}
}

func (m *ReqGetHttpRequest) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqGetHttpRequest) GetIsMedia() bool {
	if m != nil {
		return m.IsMedia
	}
	return false
}

type ReplyGetHttpRequest struct {
	Messages [][]byte `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *ReplyGetHttpRequest) Reset()         { *m = ReplyGetHttpRequest{} }
func (m *ReplyGetHttpRequest) String() string { return proto.CompactTextString(m) }
func (*ReplyGetHttpRequest) ProtoMessage()    {}
func (*ReplyGetHttpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorImhttppkgserver, []int{7}
}

func (m *ReplyGetHttpRequest) GetMessages() [][]byte {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqStoreHttpPkgByKeySession)(nil), "imhttppkgserver.ReqStoreHttpPkgByKeySession")
	proto.RegisterType((*ReqGetHttpRequestByKeySession)(nil), "imhttppkgserver.ReqGetHttpRequestByKeySession")
	proto.RegisterType((*ReqStoreHttpPkg)(nil), "imhttppkgserver.ReqStoreHttpPkg")
	proto.RegisterType((*ReqStoreHttpPkgList)(nil), "imhttppkgserver.ReqStoreHttpPkgList")
	proto.RegisterType((*ReplyStoreHttpPkgList)(nil), "imhttppkgserver.ReplyStoreHttpPkgList")
	proto.RegisterType((*ReplyStoreHttpPkg)(nil), "imhttppkgserver.ReplyStoreHttpPkg")
	proto.RegisterType((*ReqGetHttpRequest)(nil), "imhttppkgserver.ReqGetHttpRequest")
	proto.RegisterType((*ReplyGetHttpRequest)(nil), "imhttppkgserver.ReplyGetHttpRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImHttpPkgServer service

type ImHttpPkgServerClient interface {
	StoreHttpPkg(ctx context.Context, in *ReqStoreHttpPkg, opts ...grpc.CallOption) (*ReplyStoreHttpPkg, error)
	// 批量插入数据
	StoreHttpPkgList(ctx context.Context, in *ReqStoreHttpPkgList, opts ...grpc.CallOption) (*ReplyStoreHttpPkgList, error)
	GetHttpRequest(ctx context.Context, in *ReqGetHttpRequest, opts ...grpc.CallOption) (*ReplyGetHttpRequest, error)
	StoreHttpPkgByKeySessionId(ctx context.Context, in *ReqStoreHttpPkgByKeySession, opts ...grpc.CallOption) (*ReplyStoreHttpPkg, error)
	GetHttpByKeySessionId(ctx context.Context, in *ReqGetHttpRequestByKeySession, opts ...grpc.CallOption) (*ReplyGetHttpRequest, error)
}

type imHttpPkgServerClient struct {
	cc *grpc.ClientConn
}

func NewImHttpPkgServerClient(cc *grpc.ClientConn) ImHttpPkgServerClient {
	return &imHttpPkgServerClient{cc}
}

func (c *imHttpPkgServerClient) StoreHttpPkg(ctx context.Context, in *ReqStoreHttpPkg, opts ...grpc.CallOption) (*ReplyStoreHttpPkg, error) {
	out := new(ReplyStoreHttpPkg)
	err := grpc.Invoke(ctx, "/imhttppkgserver.ImHttpPkgServer/StoreHttpPkg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imHttpPkgServerClient) StoreHttpPkgList(ctx context.Context, in *ReqStoreHttpPkgList, opts ...grpc.CallOption) (*ReplyStoreHttpPkgList, error) {
	out := new(ReplyStoreHttpPkgList)
	err := grpc.Invoke(ctx, "/imhttppkgserver.ImHttpPkgServer/StoreHttpPkgList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imHttpPkgServerClient) GetHttpRequest(ctx context.Context, in *ReqGetHttpRequest, opts ...grpc.CallOption) (*ReplyGetHttpRequest, error) {
	out := new(ReplyGetHttpRequest)
	err := grpc.Invoke(ctx, "/imhttppkgserver.ImHttpPkgServer/GetHttpRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imHttpPkgServerClient) StoreHttpPkgByKeySessionId(ctx context.Context, in *ReqStoreHttpPkgByKeySession, opts ...grpc.CallOption) (*ReplyStoreHttpPkg, error) {
	out := new(ReplyStoreHttpPkg)
	err := grpc.Invoke(ctx, "/imhttppkgserver.ImHttpPkgServer/StoreHttpPkgByKeySessionId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imHttpPkgServerClient) GetHttpByKeySessionId(ctx context.Context, in *ReqGetHttpRequestByKeySession, opts ...grpc.CallOption) (*ReplyGetHttpRequest, error) {
	out := new(ReplyGetHttpRequest)
	err := grpc.Invoke(ctx, "/imhttppkgserver.ImHttpPkgServer/GetHttpByKeySessionId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImHttpPkgServer service

type ImHttpPkgServerServer interface {
	StoreHttpPkg(context.Context, *ReqStoreHttpPkg) (*ReplyStoreHttpPkg, error)
	// 批量插入数据
	StoreHttpPkgList(context.Context, *ReqStoreHttpPkgList) (*ReplyStoreHttpPkgList, error)
	GetHttpRequest(context.Context, *ReqGetHttpRequest) (*ReplyGetHttpRequest, error)
	StoreHttpPkgByKeySessionId(context.Context, *ReqStoreHttpPkgByKeySession) (*ReplyStoreHttpPkg, error)
	GetHttpByKeySessionId(context.Context, *ReqGetHttpRequestByKeySession) (*ReplyGetHttpRequest, error)
}

func RegisterImHttpPkgServerServer(s *grpc.Server, srv ImHttpPkgServerServer) {
	s.RegisterService(&_ImHttpPkgServer_serviceDesc, srv)
}

func _ImHttpPkgServer_StoreHttpPkg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreHttpPkg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImHttpPkgServerServer).StoreHttpPkg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imhttppkgserver.ImHttpPkgServer/StoreHttpPkg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImHttpPkgServerServer).StoreHttpPkg(ctx, req.(*ReqStoreHttpPkg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImHttpPkgServer_StoreHttpPkgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreHttpPkgList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImHttpPkgServerServer).StoreHttpPkgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imhttppkgserver.ImHttpPkgServer/StoreHttpPkgList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImHttpPkgServerServer).StoreHttpPkgList(ctx, req.(*ReqStoreHttpPkgList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImHttpPkgServer_GetHttpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetHttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImHttpPkgServerServer).GetHttpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imhttppkgserver.ImHttpPkgServer/GetHttpRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImHttpPkgServerServer).GetHttpRequest(ctx, req.(*ReqGetHttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImHttpPkgServer_StoreHttpPkgByKeySessionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreHttpPkgByKeySession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImHttpPkgServerServer).StoreHttpPkgByKeySessionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imhttppkgserver.ImHttpPkgServer/StoreHttpPkgByKeySessionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImHttpPkgServerServer).StoreHttpPkgByKeySessionId(ctx, req.(*ReqStoreHttpPkgByKeySession))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImHttpPkgServer_GetHttpByKeySessionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetHttpRequestByKeySession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImHttpPkgServerServer).GetHttpByKeySessionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imhttppkgserver.ImHttpPkgServer/GetHttpByKeySessionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImHttpPkgServerServer).GetHttpByKeySessionId(ctx, req.(*ReqGetHttpRequestByKeySession))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImHttpPkgServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imhttppkgserver.ImHttpPkgServer",
	HandlerType: (*ImHttpPkgServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreHttpPkg",
			Handler:    _ImHttpPkgServer_StoreHttpPkg_Handler,
		},
		{
			MethodName: "StoreHttpPkgList",
			Handler:    _ImHttpPkgServer_StoreHttpPkgList_Handler,
		},
		{
			MethodName: "GetHttpRequest",
			Handler:    _ImHttpPkgServer_GetHttpRequest_Handler,
		},
		{
			MethodName: "StoreHttpPkgByKeySessionId",
			Handler:    _ImHttpPkgServer_StoreHttpPkgByKeySessionId_Handler,
		},
		{
			MethodName: "GetHttpByKeySessionId",
			Handler:    _ImHttpPkgServer_GetHttpByKeySessionId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imhttppkgserver.proto",
}

func (m *ReqStoreHttpPkgByKeySession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStoreHttpPkgByKeySession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImhttppkgserver(dAtA, i, uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImhttppkgserver(dAtA, i, uint64(m.SessionId))
	}
	if m.IsMedia {
		dAtA[i] = 0x18
		i++
		if m.IsMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Messages) > 0 {
		for _, b := range m.Messages {
			dAtA[i] = 0x22
			i++
			i = encodeVarintImhttppkgserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *ReqGetHttpRequestByKeySession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetHttpRequestByKeySession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImhttppkgserver(dAtA, i, uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImhttppkgserver(dAtA, i, uint64(m.SessionId))
	}
	if m.IsMedia {
		dAtA[i] = 0x18
		i++
		if m.IsMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReqStoreHttpPkg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStoreHttpPkg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImhttppkgserver(dAtA, i, uint64(m.KeyId))
	}
	if m.IsMedia {
		dAtA[i] = 0x10
		i++
		if m.IsMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImhttppkgserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *ReqStoreHttpPkgList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStoreHttpPkgList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImhttppkgserver(dAtA, i, uint64(m.KeyId))
	}
	if m.IsMedia {
		dAtA[i] = 0x10
		i++
		if m.IsMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Messages) > 0 {
		for _, b := range m.Messages {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintImhttppkgserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *ReplyStoreHttpPkgList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyStoreHttpPkgList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReplyStoreHttpPkg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyStoreHttpPkg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReqGetHttpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetHttpRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImhttppkgserver(dAtA, i, uint64(m.KeyId))
	}
	if m.IsMedia {
		dAtA[i] = 0x10
		i++
		if m.IsMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReplyGetHttpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetHttpRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, b := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintImhttppkgserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func encodeVarintImhttppkgserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqStoreHttpPkgByKeySession) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovImhttppkgserver(uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovImhttppkgserver(uint64(m.SessionId))
	}
	if m.IsMedia {
		n += 2
	}
	if len(m.Messages) > 0 {
		for _, b := range m.Messages {
			l = len(b)
			n += 1 + l + sovImhttppkgserver(uint64(l))
		}
	}
	return n
}

func (m *ReqGetHttpRequestByKeySession) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovImhttppkgserver(uint64(m.KeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovImhttppkgserver(uint64(m.SessionId))
	}
	if m.IsMedia {
		n += 2
	}
	return n
}

func (m *ReqStoreHttpPkg) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovImhttppkgserver(uint64(m.KeyId))
	}
	if m.IsMedia {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImhttppkgserver(uint64(l))
	}
	return n
}

func (m *ReqStoreHttpPkgList) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovImhttppkgserver(uint64(m.KeyId))
	}
	if m.IsMedia {
		n += 2
	}
	if len(m.Messages) > 0 {
		for _, b := range m.Messages {
			l = len(b)
			n += 1 + l + sovImhttppkgserver(uint64(l))
		}
	}
	return n
}

func (m *ReplyStoreHttpPkgList) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *ReplyStoreHttpPkg) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *ReqGetHttpRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovImhttppkgserver(uint64(m.KeyId))
	}
	if m.IsMedia {
		n += 2
	}
	return n
}

func (m *ReplyGetHttpRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, b := range m.Messages {
			l = len(b)
			n += 1 + l + sovImhttppkgserver(uint64(l))
		}
	}
	return n
}

func sovImhttppkgserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImhttppkgserver(x uint64) (n int) {
	return sovImhttppkgserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqStoreHttpPkgByKeySession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImhttppkgserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStoreHttpPkgByKeySession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStoreHttpPkgByKeySession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMedia = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImhttppkgserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, make([]byte, postIndex-iNdEx))
			copy(m.Messages[len(m.Messages)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImhttppkgserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImhttppkgserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetHttpRequestByKeySession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImhttppkgserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetHttpRequestByKeySession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetHttpRequestByKeySession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMedia = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImhttppkgserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImhttppkgserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStoreHttpPkg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImhttppkgserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStoreHttpPkg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStoreHttpPkg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMedia = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImhttppkgserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImhttppkgserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImhttppkgserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStoreHttpPkgList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImhttppkgserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStoreHttpPkgList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStoreHttpPkgList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMedia = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImhttppkgserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, make([]byte, postIndex-iNdEx))
			copy(m.Messages[len(m.Messages)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImhttppkgserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImhttppkgserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyStoreHttpPkgList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImhttppkgserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyStoreHttpPkgList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyStoreHttpPkgList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImhttppkgserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImhttppkgserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyStoreHttpPkg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImhttppkgserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyStoreHttpPkg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyStoreHttpPkg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImhttppkgserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImhttppkgserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetHttpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImhttppkgserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetHttpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetHttpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMedia = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImhttppkgserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImhttppkgserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetHttpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImhttppkgserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetHttpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetHttpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImhttppkgserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, make([]byte, postIndex-iNdEx))
			copy(m.Messages[len(m.Messages)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImhttppkgserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImhttppkgserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImhttppkgserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImhttppkgserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImhttppkgserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImhttppkgserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImhttppkgserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImhttppkgserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImhttppkgserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImhttppkgserver   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("imhttppkgserver.proto", fileDescriptorImhttppkgserver) }

var fileDescriptorImhttppkgserver = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcf, 0x4e, 0xe2, 0x40,
	0x1c, 0x66, 0x80, 0x5d, 0xd8, 0x5f, 0x9a, 0x65, 0x77, 0x76, 0x49, 0x9a, 0xee, 0x4a, 0x9a, 0x09,
	0x31, 0x1c, 0x94, 0x04, 0x7d, 0x03, 0x3c, 0x68, 0xa3, 0x26, 0x66, 0x9a, 0x78, 0xd1, 0x0b, 0xd0,
	0x5f, 0xb0, 0x81, 0xda, 0xd2, 0x19, 0x4c, 0xfa, 0x04, 0xde, 0x7c, 0x2e, 0x8f, 0x3e, 0x82, 0xe1,
	0x49, 0x4c, 0x0b, 0x68, 0x3b, 0x80, 0x85, 0x83, 0xc7, 0x6f, 0xf8, 0xf8, 0xfe, 0x75, 0x5a, 0xa8,
	0xbb, 0xde, 0x9d, 0x94, 0x41, 0x30, 0x1a, 0x0a, 0x0c, 0x1f, 0x30, 0x6c, 0x07, 0xa1, 0x2f, 0x7d,
	0x5a, 0x53, 0x8e, 0xd9, 0x23, 0x81, 0x7f, 0x1c, 0x27, 0xb6, 0xf4, 0x43, 0x3c, 0x93, 0x32, 0xb8,
	0x1a, 0x0d, 0xbb, 0xd1, 0x39, 0x46, 0x36, 0x0a, 0xe1, 0xfa, 0xf7, 0xf4, 0x2f, 0x7c, 0x1b, 0x61,
	0x64, 0x39, 0x3a, 0x31, 0x49, 0xab, 0xcc, 0xe7, 0x80, 0xfe, 0x87, 0x1f, 0x62, 0x4e, 0xb0, 0x1c,
	0xbd, 0x98, 0xfc, 0xf2, 0x71, 0x40, 0x75, 0xa8, 0xb8, 0xe2, 0x12, 0x1d, 0xb7, 0xa7, 0x97, 0x4c,
	0xd2, 0xaa, 0xf2, 0x25, 0xa4, 0x06, 0x54, 0x3d, 0x14, 0xa2, 0x37, 0x44, 0xa1, 0x97, 0xcd, 0x52,
	0x4b, 0xe3, 0xef, 0x98, 0x79, 0xb0, 0xc7, 0x71, 0x72, 0x8a, 0x32, 0x8e, 0xc1, 0x71, 0x32, 0x45,
	0x21, 0xbf, 0x2e, 0x0a, 0xbb, 0x81, 0x9a, 0xd2, 0x7b, 0x83, 0x41, 0x4a, 0xa2, 0x98, 0x6d, 0xa3,
	0x43, 0x65, 0x91, 0x3e, 0x11, 0xd7, 0xf8, 0x12, 0xb2, 0x1e, 0xfc, 0x51, 0xc4, 0x2f, 0x5c, 0x21,
	0x77, 0x36, 0x48, 0xcf, 0x55, 0x52, 0xe6, 0xea, 0x40, 0x9d, 0x63, 0x30, 0x8e, 0x56, 0x4c, 0x74,
	0xa8, 0xd8, 0xd3, 0xc1, 0x00, 0x85, 0x48, 0x6c, 0xaa, 0x7c, 0x09, 0xd9, 0x21, 0xfc, 0x5e, 0xf9,
	0xcb, 0x27, 0xf4, 0x93, 0x98, 0xae, 0x3c, 0x90, 0x5d, 0x2b, 0xb0, 0x4e, 0xbc, 0x44, 0x30, 0x8e,
	0x14, 0x99, 0x74, 0x33, 0x92, 0x6d, 0x76, 0xf4, 0x54, 0x86, 0x9a, 0xe5, 0x2d, 0xf2, 0xd9, 0xc9,
	0x35, 0xa5, 0xd7, 0xa0, 0x65, 0x52, 0x9b, 0x6d, 0xf5, 0x7e, 0x2b, 0x7b, 0x1b, 0x6c, 0x0d, 0x43,
	0xe9, 0xce, 0x0a, 0xb4, 0x0f, 0xbf, 0x56, 0x06, 0x6c, 0xe6, 0x69, 0xc7, 0x2c, 0x63, 0x3f, 0x5f,
	0x3f, 0xe6, 0xb1, 0x02, 0xbd, 0x85, 0x9f, 0x4a, 0xfb, 0x75, 0xd9, 0x94, 0xa1, 0x8d, 0xe6, 0x7a,
	0xfd, 0x2c, 0x8b, 0x15, 0x68, 0x00, 0xc6, 0xa6, 0x97, 0xd7, 0x72, 0xe8, 0x41, 0x5e, 0x97, 0x34,
	0x7f, 0xcb, 0xcd, 0x7c, 0xa8, 0x2f, 0x52, 0x28, 0x66, 0xed, 0xfc, 0x5a, 0x19, 0xbb, 0x2d, 0x2b,
	0x76, 0xb5, 0xe7, 0x59, 0x83, 0xbc, 0xcc, 0x1a, 0xe4, 0x75, 0xd6, 0x20, 0xfd, 0xef, 0xc9, 0x97,
	0xec, 0xf8, 0x2d, 0x00, 0x00, 0xff, 0xff, 0x50, 0x79, 0x90, 0xf5, 0xe2, 0x04, 0x00, 0x00,
}
