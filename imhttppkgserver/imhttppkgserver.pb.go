//protoc --gogofast_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: imhttppkgserver.proto

package imhttppkgserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReqStoreHttpPkgByKeySession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId     uint64   `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	SessionId uint64   `protobuf:"varint,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	IsMedia   bool     `protobuf:"varint,3,opt,name=isMedia,proto3" json:"isMedia,omitempty"`  // true代表媒体,false 代表业务
	Messages  [][]byte `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"` // 消息内容
}

func (x *ReqStoreHttpPkgByKeySession) Reset() {
	*x = ReqStoreHttpPkgByKeySession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imhttppkgserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStoreHttpPkgByKeySession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStoreHttpPkgByKeySession) ProtoMessage() {}

func (x *ReqStoreHttpPkgByKeySession) ProtoReflect() protoreflect.Message {
	mi := &file_imhttppkgserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStoreHttpPkgByKeySession.ProtoReflect.Descriptor instead.
func (*ReqStoreHttpPkgByKeySession) Descriptor() ([]byte, []int) {
	return file_imhttppkgserver_proto_rawDescGZIP(), []int{0}
}

func (x *ReqStoreHttpPkgByKeySession) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReqStoreHttpPkgByKeySession) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ReqStoreHttpPkgByKeySession) GetIsMedia() bool {
	if x != nil {
		return x.IsMedia
	}
	return false
}

func (x *ReqStoreHttpPkgByKeySession) GetMessages() [][]byte {
	if x != nil {
		return x.Messages
	}
	return nil
}

type ReqGetHttpRequestByKeySession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId     uint64 `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	SessionId uint64 `protobuf:"varint,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	IsMedia   bool   `protobuf:"varint,3,opt,name=isMedia,proto3" json:"isMedia,omitempty"` // true代表媒体,false 代表业务
}

func (x *ReqGetHttpRequestByKeySession) Reset() {
	*x = ReqGetHttpRequestByKeySession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imhttppkgserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetHttpRequestByKeySession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetHttpRequestByKeySession) ProtoMessage() {}

func (x *ReqGetHttpRequestByKeySession) ProtoReflect() protoreflect.Message {
	mi := &file_imhttppkgserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetHttpRequestByKeySession.ProtoReflect.Descriptor instead.
func (*ReqGetHttpRequestByKeySession) Descriptor() ([]byte, []int) {
	return file_imhttppkgserver_proto_rawDescGZIP(), []int{1}
}

func (x *ReqGetHttpRequestByKeySession) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReqGetHttpRequestByKeySession) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ReqGetHttpRequestByKeySession) GetIsMedia() bool {
	if x != nil {
		return x.IsMedia
	}
	return false
}

type ReqStoreHttpPkg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId   uint64 `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	IsMedia bool   `protobuf:"varint,2,opt,name=isMedia,proto3" json:"isMedia,omitempty"` // true代表媒体,false 代表业务
	Message []byte `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`  // 消息内容
}

func (x *ReqStoreHttpPkg) Reset() {
	*x = ReqStoreHttpPkg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imhttppkgserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStoreHttpPkg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStoreHttpPkg) ProtoMessage() {}

func (x *ReqStoreHttpPkg) ProtoReflect() protoreflect.Message {
	mi := &file_imhttppkgserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStoreHttpPkg.ProtoReflect.Descriptor instead.
func (*ReqStoreHttpPkg) Descriptor() ([]byte, []int) {
	return file_imhttppkgserver_proto_rawDescGZIP(), []int{2}
}

func (x *ReqStoreHttpPkg) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReqStoreHttpPkg) GetIsMedia() bool {
	if x != nil {
		return x.IsMedia
	}
	return false
}

func (x *ReqStoreHttpPkg) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type ReqStoreHttpPkgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId    uint64   `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	IsMedia  bool     `protobuf:"varint,2,opt,name=isMedia,proto3" json:"isMedia,omitempty"`  // true代表媒体,false 代表业务
	Messages [][]byte `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"` // 消息内容
}

func (x *ReqStoreHttpPkgList) Reset() {
	*x = ReqStoreHttpPkgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imhttppkgserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStoreHttpPkgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStoreHttpPkgList) ProtoMessage() {}

func (x *ReqStoreHttpPkgList) ProtoReflect() protoreflect.Message {
	mi := &file_imhttppkgserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStoreHttpPkgList.ProtoReflect.Descriptor instead.
func (*ReqStoreHttpPkgList) Descriptor() ([]byte, []int) {
	return file_imhttppkgserver_proto_rawDescGZIP(), []int{3}
}

func (x *ReqStoreHttpPkgList) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReqStoreHttpPkgList) GetIsMedia() bool {
	if x != nil {
		return x.IsMedia
	}
	return false
}

func (x *ReqStoreHttpPkgList) GetMessages() [][]byte {
	if x != nil {
		return x.Messages
	}
	return nil
}

type ReplyStoreHttpPkgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"` // true表示保存成功 false表示失败
}

func (x *ReplyStoreHttpPkgList) Reset() {
	*x = ReplyStoreHttpPkgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imhttppkgserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyStoreHttpPkgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyStoreHttpPkgList) ProtoMessage() {}

func (x *ReplyStoreHttpPkgList) ProtoReflect() protoreflect.Message {
	mi := &file_imhttppkgserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyStoreHttpPkgList.ProtoReflect.Descriptor instead.
func (*ReplyStoreHttpPkgList) Descriptor() ([]byte, []int) {
	return file_imhttppkgserver_proto_rawDescGZIP(), []int{4}
}

func (x *ReplyStoreHttpPkgList) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ReplyStoreHttpPkg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"` // true表示保存成功 false表示失败
}

func (x *ReplyStoreHttpPkg) Reset() {
	*x = ReplyStoreHttpPkg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imhttppkgserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyStoreHttpPkg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyStoreHttpPkg) ProtoMessage() {}

func (x *ReplyStoreHttpPkg) ProtoReflect() protoreflect.Message {
	mi := &file_imhttppkgserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyStoreHttpPkg.ProtoReflect.Descriptor instead.
func (*ReplyStoreHttpPkg) Descriptor() ([]byte, []int) {
	return file_imhttppkgserver_proto_rawDescGZIP(), []int{5}
}

func (x *ReplyStoreHttpPkg) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ReqGetHttpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId   uint64 `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	IsMedia bool   `protobuf:"varint,2,opt,name=isMedia,proto3" json:"isMedia,omitempty"` // true代表媒体,false 代表业务
}

func (x *ReqGetHttpRequest) Reset() {
	*x = ReqGetHttpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imhttppkgserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetHttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetHttpRequest) ProtoMessage() {}

func (x *ReqGetHttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imhttppkgserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetHttpRequest.ProtoReflect.Descriptor instead.
func (*ReqGetHttpRequest) Descriptor() ([]byte, []int) {
	return file_imhttppkgserver_proto_rawDescGZIP(), []int{6}
}

func (x *ReqGetHttpRequest) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReqGetHttpRequest) GetIsMedia() bool {
	if x != nil {
		return x.IsMedia
	}
	return false
}

type ReplyGetHttpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages [][]byte `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *ReplyGetHttpRequest) Reset() {
	*x = ReplyGetHttpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imhttppkgserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetHttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetHttpRequest) ProtoMessage() {}

func (x *ReplyGetHttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imhttppkgserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetHttpRequest.ProtoReflect.Descriptor instead.
func (*ReplyGetHttpRequest) Descriptor() ([]byte, []int) {
	return file_imhttppkgserver_proto_rawDescGZIP(), []int{7}
}

func (x *ReplyGetHttpRequest) GetMessages() [][]byte {
	if x != nil {
		return x.Messages
	}
	return nil
}

var File_imhttppkgserver_proto protoreflect.FileDescriptor

var file_imhttppkgserver_proto_rawDesc = []byte{
	0x0a, 0x15, 0x69, 0x6d, 0x68, 0x74, 0x74, 0x70, 0x70, 0x6b, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x69, 0x6d, 0x68, 0x74, 0x74, 0x70, 0x70,
	0x6b, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x87, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x71,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6b, 0x67, 0x42, 0x79, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x6d, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x22, 0x5b, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x74, 0x74,
	0x70, 0x50, 0x6b, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6b,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x31, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48,
	0x74, 0x74, 0x70, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x2d, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6b, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x43, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x31, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x47, 0x65, 0x74, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x32, 0x8e, 0x04, 0x0a, 0x0f,
	0x49, 0x6d, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6b, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x56, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6b, 0x67, 0x12,
	0x20, 0x2e, 0x69, 0x6d, 0x68, 0x74, 0x74, 0x70, 0x70, 0x6b, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6b,
	0x67, 0x1a, 0x22, 0x2e, 0x69, 0x6d, 0x68, 0x74, 0x74, 0x70, 0x70, 0x6b, 0x67, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x74,
	0x74, 0x70, 0x50, 0x6b, 0x67, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x48, 0x74, 0x74, 0x70, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x69, 0x6d,
	0x68, 0x74, 0x74, 0x70, 0x70, 0x6b, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x68, 0x74, 0x74, 0x70, 0x70, 0x6b, 0x67, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x74,
	0x74, 0x70, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x2e,
	0x69, 0x6d, 0x68, 0x74, 0x74, 0x70, 0x70, 0x6b, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x68, 0x74, 0x74, 0x70, 0x70, 0x6b, 0x67, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x1a, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6b, 0x67, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x2e, 0x69, 0x6d, 0x68, 0x74, 0x74, 0x70,
	0x70, 0x6b, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6b, 0x67, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x22, 0x2e, 0x69, 0x6d, 0x68, 0x74, 0x74, 0x70, 0x70, 0x6b,
	0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6b, 0x67, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x48, 0x74, 0x74, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x2e, 0x69, 0x6d, 0x68, 0x74, 0x74, 0x70, 0x70, 0x6b, 0x67,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x68, 0x74, 0x74, 0x70, 0x70, 0x6b, 0x67,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x69, 0x6d, 0x68, 0x74, 0x74, 0x70, 0x70, 0x6b, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_imhttppkgserver_proto_rawDescOnce sync.Once
	file_imhttppkgserver_proto_rawDescData = file_imhttppkgserver_proto_rawDesc
)

func file_imhttppkgserver_proto_rawDescGZIP() []byte {
	file_imhttppkgserver_proto_rawDescOnce.Do(func() {
		file_imhttppkgserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_imhttppkgserver_proto_rawDescData)
	})
	return file_imhttppkgserver_proto_rawDescData
}

var file_imhttppkgserver_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_imhttppkgserver_proto_goTypes = []interface{}{
	(*ReqStoreHttpPkgByKeySession)(nil),   // 0: imhttppkgserver.ReqStoreHttpPkgByKeySession
	(*ReqGetHttpRequestByKeySession)(nil), // 1: imhttppkgserver.ReqGetHttpRequestByKeySession
	(*ReqStoreHttpPkg)(nil),               // 2: imhttppkgserver.ReqStoreHttpPkg
	(*ReqStoreHttpPkgList)(nil),           // 3: imhttppkgserver.ReqStoreHttpPkgList
	(*ReplyStoreHttpPkgList)(nil),         // 4: imhttppkgserver.ReplyStoreHttpPkgList
	(*ReplyStoreHttpPkg)(nil),             // 5: imhttppkgserver.ReplyStoreHttpPkg
	(*ReqGetHttpRequest)(nil),             // 6: imhttppkgserver.ReqGetHttpRequest
	(*ReplyGetHttpRequest)(nil),           // 7: imhttppkgserver.ReplyGetHttpRequest
}
var file_imhttppkgserver_proto_depIdxs = []int32{
	2, // 0: imhttppkgserver.ImHttpPkgServer.StoreHttpPkg:input_type -> imhttppkgserver.ReqStoreHttpPkg
	3, // 1: imhttppkgserver.ImHttpPkgServer.StoreHttpPkgList:input_type -> imhttppkgserver.ReqStoreHttpPkgList
	6, // 2: imhttppkgserver.ImHttpPkgServer.GetHttpRequest:input_type -> imhttppkgserver.ReqGetHttpRequest
	0, // 3: imhttppkgserver.ImHttpPkgServer.StoreHttpPkgByKeySessionId:input_type -> imhttppkgserver.ReqStoreHttpPkgByKeySession
	1, // 4: imhttppkgserver.ImHttpPkgServer.GetHttpByKeySessionId:input_type -> imhttppkgserver.ReqGetHttpRequestByKeySession
	5, // 5: imhttppkgserver.ImHttpPkgServer.StoreHttpPkg:output_type -> imhttppkgserver.ReplyStoreHttpPkg
	4, // 6: imhttppkgserver.ImHttpPkgServer.StoreHttpPkgList:output_type -> imhttppkgserver.ReplyStoreHttpPkgList
	7, // 7: imhttppkgserver.ImHttpPkgServer.GetHttpRequest:output_type -> imhttppkgserver.ReplyGetHttpRequest
	5, // 8: imhttppkgserver.ImHttpPkgServer.StoreHttpPkgByKeySessionId:output_type -> imhttppkgserver.ReplyStoreHttpPkg
	7, // 9: imhttppkgserver.ImHttpPkgServer.GetHttpByKeySessionId:output_type -> imhttppkgserver.ReplyGetHttpRequest
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_imhttppkgserver_proto_init() }
func file_imhttppkgserver_proto_init() {
	if File_imhttppkgserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_imhttppkgserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStoreHttpPkgByKeySession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imhttppkgserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetHttpRequestByKeySession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imhttppkgserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStoreHttpPkg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imhttppkgserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStoreHttpPkgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imhttppkgserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyStoreHttpPkgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imhttppkgserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyStoreHttpPkg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imhttppkgserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetHttpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imhttppkgserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetHttpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imhttppkgserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imhttppkgserver_proto_goTypes,
		DependencyIndexes: file_imhttppkgserver_proto_depIdxs,
		MessageInfos:      file_imhttppkgserver_proto_msgTypes,
	}.Build()
	File_imhttppkgserver_proto = out.File
	file_imhttppkgserver_proto_rawDesc = nil
	file_imhttppkgserver_proto_goTypes = nil
	file_imhttppkgserver_proto_depIdxs = nil
}
