// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/imtokenserver/tokenserver.proto

/*
Package imtokenservice is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/imtokenserver/tokenserver.proto

It has these top-level messages:

	ReqGetTokenMsg
	GetTokenReply
	ReqRefreshTokenMsg
	RefreshTokenReply
	ReqValidateTokenMsg
	ValidateTokenReply
	ReqGetUInfoByTokenMsg
	GetUInfoByTokenReply
*/
package imtokenservice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TokenErrorCode int32

const (
	TokenErrorCode_Token_OK                TokenErrorCode = 0
	TokenErrorCode_Token_REQ_PARAME_ERR    TokenErrorCode = 1001
	TokenErrorCode_Token_CTEATE_TOKEN_FAIL TokenErrorCode = 1002
	TokenErrorCode_Token_ERR               TokenErrorCode = 1003
	TokenErrorCode_Token_EXPIRED           TokenErrorCode = 1004
	TokenErrorCode_Token_NOT_EXIST         TokenErrorCode = 1005
	TokenErrorCode_Token_INTERNAL_ERR      TokenErrorCode = 1006
)

var TokenErrorCode_name = map[int32]string{
	0:    "Token_OK",
	1001: "Token_REQ_PARAME_ERR",
	1002: "Token_CTEATE_TOKEN_FAIL",
	1003: "Token_ERR",
	1004: "Token_EXPIRED",
	1005: "Token_NOT_EXIST",
	1006: "Token_INTERNAL_ERR",
}
var TokenErrorCode_value = map[string]int32{
	"Token_OK":                0,
	"Token_REQ_PARAME_ERR":    1001,
	"Token_CTEATE_TOKEN_FAIL": 1002,
	"Token_ERR":               1003,
	"Token_EXPIRED":           1004,
	"Token_NOT_EXIST":         1005,
	"Token_INTERNAL_ERR":      1006,
}

func (x TokenErrorCode) String() string {
	return proto.EnumName(TokenErrorCode_name, int32(x))
}
func (TokenErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorTokenserver, []int{0} }

type ReqGetTokenMsg struct {
	KeyId     string `protobuf:"bytes,1,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	TokenType int32  `protobuf:"varint,3,opt,name=tokenType,proto3" json:"tokenType,omitempty"`
}

func (m *ReqGetTokenMsg) Reset()                    { *m = ReqGetTokenMsg{} }
func (m *ReqGetTokenMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqGetTokenMsg) ProtoMessage()               {}
func (*ReqGetTokenMsg) Descriptor() ([]byte, []int) { return fileDescriptorTokenserver, []int{0} }

func (m *ReqGetTokenMsg) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *ReqGetTokenMsg) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ReqGetTokenMsg) GetTokenType() int32 {
	if m != nil {
		return m.TokenType
	}
	return 0
}

type GetTokenReply struct {
	Code           TokenErrorCode `protobuf:"varint,1,opt,name=Code,proto3,enum=imtokenservice.TokenErrorCode" json:"Code,omitempty"`
	Error          string         `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	Token          string         `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	ExpirationTime uint64         `protobuf:"varint,4,opt,name=ExpirationTime,proto3" json:"ExpirationTime,omitempty"`
}

func (m *GetTokenReply) Reset()                    { *m = GetTokenReply{} }
func (m *GetTokenReply) String() string            { return proto.CompactTextString(m) }
func (*GetTokenReply) ProtoMessage()               {}
func (*GetTokenReply) Descriptor() ([]byte, []int) { return fileDescriptorTokenserver, []int{1} }

func (m *GetTokenReply) GetCode() TokenErrorCode {
	if m != nil {
		return m.Code
	}
	return TokenErrorCode_Token_OK
}

func (m *GetTokenReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *GetTokenReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GetTokenReply) GetExpirationTime() uint64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

type ReqRefreshTokenMsg struct {
	KeyId     string `protobuf:"bytes,1,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	OldToken  string `protobuf:"bytes,3,opt,name=OldToken,proto3" json:"OldToken,omitempty"`
	TokenType int32  `protobuf:"varint,4,opt,name=tokenType,proto3" json:"tokenType,omitempty"`
}

func (m *ReqRefreshTokenMsg) Reset()                    { *m = ReqRefreshTokenMsg{} }
func (m *ReqRefreshTokenMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqRefreshTokenMsg) ProtoMessage()               {}
func (*ReqRefreshTokenMsg) Descriptor() ([]byte, []int) { return fileDescriptorTokenserver, []int{2} }

func (m *ReqRefreshTokenMsg) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *ReqRefreshTokenMsg) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ReqRefreshTokenMsg) GetOldToken() string {
	if m != nil {
		return m.OldToken
	}
	return ""
}

func (m *ReqRefreshTokenMsg) GetTokenType() int32 {
	if m != nil {
		return m.TokenType
	}
	return 0
}

type RefreshTokenReply struct {
	Code           TokenErrorCode `protobuf:"varint,1,opt,name=Code,proto3,enum=imtokenservice.TokenErrorCode" json:"Code,omitempty"`
	Error          string         `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	NewToken       string         `protobuf:"bytes,3,opt,name=NewToken,proto3" json:"NewToken,omitempty"`
	ExpirationTime uint64         `protobuf:"varint,4,opt,name=ExpirationTime,proto3" json:"ExpirationTime,omitempty"`
}

func (m *RefreshTokenReply) Reset()                    { *m = RefreshTokenReply{} }
func (m *RefreshTokenReply) String() string            { return proto.CompactTextString(m) }
func (*RefreshTokenReply) ProtoMessage()               {}
func (*RefreshTokenReply) Descriptor() ([]byte, []int) { return fileDescriptorTokenserver, []int{3} }

func (m *RefreshTokenReply) GetCode() TokenErrorCode {
	if m != nil {
		return m.Code
	}
	return TokenErrorCode_Token_OK
}

func (m *RefreshTokenReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RefreshTokenReply) GetNewToken() string {
	if m != nil {
		return m.NewToken
	}
	return ""
}

func (m *RefreshTokenReply) GetExpirationTime() uint64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

type ReqValidateTokenMsg struct {
	KeyId          string `protobuf:"bytes,1,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	UserId         string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Token          string `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	ExpirationTime uint64 `protobuf:"varint,4,opt,name=ExpirationTime,proto3" json:"ExpirationTime,omitempty"`
	TokenType      int32  `protobuf:"varint,5,opt,name=tokenType,proto3" json:"tokenType,omitempty"`
}

func (m *ReqValidateTokenMsg) Reset()                    { *m = ReqValidateTokenMsg{} }
func (m *ReqValidateTokenMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqValidateTokenMsg) ProtoMessage()               {}
func (*ReqValidateTokenMsg) Descriptor() ([]byte, []int) { return fileDescriptorTokenserver, []int{4} }

func (m *ReqValidateTokenMsg) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *ReqValidateTokenMsg) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ReqValidateTokenMsg) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ReqValidateTokenMsg) GetExpirationTime() uint64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

func (m *ReqValidateTokenMsg) GetTokenType() int32 {
	if m != nil {
		return m.TokenType
	}
	return 0
}

type ValidateTokenReply struct {
	Code  TokenErrorCode `protobuf:"varint,1,opt,name=Code,proto3,enum=imtokenservice.TokenErrorCode" json:"Code,omitempty"`
	Error string         `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (m *ValidateTokenReply) Reset()                    { *m = ValidateTokenReply{} }
func (m *ValidateTokenReply) String() string            { return proto.CompactTextString(m) }
func (*ValidateTokenReply) ProtoMessage()               {}
func (*ValidateTokenReply) Descriptor() ([]byte, []int) { return fileDescriptorTokenserver, []int{5} }

func (m *ValidateTokenReply) GetCode() TokenErrorCode {
	if m != nil {
		return m.Code
	}
	return TokenErrorCode_Token_OK
}

func (m *ValidateTokenReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ReqGetUInfoByTokenMsg struct {
	Token     string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	TokenType int32  `protobuf:"varint,2,opt,name=tokenType,proto3" json:"tokenType,omitempty"`
}

func (m *ReqGetUInfoByTokenMsg) Reset()         { *m = ReqGetUInfoByTokenMsg{} }
func (m *ReqGetUInfoByTokenMsg) String() string { return proto.CompactTextString(m) }
func (*ReqGetUInfoByTokenMsg) ProtoMessage()    {}
func (*ReqGetUInfoByTokenMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorTokenserver, []int{6}
}

func (m *ReqGetUInfoByTokenMsg) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ReqGetUInfoByTokenMsg) GetTokenType() int32 {
	if m != nil {
		return m.TokenType
	}
	return 0
}

type GetUInfoByTokenReply struct {
	KeyId  string         `protobuf:"bytes,1,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	UserId string         `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Code   TokenErrorCode `protobuf:"varint,3,opt,name=Code,proto3,enum=imtokenservice.TokenErrorCode" json:"Code,omitempty"`
	Error  string         `protobuf:"bytes,4,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (m *GetUInfoByTokenReply) Reset()                    { *m = GetUInfoByTokenReply{} }
func (m *GetUInfoByTokenReply) String() string            { return proto.CompactTextString(m) }
func (*GetUInfoByTokenReply) ProtoMessage()               {}
func (*GetUInfoByTokenReply) Descriptor() ([]byte, []int) { return fileDescriptorTokenserver, []int{7} }

func (m *GetUInfoByTokenReply) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *GetUInfoByTokenReply) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetUInfoByTokenReply) GetCode() TokenErrorCode {
	if m != nil {
		return m.Code
	}
	return TokenErrorCode_Token_OK
}

func (m *GetUInfoByTokenReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*ReqGetTokenMsg)(nil), "imtokenservice.ReqGetTokenMsg")
	proto.RegisterType((*GetTokenReply)(nil), "imtokenservice.GetTokenReply")
	proto.RegisterType((*ReqRefreshTokenMsg)(nil), "imtokenservice.ReqRefreshTokenMsg")
	proto.RegisterType((*RefreshTokenReply)(nil), "imtokenservice.RefreshTokenReply")
	proto.RegisterType((*ReqValidateTokenMsg)(nil), "imtokenservice.ReqValidateTokenMsg")
	proto.RegisterType((*ValidateTokenReply)(nil), "imtokenservice.ValidateTokenReply")
	proto.RegisterType((*ReqGetUInfoByTokenMsg)(nil), "imtokenservice.ReqGetUInfoByTokenMsg")
	proto.RegisterType((*GetUInfoByTokenReply)(nil), "imtokenservice.GetUInfoByTokenReply")
	proto.RegisterEnum("imtokenservice.TokenErrorCode", TokenErrorCode_name, TokenErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImTokenService service

type ImTokenServiceClient interface {
	// 获取token
	GetToken(ctx context.Context, in *ReqGetTokenMsg, opts ...grpc.CallOption) (*GetTokenReply, error)
	// 刷新token
	RefreshToken(ctx context.Context, in *ReqRefreshTokenMsg, opts ...grpc.CallOption) (*RefreshTokenReply, error)
	// 验证token
	ValidateToken(ctx context.Context, in *ReqValidateTokenMsg, opts ...grpc.CallOption) (*ValidateTokenReply, error)
	// 通过token 获取用户信息
	GetUInfoByToken(ctx context.Context, in *ReqGetUInfoByTokenMsg, opts ...grpc.CallOption) (*GetUInfoByTokenReply, error)
}

type imTokenServiceClient struct {
	cc *grpc.ClientConn
}

func NewImTokenServiceClient(cc *grpc.ClientConn) ImTokenServiceClient {
	return &imTokenServiceClient{cc}
}

func (c *imTokenServiceClient) GetToken(ctx context.Context, in *ReqGetTokenMsg, opts ...grpc.CallOption) (*GetTokenReply, error) {
	out := new(GetTokenReply)
	err := grpc.Invoke(ctx, "/imtokenservice.ImTokenService/GetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imTokenServiceClient) RefreshToken(ctx context.Context, in *ReqRefreshTokenMsg, opts ...grpc.CallOption) (*RefreshTokenReply, error) {
	out := new(RefreshTokenReply)
	err := grpc.Invoke(ctx, "/imtokenservice.ImTokenService/RefreshToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imTokenServiceClient) ValidateToken(ctx context.Context, in *ReqValidateTokenMsg, opts ...grpc.CallOption) (*ValidateTokenReply, error) {
	out := new(ValidateTokenReply)
	err := grpc.Invoke(ctx, "/imtokenservice.ImTokenService/ValidateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imTokenServiceClient) GetUInfoByToken(ctx context.Context, in *ReqGetUInfoByTokenMsg, opts ...grpc.CallOption) (*GetUInfoByTokenReply, error) {
	out := new(GetUInfoByTokenReply)
	err := grpc.Invoke(ctx, "/imtokenservice.ImTokenService/GetUInfoByToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImTokenService service

type ImTokenServiceServer interface {
	// 获取token
	GetToken(context.Context, *ReqGetTokenMsg) (*GetTokenReply, error)
	// 刷新token
	RefreshToken(context.Context, *ReqRefreshTokenMsg) (*RefreshTokenReply, error)
	// 验证token
	ValidateToken(context.Context, *ReqValidateTokenMsg) (*ValidateTokenReply, error)
	// 通过token 获取用户信息
	GetUInfoByToken(context.Context, *ReqGetUInfoByTokenMsg) (*GetUInfoByTokenReply, error)
}

func RegisterImTokenServiceServer(s *grpc.Server, srv ImTokenServiceServer) {
	s.RegisterService(&_ImTokenService_serviceDesc, srv)
}

func _ImTokenService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImTokenServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imtokenservice.ImTokenService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImTokenServiceServer).GetToken(ctx, req.(*ReqGetTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImTokenService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRefreshTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImTokenServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imtokenservice.ImTokenService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImTokenServiceServer).RefreshToken(ctx, req.(*ReqRefreshTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImTokenService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqValidateTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImTokenServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imtokenservice.ImTokenService/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImTokenServiceServer).ValidateToken(ctx, req.(*ReqValidateTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImTokenService_GetUInfoByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUInfoByTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImTokenServiceServer).GetUInfoByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imtokenservice.ImTokenService/GetUInfoByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImTokenServiceServer).GetUInfoByToken(ctx, req.(*ReqGetUInfoByTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImTokenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imtokenservice.ImTokenService",
	HandlerType: (*ImTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _ImTokenService_GetToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _ImTokenService_RefreshToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _ImTokenService_ValidateToken_Handler,
		},
		{
			MethodName: "GetUInfoByToken",
			Handler:    _ImTokenService_GetUInfoByToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/imtokenserver/tokenserver.proto",
}

func (m *ReqGetTokenMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KeyId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.KeyId)))
		i += copy(dAtA[i:], m.KeyId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.TokenType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(m.TokenType))
	}
	return i, nil
}

func (m *GetTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(m.Code))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.ExpirationTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(m.ExpirationTime))
	}
	return i, nil
}

func (m *ReqRefreshTokenMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRefreshTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KeyId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.KeyId)))
		i += copy(dAtA[i:], m.KeyId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.OldToken) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.OldToken)))
		i += copy(dAtA[i:], m.OldToken)
	}
	if m.TokenType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(m.TokenType))
	}
	return i, nil
}

func (m *RefreshTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshTokenReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(m.Code))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.NewToken) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.NewToken)))
		i += copy(dAtA[i:], m.NewToken)
	}
	if m.ExpirationTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(m.ExpirationTime))
	}
	return i, nil
}

func (m *ReqValidateTokenMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqValidateTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KeyId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.KeyId)))
		i += copy(dAtA[i:], m.KeyId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.ExpirationTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(m.ExpirationTime))
	}
	if m.TokenType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(m.TokenType))
	}
	return i, nil
}

func (m *ValidateTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateTokenReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(m.Code))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *ReqGetUInfoByTokenMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUInfoByTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.TokenType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(m.TokenType))
	}
	return i, nil
}

func (m *GetUInfoByTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUInfoByTokenReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KeyId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.KeyId)))
		i += copy(dAtA[i:], m.KeyId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.Code != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(m.Code))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTokenserver(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func encodeVarintTokenserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqGetTokenMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	if m.TokenType != 0 {
		n += 1 + sovTokenserver(uint64(m.TokenType))
	}
	return n
}

func (m *GetTokenReply) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTokenserver(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	if m.ExpirationTime != 0 {
		n += 1 + sovTokenserver(uint64(m.ExpirationTime))
	}
	return n
}

func (m *ReqRefreshTokenMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	l = len(m.OldToken)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	if m.TokenType != 0 {
		n += 1 + sovTokenserver(uint64(m.TokenType))
	}
	return n
}

func (m *RefreshTokenReply) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTokenserver(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	l = len(m.NewToken)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	if m.ExpirationTime != 0 {
		n += 1 + sovTokenserver(uint64(m.ExpirationTime))
	}
	return n
}

func (m *ReqValidateTokenMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	if m.ExpirationTime != 0 {
		n += 1 + sovTokenserver(uint64(m.ExpirationTime))
	}
	if m.TokenType != 0 {
		n += 1 + sovTokenserver(uint64(m.TokenType))
	}
	return n
}

func (m *ValidateTokenReply) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTokenserver(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	return n
}

func (m *ReqGetUInfoByTokenMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	if m.TokenType != 0 {
		n += 1 + sovTokenserver(uint64(m.TokenType))
	}
	return n
}

func (m *GetUInfoByTokenReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovTokenserver(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTokenserver(uint64(l))
	}
	return n
}

func sovTokenserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTokenserver(x uint64) (n int) {
	return sovTokenserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqGetTokenMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetTokenMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetTokenMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTokenserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (TokenErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			m.ExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTokenserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRefreshTokenMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRefreshTokenMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRefreshTokenMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTokenserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (TokenErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			m.ExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTokenserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqValidateTokenMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqValidateTokenMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqValidateTokenMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			m.ExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTokenserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (TokenErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUInfoByTokenMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUInfoByTokenMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUInfoByTokenMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTokenserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUInfoByTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUInfoByTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUInfoByTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (TokenErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTokenserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTokenserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTokenserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTokenserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/imtokenserver/tokenserver.proto", fileDescriptorTokenserver)
}

var fileDescriptorTokenserver = []byte{
	// 603 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0x12, 0x51,
	0x14, 0xe6, 0x52, 0xe8, 0xc0, 0x09, 0x4c, 0xf1, 0x88, 0x16, 0x27, 0x95, 0xe0, 0xf8, 0x13, 0xe2,
	0x02, 0x12, 0x7c, 0x02, 0xda, 0x8e, 0x66, 0x42, 0x0b, 0xf5, 0x76, 0xaa, 0x8d, 0x31, 0x8e, 0x03,
	0x5c, 0xda, 0x89, 0xc0, 0xc0, 0x30, 0xfe, 0x90, 0xf8, 0x0c, 0x6e, 0x5d, 0x1a, 0xb7, 0x3e, 0x89,
	0x4b, 0x1f, 0xc1, 0xb0, 0xf3, 0x77, 0xe5, 0x03, 0x18, 0xee, 0x05, 0x9d, 0x19, 0x58, 0x28, 0xed,
	0x8e, 0xef, 0xbb, 0x5f, 0xce, 0xfd, 0xce, 0xc7, 0xb9, 0x67, 0x60, 0xf7, 0xc4, 0xf6, 0xba, 0x56,
	0xb3, 0xd4, 0x3a, 0xb5, 0xbc, 0x11, 0x73, 0x5f, 0x30, 0xb7, 0x64, 0xf7, 0xca, 0x76, 0xdf, 0x63,
	0x6e, 0xc7, 0x6a, 0xb1, 0x81, 0xeb, 0x34, 0x9f, 0x77, 0xca, 0x76, 0xcf, 0x73, 0x9e, 0xb1, 0xbe,
	0x10, 0x94, 0x7d, 0xbf, 0x4b, 0x03, 0xd7, 0xf1, 0x1c, 0x94, 0x7d, 0x02, 0xbb, 0xc5, 0xd4, 0xc7,
	0x20, 0x53, 0x36, 0xbc, 0xc7, 0x3c, 0x63, 0xca, 0xee, 0x8f, 0x4e, 0x30, 0x0b, 0xf1, 0x1a, 0x1b,
	0xeb, 0xed, 0x1c, 0x29, 0x90, 0x62, 0x92, 0x0a, 0x80, 0x97, 0x61, 0xfd, 0x68, 0xc4, 0x5c, 0xbd,
	0x9d, 0x8b, 0x72, 0x7a, 0x86, 0x70, 0x0b, 0x92, 0xbc, 0x9e, 0x31, 0x1e, 0xb0, 0xdc, 0x5a, 0x81,
	0x14, 0xe3, 0xf4, 0x2f, 0xa1, 0xbe, 0x25, 0x90, 0x9e, 0xd7, 0xa6, 0x6c, 0xd0, 0x1d, 0x63, 0x05,
	0x62, 0x3b, 0x4e, 0x9b, 0xf1, 0xe2, 0x72, 0x25, 0x5f, 0x0a, 0xda, 0x29, 0x71, 0xa5, 0xe6, 0xba,
	0x8e, 0x3b, 0x55, 0x51, 0xae, 0x9d, 0x3a, 0xe2, 0xd4, 0xec, 0x6a, 0x01, 0xa6, 0x2c, 0x57, 0xf3,
	0x5b, 0x93, 0x54, 0x00, 0xbc, 0x05, 0xb2, 0xf6, 0x6a, 0x60, 0xbb, 0x96, 0x67, 0x3b, 0x7d, 0xc3,
	0xee, 0xb1, 0x5c, 0xac, 0x40, 0x8a, 0x31, 0x1a, 0x62, 0xd5, 0xd7, 0x80, 0x94, 0x0d, 0x29, 0xeb,
	0xb8, 0x6c, 0x74, 0xba, 0x62, 0xef, 0x0a, 0x24, 0x1a, 0xdd, 0xb6, 0xdf, 0xc4, 0x1f, 0x1c, 0xcc,
	0x25, 0x16, 0xce, 0xe5, 0x3d, 0x81, 0x0b, 0xfe, 0xbb, 0xcf, 0x3b, 0x1b, 0x05, 0x12, 0x75, 0xf6,
	0x32, 0xe0, 0x6c, 0x8e, 0xff, 0x39, 0xa1, 0x77, 0x04, 0x2e, 0x52, 0x36, 0x7c, 0x60, 0x75, 0xed,
	0xb6, 0xe5, 0xb1, 0x15, 0x33, 0x3a, 0xd3, 0xbf, 0x14, 0x4c, 0x31, 0x1e, 0x4e, 0xf1, 0x09, 0x60,
	0xc0, 0xdd, 0x39, 0xa7, 0xa8, 0xd6, 0xe0, 0x92, 0x78, 0x1b, 0x47, 0x7a, 0xbf, 0xe3, 0x6c, 0x8f,
	0xfd, 0x11, 0x88, 0xa6, 0x88, 0xbf, 0xa9, 0x80, 0xd9, 0x68, 0xd8, 0xec, 0x1b, 0x02, 0xd9, 0x50,
	0x29, 0xe1, 0xf7, 0xff, 0xf2, 0x9c, 0x77, 0xb7, 0xb6, 0x4a, 0x77, 0x31, 0x5f, 0x77, 0xb7, 0x3f,
	0x10, 0x90, 0x83, 0x72, 0x4c, 0x41, 0x82, 0x33, 0x66, 0xa3, 0x96, 0x89, 0xe0, 0x15, 0xc8, 0x0a,
	0x44, 0xb5, 0xfb, 0xe6, 0x41, 0x95, 0x56, 0xf7, 0x35, 0x53, 0xa3, 0x34, 0xf3, 0x45, 0xc2, 0x2d,
	0xd8, 0x14, 0x47, 0x3b, 0x86, 0x56, 0x35, 0x34, 0xd3, 0x68, 0xd4, 0xb4, 0xba, 0x79, 0xb7, 0xaa,
	0xef, 0x65, 0xbe, 0x4a, 0x28, 0x43, 0x52, 0x9c, 0x4e, 0xd5, 0xdf, 0x24, 0x44, 0x48, 0xcf, 0xf0,
	0xf1, 0x81, 0x4e, 0xb5, 0xdd, 0xcc, 0x77, 0x09, 0xb3, 0xb0, 0x21, 0xb8, 0x7a, 0xc3, 0x30, 0xb5,
	0x63, 0xfd, 0xd0, 0xc8, 0xfc, 0x90, 0x70, 0x13, 0x50, 0xb0, 0x7a, 0xdd, 0xd0, 0x68, 0xbd, 0xba,
	0xc7, 0x4b, 0xfc, 0x94, 0x2a, 0xbf, 0xa2, 0x20, 0xeb, 0x3d, 0x7e, 0x76, 0x28, 0x5a, 0xc5, 0x1a,
	0x24, 0xe6, 0xab, 0x05, 0x17, 0x72, 0x08, 0xee, 0x34, 0xe5, 0x6a, 0xf8, 0x3c, 0xb0, 0x94, 0xd4,
	0x08, 0x3e, 0x84, 0x94, 0xff, 0x3d, 0xa2, 0xba, 0xa4, 0x60, 0x68, 0x59, 0x28, 0xd7, 0x16, 0x35,
	0xa1, 0x17, 0xad, 0x46, 0xf0, 0x11, 0xa4, 0x03, 0x33, 0x8a, 0xd7, 0x97, 0x54, 0x0e, 0xbf, 0x31,
	0x65, 0xe1, 0xfa, 0xc5, 0x39, 0x57, 0x23, 0xf8, 0x14, 0x36, 0x42, 0x13, 0x85, 0x37, 0x97, 0x07,
	0x11, 0x1a, 0x60, 0xe5, 0xc6, 0x92, 0x3c, 0x16, 0x26, 0x53, 0x8d, 0x6c, 0xa7, 0x3e, 0x4e, 0xf2,
	0xe4, 0xd3, 0x24, 0x4f, 0x3e, 0x4f, 0xf2, 0xa4, 0xb9, 0xce, 0x3f, 0x21, 0x77, 0x7e, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x0d, 0xd6, 0xc0, 0x35, 0x8a, 0x06, 0x00, 0x00,
}
