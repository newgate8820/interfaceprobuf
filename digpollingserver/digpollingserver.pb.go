// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: digpollingserver.proto

/*
Package digpollingserver is a generated protocol buffer package.

protoc --gogofast_out=plugins=grpc:. *.proto

It is generated from these files:

	digpollingserver.proto

It has these top-level messages:

	UserPrivate
	ManualCollectReq
	ManualCollectResp
	DivideMultiSigReq
	DivideMultiSigRsp
*/
package digpollingserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UserPrivate struct {
	Address   string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	EncryPriv string `protobuf:"bytes,2,opt,name=EncryPriv,proto3" json:"EncryPriv,omitempty"`
}

func (m *UserPrivate) Reset()                    { *m = UserPrivate{} }
func (m *UserPrivate) String() string            { return proto.CompactTextString(m) }
func (*UserPrivate) ProtoMessage()               {}
func (*UserPrivate) Descriptor() ([]byte, []int) { return fileDescriptorDigpollingserver, []int{0} }

func (m *UserPrivate) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserPrivate) GetEncryPriv() string {
	if m != nil {
		return m.EncryPriv
	}
	return ""
}

type ManualCollectReq struct {
	CurrencyId        int32   `protobuf:"varint,1,opt,name=CurrencyId,proto3" json:"CurrencyId,omitempty"`
	ThresholdRelation int32   `protobuf:"varint,2,opt,name=ThresholdRelation,proto3" json:"ThresholdRelation,omitempty"`
	Threshold         float32 `protobuf:"fixed32,3,opt,name=Threshold,proto3" json:"Threshold,omitempty"`
	CollectRatio      float32 `protobuf:"fixed32,4,opt,name=CollectRatio,proto3" json:"CollectRatio,omitempty"`
	ToAddress         string  `protobuf:"bytes,5,opt,name=ToAddress,proto3" json:"ToAddress,omitempty"`
}

func (m *ManualCollectReq) Reset()         { *m = ManualCollectReq{} }
func (m *ManualCollectReq) String() string { return proto.CompactTextString(m) }
func (*ManualCollectReq) ProtoMessage()    {}
func (*ManualCollectReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDigpollingserver, []int{1}
}

func (m *ManualCollectReq) GetCurrencyId() int32 {
	if m != nil {
		return m.CurrencyId
	}
	return 0
}

func (m *ManualCollectReq) GetThresholdRelation() int32 {
	if m != nil {
		return m.ThresholdRelation
	}
	return 0
}

func (m *ManualCollectReq) GetThreshold() float32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *ManualCollectReq) GetCollectRatio() float32 {
	if m != nil {
		return m.CollectRatio
	}
	return 0
}

func (m *ManualCollectReq) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

type ManualCollectResp struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (m *ManualCollectResp) Reset()         { *m = ManualCollectResp{} }
func (m *ManualCollectResp) String() string { return proto.CompactTextString(m) }
func (*ManualCollectResp) ProtoMessage()    {}
func (*ManualCollectResp) Descriptor() ([]byte, []int) {
	return fileDescriptorDigpollingserver, []int{2}
}

func (m *ManualCollectResp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// 获取此次交易手续费請求
type DivideMultiSigReq struct {
	DivideId        int32          `protobuf:"varint,1,opt,name=DivideId,proto3" json:"DivideId,omitempty"`
	CurrencyId      int32          `protobuf:"varint,2,opt,name=CurrencyId,proto3" json:"CurrencyId,omitempty"`
	FromAddress     string         `protobuf:"bytes,3,opt,name=FromAddress,proto3" json:"FromAddress,omitempty"`
	ToWalletType    int32          `protobuf:"varint,4,opt,name=ToWalletType,proto3" json:"ToWalletType,omitempty"`
	ToAddress       string         `protobuf:"bytes,5,opt,name=ToAddress,proto3" json:"ToAddress,omitempty"`
	Amount          string         `protobuf:"bytes,6,opt,name=Amount,proto3" json:"Amount,omitempty"`
	CreateTimestamp int32          `protobuf:"varint,7,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"`
	Signs           []*UserPrivate `protobuf:"bytes,8,rep,name=Signs" json:"Signs,omitempty"`
	M               int32          `protobuf:"varint,9,opt,name=M,proto3" json:"M,omitempty"`
}

func (m *DivideMultiSigReq) Reset()         { *m = DivideMultiSigReq{} }
func (m *DivideMultiSigReq) String() string { return proto.CompactTextString(m) }
func (*DivideMultiSigReq) ProtoMessage()    {}
func (*DivideMultiSigReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDigpollingserver, []int{3}
}

func (m *DivideMultiSigReq) GetDivideId() int32 {
	if m != nil {
		return m.DivideId
	}
	return 0
}

func (m *DivideMultiSigReq) GetCurrencyId() int32 {
	if m != nil {
		return m.CurrencyId
	}
	return 0
}

func (m *DivideMultiSigReq) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *DivideMultiSigReq) GetToWalletType() int32 {
	if m != nil {
		return m.ToWalletType
	}
	return 0
}

func (m *DivideMultiSigReq) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *DivideMultiSigReq) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *DivideMultiSigReq) GetCreateTimestamp() int32 {
	if m != nil {
		return m.CreateTimestamp
	}
	return 0
}

func (m *DivideMultiSigReq) GetSigns() []*UserPrivate {
	if m != nil {
		return m.Signs
	}
	return nil
}

func (m *DivideMultiSigReq) GetM() int32 {
	if m != nil {
		return m.M
	}
	return 0
}

// 获取此次交易手续费返回
type DivideMultiSigRsp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	TxId    string `protobuf:"bytes,2,opt,name=TxId,proto3" json:"TxId,omitempty"`
}

func (m *DivideMultiSigRsp) Reset()         { *m = DivideMultiSigRsp{} }
func (m *DivideMultiSigRsp) String() string { return proto.CompactTextString(m) }
func (*DivideMultiSigRsp) ProtoMessage()    {}
func (*DivideMultiSigRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorDigpollingserver, []int{4}
}

func (m *DivideMultiSigRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *DivideMultiSigRsp) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func init() {
	proto.RegisterType((*UserPrivate)(nil), "digpollingserver.UserPrivate")
	proto.RegisterType((*ManualCollectReq)(nil), "digpollingserver.ManualCollectReq")
	proto.RegisterType((*ManualCollectResp)(nil), "digpollingserver.ManualCollectResp")
	proto.RegisterType((*DivideMultiSigReq)(nil), "digpollingserver.DivideMultiSigReq")
	proto.RegisterType((*DivideMultiSigRsp)(nil), "digpollingserver.DivideMultiSigRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServerService service

type ServerServiceClient interface {
	//
	ManualCollect(ctx context.Context, in *ManualCollectReq, opts ...grpc.CallOption) (*ManualCollectResp, error)
	DivideMultiSig(ctx context.Context, in *DivideMultiSigReq, opts ...grpc.CallOption) (*DivideMultiSigRsp, error)
}

type serverServiceClient struct {
	cc *grpc.ClientConn
}

func NewServerServiceClient(cc *grpc.ClientConn) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) ManualCollect(ctx context.Context, in *ManualCollectReq, opts ...grpc.CallOption) (*ManualCollectResp, error) {
	out := new(ManualCollectResp)
	err := grpc.Invoke(ctx, "/digpollingserver.ServerService/ManualCollect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) DivideMultiSig(ctx context.Context, in *DivideMultiSigReq, opts ...grpc.CallOption) (*DivideMultiSigRsp, error) {
	out := new(DivideMultiSigRsp)
	err := grpc.Invoke(ctx, "/digpollingserver.ServerService/DivideMultiSig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServerService service

type ServerServiceServer interface {
	//
	ManualCollect(context.Context, *ManualCollectReq) (*ManualCollectResp, error)
	DivideMultiSig(context.Context, *DivideMultiSigReq) (*DivideMultiSigRsp, error)
}

func RegisterServerServiceServer(s *grpc.Server, srv ServerServiceServer) {
	s.RegisterService(&_ServerService_serviceDesc, srv)
}

func _ServerService_ManualCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualCollectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ManualCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/digpollingserver.ServerService/ManualCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ManualCollect(ctx, req.(*ManualCollectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_DivideMultiSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivideMultiSigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).DivideMultiSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/digpollingserver.ServerService/DivideMultiSig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).DivideMultiSig(ctx, req.(*DivideMultiSigReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "digpollingserver.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ManualCollect",
			Handler:    _ServerService_ManualCollect_Handler,
		},
		{
			MethodName: "DivideMultiSig",
			Handler:    _ServerService_DivideMultiSig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "digpollingserver.proto",
}

func (m *UserPrivate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPrivate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.EncryPriv) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(len(m.EncryPriv)))
		i += copy(dAtA[i:], m.EncryPriv)
	}
	return i, nil
}

func (m *ManualCollectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManualCollectReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrencyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(m.CurrencyId))
	}
	if m.ThresholdRelation != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(m.ThresholdRelation))
	}
	if m.Threshold != 0 {
		dAtA[i] = 0x1d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Threshold))))
		i += 4
	}
	if m.CollectRatio != 0 {
		dAtA[i] = 0x25
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CollectRatio))))
		i += 4
	}
	if len(m.ToAddress) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(len(m.ToAddress)))
		i += copy(dAtA[i:], m.ToAddress)
	}
	return i, nil
}

func (m *ManualCollectResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManualCollectResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *DivideMultiSigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DivideMultiSigReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DivideId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(m.DivideId))
	}
	if m.CurrencyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(m.CurrencyId))
	}
	if len(m.FromAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(len(m.FromAddress)))
		i += copy(dAtA[i:], m.FromAddress)
	}
	if m.ToWalletType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(m.ToWalletType))
	}
	if len(m.ToAddress) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(len(m.ToAddress)))
		i += copy(dAtA[i:], m.ToAddress)
	}
	if len(m.Amount) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(len(m.Amount)))
		i += copy(dAtA[i:], m.Amount)
	}
	if m.CreateTimestamp != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(m.CreateTimestamp))
	}
	if len(m.Signs) > 0 {
		for _, msg := range m.Signs {
			dAtA[i] = 0x42
			i++
			i = encodeVarintDigpollingserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.M != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(m.M))
	}
	return i, nil
}

func (m *DivideMultiSigRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DivideMultiSigRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.TxId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDigpollingserver(dAtA, i, uint64(len(m.TxId)))
		i += copy(dAtA[i:], m.TxId)
	}
	return i, nil
}

func encodeVarintDigpollingserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserPrivate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDigpollingserver(uint64(l))
	}
	l = len(m.EncryPriv)
	if l > 0 {
		n += 1 + l + sovDigpollingserver(uint64(l))
	}
	return n
}

func (m *ManualCollectReq) Size() (n int) {
	var l int
	_ = l
	if m.CurrencyId != 0 {
		n += 1 + sovDigpollingserver(uint64(m.CurrencyId))
	}
	if m.ThresholdRelation != 0 {
		n += 1 + sovDigpollingserver(uint64(m.ThresholdRelation))
	}
	if m.Threshold != 0 {
		n += 5
	}
	if m.CollectRatio != 0 {
		n += 5
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovDigpollingserver(uint64(l))
	}
	return n
}

func (m *ManualCollectResp) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovDigpollingserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *DivideMultiSigReq) Size() (n int) {
	var l int
	_ = l
	if m.DivideId != 0 {
		n += 1 + sovDigpollingserver(uint64(m.DivideId))
	}
	if m.CurrencyId != 0 {
		n += 1 + sovDigpollingserver(uint64(m.CurrencyId))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovDigpollingserver(uint64(l))
	}
	if m.ToWalletType != 0 {
		n += 1 + sovDigpollingserver(uint64(m.ToWalletType))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovDigpollingserver(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovDigpollingserver(uint64(l))
	}
	if m.CreateTimestamp != 0 {
		n += 1 + sovDigpollingserver(uint64(m.CreateTimestamp))
	}
	if len(m.Signs) > 0 {
		for _, e := range m.Signs {
			l = e.Size()
			n += 1 + l + sovDigpollingserver(uint64(l))
		}
	}
	if m.M != 0 {
		n += 1 + sovDigpollingserver(uint64(m.M))
	}
	return n
}

func (m *DivideMultiSigRsp) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovDigpollingserver(uint64(m.ErrCode))
	}
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovDigpollingserver(uint64(l))
	}
	return n
}

func sovDigpollingserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDigpollingserver(x uint64) (n int) {
	return sovDigpollingserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserPrivate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDigpollingserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPrivate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPrivate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDigpollingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryPriv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDigpollingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryPriv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDigpollingserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDigpollingserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManualCollectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDigpollingserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManualCollectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManualCollectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyId", wireType)
			}
			m.CurrencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrencyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThresholdRelation", wireType)
			}
			m.ThresholdRelation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThresholdRelation |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Threshold = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectRatio", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CollectRatio = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDigpollingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDigpollingserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDigpollingserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManualCollectResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDigpollingserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManualCollectResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManualCollectResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDigpollingserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDigpollingserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DivideMultiSigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDigpollingserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DivideMultiSigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DivideMultiSigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DivideId", wireType)
			}
			m.DivideId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DivideId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyId", wireType)
			}
			m.CurrencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrencyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDigpollingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToWalletType", wireType)
			}
			m.ToWalletType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToWalletType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDigpollingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDigpollingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimestamp", wireType)
			}
			m.CreateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTimestamp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDigpollingserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signs = append(m.Signs, &UserPrivate{})
			if err := m.Signs[len(m.Signs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			m.M = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.M |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDigpollingserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDigpollingserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DivideMultiSigRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDigpollingserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DivideMultiSigRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DivideMultiSigRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDigpollingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDigpollingserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDigpollingserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDigpollingserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDigpollingserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDigpollingserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDigpollingserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDigpollingserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDigpollingserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDigpollingserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDigpollingserver   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("digpollingserver.proto", fileDescriptorDigpollingserver) }

var fileDescriptorDigpollingserver = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x71, 0xbb, 0xe9, 0x6e, 0xa7, 0x5d, 0xd8, 0xfa, 0xb0, 0xb2, 0x2a, 0xa8, 0x2a, 0x73,
	0xe9, 0x01, 0xad, 0xc4, 0xee, 0x13, 0x94, 0xb2, 0x48, 0x1c, 0x2a, 0x21, 0x37, 0x08, 0x09, 0x71,
	0x09, 0xcd, 0xa8, 0x6b, 0xc9, 0x8d, 0x83, 0xed, 0x56, 0xf4, 0xcd, 0x38, 0x72, 0x84, 0x1b, 0x8f,
	0x80, 0xfa, 0x24, 0xc8, 0x6e, 0xd3, 0x3f, 0x09, 0xda, 0x5e, 0xa2, 0xcc, 0x6f, 0xc6, 0x9f, 0xe7,
	0x9b, 0x4c, 0xe0, 0x3a, 0x95, 0xb3, 0x5c, 0x2b, 0x25, 0xb3, 0x99, 0x45, 0xb3, 0x44, 0x73, 0x93,
	0x1b, 0xed, 0x34, 0xbd, 0x2a, 0x73, 0x7e, 0x0f, 0xad, 0x8f, 0x16, 0xcd, 0x07, 0x23, 0x97, 0x89,
	0x43, 0xca, 0xe0, 0x7c, 0x98, 0xa6, 0x06, 0xad, 0x65, 0xa4, 0x4f, 0x06, 0x4d, 0x51, 0x84, 0xf4,
	0x39, 0x34, 0xef, 0xb3, 0xa9, 0x59, 0xf9, 0x4a, 0x56, 0x0b, 0xb9, 0x3d, 0xe0, 0x3f, 0x09, 0x5c,
	0x8d, 0x93, 0x6c, 0x91, 0xa8, 0x91, 0x56, 0x0a, 0xa7, 0x4e, 0xe0, 0x37, 0xda, 0x03, 0x18, 0x2d,
	0x8c, 0xc1, 0x6c, 0xba, 0x7a, 0x9f, 0x06, 0xbd, 0x48, 0x1c, 0x10, 0xfa, 0x0a, 0x3a, 0xf1, 0x83,
	0x41, 0xfb, 0xa0, 0x55, 0x2a, 0x50, 0x25, 0x4e, 0xea, 0x2c, 0x48, 0x47, 0xa2, 0x9a, 0xf0, 0x0d,
	0xec, 0x20, 0xab, 0xf7, 0xc9, 0xa0, 0x26, 0xf6, 0x80, 0x72, 0x68, 0x17, 0x37, 0xfb, 0x72, 0x76,
	0x16, 0x0a, 0x8e, 0x58, 0x50, 0xd0, 0x85, 0xbd, 0x68, 0x63, 0x61, 0x07, 0xf8, 0x6b, 0xe8, 0x94,
	0x1c, 0xd8, 0xdc, 0x1f, 0x41, 0x63, 0xb4, 0x19, 0xe9, 0x14, 0xb7, 0x0e, 0xf6, 0x80, 0xff, 0xa8,
	0x41, 0xe7, 0xad, 0x5c, 0xca, 0x14, 0xc7, 0x0b, 0xe5, 0xe4, 0x44, 0xce, 0xbc, 0xed, 0x2e, 0x5c,
	0x6c, 0xe0, 0xce, 0xf4, 0x2e, 0x2e, 0x8d, 0xa4, 0x56, 0x19, 0x49, 0x1f, 0x5a, 0xef, 0x8c, 0x9e,
	0x17, 0x4d, 0xd6, 0x43, 0x93, 0x87, 0xc8, 0x1b, 0x8d, 0xf5, 0xa7, 0x44, 0x29, 0x74, 0xf1, 0x2a,
	0xc7, 0x60, 0x34, 0x12, 0x47, 0xec, 0x71, 0xa3, 0xf4, 0x1a, 0x1a, 0xc3, 0xb9, 0x5e, 0x64, 0x8e,
	0x35, 0x42, 0x6a, 0x1b, 0xd1, 0x01, 0x3c, 0x1b, 0x19, 0x4c, 0x1c, 0xc6, 0x72, 0x8e, 0xd6, 0x25,
	0xf3, 0x9c, 0x9d, 0x07, 0xf1, 0x32, 0xa6, 0x77, 0x10, 0x4d, 0xe4, 0x2c, 0xb3, 0xec, 0xa2, 0x5f,
	0x1f, 0xb4, 0x6e, 0x5f, 0xdc, 0x54, 0xd6, 0xed, 0x60, 0xa7, 0xc4, 0xa6, 0x96, 0xb6, 0x81, 0x8c,
	0x59, 0x33, 0x08, 0x92, 0x31, 0x1f, 0x56, 0x26, 0x67, 0x73, 0xbf, 0x7d, 0x68, 0x0e, 0x67, 0x5d,
	0x84, 0x94, 0xc2, 0x59, 0xfc, 0x7d, 0x3b, 0xb1, 0xa6, 0x08, 0xef, 0xb7, 0xbf, 0x09, 0x5c, 0x4e,
	0xc2, 0x75, 0xfe, 0x29, 0xa7, 0x48, 0x3f, 0xc3, 0xe5, 0xd1, 0x27, 0xa4, 0xbc, 0xda, 0x59, 0x79,
	0x4b, 0xbb, 0x2f, 0x4f, 0xd6, 0xd8, 0x9c, 0x3f, 0xa1, 0x5f, 0xe0, 0xe9, 0x71, 0xc3, 0xf4, 0x3f,
	0x07, 0x2b, 0xcb, 0xd0, 0x3d, 0x5d, 0xe4, 0xd5, 0xdf, 0xb4, 0x7f, 0xad, 0x7b, 0xe4, 0xcf, 0xba,
	0x47, 0xfe, 0xae, 0x7b, 0xe4, 0x6b, 0x23, 0xfc, 0xad, 0x77, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xcf, 0x97, 0x36, 0xb0, 0xc7, 0x03, 0x00, 0x00,
}
