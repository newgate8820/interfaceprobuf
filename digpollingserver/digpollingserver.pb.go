// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: digpollingserver.proto

// protoc --gogofast_out=plugins=grpc:. *.proto

package digpollingserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	EncryPriv string `protobuf:"bytes,2,opt,name=EncryPriv,proto3" json:"EncryPriv,omitempty"`
}

func (x *UserPrivate) Reset() {
	*x = UserPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digpollingserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPrivate) ProtoMessage() {}

func (x *UserPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_digpollingserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPrivate.ProtoReflect.Descriptor instead.
func (*UserPrivate) Descriptor() ([]byte, []int) {
	return file_digpollingserver_proto_rawDescGZIP(), []int{0}
}

func (x *UserPrivate) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserPrivate) GetEncryPriv() string {
	if x != nil {
		return x.EncryPriv
	}
	return ""
}

type ManualCollectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyId        int32   `protobuf:"varint,1,opt,name=CurrencyId,proto3" json:"CurrencyId,omitempty"`
	ThresholdRelation int32   `protobuf:"varint,2,opt,name=ThresholdRelation,proto3" json:"ThresholdRelation,omitempty"`
	Threshold         float32 `protobuf:"fixed32,3,opt,name=Threshold,proto3" json:"Threshold,omitempty"`
	CollectRatio      float32 `protobuf:"fixed32,4,opt,name=CollectRatio,proto3" json:"CollectRatio,omitempty"`
	ToAddress         string  `protobuf:"bytes,5,opt,name=ToAddress,proto3" json:"ToAddress,omitempty"`
}

func (x *ManualCollectReq) Reset() {
	*x = ManualCollectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digpollingserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualCollectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualCollectReq) ProtoMessage() {}

func (x *ManualCollectReq) ProtoReflect() protoreflect.Message {
	mi := &file_digpollingserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualCollectReq.ProtoReflect.Descriptor instead.
func (*ManualCollectReq) Descriptor() ([]byte, []int) {
	return file_digpollingserver_proto_rawDescGZIP(), []int{1}
}

func (x *ManualCollectReq) GetCurrencyId() int32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *ManualCollectReq) GetThresholdRelation() int32 {
	if x != nil {
		return x.ThresholdRelation
	}
	return 0
}

func (x *ManualCollectReq) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *ManualCollectReq) GetCollectRatio() float32 {
	if x != nil {
		return x.CollectRatio
	}
	return 0
}

func (x *ManualCollectReq) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

type ManualCollectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *ManualCollectResp) Reset() {
	*x = ManualCollectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digpollingserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualCollectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualCollectResp) ProtoMessage() {}

func (x *ManualCollectResp) ProtoReflect() protoreflect.Message {
	mi := &file_digpollingserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualCollectResp.ProtoReflect.Descriptor instead.
func (*ManualCollectResp) Descriptor() ([]byte, []int) {
	return file_digpollingserver_proto_rawDescGZIP(), []int{2}
}

func (x *ManualCollectResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 获取此次交易手续费請求
type DivideMultiSigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DivideId        int32          `protobuf:"varint,1,opt,name=DivideId,proto3" json:"DivideId,omitempty"`         //數字貨幣類型
	CurrencyId      int32          `protobuf:"varint,2,opt,name=CurrencyId,proto3" json:"CurrencyId,omitempty"`     // 發送方地址
	FromAddress     string         `protobuf:"bytes,3,opt,name=FromAddress,proto3" json:"FromAddress,omitempty"`    // 加密的私鑰
	ToWalletType    int32          `protobuf:"varint,4,opt,name=ToWalletType,proto3" json:"ToWalletType,omitempty"` // 发送方的userId
	ToAddress       string         `protobuf:"bytes,5,opt,name=ToAddress,proto3" json:"ToAddress,omitempty"`        //转向的地址
	Amount          string         `protobuf:"bytes,6,opt,name=Amount,proto3" json:"Amount,omitempty"`              //交易余额  比如 BTC: 0.0001 BTC
	CreateTimestamp int32          `protobuf:"varint,7,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"`
	Signs           []*UserPrivate `protobuf:"bytes,8,rep,name=Signs,proto3" json:"Signs,omitempty"`
	M               int32          `protobuf:"varint,9,opt,name=M,proto3" json:"M,omitempty"`
}

func (x *DivideMultiSigReq) Reset() {
	*x = DivideMultiSigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digpollingserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DivideMultiSigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivideMultiSigReq) ProtoMessage() {}

func (x *DivideMultiSigReq) ProtoReflect() protoreflect.Message {
	mi := &file_digpollingserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivideMultiSigReq.ProtoReflect.Descriptor instead.
func (*DivideMultiSigReq) Descriptor() ([]byte, []int) {
	return file_digpollingserver_proto_rawDescGZIP(), []int{3}
}

func (x *DivideMultiSigReq) GetDivideId() int32 {
	if x != nil {
		return x.DivideId
	}
	return 0
}

func (x *DivideMultiSigReq) GetCurrencyId() int32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *DivideMultiSigReq) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *DivideMultiSigReq) GetToWalletType() int32 {
	if x != nil {
		return x.ToWalletType
	}
	return 0
}

func (x *DivideMultiSigReq) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *DivideMultiSigReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DivideMultiSigReq) GetCreateTimestamp() int32 {
	if x != nil {
		return x.CreateTimestamp
	}
	return 0
}

func (x *DivideMultiSigReq) GetSigns() []*UserPrivate {
	if x != nil {
		return x.Signs
	}
	return nil
}

func (x *DivideMultiSigReq) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

// 获取此次交易手续费返回
type DivideMultiSigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"` // 返回状态
	TxId    string `protobuf:"bytes,2,opt,name=TxId,proto3" json:"TxId,omitempty"`
}

func (x *DivideMultiSigRsp) Reset() {
	*x = DivideMultiSigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digpollingserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DivideMultiSigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivideMultiSigRsp) ProtoMessage() {}

func (x *DivideMultiSigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_digpollingserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivideMultiSigRsp.ProtoReflect.Descriptor instead.
func (*DivideMultiSigRsp) Descriptor() ([]byte, []int) {
	return file_digpollingserver_proto_rawDescGZIP(), []int{4}
}

func (x *DivideMultiSigRsp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *DivideMultiSigRsp) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

var File_digpollingserver_proto protoreflect.FileDescriptor

var file_digpollingserver_proto_rawDesc = []byte{
	0x0a, 0x16, 0x64, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x64, 0x69, 0x67, 0x70, 0x6f, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x50, 0x72, 0x69, 0x76,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x50, 0x72, 0x69,
	0x76, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x31, 0x0a, 0x11, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb8, 0x02, 0x0a, 0x11, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x72, 0x6f,
	0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x54, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x33, 0x0a, 0x05, 0x53, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x64, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53,
	0x69, 0x67, 0x6e, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x4d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x4d, 0x22, 0x41, 0x0a, 0x11, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x69, 0x67, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x78, 0x49, 0x64, 0x32, 0xc9, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x64, 0x69, 0x67, 0x70, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x64,
	0x69, 0x67, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x69, 0x67, 0x12, 0x23, 0x2e, 0x64, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x64, 0x69, 0x67,
	0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x42, 0x22, 0x5a, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_digpollingserver_proto_rawDescOnce sync.Once
	file_digpollingserver_proto_rawDescData = file_digpollingserver_proto_rawDesc
)

func file_digpollingserver_proto_rawDescGZIP() []byte {
	file_digpollingserver_proto_rawDescOnce.Do(func() {
		file_digpollingserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_digpollingserver_proto_rawDescData)
	})
	return file_digpollingserver_proto_rawDescData
}

var file_digpollingserver_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_digpollingserver_proto_goTypes = []interface{}{
	(*UserPrivate)(nil),       // 0: digpollingserver.UserPrivate
	(*ManualCollectReq)(nil),  // 1: digpollingserver.ManualCollectReq
	(*ManualCollectResp)(nil), // 2: digpollingserver.ManualCollectResp
	(*DivideMultiSigReq)(nil), // 3: digpollingserver.DivideMultiSigReq
	(*DivideMultiSigRsp)(nil), // 4: digpollingserver.DivideMultiSigRsp
}
var file_digpollingserver_proto_depIdxs = []int32{
	0, // 0: digpollingserver.DivideMultiSigReq.Signs:type_name -> digpollingserver.UserPrivate
	1, // 1: digpollingserver.ServerService.ManualCollect:input_type -> digpollingserver.ManualCollectReq
	3, // 2: digpollingserver.ServerService.DivideMultiSig:input_type -> digpollingserver.DivideMultiSigReq
	2, // 3: digpollingserver.ServerService.ManualCollect:output_type -> digpollingserver.ManualCollectResp
	4, // 4: digpollingserver.ServerService.DivideMultiSig:output_type -> digpollingserver.DivideMultiSigRsp
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_digpollingserver_proto_init() }
func file_digpollingserver_proto_init() {
	if File_digpollingserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_digpollingserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_digpollingserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualCollectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_digpollingserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualCollectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_digpollingserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DivideMultiSigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_digpollingserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DivideMultiSigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_digpollingserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_digpollingserver_proto_goTypes,
		DependencyIndexes: file_digpollingserver_proto_depIdxs,
		MessageInfos:      file_digpollingserver_proto_msgTypes,
	}.Build()
	File_digpollingserver_proto = out.File
	file_digpollingserver_proto_rawDesc = nil
	file_digpollingserver_proto_goTypes = nil
	file_digpollingserver_proto_depIdxs = nil
}
