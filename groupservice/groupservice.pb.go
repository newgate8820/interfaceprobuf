//protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/groupservice/groupservice.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: groupservice.proto

package groupservice

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 返回错误码
type ActiveErrorCode int32

const (
	ActiveErrorCode_Active_OK       ActiveErrorCode = 0    //ok
	ActiveErrorCode_Active_SYSERR   ActiveErrorCode = 1001 //系统错误
	ActiveErrorCode_Active_NOT_FIND ActiveErrorCode = 1002 //未找到数据
)

// Enum value maps for ActiveErrorCode.
var (
	ActiveErrorCode_name = map[int32]string{
		0:    "Active_OK",
		1001: "Active_SYSERR",
		1002: "Active_NOT_FIND",
	}
	ActiveErrorCode_value = map[string]int32{
		"Active_OK":       0,
		"Active_SYSERR":   1001,
		"Active_NOT_FIND": 1002,
	}
)

func (x ActiveErrorCode) Enum() *ActiveErrorCode {
	p := new(ActiveErrorCode)
	*p = x
	return p
}

func (x ActiveErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActiveErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_groupservice_proto_enumTypes[0].Descriptor()
}

func (ActiveErrorCode) Type() protoreflect.EnumType {
	return &file_groupservice_proto_enumTypes[0]
}

func (x ActiveErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActiveErrorCode.Descriptor instead.
func (ActiveErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_groupservice_proto_rawDescGZIP(), []int{0}
}

// username和邀请链接对应的对象类型
type PeerType int32

const (
	PeerType_PeerUser      PeerType = 0 //用户
	PeerType_PeerChat      PeerType = 1 //普通群
	PeerType_PeerChannel   PeerType = 2 //频道
	PeerType_PeerSuperChat PeerType = 3 //超级群
)

// Enum value maps for PeerType.
var (
	PeerType_name = map[int32]string{
		0: "PeerUser",
		1: "PeerChat",
		2: "PeerChannel",
		3: "PeerSuperChat",
	}
	PeerType_value = map[string]int32{
		"PeerUser":      0,
		"PeerChat":      1,
		"PeerChannel":   2,
		"PeerSuperChat": 3,
	}
)

func (x PeerType) Enum() *PeerType {
	p := new(PeerType)
	*p = x
	return p
}

func (x PeerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerType) Descriptor() protoreflect.EnumDescriptor {
	return file_groupservice_proto_enumTypes[1].Descriptor()
}

func (PeerType) Type() protoreflect.EnumType {
	return &file_groupservice_proto_enumTypes[1]
}

func (x PeerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerType.Descriptor instead.
func (PeerType) EnumDescriptor() ([]byte, []int) {
	return file_groupservice_proto_rawDescGZIP(), []int{1}
}

// 群成员搜索类型
type ChannelSearchType int32

const (
	ChannelSearchType_SearchAll    ChannelSearchType = 0 //所有用户
	ChannelSearchType_SearchAdmin  ChannelSearchType = 1 //管理员
	ChannelSearchType_SearchBanned ChannelSearchType = 2 //被禁权
	ChannelSearchType_SearchBot    ChannelSearchType = 3 //机器人
	ChannelSearchType_SearchKicked ChannelSearchType = 4 //被踢
)

// Enum value maps for ChannelSearchType.
var (
	ChannelSearchType_name = map[int32]string{
		0: "SearchAll",
		1: "SearchAdmin",
		2: "SearchBanned",
		3: "SearchBot",
		4: "SearchKicked",
	}
	ChannelSearchType_value = map[string]int32{
		"SearchAll":    0,
		"SearchAdmin":  1,
		"SearchBanned": 2,
		"SearchBot":    3,
		"SearchKicked": 4,
	}
)

func (x ChannelSearchType) Enum() *ChannelSearchType {
	p := new(ChannelSearchType)
	*p = x
	return p
}

func (x ChannelSearchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelSearchType) Descriptor() protoreflect.EnumDescriptor {
	return file_groupservice_proto_enumTypes[2].Descriptor()
}

func (ChannelSearchType) Type() protoreflect.EnumType {
	return &file_groupservice_proto_enumTypes[2]
}

func (x ChannelSearchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelSearchType.Descriptor instead.
func (ChannelSearchType) EnumDescriptor() ([]byte, []int) {
	return file_groupservice_proto_rawDescGZIP(), []int{2}
}

// username存储结构
type UserNameBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string   `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	Id       int32    `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Type     PeerType `protobuf:"varint,3,opt,name=Type,proto3,enum=groupservice.PeerType" json:"Type,omitempty"`
}

func (x *UserNameBase) Reset() {
	*x = UserNameBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groupservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNameBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNameBase) ProtoMessage() {}

func (x *UserNameBase) ProtoReflect() protoreflect.Message {
	mi := &file_groupservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNameBase.ProtoReflect.Descriptor instead.
func (*UserNameBase) Descriptor() ([]byte, []int) {
	return file_groupservice_proto_rawDescGZIP(), []int{0}
}

func (x *UserNameBase) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserNameBase) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserNameBase) GetType() PeerType {
	if x != nil {
		return x.Type
	}
	return PeerType_PeerUser
}

// 超级群信息
type ChatChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId            int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	AccessHash           int64  `protobuf:"varint,2,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
	Encry                bool   `protobuf:"varint,3,opt,name=Encry,proto3" json:"Encry,omitempty"`
	BroadcastOrMegagroup bool   `protobuf:"varint,4,opt,name=Broadcast_or_megagroup,json=BroadcastOrMegagroup,proto3" json:"Broadcast_or_megagroup,omitempty"`
	Verified             bool   `protobuf:"varint,5,opt,name=Verified,proto3" json:"Verified,omitempty"`
	Restricted           bool   `protobuf:"varint,6,opt,name=Restricted,proto3" json:"Restricted,omitempty"`
	Democracy            bool   `protobuf:"varint,7,opt,name=Democracy,proto3" json:"Democracy,omitempty"`
	Signatures           bool   `protobuf:"varint,8,opt,name=Signatures,proto3" json:"Signatures,omitempty"`
	Min                  bool   `protobuf:"varint,9,opt,name=Min,proto3" json:"Min,omitempty"`
	Title                string `protobuf:"bytes,10,opt,name=Title,proto3" json:"Title,omitempty"`
	UserName             string `protobuf:"bytes,11,opt,name=User_name,json=UserName,proto3" json:"User_name,omitempty"`
	About                string `protobuf:"bytes,12,opt,name=About,proto3" json:"About,omitempty"`
	Photo                string `protobuf:"bytes,13,opt,name=Photo,proto3" json:"Photo,omitempty"`
	Date                 int32  `protobuf:"varint,14,opt,name=Date,proto3" json:"Date,omitempty"`
	Version              int32  `protobuf:"varint,15,opt,name=Version,proto3" json:"Version,omitempty"`
	RestrictionReason    string `protobuf:"bytes,16,opt,name=Restriction_reason,json=RestrictionReason,proto3" json:"Restriction_reason,omitempty"`
	ParticipantsCount    int32  `protobuf:"varint,17,opt,name=Participants_count,json=ParticipantsCount,proto3" json:"Participants_count,omitempty"`
	AdminsCount          int32  `protobuf:"varint,18,opt,name=Admins_count,json=AdminsCount,proto3" json:"Admins_count,omitempty"`
	KickedCount          int32  `protobuf:"varint,19,opt,name=Kicked_count,json=KickedCount,proto3" json:"Kicked_count,omitempty"`
	BannedCount          int32  `protobuf:"varint,20,opt,name=Banned_count,json=BannedCount,proto3" json:"Banned_count,omitempty"`
	ExportedInviteLink   string `protobuf:"bytes,21,opt,name=Exported_invite_link,json=ExportedInviteLink,proto3" json:"Exported_invite_link,omitempty"`
	BotCount             int32  `protobuf:"varint,22,opt,name=Bot_count,json=BotCount,proto3" json:"Bot_count,omitempty"`
	MigratedFromMaxId    int32  `protobuf:"varint,23,opt,name=Migrated_from_max_id,json=MigratedFromMaxId,proto3" json:"Migrated_from_max_id,omitempty"`
	MigratedFromChatId   int32  `protobuf:"varint,24,opt,name=Migrated_from_chat_id,json=MigratedFromChatId,proto3" json:"Migrated_from_chat_id,omitempty"`
	PinnedMsgId          int32  `protobuf:"varint,25,opt,name=Pinned_msg_id,json=PinnedMsgId,proto3" json:"Pinned_msg_id,omitempty"`
	Cluster              int32  `protobuf:"varint,26,opt,name=Cluster,proto3" json:"Cluster,omitempty"`
	Invite_Rule          int32  `protobuf:"varint,27,opt,name=Invite_Rule,json=InviteRule,proto3" json:"Invite_Rule,omitempty"`
	Creator              int32  `protobuf:"varint,28,opt,name=Creator,proto3" json:"Creator,omitempty"`
	EveryoneQuiet        bool   `protobuf:"varint,29,opt,name=Everyone_quiet,json=EveryoneQuiet,proto3" json:"Everyone_quiet,omitempty"`
	PrivateChat          bool   `protobuf:"varint,30,opt,name=Private_chat,json=PrivateChat,proto3" json:"Private_chat,omitempty"`
	Id                   int32  `protobuf:"varint,31,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *ChatChannel) Reset() {
	*x = ChatChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groupservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatChannel) ProtoMessage() {}

func (x *ChatChannel) ProtoReflect() protoreflect.Message {
	mi := &file_groupservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatChannel.ProtoReflect.Descriptor instead.
func (*ChatChannel) Descriptor() ([]byte, []int) {
	return file_groupservice_proto_rawDescGZIP(), []int{1}
}

func (x *ChatChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChatChannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ChatChannel) GetEncry() bool {
	if x != nil {
		return x.Encry
	}
	return false
}

func (x *ChatChannel) GetBroadcastOrMegagroup() bool {
	if x != nil {
		return x.BroadcastOrMegagroup
	}
	return false
}

func (x *ChatChannel) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *ChatChannel) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *ChatChannel) GetDemocracy() bool {
	if x != nil {
		return x.Democracy
	}
	return false
}

func (x *ChatChannel) GetSignatures() bool {
	if x != nil {
		return x.Signatures
	}
	return false
}

func (x *ChatChannel) GetMin() bool {
	if x != nil {
		return x.Min
	}
	return false
}

func (x *ChatChannel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChatChannel) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ChatChannel) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *ChatChannel) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *ChatChannel) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ChatChannel) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChatChannel) GetRestrictionReason() string {
	if x != nil {
		return x.RestrictionReason
	}
	return ""
}

func (x *ChatChannel) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *ChatChannel) GetAdminsCount() int32 {
	if x != nil {
		return x.AdminsCount
	}
	return 0
}

func (x *ChatChannel) GetKickedCount() int32 {
	if x != nil {
		return x.KickedCount
	}
	return 0
}

func (x *ChatChannel) GetBannedCount() int32 {
	if x != nil {
		return x.BannedCount
	}
	return 0
}

func (x *ChatChannel) GetExportedInviteLink() string {
	if x != nil {
		return x.ExportedInviteLink
	}
	return ""
}

func (x *ChatChannel) GetBotCount() int32 {
	if x != nil {
		return x.BotCount
	}
	return 0
}

func (x *ChatChannel) GetMigratedFromMaxId() int32 {
	if x != nil {
		return x.MigratedFromMaxId
	}
	return 0
}

func (x *ChatChannel) GetMigratedFromChatId() int32 {
	if x != nil {
		return x.MigratedFromChatId
	}
	return 0
}

func (x *ChatChannel) GetPinnedMsgId() int32 {
	if x != nil {
		return x.PinnedMsgId
	}
	return 0
}

func (x *ChatChannel) GetCluster() int32 {
	if x != nil {
		return x.Cluster
	}
	return 0
}

func (x *ChatChannel) GetInvite_Rule() int32 {
	if x != nil {
		return x.Invite_Rule
	}
	return 0
}

func (x *ChatChannel) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *ChatChannel) GetEveryoneQuiet() bool {
	if x != nil {
		return x.EveryoneQuiet
	}
	return false
}

func (x *ChatChannel) GetPrivateChat() bool {
	if x != nil {
		return x.PrivateChat
	}
	return false
}

func (x *ChatChannel) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 超级群用户信息   60个字节
type ChannelParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId           int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	UserId              int32  `protobuf:"varint,2,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	IsBot               bool   `protobuf:"varint,3,opt,name=Is_bot,json=IsBot,proto3" json:"Is_bot,omitempty"`
	InviteId            int32  `protobuf:"varint,4,opt,name=Invite_id,json=InviteId,proto3" json:"Invite_id,omitempty"`
	CanSetUsername      bool   `protobuf:"varint,5,opt,name=Can_set_username,json=CanSetUsername,proto3" json:"Can_set_username,omitempty"`
	CanViewParticipants bool   `protobuf:"varint,6,opt,name=Can_view_participants,json=CanViewParticipants,proto3" json:"Can_view_participants,omitempty"`
	IsCreator           bool   `protobuf:"varint,7,opt,name=Is_creator,json=IsCreator,proto3" json:"Is_creator,omitempty"`
	IsAdmin             bool   `protobuf:"varint,8,opt,name=Is_admin,json=IsAdmin,proto3" json:"Is_admin,omitempty"`
	IsBan               bool   `protobuf:"varint,9,opt,name=Is_ban,json=IsBan,proto3" json:"Is_ban,omitempty"`
	PromotedBy          int32  `protobuf:"varint,10,opt,name=Promoted_by,json=PromotedBy,proto3" json:"Promoted_by,omitempty"`
	ChangeGroupInfo     bool   `protobuf:"varint,11,opt,name=Change_group_info,json=ChangeGroupInfo,proto3" json:"Change_group_info,omitempty"`
	DeleteMessages      bool   `protobuf:"varint,12,opt,name=Delete_messages,json=DeleteMessages,proto3" json:"Delete_messages,omitempty"`
	BanUsers            bool   `protobuf:"varint,13,opt,name=Ban_users,json=BanUsers,proto3" json:"Ban_users,omitempty"`
	PinMessages         bool   `protobuf:"varint,14,opt,name=Pin_messages,json=PinMessages,proto3" json:"Pin_messages,omitempty"`
	AddNewAdmin         bool   `protobuf:"varint,15,opt,name=Add_new_admin,json=AddNewAdmin,proto3" json:"Add_new_admin,omitempty"`
	CanReadMessages     bool   `protobuf:"varint,16,opt,name=Can_read_messages,json=CanReadMessages,proto3" json:"Can_read_messages,omitempty"`
	CanSendMessage      bool   `protobuf:"varint,17,opt,name=Can_send_message,json=CanSendMessage,proto3" json:"Can_send_message,omitempty"`
	CanSendMedia        bool   `protobuf:"varint,18,opt,name=Can_send_media,json=CanSendMedia,proto3" json:"Can_send_media,omitempty"`
	CanSendSticker      bool   `protobuf:"varint,19,opt,name=Can_send_sticker,json=CanSendSticker,proto3" json:"Can_send_sticker,omitempty"`
	CanSendGifs         bool   `protobuf:"varint,21,opt,name=Can_send_gifs,json=CanSendGifs,proto3" json:"Can_send_gifs,omitempty"`
	CanSendGames        bool   `protobuf:"varint,22,opt,name=Can_send_games,json=CanSendGames,proto3" json:"Can_send_games,omitempty"`
	CanSendInline       bool   `protobuf:"varint,23,opt,name=Can_send_inline,json=CanSendInline,proto3" json:"Can_send_inline,omitempty"`
	CanEmbedLinks       bool   `protobuf:"varint,24,opt,name=Can_embed_links,json=CanEmbedLinks,proto3" json:"Can_embed_links,omitempty"`
	KickedBy            int32  `protobuf:"varint,25,opt,name=Kicked_by,json=KickedBy,proto3" json:"Kicked_by,omitempty"`
	UntilDate           int32  `protobuf:"varint,26,opt,name=Until_date,json=UntilDate,proto3" json:"Until_date,omitempty"`
	JoinTime            int32  `protobuf:"varint,27,opt,name=Join_time,json=JoinTime,proto3" json:"Join_time,omitempty"`
	PostMessages        bool   `protobuf:"varint,28,opt,name=Post_messages,json=PostMessages,proto3" json:"Post_messages,omitempty"`
	Edit_Messages       bool   `protobuf:"varint,29,opt,name=Edit_Messages,json=EditMessages,proto3" json:"Edit_Messages,omitempty"`
	InviteUsers         bool   `protobuf:"varint,30,opt,name=Invite_users,json=InviteUsers,proto3" json:"Invite_users,omitempty"`
	InviteLink          bool   `protobuf:"varint,31,opt,name=Invite_link,json=InviteLink,proto3" json:"Invite_link,omitempty"`
	ExportInviteLink    string `protobuf:"bytes,32,opt,name=Export_invite_link,json=ExportInviteLink,proto3" json:"Export_invite_link,omitempty"`
	Id                  int32  `protobuf:"varint,33,opt,name=Id,proto3" json:"Id,omitempty"`
	CanSendPolls        bool   `protobuf:"varint,34,opt,name=Can_send_polls,json=CanSendPolls,proto3" json:"Can_send_polls,omitempty"` // add by qingsong at 2019-11-15
	StartMsgid          int32  `protobuf:"varint,35,opt,name=Start_msgid,json=StartMsgid,proto3" json:"Start_msgid,omitempty"`         // add by qingsong at 2019-12-06
}

func (x *ChannelParticipants) Reset() {
	*x = ChannelParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groupservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelParticipants) ProtoMessage() {}

func (x *ChannelParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_groupservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelParticipants.ProtoReflect.Descriptor instead.
func (*ChannelParticipants) Descriptor() ([]byte, []int) {
	return file_groupservice_proto_rawDescGZIP(), []int{2}
}

func (x *ChannelParticipants) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelParticipants) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelParticipants) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *ChannelParticipants) GetInviteId() int32 {
	if x != nil {
		return x.InviteId
	}
	return 0
}

func (x *ChannelParticipants) GetCanSetUsername() bool {
	if x != nil {
		return x.CanSetUsername
	}
	return false
}

func (x *ChannelParticipants) GetCanViewParticipants() bool {
	if x != nil {
		return x.CanViewParticipants
	}
	return false
}

func (x *ChannelParticipants) GetIsCreator() bool {
	if x != nil {
		return x.IsCreator
	}
	return false
}

func (x *ChannelParticipants) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *ChannelParticipants) GetIsBan() bool {
	if x != nil {
		return x.IsBan
	}
	return false
}

func (x *ChannelParticipants) GetPromotedBy() int32 {
	if x != nil {
		return x.PromotedBy
	}
	return 0
}

func (x *ChannelParticipants) GetChangeGroupInfo() bool {
	if x != nil {
		return x.ChangeGroupInfo
	}
	return false
}

func (x *ChannelParticipants) GetDeleteMessages() bool {
	if x != nil {
		return x.DeleteMessages
	}
	return false
}

func (x *ChannelParticipants) GetBanUsers() bool {
	if x != nil {
		return x.BanUsers
	}
	return false
}

func (x *ChannelParticipants) GetPinMessages() bool {
	if x != nil {
		return x.PinMessages
	}
	return false
}

func (x *ChannelParticipants) GetAddNewAdmin() bool {
	if x != nil {
		return x.AddNewAdmin
	}
	return false
}

func (x *ChannelParticipants) GetCanReadMessages() bool {
	if x != nil {
		return x.CanReadMessages
	}
	return false
}

func (x *ChannelParticipants) GetCanSendMessage() bool {
	if x != nil {
		return x.CanSendMessage
	}
	return false
}

func (x *ChannelParticipants) GetCanSendMedia() bool {
	if x != nil {
		return x.CanSendMedia
	}
	return false
}

func (x *ChannelParticipants) GetCanSendSticker() bool {
	if x != nil {
		return x.CanSendSticker
	}
	return false
}

func (x *ChannelParticipants) GetCanSendGifs() bool {
	if x != nil {
		return x.CanSendGifs
	}
	return false
}

func (x *ChannelParticipants) GetCanSendGames() bool {
	if x != nil {
		return x.CanSendGames
	}
	return false
}

func (x *ChannelParticipants) GetCanSendInline() bool {
	if x != nil {
		return x.CanSendInline
	}
	return false
}

func (x *ChannelParticipants) GetCanEmbedLinks() bool {
	if x != nil {
		return x.CanEmbedLinks
	}
	return false
}

func (x *ChannelParticipants) GetKickedBy() int32 {
	if x != nil {
		return x.KickedBy
	}
	return 0
}

func (x *ChannelParticipants) GetUntilDate() int32 {
	if x != nil {
		return x.UntilDate
	}
	return 0
}

func (x *ChannelParticipants) GetJoinTime() int32 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *ChannelParticipants) GetPostMessages() bool {
	if x != nil {
		return x.PostMessages
	}
	return false
}

func (x *ChannelParticipants) GetEdit_Messages() bool {
	if x != nil {
		return x.Edit_Messages
	}
	return false
}

func (x *ChannelParticipants) GetInviteUsers() bool {
	if x != nil {
		return x.InviteUsers
	}
	return false
}

func (x *ChannelParticipants) GetInviteLink() bool {
	if x != nil {
		return x.InviteLink
	}
	return false
}

func (x *ChannelParticipants) GetExportInviteLink() string {
	if x != nil {
		return x.ExportInviteLink
	}
	return ""
}

func (x *ChannelParticipants) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelParticipants) GetCanSendPolls() bool {
	if x != nil {
		return x.CanSendPolls
	}
	return false
}

func (x *ChannelParticipants) GetStartMsgid() int32 {
	if x != nil {
		return x.StartMsgid
	}
	return 0
}

// 被踢用户信息
type ChannelKickedLeft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId       int32 `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	UserId          int32 `protobuf:"varint,2,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	KickedOrLeft    bool  `protobuf:"varint,3,opt,name=Kicked_or_left,json=KickedOrLeft,proto3" json:"Kicked_or_left,omitempty"`
	KickedBy        int32 `protobuf:"varint,4,opt,name=Kicked_by,json=KickedBy,proto3" json:"Kicked_by,omitempty"`
	Date            int32 `protobuf:"varint,5,opt,name=Date,proto3" json:"Date,omitempty"`
	LastDate        int32 `protobuf:"varint,6,opt,name=Last_date,json=LastDate,proto3" json:"Last_date,omitempty"`
	IsBan           bool  `protobuf:"varint,7,opt,name=Is_ban,json=IsBan,proto3" json:"Is_ban,omitempty"`
	CanReadMessages bool  `protobuf:"varint,8,opt,name=Can_read_messages,json=CanReadMessages,proto3" json:"Can_read_messages,omitempty"`
	CanSendMessage  bool  `protobuf:"varint,9,opt,name=Can_send_message,json=CanSendMessage,proto3" json:"Can_send_message,omitempty"`
	CanSendMedia    bool  `protobuf:"varint,10,opt,name=Can_send_media,json=CanSendMedia,proto3" json:"Can_send_media,omitempty"`
	CanSendInline   bool  `protobuf:"varint,11,opt,name=Can_send_inline,json=CanSendInline,proto3" json:"Can_send_inline,omitempty"`
	CanSendGames    bool  `protobuf:"varint,12,opt,name=Can_send_games,json=CanSendGames,proto3" json:"Can_send_games,omitempty"`
	CanSendGifs     bool  `protobuf:"varint,13,opt,name=Can_send_gifs,json=CanSendGifs,proto3" json:"Can_send_gifs,omitempty"`
	CanSendSticker  bool  `protobuf:"varint,14,opt,name=Can_send_sticker,json=CanSendSticker,proto3" json:"Can_send_sticker,omitempty"`
	CanEmbedLinks   bool  `protobuf:"varint,15,opt,name=Can_embed_links,json=CanEmbedLinks,proto3" json:"Can_embed_links,omitempty"`
	CanSendPolls    bool  `protobuf:"varint,16,opt,name=Can_send_polls,json=CanSendPolls,proto3" json:"Can_send_polls,omitempty"` // add by qingsong at 2019-11-15
	Id              int32 `protobuf:"varint,17,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *ChannelKickedLeft) Reset() {
	*x = ChannelKickedLeft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groupservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelKickedLeft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelKickedLeft) ProtoMessage() {}

func (x *ChannelKickedLeft) ProtoReflect() protoreflect.Message {
	mi := &file_groupservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelKickedLeft.ProtoReflect.Descriptor instead.
func (*ChannelKickedLeft) Descriptor() ([]byte, []int) {
	return file_groupservice_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelKickedLeft) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelKickedLeft) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelKickedLeft) GetKickedOrLeft() bool {
	if x != nil {
		return x.KickedOrLeft
	}
	return false
}

func (x *ChannelKickedLeft) GetKickedBy() int32 {
	if x != nil {
		return x.KickedBy
	}
	return 0
}

func (x *ChannelKickedLeft) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ChannelKickedLeft) GetLastDate() int32 {
	if x != nil {
		return x.LastDate
	}
	return 0
}

func (x *ChannelKickedLeft) GetIsBan() bool {
	if x != nil {
		return x.IsBan
	}
	return false
}

func (x *ChannelKickedLeft) GetCanReadMessages() bool {
	if x != nil {
		return x.CanReadMessages
	}
	return false
}

func (x *ChannelKickedLeft) GetCanSendMessage() bool {
	if x != nil {
		return x.CanSendMessage
	}
	return false
}

func (x *ChannelKickedLeft) GetCanSendMedia() bool {
	if x != nil {
		return x.CanSendMedia
	}
	return false
}

func (x *ChannelKickedLeft) GetCanSendInline() bool {
	if x != nil {
		return x.CanSendInline
	}
	return false
}

func (x *ChannelKickedLeft) GetCanSendGames() bool {
	if x != nil {
		return x.CanSendGames
	}
	return false
}

func (x *ChannelKickedLeft) GetCanSendGifs() bool {
	if x != nil {
		return x.CanSendGifs
	}
	return false
}

func (x *ChannelKickedLeft) GetCanSendSticker() bool {
	if x != nil {
		return x.CanSendSticker
	}
	return false
}

func (x *ChannelKickedLeft) GetCanEmbedLinks() bool {
	if x != nil {
		return x.CanEmbedLinks
	}
	return false
}

func (x *ChannelKickedLeft) GetCanSendPolls() bool {
	if x != nil {
		return x.CanSendPolls
	}
	return false
}

func (x *ChannelKickedLeft) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_groupservice_proto protoreflect.FileDescriptor

var file_groupservice_proto_rawDesc = []byte{
	0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x66, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xff, 0x07, 0x0a, 0x0b, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x12, 0x34, 0x0a, 0x16, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x4d, 0x65, 0x67,
	0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x4d,
	0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x42, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x6f, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x5f, 0x71,
	0x75, 0x69, 0x65, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x45, 0x76, 0x65, 0x72,
	0x79, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x69, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0xb6, 0x09, 0x0a,
	0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x49, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73,
	0x42, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x61, 0x6e, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x43, 0x61,
	0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x43, 0x61, 0x6e, 0x56, 0x69,
	0x65, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x49, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x49, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x49, 0x73, 0x5f, 0x62,
	0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x42, 0x61, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x2a, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x50, 0x69, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x5f, 0x6e, 0x65, 0x77,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x64,
	0x64, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x43, 0x61, 0x6e,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x69, 0x66, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x47,
	0x69, 0x66, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x61, 0x6e,
	0x53, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x43, 0x61, 0x6e,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x61, 0x6e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x4b, 0x69, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x45, 0x64, 0x69, 0x74, 0x5f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x2c, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x73,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x50,
	0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x73,
	0x67, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x73, 0x67, 0x69, 0x64, 0x22, 0xcc, 0x04, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x55, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x72,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4b, 0x69, 0x63,
	0x6b, 0x65, 0x64, 0x4f, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x4b, 0x69, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x4c, 0x61,
	0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c,
	0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x49, 0x73, 0x5f, 0x62, 0x61,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x42, 0x61, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x43, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x43, 0x61, 0x6e, 0x52, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x43, 0x61,
	0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x61,
	0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x43, 0x61,
	0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x61, 0x6e, 0x53,
	0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x69, 0x66, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x43, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x5f, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x43, 0x61, 0x6e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x50,
	0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x64, 0x2a, 0x4a, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x53, 0x59, 0x53, 0x45, 0x52, 0x52, 0x10, 0xe9, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x10, 0xea, 0x07,
	0x2a, 0x4a, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x65,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x65, 0x65,
	0x72, 0x53, 0x75, 0x70, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x10, 0x03, 0x2a, 0x66, 0x0a, 0x11,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6f, 0x74,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x10, 0x04, 0x42, 0x1e, 0x5a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_groupservice_proto_rawDescOnce sync.Once
	file_groupservice_proto_rawDescData = file_groupservice_proto_rawDesc
)

func file_groupservice_proto_rawDescGZIP() []byte {
	file_groupservice_proto_rawDescOnce.Do(func() {
		file_groupservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_groupservice_proto_rawDescData)
	})
	return file_groupservice_proto_rawDescData
}

var file_groupservice_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_groupservice_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_groupservice_proto_goTypes = []interface{}{
	(ActiveErrorCode)(0),        // 0: groupservice.ActiveErrorCode
	(PeerType)(0),               // 1: groupservice.PeerType
	(ChannelSearchType)(0),      // 2: groupservice.ChannelSearchType
	(*UserNameBase)(nil),        // 3: groupservice.UserNameBase
	(*ChatChannel)(nil),         // 4: groupservice.ChatChannel
	(*ChannelParticipants)(nil), // 5: groupservice.ChannelParticipants
	(*ChannelKickedLeft)(nil),   // 6: groupservice.ChannelKickedLeft
}
var file_groupservice_proto_depIdxs = []int32{
	1, // 0: groupservice.UserNameBase.Type:type_name -> groupservice.PeerType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_groupservice_proto_init() }
func file_groupservice_proto_init() {
	if File_groupservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_groupservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNameBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groupservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groupservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groupservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelKickedLeft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_groupservice_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_groupservice_proto_goTypes,
		DependencyIndexes: file_groupservice_proto_depIdxs,
		EnumInfos:         file_groupservice_proto_enumTypes,
		MessageInfos:      file_groupservice_proto_msgTypes,
	}.Build()
	File_groupservice_proto = out.File
	file_groupservice_proto_rawDesc = nil
	file_groupservice_proto_goTypes = nil
	file_groupservice_proto_depIdxs = nil
}
