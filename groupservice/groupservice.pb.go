// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/groupservice/groupservice.proto

/*
Package groupservice is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/groupservice/groupservice.proto

It has these top-level messages:

	UserNameBase
	ChatChannel
	ChannelParticipants
	ChannelKickedLeft
*/
package groupservice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 返回错误码
type ActiveErrorCode int32

const (
	ActiveErrorCode_Active_OK       ActiveErrorCode = 0
	ActiveErrorCode_Active_SYSERR   ActiveErrorCode = 1001
	ActiveErrorCode_Active_NOT_FIND ActiveErrorCode = 1002
)

var ActiveErrorCode_name = map[int32]string{
	0:    "Active_OK",
	1001: "Active_SYSERR",
	1002: "Active_NOT_FIND",
}
var ActiveErrorCode_value = map[string]int32{
	"Active_OK":       0,
	"Active_SYSERR":   1001,
	"Active_NOT_FIND": 1002,
}

func (x ActiveErrorCode) String() string {
	return proto.EnumName(ActiveErrorCode_name, int32(x))
}
func (ActiveErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorGroupservice, []int{0} }

// username和邀请链接对应的对象类型
type PeerType int32

const (
	PeerType_PeerUser      PeerType = 0
	PeerType_PeerChat      PeerType = 1
	PeerType_PeerChannel   PeerType = 2
	PeerType_PeerSuperChat PeerType = 3
)

var PeerType_name = map[int32]string{
	0: "PeerUser",
	1: "PeerChat",
	2: "PeerChannel",
	3: "PeerSuperChat",
}
var PeerType_value = map[string]int32{
	"PeerUser":      0,
	"PeerChat":      1,
	"PeerChannel":   2,
	"PeerSuperChat": 3,
}

func (x PeerType) String() string {
	return proto.EnumName(PeerType_name, int32(x))
}
func (PeerType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGroupservice, []int{1} }

// 群成员搜索类型
type ChannelSearchType int32

const (
	ChannelSearchType_SearchAll    ChannelSearchType = 0
	ChannelSearchType_SearchAdmin  ChannelSearchType = 1
	ChannelSearchType_SearchBanned ChannelSearchType = 2
	ChannelSearchType_SearchBot    ChannelSearchType = 3
	ChannelSearchType_SearchKicked ChannelSearchType = 4
)

var ChannelSearchType_name = map[int32]string{
	0: "SearchAll",
	1: "SearchAdmin",
	2: "SearchBanned",
	3: "SearchBot",
	4: "SearchKicked",
}
var ChannelSearchType_value = map[string]int32{
	"SearchAll":    0,
	"SearchAdmin":  1,
	"SearchBanned": 2,
	"SearchBot":    3,
	"SearchKicked": 4,
}

func (x ChannelSearchType) String() string {
	return proto.EnumName(ChannelSearchType_name, int32(x))
}
func (ChannelSearchType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGroupservice, []int{2}
}

// username存储结构
type UserNameBase struct {
	Username string   `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	Id       int32    `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Type     PeerType `protobuf:"varint,3,opt,name=Type,proto3,enum=groupservice.PeerType" json:"Type,omitempty"`
}

func (m *UserNameBase) Reset()                    { *m = UserNameBase{} }
func (m *UserNameBase) String() string            { return proto.CompactTextString(m) }
func (*UserNameBase) ProtoMessage()               {}
func (*UserNameBase) Descriptor() ([]byte, []int) { return fileDescriptorGroupservice, []int{0} }

func (m *UserNameBase) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserNameBase) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserNameBase) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return PeerType_PeerUser
}

// 超级群信息
type ChatChannel struct {
	ChannelId            int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	AccessHash           int64  `protobuf:"varint,2,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
	Encry                bool   `protobuf:"varint,3,opt,name=Encry,proto3" json:"Encry,omitempty"`
	BroadcastOrMegagroup bool   `protobuf:"varint,4,opt,name=Broadcast_or_megagroup,json=BroadcastOrMegagroup,proto3" json:"Broadcast_or_megagroup,omitempty"`
	Verified             bool   `protobuf:"varint,5,opt,name=Verified,proto3" json:"Verified,omitempty"`
	Restricted           bool   `protobuf:"varint,6,opt,name=Restricted,proto3" json:"Restricted,omitempty"`
	Democracy            bool   `protobuf:"varint,7,opt,name=Democracy,proto3" json:"Democracy,omitempty"`
	Signatures           bool   `protobuf:"varint,8,opt,name=Signatures,proto3" json:"Signatures,omitempty"`
	Min                  bool   `protobuf:"varint,9,opt,name=Min,proto3" json:"Min,omitempty"`
	Title                string `protobuf:"bytes,10,opt,name=Title,proto3" json:"Title,omitempty"`
	UserName             string `protobuf:"bytes,11,opt,name=User_name,json=UserName,proto3" json:"User_name,omitempty"`
	About                string `protobuf:"bytes,12,opt,name=About,proto3" json:"About,omitempty"`
	Photo                string `protobuf:"bytes,13,opt,name=Photo,proto3" json:"Photo,omitempty"`
	Date                 int32  `protobuf:"varint,14,opt,name=Date,proto3" json:"Date,omitempty"`
	Version              int32  `protobuf:"varint,15,opt,name=Version,proto3" json:"Version,omitempty"`
	RestrictionReason    string `protobuf:"bytes,16,opt,name=Restriction_reason,json=RestrictionReason,proto3" json:"Restriction_reason,omitempty"`
	ParticipantsCount    int32  `protobuf:"varint,17,opt,name=Participants_count,json=ParticipantsCount,proto3" json:"Participants_count,omitempty"`
	AdminsCount          int32  `protobuf:"varint,18,opt,name=Admins_count,json=AdminsCount,proto3" json:"Admins_count,omitempty"`
	KickedCount          int32  `protobuf:"varint,19,opt,name=Kicked_count,json=KickedCount,proto3" json:"Kicked_count,omitempty"`
	BannedCount          int32  `protobuf:"varint,20,opt,name=Banned_count,json=BannedCount,proto3" json:"Banned_count,omitempty"`
	ExportedInviteLink   string `protobuf:"bytes,21,opt,name=Exported_invite_link,json=ExportedInviteLink,proto3" json:"Exported_invite_link,omitempty"`
	BotCount             int32  `protobuf:"varint,22,opt,name=Bot_count,json=BotCount,proto3" json:"Bot_count,omitempty"`
	MigratedFromMaxId    int32  `protobuf:"varint,23,opt,name=Migrated_from_max_id,json=MigratedFromMaxId,proto3" json:"Migrated_from_max_id,omitempty"`
	MigratedFromChatId   int32  `protobuf:"varint,24,opt,name=Migrated_from_chat_id,json=MigratedFromChatId,proto3" json:"Migrated_from_chat_id,omitempty"`
	PinnedMsgId          int32  `protobuf:"varint,25,opt,name=Pinned_msg_id,json=PinnedMsgId,proto3" json:"Pinned_msg_id,omitempty"`
	Cluster              int32  `protobuf:"varint,26,opt,name=Cluster,proto3" json:"Cluster,omitempty"`
	Invite_Rule          int32  `protobuf:"varint,27,opt,name=Invite_Rule,json=InviteRule,proto3" json:"Invite_Rule,omitempty"`
	Creator              int32  `protobuf:"varint,28,opt,name=Creator,proto3" json:"Creator,omitempty"`
	EveryoneQuiet        bool   `protobuf:"varint,29,opt,name=Everyone_quiet,json=EveryoneQuiet,proto3" json:"Everyone_quiet,omitempty"`
	PrivateChat          bool   `protobuf:"varint,30,opt,name=Private_chat,json=PrivateChat,proto3" json:"Private_chat,omitempty"`
	Id                   int32  `protobuf:"varint,31,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *ChatChannel) Reset()                    { *m = ChatChannel{} }
func (m *ChatChannel) String() string            { return proto.CompactTextString(m) }
func (*ChatChannel) ProtoMessage()               {}
func (*ChatChannel) Descriptor() ([]byte, []int) { return fileDescriptorGroupservice, []int{1} }

func (m *ChatChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChatChannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ChatChannel) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *ChatChannel) GetBroadcastOrMegagroup() bool {
	if m != nil {
		return m.BroadcastOrMegagroup
	}
	return false
}

func (m *ChatChannel) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *ChatChannel) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *ChatChannel) GetDemocracy() bool {
	if m != nil {
		return m.Democracy
	}
	return false
}

func (m *ChatChannel) GetSignatures() bool {
	if m != nil {
		return m.Signatures
	}
	return false
}

func (m *ChatChannel) GetMin() bool {
	if m != nil {
		return m.Min
	}
	return false
}

func (m *ChatChannel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChatChannel) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ChatChannel) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ChatChannel) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *ChatChannel) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ChatChannel) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ChatChannel) GetRestrictionReason() string {
	if m != nil {
		return m.RestrictionReason
	}
	return ""
}

func (m *ChatChannel) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *ChatChannel) GetAdminsCount() int32 {
	if m != nil {
		return m.AdminsCount
	}
	return 0
}

func (m *ChatChannel) GetKickedCount() int32 {
	if m != nil {
		return m.KickedCount
	}
	return 0
}

func (m *ChatChannel) GetBannedCount() int32 {
	if m != nil {
		return m.BannedCount
	}
	return 0
}

func (m *ChatChannel) GetExportedInviteLink() string {
	if m != nil {
		return m.ExportedInviteLink
	}
	return ""
}

func (m *ChatChannel) GetBotCount() int32 {
	if m != nil {
		return m.BotCount
	}
	return 0
}

func (m *ChatChannel) GetMigratedFromMaxId() int32 {
	if m != nil {
		return m.MigratedFromMaxId
	}
	return 0
}

func (m *ChatChannel) GetMigratedFromChatId() int32 {
	if m != nil {
		return m.MigratedFromChatId
	}
	return 0
}

func (m *ChatChannel) GetPinnedMsgId() int32 {
	if m != nil {
		return m.PinnedMsgId
	}
	return 0
}

func (m *ChatChannel) GetCluster() int32 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *ChatChannel) GetInvite_Rule() int32 {
	if m != nil {
		return m.Invite_Rule
	}
	return 0
}

func (m *ChatChannel) GetCreator() int32 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *ChatChannel) GetEveryoneQuiet() bool {
	if m != nil {
		return m.EveryoneQuiet
	}
	return false
}

func (m *ChatChannel) GetPrivateChat() bool {
	if m != nil {
		return m.PrivateChat
	}
	return false
}

func (m *ChatChannel) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 超级群用户信息   60个字节
type ChannelParticipants struct {
	ChannelId           int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	UserId              int32  `protobuf:"varint,2,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	IsBot               bool   `protobuf:"varint,3,opt,name=Is_bot,json=IsBot,proto3" json:"Is_bot,omitempty"`
	InviteId            int32  `protobuf:"varint,4,opt,name=Invite_id,json=InviteId,proto3" json:"Invite_id,omitempty"`
	CanSetUsername      bool   `protobuf:"varint,5,opt,name=Can_set_username,json=CanSetUsername,proto3" json:"Can_set_username,omitempty"`
	CanViewParticipants bool   `protobuf:"varint,6,opt,name=Can_view_participants,json=CanViewParticipants,proto3" json:"Can_view_participants,omitempty"`
	IsCreator           bool   `protobuf:"varint,7,opt,name=Is_creator,json=IsCreator,proto3" json:"Is_creator,omitempty"`
	IsAdmin             bool   `protobuf:"varint,8,opt,name=Is_admin,json=IsAdmin,proto3" json:"Is_admin,omitempty"`
	IsBan               bool   `protobuf:"varint,9,opt,name=Is_ban,json=IsBan,proto3" json:"Is_ban,omitempty"`
	PromotedBy          int32  `protobuf:"varint,10,opt,name=Promoted_by,json=PromotedBy,proto3" json:"Promoted_by,omitempty"`
	ChangeGroupInfo     bool   `protobuf:"varint,11,opt,name=Change_group_info,json=ChangeGroupInfo,proto3" json:"Change_group_info,omitempty"`
	DeleteMessages      bool   `protobuf:"varint,12,opt,name=Delete_messages,json=DeleteMessages,proto3" json:"Delete_messages,omitempty"`
	BanUsers            bool   `protobuf:"varint,13,opt,name=Ban_users,json=BanUsers,proto3" json:"Ban_users,omitempty"`
	PinMessages         bool   `protobuf:"varint,14,opt,name=Pin_messages,json=PinMessages,proto3" json:"Pin_messages,omitempty"`
	AddNewAdmin         bool   `protobuf:"varint,15,opt,name=Add_new_admin,json=AddNewAdmin,proto3" json:"Add_new_admin,omitempty"`
	CanReadMessages     bool   `protobuf:"varint,16,opt,name=Can_read_messages,json=CanReadMessages,proto3" json:"Can_read_messages,omitempty"`
	CanSendMessage      bool   `protobuf:"varint,17,opt,name=Can_send_message,json=CanSendMessage,proto3" json:"Can_send_message,omitempty"`
	CanSendMedia        bool   `protobuf:"varint,18,opt,name=Can_send_media,json=CanSendMedia,proto3" json:"Can_send_media,omitempty"`
	CanSendSticker      bool   `protobuf:"varint,19,opt,name=Can_send_sticker,json=CanSendSticker,proto3" json:"Can_send_sticker,omitempty"`
	CanSendGifs         bool   `protobuf:"varint,21,opt,name=Can_send_gifs,json=CanSendGifs,proto3" json:"Can_send_gifs,omitempty"`
	CanSendGames        bool   `protobuf:"varint,22,opt,name=Can_send_games,json=CanSendGames,proto3" json:"Can_send_games,omitempty"`
	CanSendInline       bool   `protobuf:"varint,23,opt,name=Can_send_inline,json=CanSendInline,proto3" json:"Can_send_inline,omitempty"`
	CanEmbedLinks       bool   `protobuf:"varint,24,opt,name=Can_embed_links,json=CanEmbedLinks,proto3" json:"Can_embed_links,omitempty"`
	KickedBy            int32  `protobuf:"varint,25,opt,name=Kicked_by,json=KickedBy,proto3" json:"Kicked_by,omitempty"`
	UntilDate           int32  `protobuf:"varint,26,opt,name=Until_date,json=UntilDate,proto3" json:"Until_date,omitempty"`
	JoinTime            int32  `protobuf:"varint,27,opt,name=Join_time,json=JoinTime,proto3" json:"Join_time,omitempty"`
	PostMessages        bool   `protobuf:"varint,28,opt,name=Post_messages,json=PostMessages,proto3" json:"Post_messages,omitempty"`
	Edit_Messages       bool   `protobuf:"varint,29,opt,name=Edit_Messages,json=EditMessages,proto3" json:"Edit_Messages,omitempty"`
	InviteUsers         bool   `protobuf:"varint,30,opt,name=Invite_users,json=InviteUsers,proto3" json:"Invite_users,omitempty"`
	InviteLink          bool   `protobuf:"varint,31,opt,name=Invite_link,json=InviteLink,proto3" json:"Invite_link,omitempty"`
	ExportInviteLink    string `protobuf:"bytes,32,opt,name=Export_invite_link,json=ExportInviteLink,proto3" json:"Export_invite_link,omitempty"`
	Id                  int32  `protobuf:"varint,33,opt,name=Id,proto3" json:"Id,omitempty"`
	CanSendPolls        bool   `protobuf:"varint,34,opt,name=Can_send_polls,json=CanSendPolls,proto3" json:"Can_send_polls,omitempty"`
	StartMsgid          int32  `protobuf:"varint,35,opt,name=Start_msgid,json=StartMsgid,proto3" json:"Start_msgid,omitempty"`
}

func (m *ChannelParticipants) Reset()                    { *m = ChannelParticipants{} }
func (m *ChannelParticipants) String() string            { return proto.CompactTextString(m) }
func (*ChannelParticipants) ProtoMessage()               {}
func (*ChannelParticipants) Descriptor() ([]byte, []int) { return fileDescriptorGroupservice, []int{2} }

func (m *ChannelParticipants) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelParticipants) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelParticipants) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *ChannelParticipants) GetInviteId() int32 {
	if m != nil {
		return m.InviteId
	}
	return 0
}

func (m *ChannelParticipants) GetCanSetUsername() bool {
	if m != nil {
		return m.CanSetUsername
	}
	return false
}

func (m *ChannelParticipants) GetCanViewParticipants() bool {
	if m != nil {
		return m.CanViewParticipants
	}
	return false
}

func (m *ChannelParticipants) GetIsCreator() bool {
	if m != nil {
		return m.IsCreator
	}
	return false
}

func (m *ChannelParticipants) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *ChannelParticipants) GetIsBan() bool {
	if m != nil {
		return m.IsBan
	}
	return false
}

func (m *ChannelParticipants) GetPromotedBy() int32 {
	if m != nil {
		return m.PromotedBy
	}
	return 0
}

func (m *ChannelParticipants) GetChangeGroupInfo() bool {
	if m != nil {
		return m.ChangeGroupInfo
	}
	return false
}

func (m *ChannelParticipants) GetDeleteMessages() bool {
	if m != nil {
		return m.DeleteMessages
	}
	return false
}

func (m *ChannelParticipants) GetBanUsers() bool {
	if m != nil {
		return m.BanUsers
	}
	return false
}

func (m *ChannelParticipants) GetPinMessages() bool {
	if m != nil {
		return m.PinMessages
	}
	return false
}

func (m *ChannelParticipants) GetAddNewAdmin() bool {
	if m != nil {
		return m.AddNewAdmin
	}
	return false
}

func (m *ChannelParticipants) GetCanReadMessages() bool {
	if m != nil {
		return m.CanReadMessages
	}
	return false
}

func (m *ChannelParticipants) GetCanSendMessage() bool {
	if m != nil {
		return m.CanSendMessage
	}
	return false
}

func (m *ChannelParticipants) GetCanSendMedia() bool {
	if m != nil {
		return m.CanSendMedia
	}
	return false
}

func (m *ChannelParticipants) GetCanSendSticker() bool {
	if m != nil {
		return m.CanSendSticker
	}
	return false
}

func (m *ChannelParticipants) GetCanSendGifs() bool {
	if m != nil {
		return m.CanSendGifs
	}
	return false
}

func (m *ChannelParticipants) GetCanSendGames() bool {
	if m != nil {
		return m.CanSendGames
	}
	return false
}

func (m *ChannelParticipants) GetCanSendInline() bool {
	if m != nil {
		return m.CanSendInline
	}
	return false
}

func (m *ChannelParticipants) GetCanEmbedLinks() bool {
	if m != nil {
		return m.CanEmbedLinks
	}
	return false
}

func (m *ChannelParticipants) GetKickedBy() int32 {
	if m != nil {
		return m.KickedBy
	}
	return 0
}

func (m *ChannelParticipants) GetUntilDate() int32 {
	if m != nil {
		return m.UntilDate
	}
	return 0
}

func (m *ChannelParticipants) GetJoinTime() int32 {
	if m != nil {
		return m.JoinTime
	}
	return 0
}

func (m *ChannelParticipants) GetPostMessages() bool {
	if m != nil {
		return m.PostMessages
	}
	return false
}

func (m *ChannelParticipants) GetEdit_Messages() bool {
	if m != nil {
		return m.Edit_Messages
	}
	return false
}

func (m *ChannelParticipants) GetInviteUsers() bool {
	if m != nil {
		return m.InviteUsers
	}
	return false
}

func (m *ChannelParticipants) GetInviteLink() bool {
	if m != nil {
		return m.InviteLink
	}
	return false
}

func (m *ChannelParticipants) GetExportInviteLink() string {
	if m != nil {
		return m.ExportInviteLink
	}
	return ""
}

func (m *ChannelParticipants) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelParticipants) GetCanSendPolls() bool {
	if m != nil {
		return m.CanSendPolls
	}
	return false
}

func (m *ChannelParticipants) GetStartMsgid() int32 {
	if m != nil {
		return m.StartMsgid
	}
	return 0
}

// 被踢用户信息
type ChannelKickedLeft struct {
	ChannelId       int32 `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	UserId          int32 `protobuf:"varint,2,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	KickedOrLeft    bool  `protobuf:"varint,3,opt,name=Kicked_or_left,json=KickedOrLeft,proto3" json:"Kicked_or_left,omitempty"`
	KickedBy        int32 `protobuf:"varint,4,opt,name=Kicked_by,json=KickedBy,proto3" json:"Kicked_by,omitempty"`
	Date            int32 `protobuf:"varint,5,opt,name=Date,proto3" json:"Date,omitempty"`
	LastDate        int32 `protobuf:"varint,6,opt,name=Last_date,json=LastDate,proto3" json:"Last_date,omitempty"`
	IsBan           bool  `protobuf:"varint,7,opt,name=Is_ban,json=IsBan,proto3" json:"Is_ban,omitempty"`
	CanReadMessages bool  `protobuf:"varint,8,opt,name=Can_read_messages,json=CanReadMessages,proto3" json:"Can_read_messages,omitempty"`
	CanSendMessage  bool  `protobuf:"varint,9,opt,name=Can_send_message,json=CanSendMessage,proto3" json:"Can_send_message,omitempty"`
	CanSendMedia    bool  `protobuf:"varint,10,opt,name=Can_send_media,json=CanSendMedia,proto3" json:"Can_send_media,omitempty"`
	CanSendInline   bool  `protobuf:"varint,11,opt,name=Can_send_inline,json=CanSendInline,proto3" json:"Can_send_inline,omitempty"`
	CanSendGames    bool  `protobuf:"varint,12,opt,name=Can_send_games,json=CanSendGames,proto3" json:"Can_send_games,omitempty"`
	CanSendGifs     bool  `protobuf:"varint,13,opt,name=Can_send_gifs,json=CanSendGifs,proto3" json:"Can_send_gifs,omitempty"`
	CanSendSticker  bool  `protobuf:"varint,14,opt,name=Can_send_sticker,json=CanSendSticker,proto3" json:"Can_send_sticker,omitempty"`
	CanEmbedLinks   bool  `protobuf:"varint,15,opt,name=Can_embed_links,json=CanEmbedLinks,proto3" json:"Can_embed_links,omitempty"`
	CanSendPolls    bool  `protobuf:"varint,16,opt,name=Can_send_polls,json=CanSendPolls,proto3" json:"Can_send_polls,omitempty"`
	Id              int32 `protobuf:"varint,17,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *ChannelKickedLeft) Reset()                    { *m = ChannelKickedLeft{} }
func (m *ChannelKickedLeft) String() string            { return proto.CompactTextString(m) }
func (*ChannelKickedLeft) ProtoMessage()               {}
func (*ChannelKickedLeft) Descriptor() ([]byte, []int) { return fileDescriptorGroupservice, []int{3} }

func (m *ChannelKickedLeft) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelKickedLeft) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelKickedLeft) GetKickedOrLeft() bool {
	if m != nil {
		return m.KickedOrLeft
	}
	return false
}

func (m *ChannelKickedLeft) GetKickedBy() int32 {
	if m != nil {
		return m.KickedBy
	}
	return 0
}

func (m *ChannelKickedLeft) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ChannelKickedLeft) GetLastDate() int32 {
	if m != nil {
		return m.LastDate
	}
	return 0
}

func (m *ChannelKickedLeft) GetIsBan() bool {
	if m != nil {
		return m.IsBan
	}
	return false
}

func (m *ChannelKickedLeft) GetCanReadMessages() bool {
	if m != nil {
		return m.CanReadMessages
	}
	return false
}

func (m *ChannelKickedLeft) GetCanSendMessage() bool {
	if m != nil {
		return m.CanSendMessage
	}
	return false
}

func (m *ChannelKickedLeft) GetCanSendMedia() bool {
	if m != nil {
		return m.CanSendMedia
	}
	return false
}

func (m *ChannelKickedLeft) GetCanSendInline() bool {
	if m != nil {
		return m.CanSendInline
	}
	return false
}

func (m *ChannelKickedLeft) GetCanSendGames() bool {
	if m != nil {
		return m.CanSendGames
	}
	return false
}

func (m *ChannelKickedLeft) GetCanSendGifs() bool {
	if m != nil {
		return m.CanSendGifs
	}
	return false
}

func (m *ChannelKickedLeft) GetCanSendSticker() bool {
	if m != nil {
		return m.CanSendSticker
	}
	return false
}

func (m *ChannelKickedLeft) GetCanEmbedLinks() bool {
	if m != nil {
		return m.CanEmbedLinks
	}
	return false
}

func (m *ChannelKickedLeft) GetCanSendPolls() bool {
	if m != nil {
		return m.CanSendPolls
	}
	return false
}

func (m *ChannelKickedLeft) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*UserNameBase)(nil), "groupservice.UserNameBase")
	proto.RegisterType((*ChatChannel)(nil), "groupservice.ChatChannel")
	proto.RegisterType((*ChannelParticipants)(nil), "groupservice.ChannelParticipants")
	proto.RegisterType((*ChannelKickedLeft)(nil), "groupservice.ChannelKickedLeft")
	proto.RegisterEnum("groupservice.ActiveErrorCode", ActiveErrorCode_name, ActiveErrorCode_value)
	proto.RegisterEnum("groupservice.PeerType", PeerType_name, PeerType_value)
	proto.RegisterEnum("groupservice.ChannelSearchType", ChannelSearchType_name, ChannelSearchType_value)
}
func (m *UserNameBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserNameBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.Id))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *ChatChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.Encry {
		dAtA[i] = 0x18
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BroadcastOrMegagroup {
		dAtA[i] = 0x20
		i++
		if m.BroadcastOrMegagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Verified {
		dAtA[i] = 0x28
		i++
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Restricted {
		dAtA[i] = 0x30
		i++
		if m.Restricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Democracy {
		dAtA[i] = 0x38
		i++
		if m.Democracy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Signatures {
		dAtA[i] = 0x40
		i++
		if m.Signatures {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Min {
		dAtA[i] = 0x48
		i++
		if m.Min {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Date != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.Date))
	}
	if m.Version != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.Version))
	}
	if len(m.RestrictionReason) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(len(m.RestrictionReason)))
		i += copy(dAtA[i:], m.RestrictionReason)
	}
	if m.ParticipantsCount != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.ParticipantsCount))
	}
	if m.AdminsCount != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.BannedCount))
	}
	if len(m.ExportedInviteLink) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(len(m.ExportedInviteLink)))
		i += copy(dAtA[i:], m.ExportedInviteLink)
	}
	if m.BotCount != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.BotCount))
	}
	if m.MigratedFromMaxId != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.MigratedFromMaxId))
	}
	if m.MigratedFromChatId != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.MigratedFromChatId))
	}
	if m.PinnedMsgId != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.PinnedMsgId))
	}
	if m.Cluster != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.Cluster))
	}
	if m.Invite_Rule != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.Invite_Rule))
	}
	if m.Creator != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.Creator))
	}
	if m.EveryoneQuiet {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if m.EveryoneQuiet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PrivateChat {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		if m.PrivateChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Id != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *ChannelParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelParticipants) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.UserId))
	}
	if m.IsBot {
		dAtA[i] = 0x18
		i++
		if m.IsBot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InviteId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.InviteId))
	}
	if m.CanSetUsername {
		dAtA[i] = 0x28
		i++
		if m.CanSetUsername {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanViewParticipants {
		dAtA[i] = 0x30
		i++
		if m.CanViewParticipants {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsCreator {
		dAtA[i] = 0x38
		i++
		if m.IsCreator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAdmin {
		dAtA[i] = 0x40
		i++
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBan {
		dAtA[i] = 0x48
		i++
		if m.IsBan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PromotedBy != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.PromotedBy))
	}
	if m.ChangeGroupInfo {
		dAtA[i] = 0x58
		i++
		if m.ChangeGroupInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DeleteMessages {
		dAtA[i] = 0x60
		i++
		if m.DeleteMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BanUsers {
		dAtA[i] = 0x68
		i++
		if m.BanUsers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PinMessages {
		dAtA[i] = 0x70
		i++
		if m.PinMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AddNewAdmin {
		dAtA[i] = 0x78
		i++
		if m.AddNewAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanReadMessages {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.CanReadMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendMessage {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendMedia {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendSticker {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendSticker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendGifs {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendGifs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendGames {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendGames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendInline {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendInline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanEmbedLinks {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.CanEmbedLinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickedBy != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.KickedBy))
	}
	if m.UntilDate != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.UntilDate))
	}
	if m.JoinTime != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.JoinTime))
	}
	if m.PostMessages {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		if m.PostMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Edit_Messages {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if m.Edit_Messages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InviteUsers {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		if m.InviteUsers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InviteLink {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		if m.InviteLink {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ExportInviteLink) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(len(m.ExportInviteLink)))
		i += copy(dAtA[i:], m.ExportInviteLink)
	}
	if m.Id != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.Id))
	}
	if m.CanSendPolls {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		if m.CanSendPolls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StartMsgid != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.StartMsgid))
	}
	return i, nil
}

func (m *ChannelKickedLeft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelKickedLeft) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.UserId))
	}
	if m.KickedOrLeft {
		dAtA[i] = 0x18
		i++
		if m.KickedOrLeft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickedBy != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.KickedBy))
	}
	if m.Date != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.Date))
	}
	if m.LastDate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.LastDate))
	}
	if m.IsBan {
		dAtA[i] = 0x38
		i++
		if m.IsBan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanReadMessages {
		dAtA[i] = 0x40
		i++
		if m.CanReadMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendMessage {
		dAtA[i] = 0x48
		i++
		if m.CanSendMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendMedia {
		dAtA[i] = 0x50
		i++
		if m.CanSendMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendInline {
		dAtA[i] = 0x58
		i++
		if m.CanSendInline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendGames {
		dAtA[i] = 0x60
		i++
		if m.CanSendGames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendGifs {
		dAtA[i] = 0x68
		i++
		if m.CanSendGifs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendSticker {
		dAtA[i] = 0x70
		i++
		if m.CanSendSticker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanEmbedLinks {
		dAtA[i] = 0x78
		i++
		if m.CanEmbedLinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendPolls {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendPolls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Id != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGroupservice(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func encodeVarintGroupservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserNameBase) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovGroupservice(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovGroupservice(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovGroupservice(uint64(m.Type))
	}
	return n
}

func (m *ChatChannel) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovGroupservice(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovGroupservice(uint64(m.AccessHash))
	}
	if m.Encry {
		n += 2
	}
	if m.BroadcastOrMegagroup {
		n += 2
	}
	if m.Verified {
		n += 2
	}
	if m.Restricted {
		n += 2
	}
	if m.Democracy {
		n += 2
	}
	if m.Signatures {
		n += 2
	}
	if m.Min {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGroupservice(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovGroupservice(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovGroupservice(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovGroupservice(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovGroupservice(uint64(m.Date))
	}
	if m.Version != 0 {
		n += 1 + sovGroupservice(uint64(m.Version))
	}
	l = len(m.RestrictionReason)
	if l > 0 {
		n += 2 + l + sovGroupservice(uint64(l))
	}
	if m.ParticipantsCount != 0 {
		n += 2 + sovGroupservice(uint64(m.ParticipantsCount))
	}
	if m.AdminsCount != 0 {
		n += 2 + sovGroupservice(uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		n += 2 + sovGroupservice(uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		n += 2 + sovGroupservice(uint64(m.BannedCount))
	}
	l = len(m.ExportedInviteLink)
	if l > 0 {
		n += 2 + l + sovGroupservice(uint64(l))
	}
	if m.BotCount != 0 {
		n += 2 + sovGroupservice(uint64(m.BotCount))
	}
	if m.MigratedFromMaxId != 0 {
		n += 2 + sovGroupservice(uint64(m.MigratedFromMaxId))
	}
	if m.MigratedFromChatId != 0 {
		n += 2 + sovGroupservice(uint64(m.MigratedFromChatId))
	}
	if m.PinnedMsgId != 0 {
		n += 2 + sovGroupservice(uint64(m.PinnedMsgId))
	}
	if m.Cluster != 0 {
		n += 2 + sovGroupservice(uint64(m.Cluster))
	}
	if m.Invite_Rule != 0 {
		n += 2 + sovGroupservice(uint64(m.Invite_Rule))
	}
	if m.Creator != 0 {
		n += 2 + sovGroupservice(uint64(m.Creator))
	}
	if m.EveryoneQuiet {
		n += 3
	}
	if m.PrivateChat {
		n += 3
	}
	if m.Id != 0 {
		n += 2 + sovGroupservice(uint64(m.Id))
	}
	return n
}

func (m *ChannelParticipants) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovGroupservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovGroupservice(uint64(m.UserId))
	}
	if m.IsBot {
		n += 2
	}
	if m.InviteId != 0 {
		n += 1 + sovGroupservice(uint64(m.InviteId))
	}
	if m.CanSetUsername {
		n += 2
	}
	if m.CanViewParticipants {
		n += 2
	}
	if m.IsCreator {
		n += 2
	}
	if m.IsAdmin {
		n += 2
	}
	if m.IsBan {
		n += 2
	}
	if m.PromotedBy != 0 {
		n += 1 + sovGroupservice(uint64(m.PromotedBy))
	}
	if m.ChangeGroupInfo {
		n += 2
	}
	if m.DeleteMessages {
		n += 2
	}
	if m.BanUsers {
		n += 2
	}
	if m.PinMessages {
		n += 2
	}
	if m.AddNewAdmin {
		n += 2
	}
	if m.CanReadMessages {
		n += 3
	}
	if m.CanSendMessage {
		n += 3
	}
	if m.CanSendMedia {
		n += 3
	}
	if m.CanSendSticker {
		n += 3
	}
	if m.CanSendGifs {
		n += 3
	}
	if m.CanSendGames {
		n += 3
	}
	if m.CanSendInline {
		n += 3
	}
	if m.CanEmbedLinks {
		n += 3
	}
	if m.KickedBy != 0 {
		n += 2 + sovGroupservice(uint64(m.KickedBy))
	}
	if m.UntilDate != 0 {
		n += 2 + sovGroupservice(uint64(m.UntilDate))
	}
	if m.JoinTime != 0 {
		n += 2 + sovGroupservice(uint64(m.JoinTime))
	}
	if m.PostMessages {
		n += 3
	}
	if m.Edit_Messages {
		n += 3
	}
	if m.InviteUsers {
		n += 3
	}
	if m.InviteLink {
		n += 3
	}
	l = len(m.ExportInviteLink)
	if l > 0 {
		n += 2 + l + sovGroupservice(uint64(l))
	}
	if m.Id != 0 {
		n += 2 + sovGroupservice(uint64(m.Id))
	}
	if m.CanSendPolls {
		n += 3
	}
	if m.StartMsgid != 0 {
		n += 2 + sovGroupservice(uint64(m.StartMsgid))
	}
	return n
}

func (m *ChannelKickedLeft) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovGroupservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovGroupservice(uint64(m.UserId))
	}
	if m.KickedOrLeft {
		n += 2
	}
	if m.KickedBy != 0 {
		n += 1 + sovGroupservice(uint64(m.KickedBy))
	}
	if m.Date != 0 {
		n += 1 + sovGroupservice(uint64(m.Date))
	}
	if m.LastDate != 0 {
		n += 1 + sovGroupservice(uint64(m.LastDate))
	}
	if m.IsBan {
		n += 2
	}
	if m.CanReadMessages {
		n += 2
	}
	if m.CanSendMessage {
		n += 2
	}
	if m.CanSendMedia {
		n += 2
	}
	if m.CanSendInline {
		n += 2
	}
	if m.CanSendGames {
		n += 2
	}
	if m.CanSendGifs {
		n += 2
	}
	if m.CanSendSticker {
		n += 2
	}
	if m.CanEmbedLinks {
		n += 2
	}
	if m.CanSendPolls {
		n += 3
	}
	if m.Id != 0 {
		n += 2 + sovGroupservice(uint64(m.Id))
	}
	return n
}

func sovGroupservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGroupservice(x uint64) (n int) {
	return sovGroupservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserNameBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserNameBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserNameBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PeerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroupservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroupservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastOrMegagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BroadcastOrMegagroup = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Democracy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Democracy = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Signatures = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestrictionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsCount", wireType)
			}
			m.AdminsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedCount", wireType)
			}
			m.KickedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedCount", wireType)
			}
			m.BannedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotCount", wireType)
			}
			m.BotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedFromMaxId", wireType)
			}
			m.MigratedFromMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedFromMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedFromChatId", wireType)
			}
			m.MigratedFromChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedFromChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedMsgId", wireType)
			}
			m.PinnedMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PinnedMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invite_Rule", wireType)
			}
			m.Invite_Rule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Invite_Rule |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryoneQuiet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EveryoneQuiet = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrivateChat = bool(v != 0)
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroupservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroupservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteId", wireType)
			}
			m.InviteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSetUsername", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSetUsername = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanViewParticipants", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanViewParticipants = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCreator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCreator = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBan = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotedBy", wireType)
			}
			m.PromotedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromotedBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeGroupInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeGroupInfo = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteMessages = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanUsers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BanUsers = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PinMessages = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddNewAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddNewAdmin = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanReadMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanReadMessages = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMessage = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMedia = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendSticker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendSticker = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendGifs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendGifs = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendGames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendGames = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendInline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendInline = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanEmbedLinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanEmbedLinks = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedBy", wireType)
			}
			m.KickedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UntilDate", wireType)
			}
			m.UntilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UntilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
			}
			m.JoinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PostMessages = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edit_Messages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Edit_Messages = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUsers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteUsers = bool(v != 0)
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteLink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteLink = bool(v != 0)
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportInviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportInviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendPolls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendPolls = bool(v != 0)
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartMsgid", wireType)
			}
			m.StartMsgid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartMsgid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroupservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroupservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelKickedLeft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelKickedLeft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelKickedLeft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedOrLeft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KickedOrLeft = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedBy", wireType)
			}
			m.KickedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDate", wireType)
			}
			m.LastDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBan = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanReadMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanReadMessages = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMessage = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMedia = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendInline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendInline = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendGames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendGames = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendGifs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendGifs = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendSticker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendSticker = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanEmbedLinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanEmbedLinks = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendPolls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendPolls = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroupservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroupservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroupservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroupservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroupservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGroupservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGroupservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGroupservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGroupservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroupservice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/groupservice/groupservice.proto", fileDescriptorGroupservice)
}

var fileDescriptorGroupservice = []byte{
	// 1465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x5d, 0x72, 0xdb, 0x36,
	0x10, 0x8e, 0xfc, 0x27, 0x0a, 0xfa, 0xa3, 0x11, 0x3b, 0x61, 0xe2, 0xc4, 0x71, 0x9c, 0xb4, 0xf5,
	0x78, 0x5a, 0xa7, 0x4d, 0x7b, 0x01, 0x4b, 0x76, 0x52, 0x26, 0xb1, 0xad, 0x52, 0x4e, 0x66, 0xfa,
	0xc4, 0x81, 0x48, 0x48, 0xc2, 0x44, 0x04, 0x54, 0x00, 0xb2, 0xa3, 0x8b, 0xf5, 0x0c, 0x7d, 0xe8,
	0x43, 0x8f, 0xd0, 0xc9, 0x5b, 0x7b, 0x89, 0x76, 0xb0, 0x00, 0x29, 0x29, 0xd6, 0x4c, 0x33, 0x7d,
	0xd3, 0x7e, 0xfb, 0xed, 0x82, 0x8b, 0xdd, 0xfd, 0x48, 0xa1, 0x93, 0x01, 0xd3, 0x23, 0xd2, 0x3b,
	0x4a, 0x86, 0x44, 0x2b, 0x2a, 0xaf, 0xa8, 0x3c, 0x62, 0xd9, 0x33, 0xc6, 0x35, 0x95, 0x7d, 0x92,
	0xd0, 0xb1, 0x14, 0xbd, 0x49, 0xff, 0xd9, 0x40, 0x8a, 0xc9, 0xd8, 0xb8, 0x59, 0x42, 0x17, 0x8c,
	0xa3, 0xb1, 0x14, 0x5a, 0xe0, 0xda, 0x3c, 0xb6, 0xdf, 0x47, 0xb5, 0xb7, 0x8a, 0xca, 0x73, 0x92,
	0xd1, 0x16, 0x51, 0x14, 0xdf, 0x47, 0x9e, 0xb1, 0x39, 0xc9, 0x68, 0x50, 0xda, 0x2b, 0x1d, 0x54,
	0xa2, 0xc2, 0xc6, 0x0d, 0xb4, 0x12, 0xa6, 0xc1, 0xca, 0x5e, 0xe9, 0x60, 0x3d, 0x5a, 0x09, 0x53,
	0x7c, 0x88, 0xd6, 0x2e, 0xa7, 0x63, 0x1a, 0xac, 0xee, 0x95, 0x0e, 0x1a, 0xcf, 0xef, 0x1c, 0x2d,
	0x1c, 0xd6, 0xa1, 0x54, 0x1a, 0x6f, 0x04, 0x9c, 0xfd, 0x7f, 0xca, 0xa8, 0xda, 0x1e, 0x12, 0xdd,
	0x1e, 0x12, 0xce, 0xe9, 0x08, 0x3f, 0x44, 0xc8, 0xfd, 0x8c, 0x59, 0x0a, 0x27, 0xad, 0x47, 0x15,
	0x87, 0x84, 0x29, 0x7e, 0x84, 0xaa, 0xc7, 0x49, 0x42, 0x95, 0x8a, 0x87, 0x44, 0x0d, 0xe1, 0xcc,
	0xd5, 0x08, 0x59, 0xe8, 0x47, 0xa2, 0x86, 0x78, 0x0b, 0xad, 0x9f, 0xf2, 0x44, 0x4e, 0xe1, 0x70,
	0x2f, 0xb2, 0x06, 0xfe, 0x01, 0xdd, 0x69, 0x49, 0x41, 0xd2, 0x84, 0x28, 0x1d, 0x0b, 0x19, 0x67,
	0x74, 0x40, 0xe0, 0xa9, 0x82, 0x35, 0xa0, 0x6d, 0x15, 0xde, 0x0b, 0x79, 0x96, 0xfb, 0x4c, 0xcd,
	0xef, 0xa8, 0x64, 0x7d, 0x46, 0xd3, 0x60, 0x1d, 0x78, 0x85, 0x8d, 0x77, 0x11, 0x8a, 0xa8, 0xd2,
	0x92, 0x25, 0x9a, 0xa6, 0xc1, 0x06, 0x78, 0xe7, 0x10, 0xfc, 0x00, 0x55, 0x4e, 0x68, 0x26, 0x12,
	0x49, 0x92, 0x69, 0x50, 0x06, 0xf7, 0x0c, 0x30, 0xd1, 0x5d, 0x36, 0xe0, 0x44, 0x4f, 0x24, 0x55,
	0x81, 0x67, 0xa3, 0x67, 0x08, 0xf6, 0xd1, 0xea, 0x19, 0xe3, 0x41, 0x05, 0x1c, 0xe6, 0xa7, 0xa9,
	0xeb, 0x92, 0xe9, 0x11, 0x0d, 0x10, 0x5c, 0xbe, 0x35, 0xf0, 0x0e, 0xaa, 0x98, 0x2e, 0xc4, 0xd0,
	0x96, 0xea, 0xac, 0x2d, 0xa6, 0x6d, 0x26, 0xe4, 0xb8, 0x27, 0x26, 0x3a, 0xa8, 0xd9, 0x10, 0x30,
	0x0c, 0xda, 0x19, 0x0a, 0x2d, 0x82, 0xba, 0x45, 0xc1, 0xc0, 0x18, 0xad, 0x9d, 0x10, 0x4d, 0x83,
	0x06, 0x5c, 0x38, 0xfc, 0xc6, 0x01, 0x2a, 0xbf, 0xa3, 0x52, 0x31, 0xc1, 0x83, 0x26, 0xc0, 0xb9,
	0x89, 0xbf, 0x41, 0x38, 0x2f, 0x95, 0x09, 0x1e, 0x4b, 0x4a, 0x94, 0xe0, 0x81, 0x0f, 0x09, 0x37,
	0xe7, 0x3c, 0x11, 0x38, 0x0c, 0xbd, 0x43, 0xa4, 0x66, 0x09, 0x1b, 0x13, 0xae, 0x55, 0x9c, 0x88,
	0x09, 0xd7, 0xc1, 0x26, 0xe4, 0xdc, 0x9c, 0xf7, 0xb4, 0x8d, 0x03, 0x3f, 0x46, 0xb5, 0xe3, 0x34,
	0x63, 0x3c, 0x27, 0x62, 0x20, 0x56, 0x2d, 0x56, 0x50, 0x5e, 0xb3, 0xe4, 0x3d, 0x4d, 0x1d, 0xe5,
	0xb6, 0xa5, 0x58, 0xac, 0xa0, 0xb4, 0xcc, 0xd4, 0xe4, 0x94, 0x2d, 0x4b, 0xb1, 0x98, 0xa5, 0x7c,
	0x8b, 0xb6, 0x4e, 0x3f, 0x8c, 0x85, 0xd4, 0x34, 0x8d, 0x19, 0xbf, 0x62, 0x9a, 0xc6, 0x23, 0xc6,
	0xdf, 0x07, 0xdb, 0x50, 0x08, 0xce, 0x7d, 0x21, 0xb8, 0xde, 0x30, 0xfe, 0xde, 0xdc, 0x77, 0x4b,
	0x68, 0x97, 0xf1, 0x0e, 0x64, 0xf4, 0x5a, 0x42, 0xdb, 0x74, 0xcf, 0xd0, 0xd6, 0x19, 0x1b, 0x48,
	0x62, 0xd2, 0xf5, 0xa5, 0xc8, 0xe2, 0x8c, 0x7c, 0x30, 0x43, 0x7c, 0xd7, 0x16, 0x9a, 0xfb, 0x5e,
	0x48, 0x91, 0x9d, 0x91, 0x0f, 0x61, 0x8a, 0xbf, 0x43, 0xdb, 0x8b, 0x01, 0x66, 0x81, 0x4d, 0x44,
	0x00, 0x11, 0x78, 0x3e, 0xc2, 0xec, 0x48, 0x98, 0xe2, 0x7d, 0x54, 0xef, 0x30, 0xa8, 0x2a, 0x53,
	0x03, 0x43, 0xbd, 0x67, 0xcb, 0xb2, 0xe0, 0x99, 0x1a, 0x84, 0xa9, 0xe9, 0x5b, 0x7b, 0x34, 0x51,
	0x9a, 0xca, 0xe0, 0xbe, 0xed, 0x9b, 0x33, 0xcd, 0xf6, 0xd8, 0x62, 0xe2, 0x68, 0x32, 0xa2, 0xc1,
	0x0e, 0x78, 0x91, 0x85, 0x0c, 0x02, 0xa1, 0x92, 0x12, 0x2d, 0x64, 0xf0, 0xc0, 0x85, 0x5a, 0x13,
	0x7f, 0x81, 0x1a, 0xa7, 0x57, 0x54, 0x4e, 0x05, 0xa7, 0xf1, 0x2f, 0x13, 0x46, 0x75, 0xf0, 0x10,
	0x86, 0xb3, 0x9e, 0xa3, 0x3f, 0x19, 0xd0, 0xdc, 0x7a, 0x47, 0xb2, 0x2b, 0xa2, 0x29, 0x14, 0x13,
	0xec, 0x02, 0xa9, 0xea, 0x30, 0x53, 0x84, 0x53, 0x8b, 0x47, 0xb9, 0x5a, 0xec, 0xff, 0x5a, 0x41,
	0xb7, 0xdd, 0x82, 0xcf, 0xcf, 0xc2, 0x7f, 0x29, 0xc1, 0x5d, 0x54, 0x86, 0xd1, 0x67, 0xb9, 0xf2,
	0x6c, 0x18, 0x33, 0x4c, 0xf1, 0x36, 0xda, 0x08, 0x55, 0xdc, 0x13, 0x3a, 0x97, 0x80, 0x50, 0xb5,
	0x84, 0x36, 0xad, 0x73, 0xb5, 0xb3, 0x14, 0xb6, 0x7e, 0x3d, 0xf2, 0x2c, 0x10, 0xa6, 0xf8, 0x00,
	0xf9, 0x6d, 0xc2, 0x63, 0x45, 0x75, 0x3c, 0xc9, 0x55, 0xce, 0x6e, 0x7c, 0xa3, 0x4d, 0x78, 0x97,
	0xea, 0x42, 0xeb, 0x9e, 0xa3, 0x6d, 0xc3, 0xbc, 0x62, 0xf4, 0x3a, 0x1e, 0xcf, 0x3d, 0xae, 0x93,
	0x80, 0xdb, 0x6d, 0xc2, 0xdf, 0x31, 0x7a, 0xfd, 0x69, 0x25, 0xa1, 0x8a, 0x13, 0x77, 0xb1, 0x4e,
	0x0c, 0x42, 0x95, 0x5f, 0xed, 0x3d, 0xe4, 0x85, 0x2a, 0x26, 0x66, 0xbc, 0x9d, 0x14, 0x94, 0x43,
	0x05, 0xd3, 0x9e, 0xd7, 0x42, 0x72, 0x29, 0x30, 0xb5, 0x10, 0x6e, 0xfa, 0xd8, 0x91, 0x22, 0x13,
	0x66, 0x70, 0x7a, 0x53, 0x90, 0x84, 0xf5, 0x08, 0xe5, 0x50, 0x6b, 0x8a, 0x0f, 0xd1, 0xa6, 0xb9,
	0xa9, 0x01, 0x8d, 0x41, 0xc9, 0x62, 0xc6, 0xfb, 0x02, 0xf4, 0xc1, 0x8b, 0x9a, 0xd6, 0xf1, 0xd2,
	0xe0, 0x21, 0xef, 0x0b, 0xfc, 0x15, 0x6a, 0x9e, 0xd0, 0x11, 0xd5, 0x34, 0xce, 0xa8, 0x52, 0x64,
	0x40, 0x15, 0x08, 0x86, 0x17, 0x35, 0x2c, 0x7c, 0xe6, 0x50, 0x18, 0x7e, 0xc2, 0xe1, 0x82, 0x14,
	0xa8, 0x87, 0x17, 0x79, 0x2d, 0xc2, 0xcd, 0xd5, 0x28, 0x68, 0x3c, 0xe3, 0xb3, 0x14, 0x0d, 0xd7,
	0x78, 0xc6, 0x8b, 0xf8, 0x7d, 0x54, 0x3f, 0x4e, 0xd3, 0x98, 0xd3, 0x6b, 0x57, 0x6c, 0xd3, 0x72,
	0x8e, 0xd3, 0xf4, 0x9c, 0x5e, 0xdb, 0x82, 0xcd, 0x83, 0x13, 0x50, 0x94, 0x74, 0x96, 0xcb, 0x77,
	0x0f, 0x4e, 0x8c, 0xa0, 0xa4, 0x45, 0xbe, 0xa2, 0x69, 0xbc, 0xe0, 0x82, 0xa8, 0xe4, 0x4d, 0xe3,
	0x39, 0x15, 0x3f, 0x45, 0x8d, 0x39, 0x66, 0xca, 0x08, 0x68, 0x8a, 0x17, 0xd5, 0x0a, 0x5e, 0xca,
	0xc8, 0x42, 0x3e, 0xa5, 0x8d, 0x94, 0x48, 0x10, 0x96, 0x59, 0xbe, 0xae, 0x45, 0x4d, 0x25, 0x05,
	0x73, 0xc0, 0xfa, 0x0a, 0x14, 0xc3, 0x8b, 0xaa, 0x8e, 0xf6, 0x92, 0xf5, 0xd5, 0xc2, 0x99, 0x03,
	0x92, 0x51, 0x05, 0x7a, 0x31, 0x3b, 0xf3, 0xa5, 0xc1, 0xf0, 0x97, 0xa8, 0x59, 0xb0, 0x18, 0x1f,
	0x31, 0x4e, 0x41, 0x2e, 0xbc, 0xa8, 0xee, 0x68, 0x21, 0x80, 0x39, 0x8f, 0x66, 0x3d, 0x9a, 0x82,
	0x48, 0x29, 0x10, 0x09, 0xcb, 0x3b, 0x35, 0xa8, 0xd1, 0x27, 0xe8, 0x91, 0x13, 0xc6, 0xde, 0xd4,
	0x69, 0x83, 0x67, 0x81, 0xd6, 0xd4, 0xcc, 0xe1, 0x5b, 0xae, 0xd9, 0x28, 0x4e, 0x8d, 0xd4, 0x5b,
	0x6d, 0xa8, 0x00, 0x02, 0x7a, 0xbf, 0x83, 0x2a, 0xaf, 0x04, 0xe3, 0xb1, 0x66, 0x59, 0xae, 0x0d,
	0x9e, 0x01, 0x2e, 0x59, 0x46, 0xf1, 0x13, 0x54, 0xef, 0x08, 0xa5, 0x67, 0x4d, 0x79, 0x60, 0xab,
	0x31, 0x60, 0xd1, 0x91, 0x27, 0xa8, 0x7e, 0x9a, 0x32, 0x1d, 0xe7, 0x80, 0xd3, 0x88, 0x9a, 0x01,
	0x0b, 0xd2, 0x63, 0x54, 0x73, 0x8b, 0x68, 0x27, 0xc9, 0x49, 0x84, 0xc5, 0xec, 0x30, 0xcd, 0x74,
	0x0a, 0xf4, 0xf8, 0x91, 0x7d, 0x3f, 0xce, 0xe9, 0xf0, 0xd7, 0xc8, 0xa9, 0xf3, 0x82, 0x6e, 0xef,
	0x81, 0x6e, 0xfb, 0xd6, 0x33, 0xc7, 0xb6, 0x8a, 0xf3, 0xb8, 0xf8, 0x3e, 0x99, 0x6f, 0xcd, 0x58,
	0x8c, 0x46, 0x2a, 0xd8, 0x5f, 0x68, 0x4d, 0xc7, 0x60, 0xe6, 0x21, 0xba, 0x9a, 0x48, 0x6d, 0x94,
	0x96, 0xa5, 0xc1, 0x13, 0xbb, 0x64, 0x00, 0x9d, 0x19, 0x64, 0xff, 0xf7, 0x35, 0xbb, 0x65, 0x9c,
	0x8e, 0xec, 0x15, 0xbf, 0xa1, 0x7d, 0xfd, 0xbf, 0x65, 0xeb, 0x29, 0x6a, 0xb8, 0xce, 0x09, 0x19,
	0x8f, 0x68, 0x3f, 0x97, 0x2f, 0xf7, 0xa2, 0xbb, 0x90, 0x90, 0x7d, 0xa1, 0xbf, 0x6b, 0x9f, 0xf4,
	0x37, 0x7f, 0x89, 0xaf, 0xcf, 0xbd, 0xc4, 0x77, 0x50, 0xe5, 0x8d, 0xf9, 0xe8, 0x81, 0x96, 0x6f,
	0xd8, 0x00, 0x03, 0x80, 0x73, 0x26, 0x2f, 0xe5, 0x79, 0x79, 0x59, 0xba, 0x84, 0xde, 0xe7, 0x2f,
	0x61, 0xe5, 0x33, 0x97, 0x10, 0x2d, 0x59, 0xc2, 0x25, 0x0b, 0x51, 0x5d, 0xb6, 0x10, 0x37, 0xd7,
	0xab, 0xb6, 0x64, 0xbd, 0x6e, 0x2c, 0x6a, 0xfd, 0xe6, 0xa2, 0x2e, 0x5b, 0xfb, 0xc6, 0xd2, 0xb5,
	0x5f, 0xb2, 0x84, 0xcd, 0x65, 0x4b, 0x78, 0x73, 0xbe, 0xfc, 0x25, 0xf3, 0x65, 0xa7, 0x72, 0x33,
	0x9f, 0xca, 0xc3, 0x57, 0xa8, 0x79, 0x9c, 0x68, 0x76, 0x45, 0x4f, 0xa5, 0x14, 0xb2, 0x2d, 0x52,
	0x8a, 0xeb, 0xa8, 0x62, 0xa1, 0xf8, 0xe2, 0xb5, 0x7f, 0x0b, 0x63, 0x54, 0x77, 0x66, 0xf7, 0xe7,
	0xee, 0x69, 0x14, 0xf9, 0x7f, 0x95, 0xf1, 0x56, 0x1e, 0x15, 0x9f, 0x5f, 0x5c, 0xc6, 0x2f, 0xc2,
	0xf3, 0x13, 0xff, 0xef, 0xf2, 0xe1, 0x2b, 0xe4, 0xe5, 0xdf, 0xd9, 0xb8, 0x66, 0x7f, 0x9b, 0x31,
	0xf3, 0x6f, 0xe5, 0x96, 0x79, 0x13, 0xfb, 0x25, 0xdc, 0x44, 0x55, 0x67, 0x99, 0xf1, 0xf4, 0x57,
	0xf0, 0x26, 0xaa, 0x1b, 0xa0, 0x3b, 0x19, 0x3b, 0xce, 0xea, 0x61, 0xbf, 0x98, 0xf2, 0x2e, 0x25,
	0x32, 0x19, 0x42, 0xd2, 0x3a, 0xaa, 0x58, 0xeb, 0x78, 0x34, 0xf2, 0x6f, 0x99, 0x3c, 0xce, 0x34,
	0x2a, 0xee, 0x97, 0xb0, 0x8f, 0x6a, 0x16, 0xb0, 0xdf, 0x5b, 0xfe, 0xca, 0x2c, 0xa2, 0x25, 0xb4,
	0xbf, 0x3a, 0x23, 0xd8, 0xe9, 0xf5, 0xd7, 0x5a, 0xb5, 0xdf, 0x3e, 0xee, 0x96, 0xfe, 0xf8, 0xb8,
	0x5b, 0xfa, 0xf3, 0xe3, 0x6e, 0xa9, 0xb7, 0x01, 0x7f, 0x4a, 0xbe, 0xff, 0x37, 0x00, 0x00, 0xff,
	0xff, 0x3b, 0x28, 0xee, 0x1f, 0xdc, 0x0c, 0x00, 0x00,
}
