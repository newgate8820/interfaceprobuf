// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/groupservice/usernamesearchserver.proto

package groupservice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 更新Username信息
type UpdateUsernameReq struct {
	NewInfo     *UserNameBase `protobuf:"bytes,1,opt,name=NewInfo" json:"NewInfo,omitempty"`
	OldUsername string        `protobuf:"bytes,2,opt,name=OldUsername,proto3" json:"OldUsername,omitempty"`
}

func (m *UpdateUsernameReq) Reset()         { *m = UpdateUsernameReq{} }
func (m *UpdateUsernameReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUsernameReq) ProtoMessage()    {}
func (*UpdateUsernameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUsernamesearchserver, []int{0}
}

func (m *UpdateUsernameReq) GetNewInfo() *UserNameBase {
	if m != nil {
		return m.NewInfo
	}
	return nil
}

func (m *UpdateUsernameReq) GetOldUsername() string {
	if m != nil {
		return m.OldUsername
	}
	return ""
}

type UpdateUsernameReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *UpdateUsernameReply) Reset()         { *m = UpdateUsernameReply{} }
func (m *UpdateUsernameReply) String() string { return proto.CompactTextString(m) }
func (*UpdateUsernameReply) ProtoMessage()    {}
func (*UpdateUsernameReply) Descriptor() ([]byte, []int) {
	return fileDescriptorUsernamesearchserver, []int{1}
}

func (m *UpdateUsernameReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 完全匹配username
type GetUsernameReq struct {
	Username string `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
}

func (m *GetUsernameReq) Reset()         { *m = GetUsernameReq{} }
func (m *GetUsernameReq) String() string { return proto.CompactTextString(m) }
func (*GetUsernameReq) ProtoMessage()    {}
func (*GetUsernameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUsernamesearchserver, []int{2}
}

func (m *GetUsernameReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type GetUsernameReply struct {
	Info      *UserNameBase   `protobuf:"bytes,1,opt,name=Info" json:"Info,omitempty"`
	ErrorCode ActiveErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *GetUsernameReply) Reset()         { *m = GetUsernameReply{} }
func (m *GetUsernameReply) String() string { return proto.CompactTextString(m) }
func (*GetUsernameReply) ProtoMessage()    {}
func (*GetUsernameReply) Descriptor() ([]byte, []int) {
	return fileDescriptorUsernamesearchserver, []int{3}
}

func (m *GetUsernameReply) GetInfo() *UserNameBase {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *GetUsernameReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 模糊搜索username
type SearchUsernameReq struct {
	SearchStr string `protobuf:"bytes,1,opt,name=SearchStr,proto3" json:"SearchStr,omitempty"`
	UserId    int32  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Limit     int32  `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *SearchUsernameReq) Reset()         { *m = SearchUsernameReq{} }
func (m *SearchUsernameReq) String() string { return proto.CompactTextString(m) }
func (*SearchUsernameReq) ProtoMessage()    {}
func (*SearchUsernameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorUsernamesearchserver, []int{4}
}

func (m *SearchUsernameReq) GetSearchStr() string {
	if m != nil {
		return m.SearchStr
	}
	return ""
}

func (m *SearchUsernameReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SearchUsernameReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SearchUsernameReply struct {
	Info      []*UserNameBase `protobuf:"bytes,1,rep,name=Info" json:"Info,omitempty"`
	ErrorCode ActiveErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *SearchUsernameReply) Reset()         { *m = SearchUsernameReply{} }
func (m *SearchUsernameReply) String() string { return proto.CompactTextString(m) }
func (*SearchUsernameReply) ProtoMessage()    {}
func (*SearchUsernameReply) Descriptor() ([]byte, []int) {
	return fileDescriptorUsernamesearchserver, []int{5}
}

func (m *SearchUsernameReply) GetInfo() []*UserNameBase {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SearchUsernameReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

func init() {
	proto.RegisterType((*UpdateUsernameReq)(nil), "groupservice.UpdateUsernameReq")
	proto.RegisterType((*UpdateUsernameReply)(nil), "groupservice.UpdateUsernameReply")
	proto.RegisterType((*GetUsernameReq)(nil), "groupservice.GetUsernameReq")
	proto.RegisterType((*GetUsernameReply)(nil), "groupservice.GetUsernameReply")
	proto.RegisterType((*SearchUsernameReq)(nil), "groupservice.SearchUsernameReq")
	proto.RegisterType((*SearchUsernameReply)(nil), "groupservice.SearchUsernameReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UsernameSearchService service

type UsernameSearchServiceClient interface {
	// 更新Username信息
	UpdateUsername(ctx context.Context, in *UpdateUsernameReq, opts ...grpc.CallOption) (*UpdateUsernameReply, error)
	// 完全匹配username
	GetUsername(ctx context.Context, in *GetUsernameReq, opts ...grpc.CallOption) (*GetUsernameReply, error)
	// 模糊搜索username 和 自己所在的群
	SearchUsername(ctx context.Context, in *SearchUsernameReq, opts ...grpc.CallOption) (*SearchUsernameReply, error)
}

type usernameSearchServiceClient struct {
	cc *grpc.ClientConn
}

func NewUsernameSearchServiceClient(cc *grpc.ClientConn) UsernameSearchServiceClient {
	return &usernameSearchServiceClient{cc}
}

func (c *usernameSearchServiceClient) UpdateUsername(ctx context.Context, in *UpdateUsernameReq, opts ...grpc.CallOption) (*UpdateUsernameReply, error) {
	out := new(UpdateUsernameReply)
	err := grpc.Invoke(ctx, "/groupservice.UsernameSearchService/UpdateUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usernameSearchServiceClient) GetUsername(ctx context.Context, in *GetUsernameReq, opts ...grpc.CallOption) (*GetUsernameReply, error) {
	out := new(GetUsernameReply)
	err := grpc.Invoke(ctx, "/groupservice.UsernameSearchService/GetUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usernameSearchServiceClient) SearchUsername(ctx context.Context, in *SearchUsernameReq, opts ...grpc.CallOption) (*SearchUsernameReply, error) {
	out := new(SearchUsernameReply)
	err := grpc.Invoke(ctx, "/groupservice.UsernameSearchService/SearchUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UsernameSearchService service

type UsernameSearchServiceServer interface {
	// 更新Username信息
	UpdateUsername(context.Context, *UpdateUsernameReq) (*UpdateUsernameReply, error)
	// 完全匹配username
	GetUsername(context.Context, *GetUsernameReq) (*GetUsernameReply, error)
	// 模糊搜索username 和 自己所在的群
	SearchUsername(context.Context, *SearchUsernameReq) (*SearchUsernameReply, error)
}

func RegisterUsernameSearchServiceServer(s *grpc.Server, srv UsernameSearchServiceServer) {
	s.RegisterService(&_UsernameSearchService_serviceDesc, srv)
}

func _UsernameSearchService_UpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsernameSearchServiceServer).UpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.UsernameSearchService/UpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsernameSearchServiceServer).UpdateUsername(ctx, req.(*UpdateUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsernameSearchService_GetUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsernameSearchServiceServer).GetUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.UsernameSearchService/GetUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsernameSearchServiceServer).GetUsername(ctx, req.(*GetUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsernameSearchService_SearchUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsernameSearchServiceServer).SearchUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.UsernameSearchService/SearchUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsernameSearchServiceServer).SearchUsername(ctx, req.(*SearchUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UsernameSearchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "groupservice.UsernameSearchService",
	HandlerType: (*UsernameSearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUsername",
			Handler:    _UsernameSearchService_UpdateUsername_Handler,
		},
		{
			MethodName: "GetUsername",
			Handler:    _UsernameSearchService_GetUsername_Handler,
		},
		{
			MethodName: "SearchUsername",
			Handler:    _UsernameSearchService_SearchUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/groupservice/usernamesearchserver.proto",
}

func (m *UpdateUsernameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUsernameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsernamesearchserver(dAtA, i, uint64(m.NewInfo.Size()))
		n1, err := m.NewInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.OldUsername) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsernamesearchserver(dAtA, i, uint64(len(m.OldUsername)))
		i += copy(dAtA[i:], m.OldUsername)
	}
	return i, nil
}

func (m *UpdateUsernameReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUsernameReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUsernamesearchserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetUsernameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsernameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsernamesearchserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func (m *GetUsernameReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsernameReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsernamesearchserver(dAtA, i, uint64(m.Info.Size()))
		n2, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUsernamesearchserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *SearchUsernameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUsernameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SearchStr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsernamesearchserver(dAtA, i, uint64(len(m.SearchStr)))
		i += copy(dAtA[i:], m.SearchStr)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUsernamesearchserver(dAtA, i, uint64(m.UserId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUsernamesearchserver(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *SearchUsernameReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUsernameReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUsernamesearchserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUsernamesearchserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func encodeVarintUsernamesearchserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UpdateUsernameReq) Size() (n int) {
	var l int
	_ = l
	if m.NewInfo != nil {
		l = m.NewInfo.Size()
		n += 1 + l + sovUsernamesearchserver(uint64(l))
	}
	l = len(m.OldUsername)
	if l > 0 {
		n += 1 + l + sovUsernamesearchserver(uint64(l))
	}
	return n
}

func (m *UpdateUsernameReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovUsernamesearchserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetUsernameReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovUsernamesearchserver(uint64(l))
	}
	return n
}

func (m *GetUsernameReply) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovUsernamesearchserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovUsernamesearchserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *SearchUsernameReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.SearchStr)
	if l > 0 {
		n += 1 + l + sovUsernamesearchserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovUsernamesearchserver(uint64(m.UserId))
	}
	if m.Limit != 0 {
		n += 1 + sovUsernamesearchserver(uint64(m.Limit))
	}
	return n
}

func (m *SearchUsernameReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovUsernamesearchserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovUsernamesearchserver(uint64(m.ErrorCode))
	}
	return n
}

func sovUsernamesearchserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUsernamesearchserver(x uint64) (n int) {
	return sovUsernamesearchserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateUsernameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsernamesearchserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUsernameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUsernameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsernamesearchserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsernamesearchserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewInfo == nil {
				m.NewInfo = &UserNameBase{}
			}
			if err := m.NewInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsernamesearchserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsernamesearchserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsernamesearchserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsernamesearchserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUsernameReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsernamesearchserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUsernameReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUsernameReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsernamesearchserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsernamesearchserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsernamesearchserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsernameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsernamesearchserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsernameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsernameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsernamesearchserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsernamesearchserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsernamesearchserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsernamesearchserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsernameReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsernamesearchserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsernameReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsernameReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsernamesearchserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsernamesearchserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &UserNameBase{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsernamesearchserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsernamesearchserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsernamesearchserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUsernameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsernamesearchserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUsernameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUsernameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsernamesearchserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsernamesearchserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsernamesearchserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsernamesearchserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsernamesearchserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsernamesearchserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUsernameReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsernamesearchserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUsernameReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUsernameReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsernamesearchserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsernamesearchserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &UserNameBase{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsernamesearchserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsernamesearchserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsernamesearchserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsernamesearchserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsernamesearchserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsernamesearchserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsernamesearchserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUsernamesearchserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUsernamesearchserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUsernamesearchserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUsernamesearchserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsernamesearchserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/groupservice/usernamesearchserver.proto", fileDescriptorUsernamesearchserver)
}

var fileDescriptorUsernamesearchserver = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcf, 0xae, 0xd2, 0x50,
	0x10, 0xc6, 0x39, 0x20, 0x28, 0x03, 0x69, 0xe4, 0xa0, 0x86, 0x34, 0x58, 0xb1, 0x2b, 0x16, 0xa6,
	0x24, 0xe8, 0xce, 0x95, 0xa8, 0x31, 0x24, 0x88, 0x49, 0x09, 0x6c, 0xcd, 0xa1, 0x1d, 0xa0, 0xb1,
	0xa5, 0xf5, 0xf4, 0x80, 0x61, 0x65, 0xe2, 0x43, 0xf8, 0x4c, 0x77, 0x79, 0x1f, 0xe1, 0x86, 0x27,
	0xb9, 0xe9, 0x1f, 0xa0, 0xa7, 0xf7, 0x86, 0x5c, 0x16, 0x77, 0x39, 0x73, 0xbe, 0x99, 0xef, 0x37,
	0x9d, 0x29, 0x8c, 0x96, 0x8e, 0x70, 0xd9, 0xdc, 0xb0, 0x56, 0x4c, 0x84, 0xc8, 0xb7, 0xc8, 0x0d,
	0xc7, 0xeb, 0x39, 0x6b, 0x81, 0x7c, 0xc1, 0x2c, 0x0c, 0xb8, 0x3f, 0xdf, 0x2c, 0x7a, 0x4b, 0xee,
	0x6f, 0x82, 0xe8, 0xd9, 0xb1, 0xb0, 0xb7, 0x09, 0x91, 0xaf, 0x99, 0x87, 0x21, 0x32, 0x6e, 0xad,
	0xd2, 0xa2, 0x80, 0xfb, 0xc2, 0xa7, 0xf5, 0xac, 0x50, 0xfd, 0x72, 0x79, 0xef, 0x6c, 0x90, 0xf4,
	0xd4, 0x7f, 0x41, 0x63, 0x1a, 0xd8, 0x4c, 0xe0, 0x34, 0xf5, 0x35, 0xf1, 0x37, 0xfd, 0x00, 0x4f,
	0xc7, 0xf8, 0x67, 0xb8, 0x5e, 0xf8, 0x2d, 0xd2, 0x21, 0xdd, 0x5a, 0x5f, 0x35, 0xa4, 0xd2, 0x48,
	0x3b, 0x66, 0x1e, 0x0e, 0x58, 0x88, 0xe6, 0x41, 0x4a, 0x3b, 0x50, 0xfb, 0xe1, 0xda, 0x87, 0x3e,
	0xad, 0x62, 0x87, 0x74, 0xab, 0x66, 0x36, 0xa5, 0x9b, 0xd0, 0xcc, 0x9b, 0x05, 0xee, 0x8e, 0x7e,
	0x84, 0xea, 0x57, 0xce, 0x7d, 0xfe, 0xd9, 0xb7, 0x31, 0x36, 0x54, 0xfa, 0xaf, 0x65, 0xc3, 0x4f,
	0x96, 0x70, 0xb6, 0x78, 0x14, 0x99, 0x27, 0xbd, 0xfe, 0x0e, 0x94, 0x6f, 0x28, 0xb2, 0xf4, 0x2a,
	0x3c, 0x3b, 0x42, 0x90, 0x18, 0xe2, 0x18, 0xeb, 0x7f, 0xe1, 0xb9, 0xa4, 0x8e, 0xec, 0x0d, 0x78,
	0xf2, 0xc0, 0x51, 0x63, 0x9d, 0x8c, 0x5b, 0xbc, 0x10, 0xf7, 0x27, 0x34, 0x26, 0xf1, 0x66, 0xb3,
	0xc4, 0x6d, 0xa8, 0x26, 0xc9, 0x89, 0xe0, 0x29, 0xf2, 0x29, 0x41, 0x5f, 0x41, 0x25, 0x12, 0x0f,
	0xed, 0xd8, 0xac, 0x6c, 0xa6, 0x11, 0x7d, 0x01, 0xe5, 0x91, 0xe3, 0x39, 0xa2, 0x55, 0x8a, 0xd3,
	0x49, 0xa0, 0xff, 0x23, 0xd0, 0xcc, 0x3b, 0xc8, 0x53, 0x96, 0x1e, 0x7d, 0xca, 0xfe, 0xff, 0x22,
	0xbc, 0x3c, 0xd8, 0xa7, 0x83, 0x24, 0x45, 0x74, 0x06, 0x8a, 0x7c, 0x02, 0xf4, 0x4d, 0x0e, 0x25,
	0x7f, 0x8d, 0xea, 0xdb, 0xf3, 0x82, 0xc0, 0xdd, 0xe9, 0x05, 0xfa, 0x1d, 0x6a, 0x99, 0xc5, 0xd2,
	0xb6, 0x5c, 0x23, 0x5f, 0x88, 0xaa, 0x9d, 0x79, 0x4d, 0xda, 0xcd, 0x40, 0x91, 0x3f, 0x62, 0x1e,
	0xf3, 0xce, 0x12, 0xf3, 0x98, 0xf7, 0xec, 0x40, 0x2f, 0x0c, 0xea, 0x57, 0x7b, 0x8d, 0x5c, 0xef,
	0x35, 0x72, 0xb3, 0xd7, 0xc8, 0xbc, 0x12, 0xff, 0x83, 0xef, 0x6f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x08, 0x37, 0xe3, 0x40, 0x27, 0x04, 0x00, 0x00,
}
