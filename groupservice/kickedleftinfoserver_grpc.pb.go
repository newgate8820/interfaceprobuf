// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: kickedleftinfoserver.proto

package groupservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KickedLeftServiceClient is the client API for KickedLeftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KickedLeftServiceClient interface {
	// 分页获取被踢用户
	GetChannelKickedByLimit(ctx context.Context, in *GetChannelKickedByLimitReq, opts ...grpc.CallOption) (*GetChannelKickedByLimitReply, error)
	// 获取单个被踢用户
	GetChannelKeckedLeft(ctx context.Context, in *GetChannelKeckedLeftReq, opts ...grpc.CallOption) (*GetChannelKeckedLeftReply, error)
	// 设置被踢用户信息到缓存 以存在的直接替换
	AddLeftParticipant(ctx context.Context, in *AddLeftParticipantReq, opts ...grpc.CallOption) (*AddLeftParticipantReply, error)
	// 删除缓存中的被踢用户信息
	DelLeftParticipant(ctx context.Context, in *DelLeftParticipantReq, opts ...grpc.CallOption) (*DelLeftParticipantReply, error)
	// 删除缓存中的群Id对应的所有被踢用户信息
	DelAllLeftChatParticipant(ctx context.Context, in *DelAllLeftChatParticipantReq, opts ...grpc.CallOption) (*DelAllLeftChatParticipantReply, error)
	// 搜索群成员
	SearchKickedParticipant(ctx context.Context, in *SearchKickedParticipantReq, opts ...grpc.CallOption) (*SearchKickedParticipantReply, error)
}

type kickedLeftServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKickedLeftServiceClient(cc grpc.ClientConnInterface) KickedLeftServiceClient {
	return &kickedLeftServiceClient{cc}
}

func (c *kickedLeftServiceClient) GetChannelKickedByLimit(ctx context.Context, in *GetChannelKickedByLimitReq, opts ...grpc.CallOption) (*GetChannelKickedByLimitReply, error) {
	out := new(GetChannelKickedByLimitReply)
	err := c.cc.Invoke(ctx, "/groupservice.KickedLeftService/GetChannelKickedByLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kickedLeftServiceClient) GetChannelKeckedLeft(ctx context.Context, in *GetChannelKeckedLeftReq, opts ...grpc.CallOption) (*GetChannelKeckedLeftReply, error) {
	out := new(GetChannelKeckedLeftReply)
	err := c.cc.Invoke(ctx, "/groupservice.KickedLeftService/GetChannelKeckedLeft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kickedLeftServiceClient) AddLeftParticipant(ctx context.Context, in *AddLeftParticipantReq, opts ...grpc.CallOption) (*AddLeftParticipantReply, error) {
	out := new(AddLeftParticipantReply)
	err := c.cc.Invoke(ctx, "/groupservice.KickedLeftService/AddLeftParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kickedLeftServiceClient) DelLeftParticipant(ctx context.Context, in *DelLeftParticipantReq, opts ...grpc.CallOption) (*DelLeftParticipantReply, error) {
	out := new(DelLeftParticipantReply)
	err := c.cc.Invoke(ctx, "/groupservice.KickedLeftService/DelLeftParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kickedLeftServiceClient) DelAllLeftChatParticipant(ctx context.Context, in *DelAllLeftChatParticipantReq, opts ...grpc.CallOption) (*DelAllLeftChatParticipantReply, error) {
	out := new(DelAllLeftChatParticipantReply)
	err := c.cc.Invoke(ctx, "/groupservice.KickedLeftService/DelAllLeftChatParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kickedLeftServiceClient) SearchKickedParticipant(ctx context.Context, in *SearchKickedParticipantReq, opts ...grpc.CallOption) (*SearchKickedParticipantReply, error) {
	out := new(SearchKickedParticipantReply)
	err := c.cc.Invoke(ctx, "/groupservice.KickedLeftService/SearchKickedParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KickedLeftServiceServer is the server API for KickedLeftService service.
// All implementations must embed UnimplementedKickedLeftServiceServer
// for forward compatibility
type KickedLeftServiceServer interface {
	// 分页获取被踢用户
	GetChannelKickedByLimit(context.Context, *GetChannelKickedByLimitReq) (*GetChannelKickedByLimitReply, error)
	// 获取单个被踢用户
	GetChannelKeckedLeft(context.Context, *GetChannelKeckedLeftReq) (*GetChannelKeckedLeftReply, error)
	// 设置被踢用户信息到缓存 以存在的直接替换
	AddLeftParticipant(context.Context, *AddLeftParticipantReq) (*AddLeftParticipantReply, error)
	// 删除缓存中的被踢用户信息
	DelLeftParticipant(context.Context, *DelLeftParticipantReq) (*DelLeftParticipantReply, error)
	// 删除缓存中的群Id对应的所有被踢用户信息
	DelAllLeftChatParticipant(context.Context, *DelAllLeftChatParticipantReq) (*DelAllLeftChatParticipantReply, error)
	// 搜索群成员
	SearchKickedParticipant(context.Context, *SearchKickedParticipantReq) (*SearchKickedParticipantReply, error)
	mustEmbedUnimplementedKickedLeftServiceServer()
}

// UnimplementedKickedLeftServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKickedLeftServiceServer struct {
}

func (UnimplementedKickedLeftServiceServer) GetChannelKickedByLimit(context.Context, *GetChannelKickedByLimitReq) (*GetChannelKickedByLimitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelKickedByLimit not implemented")
}
func (UnimplementedKickedLeftServiceServer) GetChannelKeckedLeft(context.Context, *GetChannelKeckedLeftReq) (*GetChannelKeckedLeftReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelKeckedLeft not implemented")
}
func (UnimplementedKickedLeftServiceServer) AddLeftParticipant(context.Context, *AddLeftParticipantReq) (*AddLeftParticipantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLeftParticipant not implemented")
}
func (UnimplementedKickedLeftServiceServer) DelLeftParticipant(context.Context, *DelLeftParticipantReq) (*DelLeftParticipantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelLeftParticipant not implemented")
}
func (UnimplementedKickedLeftServiceServer) DelAllLeftChatParticipant(context.Context, *DelAllLeftChatParticipantReq) (*DelAllLeftChatParticipantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllLeftChatParticipant not implemented")
}
func (UnimplementedKickedLeftServiceServer) SearchKickedParticipant(context.Context, *SearchKickedParticipantReq) (*SearchKickedParticipantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchKickedParticipant not implemented")
}
func (UnimplementedKickedLeftServiceServer) mustEmbedUnimplementedKickedLeftServiceServer() {}

// UnsafeKickedLeftServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KickedLeftServiceServer will
// result in compilation errors.
type UnsafeKickedLeftServiceServer interface {
	mustEmbedUnimplementedKickedLeftServiceServer()
}

func RegisterKickedLeftServiceServer(s grpc.ServiceRegistrar, srv KickedLeftServiceServer) {
	s.RegisterService(&KickedLeftService_ServiceDesc, srv)
}

func _KickedLeftService_GetChannelKickedByLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelKickedByLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KickedLeftServiceServer).GetChannelKickedByLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.KickedLeftService/GetChannelKickedByLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KickedLeftServiceServer).GetChannelKickedByLimit(ctx, req.(*GetChannelKickedByLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KickedLeftService_GetChannelKeckedLeft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelKeckedLeftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KickedLeftServiceServer).GetChannelKeckedLeft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.KickedLeftService/GetChannelKeckedLeft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KickedLeftServiceServer).GetChannelKeckedLeft(ctx, req.(*GetChannelKeckedLeftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KickedLeftService_AddLeftParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLeftParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KickedLeftServiceServer).AddLeftParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.KickedLeftService/AddLeftParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KickedLeftServiceServer).AddLeftParticipant(ctx, req.(*AddLeftParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KickedLeftService_DelLeftParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelLeftParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KickedLeftServiceServer).DelLeftParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.KickedLeftService/DelLeftParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KickedLeftServiceServer).DelLeftParticipant(ctx, req.(*DelLeftParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KickedLeftService_DelAllLeftChatParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllLeftChatParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KickedLeftServiceServer).DelAllLeftChatParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.KickedLeftService/DelAllLeftChatParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KickedLeftServiceServer).DelAllLeftChatParticipant(ctx, req.(*DelAllLeftChatParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KickedLeftService_SearchKickedParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchKickedParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KickedLeftServiceServer).SearchKickedParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.KickedLeftService/SearchKickedParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KickedLeftServiceServer).SearchKickedParticipant(ctx, req.(*SearchKickedParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

// KickedLeftService_ServiceDesc is the grpc.ServiceDesc for KickedLeftService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KickedLeftService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "groupservice.KickedLeftService",
	HandlerType: (*KickedLeftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannelKickedByLimit",
			Handler:    _KickedLeftService_GetChannelKickedByLimit_Handler,
		},
		{
			MethodName: "GetChannelKeckedLeft",
			Handler:    _KickedLeftService_GetChannelKeckedLeft_Handler,
		},
		{
			MethodName: "AddLeftParticipant",
			Handler:    _KickedLeftService_AddLeftParticipant_Handler,
		},
		{
			MethodName: "DelLeftParticipant",
			Handler:    _KickedLeftService_DelLeftParticipant_Handler,
		},
		{
			MethodName: "DelAllLeftChatParticipant",
			Handler:    _KickedLeftService_DelAllLeftChatParticipant_Handler,
		},
		{
			MethodName: "SearchKickedParticipant",
			Handler:    _KickedLeftService_SearchKickedParticipant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kickedleftinfoserver.proto",
}
