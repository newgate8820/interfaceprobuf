// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: activeuserinfoserver.proto

package groupservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActiveUserInfoServiceClient is the client API for ActiveUserInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActiveUserInfoServiceClient interface {
	// 激活用户
	ActivateUser(ctx context.Context, in *ActivateUserReq, opts ...grpc.CallOption) (*ActivateUserReply, error)
	// 获取两个用户相同的群数量
	GetTwoUserChatsCount(ctx context.Context, in *GetTwoUserChatsCountReq, opts ...grpc.CallOption) (*GetTwoUserChatsCountReply, error)
	// 获取两个用户相同的群
	GetTwoUserChats(ctx context.Context, in *GetTwoUserChatsReq, opts ...grpc.CallOption) (*GetTwoUserChatsReply, error)
	// 根据群名称搜索自己所在的群
	SearchSelfGroup(ctx context.Context, in *SearchSelfGroupReq, opts ...grpc.CallOption) (*SearchSelfGroupReply, error)
	// 判断传入的哪些用户在线
	CheckOnlineUsers(ctx context.Context, in *CheckOnlineUsersReq, opts ...grpc.CallOption) (*CheckOnlineUsersReply, error)
	// 根据传入ID搜索用户
	SearchUsersByStr(ctx context.Context, in *SearchUsersByStrReq, opts ...grpc.CallOption) (*SearchUsersByStrReply, error)
}

type activeUserInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActiveUserInfoServiceClient(cc grpc.ClientConnInterface) ActiveUserInfoServiceClient {
	return &activeUserInfoServiceClient{cc}
}

func (c *activeUserInfoServiceClient) ActivateUser(ctx context.Context, in *ActivateUserReq, opts ...grpc.CallOption) (*ActivateUserReply, error) {
	out := new(ActivateUserReply)
	err := c.cc.Invoke(ctx, "/groupservice.ActiveUserInfoService/ActivateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserInfoServiceClient) GetTwoUserChatsCount(ctx context.Context, in *GetTwoUserChatsCountReq, opts ...grpc.CallOption) (*GetTwoUserChatsCountReply, error) {
	out := new(GetTwoUserChatsCountReply)
	err := c.cc.Invoke(ctx, "/groupservice.ActiveUserInfoService/GetTwoUserChatsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserInfoServiceClient) GetTwoUserChats(ctx context.Context, in *GetTwoUserChatsReq, opts ...grpc.CallOption) (*GetTwoUserChatsReply, error) {
	out := new(GetTwoUserChatsReply)
	err := c.cc.Invoke(ctx, "/groupservice.ActiveUserInfoService/GetTwoUserChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserInfoServiceClient) SearchSelfGroup(ctx context.Context, in *SearchSelfGroupReq, opts ...grpc.CallOption) (*SearchSelfGroupReply, error) {
	out := new(SearchSelfGroupReply)
	err := c.cc.Invoke(ctx, "/groupservice.ActiveUserInfoService/SearchSelfGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserInfoServiceClient) CheckOnlineUsers(ctx context.Context, in *CheckOnlineUsersReq, opts ...grpc.CallOption) (*CheckOnlineUsersReply, error) {
	out := new(CheckOnlineUsersReply)
	err := c.cc.Invoke(ctx, "/groupservice.ActiveUserInfoService/CheckOnlineUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserInfoServiceClient) SearchUsersByStr(ctx context.Context, in *SearchUsersByStrReq, opts ...grpc.CallOption) (*SearchUsersByStrReply, error) {
	out := new(SearchUsersByStrReply)
	err := c.cc.Invoke(ctx, "/groupservice.ActiveUserInfoService/SearchUsersByStr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActiveUserInfoServiceServer is the server API for ActiveUserInfoService service.
// All implementations must embed UnimplementedActiveUserInfoServiceServer
// for forward compatibility
type ActiveUserInfoServiceServer interface {
	// 激活用户
	ActivateUser(context.Context, *ActivateUserReq) (*ActivateUserReply, error)
	// 获取两个用户相同的群数量
	GetTwoUserChatsCount(context.Context, *GetTwoUserChatsCountReq) (*GetTwoUserChatsCountReply, error)
	// 获取两个用户相同的群
	GetTwoUserChats(context.Context, *GetTwoUserChatsReq) (*GetTwoUserChatsReply, error)
	// 根据群名称搜索自己所在的群
	SearchSelfGroup(context.Context, *SearchSelfGroupReq) (*SearchSelfGroupReply, error)
	// 判断传入的哪些用户在线
	CheckOnlineUsers(context.Context, *CheckOnlineUsersReq) (*CheckOnlineUsersReply, error)
	// 根据传入ID搜索用户
	SearchUsersByStr(context.Context, *SearchUsersByStrReq) (*SearchUsersByStrReply, error)
	mustEmbedUnimplementedActiveUserInfoServiceServer()
}

// UnimplementedActiveUserInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActiveUserInfoServiceServer struct {
}

func (UnimplementedActiveUserInfoServiceServer) ActivateUser(context.Context, *ActivateUserReq) (*ActivateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateUser not implemented")
}
func (UnimplementedActiveUserInfoServiceServer) GetTwoUserChatsCount(context.Context, *GetTwoUserChatsCountReq) (*GetTwoUserChatsCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwoUserChatsCount not implemented")
}
func (UnimplementedActiveUserInfoServiceServer) GetTwoUserChats(context.Context, *GetTwoUserChatsReq) (*GetTwoUserChatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwoUserChats not implemented")
}
func (UnimplementedActiveUserInfoServiceServer) SearchSelfGroup(context.Context, *SearchSelfGroupReq) (*SearchSelfGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSelfGroup not implemented")
}
func (UnimplementedActiveUserInfoServiceServer) CheckOnlineUsers(context.Context, *CheckOnlineUsersReq) (*CheckOnlineUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOnlineUsers not implemented")
}
func (UnimplementedActiveUserInfoServiceServer) SearchUsersByStr(context.Context, *SearchUsersByStrReq) (*SearchUsersByStrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsersByStr not implemented")
}
func (UnimplementedActiveUserInfoServiceServer) mustEmbedUnimplementedActiveUserInfoServiceServer() {}

// UnsafeActiveUserInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActiveUserInfoServiceServer will
// result in compilation errors.
type UnsafeActiveUserInfoServiceServer interface {
	mustEmbedUnimplementedActiveUserInfoServiceServer()
}

func RegisterActiveUserInfoServiceServer(s grpc.ServiceRegistrar, srv ActiveUserInfoServiceServer) {
	s.RegisterService(&ActiveUserInfoService_ServiceDesc, srv)
}

func _ActiveUserInfoService_ActivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserInfoServiceServer).ActivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.ActiveUserInfoService/ActivateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserInfoServiceServer).ActivateUser(ctx, req.(*ActivateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserInfoService_GetTwoUserChatsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwoUserChatsCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserInfoServiceServer).GetTwoUserChatsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.ActiveUserInfoService/GetTwoUserChatsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserInfoServiceServer).GetTwoUserChatsCount(ctx, req.(*GetTwoUserChatsCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserInfoService_GetTwoUserChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwoUserChatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserInfoServiceServer).GetTwoUserChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.ActiveUserInfoService/GetTwoUserChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserInfoServiceServer).GetTwoUserChats(ctx, req.(*GetTwoUserChatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserInfoService_SearchSelfGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSelfGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserInfoServiceServer).SearchSelfGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.ActiveUserInfoService/SearchSelfGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserInfoServiceServer).SearchSelfGroup(ctx, req.(*SearchSelfGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserInfoService_CheckOnlineUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOnlineUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserInfoServiceServer).CheckOnlineUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.ActiveUserInfoService/CheckOnlineUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserInfoServiceServer).CheckOnlineUsers(ctx, req.(*CheckOnlineUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserInfoService_SearchUsersByStr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersByStrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserInfoServiceServer).SearchUsersByStr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.ActiveUserInfoService/SearchUsersByStr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserInfoServiceServer).SearchUsersByStr(ctx, req.(*SearchUsersByStrReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ActiveUserInfoService_ServiceDesc is the grpc.ServiceDesc for ActiveUserInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActiveUserInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "groupservice.ActiveUserInfoService",
	HandlerType: (*ActiveUserInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivateUser",
			Handler:    _ActiveUserInfoService_ActivateUser_Handler,
		},
		{
			MethodName: "GetTwoUserChatsCount",
			Handler:    _ActiveUserInfoService_GetTwoUserChatsCount_Handler,
		},
		{
			MethodName: "GetTwoUserChats",
			Handler:    _ActiveUserInfoService_GetTwoUserChats_Handler,
		},
		{
			MethodName: "SearchSelfGroup",
			Handler:    _ActiveUserInfoService_SearchSelfGroup_Handler,
		},
		{
			MethodName: "CheckOnlineUsers",
			Handler:    _ActiveUserInfoService_CheckOnlineUsers_Handler,
		},
		{
			MethodName: "SearchUsersByStr",
			Handler:    _ActiveUserInfoService_SearchUsersByStr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activeuserinfoserver.proto",
}
