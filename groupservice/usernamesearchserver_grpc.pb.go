// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: usernamesearchserver.proto

package groupservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsernameSearchServiceClient is the client API for UsernameSearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsernameSearchServiceClient interface {
	// 更新Username信息
	UpdateUsername(ctx context.Context, in *UpdateUsernameReq, opts ...grpc.CallOption) (*UpdateUsernameReply, error)
	// 完全匹配username
	GetUsername(ctx context.Context, in *GetUsernameReq, opts ...grpc.CallOption) (*GetUsernameReply, error)
	// 模糊搜索username 和 自己所在的群
	SearchUsername(ctx context.Context, in *SearchUsernameReq, opts ...grpc.CallOption) (*SearchUsernameReply, error)
}

type usernameSearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsernameSearchServiceClient(cc grpc.ClientConnInterface) UsernameSearchServiceClient {
	return &usernameSearchServiceClient{cc}
}

func (c *usernameSearchServiceClient) UpdateUsername(ctx context.Context, in *UpdateUsernameReq, opts ...grpc.CallOption) (*UpdateUsernameReply, error) {
	out := new(UpdateUsernameReply)
	err := c.cc.Invoke(ctx, "/groupservice.UsernameSearchService/UpdateUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usernameSearchServiceClient) GetUsername(ctx context.Context, in *GetUsernameReq, opts ...grpc.CallOption) (*GetUsernameReply, error) {
	out := new(GetUsernameReply)
	err := c.cc.Invoke(ctx, "/groupservice.UsernameSearchService/GetUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usernameSearchServiceClient) SearchUsername(ctx context.Context, in *SearchUsernameReq, opts ...grpc.CallOption) (*SearchUsernameReply, error) {
	out := new(SearchUsernameReply)
	err := c.cc.Invoke(ctx, "/groupservice.UsernameSearchService/SearchUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsernameSearchServiceServer is the server API for UsernameSearchService service.
// All implementations must embed UnimplementedUsernameSearchServiceServer
// for forward compatibility
type UsernameSearchServiceServer interface {
	// 更新Username信息
	UpdateUsername(context.Context, *UpdateUsernameReq) (*UpdateUsernameReply, error)
	// 完全匹配username
	GetUsername(context.Context, *GetUsernameReq) (*GetUsernameReply, error)
	// 模糊搜索username 和 自己所在的群
	SearchUsername(context.Context, *SearchUsernameReq) (*SearchUsernameReply, error)
	mustEmbedUnimplementedUsernameSearchServiceServer()
}

// UnimplementedUsernameSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsernameSearchServiceServer struct {
}

func (UnimplementedUsernameSearchServiceServer) UpdateUsername(context.Context, *UpdateUsernameReq) (*UpdateUsernameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsername not implemented")
}
func (UnimplementedUsernameSearchServiceServer) GetUsername(context.Context, *GetUsernameReq) (*GetUsernameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsername not implemented")
}
func (UnimplementedUsernameSearchServiceServer) SearchUsername(context.Context, *SearchUsernameReq) (*SearchUsernameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsername not implemented")
}
func (UnimplementedUsernameSearchServiceServer) mustEmbedUnimplementedUsernameSearchServiceServer() {}

// UnsafeUsernameSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsernameSearchServiceServer will
// result in compilation errors.
type UnsafeUsernameSearchServiceServer interface {
	mustEmbedUnimplementedUsernameSearchServiceServer()
}

func RegisterUsernameSearchServiceServer(s grpc.ServiceRegistrar, srv UsernameSearchServiceServer) {
	s.RegisterService(&UsernameSearchService_ServiceDesc, srv)
}

func _UsernameSearchService_UpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsernameSearchServiceServer).UpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.UsernameSearchService/UpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsernameSearchServiceServer).UpdateUsername(ctx, req.(*UpdateUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsernameSearchService_GetUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsernameSearchServiceServer).GetUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.UsernameSearchService/GetUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsernameSearchServiceServer).GetUsername(ctx, req.(*GetUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsernameSearchService_SearchUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsernameSearchServiceServer).SearchUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.UsernameSearchService/SearchUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsernameSearchServiceServer).SearchUsername(ctx, req.(*SearchUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UsernameSearchService_ServiceDesc is the grpc.ServiceDesc for UsernameSearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsernameSearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "groupservice.UsernameSearchService",
	HandlerType: (*UsernameSearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUsername",
			Handler:    _UsernameSearchService_UpdateUsername_Handler,
		},
		{
			MethodName: "GetUsername",
			Handler:    _UsernameSearchService_GetUsername_Handler,
		},
		{
			MethodName: "SearchUsername",
			Handler:    _UsernameSearchService_SearchUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usernamesearchserver.proto",
}
