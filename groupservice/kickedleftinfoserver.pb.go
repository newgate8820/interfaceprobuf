// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/groupservice/kickedleftinfoserver.proto

package groupservice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 搜索被踢群成员
type SearchKickedParticipantReq struct {
	ChannelId int32  `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	SearchStr string `protobuf:"bytes,2,opt,name=SearchStr,proto3" json:"SearchStr,omitempty"`
	Limit     int32  `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *SearchKickedParticipantReq) Reset()         { *m = SearchKickedParticipantReq{} }
func (m *SearchKickedParticipantReq) String() string { return proto.CompactTextString(m) }
func (*SearchKickedParticipantReq) ProtoMessage()    {}
func (*SearchKickedParticipantReq) Descriptor() ([]byte, []int) {
	return fileDescriptorKickedleftinfoserver, []int{0}
}

func (m *SearchKickedParticipantReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *SearchKickedParticipantReq) GetSearchStr() string {
	if m != nil {
		return m.SearchStr
	}
	return ""
}

func (m *SearchKickedParticipantReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SearchKickedParticipantReply struct {
	Users     []*ChannelParticipants `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
	ErrorCode ActiveErrorCode        `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *SearchKickedParticipantReply) Reset()         { *m = SearchKickedParticipantReply{} }
func (m *SearchKickedParticipantReply) String() string { return proto.CompactTextString(m) }
func (*SearchKickedParticipantReply) ProtoMessage()    {}
func (*SearchKickedParticipantReply) Descriptor() ([]byte, []int) {
	return fileDescriptorKickedleftinfoserver, []int{1}
}

func (m *SearchKickedParticipantReply) GetUsers() []*ChannelParticipants {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *SearchKickedParticipantReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 分页获取被踢用户
type GetChannelKickedByLimitReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Offset    int32 `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit     int32 `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *GetChannelKickedByLimitReq) Reset()         { *m = GetChannelKickedByLimitReq{} }
func (m *GetChannelKickedByLimitReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelKickedByLimitReq) ProtoMessage()    {}
func (*GetChannelKickedByLimitReq) Descriptor() ([]byte, []int) {
	return fileDescriptorKickedleftinfoserver, []int{2}
}

func (m *GetChannelKickedByLimitReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelKickedByLimitReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetChannelKickedByLimitReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetChannelKickedByLimitReply struct {
	Users     []*ChannelKickedLeft `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
	ErrorCode ActiveErrorCode      `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *GetChannelKickedByLimitReply) Reset()         { *m = GetChannelKickedByLimitReply{} }
func (m *GetChannelKickedByLimitReply) String() string { return proto.CompactTextString(m) }
func (*GetChannelKickedByLimitReply) ProtoMessage()    {}
func (*GetChannelKickedByLimitReply) Descriptor() ([]byte, []int) {
	return fileDescriptorKickedleftinfoserver, []int{3}
}

func (m *GetChannelKickedByLimitReply) GetUsers() []*ChannelKickedLeft {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetChannelKickedByLimitReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 获取单个被踢用户
type GetChannelKeckedLeftReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *GetChannelKeckedLeftReq) Reset()         { *m = GetChannelKeckedLeftReq{} }
func (m *GetChannelKeckedLeftReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelKeckedLeftReq) ProtoMessage()    {}
func (*GetChannelKeckedLeftReq) Descriptor() ([]byte, []int) {
	return fileDescriptorKickedleftinfoserver, []int{4}
}

func (m *GetChannelKeckedLeftReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelKeckedLeftReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetChannelKeckedLeftReply struct {
	UserInfo  *ChannelKickedLeft `protobuf:"bytes,1,opt,name=UserInfo" json:"UserInfo,omitempty"`
	ErrorCode ActiveErrorCode    `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *GetChannelKeckedLeftReply) Reset()         { *m = GetChannelKeckedLeftReply{} }
func (m *GetChannelKeckedLeftReply) String() string { return proto.CompactTextString(m) }
func (*GetChannelKeckedLeftReply) ProtoMessage()    {}
func (*GetChannelKeckedLeftReply) Descriptor() ([]byte, []int) {
	return fileDescriptorKickedleftinfoserver, []int{5}
}

func (m *GetChannelKeckedLeftReply) GetUserInfo() *ChannelKickedLeft {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *GetChannelKeckedLeftReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 设置被踢用户信息到缓存 以存在的直接替换
type AddLeftParticipantReq struct {
	UserInfo *ChannelKickedLeft `protobuf:"bytes,1,opt,name=UserInfo" json:"UserInfo,omitempty"`
}

func (m *AddLeftParticipantReq) Reset()         { *m = AddLeftParticipantReq{} }
func (m *AddLeftParticipantReq) String() string { return proto.CompactTextString(m) }
func (*AddLeftParticipantReq) ProtoMessage()    {}
func (*AddLeftParticipantReq) Descriptor() ([]byte, []int) {
	return fileDescriptorKickedleftinfoserver, []int{6}
}

func (m *AddLeftParticipantReq) GetUserInfo() *ChannelKickedLeft {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type AddLeftParticipantReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *AddLeftParticipantReply) Reset()         { *m = AddLeftParticipantReply{} }
func (m *AddLeftParticipantReply) String() string { return proto.CompactTextString(m) }
func (*AddLeftParticipantReply) ProtoMessage()    {}
func (*AddLeftParticipantReply) Descriptor() ([]byte, []int) {
	return fileDescriptorKickedleftinfoserver, []int{7}
}

func (m *AddLeftParticipantReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 删除缓存中的被踢用户信息
type DelLeftParticipantReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *DelLeftParticipantReq) Reset()         { *m = DelLeftParticipantReq{} }
func (m *DelLeftParticipantReq) String() string { return proto.CompactTextString(m) }
func (*DelLeftParticipantReq) ProtoMessage()    {}
func (*DelLeftParticipantReq) Descriptor() ([]byte, []int) {
	return fileDescriptorKickedleftinfoserver, []int{8}
}

func (m *DelLeftParticipantReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *DelLeftParticipantReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type DelLeftParticipantReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *DelLeftParticipantReply) Reset()         { *m = DelLeftParticipantReply{} }
func (m *DelLeftParticipantReply) String() string { return proto.CompactTextString(m) }
func (*DelLeftParticipantReply) ProtoMessage()    {}
func (*DelLeftParticipantReply) Descriptor() ([]byte, []int) {
	return fileDescriptorKickedleftinfoserver, []int{9}
}

func (m *DelLeftParticipantReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 删除缓存中的群Id对应的所有被踢用户信息
type DelAllLeftChatParticipantReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
}

func (m *DelAllLeftChatParticipantReq) Reset()         { *m = DelAllLeftChatParticipantReq{} }
func (m *DelAllLeftChatParticipantReq) String() string { return proto.CompactTextString(m) }
func (*DelAllLeftChatParticipantReq) ProtoMessage()    {}
func (*DelAllLeftChatParticipantReq) Descriptor() ([]byte, []int) {
	return fileDescriptorKickedleftinfoserver, []int{10}
}

func (m *DelAllLeftChatParticipantReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

type DelAllLeftChatParticipantReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *DelAllLeftChatParticipantReply) Reset()         { *m = DelAllLeftChatParticipantReply{} }
func (m *DelAllLeftChatParticipantReply) String() string { return proto.CompactTextString(m) }
func (*DelAllLeftChatParticipantReply) ProtoMessage()    {}
func (*DelAllLeftChatParticipantReply) Descriptor() ([]byte, []int) {
	return fileDescriptorKickedleftinfoserver, []int{11}
}

func (m *DelAllLeftChatParticipantReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

func init() {
	proto.RegisterType((*SearchKickedParticipantReq)(nil), "groupservice.SearchKickedParticipantReq")
	proto.RegisterType((*SearchKickedParticipantReply)(nil), "groupservice.SearchKickedParticipantReply")
	proto.RegisterType((*GetChannelKickedByLimitReq)(nil), "groupservice.GetChannelKickedByLimitReq")
	proto.RegisterType((*GetChannelKickedByLimitReply)(nil), "groupservice.GetChannelKickedByLimitReply")
	proto.RegisterType((*GetChannelKeckedLeftReq)(nil), "groupservice.GetChannelKeckedLeftReq")
	proto.RegisterType((*GetChannelKeckedLeftReply)(nil), "groupservice.GetChannelKeckedLeftReply")
	proto.RegisterType((*AddLeftParticipantReq)(nil), "groupservice.AddLeftParticipantReq")
	proto.RegisterType((*AddLeftParticipantReply)(nil), "groupservice.AddLeftParticipantReply")
	proto.RegisterType((*DelLeftParticipantReq)(nil), "groupservice.DelLeftParticipantReq")
	proto.RegisterType((*DelLeftParticipantReply)(nil), "groupservice.DelLeftParticipantReply")
	proto.RegisterType((*DelAllLeftChatParticipantReq)(nil), "groupservice.DelAllLeftChatParticipantReq")
	proto.RegisterType((*DelAllLeftChatParticipantReply)(nil), "groupservice.DelAllLeftChatParticipantReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KickedLeftService service

type KickedLeftServiceClient interface {
	// 分页获取被踢用户
	GetChannelKickedByLimit(ctx context.Context, in *GetChannelKickedByLimitReq, opts ...grpc.CallOption) (*GetChannelKickedByLimitReply, error)
	// 获取单个被踢用户
	GetChannelKeckedLeft(ctx context.Context, in *GetChannelKeckedLeftReq, opts ...grpc.CallOption) (*GetChannelKeckedLeftReply, error)
	// 设置被踢用户信息到缓存 以存在的直接替换
	AddLeftParticipant(ctx context.Context, in *AddLeftParticipantReq, opts ...grpc.CallOption) (*AddLeftParticipantReply, error)
	// 删除缓存中的被踢用户信息
	DelLeftParticipant(ctx context.Context, in *DelLeftParticipantReq, opts ...grpc.CallOption) (*DelLeftParticipantReply, error)
	// 删除缓存中的群Id对应的所有被踢用户信息
	DelAllLeftChatParticipant(ctx context.Context, in *DelAllLeftChatParticipantReq, opts ...grpc.CallOption) (*DelAllLeftChatParticipantReply, error)
	// 搜索群成员
	SearchKickedParticipant(ctx context.Context, in *SearchKickedParticipantReq, opts ...grpc.CallOption) (*SearchKickedParticipantReply, error)
}

type kickedLeftServiceClient struct {
	cc *grpc.ClientConn
}

func NewKickedLeftServiceClient(cc *grpc.ClientConn) KickedLeftServiceClient {
	return &kickedLeftServiceClient{cc}
}

func (c *kickedLeftServiceClient) GetChannelKickedByLimit(ctx context.Context, in *GetChannelKickedByLimitReq, opts ...grpc.CallOption) (*GetChannelKickedByLimitReply, error) {
	out := new(GetChannelKickedByLimitReply)
	err := grpc.Invoke(ctx, "/groupservice.KickedLeftService/GetChannelKickedByLimit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kickedLeftServiceClient) GetChannelKeckedLeft(ctx context.Context, in *GetChannelKeckedLeftReq, opts ...grpc.CallOption) (*GetChannelKeckedLeftReply, error) {
	out := new(GetChannelKeckedLeftReply)
	err := grpc.Invoke(ctx, "/groupservice.KickedLeftService/GetChannelKeckedLeft", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kickedLeftServiceClient) AddLeftParticipant(ctx context.Context, in *AddLeftParticipantReq, opts ...grpc.CallOption) (*AddLeftParticipantReply, error) {
	out := new(AddLeftParticipantReply)
	err := grpc.Invoke(ctx, "/groupservice.KickedLeftService/AddLeftParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kickedLeftServiceClient) DelLeftParticipant(ctx context.Context, in *DelLeftParticipantReq, opts ...grpc.CallOption) (*DelLeftParticipantReply, error) {
	out := new(DelLeftParticipantReply)
	err := grpc.Invoke(ctx, "/groupservice.KickedLeftService/DelLeftParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kickedLeftServiceClient) DelAllLeftChatParticipant(ctx context.Context, in *DelAllLeftChatParticipantReq, opts ...grpc.CallOption) (*DelAllLeftChatParticipantReply, error) {
	out := new(DelAllLeftChatParticipantReply)
	err := grpc.Invoke(ctx, "/groupservice.KickedLeftService/DelAllLeftChatParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kickedLeftServiceClient) SearchKickedParticipant(ctx context.Context, in *SearchKickedParticipantReq, opts ...grpc.CallOption) (*SearchKickedParticipantReply, error) {
	out := new(SearchKickedParticipantReply)
	err := grpc.Invoke(ctx, "/groupservice.KickedLeftService/SearchKickedParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KickedLeftService service

type KickedLeftServiceServer interface {
	// 分页获取被踢用户
	GetChannelKickedByLimit(context.Context, *GetChannelKickedByLimitReq) (*GetChannelKickedByLimitReply, error)
	// 获取单个被踢用户
	GetChannelKeckedLeft(context.Context, *GetChannelKeckedLeftReq) (*GetChannelKeckedLeftReply, error)
	// 设置被踢用户信息到缓存 以存在的直接替换
	AddLeftParticipant(context.Context, *AddLeftParticipantReq) (*AddLeftParticipantReply, error)
	// 删除缓存中的被踢用户信息
	DelLeftParticipant(context.Context, *DelLeftParticipantReq) (*DelLeftParticipantReply, error)
	// 删除缓存中的群Id对应的所有被踢用户信息
	DelAllLeftChatParticipant(context.Context, *DelAllLeftChatParticipantReq) (*DelAllLeftChatParticipantReply, error)
	// 搜索群成员
	SearchKickedParticipant(context.Context, *SearchKickedParticipantReq) (*SearchKickedParticipantReply, error)
}

func RegisterKickedLeftServiceServer(s *grpc.Server, srv KickedLeftServiceServer) {
	s.RegisterService(&_KickedLeftService_serviceDesc, srv)
}

func _KickedLeftService_GetChannelKickedByLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelKickedByLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KickedLeftServiceServer).GetChannelKickedByLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.KickedLeftService/GetChannelKickedByLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KickedLeftServiceServer).GetChannelKickedByLimit(ctx, req.(*GetChannelKickedByLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KickedLeftService_GetChannelKeckedLeft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelKeckedLeftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KickedLeftServiceServer).GetChannelKeckedLeft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.KickedLeftService/GetChannelKeckedLeft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KickedLeftServiceServer).GetChannelKeckedLeft(ctx, req.(*GetChannelKeckedLeftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KickedLeftService_AddLeftParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLeftParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KickedLeftServiceServer).AddLeftParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.KickedLeftService/AddLeftParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KickedLeftServiceServer).AddLeftParticipant(ctx, req.(*AddLeftParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KickedLeftService_DelLeftParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelLeftParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KickedLeftServiceServer).DelLeftParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.KickedLeftService/DelLeftParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KickedLeftServiceServer).DelLeftParticipant(ctx, req.(*DelLeftParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KickedLeftService_DelAllLeftChatParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllLeftChatParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KickedLeftServiceServer).DelAllLeftChatParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.KickedLeftService/DelAllLeftChatParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KickedLeftServiceServer).DelAllLeftChatParticipant(ctx, req.(*DelAllLeftChatParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KickedLeftService_SearchKickedParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchKickedParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KickedLeftServiceServer).SearchKickedParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.KickedLeftService/SearchKickedParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KickedLeftServiceServer).SearchKickedParticipant(ctx, req.(*SearchKickedParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _KickedLeftService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "groupservice.KickedLeftService",
	HandlerType: (*KickedLeftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannelKickedByLimit",
			Handler:    _KickedLeftService_GetChannelKickedByLimit_Handler,
		},
		{
			MethodName: "GetChannelKeckedLeft",
			Handler:    _KickedLeftService_GetChannelKeckedLeft_Handler,
		},
		{
			MethodName: "AddLeftParticipant",
			Handler:    _KickedLeftService_AddLeftParticipant_Handler,
		},
		{
			MethodName: "DelLeftParticipant",
			Handler:    _KickedLeftService_DelLeftParticipant_Handler,
		},
		{
			MethodName: "DelAllLeftChatParticipant",
			Handler:    _KickedLeftService_DelAllLeftChatParticipant_Handler,
		},
		{
			MethodName: "SearchKickedParticipant",
			Handler:    _KickedLeftService_SearchKickedParticipant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/groupservice/kickedleftinfoserver.proto",
}

func (m *SearchKickedParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchKickedParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.SearchStr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(len(m.SearchStr)))
		i += copy(dAtA[i:], m.SearchStr)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *SearchKickedParticipantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchKickedParticipantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetChannelKickedByLimitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelKickedByLimitReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *GetChannelKickedByLimitReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelKickedByLimitReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetChannelKeckedLeftReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelKeckedLeftReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetChannelKeckedLeftReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelKeckedLeftReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.UserInfo.Size()))
		n1, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *AddLeftParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLeftParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.UserInfo.Size()))
		n2, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AddLeftParticipantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLeftParticipantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *DelLeftParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelLeftParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *DelLeftParticipantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelLeftParticipantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *DelAllLeftChatParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelAllLeftChatParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.ChannelId))
	}
	return i, nil
}

func (m *DelAllLeftChatParticipantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelAllLeftChatParticipantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKickedleftinfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func encodeVarintKickedleftinfoserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SearchKickedParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.ChannelId))
	}
	l = len(m.SearchStr)
	if l > 0 {
		n += 1 + l + sovKickedleftinfoserver(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.Limit))
	}
	return n
}

func (m *SearchKickedParticipantReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovKickedleftinfoserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetChannelKickedByLimitReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.ChannelId))
	}
	if m.Offset != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.Limit))
	}
	return n
}

func (m *GetChannelKickedByLimitReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovKickedleftinfoserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetChannelKeckedLeftReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *GetChannelKeckedLeftReply) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovKickedleftinfoserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *AddLeftParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovKickedleftinfoserver(uint64(l))
	}
	return n
}

func (m *AddLeftParticipantReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *DelLeftParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.UserId))
	}
	return n
}

func (m *DelLeftParticipantReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *DelAllLeftChatParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.ChannelId))
	}
	return n
}

func (m *DelAllLeftChatParticipantReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovKickedleftinfoserver(uint64(m.ErrorCode))
	}
	return n
}

func sovKickedleftinfoserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozKickedleftinfoserver(x uint64) (n int) {
	return sovKickedleftinfoserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SearchKickedParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKickedleftinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchKickedParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchKickedParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKickedleftinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchKickedParticipantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKickedleftinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchKickedParticipantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchKickedParticipantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &ChannelParticipants{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKickedleftinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelKickedByLimitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKickedleftinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelKickedByLimitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelKickedByLimitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKickedleftinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelKickedByLimitReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKickedleftinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelKickedByLimitReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelKickedByLimitReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &ChannelKickedLeft{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKickedleftinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelKeckedLeftReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKickedleftinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelKeckedLeftReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelKeckedLeftReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKickedleftinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelKeckedLeftReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKickedleftinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelKeckedLeftReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelKeckedLeftReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &ChannelKickedLeft{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKickedleftinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLeftParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKickedleftinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLeftParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLeftParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &ChannelKickedLeft{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKickedleftinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLeftParticipantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKickedleftinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLeftParticipantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLeftParticipantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKickedleftinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelLeftParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKickedleftinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelLeftParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelLeftParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKickedleftinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelLeftParticipantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKickedleftinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelLeftParticipantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelLeftParticipantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKickedleftinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelAllLeftChatParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKickedleftinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelAllLeftChatParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelAllLeftChatParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKickedleftinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelAllLeftChatParticipantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKickedleftinfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelAllLeftChatParticipantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelAllLeftChatParticipantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKickedleftinfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKickedleftinfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKickedleftinfoserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKickedleftinfoserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKickedleftinfoserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthKickedleftinfoserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowKickedleftinfoserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipKickedleftinfoserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthKickedleftinfoserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKickedleftinfoserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/groupservice/kickedleftinfoserver.proto", fileDescriptorKickedleftinfoserver)
}

var fileDescriptorKickedleftinfoserver = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xae, 0x99, 0x3a, 0xd1, 0xc3, 0x84, 0x84, 0xb5, 0xd1, 0x2e, 0x2a, 0xa5, 0x04, 0x4d, 0x54,
	0x13, 0x6a, 0xa5, 0x22, 0xc4, 0xc5, 0xb8, 0xe9, 0x5a, 0x84, 0x26, 0x8a, 0x86, 0x52, 0xd8, 0x1d,
	0x17, 0x69, 0xe2, 0x2c, 0xd6, 0xb2, 0x24, 0x75, 0xbc, 0xa1, 0xbe, 0x06, 0x82, 0x37, 0xe0, 0x61,
	0xb8, 0xe4, 0x11, 0x50, 0x9f, 0x04, 0xc5, 0x2e, 0x6d, 0x92, 0xc6, 0x5b, 0x4a, 0xb9, 0x74, 0x72,
	0xbe, 0x9f, 0x73, 0xf2, 0x39, 0x07, 0x86, 0xe7, 0x94, 0x7b, 0xe6, 0xb8, 0x6d, 0xb9, 0x26, 0x8f,
	0x08, 0xbb, 0x26, 0xac, 0x4d, 0x2f, 0x3b, 0xd4, 0xe7, 0x84, 0x39, 0xa6, 0x45, 0x42, 0x16, 0x8c,
	0xaf, 0x9c, 0xce, 0x39, 0x0b, 0xae, 0xc2, 0xf8, 0x35, 0xb5, 0x48, 0xe7, 0x82, 0x5a, 0x17, 0xc4,
	0xf6, 0x88, 0xc3, 0xa9, 0xef, 0x04, 0x73, 0x50, 0xc8, 0x02, 0x1e, 0xe0, 0x9d, 0x64, 0xa1, 0x36,
	0x58, 0x9f, 0x3b, 0x79, 0x90, 0x9c, 0xba, 0x0f, 0xda, 0x88, 0x98, 0xcc, 0x72, 0xdf, 0x09, 0xdd,
	0x0f, 0x26, 0xe3, 0xd4, 0xa2, 0xa1, 0xe9, 0x73, 0x83, 0x4c, 0x70, 0x1d, 0x2a, 0x7d, 0xd7, 0xf4,
	0x7d, 0xe2, 0x9d, 0xd8, 0x35, 0xd4, 0x44, 0xad, 0xb2, 0xb1, 0x7c, 0x10, 0xbf, 0x95, 0xd8, 0x11,
	0x67, 0xb5, 0x3b, 0x4d, 0xd4, 0xaa, 0x18, 0xcb, 0x07, 0x78, 0x17, 0xca, 0x43, 0x7a, 0x49, 0x79,
	0x6d, 0x4b, 0xe0, 0xe4, 0x41, 0xff, 0x86, 0xa0, 0xae, 0x14, 0x0c, 0xbd, 0x29, 0x7e, 0x05, 0xe5,
	0x4f, 0x11, 0x61, 0x51, 0x0d, 0x35, 0xb7, 0x5a, 0xf7, 0xba, 0x4f, 0xda, 0x29, 0xd3, 0x73, 0xf1,
	0x04, 0x2a, 0x32, 0x64, 0x3d, 0x3e, 0x82, 0xca, 0x1b, 0xc6, 0x02, 0xd6, 0x0f, 0x6c, 0x22, 0xdc,
	0xdc, 0xef, 0x3e, 0x4a, 0x83, 0x7b, 0x16, 0xa7, 0xd7, 0x64, 0x51, 0x64, 0x2c, 0xeb, 0x75, 0x17,
	0xb4, 0xb7, 0x84, 0xcf, 0xd9, 0xa5, 0xb3, 0xe3, 0xa9, 0x70, 0x7c, 0xfb, 0x18, 0x1e, 0xc2, 0xf6,
	0xa9, 0xe3, 0x44, 0x84, 0x0b, 0xd5, 0xb2, 0x31, 0x3f, 0x29, 0x06, 0xf0, 0x15, 0x41, 0x5d, 0x29,
	0x15, 0x0f, 0xe0, 0x65, 0x7a, 0x00, 0x8f, 0x73, 0x07, 0x20, 0x71, 0x43, 0xe2, 0xf0, 0xff, 0xd2,
	0xfe, 0x29, 0x54, 0x13, 0x9e, 0xc8, 0x82, 0xbb, 0x48, 0xef, 0xb1, 0xfc, 0x89, 0xfd, 0xb7, 0x77,
	0x79, 0xd2, 0xbf, 0x23, 0xd8, 0xcf, 0x67, 0x8c, 0x5b, 0x3c, 0x82, 0xbb, 0xa2, 0xce, 0x77, 0x02,
	0x41, 0x59, 0xa0, 0xcb, 0x05, 0x60, 0xb3, 0x46, 0x3f, 0xc2, 0x5e, 0xcf, 0x16, 0x8c, 0x99, 0xa4,
	0x6f, 0x62, 0x49, 0x3f, 0x83, 0x6a, 0x1e, 0xab, 0x6c, 0x35, 0xe1, 0x16, 0xad, 0xe9, 0xf6, 0x3d,
	0xec, 0x0d, 0x88, 0x97, 0xe3, 0xf6, 0xdf, 0x3e, 0xca, 0x19, 0x54, 0xf3, 0xe8, 0x36, 0xb6, 0xf9,
	0x1a, 0xea, 0x03, 0xe2, 0xf5, 0x3c, 0x41, 0xdd, 0x77, 0xcd, 0xb5, 0xdc, 0xea, 0x9f, 0xa1, 0x71,
	0x03, 0x7a, 0x53, 0x73, 0xdd, 0x1f, 0x65, 0x78, 0xb0, 0xfc, 0x68, 0x23, 0x09, 0xc0, 0x93, 0x54,
	0xe0, 0x93, 0x97, 0x10, 0xb7, 0xd2, 0xd4, 0xea, 0xdf, 0x82, 0x76, 0x58, 0xb0, 0x32, 0xf4, 0xa6,
	0x7a, 0x09, 0xbb, 0xb0, 0x9b, 0x77, 0x23, 0xf0, 0x81, 0x92, 0x25, 0x79, 0x0f, 0xb5, 0x67, 0x45,
	0xca, 0xa4, 0xd2, 0x18, 0xf0, 0x6a, 0x1c, 0xf1, 0xd3, 0xcc, 0xc8, 0xf2, 0xae, 0x81, 0x76, 0x70,
	0x7b, 0xd1, 0x42, 0x63, 0x35, 0x4b, 0x59, 0x8d, 0xdc, 0xf0, 0x66, 0x35, 0x14, 0x91, 0xd4, 0x4b,
	0xf8, 0x0b, 0xec, 0x2b, 0x93, 0x81, 0x0f, 0x57, 0x58, 0x94, 0x01, 0xd4, 0x9e, 0x17, 0xae, 0x95,
	0xc2, 0x13, 0xa8, 0x2a, 0x76, 0x54, 0x36, 0x1d, 0xea, 0xdd, 0x99, 0x4d, 0xc7, 0x4d, 0x4b, 0x4f,
	0x2f, 0x1d, 0xef, 0xfc, 0x9c, 0x35, 0xd0, 0xaf, 0x59, 0x03, 0xfd, 0x9e, 0x35, 0xd0, 0x78, 0x5b,
	0x2c, 0xe7, 0x17, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x33, 0x98, 0xe5, 0x57, 0x40, 0x08, 0x00,
	0x00,
}
