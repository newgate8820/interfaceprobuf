//protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/groupservice/kickedleftinfoserver.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: kickedleftinfoserver.proto

package groupservice

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 搜索被踢群成员
type SearchKickedParticipantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32  `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	SearchStr string `protobuf:"bytes,2,opt,name=SearchStr,proto3" json:"SearchStr,omitempty"`
	Limit     int32  `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *SearchKickedParticipantReq) Reset() {
	*x = SearchKickedParticipantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kickedleftinfoserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchKickedParticipantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchKickedParticipantReq) ProtoMessage() {}

func (x *SearchKickedParticipantReq) ProtoReflect() protoreflect.Message {
	mi := &file_kickedleftinfoserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchKickedParticipantReq.ProtoReflect.Descriptor instead.
func (*SearchKickedParticipantReq) Descriptor() ([]byte, []int) {
	return file_kickedleftinfoserver_proto_rawDescGZIP(), []int{0}
}

func (x *SearchKickedParticipantReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *SearchKickedParticipantReq) GetSearchStr() string {
	if x != nil {
		return x.SearchStr
	}
	return ""
}

func (x *SearchKickedParticipantReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchKickedParticipantReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users     []*ChannelParticipants `protobuf:"bytes,1,rep,name=Users,proto3" json:"Users,omitempty"`
	ErrorCode ActiveErrorCode        `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (x *SearchKickedParticipantReply) Reset() {
	*x = SearchKickedParticipantReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kickedleftinfoserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchKickedParticipantReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchKickedParticipantReply) ProtoMessage() {}

func (x *SearchKickedParticipantReply) ProtoReflect() protoreflect.Message {
	mi := &file_kickedleftinfoserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchKickedParticipantReply.ProtoReflect.Descriptor instead.
func (*SearchKickedParticipantReply) Descriptor() ([]byte, []int) {
	return file_kickedleftinfoserver_proto_rawDescGZIP(), []int{1}
}

func (x *SearchKickedParticipantReply) GetUsers() []*ChannelParticipants {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *SearchKickedParticipantReply) GetErrorCode() ActiveErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 分页获取被踢用户
type GetChannelKickedByLimitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Offset    int32 `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit     int32 `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetChannelKickedByLimitReq) Reset() {
	*x = GetChannelKickedByLimitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kickedleftinfoserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelKickedByLimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelKickedByLimitReq) ProtoMessage() {}

func (x *GetChannelKickedByLimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_kickedleftinfoserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelKickedByLimitReq.ProtoReflect.Descriptor instead.
func (*GetChannelKickedByLimitReq) Descriptor() ([]byte, []int) {
	return file_kickedleftinfoserver_proto_rawDescGZIP(), []int{2}
}

func (x *GetChannelKickedByLimitReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelKickedByLimitReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetChannelKickedByLimitReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetChannelKickedByLimitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users     []*ChannelKickedLeft `protobuf:"bytes,1,rep,name=Users,proto3" json:"Users,omitempty"`
	ErrorCode ActiveErrorCode      `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (x *GetChannelKickedByLimitReply) Reset() {
	*x = GetChannelKickedByLimitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kickedleftinfoserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelKickedByLimitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelKickedByLimitReply) ProtoMessage() {}

func (x *GetChannelKickedByLimitReply) ProtoReflect() protoreflect.Message {
	mi := &file_kickedleftinfoserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelKickedByLimitReply.ProtoReflect.Descriptor instead.
func (*GetChannelKickedByLimitReply) Descriptor() ([]byte, []int) {
	return file_kickedleftinfoserver_proto_rawDescGZIP(), []int{3}
}

func (x *GetChannelKickedByLimitReply) GetUsers() []*ChannelKickedLeft {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetChannelKickedByLimitReply) GetErrorCode() ActiveErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 获取单个被踢用户
type GetChannelKeckedLeftReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *GetChannelKeckedLeftReq) Reset() {
	*x = GetChannelKeckedLeftReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kickedleftinfoserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelKeckedLeftReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelKeckedLeftReq) ProtoMessage() {}

func (x *GetChannelKeckedLeftReq) ProtoReflect() protoreflect.Message {
	mi := &file_kickedleftinfoserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelKeckedLeftReq.ProtoReflect.Descriptor instead.
func (*GetChannelKeckedLeftReq) Descriptor() ([]byte, []int) {
	return file_kickedleftinfoserver_proto_rawDescGZIP(), []int{4}
}

func (x *GetChannelKeckedLeftReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelKeckedLeftReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetChannelKeckedLeftReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo  *ChannelKickedLeft `protobuf:"bytes,1,opt,name=UserInfo,proto3" json:"UserInfo,omitempty"`
	ErrorCode ActiveErrorCode    `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (x *GetChannelKeckedLeftReply) Reset() {
	*x = GetChannelKeckedLeftReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kickedleftinfoserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelKeckedLeftReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelKeckedLeftReply) ProtoMessage() {}

func (x *GetChannelKeckedLeftReply) ProtoReflect() protoreflect.Message {
	mi := &file_kickedleftinfoserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelKeckedLeftReply.ProtoReflect.Descriptor instead.
func (*GetChannelKeckedLeftReply) Descriptor() ([]byte, []int) {
	return file_kickedleftinfoserver_proto_rawDescGZIP(), []int{5}
}

func (x *GetChannelKeckedLeftReply) GetUserInfo() *ChannelKickedLeft {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *GetChannelKeckedLeftReply) GetErrorCode() ActiveErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 设置被踢用户信息到缓存 以存在的直接替换
type AddLeftParticipantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *ChannelKickedLeft `protobuf:"bytes,1,opt,name=UserInfo,proto3" json:"UserInfo,omitempty"`
}

func (x *AddLeftParticipantReq) Reset() {
	*x = AddLeftParticipantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kickedleftinfoserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLeftParticipantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLeftParticipantReq) ProtoMessage() {}

func (x *AddLeftParticipantReq) ProtoReflect() protoreflect.Message {
	mi := &file_kickedleftinfoserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLeftParticipantReq.ProtoReflect.Descriptor instead.
func (*AddLeftParticipantReq) Descriptor() ([]byte, []int) {
	return file_kickedleftinfoserver_proto_rawDescGZIP(), []int{6}
}

func (x *AddLeftParticipantReq) GetUserInfo() *ChannelKickedLeft {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type AddLeftParticipantReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (x *AddLeftParticipantReply) Reset() {
	*x = AddLeftParticipantReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kickedleftinfoserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLeftParticipantReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLeftParticipantReply) ProtoMessage() {}

func (x *AddLeftParticipantReply) ProtoReflect() protoreflect.Message {
	mi := &file_kickedleftinfoserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLeftParticipantReply.ProtoReflect.Descriptor instead.
func (*AddLeftParticipantReply) Descriptor() ([]byte, []int) {
	return file_kickedleftinfoserver_proto_rawDescGZIP(), []int{7}
}

func (x *AddLeftParticipantReply) GetErrorCode() ActiveErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 删除缓存中的被踢用户信息
type DelLeftParticipantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *DelLeftParticipantReq) Reset() {
	*x = DelLeftParticipantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kickedleftinfoserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelLeftParticipantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelLeftParticipantReq) ProtoMessage() {}

func (x *DelLeftParticipantReq) ProtoReflect() protoreflect.Message {
	mi := &file_kickedleftinfoserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelLeftParticipantReq.ProtoReflect.Descriptor instead.
func (*DelLeftParticipantReq) Descriptor() ([]byte, []int) {
	return file_kickedleftinfoserver_proto_rawDescGZIP(), []int{8}
}

func (x *DelLeftParticipantReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *DelLeftParticipantReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type DelLeftParticipantReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (x *DelLeftParticipantReply) Reset() {
	*x = DelLeftParticipantReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kickedleftinfoserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelLeftParticipantReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelLeftParticipantReply) ProtoMessage() {}

func (x *DelLeftParticipantReply) ProtoReflect() protoreflect.Message {
	mi := &file_kickedleftinfoserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelLeftParticipantReply.ProtoReflect.Descriptor instead.
func (*DelLeftParticipantReply) Descriptor() ([]byte, []int) {
	return file_kickedleftinfoserver_proto_rawDescGZIP(), []int{9}
}

func (x *DelLeftParticipantReply) GetErrorCode() ActiveErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 删除缓存中的群Id对应的所有被踢用户信息
type DelAllLeftChatParticipantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
}

func (x *DelAllLeftChatParticipantReq) Reset() {
	*x = DelAllLeftChatParticipantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kickedleftinfoserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAllLeftChatParticipantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAllLeftChatParticipantReq) ProtoMessage() {}

func (x *DelAllLeftChatParticipantReq) ProtoReflect() protoreflect.Message {
	mi := &file_kickedleftinfoserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAllLeftChatParticipantReq.ProtoReflect.Descriptor instead.
func (*DelAllLeftChatParticipantReq) Descriptor() ([]byte, []int) {
	return file_kickedleftinfoserver_proto_rawDescGZIP(), []int{10}
}

func (x *DelAllLeftChatParticipantReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type DelAllLeftChatParticipantReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (x *DelAllLeftChatParticipantReply) Reset() {
	*x = DelAllLeftChatParticipantReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kickedleftinfoserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAllLeftChatParticipantReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAllLeftChatParticipantReply) ProtoMessage() {}

func (x *DelAllLeftChatParticipantReply) ProtoReflect() protoreflect.Message {
	mi := &file_kickedleftinfoserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAllLeftChatParticipantReply.ProtoReflect.Descriptor instead.
func (*DelAllLeftChatParticipantReply) Descriptor() ([]byte, []int) {
	return file_kickedleftinfoserver_proto_rawDescGZIP(), []int{11}
}

func (x *DelAllLeftChatParticipantReply) GetErrorCode() ActiveErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

var File_kickedleftinfoserver_proto protoreflect.FileDescriptor

var file_kickedleftinfoserver_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x6c, 0x65, 0x66, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x12, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6e,
	0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x94,
	0x01, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x37, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x68, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x92, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x65, 0x66, 0x74,
	0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x4f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4b, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3b, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a,
	0x15, 0x41, 0x64, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b,
	0x69, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x3c, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x4c, 0x65, 0x66, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0x5d, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0xa4, 0x05, 0x0a, 0x11, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x28, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64,
	0x42, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x65, 0x66, 0x74,
	0x12, 0x25, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x63, 0x6b, 0x65, 0x64,
	0x4c, 0x65, 0x66, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4b, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x62, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x4c, 0x65, 0x66, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x4c, 0x65, 0x66,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x4c,
	0x65, 0x66, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x41, 0x6c, 0x6c, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x4c, 0x65, 0x66,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x69, 0x63,
	0x6b, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x28,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x1e, 0x5a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kickedleftinfoserver_proto_rawDescOnce sync.Once
	file_kickedleftinfoserver_proto_rawDescData = file_kickedleftinfoserver_proto_rawDesc
)

func file_kickedleftinfoserver_proto_rawDescGZIP() []byte {
	file_kickedleftinfoserver_proto_rawDescOnce.Do(func() {
		file_kickedleftinfoserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_kickedleftinfoserver_proto_rawDescData)
	})
	return file_kickedleftinfoserver_proto_rawDescData
}

var file_kickedleftinfoserver_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_kickedleftinfoserver_proto_goTypes = []interface{}{
	(*SearchKickedParticipantReq)(nil),     // 0: groupservice.SearchKickedParticipantReq
	(*SearchKickedParticipantReply)(nil),   // 1: groupservice.SearchKickedParticipantReply
	(*GetChannelKickedByLimitReq)(nil),     // 2: groupservice.GetChannelKickedByLimitReq
	(*GetChannelKickedByLimitReply)(nil),   // 3: groupservice.GetChannelKickedByLimitReply
	(*GetChannelKeckedLeftReq)(nil),        // 4: groupservice.GetChannelKeckedLeftReq
	(*GetChannelKeckedLeftReply)(nil),      // 5: groupservice.GetChannelKeckedLeftReply
	(*AddLeftParticipantReq)(nil),          // 6: groupservice.AddLeftParticipantReq
	(*AddLeftParticipantReply)(nil),        // 7: groupservice.AddLeftParticipantReply
	(*DelLeftParticipantReq)(nil),          // 8: groupservice.DelLeftParticipantReq
	(*DelLeftParticipantReply)(nil),        // 9: groupservice.DelLeftParticipantReply
	(*DelAllLeftChatParticipantReq)(nil),   // 10: groupservice.DelAllLeftChatParticipantReq
	(*DelAllLeftChatParticipantReply)(nil), // 11: groupservice.DelAllLeftChatParticipantReply
	(*ChannelParticipants)(nil),            // 12: groupservice.ChannelParticipants
	(ActiveErrorCode)(0),                   // 13: groupservice.ActiveErrorCode
	(*ChannelKickedLeft)(nil),              // 14: groupservice.ChannelKickedLeft
}
var file_kickedleftinfoserver_proto_depIdxs = []int32{
	12, // 0: groupservice.SearchKickedParticipantReply.Users:type_name -> groupservice.ChannelParticipants
	13, // 1: groupservice.SearchKickedParticipantReply.ErrorCode:type_name -> groupservice.ActiveErrorCode
	14, // 2: groupservice.GetChannelKickedByLimitReply.Users:type_name -> groupservice.ChannelKickedLeft
	13, // 3: groupservice.GetChannelKickedByLimitReply.ErrorCode:type_name -> groupservice.ActiveErrorCode
	14, // 4: groupservice.GetChannelKeckedLeftReply.UserInfo:type_name -> groupservice.ChannelKickedLeft
	13, // 5: groupservice.GetChannelKeckedLeftReply.ErrorCode:type_name -> groupservice.ActiveErrorCode
	14, // 6: groupservice.AddLeftParticipantReq.UserInfo:type_name -> groupservice.ChannelKickedLeft
	13, // 7: groupservice.AddLeftParticipantReply.ErrorCode:type_name -> groupservice.ActiveErrorCode
	13, // 8: groupservice.DelLeftParticipantReply.ErrorCode:type_name -> groupservice.ActiveErrorCode
	13, // 9: groupservice.DelAllLeftChatParticipantReply.ErrorCode:type_name -> groupservice.ActiveErrorCode
	2,  // 10: groupservice.KickedLeftService.GetChannelKickedByLimit:input_type -> groupservice.GetChannelKickedByLimitReq
	4,  // 11: groupservice.KickedLeftService.GetChannelKeckedLeft:input_type -> groupservice.GetChannelKeckedLeftReq
	6,  // 12: groupservice.KickedLeftService.AddLeftParticipant:input_type -> groupservice.AddLeftParticipantReq
	8,  // 13: groupservice.KickedLeftService.DelLeftParticipant:input_type -> groupservice.DelLeftParticipantReq
	10, // 14: groupservice.KickedLeftService.DelAllLeftChatParticipant:input_type -> groupservice.DelAllLeftChatParticipantReq
	0,  // 15: groupservice.KickedLeftService.SearchKickedParticipant:input_type -> groupservice.SearchKickedParticipantReq
	3,  // 16: groupservice.KickedLeftService.GetChannelKickedByLimit:output_type -> groupservice.GetChannelKickedByLimitReply
	5,  // 17: groupservice.KickedLeftService.GetChannelKeckedLeft:output_type -> groupservice.GetChannelKeckedLeftReply
	7,  // 18: groupservice.KickedLeftService.AddLeftParticipant:output_type -> groupservice.AddLeftParticipantReply
	9,  // 19: groupservice.KickedLeftService.DelLeftParticipant:output_type -> groupservice.DelLeftParticipantReply
	11, // 20: groupservice.KickedLeftService.DelAllLeftChatParticipant:output_type -> groupservice.DelAllLeftChatParticipantReply
	1,  // 21: groupservice.KickedLeftService.SearchKickedParticipant:output_type -> groupservice.SearchKickedParticipantReply
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_kickedleftinfoserver_proto_init() }
func file_kickedleftinfoserver_proto_init() {
	if File_kickedleftinfoserver_proto != nil {
		return
	}
	file_groupservice_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kickedleftinfoserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchKickedParticipantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kickedleftinfoserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchKickedParticipantReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kickedleftinfoserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelKickedByLimitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kickedleftinfoserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelKickedByLimitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kickedleftinfoserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelKeckedLeftReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kickedleftinfoserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelKeckedLeftReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kickedleftinfoserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLeftParticipantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kickedleftinfoserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLeftParticipantReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kickedleftinfoserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelLeftParticipantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kickedleftinfoserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelLeftParticipantReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kickedleftinfoserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAllLeftChatParticipantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kickedleftinfoserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAllLeftChatParticipantReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kickedleftinfoserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kickedleftinfoserver_proto_goTypes,
		DependencyIndexes: file_kickedleftinfoserver_proto_depIdxs,
		MessageInfos:      file_kickedleftinfoserver_proto_msgTypes,
	}.Build()
	File_kickedleftinfoserver_proto = out.File
	file_kickedleftinfoserver_proto_rawDesc = nil
	file_kickedleftinfoserver_proto_goTypes = nil
	file_kickedleftinfoserver_proto_depIdxs = nil
}
