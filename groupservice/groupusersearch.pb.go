// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/groupservice/groupusersearch.proto

package groupservice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 根据传入ID搜索用户
type SearchUsersByNameReq struct {
	UserIds []int32 `protobuf:"varint,1,rep,packed,name=UserIds" json:"UserIds,omitempty"`
	Str     string  `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
}

func (m *SearchUsersByNameReq) Reset()         { *m = SearchUsersByNameReq{} }
func (m *SearchUsersByNameReq) String() string { return proto.CompactTextString(m) }
func (*SearchUsersByNameReq) ProtoMessage()    {}
func (*SearchUsersByNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorGroupusersearch, []int{0}
}

func (m *SearchUsersByNameReq) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *SearchUsersByNameReq) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type SearchUsersByNameReply struct {
	UserIds   []int32         `protobuf:"varint,1,rep,packed,name=UserIds" json:"UserIds,omitempty"`
	ErrorCode ActiveErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=groupservice.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *SearchUsersByNameReply) Reset()         { *m = SearchUsersByNameReply{} }
func (m *SearchUsersByNameReply) String() string { return proto.CompactTextString(m) }
func (*SearchUsersByNameReply) ProtoMessage()    {}
func (*SearchUsersByNameReply) Descriptor() ([]byte, []int) {
	return fileDescriptorGroupusersearch, []int{1}
}

func (m *SearchUsersByNameReply) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *SearchUsersByNameReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

func init() {
	proto.RegisterType((*SearchUsersByNameReq)(nil), "groupservice.SearchUsersByNameReq")
	proto.RegisterType((*SearchUsersByNameReply)(nil), "groupservice.SearchUsersByNameReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GroupUserSearch service

type GroupUserSearchClient interface {
	// 根据传入ID搜索用户
	SearchUsersByName(ctx context.Context, in *SearchUsersByNameReq, opts ...grpc.CallOption) (*SearchUsersByNameReply, error)
}

type groupUserSearchClient struct {
	cc *grpc.ClientConn
}

func NewGroupUserSearchClient(cc *grpc.ClientConn) GroupUserSearchClient {
	return &groupUserSearchClient{cc}
}

func (c *groupUserSearchClient) SearchUsersByName(ctx context.Context, in *SearchUsersByNameReq, opts ...grpc.CallOption) (*SearchUsersByNameReply, error) {
	out := new(SearchUsersByNameReply)
	err := grpc.Invoke(ctx, "/groupservice.GroupUserSearch/SearchUsersByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupUserSearch service

type GroupUserSearchServer interface {
	// 根据传入ID搜索用户
	SearchUsersByName(context.Context, *SearchUsersByNameReq) (*SearchUsersByNameReply, error)
}

func RegisterGroupUserSearchServer(s *grpc.Server, srv GroupUserSearchServer) {
	s.RegisterService(&_GroupUserSearch_serviceDesc, srv)
}

func _GroupUserSearch_SearchUsersByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupUserSearchServer).SearchUsersByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupservice.GroupUserSearch/SearchUsersByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupUserSearchServer).SearchUsersByName(ctx, req.(*SearchUsersByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupUserSearch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "groupservice.GroupUserSearch",
	HandlerType: (*GroupUserSearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchUsersByName",
			Handler:    _GroupUserSearch_SearchUsersByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/groupservice/groupusersearch.proto",
}

func (m *SearchUsersByNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUsersByNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		dAtA2 := make([]byte, len(m.UserIds)*10)
		var j1 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroupusersearch(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Str) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroupusersearch(dAtA, i, uint64(len(m.Str)))
		i += copy(dAtA[i:], m.Str)
	}
	return i, nil
}

func (m *SearchUsersByNameReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUsersByNameReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		dAtA4 := make([]byte, len(m.UserIds)*10)
		var j3 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroupusersearch(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroupusersearch(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func encodeVarintGroupusersearch(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SearchUsersByNameReq) Size() (n int) {
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovGroupusersearch(uint64(e))
		}
		n += 1 + sovGroupusersearch(uint64(l)) + l
	}
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovGroupusersearch(uint64(l))
	}
	return n
}

func (m *SearchUsersByNameReply) Size() (n int) {
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovGroupusersearch(uint64(e))
		}
		n += 1 + sovGroupusersearch(uint64(l)) + l
	}
	if m.ErrorCode != 0 {
		n += 1 + sovGroupusersearch(uint64(m.ErrorCode))
	}
	return n
}

func sovGroupusersearch(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGroupusersearch(x uint64) (n int) {
	return sovGroupusersearch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SearchUsersByNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupusersearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUsersByNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUsersByNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroupusersearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroupusersearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroupusersearch
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroupusersearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupusersearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupusersearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroupusersearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroupusersearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUsersByNameReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupusersearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUsersByNameReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUsersByNameReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroupusersearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroupusersearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroupusersearch
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroupusersearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupusersearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroupusersearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroupusersearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroupusersearch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroupusersearch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroupusersearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroupusersearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGroupusersearch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGroupusersearch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGroupusersearch(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGroupusersearch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroupusersearch   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/groupservice/groupusersearch.proto", fileDescriptorGroupusersearch)
}

var fileDescriptorGroupusersearch = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x4f, 0xcf, 0x2c, 0xc9,
	0x49, 0x4c, 0xd2, 0x4b, 0xce, 0x48, 0x2c, 0x29, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0xcb, 0xcc,
	0xd5, 0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0x4a, 0x4b, 0x4c, 0x4e, 0x2d, 0x28, 0xca, 0x4f, 0x2a, 0x4d,
	0xd3, 0x4f, 0x2f, 0xca, 0x2f, 0x2d, 0x00, 0x49, 0x67, 0x26, 0xa7, 0x42, 0x38, 0xa5, 0xc5, 0xa9,
	0x45, 0xc5, 0xa9, 0x89, 0x45, 0xc9, 0x19, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x3c, 0xc8,
	0x6a, 0xa4, 0x5c, 0xc8, 0x34, 0x16, 0xca, 0x81, 0x98, 0xa9, 0xe4, 0xc4, 0x25, 0x12, 0x0c, 0xb6,
	0x23, 0x14, 0x64, 0x9b, 0x53, 0xa5, 0x5f, 0x62, 0x6e, 0x6a, 0x50, 0x6a, 0xa1, 0x90, 0x04, 0x17,
	0x3b, 0x48, 0xc4, 0x33, 0xa5, 0x58, 0x82, 0x51, 0x81, 0x59, 0x83, 0x35, 0x08, 0xc6, 0x15, 0x12,
	0xe0, 0x62, 0x2e, 0x2e, 0x29, 0x92, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0xf2,
	0xb9, 0xc4, 0xb0, 0x98, 0x51, 0x90, 0x53, 0x89, 0xc7, 0x14, 0x6b, 0x2e, 0x4e, 0xd7, 0xa2, 0xa2,
	0xfc, 0x22, 0xe7, 0xfc, 0x94, 0x54, 0xb0, 0x59, 0x7c, 0x46, 0xb2, 0x7a, 0x28, 0xee, 0x73, 0x4c,
	0x2e, 0xc9, 0x2c, 0x4b, 0x85, 0x2b, 0x0a, 0x42, 0xa8, 0x37, 0x2a, 0xe2, 0xe2, 0x77, 0x07, 0x29,
	0x05, 0x19, 0x06, 0xb1, 0x59, 0x28, 0x9e, 0x4b, 0x10, 0xc3, 0x0d, 0x42, 0x4a, 0xa8, 0x26, 0x62,
	0xf3, 0xa8, 0x94, 0x0a, 0x41, 0x35, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x4e, 0x3c, 0x27, 0x1e, 0xc9,
	0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0x63, 0x12, 0x1b, 0x38, 0xf4, 0x8c, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xf0, 0x60, 0x8d, 0xdc, 0x01, 0x00, 0x00,
}
