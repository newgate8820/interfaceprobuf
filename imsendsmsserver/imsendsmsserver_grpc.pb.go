// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imsendsmsserver.proto

package imsendsmsserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendSmsServerClient is the client API for SendSmsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendSmsServerClient interface {
	// 发送手机验证码
	SendPhoneCode(ctx context.Context, in *SendPhoneCodeReq, opts ...grpc.CallOption) (*SendPhoneCodeReply, error)
	// 重发手机验证
	ReSendPhoneCode(ctx context.Context, in *SendPhoneCodeReq, opts ...grpc.CallOption) (*SendPhoneCodeReply, error)
	// 校验手机验证码
	CheckPhoneCode(ctx context.Context, in *CheckPhoneCodeReq, opts ...grpc.CallOption) (*CheckPhoneCodeReply, error)
	// 批量发送手机短信
	BatchSendSMS(ctx context.Context, in *BatchSendSMSReq, opts ...grpc.CallOption) (*BatchSendSMSReply, error)
	// 发送邮件验证码
	SendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...grpc.CallOption) (*SendEmailCodeReply, error)
	// 重发邮件验证码
	ReSendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...grpc.CallOption) (*SendEmailCodeReply, error)
	// 校验邮箱验证码
	CheckEmailCode(ctx context.Context, in *CheckEmailCodeReq, opts ...grpc.CallOption) (*CheckEmailCodeReply, error)
}

type sendSmsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewSendSmsServerClient(cc grpc.ClientConnInterface) SendSmsServerClient {
	return &sendSmsServerClient{cc}
}

func (c *sendSmsServerClient) SendPhoneCode(ctx context.Context, in *SendPhoneCodeReq, opts ...grpc.CallOption) (*SendPhoneCodeReply, error) {
	out := new(SendPhoneCodeReply)
	err := c.cc.Invoke(ctx, "/imsendsmsserver.SendSmsServer/SendPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendSmsServerClient) ReSendPhoneCode(ctx context.Context, in *SendPhoneCodeReq, opts ...grpc.CallOption) (*SendPhoneCodeReply, error) {
	out := new(SendPhoneCodeReply)
	err := c.cc.Invoke(ctx, "/imsendsmsserver.SendSmsServer/ReSendPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendSmsServerClient) CheckPhoneCode(ctx context.Context, in *CheckPhoneCodeReq, opts ...grpc.CallOption) (*CheckPhoneCodeReply, error) {
	out := new(CheckPhoneCodeReply)
	err := c.cc.Invoke(ctx, "/imsendsmsserver.SendSmsServer/CheckPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendSmsServerClient) BatchSendSMS(ctx context.Context, in *BatchSendSMSReq, opts ...grpc.CallOption) (*BatchSendSMSReply, error) {
	out := new(BatchSendSMSReply)
	err := c.cc.Invoke(ctx, "/imsendsmsserver.SendSmsServer/BatchSendSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendSmsServerClient) SendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...grpc.CallOption) (*SendEmailCodeReply, error) {
	out := new(SendEmailCodeReply)
	err := c.cc.Invoke(ctx, "/imsendsmsserver.SendSmsServer/SendEmailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendSmsServerClient) ReSendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...grpc.CallOption) (*SendEmailCodeReply, error) {
	out := new(SendEmailCodeReply)
	err := c.cc.Invoke(ctx, "/imsendsmsserver.SendSmsServer/ReSendEmailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendSmsServerClient) CheckEmailCode(ctx context.Context, in *CheckEmailCodeReq, opts ...grpc.CallOption) (*CheckEmailCodeReply, error) {
	out := new(CheckEmailCodeReply)
	err := c.cc.Invoke(ctx, "/imsendsmsserver.SendSmsServer/CheckEmailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendSmsServerServer is the server API for SendSmsServer service.
// All implementations must embed UnimplementedSendSmsServerServer
// for forward compatibility
type SendSmsServerServer interface {
	// 发送手机验证码
	SendPhoneCode(context.Context, *SendPhoneCodeReq) (*SendPhoneCodeReply, error)
	// 重发手机验证
	ReSendPhoneCode(context.Context, *SendPhoneCodeReq) (*SendPhoneCodeReply, error)
	// 校验手机验证码
	CheckPhoneCode(context.Context, *CheckPhoneCodeReq) (*CheckPhoneCodeReply, error)
	// 批量发送手机短信
	BatchSendSMS(context.Context, *BatchSendSMSReq) (*BatchSendSMSReply, error)
	// 发送邮件验证码
	SendEmailCode(context.Context, *SendEmailCodeReq) (*SendEmailCodeReply, error)
	// 重发邮件验证码
	ReSendEmailCode(context.Context, *SendEmailCodeReq) (*SendEmailCodeReply, error)
	// 校验邮箱验证码
	CheckEmailCode(context.Context, *CheckEmailCodeReq) (*CheckEmailCodeReply, error)
	mustEmbedUnimplementedSendSmsServerServer()
}

// UnimplementedSendSmsServerServer must be embedded to have forward compatible implementations.
type UnimplementedSendSmsServerServer struct {
}

func (UnimplementedSendSmsServerServer) SendPhoneCode(context.Context, *SendPhoneCodeReq) (*SendPhoneCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoneCode not implemented")
}
func (UnimplementedSendSmsServerServer) ReSendPhoneCode(context.Context, *SendPhoneCodeReq) (*SendPhoneCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReSendPhoneCode not implemented")
}
func (UnimplementedSendSmsServerServer) CheckPhoneCode(context.Context, *CheckPhoneCodeReq) (*CheckPhoneCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPhoneCode not implemented")
}
func (UnimplementedSendSmsServerServer) BatchSendSMS(context.Context, *BatchSendSMSReq) (*BatchSendSMSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSendSMS not implemented")
}
func (UnimplementedSendSmsServerServer) SendEmailCode(context.Context, *SendEmailCodeReq) (*SendEmailCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailCode not implemented")
}
func (UnimplementedSendSmsServerServer) ReSendEmailCode(context.Context, *SendEmailCodeReq) (*SendEmailCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReSendEmailCode not implemented")
}
func (UnimplementedSendSmsServerServer) CheckEmailCode(context.Context, *CheckEmailCodeReq) (*CheckEmailCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmailCode not implemented")
}
func (UnimplementedSendSmsServerServer) mustEmbedUnimplementedSendSmsServerServer() {}

// UnsafeSendSmsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendSmsServerServer will
// result in compilation errors.
type UnsafeSendSmsServerServer interface {
	mustEmbedUnimplementedSendSmsServerServer()
}

func RegisterSendSmsServerServer(s grpc.ServiceRegistrar, srv SendSmsServerServer) {
	s.RegisterService(&SendSmsServer_ServiceDesc, srv)
}

func _SendSmsServer_SendPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPhoneCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendSmsServerServer).SendPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsendsmsserver.SendSmsServer/SendPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendSmsServerServer).SendPhoneCode(ctx, req.(*SendPhoneCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendSmsServer_ReSendPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPhoneCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendSmsServerServer).ReSendPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsendsmsserver.SendSmsServer/ReSendPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendSmsServerServer).ReSendPhoneCode(ctx, req.(*SendPhoneCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendSmsServer_CheckPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPhoneCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendSmsServerServer).CheckPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsendsmsserver.SendSmsServer/CheckPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendSmsServerServer).CheckPhoneCode(ctx, req.(*CheckPhoneCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendSmsServer_BatchSendSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSendSMSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendSmsServerServer).BatchSendSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsendsmsserver.SendSmsServer/BatchSendSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendSmsServerServer).BatchSendSMS(ctx, req.(*BatchSendSMSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendSmsServer_SendEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendSmsServerServer).SendEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsendsmsserver.SendSmsServer/SendEmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendSmsServerServer).SendEmailCode(ctx, req.(*SendEmailCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendSmsServer_ReSendEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendSmsServerServer).ReSendEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsendsmsserver.SendSmsServer/ReSendEmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendSmsServerServer).ReSendEmailCode(ctx, req.(*SendEmailCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendSmsServer_CheckEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEmailCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendSmsServerServer).CheckEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imsendsmsserver.SendSmsServer/CheckEmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendSmsServerServer).CheckEmailCode(ctx, req.(*CheckEmailCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SendSmsServer_ServiceDesc is the grpc.ServiceDesc for SendSmsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendSmsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imsendsmsserver.SendSmsServer",
	HandlerType: (*SendSmsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPhoneCode",
			Handler:    _SendSmsServer_SendPhoneCode_Handler,
		},
		{
			MethodName: "ReSendPhoneCode",
			Handler:    _SendSmsServer_ReSendPhoneCode_Handler,
		},
		{
			MethodName: "CheckPhoneCode",
			Handler:    _SendSmsServer_CheckPhoneCode_Handler,
		},
		{
			MethodName: "BatchSendSMS",
			Handler:    _SendSmsServer_BatchSendSMS_Handler,
		},
		{
			MethodName: "SendEmailCode",
			Handler:    _SendSmsServer_SendEmailCode_Handler,
		},
		{
			MethodName: "ReSendEmailCode",
			Handler:    _SendSmsServer_ReSendEmailCode_Handler,
		},
		{
			MethodName: "CheckEmailCode",
			Handler:    _SendSmsServer_CheckEmailCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imsendsmsserver.proto",
}
