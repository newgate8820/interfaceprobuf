// protoc --gogofast_out=plugins=grpc:. *.proto
// sudo protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/imdigitalwalletserver/imdigitalwalletserver.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: imdigitalwalletserver.proto

package imdigitalwalletserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Code int32

const (
	Code_Success               Code = 0
	Code_ErrorSystem           Code = 1
	Code_ErrorInvalidRequest   Code = 2 //无效请求
	Code_ErrorInvalidParameter Code = 3 //无效参数
	Code_ErrorQueryNotExist    Code = 4 // 查询不存在
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0: "Success",
		1: "ErrorSystem",
		2: "ErrorInvalidRequest",
		3: "ErrorInvalidParameter",
		4: "ErrorQueryNotExist",
	}
	Code_value = map[string]int32{
		"Success":               0,
		"ErrorSystem":           1,
		"ErrorInvalidRequest":   2,
		"ErrorInvalidParameter": 3,
		"ErrorQueryNotExist":    4,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_imdigitalwalletserver_proto_enumTypes[0].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_imdigitalwalletserver_proto_enumTypes[0]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{0}
}

// 后台管理接口
type BusinessCodeEnum int32

const (
	BusinessCodeEnum_WalletWords               BusinessCodeEnum = 0 //生成助记词
	BusinessCodeEnum_WalletCreate              BusinessCodeEnum = 1 //创建钱包
	BusinessCodeEnum_WalletActive              BusinessCodeEnum = 2 //激活钱包
	BusinessCodeEnum_GetWallets                BusinessCodeEnum = 3 //系统钱包列表查询
	BusinessCodeEnum_ConfigureCollectionAmount BusinessCodeEnum = 4 //归集金额配置
	BusinessCodeEnum_WalletRecords             BusinessCodeEnum = 5 //充值记录查询
	BusinessCodeEnum_GetChains                 BusinessCodeEnum = 6 //获取链信息
)

// Enum value maps for BusinessCodeEnum.
var (
	BusinessCodeEnum_name = map[int32]string{
		0: "WalletWords",
		1: "WalletCreate",
		2: "WalletActive",
		3: "GetWallets",
		4: "ConfigureCollectionAmount",
		5: "WalletRecords",
		6: "GetChains",
	}
	BusinessCodeEnum_value = map[string]int32{
		"WalletWords":               0,
		"WalletCreate":              1,
		"WalletActive":              2,
		"GetWallets":                3,
		"ConfigureCollectionAmount": 4,
		"WalletRecords":             5,
		"GetChains":                 6,
	}
)

func (x BusinessCodeEnum) Enum() *BusinessCodeEnum {
	p := new(BusinessCodeEnum)
	*p = x
	return p
}

func (x BusinessCodeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessCodeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_imdigitalwalletserver_proto_enumTypes[1].Descriptor()
}

func (BusinessCodeEnum) Type() protoreflect.EnumType {
	return &file_imdigitalwalletserver_proto_enumTypes[1]
}

func (x BusinessCodeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessCodeEnum.Descriptor instead.
func (BusinessCodeEnum) EnumDescriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{1}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   Code   `protobuf:"varint,1,opt,name=Code,proto3,enum=imdigitalwalletserver.Code" json:"Code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_Success
}

func (x *Status) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 数字钱包业务通用协议请求
type ReqDigitalWalletUniversalBusiness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip         string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`                  // 用户IP
	UserId     int64  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`         // 交易所用户唯一标识
	AppUserId  int64  `protobuf:"varint,3,opt,name=appUserId,proto3" json:"appUserId,omitempty"`   // 第三方应用用户唯一标识
	BusinessId int32  `protobuf:"varint,4,opt,name=businessId,proto3" json:"businessId,omitempty"` // 业务标识
	Uuid       string `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`              // 用户业务请求唯一唯标识
	Phone      string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`            // 用户电话号码
	Data       []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`              // JSON数据
}

func (x *ReqDigitalWalletUniversalBusiness) Reset() {
	*x = ReqDigitalWalletUniversalBusiness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDigitalWalletUniversalBusiness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDigitalWalletUniversalBusiness) ProtoMessage() {}

func (x *ReqDigitalWalletUniversalBusiness) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDigitalWalletUniversalBusiness.ProtoReflect.Descriptor instead.
func (*ReqDigitalWalletUniversalBusiness) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{1}
}

func (x *ReqDigitalWalletUniversalBusiness) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ReqDigitalWalletUniversalBusiness) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqDigitalWalletUniversalBusiness) GetAppUserId() int64 {
	if x != nil {
		return x.AppUserId
	}
	return 0
}

func (x *ReqDigitalWalletUniversalBusiness) GetBusinessId() int32 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *ReqDigitalWalletUniversalBusiness) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ReqDigitalWalletUniversalBusiness) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ReqDigitalWalletUniversalBusiness) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 数字钱包业务通用协议响应
type ReplyDigitalWalletUniversalBusiness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // JSON数据
}

func (x *ReplyDigitalWalletUniversalBusiness) Reset() {
	*x = ReplyDigitalWalletUniversalBusiness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDigitalWalletUniversalBusiness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDigitalWalletUniversalBusiness) ProtoMessage() {}

func (x *ReplyDigitalWalletUniversalBusiness) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDigitalWalletUniversalBusiness.ProtoReflect.Descriptor instead.
func (*ReplyDigitalWalletUniversalBusiness) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{2}
}

func (x *ReplyDigitalWalletUniversalBusiness) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 用户充值地址生成
type GenerateRechargeAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Chain    string        `protobuf:"bytes,2,opt,name=Chain,proto3" json:"Chain,omitempty"`       //当前币所属主链
	Contract string        `protobuf:"bytes,3,opt,name=Contract,proto3" json:"Contract,omitempty"` //当前币合约地址
	Debug    *pbcomm.Debug `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GenerateRechargeAddressReq) Reset() {
	*x = GenerateRechargeAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateRechargeAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRechargeAddressReq) ProtoMessage() {}

func (x *GenerateRechargeAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRechargeAddressReq.ProtoReflect.Descriptor instead.
func (*GenerateRechargeAddressReq) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{3}
}

func (x *GenerateRechargeAddressReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GenerateRechargeAddressReq) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *GenerateRechargeAddressReq) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *GenerateRechargeAddressReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GenerateRechargeAddressResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Address string  `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *GenerateRechargeAddressResp) Reset() {
	*x = GenerateRechargeAddressResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateRechargeAddressResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRechargeAddressResp) ProtoMessage() {}

func (x *GenerateRechargeAddressResp) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRechargeAddressResp.ProtoReflect.Descriptor instead.
func (*GenerateRechargeAddressResp) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{4}
}

func (x *GenerateRechargeAddressResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GenerateRechargeAddressResp) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// 用户充值
type UserRechargeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Chain       string        `protobuf:"bytes,2,opt,name=Chain,proto3" json:"Chain,omitempty"`             //当前币所属主链
	Contract    string        `protobuf:"bytes,3,opt,name=Contract,proto3" json:"Contract,omitempty"`       //当前币合约地址
	FromAddress string        `protobuf:"bytes,4,opt,name=FromAddress,proto3" json:"FromAddress,omitempty"` // from 地址
	ToAddress   string        `protobuf:"bytes,5,opt,name=ToAddress,proto3" json:"ToAddress,omitempty"`     // to 地址
	Value       string        `protobuf:"bytes,6,opt,name=Value,proto3" json:"Value,omitempty"`             // 充值金额
	Debug       *pbcomm.Debug `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UserRechargeReq) Reset() {
	*x = UserRechargeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRechargeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRechargeReq) ProtoMessage() {}

func (x *UserRechargeReq) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRechargeReq.ProtoReflect.Descriptor instead.
func (*UserRechargeReq) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{5}
}

func (x *UserRechargeReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserRechargeReq) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *UserRechargeReq) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *UserRechargeReq) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *UserRechargeReq) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *UserRechargeReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UserRechargeReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UserRechargeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *UserRechargeResp) Reset() {
	*x = UserRechargeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRechargeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRechargeResp) ProtoMessage() {}

func (x *UserRechargeResp) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRechargeResp.ProtoReflect.Descriptor instead.
func (*UserRechargeResp) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{6}
}

func (x *UserRechargeResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// 用户兑换
type UserSwapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	FromChain    string        `protobuf:"bytes,2,opt,name=FromChain,proto3" json:"FromChain,omitempty"`       //from 币所属主链
	FromContract string        `protobuf:"bytes,3,opt,name=FromContract,proto3" json:"FromContract,omitempty"` //from 币合约地址
	ToChain      string        `protobuf:"bytes,4,opt,name=ToChain,proto3" json:"ToChain,omitempty"`           //to 币所属主链
	ToContract   string        `protobuf:"bytes,5,opt,name=ToContract,proto3" json:"ToContract,omitempty"`     //to 币合约地址
	Value        string        `protobuf:"bytes,6,opt,name=Value,proto3" json:"Value,omitempty"`               // 兑换金额
	FromType     int32         `protobuf:"varint,7,opt,name=FromType,proto3" json:"FromType,omitempty"`        // from  币种类型 1:法币 2：数字货币
	ToType       int32         `protobuf:"varint,8,opt,name=ToType,proto3" json:"ToType,omitempty"`            // to  币种类型 1:法币 2：数字货币
	Debug        *pbcomm.Debug `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UserSwapReq) Reset() {
	*x = UserSwapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSwapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSwapReq) ProtoMessage() {}

func (x *UserSwapReq) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSwapReq.ProtoReflect.Descriptor instead.
func (*UserSwapReq) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{7}
}

func (x *UserSwapReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserSwapReq) GetFromChain() string {
	if x != nil {
		return x.FromChain
	}
	return ""
}

func (x *UserSwapReq) GetFromContract() string {
	if x != nil {
		return x.FromContract
	}
	return ""
}

func (x *UserSwapReq) GetToChain() string {
	if x != nil {
		return x.ToChain
	}
	return ""
}

func (x *UserSwapReq) GetToContract() string {
	if x != nil {
		return x.ToContract
	}
	return ""
}

func (x *UserSwapReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UserSwapReq) GetFromType() int32 {
	if x != nil {
		return x.FromType
	}
	return 0
}

func (x *UserSwapReq) GetToType() int32 {
	if x != nil {
		return x.ToType
	}
	return 0
}

func (x *UserSwapReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UserSwapResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *UserSwapResp) Reset() {
	*x = UserSwapResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSwapResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSwapResp) ProtoMessage() {}

func (x *UserSwapResp) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSwapResp.ProtoReflect.Descriptor instead.
func (*UserSwapResp) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{8}
}

func (x *UserSwapResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// 查询可充值代币
type QueryRechargeableTokensReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *QueryRechargeableTokensReq) Reset() {
	*x = QueryRechargeableTokensReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRechargeableTokensReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRechargeableTokensReq) ProtoMessage() {}

func (x *QueryRechargeableTokensReq) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRechargeableTokensReq.ProtoReflect.Descriptor instead.
func (*QueryRechargeableTokensReq) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{9}
}

func (x *QueryRechargeableTokensReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 可用代币列表
type AbleToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain     string `protobuf:"bytes,1,opt,name=Chain,proto3" json:"Chain,omitempty"`         //当前币所属主链
	Contract  string `protobuf:"bytes,2,opt,name=Contract,proto3" json:"Contract,omitempty"`   //当前币合约地址
	Name      string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`           //币名
	PriceUsdt string `protobuf:"bytes,4,opt,name=PriceUsdt,proto3" json:"PriceUsdt,omitempty"` //对应usdt价值
	PriceDct  string `protobuf:"bytes,5,opt,name=PriceDct,proto3" json:"PriceDct,omitempty"`   //对应法币价值
	Fee       string `protobuf:"bytes,6,opt,name=Fee,proto3" json:"Fee,omitempty"`             //链上手续费
	Type      int32  `protobuf:"varint,7,opt,name=Type,proto3" json:"Type,omitempty"`          //币种类型
}

func (x *AbleToken) Reset() {
	*x = AbleToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbleToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbleToken) ProtoMessage() {}

func (x *AbleToken) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbleToken.ProtoReflect.Descriptor instead.
func (*AbleToken) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{10}
}

func (x *AbleToken) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *AbleToken) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *AbleToken) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbleToken) GetPriceUsdt() string {
	if x != nil {
		return x.PriceUsdt
	}
	return ""
}

func (x *AbleToken) GetPriceDct() string {
	if x != nil {
		return x.PriceDct
	}
	return ""
}

func (x *AbleToken) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *AbleToken) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type QueryRechargeableTokensResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status      `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	TokenList []*AbleToken `protobuf:"bytes,2,rep,name=TokenList,proto3" json:"TokenList,omitempty"`
}

func (x *QueryRechargeableTokensResp) Reset() {
	*x = QueryRechargeableTokensResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRechargeableTokensResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRechargeableTokensResp) ProtoMessage() {}

func (x *QueryRechargeableTokensResp) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRechargeableTokensResp.ProtoReflect.Descriptor instead.
func (*QueryRechargeableTokensResp) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{11}
}

func (x *QueryRechargeableTokensResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryRechargeableTokensResp) GetTokenList() []*AbleToken {
	if x != nil {
		return x.TokenList
	}
	return nil
}

// 查询用户账户信息（余额信息）
type QueryUserAccountInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *QueryUserAccountInfoReq) Reset() {
	*x = QueryUserAccountInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserAccountInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserAccountInfoReq) ProtoMessage() {}

func (x *QueryUserAccountInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserAccountInfoReq.ProtoReflect.Descriptor instead.
func (*QueryUserAccountInfoReq) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{12}
}

func (x *QueryUserAccountInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryUserAccountInfoReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type TokenBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain       string `protobuf:"bytes,1,opt,name=Chain,proto3" json:"Chain,omitempty"`             //当前币所属主链
	Contract    string `protobuf:"bytes,2,opt,name=Contract,proto3" json:"Contract,omitempty"`       //当前币合约地址
	Name        string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`               //币名
	Balance     string `protobuf:"bytes,4,opt,name=Balance,proto3" json:"Balance,omitempty"`         //可用余额
	Frozen      string `protobuf:"bytes,5,opt,name=Frozen,proto3" json:"Frozen,omitempty"`           //冻结余额
	BalanceUSDT string `protobuf:"bytes,6,opt,name=BalanceUSDT,proto3" json:"BalanceUSDT,omitempty"` //可用余额USDT
	BalanceDCT  string `protobuf:"bytes,7,opt,name=BalanceDCT,proto3" json:"BalanceDCT,omitempty"`   //可用余额DCT
}

func (x *TokenBalance) Reset() {
	*x = TokenBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBalance) ProtoMessage() {}

func (x *TokenBalance) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBalance.ProtoReflect.Descriptor instead.
func (*TokenBalance) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{13}
}

func (x *TokenBalance) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *TokenBalance) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *TokenBalance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TokenBalance) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *TokenBalance) GetFrozen() string {
	if x != nil {
		return x.Frozen
	}
	return ""
}

func (x *TokenBalance) GetBalanceUSDT() string {
	if x != nil {
		return x.BalanceUSDT
	}
	return ""
}

func (x *TokenBalance) GetBalanceDCT() string {
	if x != nil {
		return x.BalanceDCT
	}
	return ""
}

type AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BalanceList      []*TokenBalance `protobuf:"bytes,1,rep,name=BalanceList,proto3" json:"BalanceList,omitempty"`           //余额列表
	TotalBalanceUSDT string          `protobuf:"bytes,2,opt,name=TotalBalanceUSDT,proto3" json:"TotalBalanceUSDT,omitempty"` //总USDT余额
	TotalBalanceDCT  string          `protobuf:"bytes,3,opt,name=TotalBalanceDCT,proto3" json:"TotalBalanceDCT,omitempty"`   //总法币余额
	TotalAssets      string          `protobuf:"bytes,4,opt,name=TotalAssets,proto3" json:"TotalAssets,omitempty"`           //总资产对应法币
	Status           int32           `protobuf:"varint,5,opt,name=Status,proto3" json:"Status,omitempty"`                    //账户状态
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{14}
}

func (x *AccountInfo) GetBalanceList() []*TokenBalance {
	if x != nil {
		return x.BalanceList
	}
	return nil
}

func (x *AccountInfo) GetTotalBalanceUSDT() string {
	if x != nil {
		return x.TotalBalanceUSDT
	}
	return ""
}

func (x *AccountInfo) GetTotalBalanceDCT() string {
	if x != nil {
		return x.TotalBalanceDCT
	}
	return ""
}

func (x *AccountInfo) GetTotalAssets() string {
	if x != nil {
		return x.TotalAssets
	}
	return ""
}

func (x *AccountInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type QueryUserAccountInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *Status      `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	AccountInfo *AccountInfo `protobuf:"bytes,2,opt,name=AccountInfo,proto3" json:"AccountInfo,omitempty"`
}

func (x *QueryUserAccountInfoResp) Reset() {
	*x = QueryUserAccountInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserAccountInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserAccountInfoResp) ProtoMessage() {}

func (x *QueryUserAccountInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserAccountInfoResp.ProtoReflect.Descriptor instead.
func (*QueryUserAccountInfoResp) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{15}
}

func (x *QueryUserAccountInfoResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryUserAccountInfoResp) GetAccountInfo() *AccountInfo {
	if x != nil {
		return x.AccountInfo
	}
	return nil
}

// 分页参数
type PaginationParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber uint32 `protobuf:"varint,1,opt,name=PageNumber,proto3" json:"PageNumber,omitempty"` //页码
	PageSize   uint32 `protobuf:"varint,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"`     //分页大小
}

func (x *PaginationParams) Reset() {
	*x = PaginationParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationParams) ProtoMessage() {}

func (x *PaginationParams) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationParams.ProtoReflect.Descriptor instead.
func (*PaginationParams) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{16}
}

func (x *PaginationParams) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *PaginationParams) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 日期参数
type DateParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  uint32 `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`   // 年份
	Month uint32 `protobuf:"varint,2,opt,name=Month,proto3" json:"Month,omitempty"` // 月份
	Day   uint32 `protobuf:"varint,3,opt,name=Day,proto3" json:"Day,omitempty"`     // 日期
}

func (x *DateParams) Reset() {
	*x = DateParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateParams) ProtoMessage() {}

func (x *DateParams) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateParams.ProtoReflect.Descriptor instead.
func (*DateParams) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{17}
}

func (x *DateParams) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *DateParams) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *DateParams) GetDay() uint32 {
	if x != nil {
		return x.Day
	}
	return 0
}

// 查询用户充值明细
type QueryUserRechargeDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32             `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	PageParam *PaginationParams `protobuf:"bytes,2,opt,name=PageParam,proto3" json:"PageParam,omitempty"` // 分页参数
	DateParam *DateParams       `protobuf:"bytes,3,opt,name=DateParam,proto3" json:"DateParam,omitempty"`
	Status    uint32            `protobuf:"varint,4,opt,name=Status,proto3" json:"Status,omitempty"` //充值状态
	Debug     *pbcomm.Debug     `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *QueryUserRechargeDetailsReq) Reset() {
	*x = QueryUserRechargeDetailsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserRechargeDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserRechargeDetailsReq) ProtoMessage() {}

func (x *QueryUserRechargeDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserRechargeDetailsReq.ProtoReflect.Descriptor instead.
func (*QueryUserRechargeDetailsReq) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{18}
}

func (x *QueryUserRechargeDetailsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryUserRechargeDetailsReq) GetPageParam() *PaginationParams {
	if x != nil {
		return x.PageParam
	}
	return nil
}

func (x *QueryUserRechargeDetailsReq) GetDateParam() *DateParams {
	if x != nil {
		return x.DateParam
	}
	return nil
}

func (x *QueryUserRechargeDetailsReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryUserRechargeDetailsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type RechargeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"` //充值时间
	Value     string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`          // 充值金额
	Address   string `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`      // 充值地址
	BillId    string `protobuf:"bytes,4,opt,name=BillId,proto3" json:"BillId,omitempty"`        // 账单ID
	Status    uint32 `protobuf:"varint,5,opt,name=Status,proto3" json:"Status,omitempty"`       //充值状态
}

func (x *RechargeDetail) Reset() {
	*x = RechargeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeDetail) ProtoMessage() {}

func (x *RechargeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeDetail.ProtoReflect.Descriptor instead.
func (*RechargeDetail) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{19}
}

func (x *RechargeDetail) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RechargeDetail) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *RechargeDetail) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RechargeDetail) GetBillId() string {
	if x != nil {
		return x.BillId
	}
	return ""
}

func (x *RechargeDetail) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type QueryUserRechargeDetailsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *Status           `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	RecordDetail []*RechargeDetail `protobuf:"bytes,2,rep,name=RecordDetail,proto3" json:"RecordDetail,omitempty"`
}

func (x *QueryUserRechargeDetailsResp) Reset() {
	*x = QueryUserRechargeDetailsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserRechargeDetailsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserRechargeDetailsResp) ProtoMessage() {}

func (x *QueryUserRechargeDetailsResp) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserRechargeDetailsResp.ProtoReflect.Descriptor instead.
func (*QueryUserRechargeDetailsResp) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{20}
}

func (x *QueryUserRechargeDetailsResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryUserRechargeDetailsResp) GetRecordDetail() []*RechargeDetail {
	if x != nil {
		return x.RecordDetail
	}
	return nil
}

// 查询用户兑换明细
type QueryUserSwapDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32             `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	PageParam *PaginationParams `protobuf:"bytes,2,opt,name=PageParam,proto3" json:"PageParam,omitempty"` // 分页参数
	DateParam *DateParams       `protobuf:"bytes,3,opt,name=DateParam,proto3" json:"DateParam,omitempty"`
	Debug     *pbcomm.Debug     `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *QueryUserSwapDetailsReq) Reset() {
	*x = QueryUserSwapDetailsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserSwapDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserSwapDetailsReq) ProtoMessage() {}

func (x *QueryUserSwapDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserSwapDetailsReq.ProtoReflect.Descriptor instead.
func (*QueryUserSwapDetailsReq) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{21}
}

func (x *QueryUserSwapDetailsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryUserSwapDetailsReq) GetPageParam() *PaginationParams {
	if x != nil {
		return x.PageParam
	}
	return nil
}

func (x *QueryUserSwapDetailsReq) GetDateParam() *DateParams {
	if x != nil {
		return x.DateParam
	}
	return nil
}

func (x *QueryUserSwapDetailsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SwapDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp    uint64 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`      //兑换时间
	Number       string `protobuf:"bytes,2,opt,name=Number,proto3" json:"Number,omitempty"`             // 兑换数量
	Value        string `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`               // 兑换金额
	ExchangeRate string `protobuf:"bytes,4,opt,name=ExchangeRate,proto3" json:"ExchangeRate,omitempty"` // 当前汇率
	BillId       string `protobuf:"bytes,5,opt,name=BillId,proto3" json:"BillId,omitempty"`             // 账单ID
}

func (x *SwapDetail) Reset() {
	*x = SwapDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapDetail) ProtoMessage() {}

func (x *SwapDetail) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapDetail.ProtoReflect.Descriptor instead.
func (*SwapDetail) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{22}
}

func (x *SwapDetail) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SwapDetail) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *SwapDetail) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SwapDetail) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *SwapDetail) GetBillId() string {
	if x != nil {
		return x.BillId
	}
	return ""
}

type QueryUserSwapDetailsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *Status       `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	RecordDetail []*SwapDetail `protobuf:"bytes,2,rep,name=RecordDetail,proto3" json:"RecordDetail,omitempty"`
}

func (x *QueryUserSwapDetailsResp) Reset() {
	*x = QueryUserSwapDetailsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserSwapDetailsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserSwapDetailsResp) ProtoMessage() {}

func (x *QueryUserSwapDetailsResp) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserSwapDetailsResp.ProtoReflect.Descriptor instead.
func (*QueryUserSwapDetailsResp) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{23}
}

func (x *QueryUserSwapDetailsResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryUserSwapDetailsResp) GetRecordDetail() []*SwapDetail {
	if x != nil {
		return x.RecordDetail
	}
	return nil
}

type BackgroundManageOptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCode BusinessCodeEnum `protobuf:"varint,1,opt,name=BusinessCode,proto3,enum=imdigitalwalletserver.BusinessCodeEnum" json:"BusinessCode,omitempty"`
	ReqData      string           `protobuf:"bytes,2,opt,name=ReqData,proto3" json:"ReqData,omitempty"` //请求结构 json
}

func (x *BackgroundManageOptReq) Reset() {
	*x = BackgroundManageOptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundManageOptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundManageOptReq) ProtoMessage() {}

func (x *BackgroundManageOptReq) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundManageOptReq.ProtoReflect.Descriptor instead.
func (*BackgroundManageOptReq) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{24}
}

func (x *BackgroundManageOptReq) GetBusinessCode() BusinessCodeEnum {
	if x != nil {
		return x.BusinessCode
	}
	return BusinessCodeEnum_WalletWords
}

func (x *BackgroundManageOptReq) GetReqData() string {
	if x != nil {
		return x.ReqData
	}
	return ""
}

type BackgroundManageOptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	RespData string  `protobuf:"bytes,2,opt,name=RespData,proto3" json:"RespData,omitempty"` //返回结构 json
}

func (x *BackgroundManageOptResp) Reset() {
	*x = BackgroundManageOptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imdigitalwalletserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundManageOptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundManageOptResp) ProtoMessage() {}

func (x *BackgroundManageOptResp) ProtoReflect() protoreflect.Message {
	mi := &file_imdigitalwalletserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundManageOptResp.ProtoReflect.Descriptor instead.
func (*BackgroundManageOptResp) Descriptor() ([]byte, []int) {
	return file_imdigitalwalletserver_proto_rawDescGZIP(), []int{25}
}

func (x *BackgroundManageOptResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BackgroundManageOptResp) GetRespData() string {
	if x != nil {
		return x.RespData
	}
	return ""
}

var File_imdigitalwalletserver_proto protoreflect.FileDescriptor

var file_imdigitalwalletserver_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x69,
	0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x1a, 0x13, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xc7, 0x01, 0x0a,
	0x21, 0x52, 0x65, 0x71, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x23, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x8b, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x6e, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0xd6, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x49, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69,
	0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x54, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x6f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x45, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x41, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0xb1, 0x01, 0x0a, 0x09, 0x41, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x73, 0x64,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x73,
	0x64, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x63, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46, 0x65, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x17, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0xc8, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x53, 0x44, 0x54, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x53, 0x44, 0x54, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x43, 0x54, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x43, 0x54, 0x22, 0xe4,
	0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45,
	0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x53, 0x44, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x53, 0x44,
	0x54, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x43, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x43, 0x54, 0x12, 0x20, 0x0a, 0x0b, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x4e, 0x0a, 0x10, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x48, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x44, 0x61, 0x79, 0x22, 0xfa, 0x01, 0x0a, 0x1b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x45, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09, 0x50,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3f, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6d,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09,
	0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x49, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xde, 0x01, 0x0a, 0x17, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09, 0x50, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3f, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09, 0x44, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x0a,
	0x53, 0x77, 0x61, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x69,
	0x6c, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x77, 0x61, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69,
	0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x7f, 0x0a,
	0x16, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6c,
	0x0a, 0x17, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2a, 0x70, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x04, 0x2a, 0x98,
	0x01, 0x0a, 0x10, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x64, 0x73, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x10, 0x06, 0x32, 0xeb, 0x08, 0x0a, 0x14, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x1e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x38, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x1a,
	0x3a, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x82, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x2e, 0x69, 0x6d, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x69,
	0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x61,
	0x70, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a,
	0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x69, 0x6d,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x79, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x2e, 0x69, 0x6d, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x69, 0x6d, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a,
	0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x2e, 0x69, 0x6d, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e,
	0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x77, 0x61, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2e, 0x2e, 0x69,
	0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77,
	0x61, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x69,
	0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77,
	0x61, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x76, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x12, 0x2d, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4f,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x69, 0x6d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4f, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x27, 0x5a, 0x25, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_imdigitalwalletserver_proto_rawDescOnce sync.Once
	file_imdigitalwalletserver_proto_rawDescData = file_imdigitalwalletserver_proto_rawDesc
)

func file_imdigitalwalletserver_proto_rawDescGZIP() []byte {
	file_imdigitalwalletserver_proto_rawDescOnce.Do(func() {
		file_imdigitalwalletserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_imdigitalwalletserver_proto_rawDescData)
	})
	return file_imdigitalwalletserver_proto_rawDescData
}

var file_imdigitalwalletserver_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_imdigitalwalletserver_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_imdigitalwalletserver_proto_goTypes = []interface{}{
	(Code)(0),             // 0: imdigitalwalletserver.Code
	(BusinessCodeEnum)(0), // 1: imdigitalwalletserver.BusinessCodeEnum
	(*Status)(nil),        // 2: imdigitalwalletserver.Status
	(*ReqDigitalWalletUniversalBusiness)(nil),   // 3: imdigitalwalletserver.ReqDigitalWalletUniversalBusiness
	(*ReplyDigitalWalletUniversalBusiness)(nil), // 4: imdigitalwalletserver.ReplyDigitalWalletUniversalBusiness
	(*GenerateRechargeAddressReq)(nil),          // 5: imdigitalwalletserver.GenerateRechargeAddressReq
	(*GenerateRechargeAddressResp)(nil),         // 6: imdigitalwalletserver.GenerateRechargeAddressResp
	(*UserRechargeReq)(nil),                     // 7: imdigitalwalletserver.UserRechargeReq
	(*UserRechargeResp)(nil),                    // 8: imdigitalwalletserver.UserRechargeResp
	(*UserSwapReq)(nil),                         // 9: imdigitalwalletserver.UserSwapReq
	(*UserSwapResp)(nil),                        // 10: imdigitalwalletserver.UserSwapResp
	(*QueryRechargeableTokensReq)(nil),          // 11: imdigitalwalletserver.QueryRechargeableTokensReq
	(*AbleToken)(nil),                           // 12: imdigitalwalletserver.AbleToken
	(*QueryRechargeableTokensResp)(nil),         // 13: imdigitalwalletserver.QueryRechargeableTokensResp
	(*QueryUserAccountInfoReq)(nil),             // 14: imdigitalwalletserver.QueryUserAccountInfoReq
	(*TokenBalance)(nil),                        // 15: imdigitalwalletserver.TokenBalance
	(*AccountInfo)(nil),                         // 16: imdigitalwalletserver.AccountInfo
	(*QueryUserAccountInfoResp)(nil),            // 17: imdigitalwalletserver.QueryUserAccountInfoResp
	(*PaginationParams)(nil),                    // 18: imdigitalwalletserver.PaginationParams
	(*DateParams)(nil),                          // 19: imdigitalwalletserver.DateParams
	(*QueryUserRechargeDetailsReq)(nil),         // 20: imdigitalwalletserver.QueryUserRechargeDetailsReq
	(*RechargeDetail)(nil),                      // 21: imdigitalwalletserver.RechargeDetail
	(*QueryUserRechargeDetailsResp)(nil),        // 22: imdigitalwalletserver.QueryUserRechargeDetailsResp
	(*QueryUserSwapDetailsReq)(nil),             // 23: imdigitalwalletserver.QueryUserSwapDetailsReq
	(*SwapDetail)(nil),                          // 24: imdigitalwalletserver.SwapDetail
	(*QueryUserSwapDetailsResp)(nil),            // 25: imdigitalwalletserver.QueryUserSwapDetailsResp
	(*BackgroundManageOptReq)(nil),              // 26: imdigitalwalletserver.BackgroundManageOptReq
	(*BackgroundManageOptResp)(nil),             // 27: imdigitalwalletserver.BackgroundManageOptResp
	(*pbcomm.Debug)(nil),                        // 28: pbcomm.Debug
}
var file_imdigitalwalletserver_proto_depIdxs = []int32{
	0,  // 0: imdigitalwalletserver.Status.Code:type_name -> imdigitalwalletserver.Code
	28, // 1: imdigitalwalletserver.GenerateRechargeAddressReq.debug:type_name -> pbcomm.Debug
	2,  // 2: imdigitalwalletserver.GenerateRechargeAddressResp.Status:type_name -> imdigitalwalletserver.Status
	28, // 3: imdigitalwalletserver.UserRechargeReq.debug:type_name -> pbcomm.Debug
	2,  // 4: imdigitalwalletserver.UserRechargeResp.Status:type_name -> imdigitalwalletserver.Status
	28, // 5: imdigitalwalletserver.UserSwapReq.debug:type_name -> pbcomm.Debug
	2,  // 6: imdigitalwalletserver.UserSwapResp.Status:type_name -> imdigitalwalletserver.Status
	28, // 7: imdigitalwalletserver.QueryRechargeableTokensReq.debug:type_name -> pbcomm.Debug
	2,  // 8: imdigitalwalletserver.QueryRechargeableTokensResp.Status:type_name -> imdigitalwalletserver.Status
	12, // 9: imdigitalwalletserver.QueryRechargeableTokensResp.TokenList:type_name -> imdigitalwalletserver.AbleToken
	28, // 10: imdigitalwalletserver.QueryUserAccountInfoReq.debug:type_name -> pbcomm.Debug
	15, // 11: imdigitalwalletserver.AccountInfo.BalanceList:type_name -> imdigitalwalletserver.TokenBalance
	2,  // 12: imdigitalwalletserver.QueryUserAccountInfoResp.Status:type_name -> imdigitalwalletserver.Status
	16, // 13: imdigitalwalletserver.QueryUserAccountInfoResp.AccountInfo:type_name -> imdigitalwalletserver.AccountInfo
	18, // 14: imdigitalwalletserver.QueryUserRechargeDetailsReq.PageParam:type_name -> imdigitalwalletserver.PaginationParams
	19, // 15: imdigitalwalletserver.QueryUserRechargeDetailsReq.DateParam:type_name -> imdigitalwalletserver.DateParams
	28, // 16: imdigitalwalletserver.QueryUserRechargeDetailsReq.debug:type_name -> pbcomm.Debug
	2,  // 17: imdigitalwalletserver.QueryUserRechargeDetailsResp.Status:type_name -> imdigitalwalletserver.Status
	21, // 18: imdigitalwalletserver.QueryUserRechargeDetailsResp.RecordDetail:type_name -> imdigitalwalletserver.RechargeDetail
	18, // 19: imdigitalwalletserver.QueryUserSwapDetailsReq.PageParam:type_name -> imdigitalwalletserver.PaginationParams
	19, // 20: imdigitalwalletserver.QueryUserSwapDetailsReq.DateParam:type_name -> imdigitalwalletserver.DateParams
	28, // 21: imdigitalwalletserver.QueryUserSwapDetailsReq.debug:type_name -> pbcomm.Debug
	2,  // 22: imdigitalwalletserver.QueryUserSwapDetailsResp.Status:type_name -> imdigitalwalletserver.Status
	24, // 23: imdigitalwalletserver.QueryUserSwapDetailsResp.RecordDetail:type_name -> imdigitalwalletserver.SwapDetail
	1,  // 24: imdigitalwalletserver.BackgroundManageOptReq.BusinessCode:type_name -> imdigitalwalletserver.BusinessCodeEnum
	2,  // 25: imdigitalwalletserver.BackgroundManageOptResp.Status:type_name -> imdigitalwalletserver.Status
	3,  // 26: imdigitalwalletserver.DigitalWalletService.DigitalWalletUniversalBusiness:input_type -> imdigitalwalletserver.ReqDigitalWalletUniversalBusiness
	5,  // 27: imdigitalwalletserver.DigitalWalletService.GenerateRechargeAddress:input_type -> imdigitalwalletserver.GenerateRechargeAddressReq
	7,  // 28: imdigitalwalletserver.DigitalWalletService.UserRecharge:input_type -> imdigitalwalletserver.UserRechargeReq
	9,  // 29: imdigitalwalletserver.DigitalWalletService.UserSwap:input_type -> imdigitalwalletserver.UserSwapReq
	11, // 30: imdigitalwalletserver.DigitalWalletService.QueryRechargeableTokens:input_type -> imdigitalwalletserver.QueryRechargeableTokensReq
	14, // 31: imdigitalwalletserver.DigitalWalletService.QueryUserAccountInfo:input_type -> imdigitalwalletserver.QueryUserAccountInfoReq
	20, // 32: imdigitalwalletserver.DigitalWalletService.QueryUserRechargeDetails:input_type -> imdigitalwalletserver.QueryUserRechargeDetailsReq
	23, // 33: imdigitalwalletserver.DigitalWalletService.QueryUserSwapDetails:input_type -> imdigitalwalletserver.QueryUserSwapDetailsReq
	26, // 34: imdigitalwalletserver.DigitalWalletService.BackgroundManageOpt:input_type -> imdigitalwalletserver.BackgroundManageOptReq
	4,  // 35: imdigitalwalletserver.DigitalWalletService.DigitalWalletUniversalBusiness:output_type -> imdigitalwalletserver.ReplyDigitalWalletUniversalBusiness
	6,  // 36: imdigitalwalletserver.DigitalWalletService.GenerateRechargeAddress:output_type -> imdigitalwalletserver.GenerateRechargeAddressResp
	8,  // 37: imdigitalwalletserver.DigitalWalletService.UserRecharge:output_type -> imdigitalwalletserver.UserRechargeResp
	10, // 38: imdigitalwalletserver.DigitalWalletService.UserSwap:output_type -> imdigitalwalletserver.UserSwapResp
	13, // 39: imdigitalwalletserver.DigitalWalletService.QueryRechargeableTokens:output_type -> imdigitalwalletserver.QueryRechargeableTokensResp
	17, // 40: imdigitalwalletserver.DigitalWalletService.QueryUserAccountInfo:output_type -> imdigitalwalletserver.QueryUserAccountInfoResp
	22, // 41: imdigitalwalletserver.DigitalWalletService.QueryUserRechargeDetails:output_type -> imdigitalwalletserver.QueryUserRechargeDetailsResp
	25, // 42: imdigitalwalletserver.DigitalWalletService.QueryUserSwapDetails:output_type -> imdigitalwalletserver.QueryUserSwapDetailsResp
	27, // 43: imdigitalwalletserver.DigitalWalletService.BackgroundManageOpt:output_type -> imdigitalwalletserver.BackgroundManageOptResp
	35, // [35:44] is the sub-list for method output_type
	26, // [26:35] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_imdigitalwalletserver_proto_init() }
func file_imdigitalwalletserver_proto_init() {
	if File_imdigitalwalletserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_imdigitalwalletserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDigitalWalletUniversalBusiness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDigitalWalletUniversalBusiness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateRechargeAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateRechargeAddressResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRechargeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRechargeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSwapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSwapResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRechargeableTokensReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbleToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRechargeableTokensResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserAccountInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserAccountInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserRechargeDetailsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserRechargeDetailsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserSwapDetailsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserSwapDetailsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundManageOptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imdigitalwalletserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundManageOptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imdigitalwalletserver_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imdigitalwalletserver_proto_goTypes,
		DependencyIndexes: file_imdigitalwalletserver_proto_depIdxs,
		EnumInfos:         file_imdigitalwalletserver_proto_enumTypes,
		MessageInfos:      file_imdigitalwalletserver_proto_msgTypes,
	}.Build()
	File_imdigitalwalletserver_proto = out.File
	file_imdigitalwalletserver_proto_rawDesc = nil
	file_imdigitalwalletserver_proto_goTypes = nil
	file_imdigitalwalletserver_proto_depIdxs = nil
}
