// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imdigitalwalletserver.proto

package imdigitalwalletserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DigitalWalletServiceClient is the client API for DigitalWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DigitalWalletServiceClient interface {
	// 数字钱包业务通用协议
	DigitalWalletUniversalBusiness(ctx context.Context, in *ReqDigitalWalletUniversalBusiness, opts ...grpc.CallOption) (*ReplyDigitalWalletUniversalBusiness, error)
	// 用户充值地址生成
	GenerateRechargeAddress(ctx context.Context, in *GenerateRechargeAddressReq, opts ...grpc.CallOption) (*GenerateRechargeAddressResp, error)
	// 用户充值
	UserRecharge(ctx context.Context, in *UserRechargeReq, opts ...grpc.CallOption) (*UserRechargeResp, error)
	// 用户兑换
	UserSwap(ctx context.Context, in *UserSwapReq, opts ...grpc.CallOption) (*UserSwapResp, error)
	// 查询可充值代币
	QueryRechargeableTokens(ctx context.Context, in *QueryRechargeableTokensReq, opts ...grpc.CallOption) (*QueryRechargeableTokensResp, error)
	// 查询用户账户信息（余额信息）
	QueryUserAccountInfo(ctx context.Context, in *QueryUserAccountInfoReq, opts ...grpc.CallOption) (*QueryUserAccountInfoResp, error)
	// 查询用户充值明细
	QueryUserRechargeDetails(ctx context.Context, in *QueryUserRechargeDetailsReq, opts ...grpc.CallOption) (*QueryUserRechargeDetailsResp, error)
	// 查询用户兑换明细
	QueryUserSwapDetails(ctx context.Context, in *QueryUserSwapDetailsReq, opts ...grpc.CallOption) (*QueryUserSwapDetailsResp, error)
	// 后台管理接口添加
	BackgroundManageOpt(ctx context.Context, in *BackgroundManageOptReq, opts ...grpc.CallOption) (*BackgroundManageOptResp, error)
}

type digitalWalletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDigitalWalletServiceClient(cc grpc.ClientConnInterface) DigitalWalletServiceClient {
	return &digitalWalletServiceClient{cc}
}

func (c *digitalWalletServiceClient) DigitalWalletUniversalBusiness(ctx context.Context, in *ReqDigitalWalletUniversalBusiness, opts ...grpc.CallOption) (*ReplyDigitalWalletUniversalBusiness, error) {
	out := new(ReplyDigitalWalletUniversalBusiness)
	err := c.cc.Invoke(ctx, "/imdigitalwalletserver.DigitalWalletService/DigitalWalletUniversalBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *digitalWalletServiceClient) GenerateRechargeAddress(ctx context.Context, in *GenerateRechargeAddressReq, opts ...grpc.CallOption) (*GenerateRechargeAddressResp, error) {
	out := new(GenerateRechargeAddressResp)
	err := c.cc.Invoke(ctx, "/imdigitalwalletserver.DigitalWalletService/GenerateRechargeAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *digitalWalletServiceClient) UserRecharge(ctx context.Context, in *UserRechargeReq, opts ...grpc.CallOption) (*UserRechargeResp, error) {
	out := new(UserRechargeResp)
	err := c.cc.Invoke(ctx, "/imdigitalwalletserver.DigitalWalletService/UserRecharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *digitalWalletServiceClient) UserSwap(ctx context.Context, in *UserSwapReq, opts ...grpc.CallOption) (*UserSwapResp, error) {
	out := new(UserSwapResp)
	err := c.cc.Invoke(ctx, "/imdigitalwalletserver.DigitalWalletService/UserSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *digitalWalletServiceClient) QueryRechargeableTokens(ctx context.Context, in *QueryRechargeableTokensReq, opts ...grpc.CallOption) (*QueryRechargeableTokensResp, error) {
	out := new(QueryRechargeableTokensResp)
	err := c.cc.Invoke(ctx, "/imdigitalwalletserver.DigitalWalletService/QueryRechargeableTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *digitalWalletServiceClient) QueryUserAccountInfo(ctx context.Context, in *QueryUserAccountInfoReq, opts ...grpc.CallOption) (*QueryUserAccountInfoResp, error) {
	out := new(QueryUserAccountInfoResp)
	err := c.cc.Invoke(ctx, "/imdigitalwalletserver.DigitalWalletService/QueryUserAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *digitalWalletServiceClient) QueryUserRechargeDetails(ctx context.Context, in *QueryUserRechargeDetailsReq, opts ...grpc.CallOption) (*QueryUserRechargeDetailsResp, error) {
	out := new(QueryUserRechargeDetailsResp)
	err := c.cc.Invoke(ctx, "/imdigitalwalletserver.DigitalWalletService/QueryUserRechargeDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *digitalWalletServiceClient) QueryUserSwapDetails(ctx context.Context, in *QueryUserSwapDetailsReq, opts ...grpc.CallOption) (*QueryUserSwapDetailsResp, error) {
	out := new(QueryUserSwapDetailsResp)
	err := c.cc.Invoke(ctx, "/imdigitalwalletserver.DigitalWalletService/QueryUserSwapDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *digitalWalletServiceClient) BackgroundManageOpt(ctx context.Context, in *BackgroundManageOptReq, opts ...grpc.CallOption) (*BackgroundManageOptResp, error) {
	out := new(BackgroundManageOptResp)
	err := c.cc.Invoke(ctx, "/imdigitalwalletserver.DigitalWalletService/BackgroundManageOpt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DigitalWalletServiceServer is the server API for DigitalWalletService service.
// All implementations must embed UnimplementedDigitalWalletServiceServer
// for forward compatibility
type DigitalWalletServiceServer interface {
	// 数字钱包业务通用协议
	DigitalWalletUniversalBusiness(context.Context, *ReqDigitalWalletUniversalBusiness) (*ReplyDigitalWalletUniversalBusiness, error)
	// 用户充值地址生成
	GenerateRechargeAddress(context.Context, *GenerateRechargeAddressReq) (*GenerateRechargeAddressResp, error)
	// 用户充值
	UserRecharge(context.Context, *UserRechargeReq) (*UserRechargeResp, error)
	// 用户兑换
	UserSwap(context.Context, *UserSwapReq) (*UserSwapResp, error)
	// 查询可充值代币
	QueryRechargeableTokens(context.Context, *QueryRechargeableTokensReq) (*QueryRechargeableTokensResp, error)
	// 查询用户账户信息（余额信息）
	QueryUserAccountInfo(context.Context, *QueryUserAccountInfoReq) (*QueryUserAccountInfoResp, error)
	// 查询用户充值明细
	QueryUserRechargeDetails(context.Context, *QueryUserRechargeDetailsReq) (*QueryUserRechargeDetailsResp, error)
	// 查询用户兑换明细
	QueryUserSwapDetails(context.Context, *QueryUserSwapDetailsReq) (*QueryUserSwapDetailsResp, error)
	// 后台管理接口添加
	BackgroundManageOpt(context.Context, *BackgroundManageOptReq) (*BackgroundManageOptResp, error)
	mustEmbedUnimplementedDigitalWalletServiceServer()
}

// UnimplementedDigitalWalletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDigitalWalletServiceServer struct {
}

func (UnimplementedDigitalWalletServiceServer) DigitalWalletUniversalBusiness(context.Context, *ReqDigitalWalletUniversalBusiness) (*ReplyDigitalWalletUniversalBusiness, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DigitalWalletUniversalBusiness not implemented")
}
func (UnimplementedDigitalWalletServiceServer) GenerateRechargeAddress(context.Context, *GenerateRechargeAddressReq) (*GenerateRechargeAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRechargeAddress not implemented")
}
func (UnimplementedDigitalWalletServiceServer) UserRecharge(context.Context, *UserRechargeReq) (*UserRechargeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRecharge not implemented")
}
func (UnimplementedDigitalWalletServiceServer) UserSwap(context.Context, *UserSwapReq) (*UserSwapResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSwap not implemented")
}
func (UnimplementedDigitalWalletServiceServer) QueryRechargeableTokens(context.Context, *QueryRechargeableTokensReq) (*QueryRechargeableTokensResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRechargeableTokens not implemented")
}
func (UnimplementedDigitalWalletServiceServer) QueryUserAccountInfo(context.Context, *QueryUserAccountInfoReq) (*QueryUserAccountInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserAccountInfo not implemented")
}
func (UnimplementedDigitalWalletServiceServer) QueryUserRechargeDetails(context.Context, *QueryUserRechargeDetailsReq) (*QueryUserRechargeDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserRechargeDetails not implemented")
}
func (UnimplementedDigitalWalletServiceServer) QueryUserSwapDetails(context.Context, *QueryUserSwapDetailsReq) (*QueryUserSwapDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserSwapDetails not implemented")
}
func (UnimplementedDigitalWalletServiceServer) BackgroundManageOpt(context.Context, *BackgroundManageOptReq) (*BackgroundManageOptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackgroundManageOpt not implemented")
}
func (UnimplementedDigitalWalletServiceServer) mustEmbedUnimplementedDigitalWalletServiceServer() {}

// UnsafeDigitalWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DigitalWalletServiceServer will
// result in compilation errors.
type UnsafeDigitalWalletServiceServer interface {
	mustEmbedUnimplementedDigitalWalletServiceServer()
}

func RegisterDigitalWalletServiceServer(s grpc.ServiceRegistrar, srv DigitalWalletServiceServer) {
	s.RegisterService(&DigitalWalletService_ServiceDesc, srv)
}

func _DigitalWalletService_DigitalWalletUniversalBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDigitalWalletUniversalBusiness)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigitalWalletServiceServer).DigitalWalletUniversalBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imdigitalwalletserver.DigitalWalletService/DigitalWalletUniversalBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigitalWalletServiceServer).DigitalWalletUniversalBusiness(ctx, req.(*ReqDigitalWalletUniversalBusiness))
	}
	return interceptor(ctx, in, info, handler)
}

func _DigitalWalletService_GenerateRechargeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRechargeAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigitalWalletServiceServer).GenerateRechargeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imdigitalwalletserver.DigitalWalletService/GenerateRechargeAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigitalWalletServiceServer).GenerateRechargeAddress(ctx, req.(*GenerateRechargeAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DigitalWalletService_UserRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRechargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigitalWalletServiceServer).UserRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imdigitalwalletserver.DigitalWalletService/UserRecharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigitalWalletServiceServer).UserRecharge(ctx, req.(*UserRechargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DigitalWalletService_UserSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSwapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigitalWalletServiceServer).UserSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imdigitalwalletserver.DigitalWalletService/UserSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigitalWalletServiceServer).UserSwap(ctx, req.(*UserSwapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DigitalWalletService_QueryRechargeableTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRechargeableTokensReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigitalWalletServiceServer).QueryRechargeableTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imdigitalwalletserver.DigitalWalletService/QueryRechargeableTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigitalWalletServiceServer).QueryRechargeableTokens(ctx, req.(*QueryRechargeableTokensReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DigitalWalletService_QueryUserAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigitalWalletServiceServer).QueryUserAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imdigitalwalletserver.DigitalWalletService/QueryUserAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigitalWalletServiceServer).QueryUserAccountInfo(ctx, req.(*QueryUserAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DigitalWalletService_QueryUserRechargeDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserRechargeDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigitalWalletServiceServer).QueryUserRechargeDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imdigitalwalletserver.DigitalWalletService/QueryUserRechargeDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigitalWalletServiceServer).QueryUserRechargeDetails(ctx, req.(*QueryUserRechargeDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DigitalWalletService_QueryUserSwapDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserSwapDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigitalWalletServiceServer).QueryUserSwapDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imdigitalwalletserver.DigitalWalletService/QueryUserSwapDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigitalWalletServiceServer).QueryUserSwapDetails(ctx, req.(*QueryUserSwapDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DigitalWalletService_BackgroundManageOpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackgroundManageOptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigitalWalletServiceServer).BackgroundManageOpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imdigitalwalletserver.DigitalWalletService/BackgroundManageOpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigitalWalletServiceServer).BackgroundManageOpt(ctx, req.(*BackgroundManageOptReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DigitalWalletService_ServiceDesc is the grpc.ServiceDesc for DigitalWalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DigitalWalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imdigitalwalletserver.DigitalWalletService",
	HandlerType: (*DigitalWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DigitalWalletUniversalBusiness",
			Handler:    _DigitalWalletService_DigitalWalletUniversalBusiness_Handler,
		},
		{
			MethodName: "GenerateRechargeAddress",
			Handler:    _DigitalWalletService_GenerateRechargeAddress_Handler,
		},
		{
			MethodName: "UserRecharge",
			Handler:    _DigitalWalletService_UserRecharge_Handler,
		},
		{
			MethodName: "UserSwap",
			Handler:    _DigitalWalletService_UserSwap_Handler,
		},
		{
			MethodName: "QueryRechargeableTokens",
			Handler:    _DigitalWalletService_QueryRechargeableTokens_Handler,
		},
		{
			MethodName: "QueryUserAccountInfo",
			Handler:    _DigitalWalletService_QueryUserAccountInfo_Handler,
		},
		{
			MethodName: "QueryUserRechargeDetails",
			Handler:    _DigitalWalletService_QueryUserRechargeDetails_Handler,
		},
		{
			MethodName: "QueryUserSwapDetails",
			Handler:    _DigitalWalletService_QueryUserSwapDetails_Handler,
		},
		{
			MethodName: "BackgroundManageOpt",
			Handler:    _DigitalWalletService_BackgroundManageOpt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imdigitalwalletserver.proto",
}
