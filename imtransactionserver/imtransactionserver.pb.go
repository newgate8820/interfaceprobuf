// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: imtransactionserver.proto

package imstransactionserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 數字貨幣類型
type DigtialType int32

const (
	DigtialType_BTC  DigtialType = 0 // 比特币
	DigtialType_LTC  DigtialType = 1 //莱特币
	DigtialType_ETH  DigtialType = 2 //以太坊
	DigtialType_USDT DigtialType = 3
)

// Enum value maps for DigtialType.
var (
	DigtialType_name = map[int32]string{
		0: "BTC",
		1: "LTC",
		2: "ETH",
		3: "USDT",
	}
	DigtialType_value = map[string]int32{
		"BTC":  0,
		"LTC":  1,
		"ETH":  2,
		"USDT": 3,
	}
)

func (x DigtialType) Enum() *DigtialType {
	p := new(DigtialType)
	*p = x
	return p
}

func (x DigtialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigtialType) Descriptor() protoreflect.EnumDescriptor {
	return file_imtransactionserver_proto_enumTypes[0].Descriptor()
}

func (DigtialType) Type() protoreflect.EnumType {
	return &file_imtransactionserver_proto_enumTypes[0]
}

func (x DigtialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigtialType.Descriptor instead.
func (DigtialType) EnumDescriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{0}
}

// 數字貨幣類型
type ErrorCode int32

const (
	ErrorCode_SUCCESS               ErrorCode = 0 // 成功
	ErrorCode_FAILED                ErrorCode = 1 //失敗
	ErrorCode_INSUFFICIENT          ErrorCode = 2 //地址余额不足,转账币种余额不足
	ErrorCode_TRANSACTION_NOT_EXIST ErrorCode = 3 //交易不存在
	ErrorCode_INSUFFICIENT_TRANSFEE ErrorCode = 4 //像token转账,eth作手续费不足
	ErrorCode_INVALID_ADDRESS       ErrorCode = 5
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED",
		2: "INSUFFICIENT",
		3: "TRANSACTION_NOT_EXIST",
		4: "INSUFFICIENT_TRANSFEE",
		5: "INVALID_ADDRESS",
	}
	ErrorCode_value = map[string]int32{
		"SUCCESS":               0,
		"FAILED":                1,
		"INSUFFICIENT":          2,
		"TRANSACTION_NOT_EXIST": 3,
		"INSUFFICIENT_TRANSFEE": 4,
		"INVALID_ADDRESS":       5,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imtransactionserver_proto_enumTypes[1].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_imtransactionserver_proto_enumTypes[1]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{1}
}

type UserPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	EncryPriv string `protobuf:"bytes,2,opt,name=EncryPriv,proto3" json:"EncryPriv,omitempty"`
}

func (x *UserPrivate) Reset() {
	*x = UserPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPrivate) ProtoMessage() {}

func (x *UserPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPrivate.ProtoReflect.Descriptor instead.
func (*UserPrivate) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{0}
}

func (x *UserPrivate) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserPrivate) GetEncryPriv() string {
	if x != nil {
		return x.EncryPriv
	}
	return ""
}

// 获取此次交易手续费請求
type DivideMultiSigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DivideId        int32          `protobuf:"varint,1,opt,name=DivideId,proto3" json:"DivideId,omitempty"`         //數字貨幣類型
	CurrencyId      int32          `protobuf:"varint,2,opt,name=CurrencyId,proto3" json:"CurrencyId,omitempty"`     // 發送方地址
	FromAddress     string         `protobuf:"bytes,3,opt,name=FromAddress,proto3" json:"FromAddress,omitempty"`    // 加密的私鑰
	ToWalletType    int32          `protobuf:"varint,4,opt,name=ToWalletType,proto3" json:"ToWalletType,omitempty"` // 发送方的userId
	ToAddress       string         `protobuf:"bytes,5,opt,name=ToAddress,proto3" json:"ToAddress,omitempty"`        //转向的地址
	Amount          string         `protobuf:"bytes,6,opt,name=Amount,proto3" json:"Amount,omitempty"`              //交易余额  比如 BTC: 0.0001 BTC
	CreateTimestamp int32          `protobuf:"varint,7,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"`
	Signs           []*UserPrivate `protobuf:"bytes,8,rep,name=Signs,proto3" json:"Signs,omitempty"`
	M               int32          `protobuf:"varint,9,opt,name=M,proto3" json:"M,omitempty"`
}

func (x *DivideMultiSigReq) Reset() {
	*x = DivideMultiSigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DivideMultiSigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivideMultiSigReq) ProtoMessage() {}

func (x *DivideMultiSigReq) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivideMultiSigReq.ProtoReflect.Descriptor instead.
func (*DivideMultiSigReq) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{1}
}

func (x *DivideMultiSigReq) GetDivideId() int32 {
	if x != nil {
		return x.DivideId
	}
	return 0
}

func (x *DivideMultiSigReq) GetCurrencyId() int32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *DivideMultiSigReq) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *DivideMultiSigReq) GetToWalletType() int32 {
	if x != nil {
		return x.ToWalletType
	}
	return 0
}

func (x *DivideMultiSigReq) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *DivideMultiSigReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DivideMultiSigReq) GetCreateTimestamp() int32 {
	if x != nil {
		return x.CreateTimestamp
	}
	return 0
}

func (x *DivideMultiSigReq) GetSigns() []*UserPrivate {
	if x != nil {
		return x.Signs
	}
	return nil
}

func (x *DivideMultiSigReq) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

// 获取此次交易手续费返回
type DivideMultiSigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode ErrorCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=imstransactionserver.ErrorCode" json:"errCode,omitempty"` // 返回状态
	TxId    string    `protobuf:"bytes,2,opt,name=TxId,proto3" json:"TxId,omitempty"`
}

func (x *DivideMultiSigRsp) Reset() {
	*x = DivideMultiSigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DivideMultiSigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivideMultiSigRsp) ProtoMessage() {}

func (x *DivideMultiSigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivideMultiSigRsp.ProtoReflect.Descriptor instead.
func (*DivideMultiSigRsp) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{2}
}

func (x *DivideMultiSigRsp) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_SUCCESS
}

func (x *DivideMultiSigRsp) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type CheckRawTransactionDoneRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode ErrorCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=imstransactionserver.ErrorCode" json:"errCode,omitempty"` // 返回状态
	IsDone  bool      `protobuf:"varint,2,opt,name=isDone,proto3" json:"isDone,omitempty"`                                       // 是否交易確認完成  true 完成 ，false  未完成
}

func (x *CheckRawTransactionDoneRsp) Reset() {
	*x = CheckRawTransactionDoneRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRawTransactionDoneRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRawTransactionDoneRsp) ProtoMessage() {}

func (x *CheckRawTransactionDoneRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRawTransactionDoneRsp.ProtoReflect.Descriptor instead.
func (*CheckRawTransactionDoneRsp) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{3}
}

func (x *CheckRawTransactionDoneRsp) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_SUCCESS
}

func (x *CheckRawTransactionDoneRsp) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

// 获取地址余额
type GetAddressBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigType DigtialType `protobuf:"varint,1,opt,name=DigType,proto3,enum=imstransactionserver.DigtialType" json:"DigType,omitempty"` //數字貨幣類型
	Address string      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`                                        // 交易的ID
}

func (x *GetAddressBalanceReq) Reset() {
	*x = GetAddressBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressBalanceReq) ProtoMessage() {}

func (x *GetAddressBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressBalanceReq.ProtoReflect.Descriptor instead.
func (*GetAddressBalanceReq) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{4}
}

func (x *GetAddressBalanceReq) GetDigType() DigtialType {
	if x != nil {
		return x.DigType
	}
	return DigtialType_BTC
}

func (x *GetAddressBalanceReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetAddressBalanceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode ErrorCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=imstransactionserver.ErrorCode" json:"errCode,omitempty"` // 返回状态
	Bal     string    `protobuf:"bytes,2,opt,name=bal,proto3" json:"bal,omitempty"`                                              // 余额
}

func (x *GetAddressBalanceRsp) Reset() {
	*x = GetAddressBalanceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressBalanceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressBalanceRsp) ProtoMessage() {}

func (x *GetAddressBalanceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressBalanceRsp.ProtoReflect.Descriptor instead.
func (*GetAddressBalanceRsp) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{5}
}

func (x *GetAddressBalanceRsp) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_SUCCESS
}

func (x *GetAddressBalanceRsp) GetBal() string {
	if x != nil {
		return x.Bal
	}
	return ""
}

type CheckRawTransactionDoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigType DigtialType `protobuf:"varint,1,opt,name=DigType,proto3,enum=imstransactionserver.DigtialType" json:"DigType,omitempty"` //數字貨幣類型
	Txid    string      `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`                                              // 交易的ID
}

func (x *CheckRawTransactionDoneReq) Reset() {
	*x = CheckRawTransactionDoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRawTransactionDoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRawTransactionDoneReq) ProtoMessage() {}

func (x *CheckRawTransactionDoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRawTransactionDoneReq.ProtoReflect.Descriptor instead.
func (*CheckRawTransactionDoneReq) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{6}
}

func (x *CheckRawTransactionDoneReq) GetDigType() DigtialType {
	if x != nil {
		return x.DigType
	}
	return DigtialType_BTC
}

func (x *CheckRawTransactionDoneReq) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

// 发送rawtransaction交易
type SendRawTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigType DigtialType `protobuf:"varint,1,opt,name=DigType,proto3,enum=imstransactionserver.DigtialType" json:"DigType,omitempty"` //數字貨幣類型
	// string FromAddress = 2; // 發送方地址
	// string FromPrvKey = 3; // 加密的私鑰
	// int32 fromUserId = 4; // 发送方的userId
	// string ToAddress = 5; //转向的地址
	// string Amount = 6; //交易余额  比如 BTC: 0.0001 BTC
	RawData string `protobuf:"bytes,2,opt,name=RawData,proto3" json:"RawData,omitempty"`
}

func (x *SendRawTransactionReq) Reset() {
	*x = SendRawTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRawTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRawTransactionReq) ProtoMessage() {}

func (x *SendRawTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRawTransactionReq.ProtoReflect.Descriptor instead.
func (*SendRawTransactionReq) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{7}
}

func (x *SendRawTransactionReq) GetDigType() DigtialType {
	if x != nil {
		return x.DigType
	}
	return DigtialType_BTC
}

func (x *SendRawTransactionReq) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

// 发送rawtransaction交易
type SendRawTransactionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode ErrorCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=imstransactionserver.ErrorCode" json:"errCode,omitempty"` // 返回状态
	Txid    string    `protobuf:"bytes,2,opt,name=Txid,proto3" json:"Txid,omitempty"`                                            // 交易的ID
}

func (x *SendRawTransactionRsp) Reset() {
	*x = SendRawTransactionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRawTransactionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRawTransactionRsp) ProtoMessage() {}

func (x *SendRawTransactionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRawTransactionRsp.ProtoReflect.Descriptor instead.
func (*SendRawTransactionRsp) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{8}
}

func (x *SendRawTransactionRsp) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_SUCCESS
}

func (x *SendRawTransactionRsp) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

// 获取此次交易手续费請求
type GetRawTransactionFeeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigType     DigtialType `protobuf:"varint,1,opt,name=DigType,proto3,enum=imstransactionserver.DigtialType" json:"DigType,omitempty"` //數字貨幣類型
	FromAddress string      `protobuf:"bytes,2,opt,name=FromAddress,proto3" json:"FromAddress,omitempty"`                                // 發送方地址
	FromPrvKey  string      `protobuf:"bytes,3,opt,name=FromPrvKey,proto3" json:"FromPrvKey,omitempty"`                                  // 加密的私鑰
	FromUserId  int64       `protobuf:"varint,4,opt,name=fromUserId,proto3" json:"fromUserId,omitempty"`                                 // 发送方的userId
	ToAddress   string      `protobuf:"bytes,5,opt,name=ToAddress,proto3" json:"ToAddress,omitempty"`                                    //转向的地址
	Amount      string      `protobuf:"bytes,6,opt,name=Amount,proto3" json:"Amount,omitempty"`                                          //交易余额  比如 BTC: 0.0001 BTC
}

func (x *GetRawTransactionFeeReq) Reset() {
	*x = GetRawTransactionFeeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawTransactionFeeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawTransactionFeeReq) ProtoMessage() {}

func (x *GetRawTransactionFeeReq) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawTransactionFeeReq.ProtoReflect.Descriptor instead.
func (*GetRawTransactionFeeReq) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{9}
}

func (x *GetRawTransactionFeeReq) GetDigType() DigtialType {
	if x != nil {
		return x.DigType
	}
	return DigtialType_BTC
}

func (x *GetRawTransactionFeeReq) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *GetRawTransactionFeeReq) GetFromPrvKey() string {
	if x != nil {
		return x.FromPrvKey
	}
	return ""
}

func (x *GetRawTransactionFeeReq) GetFromUserId() int64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *GetRawTransactionFeeReq) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *GetRawTransactionFeeReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// 获取此次交易手续费返回
type GetRawTransactionFeeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode ErrorCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=imstransactionserver.ErrorCode" json:"errCode,omitempty"` // 返回状态
	Fee     string    `protobuf:"bytes,2,opt,name=Fee,proto3" json:"Fee,omitempty"`                                              // 手續費  比如  0.0001 BTc
	Bal     string    `protobuf:"bytes,3,opt,name=Bal,proto3" json:"Bal,omitempty"`
	TxId    string    `protobuf:"bytes,4,opt,name=TxId,proto3" json:"TxId,omitempty"`
	RawData string    `protobuf:"bytes,5,opt,name=RawData,proto3" json:"RawData,omitempty"`
}

func (x *GetRawTransactionFeeRsp) Reset() {
	*x = GetRawTransactionFeeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawTransactionFeeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawTransactionFeeRsp) ProtoMessage() {}

func (x *GetRawTransactionFeeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawTransactionFeeRsp.ProtoReflect.Descriptor instead.
func (*GetRawTransactionFeeRsp) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{10}
}

func (x *GetRawTransactionFeeRsp) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_SUCCESS
}

func (x *GetRawTransactionFeeRsp) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *GetRawTransactionFeeRsp) GetBal() string {
	if x != nil {
		return x.Bal
	}
	return ""
}

func (x *GetRawTransactionFeeRsp) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *GetRawTransactionFeeRsp) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

// 公私鑰匙信息
type PubPrvKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey   string `protobuf:"bytes,1,opt,name=PubKey,proto3" json:"PubKey,omitempty"`     //生成的公钥
	PrvKey   string `protobuf:"bytes,2,opt,name=PrvKey,proto3" json:"PrvKey,omitempty"`     //生成的私鑰匙
	Mnemonic string `protobuf:"bytes,3,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"` // 助記憶詞
}

func (x *PubPrvKeyInfo) Reset() {
	*x = PubPrvKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubPrvKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubPrvKeyInfo) ProtoMessage() {}

func (x *PubPrvKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubPrvKeyInfo.ProtoReflect.Descriptor instead.
func (*PubPrvKeyInfo) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{11}
}

func (x *PubPrvKeyInfo) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *PubPrvKeyInfo) GetPrvKey() string {
	if x != nil {
		return x.PrvKey
	}
	return ""
}

func (x *PubPrvKeyInfo) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

// 地址信息
type AddressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string         `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` //生成的地址
	PubPrv  *PubPrvKeyInfo `protobuf:"bytes,2,opt,name=pubPrv,proto3" json:"pubPrv,omitempty"`   //公私钥信息
}

func (x *AddressInfo) Reset() {
	*x = AddressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressInfo) ProtoMessage() {}

func (x *AddressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressInfo.ProtoReflect.Descriptor instead.
func (*AddressInfo) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{12}
}

func (x *AddressInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddressInfo) GetPubPrv() *PubPrvKeyInfo {
	if x != nil {
		return x.PubPrv
	}
	return nil
}

// 创建钱包单签地址 請求
type CreateWalletAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64       `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用戶的UserID
	Language   string      `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`            // 客户端语言，cn 中国，en 英文
	DiatalType DigtialType `protobuf:"varint,3,opt,name=DiatalType,proto3,enum=imstransactionserver.DigtialType" json:"DiatalType,omitempty"`
}

func (x *CreateWalletAddressReq) Reset() {
	*x = CreateWalletAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletAddressReq) ProtoMessage() {}

func (x *CreateWalletAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletAddressReq.ProtoReflect.Descriptor instead.
func (*CreateWalletAddressReq) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{13}
}

func (x *CreateWalletAddressReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateWalletAddressReq) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *CreateWalletAddressReq) GetDiatalType() DigtialType {
	if x != nil {
		return x.DiatalType
	}
	return DigtialType_BTC
}

// 创建钱包单签地址 返回
type CreateWalletAddressRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode     ErrorCode    `protobuf:"varint,1,opt,name=errCode,proto3,enum=imstransactionserver.ErrorCode" json:"errCode,omitempty"` // 返回状态
	AddressInfo *AddressInfo `protobuf:"bytes,2,opt,name=addressInfo,proto3" json:"addressInfo,omitempty"`                              //錢包地址信息
}

func (x *CreateWalletAddressRsp) Reset() {
	*x = CreateWalletAddressRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletAddressRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletAddressRsp) ProtoMessage() {}

func (x *CreateWalletAddressRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletAddressRsp.ProtoReflect.Descriptor instead.
func (*CreateWalletAddressRsp) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{14}
}

func (x *CreateWalletAddressRsp) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_SUCCESS
}

func (x *CreateWalletAddressRsp) GetAddressInfo() *AddressInfo {
	if x != nil {
		return x.AddressInfo
	}
	return nil
}

// 创建btc类型的多签地址
type CreateBtcTypeMultiSigAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigType    DigtialType `protobuf:"varint,1,opt,name=DigType,proto3,enum=imstransactionserver.DigtialType" json:"DigType,omitempty"` //數字貨幣類型
	WalletType int32       `protobuf:"varint,2,opt,name=WalletType,proto3" json:"WalletType,omitempty"`
	M          int32       `protobuf:"varint,3,opt,name=M,proto3" json:"M,omitempty"`
	PubKeys    []string    `protobuf:"bytes,4,rep,name=PubKeys,proto3" json:"PubKeys,omitempty"`
}

func (x *CreateBtcTypeMultiSigAddressReq) Reset() {
	*x = CreateBtcTypeMultiSigAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBtcTypeMultiSigAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBtcTypeMultiSigAddressReq) ProtoMessage() {}

func (x *CreateBtcTypeMultiSigAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBtcTypeMultiSigAddressReq.ProtoReflect.Descriptor instead.
func (*CreateBtcTypeMultiSigAddressReq) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{15}
}

func (x *CreateBtcTypeMultiSigAddressReq) GetDigType() DigtialType {
	if x != nil {
		return x.DigType
	}
	return DigtialType_BTC
}

func (x *CreateBtcTypeMultiSigAddressReq) GetWalletType() int32 {
	if x != nil {
		return x.WalletType
	}
	return 0
}

func (x *CreateBtcTypeMultiSigAddressReq) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *CreateBtcTypeMultiSigAddressReq) GetPubKeys() []string {
	if x != nil {
		return x.PubKeys
	}
	return nil
}

// 创建btc类型的多签地址 返回
type CreateBtcTypeMultiSigAddressRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode      ErrorCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=imstransactionserver.ErrorCode" json:"errCode,omitempty"` // 返回状态
	Address      string    `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`                                      // 多签地址
	RedeemScript string    `protobuf:"bytes,3,opt,name=RedeemScript,proto3" json:"RedeemScript,omitempty"`                            // 赎回脚本
}

func (x *CreateBtcTypeMultiSigAddressRsp) Reset() {
	*x = CreateBtcTypeMultiSigAddressRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBtcTypeMultiSigAddressRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBtcTypeMultiSigAddressRsp) ProtoMessage() {}

func (x *CreateBtcTypeMultiSigAddressRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBtcTypeMultiSigAddressRsp.ProtoReflect.Descriptor instead.
func (*CreateBtcTypeMultiSigAddressRsp) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{16}
}

func (x *CreateBtcTypeMultiSigAddressRsp) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_SUCCESS
}

func (x *CreateBtcTypeMultiSigAddressRsp) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateBtcTypeMultiSigAddressRsp) GetRedeemScript() string {
	if x != nil {
		return x.RedeemScript
	}
	return ""
}

// 创建eth类型的多签地址
type CreateEthTypeMultiSigAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator    string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Private    string   `protobuf:"bytes,2,opt,name=private,proto3" json:"private,omitempty"`
	M          int32    `protobuf:"varint,3,opt,name=M,proto3" json:"M,omitempty"`
	Owners     []string `protobuf:"bytes,4,rep,name=Owners,proto3" json:"Owners,omitempty"`
	DevideId   int32    `protobuf:"varint,5,opt,name=DevideId,proto3" json:"DevideId,omitempty"`
	CurrencyId int32    `protobuf:"varint,6,opt,name=CurrencyId,proto3" json:"CurrencyId,omitempty"`
	WalletType int32    `protobuf:"varint,7,opt,name=WalletType,proto3" json:"WalletType,omitempty"`
}

func (x *CreateEthTypeMultiSigAddressReq) Reset() {
	*x = CreateEthTypeMultiSigAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEthTypeMultiSigAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEthTypeMultiSigAddressReq) ProtoMessage() {}

func (x *CreateEthTypeMultiSigAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEthTypeMultiSigAddressReq.ProtoReflect.Descriptor instead.
func (*CreateEthTypeMultiSigAddressReq) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{17}
}

func (x *CreateEthTypeMultiSigAddressReq) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateEthTypeMultiSigAddressReq) GetPrivate() string {
	if x != nil {
		return x.Private
	}
	return ""
}

func (x *CreateEthTypeMultiSigAddressReq) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *CreateEthTypeMultiSigAddressReq) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *CreateEthTypeMultiSigAddressReq) GetDevideId() int32 {
	if x != nil {
		return x.DevideId
	}
	return 0
}

func (x *CreateEthTypeMultiSigAddressReq) GetCurrencyId() int32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *CreateEthTypeMultiSigAddressReq) GetWalletType() int32 {
	if x != nil {
		return x.WalletType
	}
	return 0
}

// 创建eth类型的多签地址 返回
type CreateEthTypeMultiSigAddressRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode ErrorCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=imstransactionserver.ErrorCode" json:"errCode,omitempty"` // 返回状态
	TxId    string    `protobuf:"bytes,2,opt,name=TxId,proto3" json:"TxId,omitempty"`                                            // 交易ID
}

func (x *CreateEthTypeMultiSigAddressRsp) Reset() {
	*x = CreateEthTypeMultiSigAddressRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEthTypeMultiSigAddressRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEthTypeMultiSigAddressRsp) ProtoMessage() {}

func (x *CreateEthTypeMultiSigAddressRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEthTypeMultiSigAddressRsp.ProtoReflect.Descriptor instead.
func (*CreateEthTypeMultiSigAddressRsp) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{18}
}

func (x *CreateEthTypeMultiSigAddressRsp) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_SUCCESS
}

func (x *CreateEthTypeMultiSigAddressRsp) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

// 加密秘钥信息
type EncryPrvKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryPrvKey string `protobuf:"bytes,1,opt,name=encryPrvKey,proto3" json:"encryPrvKey,omitempty"`
	UserId      int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Address     string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *EncryPrvKeyInfo) Reset() {
	*x = EncryPrvKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryPrvKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryPrvKeyInfo) ProtoMessage() {}

func (x *EncryPrvKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryPrvKeyInfo.ProtoReflect.Descriptor instead.
func (*EncryPrvKeyInfo) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{19}
}

func (x *EncryPrvKeyInfo) GetEncryPrvKey() string {
	if x != nil {
		return x.EncryPrvKey
	}
	return ""
}

func (x *EncryPrvKeyInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *EncryPrvKeyInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// 发送btc类型的多签交易
type SendBtcTypeMultiSigTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigType      DigtialType        `protobuf:"varint,1,opt,name=DigType,proto3,enum=imstransactionserver.DigtialType" json:"DigType,omitempty"` //數字貨幣類型
	FromAddr     string             `protobuf:"bytes,2,opt,name=FromAddr,proto3" json:"FromAddr,omitempty"`                                      // 發送方地址
	ToAddr       string             `protobuf:"bytes,3,opt,name=ToAddr,proto3" json:"ToAddr,omitempty"`                                          //转向的地址
	Amount       string             `protobuf:"bytes,4,opt,name=Amount,proto3" json:"Amount,omitempty"`                                          //交易余额  比如 BTC: 0.0001 BTC
	RedeemScript string             `protobuf:"bytes,5,opt,name=RedeemScript,proto3" json:"RedeemScript,omitempty"`                              //
	PrvKeys      []*EncryPrvKeyInfo `protobuf:"bytes,6,rep,name=PrvKeys,proto3" json:"PrvKeys,omitempty"`                                        //
}

func (x *SendBtcTypeMultiSigTransactionReq) Reset() {
	*x = SendBtcTypeMultiSigTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendBtcTypeMultiSigTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBtcTypeMultiSigTransactionReq) ProtoMessage() {}

func (x *SendBtcTypeMultiSigTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBtcTypeMultiSigTransactionReq.ProtoReflect.Descriptor instead.
func (*SendBtcTypeMultiSigTransactionReq) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{20}
}

func (x *SendBtcTypeMultiSigTransactionReq) GetDigType() DigtialType {
	if x != nil {
		return x.DigType
	}
	return DigtialType_BTC
}

func (x *SendBtcTypeMultiSigTransactionReq) GetFromAddr() string {
	if x != nil {
		return x.FromAddr
	}
	return ""
}

func (x *SendBtcTypeMultiSigTransactionReq) GetToAddr() string {
	if x != nil {
		return x.ToAddr
	}
	return ""
}

func (x *SendBtcTypeMultiSigTransactionReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SendBtcTypeMultiSigTransactionReq) GetRedeemScript() string {
	if x != nil {
		return x.RedeemScript
	}
	return ""
}

func (x *SendBtcTypeMultiSigTransactionReq) GetPrvKeys() []*EncryPrvKeyInfo {
	if x != nil {
		return x.PrvKeys
	}
	return nil
}

// 发送eth类型的多签交易
type SendEthTypeMultiSigTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigType  DigtialType        `protobuf:"varint,1,opt,name=DigType,proto3,enum=imstransactionserver.DigtialType" json:"DigType,omitempty"` //數字貨幣類型
	ConAddr  string             `protobuf:"bytes,2,opt,name=ConAddr,proto3" json:"ConAddr,omitempty"`                                        // 發送方地址
	ToAddr   string             `protobuf:"bytes,3,opt,name=ToAddr,proto3" json:"ToAddr,omitempty"`                                          //转向的地址
	Amount   string             `protobuf:"bytes,4,opt,name=Amount,proto3" json:"Amount,omitempty"`                                          //交易余额  比如 BTC: 0.0001 BTC
	USDTAddr string             `protobuf:"bytes,5,opt,name=USDTAddr,proto3" json:"USDTAddr,omitempty"`                                      //
	PrvKeys  []*EncryPrvKeyInfo `protobuf:"bytes,6,rep,name=PrvKeys,proto3" json:"PrvKeys,omitempty"`                                        //
}

func (x *SendEthTypeMultiSigTransactionReq) Reset() {
	*x = SendEthTypeMultiSigTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEthTypeMultiSigTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEthTypeMultiSigTransactionReq) ProtoMessage() {}

func (x *SendEthTypeMultiSigTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEthTypeMultiSigTransactionReq.ProtoReflect.Descriptor instead.
func (*SendEthTypeMultiSigTransactionReq) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{21}
}

func (x *SendEthTypeMultiSigTransactionReq) GetDigType() DigtialType {
	if x != nil {
		return x.DigType
	}
	return DigtialType_BTC
}

func (x *SendEthTypeMultiSigTransactionReq) GetConAddr() string {
	if x != nil {
		return x.ConAddr
	}
	return ""
}

func (x *SendEthTypeMultiSigTransactionReq) GetToAddr() string {
	if x != nil {
		return x.ToAddr
	}
	return ""
}

func (x *SendEthTypeMultiSigTransactionReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SendEthTypeMultiSigTransactionReq) GetUSDTAddr() string {
	if x != nil {
		return x.USDTAddr
	}
	return ""
}

func (x *SendEthTypeMultiSigTransactionReq) GetPrvKeys() []*EncryPrvKeyInfo {
	if x != nil {
		return x.PrvKeys
	}
	return nil
}

// 发送交易
type SendMultiSigTransactionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode ErrorCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=imstransactionserver.ErrorCode" json:"errCode,omitempty"` // 返回状态
	Txs     []string  `protobuf:"bytes,2,rep,name=Txs,proto3" json:"Txs,omitempty"`                                              // 交易的ID
}

func (x *SendMultiSigTransactionRsp) Reset() {
	*x = SendMultiSigTransactionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imtransactionserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMultiSigTransactionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMultiSigTransactionRsp) ProtoMessage() {}

func (x *SendMultiSigTransactionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imtransactionserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMultiSigTransactionRsp.ProtoReflect.Descriptor instead.
func (*SendMultiSigTransactionRsp) Descriptor() ([]byte, []int) {
	return file_imtransactionserver_proto_rawDescGZIP(), []int{22}
}

func (x *SendMultiSigTransactionRsp) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_SUCCESS
}

func (x *SendMultiSigTransactionRsp) GetTxs() []string {
	if x != nil {
		return x.Txs
	}
	return nil
}

var File_imtransactionserver_proto protoreflect.FileDescriptor

var file_imtransactionserver_proto_rawDesc = []byte{
	0x0a, 0x19, 0x69, 0x6d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x69, 0x6d, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x22, 0x45, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x50, 0x72, 0x69, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x50, 0x72, 0x69, 0x76, 0x22, 0xbc, 0x02, 0x0a, 0x11, 0x44, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x72,
	0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x54, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x37, 0x0a, 0x05, 0x53, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x53, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x4d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x4d, 0x22, 0x62, 0x0a, 0x11, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x52, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x1a, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x22, 0x6d, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x07, 0x44, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x67,
	0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x44, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x63, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x61, 0x6c,
	0x22, 0x6d, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x3b,
	0x0a, 0x07, 0x44, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x67, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x44, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22,
	0x6e, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x07, 0x44, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x73, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x69, 0x67, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x44, 0x69,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x66, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x73, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x78, 0x69, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x07, 0x44, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x67, 0x74,
	0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x44, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x76, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x76, 0x4b,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46, 0x65,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x42, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x5b, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x50, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72,
	0x76, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x72, 0x76, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x22, 0x64,
	0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x50, 0x72,
	0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x75, 0x62, 0x50, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x50, 0x72, 0x76, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x44, 0x69, 0x61, 0x74, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x69, 0x67, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x44, 0x69, 0x61,
	0x74, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x73, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xa6, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x74, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x07, 0x44, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x69, 0x67, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x44, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x4d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x4d, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x74, 0x63, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x39, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x0c, 0x0a, 0x01, 0x4d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x4d, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x70, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x78, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x50, 0x72, 0x76,
	0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x50, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x50, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x91, 0x02, 0x0a,
	0x21, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x74, 0x63, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x3b, 0x0a, 0x07, 0x44, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x67, 0x74, 0x69,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x44, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x3f, 0x0a, 0x07, 0x50, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x50, 0x72, 0x76,
	0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x50, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x73,
	0x22, 0x87, 0x02, 0x0a, 0x21, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x07, 0x44, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x69, 0x67, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x44, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x53, 0x44, 0x54, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x55, 0x53, 0x44, 0x54, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3f, 0x0a, 0x07, 0x50, 0x72, 0x76,
	0x4b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6d, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x50, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x50, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x69, 0x0a, 0x1a, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x73, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x54, 0x78, 0x73, 0x2a, 0x32, 0x0a, 0x0b, 0x44, 0x69, 0x67, 0x74, 0x69, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x54, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x54, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x54, 0x48, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x55, 0x53, 0x44, 0x54, 0x10, 0x03, 0x2a, 0x81, 0x01, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x32, 0x92, 0x0a,
	0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x73, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x2d, 0x2e, 0x69,
	0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x69, 0x6d,
	0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x12,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61,
	0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x2b, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7f,
	0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x2e, 0x69, 0x6d, 0x73, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x69, 0x6d,
	0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x2a, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x8d,
	0x01, 0x0a, 0x1e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x74, 0x63, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x74, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x69, 0x6d, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x8d,
	0x01, 0x0a, 0x1e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x69, 0x6d, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x94,
	0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x74, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x74, 0x63, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x35, 0x2e, 0x69,
	0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x74, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x2e, 0x69,
	0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x35, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0e,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x12, 0x27,
	0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x42, 0x26, 0x5a, 0x24, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_imtransactionserver_proto_rawDescOnce sync.Once
	file_imtransactionserver_proto_rawDescData = file_imtransactionserver_proto_rawDesc
)

func file_imtransactionserver_proto_rawDescGZIP() []byte {
	file_imtransactionserver_proto_rawDescOnce.Do(func() {
		file_imtransactionserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_imtransactionserver_proto_rawDescData)
	})
	return file_imtransactionserver_proto_rawDescData
}

var file_imtransactionserver_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_imtransactionserver_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_imtransactionserver_proto_goTypes = []interface{}{
	(DigtialType)(0),                          // 0: imstransactionserver.DigtialType
	(ErrorCode)(0),                            // 1: imstransactionserver.ErrorCode
	(*UserPrivate)(nil),                       // 2: imstransactionserver.UserPrivate
	(*DivideMultiSigReq)(nil),                 // 3: imstransactionserver.DivideMultiSigReq
	(*DivideMultiSigRsp)(nil),                 // 4: imstransactionserver.DivideMultiSigRsp
	(*CheckRawTransactionDoneRsp)(nil),        // 5: imstransactionserver.CheckRawTransactionDoneRsp
	(*GetAddressBalanceReq)(nil),              // 6: imstransactionserver.GetAddressBalanceReq
	(*GetAddressBalanceRsp)(nil),              // 7: imstransactionserver.GetAddressBalanceRsp
	(*CheckRawTransactionDoneReq)(nil),        // 8: imstransactionserver.CheckRawTransactionDoneReq
	(*SendRawTransactionReq)(nil),             // 9: imstransactionserver.SendRawTransactionReq
	(*SendRawTransactionRsp)(nil),             // 10: imstransactionserver.SendRawTransactionRsp
	(*GetRawTransactionFeeReq)(nil),           // 11: imstransactionserver.GetRawTransactionFeeReq
	(*GetRawTransactionFeeRsp)(nil),           // 12: imstransactionserver.GetRawTransactionFeeRsp
	(*PubPrvKeyInfo)(nil),                     // 13: imstransactionserver.PubPrvKeyInfo
	(*AddressInfo)(nil),                       // 14: imstransactionserver.AddressInfo
	(*CreateWalletAddressReq)(nil),            // 15: imstransactionserver.CreateWalletAddressReq
	(*CreateWalletAddressRsp)(nil),            // 16: imstransactionserver.CreateWalletAddressRsp
	(*CreateBtcTypeMultiSigAddressReq)(nil),   // 17: imstransactionserver.CreateBtcTypeMultiSigAddressReq
	(*CreateBtcTypeMultiSigAddressRsp)(nil),   // 18: imstransactionserver.CreateBtcTypeMultiSigAddressRsp
	(*CreateEthTypeMultiSigAddressReq)(nil),   // 19: imstransactionserver.CreateEthTypeMultiSigAddressReq
	(*CreateEthTypeMultiSigAddressRsp)(nil),   // 20: imstransactionserver.CreateEthTypeMultiSigAddressRsp
	(*EncryPrvKeyInfo)(nil),                   // 21: imstransactionserver.EncryPrvKeyInfo
	(*SendBtcTypeMultiSigTransactionReq)(nil), // 22: imstransactionserver.SendBtcTypeMultiSigTransactionReq
	(*SendEthTypeMultiSigTransactionReq)(nil), // 23: imstransactionserver.SendEthTypeMultiSigTransactionReq
	(*SendMultiSigTransactionRsp)(nil),        // 24: imstransactionserver.SendMultiSigTransactionRsp
}
var file_imtransactionserver_proto_depIdxs = []int32{
	2,  // 0: imstransactionserver.DivideMultiSigReq.Signs:type_name -> imstransactionserver.UserPrivate
	1,  // 1: imstransactionserver.DivideMultiSigRsp.errCode:type_name -> imstransactionserver.ErrorCode
	1,  // 2: imstransactionserver.CheckRawTransactionDoneRsp.errCode:type_name -> imstransactionserver.ErrorCode
	0,  // 3: imstransactionserver.GetAddressBalanceReq.DigType:type_name -> imstransactionserver.DigtialType
	1,  // 4: imstransactionserver.GetAddressBalanceRsp.errCode:type_name -> imstransactionserver.ErrorCode
	0,  // 5: imstransactionserver.CheckRawTransactionDoneReq.DigType:type_name -> imstransactionserver.DigtialType
	0,  // 6: imstransactionserver.SendRawTransactionReq.DigType:type_name -> imstransactionserver.DigtialType
	1,  // 7: imstransactionserver.SendRawTransactionRsp.errCode:type_name -> imstransactionserver.ErrorCode
	0,  // 8: imstransactionserver.GetRawTransactionFeeReq.DigType:type_name -> imstransactionserver.DigtialType
	1,  // 9: imstransactionserver.GetRawTransactionFeeRsp.errCode:type_name -> imstransactionserver.ErrorCode
	13, // 10: imstransactionserver.AddressInfo.pubPrv:type_name -> imstransactionserver.PubPrvKeyInfo
	0,  // 11: imstransactionserver.CreateWalletAddressReq.DiatalType:type_name -> imstransactionserver.DigtialType
	1,  // 12: imstransactionserver.CreateWalletAddressRsp.errCode:type_name -> imstransactionserver.ErrorCode
	14, // 13: imstransactionserver.CreateWalletAddressRsp.addressInfo:type_name -> imstransactionserver.AddressInfo
	0,  // 14: imstransactionserver.CreateBtcTypeMultiSigAddressReq.DigType:type_name -> imstransactionserver.DigtialType
	1,  // 15: imstransactionserver.CreateBtcTypeMultiSigAddressRsp.errCode:type_name -> imstransactionserver.ErrorCode
	1,  // 16: imstransactionserver.CreateEthTypeMultiSigAddressRsp.errCode:type_name -> imstransactionserver.ErrorCode
	0,  // 17: imstransactionserver.SendBtcTypeMultiSigTransactionReq.DigType:type_name -> imstransactionserver.DigtialType
	21, // 18: imstransactionserver.SendBtcTypeMultiSigTransactionReq.PrvKeys:type_name -> imstransactionserver.EncryPrvKeyInfo
	0,  // 19: imstransactionserver.SendEthTypeMultiSigTransactionReq.DigType:type_name -> imstransactionserver.DigtialType
	21, // 20: imstransactionserver.SendEthTypeMultiSigTransactionReq.PrvKeys:type_name -> imstransactionserver.EncryPrvKeyInfo
	1,  // 21: imstransactionserver.SendMultiSigTransactionRsp.errCode:type_name -> imstransactionserver.ErrorCode
	15, // 22: imstransactionserver.ServerService.CreateWalletAddress:input_type -> imstransactionserver.CreateWalletAddressReq
	11, // 23: imstransactionserver.ServerService.GetRawTransactionFee:input_type -> imstransactionserver.GetRawTransactionFeeReq
	9,  // 24: imstransactionserver.ServerService.SendRawTransaction:input_type -> imstransactionserver.SendRawTransactionReq
	8,  // 25: imstransactionserver.ServerService.CheckRawTransactionDone:input_type -> imstransactionserver.CheckRawTransactionDoneReq
	6,  // 26: imstransactionserver.ServerService.GetAddressBalance:input_type -> imstransactionserver.GetAddressBalanceReq
	22, // 27: imstransactionserver.ServerService.SendBtcTypeMultiSigTransaction:input_type -> imstransactionserver.SendBtcTypeMultiSigTransactionReq
	23, // 28: imstransactionserver.ServerService.SendEthTypeMultiSigTransaction:input_type -> imstransactionserver.SendEthTypeMultiSigTransactionReq
	17, // 29: imstransactionserver.ServerService.CreateBtcTypeMultiSigWalletAddress:input_type -> imstransactionserver.CreateBtcTypeMultiSigAddressReq
	19, // 30: imstransactionserver.ServerService.CreateEthTypeMultiSigWalletAddress:input_type -> imstransactionserver.CreateEthTypeMultiSigAddressReq
	3,  // 31: imstransactionserver.ServerService.DivideMultiSig:input_type -> imstransactionserver.DivideMultiSigReq
	16, // 32: imstransactionserver.ServerService.CreateWalletAddress:output_type -> imstransactionserver.CreateWalletAddressRsp
	12, // 33: imstransactionserver.ServerService.GetRawTransactionFee:output_type -> imstransactionserver.GetRawTransactionFeeRsp
	10, // 34: imstransactionserver.ServerService.SendRawTransaction:output_type -> imstransactionserver.SendRawTransactionRsp
	5,  // 35: imstransactionserver.ServerService.CheckRawTransactionDone:output_type -> imstransactionserver.CheckRawTransactionDoneRsp
	7,  // 36: imstransactionserver.ServerService.GetAddressBalance:output_type -> imstransactionserver.GetAddressBalanceRsp
	24, // 37: imstransactionserver.ServerService.SendBtcTypeMultiSigTransaction:output_type -> imstransactionserver.SendMultiSigTransactionRsp
	24, // 38: imstransactionserver.ServerService.SendEthTypeMultiSigTransaction:output_type -> imstransactionserver.SendMultiSigTransactionRsp
	18, // 39: imstransactionserver.ServerService.CreateBtcTypeMultiSigWalletAddress:output_type -> imstransactionserver.CreateBtcTypeMultiSigAddressRsp
	20, // 40: imstransactionserver.ServerService.CreateEthTypeMultiSigWalletAddress:output_type -> imstransactionserver.CreateEthTypeMultiSigAddressRsp
	4,  // 41: imstransactionserver.ServerService.DivideMultiSig:output_type -> imstransactionserver.DivideMultiSigRsp
	32, // [32:42] is the sub-list for method output_type
	22, // [22:32] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_imtransactionserver_proto_init() }
func file_imtransactionserver_proto_init() {
	if File_imtransactionserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_imtransactionserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DivideMultiSigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DivideMultiSigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRawTransactionDoneRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressBalanceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRawTransactionDoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRawTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRawTransactionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawTransactionFeeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawTransactionFeeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubPrvKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletAddressRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBtcTypeMultiSigAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBtcTypeMultiSigAddressRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEthTypeMultiSigAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEthTypeMultiSigAddressRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryPrvKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendBtcTypeMultiSigTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEthTypeMultiSigTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imtransactionserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMultiSigTransactionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imtransactionserver_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imtransactionserver_proto_goTypes,
		DependencyIndexes: file_imtransactionserver_proto_depIdxs,
		EnumInfos:         file_imtransactionserver_proto_enumTypes,
		MessageInfos:      file_imtransactionserver_proto_msgTypes,
	}.Build()
	File_imtransactionserver_proto = out.File
	file_imtransactionserver_proto_rawDesc = nil
	file_imtransactionserver_proto_goTypes = nil
	file_imtransactionserver_proto_depIdxs = nil
}
