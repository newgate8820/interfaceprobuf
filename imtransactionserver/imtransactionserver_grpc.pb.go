// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imtransactionserver.proto

package imstransactionserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerServiceClient is the client API for ServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerServiceClient interface {
	// 创建钱包单签地址
	CreateWalletAddress(ctx context.Context, in *CreateWalletAddressReq, opts ...grpc.CallOption) (*CreateWalletAddressRsp, error)
	// 获取此次交易手续费
	GetRawTransactionFee(ctx context.Context, in *GetRawTransactionFeeReq, opts ...grpc.CallOption) (*GetRawTransactionFeeRsp, error)
	// 發送 raw transaction
	SendRawTransaction(ctx context.Context, in *SendRawTransactionReq, opts ...grpc.CallOption) (*SendRawTransactionRsp, error)
	// 根据交易ID 查看是否到账
	CheckRawTransactionDone(ctx context.Context, in *CheckRawTransactionDoneReq, opts ...grpc.CallOption) (*CheckRawTransactionDoneRsp, error)
	// 获取地址余额
	GetAddressBalance(ctx context.Context, in *GetAddressBalanceReq, opts ...grpc.CallOption) (*GetAddressBalanceRsp, error)
	// 发送BTC/LTC类型的多签交易
	SendBtcTypeMultiSigTransaction(ctx context.Context, in *SendBtcTypeMultiSigTransactionReq, opts ...grpc.CallOption) (*SendMultiSigTransactionRsp, error)
	// 发送EHT/USDT类型的多签交易
	SendEthTypeMultiSigTransaction(ctx context.Context, in *SendEthTypeMultiSigTransactionReq, opts ...grpc.CallOption) (*SendMultiSigTransactionRsp, error)
	// 创建BTC/LTC类型的多签钱包地址
	CreateBtcTypeMultiSigWalletAddress(ctx context.Context, in *CreateBtcTypeMultiSigAddressReq, opts ...grpc.CallOption) (*CreateBtcTypeMultiSigAddressRsp, error)
	// 创建EHT/USDT类型的多签钱包地址
	CreateEthTypeMultiSigWalletAddress(ctx context.Context, in *CreateEthTypeMultiSigAddressReq, opts ...grpc.CallOption) (*CreateEthTypeMultiSigAddressRsp, error)
	DivideMultiSig(ctx context.Context, in *DivideMultiSigReq, opts ...grpc.CallOption) (*DivideMultiSigRsp, error)
}

type serverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerServiceClient(cc grpc.ClientConnInterface) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) CreateWalletAddress(ctx context.Context, in *CreateWalletAddressReq, opts ...grpc.CallOption) (*CreateWalletAddressRsp, error) {
	out := new(CreateWalletAddressRsp)
	err := c.cc.Invoke(ctx, "/imstransactionserver.ServerService/CreateWalletAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetRawTransactionFee(ctx context.Context, in *GetRawTransactionFeeReq, opts ...grpc.CallOption) (*GetRawTransactionFeeRsp, error) {
	out := new(GetRawTransactionFeeRsp)
	err := c.cc.Invoke(ctx, "/imstransactionserver.ServerService/GetRawTransactionFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SendRawTransaction(ctx context.Context, in *SendRawTransactionReq, opts ...grpc.CallOption) (*SendRawTransactionRsp, error) {
	out := new(SendRawTransactionRsp)
	err := c.cc.Invoke(ctx, "/imstransactionserver.ServerService/SendRawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CheckRawTransactionDone(ctx context.Context, in *CheckRawTransactionDoneReq, opts ...grpc.CallOption) (*CheckRawTransactionDoneRsp, error) {
	out := new(CheckRawTransactionDoneRsp)
	err := c.cc.Invoke(ctx, "/imstransactionserver.ServerService/CheckRawTransactionDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetAddressBalance(ctx context.Context, in *GetAddressBalanceReq, opts ...grpc.CallOption) (*GetAddressBalanceRsp, error) {
	out := new(GetAddressBalanceRsp)
	err := c.cc.Invoke(ctx, "/imstransactionserver.ServerService/GetAddressBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SendBtcTypeMultiSigTransaction(ctx context.Context, in *SendBtcTypeMultiSigTransactionReq, opts ...grpc.CallOption) (*SendMultiSigTransactionRsp, error) {
	out := new(SendMultiSigTransactionRsp)
	err := c.cc.Invoke(ctx, "/imstransactionserver.ServerService/SendBtcTypeMultiSigTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SendEthTypeMultiSigTransaction(ctx context.Context, in *SendEthTypeMultiSigTransactionReq, opts ...grpc.CallOption) (*SendMultiSigTransactionRsp, error) {
	out := new(SendMultiSigTransactionRsp)
	err := c.cc.Invoke(ctx, "/imstransactionserver.ServerService/SendEthTypeMultiSigTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CreateBtcTypeMultiSigWalletAddress(ctx context.Context, in *CreateBtcTypeMultiSigAddressReq, opts ...grpc.CallOption) (*CreateBtcTypeMultiSigAddressRsp, error) {
	out := new(CreateBtcTypeMultiSigAddressRsp)
	err := c.cc.Invoke(ctx, "/imstransactionserver.ServerService/CreateBtcTypeMultiSigWalletAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CreateEthTypeMultiSigWalletAddress(ctx context.Context, in *CreateEthTypeMultiSigAddressReq, opts ...grpc.CallOption) (*CreateEthTypeMultiSigAddressRsp, error) {
	out := new(CreateEthTypeMultiSigAddressRsp)
	err := c.cc.Invoke(ctx, "/imstransactionserver.ServerService/CreateEthTypeMultiSigWalletAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) DivideMultiSig(ctx context.Context, in *DivideMultiSigReq, opts ...grpc.CallOption) (*DivideMultiSigRsp, error) {
	out := new(DivideMultiSigRsp)
	err := c.cc.Invoke(ctx, "/imstransactionserver.ServerService/DivideMultiSig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServiceServer is the server API for ServerService service.
// All implementations must embed UnimplementedServerServiceServer
// for forward compatibility
type ServerServiceServer interface {
	// 创建钱包单签地址
	CreateWalletAddress(context.Context, *CreateWalletAddressReq) (*CreateWalletAddressRsp, error)
	// 获取此次交易手续费
	GetRawTransactionFee(context.Context, *GetRawTransactionFeeReq) (*GetRawTransactionFeeRsp, error)
	// 發送 raw transaction
	SendRawTransaction(context.Context, *SendRawTransactionReq) (*SendRawTransactionRsp, error)
	// 根据交易ID 查看是否到账
	CheckRawTransactionDone(context.Context, *CheckRawTransactionDoneReq) (*CheckRawTransactionDoneRsp, error)
	// 获取地址余额
	GetAddressBalance(context.Context, *GetAddressBalanceReq) (*GetAddressBalanceRsp, error)
	// 发送BTC/LTC类型的多签交易
	SendBtcTypeMultiSigTransaction(context.Context, *SendBtcTypeMultiSigTransactionReq) (*SendMultiSigTransactionRsp, error)
	// 发送EHT/USDT类型的多签交易
	SendEthTypeMultiSigTransaction(context.Context, *SendEthTypeMultiSigTransactionReq) (*SendMultiSigTransactionRsp, error)
	// 创建BTC/LTC类型的多签钱包地址
	CreateBtcTypeMultiSigWalletAddress(context.Context, *CreateBtcTypeMultiSigAddressReq) (*CreateBtcTypeMultiSigAddressRsp, error)
	// 创建EHT/USDT类型的多签钱包地址
	CreateEthTypeMultiSigWalletAddress(context.Context, *CreateEthTypeMultiSigAddressReq) (*CreateEthTypeMultiSigAddressRsp, error)
	DivideMultiSig(context.Context, *DivideMultiSigReq) (*DivideMultiSigRsp, error)
	mustEmbedUnimplementedServerServiceServer()
}

// UnimplementedServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerServiceServer struct {
}

func (UnimplementedServerServiceServer) CreateWalletAddress(context.Context, *CreateWalletAddressReq) (*CreateWalletAddressRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWalletAddress not implemented")
}
func (UnimplementedServerServiceServer) GetRawTransactionFee(context.Context, *GetRawTransactionFeeReq) (*GetRawTransactionFeeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawTransactionFee not implemented")
}
func (UnimplementedServerServiceServer) SendRawTransaction(context.Context, *SendRawTransactionReq) (*SendRawTransactionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRawTransaction not implemented")
}
func (UnimplementedServerServiceServer) CheckRawTransactionDone(context.Context, *CheckRawTransactionDoneReq) (*CheckRawTransactionDoneRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRawTransactionDone not implemented")
}
func (UnimplementedServerServiceServer) GetAddressBalance(context.Context, *GetAddressBalanceReq) (*GetAddressBalanceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressBalance not implemented")
}
func (UnimplementedServerServiceServer) SendBtcTypeMultiSigTransaction(context.Context, *SendBtcTypeMultiSigTransactionReq) (*SendMultiSigTransactionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBtcTypeMultiSigTransaction not implemented")
}
func (UnimplementedServerServiceServer) SendEthTypeMultiSigTransaction(context.Context, *SendEthTypeMultiSigTransactionReq) (*SendMultiSigTransactionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEthTypeMultiSigTransaction not implemented")
}
func (UnimplementedServerServiceServer) CreateBtcTypeMultiSigWalletAddress(context.Context, *CreateBtcTypeMultiSigAddressReq) (*CreateBtcTypeMultiSigAddressRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBtcTypeMultiSigWalletAddress not implemented")
}
func (UnimplementedServerServiceServer) CreateEthTypeMultiSigWalletAddress(context.Context, *CreateEthTypeMultiSigAddressReq) (*CreateEthTypeMultiSigAddressRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEthTypeMultiSigWalletAddress not implemented")
}
func (UnimplementedServerServiceServer) DivideMultiSig(context.Context, *DivideMultiSigReq) (*DivideMultiSigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DivideMultiSig not implemented")
}
func (UnimplementedServerServiceServer) mustEmbedUnimplementedServerServiceServer() {}

// UnsafeServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServiceServer will
// result in compilation errors.
type UnsafeServerServiceServer interface {
	mustEmbedUnimplementedServerServiceServer()
}

func RegisterServerServiceServer(s grpc.ServiceRegistrar, srv ServerServiceServer) {
	s.RegisterService(&ServerService_ServiceDesc, srv)
}

func _ServerService_CreateWalletAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CreateWalletAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstransactionserver.ServerService/CreateWalletAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CreateWalletAddress(ctx, req.(*CreateWalletAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetRawTransactionFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawTransactionFeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetRawTransactionFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstransactionserver.ServerService/GetRawTransactionFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetRawTransactionFee(ctx, req.(*GetRawTransactionFeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRawTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstransactionserver.ServerService/SendRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SendRawTransaction(ctx, req.(*SendRawTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CheckRawTransactionDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRawTransactionDoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CheckRawTransactionDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstransactionserver.ServerService/CheckRawTransactionDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CheckRawTransactionDone(ctx, req.(*CheckRawTransactionDoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetAddressBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetAddressBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstransactionserver.ServerService/GetAddressBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetAddressBalance(ctx, req.(*GetAddressBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SendBtcTypeMultiSigTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBtcTypeMultiSigTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SendBtcTypeMultiSigTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstransactionserver.ServerService/SendBtcTypeMultiSigTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SendBtcTypeMultiSigTransaction(ctx, req.(*SendBtcTypeMultiSigTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SendEthTypeMultiSigTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEthTypeMultiSigTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SendEthTypeMultiSigTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstransactionserver.ServerService/SendEthTypeMultiSigTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SendEthTypeMultiSigTransaction(ctx, req.(*SendEthTypeMultiSigTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CreateBtcTypeMultiSigWalletAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBtcTypeMultiSigAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CreateBtcTypeMultiSigWalletAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstransactionserver.ServerService/CreateBtcTypeMultiSigWalletAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CreateBtcTypeMultiSigWalletAddress(ctx, req.(*CreateBtcTypeMultiSigAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CreateEthTypeMultiSigWalletAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEthTypeMultiSigAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CreateEthTypeMultiSigWalletAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstransactionserver.ServerService/CreateEthTypeMultiSigWalletAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CreateEthTypeMultiSigWalletAddress(ctx, req.(*CreateEthTypeMultiSigAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_DivideMultiSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivideMultiSigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).DivideMultiSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imstransactionserver.ServerService/DivideMultiSig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).DivideMultiSig(ctx, req.(*DivideMultiSigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerService_ServiceDesc is the grpc.ServiceDesc for ServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imstransactionserver.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWalletAddress",
			Handler:    _ServerService_CreateWalletAddress_Handler,
		},
		{
			MethodName: "GetRawTransactionFee",
			Handler:    _ServerService_GetRawTransactionFee_Handler,
		},
		{
			MethodName: "SendRawTransaction",
			Handler:    _ServerService_SendRawTransaction_Handler,
		},
		{
			MethodName: "CheckRawTransactionDone",
			Handler:    _ServerService_CheckRawTransactionDone_Handler,
		},
		{
			MethodName: "GetAddressBalance",
			Handler:    _ServerService_GetAddressBalance_Handler,
		},
		{
			MethodName: "SendBtcTypeMultiSigTransaction",
			Handler:    _ServerService_SendBtcTypeMultiSigTransaction_Handler,
		},
		{
			MethodName: "SendEthTypeMultiSigTransaction",
			Handler:    _ServerService_SendEthTypeMultiSigTransaction_Handler,
		},
		{
			MethodName: "CreateBtcTypeMultiSigWalletAddress",
			Handler:    _ServerService_CreateBtcTypeMultiSigWalletAddress_Handler,
		},
		{
			MethodName: "CreateEthTypeMultiSigWalletAddress",
			Handler:    _ServerService_CreateEthTypeMultiSigWalletAddress_Handler,
		},
		{
			MethodName: "DivideMultiSig",
			Handler:    _ServerService_DivideMultiSig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imtransactionserver.proto",
}
