// Code generated by protoc-gen-gogo.
// source: middleware.proto
// DO NOT EDIT!

/*
Package middleware is a generated protocol buffer package.

It is generated from these files:

	middleware.proto

It has these top-level messages:

	RouteRequest
	RouteResponse
*/
package middleware

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 路由请求数据
type RouteRequest struct {
	TargetDc uint32 `protobuf:"varint,1,opt,name=target_dc,json=targetDc,proto3" json:"target_dc,omitempty"`
	Tldata   []byte `protobuf:"bytes,2,opt,name=tldata,proto3" json:"tldata,omitempty"`
}

func (m *RouteRequest) Reset()                    { *m = RouteRequest{} }
func (m *RouteRequest) String() string            { return proto.CompactTextString(m) }
func (*RouteRequest) ProtoMessage()               {}
func (*RouteRequest) Descriptor() ([]byte, []int) { return fileDescriptorMiddleware, []int{0} }

func (m *RouteRequest) GetTargetDc() uint32 {
	if m != nil {
		return m.TargetDc
	}
	return 0
}

func (m *RouteRequest) GetTldata() []byte {
	if m != nil {
		return m.Tldata
	}
	return nil
}

// 路由响应数据
type RouteResponse struct {
	Tldata []byte `protobuf:"bytes,1,opt,name=tldata,proto3" json:"tldata,omitempty"`
}

func (m *RouteResponse) Reset()                    { *m = RouteResponse{} }
func (m *RouteResponse) String() string            { return proto.CompactTextString(m) }
func (*RouteResponse) ProtoMessage()               {}
func (*RouteResponse) Descriptor() ([]byte, []int) { return fileDescriptorMiddleware, []int{1} }

func (m *RouteResponse) GetTldata() []byte {
	if m != nil {
		return m.Tldata
	}
	return nil
}

func init() {
	proto.RegisterType((*RouteRequest)(nil), "middleware.RouteRequest")
	proto.RegisterType((*RouteResponse)(nil), "middleware.RouteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Middleware service

type MiddlewareClient interface {
	// RouteGetBotCallbackAnswer 路由获取回调应答
	RouteGetBotCallbackAnswer(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteResponse, error)
	// RouteSetBotCallbackAnswer 路由设置回调应答
	RouteSetBotCallbackAnswer(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteResponse, error)
}

type middlewareClient struct {
	cc *grpc.ClientConn
}

func NewMiddlewareClient(cc *grpc.ClientConn) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) RouteGetBotCallbackAnswer(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteResponse, error) {
	out := new(RouteResponse)
	err := grpc.Invoke(ctx, "/middleware.Middleware/RouteGetBotCallbackAnswer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) RouteSetBotCallbackAnswer(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteResponse, error) {
	out := new(RouteResponse)
	err := grpc.Invoke(ctx, "/middleware.Middleware/RouteSetBotCallbackAnswer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Middleware service

type MiddlewareServer interface {
	// RouteGetBotCallbackAnswer 路由获取回调应答
	RouteGetBotCallbackAnswer(context.Context, *RouteRequest) (*RouteResponse, error)
	// RouteSetBotCallbackAnswer 路由设置回调应答
	RouteSetBotCallbackAnswer(context.Context, *RouteRequest) (*RouteResponse, error)
}

func RegisterMiddlewareServer(s *grpc.Server, srv MiddlewareServer) {
	s.RegisterService(&_Middleware_serviceDesc, srv)
}

func _Middleware_RouteGetBotCallbackAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).RouteGetBotCallbackAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middleware.Middleware/RouteGetBotCallbackAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).RouteGetBotCallbackAnswer(ctx, req.(*RouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_RouteSetBotCallbackAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).RouteSetBotCallbackAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middleware.Middleware/RouteSetBotCallbackAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).RouteSetBotCallbackAnswer(ctx, req.(*RouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Middleware_serviceDesc = grpc.ServiceDesc{
	ServiceName: "middleware.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RouteGetBotCallbackAnswer",
			Handler:    _Middleware_RouteGetBotCallbackAnswer_Handler,
		},
		{
			MethodName: "RouteSetBotCallbackAnswer",
			Handler:    _Middleware_RouteSetBotCallbackAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "middleware.proto",
}

func (m *RouteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TargetDc != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMiddleware(dAtA, i, uint64(m.TargetDc))
	}
	if len(m.Tldata) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiddleware(dAtA, i, uint64(len(m.Tldata)))
		i += copy(dAtA[i:], m.Tldata)
	}
	return i, nil
}

func (m *RouteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tldata) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiddleware(dAtA, i, uint64(len(m.Tldata)))
		i += copy(dAtA[i:], m.Tldata)
	}
	return i, nil
}

func encodeFixed64Middleware(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Middleware(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMiddleware(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RouteRequest) Size() (n int) {
	var l int
	_ = l
	if m.TargetDc != 0 {
		n += 1 + sovMiddleware(uint64(m.TargetDc))
	}
	l = len(m.Tldata)
	if l > 0 {
		n += 1 + l + sovMiddleware(uint64(l))
	}
	return n
}

func (m *RouteResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tldata)
	if l > 0 {
		n += 1 + l + sovMiddleware(uint64(l))
	}
	return n
}

func sovMiddleware(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMiddleware(x uint64) (n int) {
	return sovMiddleware(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RouteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiddleware
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetDc", wireType)
			}
			m.TargetDc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetDc |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tldata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMiddleware
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tldata = append(m.Tldata[:0], dAtA[iNdEx:postIndex]...)
			if m.Tldata == nil {
				m.Tldata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiddleware(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiddleware
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiddleware
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tldata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMiddleware
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tldata = append(m.Tldata[:0], dAtA[iNdEx:postIndex]...)
			if m.Tldata == nil {
				m.Tldata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiddleware(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiddleware
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMiddleware(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMiddleware
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiddleware
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiddleware
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMiddleware
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMiddleware
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMiddleware(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMiddleware = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMiddleware   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("middleware.proto", fileDescriptorMiddleware) }

var fileDescriptorMiddleware = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0xcd, 0x4c, 0x49,
	0xc9, 0x49, 0x2d, 0x4f, 0x2c, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0x39, 0x73, 0xf1, 0x04, 0xe5, 0x97, 0x96, 0xa4, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97,
	0x08, 0x49, 0x73, 0x71, 0x96, 0x24, 0x16, 0xa5, 0xa7, 0x96, 0xc4, 0xa7, 0x24, 0x4b, 0x30, 0x2a,
	0x30, 0x6a, 0xf0, 0x06, 0x71, 0x40, 0x04, 0x5c, 0x92, 0x85, 0xc4, 0xb8, 0xd8, 0x4a, 0x72, 0x52,
	0x12, 0x4b, 0x12, 0x25, 0x98, 0x14, 0x18, 0x35, 0x78, 0x82, 0xa0, 0x3c, 0x25, 0x75, 0x2e, 0x5e,
	0xa8, 0x21, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x48, 0x0a, 0x19, 0x91, 0x15, 0x1a, 0x6d, 0x61,
	0xe4, 0xe2, 0xf2, 0x85, 0x5b, 0x2e, 0x14, 0xc4, 0x25, 0x09, 0xd6, 0xe7, 0x9e, 0x5a, 0xe2, 0x94,
	0x5f, 0xe2, 0x9c, 0x98, 0x93, 0x93, 0x94, 0x98, 0x9c, 0xed, 0x98, 0x57, 0x5c, 0x9e, 0x5a, 0x24,
	0x24, 0xa1, 0x87, 0xe4, 0x70, 0x64, 0x37, 0x4a, 0x49, 0x62, 0x91, 0x81, 0x58, 0xac, 0xc4, 0x00,
	0x37, 0x33, 0x98, 0x7a, 0x66, 0x3a, 0xf1, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3,
	0x83, 0x47, 0x72, 0x8c, 0x49, 0x6c, 0xe0, 0x50, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x68,
	0x1b, 0x22, 0xdb, 0x59, 0x01, 0x00, 0x00,
}
