// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/im/iminterfaceprotobufs/botserver/dataservice/dataservice.proto

/*
Package dataservice is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/im/iminterfaceprotobufs/botserver/dataservice/dataservice.proto

It has these top-level messages:

	GetBotRequest
	GetBotReply
	GetBotTokenRequest
	GetBotTokenReply
	GetBotCertificateRequest
	GetBotCertificateReply
	ForbidBotRequest
	ForbidBotReply
	GetUserOwnedBotsRequest
	GetUserOwnedBotsReply
	GetUerIDbyBotRequest
	GetUerIDbyBotReply
	GetGameRequest
	GetGameByNameRequest
	GetGameReply
	GetGameScoreRequest
	GetGameScoreReply
	UserScore
*/
package dataservice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// GetBotRequest 获取机器人信息请求
type GetBotRequest struct {
	BotID uint32 `protobuf:"varint,1,opt,name=botID,proto3" json:"botID,omitempty"`
}

func (m *GetBotRequest) Reset()                    { *m = GetBotRequest{} }
func (m *GetBotRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBotRequest) ProtoMessage()               {}
func (*GetBotRequest) Descriptor() ([]byte, []int) { return fileDescriptorDataservice, []int{0} }

func (m *GetBotRequest) GetBotID() uint32 {
	if m != nil {
		return m.BotID
	}
	return 0
}

// GetBotRequest 获取机器人信息响应
type GetBotReply struct {
	BotID       uint32 `protobuf:"varint,1,opt,name=botID,proto3" json:"botID,omitempty"`
	Commands    string `protobuf:"bytes,2,opt,name=commands,proto3" json:"commands,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	About       string `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	AllowPush   bool   `protobuf:"varint,5,opt,name=allow_push,json=allowPush,proto3" json:"allow_push,omitempty"`
}

func (m *GetBotReply) Reset()                    { *m = GetBotReply{} }
func (m *GetBotReply) String() string            { return proto.CompactTextString(m) }
func (*GetBotReply) ProtoMessage()               {}
func (*GetBotReply) Descriptor() ([]byte, []int) { return fileDescriptorDataservice, []int{1} }

func (m *GetBotReply) GetBotID() uint32 {
	if m != nil {
		return m.BotID
	}
	return 0
}

func (m *GetBotReply) GetCommands() string {
	if m != nil {
		return m.Commands
	}
	return ""
}

func (m *GetBotReply) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetBotReply) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *GetBotReply) GetAllowPush() bool {
	if m != nil {
		return m.AllowPush
	}
	return false
}

// GetBotToken 获取机器人Token请求
type GetBotTokenRequest struct {
	BotID uint32 `protobuf:"varint,1,opt,name=botID,proto3" json:"botID,omitempty"`
}

func (m *GetBotTokenRequest) Reset()                    { *m = GetBotTokenRequest{} }
func (m *GetBotTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBotTokenRequest) ProtoMessage()               {}
func (*GetBotTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptorDataservice, []int{2} }

func (m *GetBotTokenRequest) GetBotID() uint32 {
	if m != nil {
		return m.BotID
	}
	return 0
}

// GetBotTokenReply 获取机器人Token响应
type GetBotTokenReply struct {
	BotID uint32 `protobuf:"varint,1,opt,name=botID,proto3" json:"botID,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *GetBotTokenReply) Reset()                    { *m = GetBotTokenReply{} }
func (m *GetBotTokenReply) String() string            { return proto.CompactTextString(m) }
func (*GetBotTokenReply) ProtoMessage()               {}
func (*GetBotTokenReply) Descriptor() ([]byte, []int) { return fileDescriptorDataservice, []int{3} }

func (m *GetBotTokenReply) GetBotID() uint32 {
	if m != nil {
		return m.BotID
	}
	return 0
}

func (m *GetBotTokenReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// GetBotCertificateRequest 获取机器人证书请求
type GetBotCertificateRequest struct {
	BotID uint32 `protobuf:"varint,1,opt,name=botID,proto3" json:"botID,omitempty"`
}

func (m *GetBotCertificateRequest) Reset()         { *m = GetBotCertificateRequest{} }
func (m *GetBotCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*GetBotCertificateRequest) ProtoMessage()    {}
func (*GetBotCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDataservice, []int{4}
}

func (m *GetBotCertificateRequest) GetBotID() uint32 {
	if m != nil {
		return m.BotID
	}
	return 0
}

// GetBotCertificateReply 获取机器人证书响应
type GetBotCertificateReply struct {
	BotID       uint32 `protobuf:"varint,1,opt,name=botID,proto3" json:"botID,omitempty"`
	Webhook     string `protobuf:"bytes,2,opt,name=webhook,proto3" json:"webhook,omitempty"`
	Certificate []byte `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (m *GetBotCertificateReply) Reset()         { *m = GetBotCertificateReply{} }
func (m *GetBotCertificateReply) String() string { return proto.CompactTextString(m) }
func (*GetBotCertificateReply) ProtoMessage()    {}
func (*GetBotCertificateReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDataservice, []int{5}
}

func (m *GetBotCertificateReply) GetBotID() uint32 {
	if m != nil {
		return m.BotID
	}
	return 0
}

func (m *GetBotCertificateReply) GetWebhook() string {
	if m != nil {
		return m.Webhook
	}
	return ""
}

func (m *GetBotCertificateReply) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

// ForbidBotRequest 封或者解封机器人账号请求
type ForbidBotRequest struct {
	BotID  uint32 `protobuf:"varint,1,opt,name=botID,proto3" json:"botID,omitempty"`
	Action int32  `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *ForbidBotRequest) Reset()                    { *m = ForbidBotRequest{} }
func (m *ForbidBotRequest) String() string            { return proto.CompactTextString(m) }
func (*ForbidBotRequest) ProtoMessage()               {}
func (*ForbidBotRequest) Descriptor() ([]byte, []int) { return fileDescriptorDataservice, []int{6} }

func (m *ForbidBotRequest) GetBotID() uint32 {
	if m != nil {
		return m.BotID
	}
	return 0
}

func (m *ForbidBotRequest) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

// ForbidBotReply 封或者解封机器人账号响应
type ForbidBotReply struct {
	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ForbidBotReply) Reset()                    { *m = ForbidBotReply{} }
func (m *ForbidBotReply) String() string            { return proto.CompactTextString(m) }
func (*ForbidBotReply) ProtoMessage()               {}
func (*ForbidBotReply) Descriptor() ([]byte, []int) { return fileDescriptorDataservice, []int{7} }

func (m *ForbidBotReply) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

// GetUserOwnedBotsRequest 获取某个用户拥有的机器人请求
type GetUserOwnedBotsRequest struct {
	UserID uint32 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (m *GetUserOwnedBotsRequest) Reset()         { *m = GetUserOwnedBotsRequest{} }
func (m *GetUserOwnedBotsRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserOwnedBotsRequest) ProtoMessage()    {}
func (*GetUserOwnedBotsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDataservice, []int{8}
}

func (m *GetUserOwnedBotsRequest) GetUserID() uint32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

// GetUserOwnedBotsReply 获取某个用户拥有的机器人响应
type GetUserOwnedBotsReply struct {
	BotIDs []uint32 `protobuf:"varint,2,rep,packed,name=botIDs" json:"botIDs,omitempty"`
}

func (m *GetUserOwnedBotsReply) Reset()         { *m = GetUserOwnedBotsReply{} }
func (m *GetUserOwnedBotsReply) String() string { return proto.CompactTextString(m) }
func (*GetUserOwnedBotsReply) ProtoMessage()    {}
func (*GetUserOwnedBotsReply) Descriptor() ([]byte, []int) {
	return fileDescriptorDataservice, []int{9}
}

func (m *GetUserOwnedBotsReply) GetBotIDs() []uint32 {
	if m != nil {
		return m.BotIDs
	}
	return nil
}

// GetUerIDbyBotRequest 获取某个机器人所属用户ID请求
type GetUerIDbyBotRequest struct {
	BotID uint32 `protobuf:"varint,1,opt,name=botID,proto3" json:"botID,omitempty"`
}

func (m *GetUerIDbyBotRequest) Reset()         { *m = GetUerIDbyBotRequest{} }
func (m *GetUerIDbyBotRequest) String() string { return proto.CompactTextString(m) }
func (*GetUerIDbyBotRequest) ProtoMessage()    {}
func (*GetUerIDbyBotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDataservice, []int{10}
}

func (m *GetUerIDbyBotRequest) GetBotID() uint32 {
	if m != nil {
		return m.BotID
	}
	return 0
}

// GetUerIDbyBotReply 获取某个机器人所属用户ID响应
type GetUerIDbyBotReply struct {
	UserID uint32 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (m *GetUerIDbyBotReply) Reset()                    { *m = GetUerIDbyBotReply{} }
func (m *GetUerIDbyBotReply) String() string            { return proto.CompactTextString(m) }
func (*GetUerIDbyBotReply) ProtoMessage()               {}
func (*GetUerIDbyBotReply) Descriptor() ([]byte, []int) { return fileDescriptorDataservice, []int{11} }

func (m *GetUerIDbyBotReply) GetUserID() uint32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

// GetGameRequest 获取游戏信息请求
type GetGameRequest struct {
	GameID uint32 `protobuf:"varint,1,opt,name=gameID,proto3" json:"gameID,omitempty"`
}

func (m *GetGameRequest) Reset()                    { *m = GetGameRequest{} }
func (m *GetGameRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGameRequest) ProtoMessage()               {}
func (*GetGameRequest) Descriptor() ([]byte, []int) { return fileDescriptorDataservice, []int{12} }

func (m *GetGameRequest) GetGameID() uint32 {
	if m != nil {
		return m.GameID
	}
	return 0
}

// GetGameByNameRequest 获取游戏信息请求 通过所属机器人ID和名称
type GetGameByNameRequest struct {
	BotID uint32 `protobuf:"varint,1,opt,name=botID,proto3" json:"botID,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetGameByNameRequest) Reset()         { *m = GetGameByNameRequest{} }
func (m *GetGameByNameRequest) String() string { return proto.CompactTextString(m) }
func (*GetGameByNameRequest) ProtoMessage()    {}
func (*GetGameByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDataservice, []int{13}
}

func (m *GetGameByNameRequest) GetBotID() uint32 {
	if m != nil {
		return m.BotID
	}
	return 0
}

func (m *GetGameByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// GetGameReply 获取游戏信息响应
type GetGameReply struct {
	GameID      int64  `protobuf:"varint,1,opt,name=gameID,proto3" json:"gameID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Title       string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	OwnerID     uint32 `protobuf:"varint,5,opt,name=ownerID,proto3" json:"ownerID,omitempty"`
	AccessHash  int64  `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Photo       []byte `protobuf:"bytes,7,opt,name=photo,proto3" json:"photo,omitempty"`
	Animation   []byte `protobuf:"bytes,8,opt,name=Animation,proto3" json:"Animation,omitempty"`
}

func (m *GetGameReply) Reset()                    { *m = GetGameReply{} }
func (m *GetGameReply) String() string            { return proto.CompactTextString(m) }
func (*GetGameReply) ProtoMessage()               {}
func (*GetGameReply) Descriptor() ([]byte, []int) { return fileDescriptorDataservice, []int{14} }

func (m *GetGameReply) GetGameID() int64 {
	if m != nil {
		return m.GameID
	}
	return 0
}

func (m *GetGameReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetGameReply) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetGameReply) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GetGameReply) GetOwnerID() uint32 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

func (m *GetGameReply) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetGameReply) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *GetGameReply) GetAnimation() []byte {
	if m != nil {
		return m.Animation
	}
	return nil
}

// 获取分数请求
type GetGameScoreRequest struct {
	Gameid int64 `protobuf:"varint,1,opt,name=Gameid,proto3" json:"Gameid,omitempty"`
}

func (m *GetGameScoreRequest) Reset()                    { *m = GetGameScoreRequest{} }
func (m *GetGameScoreRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGameScoreRequest) ProtoMessage()               {}
func (*GetGameScoreRequest) Descriptor() ([]byte, []int) { return fileDescriptorDataservice, []int{15} }

func (m *GetGameScoreRequest) GetGameid() int64 {
	if m != nil {
		return m.Gameid
	}
	return 0
}

// 获取分数返回
type GetGameScoreReply struct {
	Succeed bool         `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Error   string       `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Scores  []*UserScore `protobuf:"bytes,3,rep,name=scores" json:"scores,omitempty"`
}

func (m *GetGameScoreReply) Reset()                    { *m = GetGameScoreReply{} }
func (m *GetGameScoreReply) String() string            { return proto.CompactTextString(m) }
func (*GetGameScoreReply) ProtoMessage()               {}
func (*GetGameScoreReply) Descriptor() ([]byte, []int) { return fileDescriptorDataservice, []int{16} }

func (m *GetGameScoreReply) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *GetGameScoreReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *GetGameScoreReply) GetScores() []*UserScore {
	if m != nil {
		return m.Scores
	}
	return nil
}

// 用户分数
type UserScore struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score  int32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *UserScore) Reset()                    { *m = UserScore{} }
func (m *UserScore) String() string            { return proto.CompactTextString(m) }
func (*UserScore) ProtoMessage()               {}
func (*UserScore) Descriptor() ([]byte, []int) { return fileDescriptorDataservice, []int{17} }

func (m *UserScore) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserScore) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func init() {
	proto.RegisterType((*GetBotRequest)(nil), "dataservice.GetBotRequest")
	proto.RegisterType((*GetBotReply)(nil), "dataservice.GetBotReply")
	proto.RegisterType((*GetBotTokenRequest)(nil), "dataservice.GetBotTokenRequest")
	proto.RegisterType((*GetBotTokenReply)(nil), "dataservice.GetBotTokenReply")
	proto.RegisterType((*GetBotCertificateRequest)(nil), "dataservice.GetBotCertificateRequest")
	proto.RegisterType((*GetBotCertificateReply)(nil), "dataservice.GetBotCertificateReply")
	proto.RegisterType((*ForbidBotRequest)(nil), "dataservice.ForbidBotRequest")
	proto.RegisterType((*ForbidBotReply)(nil), "dataservice.ForbidBotReply")
	proto.RegisterType((*GetUserOwnedBotsRequest)(nil), "dataservice.GetUserOwnedBotsRequest")
	proto.RegisterType((*GetUserOwnedBotsReply)(nil), "dataservice.GetUserOwnedBotsReply")
	proto.RegisterType((*GetUerIDbyBotRequest)(nil), "dataservice.GetUerIDbyBotRequest")
	proto.RegisterType((*GetUerIDbyBotReply)(nil), "dataservice.GetUerIDbyBotReply")
	proto.RegisterType((*GetGameRequest)(nil), "dataservice.GetGameRequest")
	proto.RegisterType((*GetGameByNameRequest)(nil), "dataservice.GetGameByNameRequest")
	proto.RegisterType((*GetGameReply)(nil), "dataservice.GetGameReply")
	proto.RegisterType((*GetGameScoreRequest)(nil), "dataservice.GetGameScoreRequest")
	proto.RegisterType((*GetGameScoreReply)(nil), "dataservice.GetGameScoreReply")
	proto.RegisterType((*UserScore)(nil), "dataservice.UserScore")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Bot service

type BotClient interface {
	// GetBot 获取机器人信息
	GetBot(ctx context.Context, in *GetBotRequest, opts ...grpc.CallOption) (*GetBotReply, error)
	// GetBotToken 获取机器人Token
	GetBotToken(ctx context.Context, in *GetBotTokenRequest, opts ...grpc.CallOption) (*GetBotTokenReply, error)
	// GetBotCertificate 获取机器人证书
	GetBotCertificate(ctx context.Context, in *GetBotCertificateRequest, opts ...grpc.CallOption) (*GetBotCertificateReply, error)
	// ForbidBot 封机器人账号 解封机器人账号
	ForbidBot(ctx context.Context, in *ForbidBotRequest, opts ...grpc.CallOption) (*ForbidBotReply, error)
	// GetUserOwnedBots 获取某个用户拥有的所有机器人
	GetUserOwnedBots(ctx context.Context, in *GetUserOwnedBotsRequest, opts ...grpc.CallOption) (*GetUserOwnedBotsReply, error)
	// GetUerIDbyBot 获取某个机器人所属用户的ID
	GetUerIDbyBot(ctx context.Context, in *GetUerIDbyBotRequest, opts ...grpc.CallOption) (*GetUerIDbyBotReply, error)
	// GetGame 获取游戏信息根据游戏ID
	GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GetGameReply, error)
	// GetGameByName 获取游戏信息 通过游戏名称 和 所属机器人ID
	GetGameByName(ctx context.Context, in *GetGameByNameRequest, opts ...grpc.CallOption) (*GetGameReply, error)
	// 获取游戏分数
	GetGameScore(ctx context.Context, in *GetGameScoreRequest, opts ...grpc.CallOption) (*GetGameScoreReply, error)
}

type botClient struct {
	cc *grpc.ClientConn
}

func NewBotClient(cc *grpc.ClientConn) BotClient {
	return &botClient{cc}
}

func (c *botClient) GetBot(ctx context.Context, in *GetBotRequest, opts ...grpc.CallOption) (*GetBotReply, error) {
	out := new(GetBotReply)
	err := grpc.Invoke(ctx, "/dataservice.Bot/GetBot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetBotToken(ctx context.Context, in *GetBotTokenRequest, opts ...grpc.CallOption) (*GetBotTokenReply, error) {
	out := new(GetBotTokenReply)
	err := grpc.Invoke(ctx, "/dataservice.Bot/GetBotToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetBotCertificate(ctx context.Context, in *GetBotCertificateRequest, opts ...grpc.CallOption) (*GetBotCertificateReply, error) {
	out := new(GetBotCertificateReply)
	err := grpc.Invoke(ctx, "/dataservice.Bot/GetBotCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) ForbidBot(ctx context.Context, in *ForbidBotRequest, opts ...grpc.CallOption) (*ForbidBotReply, error) {
	out := new(ForbidBotReply)
	err := grpc.Invoke(ctx, "/dataservice.Bot/ForbidBot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetUserOwnedBots(ctx context.Context, in *GetUserOwnedBotsRequest, opts ...grpc.CallOption) (*GetUserOwnedBotsReply, error) {
	out := new(GetUserOwnedBotsReply)
	err := grpc.Invoke(ctx, "/dataservice.Bot/GetUserOwnedBots", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetUerIDbyBot(ctx context.Context, in *GetUerIDbyBotRequest, opts ...grpc.CallOption) (*GetUerIDbyBotReply, error) {
	out := new(GetUerIDbyBotReply)
	err := grpc.Invoke(ctx, "/dataservice.Bot/GetUerIDbyBot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GetGameReply, error) {
	out := new(GetGameReply)
	err := grpc.Invoke(ctx, "/dataservice.Bot/GetGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetGameByName(ctx context.Context, in *GetGameByNameRequest, opts ...grpc.CallOption) (*GetGameReply, error) {
	out := new(GetGameReply)
	err := grpc.Invoke(ctx, "/dataservice.Bot/GetGameByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetGameScore(ctx context.Context, in *GetGameScoreRequest, opts ...grpc.CallOption) (*GetGameScoreReply, error) {
	out := new(GetGameScoreReply)
	err := grpc.Invoke(ctx, "/dataservice.Bot/GetGameScore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bot service

type BotServer interface {
	// GetBot 获取机器人信息
	GetBot(context.Context, *GetBotRequest) (*GetBotReply, error)
	// GetBotToken 获取机器人Token
	GetBotToken(context.Context, *GetBotTokenRequest) (*GetBotTokenReply, error)
	// GetBotCertificate 获取机器人证书
	GetBotCertificate(context.Context, *GetBotCertificateRequest) (*GetBotCertificateReply, error)
	// ForbidBot 封机器人账号 解封机器人账号
	ForbidBot(context.Context, *ForbidBotRequest) (*ForbidBotReply, error)
	// GetUserOwnedBots 获取某个用户拥有的所有机器人
	GetUserOwnedBots(context.Context, *GetUserOwnedBotsRequest) (*GetUserOwnedBotsReply, error)
	// GetUerIDbyBot 获取某个机器人所属用户的ID
	GetUerIDbyBot(context.Context, *GetUerIDbyBotRequest) (*GetUerIDbyBotReply, error)
	// GetGame 获取游戏信息根据游戏ID
	GetGame(context.Context, *GetGameRequest) (*GetGameReply, error)
	// GetGameByName 获取游戏信息 通过游戏名称 和 所属机器人ID
	GetGameByName(context.Context, *GetGameByNameRequest) (*GetGameReply, error)
	// 获取游戏分数
	GetGameScore(context.Context, *GetGameScoreRequest) (*GetGameScoreReply, error)
}

func RegisterBotServer(s *grpc.Server, srv BotServer) {
	s.RegisterService(&_Bot_serviceDesc, srv)
}

func _Bot_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBot(ctx, req.(*GetBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetBotToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetBotToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotToken(ctx, req.(*GetBotTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetBotCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetBotCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotCertificate(ctx, req.(*GetBotCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_ForbidBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForbidBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).ForbidBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/ForbidBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).ForbidBot(ctx, req.(*ForbidBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetUserOwnedBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOwnedBotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetUserOwnedBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetUserOwnedBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetUserOwnedBots(ctx, req.(*GetUserOwnedBotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetUerIDbyBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUerIDbyBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetUerIDbyBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetUerIDbyBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetUerIDbyBot(ctx, req.(*GetUerIDbyBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetGame(ctx, req.(*GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetGameByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetGameByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetGameByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetGameByName(ctx, req.(*GetGameByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetGameScore(ctx, req.(*GetGameScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dataservice.Bot",
	HandlerType: (*BotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBot",
			Handler:    _Bot_GetBot_Handler,
		},
		{
			MethodName: "GetBotToken",
			Handler:    _Bot_GetBotToken_Handler,
		},
		{
			MethodName: "GetBotCertificate",
			Handler:    _Bot_GetBotCertificate_Handler,
		},
		{
			MethodName: "ForbidBot",
			Handler:    _Bot_ForbidBot_Handler,
		},
		{
			MethodName: "GetUserOwnedBots",
			Handler:    _Bot_GetUserOwnedBots_Handler,
		},
		{
			MethodName: "GetUerIDbyBot",
			Handler:    _Bot_GetUerIDbyBot_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _Bot_GetGame_Handler,
		},
		{
			MethodName: "GetGameByName",
			Handler:    _Bot_GetGameByName_Handler,
		},
		{
			MethodName: "GetGameScore",
			Handler:    _Bot_GetGameScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/im/iminterfaceprotobufs/botserver/dataservice/dataservice.proto",
}

func (m *GetBotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBotRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BotID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.BotID))
	}
	return i, nil
}

func (m *GetBotReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBotReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BotID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.BotID))
	}
	if len(m.Commands) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(len(m.Commands)))
		i += copy(dAtA[i:], m.Commands)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.AllowPush {
		dAtA[i] = 0x28
		i++
		if m.AllowPush {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetBotTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBotTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BotID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.BotID))
	}
	return i, nil
}

func (m *GetBotTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBotTokenReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BotID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.BotID))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *GetBotCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBotCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BotID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.BotID))
	}
	return i, nil
}

func (m *GetBotCertificateReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBotCertificateReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BotID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.BotID))
	}
	if len(m.Webhook) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(len(m.Webhook)))
		i += copy(dAtA[i:], m.Webhook)
	}
	if len(m.Certificate) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(len(m.Certificate)))
		i += copy(dAtA[i:], m.Certificate)
	}
	return i, nil
}

func (m *ForbidBotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForbidBotRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BotID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.BotID))
	}
	if m.Action != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.Action))
	}
	return i, nil
}

func (m *ForbidBotReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForbidBotReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *GetUserOwnedBotsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserOwnedBotsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.UserID))
	}
	return i, nil
}

func (m *GetUserOwnedBotsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserOwnedBotsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BotIDs) > 0 {
		dAtA2 := make([]byte, len(m.BotIDs)*10)
		var j1 int
		for _, num := range m.BotIDs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *GetUerIDbyBotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUerIDbyBotRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BotID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.BotID))
	}
	return i, nil
}

func (m *GetUerIDbyBotReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUerIDbyBotReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.UserID))
	}
	return i, nil
}

func (m *GetGameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGameRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GameID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.GameID))
	}
	return i, nil
}

func (m *GetGameByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGameByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BotID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.BotID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GetGameReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGameReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GameID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.GameID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.OwnerID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.OwnerID))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.Animation) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(len(m.Animation)))
		i += copy(dAtA[i:], m.Animation)
	}
	return i, nil
}

func (m *GetGameScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGameScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gameid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.Gameid))
	}
	return i, nil
}

func (m *GetGameScoreReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGameScoreReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Succeed {
		dAtA[i] = 0x8
		i++
		if m.Succeed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.Scores) > 0 {
		for _, msg := range m.Scores {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDataservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserScore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.UserId))
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDataservice(dAtA, i, uint64(m.Score))
	}
	return i, nil
}

func encodeVarintDataservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetBotRequest) Size() (n int) {
	var l int
	_ = l
	if m.BotID != 0 {
		n += 1 + sovDataservice(uint64(m.BotID))
	}
	return n
}

func (m *GetBotReply) Size() (n int) {
	var l int
	_ = l
	if m.BotID != 0 {
		n += 1 + sovDataservice(uint64(m.BotID))
	}
	l = len(m.Commands)
	if l > 0 {
		n += 1 + l + sovDataservice(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDataservice(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovDataservice(uint64(l))
	}
	if m.AllowPush {
		n += 2
	}
	return n
}

func (m *GetBotTokenRequest) Size() (n int) {
	var l int
	_ = l
	if m.BotID != 0 {
		n += 1 + sovDataservice(uint64(m.BotID))
	}
	return n
}

func (m *GetBotTokenReply) Size() (n int) {
	var l int
	_ = l
	if m.BotID != 0 {
		n += 1 + sovDataservice(uint64(m.BotID))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovDataservice(uint64(l))
	}
	return n
}

func (m *GetBotCertificateRequest) Size() (n int) {
	var l int
	_ = l
	if m.BotID != 0 {
		n += 1 + sovDataservice(uint64(m.BotID))
	}
	return n
}

func (m *GetBotCertificateReply) Size() (n int) {
	var l int
	_ = l
	if m.BotID != 0 {
		n += 1 + sovDataservice(uint64(m.BotID))
	}
	l = len(m.Webhook)
	if l > 0 {
		n += 1 + l + sovDataservice(uint64(l))
	}
	l = len(m.Certificate)
	if l > 0 {
		n += 1 + l + sovDataservice(uint64(l))
	}
	return n
}

func (m *ForbidBotRequest) Size() (n int) {
	var l int
	_ = l
	if m.BotID != 0 {
		n += 1 + sovDataservice(uint64(m.BotID))
	}
	if m.Action != 0 {
		n += 1 + sovDataservice(uint64(m.Action))
	}
	return n
}

func (m *ForbidBotReply) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovDataservice(uint64(m.Result))
	}
	return n
}

func (m *GetUserOwnedBotsRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovDataservice(uint64(m.UserID))
	}
	return n
}

func (m *GetUserOwnedBotsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.BotIDs) > 0 {
		l = 0
		for _, e := range m.BotIDs {
			l += sovDataservice(uint64(e))
		}
		n += 1 + sovDataservice(uint64(l)) + l
	}
	return n
}

func (m *GetUerIDbyBotRequest) Size() (n int) {
	var l int
	_ = l
	if m.BotID != 0 {
		n += 1 + sovDataservice(uint64(m.BotID))
	}
	return n
}

func (m *GetUerIDbyBotReply) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovDataservice(uint64(m.UserID))
	}
	return n
}

func (m *GetGameRequest) Size() (n int) {
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovDataservice(uint64(m.GameID))
	}
	return n
}

func (m *GetGameByNameRequest) Size() (n int) {
	var l int
	_ = l
	if m.BotID != 0 {
		n += 1 + sovDataservice(uint64(m.BotID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDataservice(uint64(l))
	}
	return n
}

func (m *GetGameReply) Size() (n int) {
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovDataservice(uint64(m.GameID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDataservice(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDataservice(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovDataservice(uint64(l))
	}
	if m.OwnerID != 0 {
		n += 1 + sovDataservice(uint64(m.OwnerID))
	}
	if m.AccessHash != 0 {
		n += 1 + sovDataservice(uint64(m.AccessHash))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovDataservice(uint64(l))
	}
	l = len(m.Animation)
	if l > 0 {
		n += 1 + l + sovDataservice(uint64(l))
	}
	return n
}

func (m *GetGameScoreRequest) Size() (n int) {
	var l int
	_ = l
	if m.Gameid != 0 {
		n += 1 + sovDataservice(uint64(m.Gameid))
	}
	return n
}

func (m *GetGameScoreReply) Size() (n int) {
	var l int
	_ = l
	if m.Succeed {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovDataservice(uint64(l))
	}
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovDataservice(uint64(l))
		}
	}
	return n
}

func (m *UserScore) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovDataservice(uint64(m.UserId))
	}
	if m.Score != 0 {
		n += 1 + sovDataservice(uint64(m.Score))
	}
	return n
}

func sovDataservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDataservice(x uint64) (n int) {
	return sovDataservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetBotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotID", wireType)
			}
			m.BotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBotReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBotReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBotReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotID", wireType)
			}
			m.BotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowPush", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowPush = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBotTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBotTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBotTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotID", wireType)
			}
			m.BotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBotTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBotTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBotTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotID", wireType)
			}
			m.BotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBotCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBotCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBotCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotID", wireType)
			}
			m.BotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBotCertificateReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBotCertificateReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBotCertificateReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotID", wireType)
			}
			m.BotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Webhook = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = append(m.Certificate[:0], dAtA[iNdEx:postIndex]...)
			if m.Certificate == nil {
				m.Certificate = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForbidBotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForbidBotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForbidBotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotID", wireType)
			}
			m.BotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForbidBotReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForbidBotReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForbidBotReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserOwnedBotsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserOwnedBotsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserOwnedBotsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserOwnedBotsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserOwnedBotsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserOwnedBotsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BotIDs = append(m.BotIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDataservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDataservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDataservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BotIDs = append(m.BotIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BotIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUerIDbyBotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUerIDbyBotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUerIDbyBotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotID", wireType)
			}
			m.BotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUerIDbyBotReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUerIDbyBotReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUerIDbyBotReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGameByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGameByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGameByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotID", wireType)
			}
			m.BotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGameReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGameReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGameReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Animation", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Animation = append(m.Animation[:0], dAtA[iNdEx:postIndex]...)
			if m.Animation == nil {
				m.Animation = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGameScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGameScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGameScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gameid", wireType)
			}
			m.Gameid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gameid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGameScoreReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGameScoreReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGameScoreReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeed = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &UserScore{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDataservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDataservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDataservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDataservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataservice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/im/iminterfaceprotobufs/botserver/dataservice/dataservice.proto", fileDescriptorDataservice)
}

var fileDescriptorDataservice = []byte{
	// 787 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdd, 0x72, 0xda, 0x46,
	0x14, 0xae, 0x8a, 0xc5, 0xcf, 0xc1, 0xf6, 0xb8, 0x5b, 0x17, 0xab, 0x72, 0x8d, 0xe9, 0xb6, 0x9e,
	0x61, 0x3a, 0x2e, 0xb4, 0xee, 0x5d, 0x2f, 0x3a, 0x2e, 0xee, 0x94, 0xfa, 0xa6, 0xce, 0x28, 0xf1,
	0x6d, 0x3c, 0x2b, 0xb1, 0x36, 0x8a, 0x11, 0x4b, 0xb4, 0xab, 0x30, 0xbc, 0x48, 0x9e, 0x29, 0x97,
	0x79, 0x04, 0x8f, 0x6f, 0xf2, 0x1a, 0x99, 0xfd, 0x11, 0x48, 0x20, 0x20, 0x77, 0xfa, 0xce, 0x7e,
	0xe7, 0x9c, 0x6f, 0x77, 0xcf, 0x7e, 0x00, 0x37, 0x0f, 0xa1, 0x18, 0x11, 0xbf, 0x13, 0x0c, 0x89,
	0xe0, 0x34, 0x7e, 0x47, 0xe3, 0x4e, 0x18, 0x75, 0xc3, 0xa8, 0x3b, 0x61, 0x82, 0x08, 0x36, 0x89,
	0x99, 0x60, 0x7e, 0x72, 0xcf, 0xbb, 0x3e, 0x33, 0xeb, 0xdd, 0x01, 0x11, 0x44, 0x7e, 0x86, 0x01,
	0xcd, 0x7e, 0x77, 0x14, 0x17, 0xd5, 0x33, 0x21, 0x7c, 0x06, 0x7b, 0x7d, 0x2a, 0x7a, 0x4c, 0x78,
	0xf4, 0x6d, 0x42, 0xb9, 0x40, 0x87, 0x60, 0xfb, 0x4c, 0x5c, 0xff, 0xe3, 0x58, 0x2d, 0xab, 0xbd,
	0xe7, 0x69, 0x80, 0xdf, 0x5b, 0x50, 0x4f, 0x79, 0x93, 0xd1, 0xac, 0x98, 0x85, 0x5c, 0xa8, 0x06,
	0x2c, 0x8a, 0xc8, 0x78, 0xc0, 0x9d, 0xaf, 0x5b, 0x56, 0xbb, 0xe6, 0xcd, 0x31, 0x6a, 0x41, 0x7d,
	0x40, 0x79, 0x10, 0x87, 0x13, 0x11, 0xb2, 0xb1, 0x53, 0x52, 0xcb, 0xd9, 0x90, 0xac, 0x49, 0x7c,
	0x96, 0x08, 0x67, 0x47, 0xad, 0x69, 0x80, 0x4e, 0x00, 0xc8, 0x68, 0xc4, 0xa6, 0x77, 0x93, 0x84,
	0x0f, 0x1d, 0xbb, 0x65, 0xb5, 0xab, 0x5e, 0x4d, 0x45, 0x5e, 0x24, 0x7c, 0x88, 0x7f, 0x01, 0xa4,
	0x75, 0xbd, 0x62, 0x8f, 0x74, 0xbc, 0x79, 0x13, 0x7f, 0xc1, 0x41, 0x8e, 0xbb, 0x7e, 0x23, 0x87,
	0x60, 0x0b, 0xc9, 0x31, 0xbb, 0xd0, 0x00, 0xff, 0x06, 0x8e, 0xce, 0xbf, 0xa2, 0xb1, 0x08, 0xef,
	0xc3, 0x80, 0x08, 0xba, 0xb9, 0xe3, 0x1b, 0x68, 0x14, 0x64, 0xac, 0xef, 0xeb, 0x40, 0x65, 0x4a,
	0xfd, 0x21, 0x63, 0x8f, 0xa6, 0x73, 0x0a, 0xe5, 0xf1, 0x05, 0x8b, 0x1a, 0xea, 0xf8, 0x76, 0xbd,
	0x6c, 0x08, 0x5f, 0xc2, 0xc1, 0xbf, 0x2c, 0xf6, 0xc3, 0xc1, 0xb6, 0xcb, 0x44, 0x0d, 0x28, 0x93,
	0x40, 0xdd, 0x82, 0x6c, 0x62, 0x7b, 0x06, 0xe1, 0x36, 0xec, 0x67, 0x2a, 0x48, 0x95, 0x0d, 0x28,
	0xc7, 0x94, 0x27, 0x23, 0xa1, 0x0a, 0xd8, 0x9e, 0x41, 0xf8, 0x77, 0x38, 0xea, 0x53, 0x71, 0xcb,
	0x69, 0x7c, 0x33, 0x1d, 0x53, 0xc9, 0xe7, 0x69, 0xcb, 0x06, 0x94, 0x13, 0x4e, 0xe3, 0x79, 0x4f,
	0x83, 0x70, 0x17, 0xbe, 0x5b, 0x4d, 0x31, 0x3d, 0x94, 0x2c, 0x39, 0x32, 0x25, 0x99, 0xa0, 0x11,
	0x3e, 0x87, 0x43, 0x99, 0x20, 0x93, 0xfd, 0xd9, 0xd6, 0x01, 0x3d, 0x57, 0x73, 0x90, 0x65, 0x9b,
	0xda, 0x85, 0x62, 0xda, 0xb0, 0xdf, 0xa7, 0xa2, 0x4f, 0x22, 0x9a, 0x91, 0xfd, 0x40, 0x22, 0xba,
	0x60, 0x6a, 0x84, 0x2f, 0x95, 0x0a, 0xc9, 0xec, 0xcd, 0xfe, 0xcf, 0xf0, 0x8b, 0x4f, 0x16, 0xc1,
	0xce, 0x98, 0x44, 0xd4, 0x5c, 0x9e, 0xfa, 0xc6, 0x4f, 0x16, 0xec, 0xce, 0x9b, 0x19, 0x51, 0x99,
	0x56, 0xa5, 0xb4, 0x55, 0x51, 0xf2, 0x97, 0xbd, 0x1a, 0x11, 0x8a, 0x11, 0x4d, 0x5f, 0x8d, 0x02,
	0x72, 0x90, 0xd8, 0x74, 0xac, 0x76, 0x6e, 0x2b, 0x81, 0x29, 0x44, 0x4d, 0x00, 0x12, 0x04, 0x94,
	0xf3, 0xff, 0x08, 0x1f, 0x3a, 0x65, 0xa5, 0x20, 0x13, 0x91, 0xf5, 0x26, 0x43, 0x26, 0x98, 0x53,
	0x51, 0x23, 0xa6, 0x01, 0xfa, 0x01, 0x6a, 0x7f, 0x8f, 0xc3, 0x88, 0x28, 0x15, 0x55, 0xb5, 0xb2,
	0x08, 0xe0, 0x5f, 0xe1, 0x5b, 0xb3, 0xc3, 0x97, 0x01, 0x8b, 0xb3, 0x67, 0x2a, 0x63, 0xe1, 0x20,
	0xdd, 0xa8, 0x46, 0x98, 0xc3, 0x37, 0x79, 0xba, 0x3c, 0x15, 0x07, 0x2a, 0x3c, 0x09, 0x02, 0x4a,
	0x35, 0xbb, 0xea, 0xa5, 0x50, 0x2a, 0xa2, 0x71, 0xcc, 0xe2, 0xf4, 0x31, 0x2a, 0x80, 0x3a, 0x50,
	0xe6, 0x32, 0x9b, 0x3b, 0xa5, 0x56, 0xa9, 0x5d, 0xbf, 0x68, 0x74, 0xb2, 0x4e, 0x27, 0xe7, 0x4c,
	0x17, 0x37, 0x2c, 0xfc, 0x27, 0xd4, 0xe6, 0x41, 0x74, 0x04, 0x15, 0x39, 0x09, 0x77, 0x46, 0x9a,
	0x6d, 0x06, 0x43, 0xf5, 0x52, 0x7c, 0xf3, 0x32, 0x34, 0xb8, 0xf8, 0x64, 0x43, 0xa9, 0xc7, 0x04,
	0xba, 0x84, 0xb2, 0x7e, 0xce, 0xc8, 0xcd, 0x75, 0xcb, 0x39, 0xa8, 0xeb, 0x14, 0xae, 0x4d, 0x46,
	0x33, 0xfc, 0x15, 0xba, 0x49, 0x6d, 0x54, 0x59, 0x10, 0x3a, 0x2d, 0xa0, 0x66, 0x8d, 0xcc, 0x3d,
	0x59, 0x4f, 0xd0, 0x05, 0x89, 0x3a, 0xcb, 0xbc, 0xc3, 0xa0, 0xb3, 0x82, 0xac, 0x55, 0xcf, 0x72,
	0x7f, 0xda, 0x46, 0xd3, 0x2d, 0xae, 0xa1, 0x36, 0xb7, 0x05, 0x94, 0x17, 0xb4, 0x6c, 0x38, 0xee,
	0xf1, 0xba, 0x65, 0x5d, 0xea, 0xb5, 0x72, 0xe0, 0x9c, 0x09, 0xa0, 0x9f, 0x97, 0x55, 0x14, 0xd9,
	0x8a, 0x8b, 0xb7, 0xb0, 0x74, 0xfd, 0x5b, 0xf5, 0x6b, 0xb6, 0x70, 0x01, 0xf4, 0xe3, 0x4a, 0xda,
	0xb2, 0x9f, 0xb8, 0xa7, 0x9b, 0x28, 0xba, 0xec, 0x15, 0x54, 0xcc, 0xc0, 0xa2, 0xe3, 0x65, 0x76,
	0xc6, 0x44, 0xdc, 0xef, 0x8b, 0x17, 0xd3, 0xab, 0xdf, 0xcb, 0x39, 0xc9, 0xaa, 0xb6, 0x15, 0x97,
	0xd9, 0x5c, 0xd0, 0x9b, 0xfb, 0x8a, 0x1e, 0xea, 0x56, 0x11, 0x39, 0xfb, 0x20, 0xdd, 0xe6, 0x06,
	0x86, 0xaa, 0xd9, 0xdb, 0xfd, 0xf0, 0xdc, 0xb4, 0x3e, 0x3e, 0x37, 0xad, 0xa7, 0xe7, 0xa6, 0xe5,
	0x97, 0xd5, 0x1f, 0x86, 0x3f, 0x3e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x8c, 0x50, 0xbe, 0x83,
	0x08, 0x00, 0x00,
}
