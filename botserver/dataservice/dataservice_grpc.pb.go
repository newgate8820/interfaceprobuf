// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: dataservice.proto

package dataservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BotClient is the client API for Bot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotClient interface {
	// GetBot 获取机器人信息
	GetBot(ctx context.Context, in *GetBotRequest, opts ...grpc.CallOption) (*GetBotReply, error)
	// GetBotToken 获取机器人Token
	GetBotToken(ctx context.Context, in *GetBotTokenRequest, opts ...grpc.CallOption) (*GetBotTokenReply, error)
	// GetBotCertificate 获取机器人证书
	GetBotCertificate(ctx context.Context, in *GetBotCertificateRequest, opts ...grpc.CallOption) (*GetBotCertificateReply, error)
	// ForbidBot 封机器人账号 解封机器人账号
	ForbidBot(ctx context.Context, in *ForbidBotRequest, opts ...grpc.CallOption) (*ForbidBotReply, error)
	// GetUserOwnedBots 获取某个用户拥有的所有机器人
	GetUserOwnedBots(ctx context.Context, in *GetUserOwnedBotsRequest, opts ...grpc.CallOption) (*GetUserOwnedBotsReply, error)
	// GetUerIDbyBot 获取某个机器人所属用户的ID
	GetUerIDbyBot(ctx context.Context, in *GetUerIDbyBotRequest, opts ...grpc.CallOption) (*GetUerIDbyBotReply, error)
	// GetGame 获取游戏信息根据游戏ID
	GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GetGameReply, error)
	// GetGameByName 获取游戏信息 通过游戏名称 和 所属机器人ID
	GetGameByName(ctx context.Context, in *GetGameByNameRequest, opts ...grpc.CallOption) (*GetGameReply, error)
	// 获取游戏分数
	GetGameScore(ctx context.Context, in *GetGameScoreRequest, opts ...grpc.CallOption) (*GetGameScoreReply, error)
}

type botClient struct {
	cc grpc.ClientConnInterface
}

func NewBotClient(cc grpc.ClientConnInterface) BotClient {
	return &botClient{cc}
}

func (c *botClient) GetBot(ctx context.Context, in *GetBotRequest, opts ...grpc.CallOption) (*GetBotReply, error) {
	out := new(GetBotReply)
	err := c.cc.Invoke(ctx, "/dataservice.Bot/GetBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetBotToken(ctx context.Context, in *GetBotTokenRequest, opts ...grpc.CallOption) (*GetBotTokenReply, error) {
	out := new(GetBotTokenReply)
	err := c.cc.Invoke(ctx, "/dataservice.Bot/GetBotToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetBotCertificate(ctx context.Context, in *GetBotCertificateRequest, opts ...grpc.CallOption) (*GetBotCertificateReply, error) {
	out := new(GetBotCertificateReply)
	err := c.cc.Invoke(ctx, "/dataservice.Bot/GetBotCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) ForbidBot(ctx context.Context, in *ForbidBotRequest, opts ...grpc.CallOption) (*ForbidBotReply, error) {
	out := new(ForbidBotReply)
	err := c.cc.Invoke(ctx, "/dataservice.Bot/ForbidBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetUserOwnedBots(ctx context.Context, in *GetUserOwnedBotsRequest, opts ...grpc.CallOption) (*GetUserOwnedBotsReply, error) {
	out := new(GetUserOwnedBotsReply)
	err := c.cc.Invoke(ctx, "/dataservice.Bot/GetUserOwnedBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetUerIDbyBot(ctx context.Context, in *GetUerIDbyBotRequest, opts ...grpc.CallOption) (*GetUerIDbyBotReply, error) {
	out := new(GetUerIDbyBotReply)
	err := c.cc.Invoke(ctx, "/dataservice.Bot/GetUerIDbyBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GetGameReply, error) {
	out := new(GetGameReply)
	err := c.cc.Invoke(ctx, "/dataservice.Bot/GetGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetGameByName(ctx context.Context, in *GetGameByNameRequest, opts ...grpc.CallOption) (*GetGameReply, error) {
	out := new(GetGameReply)
	err := c.cc.Invoke(ctx, "/dataservice.Bot/GetGameByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetGameScore(ctx context.Context, in *GetGameScoreRequest, opts ...grpc.CallOption) (*GetGameScoreReply, error) {
	out := new(GetGameScoreReply)
	err := c.cc.Invoke(ctx, "/dataservice.Bot/GetGameScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotServer is the server API for Bot service.
// All implementations must embed UnimplementedBotServer
// for forward compatibility
type BotServer interface {
	// GetBot 获取机器人信息
	GetBot(context.Context, *GetBotRequest) (*GetBotReply, error)
	// GetBotToken 获取机器人Token
	GetBotToken(context.Context, *GetBotTokenRequest) (*GetBotTokenReply, error)
	// GetBotCertificate 获取机器人证书
	GetBotCertificate(context.Context, *GetBotCertificateRequest) (*GetBotCertificateReply, error)
	// ForbidBot 封机器人账号 解封机器人账号
	ForbidBot(context.Context, *ForbidBotRequest) (*ForbidBotReply, error)
	// GetUserOwnedBots 获取某个用户拥有的所有机器人
	GetUserOwnedBots(context.Context, *GetUserOwnedBotsRequest) (*GetUserOwnedBotsReply, error)
	// GetUerIDbyBot 获取某个机器人所属用户的ID
	GetUerIDbyBot(context.Context, *GetUerIDbyBotRequest) (*GetUerIDbyBotReply, error)
	// GetGame 获取游戏信息根据游戏ID
	GetGame(context.Context, *GetGameRequest) (*GetGameReply, error)
	// GetGameByName 获取游戏信息 通过游戏名称 和 所属机器人ID
	GetGameByName(context.Context, *GetGameByNameRequest) (*GetGameReply, error)
	// 获取游戏分数
	GetGameScore(context.Context, *GetGameScoreRequest) (*GetGameScoreReply, error)
	mustEmbedUnimplementedBotServer()
}

// UnimplementedBotServer must be embedded to have forward compatible implementations.
type UnimplementedBotServer struct {
}

func (UnimplementedBotServer) GetBot(context.Context, *GetBotRequest) (*GetBotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBot not implemented")
}
func (UnimplementedBotServer) GetBotToken(context.Context, *GetBotTokenRequest) (*GetBotTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotToken not implemented")
}
func (UnimplementedBotServer) GetBotCertificate(context.Context, *GetBotCertificateRequest) (*GetBotCertificateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotCertificate not implemented")
}
func (UnimplementedBotServer) ForbidBot(context.Context, *ForbidBotRequest) (*ForbidBotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForbidBot not implemented")
}
func (UnimplementedBotServer) GetUserOwnedBots(context.Context, *GetUserOwnedBotsRequest) (*GetUserOwnedBotsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOwnedBots not implemented")
}
func (UnimplementedBotServer) GetUerIDbyBot(context.Context, *GetUerIDbyBotRequest) (*GetUerIDbyBotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUerIDbyBot not implemented")
}
func (UnimplementedBotServer) GetGame(context.Context, *GetGameRequest) (*GetGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedBotServer) GetGameByName(context.Context, *GetGameByNameRequest) (*GetGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameByName not implemented")
}
func (UnimplementedBotServer) GetGameScore(context.Context, *GetGameScoreRequest) (*GetGameScoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameScore not implemented")
}
func (UnimplementedBotServer) mustEmbedUnimplementedBotServer() {}

// UnsafeBotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotServer will
// result in compilation errors.
type UnsafeBotServer interface {
	mustEmbedUnimplementedBotServer()
}

func RegisterBotServer(s grpc.ServiceRegistrar, srv BotServer) {
	s.RegisterService(&Bot_ServiceDesc, srv)
}

func _Bot_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBot(ctx, req.(*GetBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetBotToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetBotToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotToken(ctx, req.(*GetBotTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetBotCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetBotCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotCertificate(ctx, req.(*GetBotCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_ForbidBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForbidBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).ForbidBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/ForbidBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).ForbidBot(ctx, req.(*ForbidBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetUserOwnedBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOwnedBotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetUserOwnedBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetUserOwnedBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetUserOwnedBots(ctx, req.(*GetUserOwnedBotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetUerIDbyBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUerIDbyBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetUerIDbyBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetUerIDbyBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetUerIDbyBot(ctx, req.(*GetUerIDbyBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetGame(ctx, req.(*GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetGameByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetGameByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetGameByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetGameByName(ctx, req.(*GetGameByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.Bot/GetGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetGameScore(ctx, req.(*GetGameScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bot_ServiceDesc is the grpc.ServiceDesc for Bot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dataservice.Bot",
	HandlerType: (*BotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBot",
			Handler:    _Bot_GetBot_Handler,
		},
		{
			MethodName: "GetBotToken",
			Handler:    _Bot_GetBotToken_Handler,
		},
		{
			MethodName: "GetBotCertificate",
			Handler:    _Bot_GetBotCertificate_Handler,
		},
		{
			MethodName: "ForbidBot",
			Handler:    _Bot_ForbidBot_Handler,
		},
		{
			MethodName: "GetUserOwnedBots",
			Handler:    _Bot_GetUserOwnedBots_Handler,
		},
		{
			MethodName: "GetUerIDbyBot",
			Handler:    _Bot_GetUerIDbyBot_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _Bot_GetGame_Handler,
		},
		{
			MethodName: "GetGameByName",
			Handler:    _Bot_GetGameByName_Handler,
		},
		{
			MethodName: "GetGameScore",
			Handler:    _Bot_GetGameScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataservice.proto",
}
