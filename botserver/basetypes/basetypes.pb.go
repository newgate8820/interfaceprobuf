// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/botserver/basetypes/basetypes.proto

/*
Package basetypes is a generated protocol buffer package.

protoc --gogofast_out=plugins=grpc:. ./gitlab.chatserver.im/interfaceprobuf/botserver/basetypes/basetypes.proto

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/botserver/basetypes/basetypes.proto

It has these top-level messages:

	User
	Chat
	Entity
*/
package basetypes

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ChatType 聊天类型
type ChatType int32

const (
	ChatType_ChatTypeZero ChatType = 0
	ChatType_PeerUser     ChatType = 1
	ChatType_PeerChat     ChatType = 2
	ChatType_ChannelChat  ChatType = 3
)

var ChatType_name = map[int32]string{
	0: "ChatTypeZero",
	1: "PeerUser",
	2: "PeerChat",
	3: "ChannelChat",
}
var ChatType_value = map[string]int32{
	"ChatTypeZero": 0,
	"PeerUser":     1,
	"PeerChat":     2,
	"ChannelChat":  3,
}

func (x ChatType) String() string {
	return proto.EnumName(ChatType_name, int32(x))
}
func (ChatType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBasetypes, []int{0} }

// EntityType 实体类型
type EntityType int32

const (
	EntityType_EntityTypeZero    EntityType = 0
	EntityType_EntityBold        EntityType = 1
	EntityType_EntityItalic      EntityType = 2
	EntityType_EntityCode        EntityType = 3
	EntityType_EntityURL         EntityType = 4
	EntityType_EntityTextURL     EntityType = 5
	EntityType_EntityMention     EntityType = 6
	EntityType_EntityMentionName EntityType = 7
	EntityType_EntityEMail       EntityType = 8
	EntityType_EntityBotCommand  EntityType = 9
)

var EntityType_name = map[int32]string{
	0: "EntityTypeZero",
	1: "EntityBold",
	2: "EntityItalic",
	3: "EntityCode",
	4: "EntityURL",
	5: "EntityTextURL",
	6: "EntityMention",
	7: "EntityMentionName",
	8: "EntityEMail",
	9: "EntityBotCommand",
}
var EntityType_value = map[string]int32{
	"EntityTypeZero":    0,
	"EntityBold":        1,
	"EntityItalic":      2,
	"EntityCode":        3,
	"EntityURL":         4,
	"EntityTextURL":     5,
	"EntityMention":     6,
	"EntityMentionName": 7,
	"EntityEMail":       8,
	"EntityBotCommand":  9,
}

func (x EntityType) String() string {
	return proto.EnumName(EntityType_name, int32(x))
}
func (EntityType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBasetypes, []int{1} }

// User 用户信息
type User struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Username  string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorBasetypes, []int{0} }

func (m *User) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// Chat 聊天信息
type Chat struct {
	Id    int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type  ChatType `protobuf:"varint,2,opt,name=type,proto3,enum=basetypes.ChatType" json:"type,omitempty"`
	Title string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *Chat) Reset()                    { *m = Chat{} }
func (m *Chat) String() string            { return proto.CompactTextString(m) }
func (*Chat) ProtoMessage()               {}
func (*Chat) Descriptor() ([]byte, []int) { return fileDescriptorBasetypes, []int{1} }

func (m *Chat) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Chat) GetType() ChatType {
	if m != nil {
		return m.Type
	}
	return ChatType_ChatTypeZero
}

func (m *Chat) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// Entity 实体
type Entity struct {
	Type   EntityType `protobuf:"varint,1,opt,name=type,proto3,enum=basetypes.EntityType" json:"type,omitempty"`
	UserId uint32     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Offset uint32     `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Length uint32     `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Url    string     `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptorBasetypes, []int{2} }

func (m *Entity) GetType() EntityType {
	if m != nil {
		return m.Type
	}
	return EntityType_EntityTypeZero
}

func (m *Entity) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Entity) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Entity) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Entity) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "basetypes.User")
	proto.RegisterType((*Chat)(nil), "basetypes.Chat")
	proto.RegisterType((*Entity)(nil), "basetypes.Entity")
	proto.RegisterEnum("basetypes.ChatType", ChatType_name, ChatType_value)
	proto.RegisterEnum("basetypes.EntityType", EntityType_name, EntityType_value)
}
func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBasetypes(dAtA, i, uint64(m.Id))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBasetypes(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBasetypes(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBasetypes(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func (m *Chat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBasetypes(dAtA, i, uint64(m.Id))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBasetypes(dAtA, i, uint64(m.Type))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBasetypes(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	return i, nil
}

func (m *Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBasetypes(dAtA, i, uint64(m.Type))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBasetypes(dAtA, i, uint64(m.UserId))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBasetypes(dAtA, i, uint64(m.Offset))
	}
	if m.Length != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBasetypes(dAtA, i, uint64(m.Length))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBasetypes(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func encodeVarintBasetypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *User) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBasetypes(uint64(m.Id))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovBasetypes(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovBasetypes(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovBasetypes(uint64(l))
	}
	return n
}

func (m *Chat) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBasetypes(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovBasetypes(uint64(m.Type))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBasetypes(uint64(l))
	}
	return n
}

func (m *Entity) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovBasetypes(uint64(m.Type))
	}
	if m.UserId != 0 {
		n += 1 + sovBasetypes(uint64(m.UserId))
	}
	if m.Offset != 0 {
		n += 1 + sovBasetypes(uint64(m.Offset))
	}
	if m.Length != 0 {
		n += 1 + sovBasetypes(uint64(m.Length))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBasetypes(uint64(l))
	}
	return n
}

func sovBasetypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBasetypes(x uint64) (n int) {
	return sovBasetypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasetypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasetypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasetypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasetypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasetypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasetypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasetypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasetypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasetypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBasetypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasetypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasetypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasetypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ChatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasetypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasetypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasetypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBasetypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasetypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasetypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (EntityType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasetypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasetypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasetypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasetypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasetypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasetypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBasetypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBasetypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBasetypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasetypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasetypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBasetypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBasetypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBasetypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBasetypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBasetypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/botserver/basetypes/basetypes.proto", fileDescriptorBasetypes)
}

var fileDescriptorBasetypes = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0xc6, 0x71, 0x5c, 0xfb, 0x7e, 0x71, 0x98, 0x0e, 0x2d, 0x44, 0x20, 0xa2, 0x2a, 0x1b,
	0x4a, 0x17, 0x89, 0x04, 0x6f, 0xd0, 0xa8, 0x12, 0x91, 0x28, 0x42, 0x16, 0xd9, 0xb0, 0xa9, 0xc6,
	0xf1, 0x75, 0x33, 0xd2, 0x78, 0x26, 0x1a, 0x4f, 0x10, 0x79, 0x09, 0xde, 0x0a, 0x89, 0x25, 0x8f,
	0x80, 0xf2, 0x24, 0x68, 0xc6, 0x36, 0x0e, 0xbb, 0x7b, 0x7e, 0x74, 0xce, 0xf1, 0x0f, 0xbc, 0x7f,
	0x14, 0x56, 0xf2, 0x7c, 0xbe, 0xd9, 0x72, 0x5b, 0xa3, 0xf9, 0x8a, 0x66, 0x2e, 0xaa, 0x85, 0x50,
	0x16, 0x4d, 0xc9, 0x37, 0xb8, 0x33, 0x3a, 0xdf, 0x97, 0x8b, 0x5c, 0xb7, 0xe2, 0x22, 0xe7, 0x35,
	0xda, 0xc3, 0x0e, 0xeb, 0xfe, 0x9a, 0xef, 0x8c, 0xb6, 0x9a, 0x25, 0x7f, 0x89, 0x99, 0x82, 0x70,
	0x5d, 0xa3, 0x61, 0x63, 0x08, 0x44, 0x31, 0x21, 0x57, 0xe4, 0x3a, 0xcd, 0x02, 0x51, 0xb0, 0x57,
	0x00, 0xa5, 0x30, 0xb5, 0x7d, 0x50, 0xbc, 0xc2, 0x49, 0x70, 0x45, 0xae, 0x93, 0x2c, 0xf1, 0xcc,
	0x47, 0x5e, 0x21, 0x7b, 0x09, 0x89, 0xe4, 0x9d, 0x3a, 0xf0, 0x6a, 0xec, 0x08, 0x2f, 0xbe, 0x80,
	0x78, 0x5f, 0xa3, 0xf1, 0x5a, 0xd8, 0x68, 0x1d, 0x9e, 0xad, 0x21, 0x5c, 0x6e, 0xb9, 0x3d, 0xe9,
	0x1b, 0xfa, 0xbe, 0xd7, 0x10, 0xba, 0x41, 0xbe, 0x69, 0xfc, 0xf6, 0xe9, 0xbc, 0x9f, 0xec, 0xec,
	0x9f, 0x0f, 0x3b, 0xcc, 0xbc, 0x81, 0x5d, 0xc0, 0xd0, 0x0a, 0x2b, 0xbb, 0xd6, 0x06, 0xcc, 0xbe,
	0x13, 0x88, 0xee, 0x94, 0x15, 0xf6, 0xc0, 0xde, 0xb4, 0x49, 0xc4, 0x27, 0x5d, 0x9e, 0x24, 0x35,
	0x86, 0x93, 0xac, 0xe7, 0x70, 0xe6, 0x86, 0x3d, 0x88, 0xc2, 0xf7, 0xa6, 0x59, 0xe4, 0xe0, 0xaa,
	0x60, 0xcf, 0x20, 0xd2, 0x65, 0x59, 0xa3, 0xf5, 0x2d, 0x69, 0xd6, 0x22, 0xc7, 0x4b, 0x54, 0x8f,
	0x76, 0xeb, 0x9f, 0x2b, 0xcd, 0x5a, 0xc4, 0x28, 0x0c, 0xf6, 0x46, 0x4e, 0x86, 0x7e, 0x92, 0x3b,
	0x6f, 0x56, 0x10, 0x77, 0xc3, 0x19, 0x85, 0x51, 0x77, 0x7f, 0x41, 0xa3, 0xe9, 0x7f, 0x6c, 0x04,
	0xf1, 0x27, 0x44, 0xe3, 0xde, 0x3c, 0x25, 0x1d, 0x72, 0x1e, 0x1a, 0xb0, 0x27, 0xf0, 0xff, 0x72,
	0xcb, 0x95, 0x42, 0xe9, 0x89, 0xc1, 0xcd, 0x0f, 0x02, 0xd0, 0x4f, 0x67, 0x0c, 0xc6, 0x3d, 0x6a,
	0xf3, 0xc6, 0x9d, 0xe3, 0x56, 0xcb, 0x82, 0x12, 0xd7, 0xd8, 0xe0, 0x95, 0xe5, 0x52, 0x6c, 0x68,
	0xd0, 0x3b, 0x96, 0xba, 0x40, 0x3a, 0x60, 0x29, 0x24, 0x0d, 0x5e, 0x67, 0x1f, 0x68, 0xc8, 0xce,
	0x21, 0x6d, 0x43, 0xf1, 0x9b, 0x75, 0xd4, 0xb0, 0xa7, 0xee, 0x51, 0x59, 0xa1, 0x15, 0x8d, 0xd8,
	0x25, 0x9c, 0xff, 0x43, 0xb9, 0xaf, 0x4d, 0xcf, 0xdc, 0xe2, 0x86, 0xbe, 0xbb, 0xe7, 0x42, 0xd2,
	0x98, 0x5d, 0x00, 0xed, 0xe6, 0xd8, 0xa5, 0xae, 0x2a, 0xae, 0x0a, 0x9a, 0xdc, 0x8e, 0x7e, 0x1e,
	0xa7, 0xe4, 0xd7, 0x71, 0x4a, 0x7e, 0x1f, 0xa7, 0x24, 0x8f, 0xfc, 0xaf, 0xf8, 0xee, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x0e, 0xe0, 0x3c, 0xbf, 0xd6, 0x02, 0x00, 0x00,
}
