// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/im/iminterfaceprotobufs/botserver/userservice/userservice.proto

/*
Package userservice is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/im/iminterfaceprotobufs/botserver/userservice/userservice.proto

It has these top-level messages:

	GetBotDialogUserIdsRequest
	GetBotDialogUserIdsReply
*/
package userservice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetBotDialogUserIdsRequest struct {
	BotId    uint32 `protobuf:"varint,1,opt,name=botId,proto3" json:"botId,omitempty"`
	PageNo   uint32 `protobuf:"varint,2,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize uint32 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (m *GetBotDialogUserIdsRequest) Reset()         { *m = GetBotDialogUserIdsRequest{} }
func (m *GetBotDialogUserIdsRequest) String() string { return proto.CompactTextString(m) }
func (*GetBotDialogUserIdsRequest) ProtoMessage()    {}
func (*GetBotDialogUserIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorUserservice, []int{0}
}

func (m *GetBotDialogUserIdsRequest) GetBotId() uint32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *GetBotDialogUserIdsRequest) GetPageNo() uint32 {
	if m != nil {
		return m.PageNo
	}
	return 0
}

func (m *GetBotDialogUserIdsRequest) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type GetBotDialogUserIdsReply struct {
	PageNo     uint32   `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize   uint32   `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPage  uint32   `protobuf:"varint,3,opt,name=totalPage,proto3" json:"totalPage,omitempty"`
	TotalCount uint32   `protobuf:"varint,4,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	List       []uint32 `protobuf:"varint,5,rep,packed,name=list" json:"list,omitempty"`
}

func (m *GetBotDialogUserIdsReply) Reset()         { *m = GetBotDialogUserIdsReply{} }
func (m *GetBotDialogUserIdsReply) String() string { return proto.CompactTextString(m) }
func (*GetBotDialogUserIdsReply) ProtoMessage()    {}
func (*GetBotDialogUserIdsReply) Descriptor() ([]byte, []int) {
	return fileDescriptorUserservice, []int{1}
}

func (m *GetBotDialogUserIdsReply) GetPageNo() uint32 {
	if m != nil {
		return m.PageNo
	}
	return 0
}

func (m *GetBotDialogUserIdsReply) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *GetBotDialogUserIdsReply) GetTotalPage() uint32 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

func (m *GetBotDialogUserIdsReply) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *GetBotDialogUserIdsReply) GetList() []uint32 {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*GetBotDialogUserIdsRequest)(nil), "userservice.GetBotDialogUserIdsRequest")
	proto.RegisterType((*GetBotDialogUserIdsReply)(nil), "userservice.GetBotDialogUserIdsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Bot service

type BotClient interface {
	// GetBotDialog 获取机器人对话列表的用户ID数组
	GetBotDialogUserIds(ctx context.Context, in *GetBotDialogUserIdsRequest, opts ...grpc.CallOption) (*GetBotDialogUserIdsReply, error)
}

type botClient struct {
	cc *grpc.ClientConn
}

func NewBotClient(cc *grpc.ClientConn) BotClient {
	return &botClient{cc}
}

func (c *botClient) GetBotDialogUserIds(ctx context.Context, in *GetBotDialogUserIdsRequest, opts ...grpc.CallOption) (*GetBotDialogUserIdsReply, error) {
	out := new(GetBotDialogUserIdsReply)
	err := grpc.Invoke(ctx, "/userservice.Bot/GetBotDialogUserIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bot service

type BotServer interface {
	// GetBotDialog 获取机器人对话列表的用户ID数组
	GetBotDialogUserIds(context.Context, *GetBotDialogUserIdsRequest) (*GetBotDialogUserIdsReply, error)
}

func RegisterBotServer(s *grpc.Server, srv BotServer) {
	s.RegisterService(&_Bot_serviceDesc, srv)
}

func _Bot_GetBotDialogUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotDialogUserIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotDialogUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userservice.Bot/GetBotDialogUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotDialogUserIds(ctx, req.(*GetBotDialogUserIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userservice.Bot",
	HandlerType: (*BotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBotDialogUserIds",
			Handler:    _Bot_GetBotDialogUserIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/im/iminterfaceprotobufs/botserver/userservice/userservice.proto",
}

func (m *GetBotDialogUserIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBotDialogUserIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BotId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserservice(dAtA, i, uint64(m.BotId))
	}
	if m.PageNo != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserservice(dAtA, i, uint64(m.PageNo))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserservice(dAtA, i, uint64(m.PageSize))
	}
	return i, nil
}

func (m *GetBotDialogUserIdsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBotDialogUserIdsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PageNo != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserservice(dAtA, i, uint64(m.PageNo))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserservice(dAtA, i, uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserservice(dAtA, i, uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserservice(dAtA, i, uint64(m.TotalCount))
	}
	if len(m.List) > 0 {
		dAtA2 := make([]byte, len(m.List)*10)
		var j1 int
		for _, num := range m.List {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserservice(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func encodeVarintUserservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetBotDialogUserIdsRequest) Size() (n int) {
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovUserservice(uint64(m.BotId))
	}
	if m.PageNo != 0 {
		n += 1 + sovUserservice(uint64(m.PageNo))
	}
	if m.PageSize != 0 {
		n += 1 + sovUserservice(uint64(m.PageSize))
	}
	return n
}

func (m *GetBotDialogUserIdsReply) Size() (n int) {
	var l int
	_ = l
	if m.PageNo != 0 {
		n += 1 + sovUserservice(uint64(m.PageNo))
	}
	if m.PageSize != 0 {
		n += 1 + sovUserservice(uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		n += 1 + sovUserservice(uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		n += 1 + sovUserservice(uint64(m.TotalCount))
	}
	if len(m.List) > 0 {
		l = 0
		for _, e := range m.List {
			l += sovUserservice(uint64(e))
		}
		n += 1 + sovUserservice(uint64(l)) + l
	}
	return n
}

func sovUserservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUserservice(x uint64) (n int) {
	return sovUserservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetBotDialogUserIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBotDialogUserIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBotDialogUserIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNo", wireType)
			}
			m.PageNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNo |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBotDialogUserIdsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBotDialogUserIdsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBotDialogUserIdsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNo", wireType)
			}
			m.PageNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNo |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPage", wireType)
			}
			m.TotalPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUserservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUserservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUserservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUserservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserservice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/im/iminterfaceprotobufs/botserver/userservice/userservice.proto", fileDescriptorUserservice)
}

var fileDescriptorUserservice = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0xcd, 0xba, 0x0d, 0x3d, 0xba, 0x9b, 0x28, 0x12, 0x8a, 0x94, 0x51, 0x10, 0x77, 0xd5,
	0x82, 0xbe, 0x41, 0x15, 0x64, 0x37, 0x2a, 0x15, 0x1f, 0x20, 0xdd, 0xb2, 0x1a, 0xc8, 0x76, 0x6a,
	0x73, 0x2a, 0xcc, 0xa7, 0xf1, 0x71, 0xbc, 0xf4, 0x11, 0xa4, 0x4f, 0x22, 0x8b, 0x53, 0x23, 0x6c,
	0x78, 0xf7, 0xff, 0xdf, 0x7f, 0xf8, 0x4f, 0x38, 0x81, 0xdb, 0x52, 0x93, 0x91, 0x45, 0x32, 0x79,
	0x94, 0x64, 0x55, 0xfd, 0xac, 0xea, 0x44, 0xcf, 0x53, 0x3d, 0x4f, 0x2b, 0x24, 0x49, 0x58, 0xd5,
	0x48, 0x58, 0x34, 0x33, 0x9b, 0x16, 0xb8, 0xce, 0xd3, 0xc6, 0xaa, 0x7a, 0x25, 0xf5, 0x44, 0xf9,
	0x3a, 0x71, 0xb3, 0x7c, 0xdf, 0x43, 0xf1, 0x0c, 0xc2, 0x6b, 0x45, 0x19, 0xd2, 0x95, 0x96, 0x06,
	0xcb, 0x07, 0xab, 0xea, 0xf1, 0xd4, 0xe6, 0xea, 0xa9, 0x51, 0x96, 0xf8, 0x11, 0xf4, 0x0a, 0xa4,
	0xf1, 0x54, 0xb0, 0x21, 0x1b, 0x0d, 0xf2, 0x2f, 0xc3, 0x8f, 0xa1, 0x5f, 0xc9, 0x52, 0xdd, 0xa0,
	0xe8, 0x38, 0xbc, 0x76, 0x3c, 0x84, 0xdd, 0x95, 0xba, 0xd7, 0x2f, 0x4a, 0x04, 0x2e, 0xf9, 0xf1,
	0xf1, 0x2b, 0x03, 0xb1, 0x71, 0x51, 0x65, 0x96, 0x5e, 0x21, 0xdb, 0x5a, 0xd8, 0xf9, 0x5b, 0xc8,
	0x4f, 0x60, 0x8f, 0x90, 0xa4, 0xb9, 0x93, 0xe5, 0xf7, 0xb6, 0x5f, 0xc0, 0x23, 0x00, 0x67, 0x2e,
	0xb1, 0x59, 0x90, 0xe8, 0xba, 0xd8, 0x23, 0x9c, 0x43, 0xd7, 0x68, 0x4b, 0xa2, 0x37, 0x0c, 0x46,
	0x83, 0xdc, 0xe9, 0xf3, 0x05, 0x04, 0x19, 0x12, 0x2f, 0xe1, 0x70, 0xc3, 0x43, 0xf9, 0x59, 0xe2,
	0x5f, 0x72, 0xfb, 0xcd, 0xc2, 0xd3, 0xff, 0x07, 0x2b, 0xb3, 0x8c, 0x77, 0xb2, 0x83, 0xb7, 0x36,
	0x62, 0xef, 0x6d, 0xc4, 0x3e, 0xda, 0x88, 0x15, 0x7d, 0xf7, 0x39, 0x17, 0x9f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x82, 0xd6, 0x2b, 0xea, 0xef, 0x01, 0x00, 0x00,
}
