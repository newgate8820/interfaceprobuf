// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/botserver/botserver.proto

/*
Package pbbotserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/botserver/botserver.proto

It has these top-level messages:

	ReqGetAdminGroups
	ReqGetGroups
	Peer
	ReplyGetGroups
	ReqDeleteMessage
	ReqSendChatAction
	ReqData
	ReplyData
	ReqGetChatMembersCount
	ReplyGetChatMembersCount
*/
package pbbotserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/pbcomm"
import pbadvertisemonitor "gitlab.chatserver.im/interfaceprobuf/advertisemonitor"
import pbchannelserver "gitlab.chatserver.im/interfaceprobuf/pbchannelserver"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ChatType 聊天类型
type ChatType int32

const (
	ChatType_ChatTypeZero ChatType = 0
	ChatType_PeerUser     ChatType = 1
	ChatType_PeerChat     ChatType = 2
	ChatType_ChannelChat  ChatType = 3
)

var ChatType_name = map[int32]string{
	0: "ChatTypeZero",
	1: "PeerUser",
	2: "PeerChat",
	3: "ChannelChat",
}
var ChatType_value = map[string]int32{
	"ChatTypeZero": 0,
	"PeerUser":     1,
	"PeerChat":     2,
	"ChannelChat":  3,
}

func (x ChatType) String() string {
	return proto.EnumName(ChatType_name, int32(x))
}
func (ChatType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBotserver, []int{0} }

type ReqGetAdminGroups struct {
	UserID int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	// int32 PeerFilter = 2; // 2：只要普通群 4：只要超级群 8：只要频道 （可相互组合 ex: 2|4|8 暂时不支持单聊)
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetAdminGroups) Reset()                    { *m = ReqGetAdminGroups{} }
func (m *ReqGetAdminGroups) String() string            { return proto.CompactTextString(m) }
func (*ReqGetAdminGroups) ProtoMessage()               {}
func (*ReqGetAdminGroups) Descriptor() ([]byte, []int) { return fileDescriptorBotserver, []int{0} }

func (m *ReqGetAdminGroups) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ReqGetAdminGroups) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetGroups struct {
	UserID     int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	PeerFilter int32 `protobuf:"varint,2,opt,name=PeerFilter,proto3" json:"PeerFilter,omitempty"`
}

func (m *ReqGetGroups) Reset()                    { *m = ReqGetGroups{} }
func (m *ReqGetGroups) String() string            { return proto.CompactTextString(m) }
func (*ReqGetGroups) ProtoMessage()               {}
func (*ReqGetGroups) Descriptor() ([]byte, []int) { return fileDescriptorBotserver, []int{1} }

func (m *ReqGetGroups) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ReqGetGroups) GetPeerFilter() int32 {
	if m != nil {
		return m.PeerFilter
	}
	return 0
}

type Peer struct {
	PeerID   int32  `protobuf:"varint,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	PeerName string `protobuf:"bytes,2,opt,name=PeerName,proto3" json:"PeerName,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptorBotserver, []int{2} }

func (m *Peer) GetPeerID() int32 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *Peer) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

type ReplyGetGroups struct {
	Groups      []*Peer `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
	SuperGroups []*Peer `protobuf:"bytes,2,rep,name=SuperGroups" json:"SuperGroups,omitempty"`
	Channels    []*Peer `protobuf:"bytes,3,rep,name=Channels" json:"Channels,omitempty"`
}

func (m *ReplyGetGroups) Reset()                    { *m = ReplyGetGroups{} }
func (m *ReplyGetGroups) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetGroups) ProtoMessage()               {}
func (*ReplyGetGroups) Descriptor() ([]byte, []int) { return fileDescriptorBotserver, []int{3} }

func (m *ReplyGetGroups) GetGroups() []*Peer {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ReplyGetGroups) GetSuperGroups() []*Peer {
	if m != nil {
		return m.SuperGroups
	}
	return nil
}

func (m *ReplyGetGroups) GetChannels() []*Peer {
	if m != nil {
		return m.Channels
	}
	return nil
}

type ReqDeleteMessage struct {
	ChatType ChatType      `protobuf:"varint,1,opt,name=ChatType,proto3,enum=pbbotserver.ChatType" json:"ChatType,omitempty"`
	UserId   int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId   int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MsgId    []int32       `protobuf:"varint,4,rep,packed,name=msg_id,json=msgId" json:"msg_id,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteMessage) Reset()                    { *m = ReqDeleteMessage{} }
func (m *ReqDeleteMessage) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteMessage) ProtoMessage()               {}
func (*ReqDeleteMessage) Descriptor() ([]byte, []int) { return fileDescriptorBotserver, []int{4} }

func (m *ReqDeleteMessage) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatTypeZero
}

func (m *ReqDeleteMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqDeleteMessage) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ReqDeleteMessage) GetMsgId() []int32 {
	if m != nil {
		return m.MsgId
	}
	return nil
}

func (m *ReqDeleteMessage) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqSendChatAction struct {
	ChatType   ChatType      `protobuf:"varint,1,opt,name=ChatType,proto3,enum=pbbotserver.ChatType" json:"ChatType,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ActionData []byte        `protobuf:"bytes,4,opt,name=actionData,proto3" json:"actionData,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqSendChatAction) Reset()                    { *m = ReqSendChatAction{} }
func (m *ReqSendChatAction) String() string            { return proto.CompactTextString(m) }
func (*ReqSendChatAction) ProtoMessage()               {}
func (*ReqSendChatAction) Descriptor() ([]byte, []int) { return fileDescriptorBotserver, []int{5} }

func (m *ReqSendChatAction) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatTypeZero
}

func (m *ReqSendChatAction) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqSendChatAction) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ReqSendChatAction) GetActionData() []byte {
	if m != nil {
		return m.ActionData
	}
	return nil
}

func (m *ReqSendChatAction) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqData struct {
	ChatType ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=pbbotserver.ChatType" json:"ChatType,omitempty"`
	ReqData  []byte   `protobuf:"bytes,2,opt,name=reqData,proto3" json:"reqData,omitempty"`
	BotId    int32    `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
}

func (m *ReqData) Reset()                    { *m = ReqData{} }
func (m *ReqData) String() string            { return proto.CompactTextString(m) }
func (*ReqData) ProtoMessage()               {}
func (*ReqData) Descriptor() ([]byte, []int) { return fileDescriptorBotserver, []int{6} }

func (m *ReqData) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatTypeZero
}

func (m *ReqData) GetReqData() []byte {
	if m != nil {
		return m.ReqData
	}
	return nil
}

func (m *ReqData) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

type ReplyData struct {
	Reply []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	Error int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyData) Reset()                    { *m = ReplyData{} }
func (m *ReplyData) String() string            { return proto.CompactTextString(m) }
func (*ReplyData) ProtoMessage()               {}
func (*ReplyData) Descriptor() ([]byte, []int) { return fileDescriptorBotserver, []int{7} }

func (m *ReplyData) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyData) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type ReqGetChatMembersCount struct {
	ChatType ChatType      `protobuf:"varint,1,opt,name=ChatType,proto3,enum=pbbotserver.ChatType" json:"ChatType,omitempty"`
	UserId   int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId   int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChatMembersCount) Reset()                    { *m = ReqGetChatMembersCount{} }
func (m *ReqGetChatMembersCount) String() string            { return proto.CompactTextString(m) }
func (*ReqGetChatMembersCount) ProtoMessage()               {}
func (*ReqGetChatMembersCount) Descriptor() ([]byte, []int) { return fileDescriptorBotserver, []int{8} }

func (m *ReqGetChatMembersCount) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatTypeZero
}

func (m *ReqGetChatMembersCount) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetChatMembersCount) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ReqGetChatMembersCount) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChatMembersCount struct {
	ChatMembersCount int32 `protobuf:"varint,1,opt,name=ChatMembersCount,proto3" json:"ChatMembersCount,omitempty"`
	ErrorCode        int32 `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *ReplyGetChatMembersCount) Reset()         { *m = ReplyGetChatMembersCount{} }
func (m *ReplyGetChatMembersCount) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChatMembersCount) ProtoMessage()    {}
func (*ReplyGetChatMembersCount) Descriptor() ([]byte, []int) {
	return fileDescriptorBotserver, []int{9}
}

func (m *ReplyGetChatMembersCount) GetChatMembersCount() int32 {
	if m != nil {
		return m.ChatMembersCount
	}
	return 0
}

func (m *ReplyGetChatMembersCount) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func init() {
	proto.RegisterType((*ReqGetAdminGroups)(nil), "pbbotserver.ReqGetAdminGroups")
	proto.RegisterType((*ReqGetGroups)(nil), "pbbotserver.ReqGetGroups")
	proto.RegisterType((*Peer)(nil), "pbbotserver.Peer")
	proto.RegisterType((*ReplyGetGroups)(nil), "pbbotserver.ReplyGetGroups")
	proto.RegisterType((*ReqDeleteMessage)(nil), "pbbotserver.ReqDeleteMessage")
	proto.RegisterType((*ReqSendChatAction)(nil), "pbbotserver.ReqSendChatAction")
	proto.RegisterType((*ReqData)(nil), "pbbotserver.ReqData")
	proto.RegisterType((*ReplyData)(nil), "pbbotserver.ReplyData")
	proto.RegisterType((*ReqGetChatMembersCount)(nil), "pbbotserver.ReqGetChatMembersCount")
	proto.RegisterType((*ReplyGetChatMembersCount)(nil), "pbbotserver.ReplyGetChatMembersCount")
	proto.RegisterEnum("pbbotserver.ChatType", ChatType_name, ChatType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BotServer service

type BotServerClient interface {
	// 離開群組
	LeaveChat(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 獲取群訊息
	GetChat(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 獲取群成員數目
	GetChatMembersCount(ctx context.Context, in *ReqGetChatMembersCount, opts ...grpc.CallOption) (*ReplyGetChatMembersCount, error)
	// 獲取群管理員
	GetChatAdministrators(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 修改群名字
	SetChatTitle(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 修改群簡介
	SetChatDescription(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 置顶群消息
	UpdatePinnedChannelMessage(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	//    // 取消置顶群消息
	//    rpc UpinChatMessage (ReqData) returns (ReplyData) {
	//    }
	// 發送Action
	SendChatAction(ctx context.Context, in *ReqSendChatAction, opts ...grpc.CallOption) (*ReplyData, error)
	// 發送名片
	SendContact(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error)
	// 刪除消息
	DeleteMessage(ctx context.Context, in *ReqDeleteMessage, opts ...grpc.CallOption) (*ReplyData, error)
	// GetGroups 获取群组消息
	GetGroups(ctx context.Context, in *ReqGetGroups, opts ...grpc.CallOption) (*ReplyGetGroups, error)
	// GetGroups 获取使用者是管理員的群組消息
	GetAdminGroups(ctx context.Context, in *ReqGetAdminGroups, opts ...grpc.CallOption) (*ReplyGetGroups, error)
	// 新增手動禁言名單
	SetManualBlockList(ctx context.Context, in *pbadvertisemonitor.ReqSetManualBlockList, opts ...grpc.CallOption) (*pbadvertisemonitor.ReplyData, error)
	// 刪除手動禁言名單
	DelManualBlockList(ctx context.Context, in *pbadvertisemonitor.ReqDelManualBlockList, opts ...grpc.CallOption) (*pbadvertisemonitor.ReplyData, error)
	// 讓使用者離開群(使用者後續還可以自動加入)
	LeaveChannel(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*pbchannelserver.ReplyChannelData, error)
}

type botServerClient struct {
	cc *grpc.ClientConn
}

func NewBotServerClient(cc *grpc.ClientConn) BotServerClient {
	return &botServerClient{cc}
}

func (c *botServerClient) LeaveChat(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/LeaveChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServerClient) GetChat(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/GetChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServerClient) GetChatMembersCount(ctx context.Context, in *ReqGetChatMembersCount, opts ...grpc.CallOption) (*ReplyGetChatMembersCount, error) {
	out := new(ReplyGetChatMembersCount)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/GetChatMembersCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServerClient) GetChatAdministrators(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/GetChatAdministrators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServerClient) SetChatTitle(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/SetChatTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServerClient) SetChatDescription(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/SetChatDescription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServerClient) UpdatePinnedChannelMessage(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/UpdatePinnedChannelMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServerClient) SendChatAction(ctx context.Context, in *ReqSendChatAction, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/SendChatAction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServerClient) SendContact(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/SendContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServerClient) DeleteMessage(ctx context.Context, in *ReqDeleteMessage, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/DeleteMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServerClient) GetGroups(ctx context.Context, in *ReqGetGroups, opts ...grpc.CallOption) (*ReplyGetGroups, error) {
	out := new(ReplyGetGroups)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/GetGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServerClient) GetAdminGroups(ctx context.Context, in *ReqGetAdminGroups, opts ...grpc.CallOption) (*ReplyGetGroups, error) {
	out := new(ReplyGetGroups)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/GetAdminGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServerClient) SetManualBlockList(ctx context.Context, in *pbadvertisemonitor.ReqSetManualBlockList, opts ...grpc.CallOption) (*pbadvertisemonitor.ReplyData, error) {
	out := new(pbadvertisemonitor.ReplyData)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/SetManualBlockList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServerClient) DelManualBlockList(ctx context.Context, in *pbadvertisemonitor.ReqDelManualBlockList, opts ...grpc.CallOption) (*pbadvertisemonitor.ReplyData, error) {
	out := new(pbadvertisemonitor.ReplyData)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/DelManualBlockList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServerClient) LeaveChannel(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*pbchannelserver.ReplyChannelData, error) {
	out := new(pbchannelserver.ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbbotserver.BotServer/LeaveChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BotServer service

type BotServerServer interface {
	// 離開群組
	LeaveChat(context.Context, *ReqData) (*ReplyData, error)
	// 獲取群訊息
	GetChat(context.Context, *ReqData) (*ReplyData, error)
	// 獲取群成員數目
	GetChatMembersCount(context.Context, *ReqGetChatMembersCount) (*ReplyGetChatMembersCount, error)
	// 獲取群管理員
	GetChatAdministrators(context.Context, *ReqData) (*ReplyData, error)
	// 修改群名字
	SetChatTitle(context.Context, *ReqData) (*ReplyData, error)
	// 修改群簡介
	SetChatDescription(context.Context, *ReqData) (*ReplyData, error)
	// 置顶群消息
	UpdatePinnedChannelMessage(context.Context, *ReqData) (*ReplyData, error)
	//    // 取消置顶群消息
	//    rpc UpinChatMessage (ReqData) returns (ReplyData) {
	//    }
	// 發送Action
	SendChatAction(context.Context, *ReqSendChatAction) (*ReplyData, error)
	// 發送名片
	SendContact(context.Context, *ReqData) (*ReplyData, error)
	// 刪除消息
	DeleteMessage(context.Context, *ReqDeleteMessage) (*ReplyData, error)
	// GetGroups 获取群组消息
	GetGroups(context.Context, *ReqGetGroups) (*ReplyGetGroups, error)
	// GetGroups 获取使用者是管理員的群組消息
	GetAdminGroups(context.Context, *ReqGetAdminGroups) (*ReplyGetGroups, error)
	// 新增手動禁言名單
	SetManualBlockList(context.Context, *pbadvertisemonitor.ReqSetManualBlockList) (*pbadvertisemonitor.ReplyData, error)
	// 刪除手動禁言名單
	DelManualBlockList(context.Context, *pbadvertisemonitor.ReqDelManualBlockList) (*pbadvertisemonitor.ReplyData, error)
	// 讓使用者離開群(使用者後續還可以自動加入)
	LeaveChannel(context.Context, *ReqData) (*pbchannelserver.ReplyChannelData, error)
}

func RegisterBotServerServer(s *grpc.Server, srv BotServerServer) {
	s.RegisterService(&_BotServer_serviceDesc, srv)
}

func _BotServer_LeaveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).LeaveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/LeaveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).LeaveChat(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServer_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/GetChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).GetChat(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServer_GetChatMembersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChatMembersCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).GetChatMembersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/GetChatMembersCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).GetChatMembersCount(ctx, req.(*ReqGetChatMembersCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServer_GetChatAdministrators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).GetChatAdministrators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/GetChatAdministrators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).GetChatAdministrators(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServer_SetChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).SetChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/SetChatTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).SetChatTitle(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServer_SetChatDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).SetChatDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/SetChatDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).SetChatDescription(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServer_UpdatePinnedChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).UpdatePinnedChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/UpdatePinnedChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).UpdatePinnedChannelMessage(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServer_SendChatAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendChatAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).SendChatAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/SendChatAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).SendChatAction(ctx, req.(*ReqSendChatAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServer_SendContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).SendContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/SendContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).SendContact(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServer_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).DeleteMessage(ctx, req.(*ReqDeleteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServer_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).GetGroups(ctx, req.(*ReqGetGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServer_GetAdminGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAdminGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).GetAdminGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/GetAdminGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).GetAdminGroups(ctx, req.(*ReqGetAdminGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServer_SetManualBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbadvertisemonitor.ReqSetManualBlockList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).SetManualBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/SetManualBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).SetManualBlockList(ctx, req.(*pbadvertisemonitor.ReqSetManualBlockList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServer_DelManualBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbadvertisemonitor.ReqDelManualBlockList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).DelManualBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/DelManualBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).DelManualBlockList(ctx, req.(*pbadvertisemonitor.ReqDelManualBlockList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotServer_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServerServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbbotserver.BotServer/LeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServerServer).LeaveChannel(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

var _BotServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbbotserver.BotServer",
	HandlerType: (*BotServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LeaveChat",
			Handler:    _BotServer_LeaveChat_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _BotServer_GetChat_Handler,
		},
		{
			MethodName: "GetChatMembersCount",
			Handler:    _BotServer_GetChatMembersCount_Handler,
		},
		{
			MethodName: "GetChatAdministrators",
			Handler:    _BotServer_GetChatAdministrators_Handler,
		},
		{
			MethodName: "SetChatTitle",
			Handler:    _BotServer_SetChatTitle_Handler,
		},
		{
			MethodName: "SetChatDescription",
			Handler:    _BotServer_SetChatDescription_Handler,
		},
		{
			MethodName: "UpdatePinnedChannelMessage",
			Handler:    _BotServer_UpdatePinnedChannelMessage_Handler,
		},
		{
			MethodName: "SendChatAction",
			Handler:    _BotServer_SendChatAction_Handler,
		},
		{
			MethodName: "SendContact",
			Handler:    _BotServer_SendContact_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _BotServer_DeleteMessage_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _BotServer_GetGroups_Handler,
		},
		{
			MethodName: "GetAdminGroups",
			Handler:    _BotServer_GetAdminGroups_Handler,
		},
		{
			MethodName: "SetManualBlockList",
			Handler:    _BotServer_SetManualBlockList_Handler,
		},
		{
			MethodName: "DelManualBlockList",
			Handler:    _BotServer_DelManualBlockList_Handler,
		},
		{
			MethodName: "LeaveChannel",
			Handler:    _BotServer_LeaveChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/botserver/botserver.proto",
}

func (m *ReqGetAdminGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetAdminGroups) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.UserID))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.Debug.Size()))
		n1, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ReqGetGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetGroups) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.UserID))
	}
	if m.PeerFilter != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.PeerFilter))
	}
	return i, nil
}

func (m *Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Peer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PeerID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.PeerID))
	}
	if len(m.PeerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(len(m.PeerName)))
		i += copy(dAtA[i:], m.PeerName)
	}
	return i, nil
}

func (m *ReplyGetGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetGroups) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBotserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SuperGroups) > 0 {
		for _, msg := range m.SuperGroups {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBotserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Channels) > 0 {
		for _, msg := range m.Channels {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintBotserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqDeleteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.ChatType))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.UserId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.ChatId))
	}
	if len(m.MsgId) > 0 {
		dAtA3 := make([]byte, len(m.MsgId)*10)
		var j2 int
		for _, num1 := range m.MsgId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.Debug.Size()))
		n4, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ReqSendChatAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendChatAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.ChatType))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.UserId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.ChatId))
	}
	if len(m.ActionData) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(len(m.ActionData)))
		i += copy(dAtA[i:], m.ActionData)
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.Debug.Size()))
		n5, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ReqData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.ChatType))
	}
	if len(m.ReqData) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(len(m.ReqData)))
		i += copy(dAtA[i:], m.ReqData)
	}
	if m.BotId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.BotId))
	}
	return i, nil
}

func (m *ReplyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ReqGetChatMembersCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChatMembersCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.ChatType))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.UserId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.ChatId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.Debug.Size()))
		n6, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ReplyGetChatMembersCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChatMembersCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatMembersCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.ChatMembersCount))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBotserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func encodeVarintBotserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqGetAdminGroups) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovBotserver(uint64(m.UserID))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovBotserver(uint64(l))
	}
	return n
}

func (m *ReqGetGroups) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovBotserver(uint64(m.UserID))
	}
	if m.PeerFilter != 0 {
		n += 1 + sovBotserver(uint64(m.PeerFilter))
	}
	return n
}

func (m *Peer) Size() (n int) {
	var l int
	_ = l
	if m.PeerID != 0 {
		n += 1 + sovBotserver(uint64(m.PeerID))
	}
	l = len(m.PeerName)
	if l > 0 {
		n += 1 + l + sovBotserver(uint64(l))
	}
	return n
}

func (m *ReplyGetGroups) Size() (n int) {
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovBotserver(uint64(l))
		}
	}
	if len(m.SuperGroups) > 0 {
		for _, e := range m.SuperGroups {
			l = e.Size()
			n += 1 + l + sovBotserver(uint64(l))
		}
	}
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 1 + l + sovBotserver(uint64(l))
		}
	}
	return n
}

func (m *ReqDeleteMessage) Size() (n int) {
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovBotserver(uint64(m.ChatType))
	}
	if m.UserId != 0 {
		n += 1 + sovBotserver(uint64(m.UserId))
	}
	if m.ChatId != 0 {
		n += 1 + sovBotserver(uint64(m.ChatId))
	}
	if len(m.MsgId) > 0 {
		l = 0
		for _, e := range m.MsgId {
			l += sovBotserver(uint64(e))
		}
		n += 1 + sovBotserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovBotserver(uint64(l))
	}
	return n
}

func (m *ReqSendChatAction) Size() (n int) {
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovBotserver(uint64(m.ChatType))
	}
	if m.UserId != 0 {
		n += 1 + sovBotserver(uint64(m.UserId))
	}
	if m.ChatId != 0 {
		n += 1 + sovBotserver(uint64(m.ChatId))
	}
	l = len(m.ActionData)
	if l > 0 {
		n += 1 + l + sovBotserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovBotserver(uint64(l))
	}
	return n
}

func (m *ReqData) Size() (n int) {
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovBotserver(uint64(m.ChatType))
	}
	l = len(m.ReqData)
	if l > 0 {
		n += 1 + l + sovBotserver(uint64(l))
	}
	if m.BotId != 0 {
		n += 1 + sovBotserver(uint64(m.BotId))
	}
	return n
}

func (m *ReplyData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovBotserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovBotserver(uint64(m.Error))
	}
	return n
}

func (m *ReqGetChatMembersCount) Size() (n int) {
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovBotserver(uint64(m.ChatType))
	}
	if m.UserId != 0 {
		n += 1 + sovBotserver(uint64(m.UserId))
	}
	if m.ChatId != 0 {
		n += 1 + sovBotserver(uint64(m.ChatId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovBotserver(uint64(l))
	}
	return n
}

func (m *ReplyGetChatMembersCount) Size() (n int) {
	var l int
	_ = l
	if m.ChatMembersCount != 0 {
		n += 1 + sovBotserver(uint64(m.ChatMembersCount))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovBotserver(uint64(m.ErrorCode))
	}
	return n
}

func sovBotserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBotserver(x uint64) (n int) {
	return sovBotserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqGetAdminGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBotserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetAdminGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetAdminGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBotserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBotserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBotserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBotserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerFilter", wireType)
			}
			m.PeerFilter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerFilter |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBotserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBotserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Peer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBotserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBotserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBotserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBotserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBotserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBotserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Peer{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBotserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuperGroups = append(m.SuperGroups, &Peer{})
			if err := m.SuperGroups[len(m.SuperGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBotserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &Peer{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBotserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBotserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBotserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (ChatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBotserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgId = append(m.MsgId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBotserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBotserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBotserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgId = append(m.MsgId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBotserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBotserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBotserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendChatAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBotserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendChatAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendChatAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (ChatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBotserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionData = append(m.ActionData[:0], dAtA[iNdEx:postIndex]...)
			if m.ActionData == nil {
				m.ActionData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBotserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBotserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBotserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBotserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (ChatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBotserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqData = append(m.ReqData[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqData == nil {
				m.ReqData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBotserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBotserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBotserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBotserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBotserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBotserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChatMembersCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBotserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChatMembersCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChatMembersCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (ChatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBotserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBotserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBotserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChatMembersCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBotserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChatMembersCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChatMembersCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatMembersCount", wireType)
			}
			m.ChatMembersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatMembersCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBotserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBotserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBotserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBotserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBotserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBotserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBotserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBotserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBotserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBotserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/botserver/botserver.proto", fileDescriptorBotserver)
}

var fileDescriptorBotserver = []byte{
	// 880 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x2d, 0x4b, 0x8e, 0x46, 0x8c, 0xab, 0x6c, 0x63, 0x57, 0x55, 0x1b, 0x41, 0x65, 0x50,
	0x40, 0x09, 0x50, 0x19, 0x75, 0x0e, 0x45, 0x1b, 0x34, 0x40, 0x6c, 0x25, 0xae, 0x5a, 0xbb, 0x35,
	0xe8, 0xe4, 0xd2, 0x4b, 0xb3, 0x24, 0xc7, 0x0a, 0x51, 0x92, 0xcb, 0x2c, 0x57, 0x06, 0x72, 0xec,
	0x93, 0x14, 0xe8, 0x2b, 0xf4, 0xdc, 0x7b, 0x8f, 0x7d, 0x84, 0xc2, 0x4f, 0x52, 0xec, 0x0f, 0x45,
	0x89, 0xa2, 0x7f, 0xd4, 0x83, 0x4f, 0xdc, 0x99, 0xf9, 0xe6, 0xdb, 0x99, 0xd9, 0xd9, 0xe1, 0xc2,
	0xb3, 0x49, 0x28, 0x22, 0xea, 0x0d, 0xfd, 0xb7, 0x54, 0x64, 0xc8, 0xcf, 0x91, 0x0f, 0xc3, 0x78,
	0x37, 0x4c, 0x04, 0xf2, 0x33, 0xea, 0x63, 0xca, 0x99, 0x37, 0x3d, 0xdb, 0xf5, 0x98, 0x31, 0x16,
	0xab, 0x61, 0xca, 0x99, 0x60, 0xa4, 0x95, 0x7a, 0x33, 0x55, 0xf7, 0x69, 0x35, 0x59, 0xbc, 0x9b,
	0x32, 0x41, 0x05, 0x53, 0x1e, 0xde, 0xf4, 0x2c, 0xdb, 0x4d, 0x3d, 0x9f, 0xc5, 0xb1, 0xf9, 0x68,
	0xa6, 0xee, 0xd1, 0x8d, 0x22, 0xa1, 0xc1, 0x39, 0x72, 0x11, 0x66, 0x18, 0xb3, 0x24, 0x14, 0x8c,
	0x2f, 0x29, 0x0c, 0xdb, 0x0f, 0x37, 0x0d, 0xc5, 0x7f, 0x4b, 0x93, 0x04, 0x23, 0x93, 0x5e, 0xea,
	0x2d, 0xc8, 0x9a, 0xcc, 0x39, 0x81, 0x7b, 0x2e, 0xbe, 0x3b, 0x44, 0xf1, 0x3c, 0x88, 0xc3, 0xe4,
	0x90, 0xb3, 0x69, 0x9a, 0x91, 0x1d, 0x68, 0xbc, 0xce, 0x90, 0x8f, 0x47, 0x1d, 0xab, 0x6f, 0x0d,
	0xea, 0xae, 0x91, 0xc8, 0x43, 0xa8, 0x07, 0xe8, 0x4d, 0x27, 0x9d, 0xf5, 0xbe, 0x35, 0x68, 0xed,
	0xdd, 0x1d, 0x9a, 0x2c, 0x47, 0x52, 0xe9, 0x6a, 0x9b, 0xf3, 0x12, 0x6c, 0xcd, 0x78, 0x0d, 0x59,
	0x0f, 0xe0, 0x04, 0x91, 0xbf, 0x0c, 0x23, 0x81, 0x5c, 0x31, 0xd6, 0xdd, 0x39, 0x8d, 0xf3, 0x0d,
	0x6c, 0x48, 0x49, 0xfa, 0xcb, 0x6f, 0xe1, 0xaf, 0x25, 0xd2, 0x85, 0x3b, 0x72, 0xf5, 0x23, 0x8d,
	0x51, 0x79, 0x37, 0xdd, 0x99, 0xec, 0xfc, 0x6e, 0xc1, 0x96, 0x8b, 0x69, 0xf4, 0xbe, 0x08, 0xe3,
	0x11, 0x34, 0xf4, 0xaa, 0x63, 0xf5, 0x6b, 0x83, 0xd6, 0xde, 0xbd, 0xe1, 0xdc, 0xf1, 0x0e, 0xa5,
	0xa7, 0x6b, 0x00, 0xe4, 0x09, 0xb4, 0x4e, 0xa7, 0x29, 0x72, 0x83, 0x5f, 0xbf, 0x0c, 0x3f, 0x8f,
	0x22, 0x5f, 0xc0, 0x9d, 0x03, 0x53, 0xdf, 0x4e, 0xed, 0x32, 0x8f, 0x19, 0xc4, 0xf9, 0xd3, 0x82,
	0xb6, 0x8b, 0xef, 0x46, 0x18, 0xa1, 0xc0, 0x63, 0xcc, 0x32, 0x3a, 0x41, 0xf2, 0xa5, 0xe2, 0x10,
	0xaf, 0xde, 0xa7, 0xa8, 0x92, 0xdd, 0xda, 0xdb, 0x5e, 0xe0, 0xc8, 0x8d, 0xee, 0x0c, 0x46, 0x3e,
	0x82, 0xcd, 0x69, 0x86, 0xfc, 0x97, 0x30, 0x30, 0x25, 0x6c, 0x48, 0x71, 0x1c, 0x48, 0x83, 0x6c,
	0x10, 0x69, 0xa8, 0x69, 0x83, 0x14, 0xc7, 0x01, 0xd9, 0x86, 0x46, 0x9c, 0x4d, 0xa4, 0x7e, 0xa3,
	0x5f, 0x1b, 0xd4, 0xdd, 0x7a, 0x9c, 0x4d, 0xc6, 0x41, 0x71, 0xb6, 0xf5, 0x2b, 0xce, 0xf6, 0x2f,
	0x4b, 0xb5, 0xcb, 0x29, 0x26, 0x81, 0x8c, 0xe0, 0xb9, 0x2f, 0x42, 0x96, 0xdc, 0x4e, 0xd8, 0x3d,
	0x00, 0xaa, 0xb6, 0x1b, 0x51, 0x41, 0x3b, 0x1b, 0x7d, 0x6b, 0x60, 0xbb, 0x73, 0x9a, 0x9b, 0xc5,
	0x1f, 0xc3, 0xa6, 0x2c, 0xba, 0xc4, 0xff, 0x8f, 0xa0, 0x3b, 0xb0, 0xc9, 0xb5, 0xb7, 0x0a, 0xda,
	0x76, 0x73, 0x51, 0xd6, 0xd4, 0x63, 0x73, 0x41, 0xd7, 0x3d, 0x26, 0xc6, 0x81, 0xf3, 0x15, 0x34,
	0x55, 0x17, 0x2a, 0xcc, 0x7d, 0xa8, 0x73, 0x29, 0xa8, 0xdd, 0x6c, 0x57, 0x0b, 0x52, 0x8b, 0x9c,
	0xb3, 0xfc, 0x02, 0x68, 0xc1, 0xf9, 0xc3, 0x82, 0x1d, 0x7d, 0x89, 0xe4, 0xe6, 0xc7, 0x18, 0x7b,
	0xc8, 0xb3, 0x03, 0x36, 0x4d, 0xc4, 0xed, 0x14, 0x7b, 0x56, 0xcc, 0x8d, 0x2b, 0x8a, 0x19, 0x40,
	0x27, 0xbf, 0x63, 0x4b, 0x51, 0x3e, 0x86, 0x76, 0x59, 0x67, 0xae, 0xef, 0x92, 0x9e, 0x7c, 0x0a,
	0xcd, 0x17, 0x32, 0xeb, 0x03, 0x16, 0xa0, 0x09, 0xb0, 0x50, 0x3c, 0x1e, 0x17, 0xf9, 0x92, 0x36,
	0xd8, 0xf9, 0xfa, 0x67, 0xe4, 0xac, 0xbd, 0x46, 0x6c, 0x3d, 0x04, 0xe4, 0x48, 0x69, 0x5b, 0xb9,
	0x24, 0x31, 0xed, 0x75, 0xf2, 0x01, 0xb4, 0xcc, 0x75, 0x53, 0x8a, 0xda, 0xde, 0x6f, 0x4d, 0x68,
	0xee, 0x33, 0x71, 0xaa, 0x0a, 0x45, 0x9e, 0x42, 0xf3, 0x08, 0xe9, 0x39, 0x4a, 0x23, 0xb9, 0xbf,
	0x50, 0x43, 0xd3, 0x23, 0xdd, 0x9d, 0x92, 0xd6, 0x1c, 0xa5, 0xb3, 0x46, 0xbe, 0x86, 0x4d, 0x93,
	0xf6, 0xca, 0xae, 0x3e, 0x7c, 0x58, 0x55, 0xb1, 0x87, 0x65, 0x9a, 0x0a, 0x50, 0xf7, 0xf3, 0x65,
	0xd6, 0x0a, 0x98, 0xb3, 0x46, 0x0e, 0x61, 0xdb, 0x18, 0xd4, 0x5c, 0x0f, 0x33, 0xc1, 0xa9, 0x60,
	0x3c, 0x5b, 0x39, 0xda, 0x67, 0x60, 0x9f, 0x6a, 0xa2, 0x57, 0xa1, 0x88, 0x70, 0x65, 0xff, 0x11,
	0x10, 0xe3, 0x3f, 0xc2, 0xcc, 0xe7, 0x61, 0xaa, 0x26, 0xc6, 0xaa, 0x2c, 0x47, 0xd0, 0x7d, 0x9d,
	0x06, 0x54, 0xe0, 0x49, 0x98, 0x24, 0x18, 0x98, 0x63, 0xcd, 0xc7, 0xe6, 0xaa, 0x6c, 0xdf, 0xc3,
	0x56, 0x69, 0x82, 0xf5, 0xca, 0x0c, 0x8b, 0xf6, 0x2b, 0xb8, 0xbe, 0x85, 0x96, 0xc2, 0xb2, 0x44,
	0x50, 0x7f, 0xf5, 0x66, 0xf8, 0x0e, 0xee, 0x2e, 0xfe, 0x02, 0x1e, 0x2c, 0x11, 0xcc, 0x9b, 0xaf,
	0x60, 0x7a, 0x01, 0xcd, 0xe2, 0x67, 0xf7, 0x71, 0x45, 0x33, 0x69, 0x53, 0xf7, 0x93, 0xca, 0x16,
	0xd2, 0x46, 0x67, 0x8d, 0xfc, 0x04, 0x5b, 0xa5, 0xc7, 0x40, 0xaf, 0x82, 0x6b, 0xce, 0x7e, 0x1d,
	0xe1, 0x1b, 0xd5, 0x00, 0xc7, 0x34, 0x99, 0xd2, 0x68, 0x3f, 0x62, 0xfe, 0xaf, 0x47, 0x61, 0x26,
	0xc8, 0xa3, 0x61, 0xea, 0x2d, 0x3d, 0x6f, 0x54, 0xdd, 0xcb, 0xd0, 0xee, 0x83, 0x6a, 0x68, 0x91,
	0xf9, 0x1b, 0x20, 0x23, 0x8c, 0x6e, 0xba, 0xc3, 0x32, 0xf4, 0xfa, 0x1d, 0xc6, 0x60, 0xe7, 0xa3,
	0x42, 0xf6, 0xdd, 0x25, 0xa7, 0xfc, 0xd9, 0xb0, 0xfc, 0xc4, 0x52, 0x1c, 0xc6, 0x49, 0x53, 0xed,
	0xdb, 0x7f, 0x5f, 0xf4, 0xac, 0x7f, 0x2e, 0x7a, 0xd6, 0xbf, 0x17, 0x3d, 0xcb, 0x6b, 0xa8, 0x47,
	0xd8, 0x93, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x95, 0x37, 0xe9, 0xeb, 0xab, 0x0a, 0x00, 0x00,
}
