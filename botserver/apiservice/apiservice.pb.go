// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gitlab.chatserver.im/im/iminterfaceprotobufs/botserver/apiservice/apiservice.proto

/*
Package apiservice is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/im/iminterfaceprotobufs/botserver/apiservice/apiservice.proto

It has these top-level messages:

	GetBotListMineReq
	GetBotListReq
	BotInfo
	GetBotListResult
	GetBotPlazaInfoByIdReq
	GetBotPlazaInfoByIdReply
	GetBotPlazaInfoReq
	BotPlazaInfo
	GetBotPlazaInfoReply
	GetBotDetailReq
	BotDetail
	GetBotDetailResult
	BotLikeReq
	BotLikeResult
	MusicSaveReq
	MusicSaveRsp
	GetMeRequest
	GetMeReply
	GetUpdatesRequest
	GetUpdatesReply
	SendTextMessageRequest
	SendTextMessageReply
	SendLocationRequest
	SendLocationReply
	SendVenueRequest
	SendVenueReply
	SendPhotoRequest
	SendPhotoReply
	SendDocumentRequest
	SendDocumentReply
	ForwardMessageRequest
	ForwardMessageReply
	AnswerCallbackQueryRequest
	AnswerCallbackQueryReply
	EditMessageTextRequest
	EditMessageTextReply
	EditMessageCaptionRequest
	EditMessageCaptionReply
	DeleteMessageRequest
	DeleteMessageReply
	SetWebhookRequest
	SetWebhookReply
	DelWebhookRequest
	DelWebhookReply
	SendPhoneMessageRequest
	MusicQueryRequest
	MusicQueryReply
	MusicDataInfo
	GetMusicFileInfoReq
	GetMusicFileInfoReply
	SendGameReq
	SendGameReply
	SetGameScoreReq
	SetGameScoreReply
	AnswerInlineQueryRequest
	ReplyBotInlineCall
	GetGameHighScoresReq
	GameHighScore
	GetGameHighScoresReply
	KickChatMemberRequest
	KickChatMemberReply
	GroupInactiveUser
	GetGroupInactiveUsersReq
	GetGroupInactiveUsersResult
	DeleteChannelHistoryMessageReq
	DeleteChannelHistoryMessageReply
	LeaveChatReq
	LeaveChatReply
	GetChatReq
	GetChatReply
	GetChatMembersCountReq
	GetChatMembersCountReply
	GetChatAdministratorsReq
	GetChatAdministratorsReply
	SetChatTitleReq
	SetChatTitleReply
	SetChatDescriptionReq
	SetChatDescriptionReply
	PinChatMessageReq
	PinChatMessageReply
	UnPinChatMessageReq
	UnPinChatMessageReply
	SendChatActionReq
	SendChatActionReply
	SendContactReq
	SendContactReply
	GetGroupsReq
	Peer
	GetGroupsReply
	LipBlockReq
	LipBlockReply
	KickNotBanReq
	KickNotBanReply
	GetAdminGroupsReq
	GetAdminGroupsReply
	SetJoinGroupsReq
	SetJoinGroupsReply
*/
package apiservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import basetypes "gitlab.chatserver.im/im/iminterfaceprotobufs/botserver/basetypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetBotListResult_Errorcode int32

const (
	GetBotListResult_Success   GetBotListResult_Errorcode = 0
	GetBotListResult_NotExist  GetBotListResult_Errorcode = 1
	GetBotListResult_NotModify GetBotListResult_Errorcode = 3
)

var GetBotListResult_Errorcode_name = map[int32]string{
	0: "Success",
	1: "NotExist",
	3: "NotModify",
}
var GetBotListResult_Errorcode_value = map[string]int32{
	"Success":   0,
	"NotExist":  1,
	"NotModify": 3,
}

func (x GetBotListResult_Errorcode) String() string {
	return proto.EnumName(GetBotListResult_Errorcode_name, int32(x))
}
func (GetBotListResult_Errorcode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

type GetBotDetailResult_Errorcode int32

const (
	GetBotDetailResult_Success    GetBotDetailResult_Errorcode = 0
	GetBotDetailResult_NotExist   GetBotDetailResult_Errorcode = 1
	GetBotDetailResult_OtherError GetBotDetailResult_Errorcode = 2
)

var GetBotDetailResult_Errorcode_name = map[int32]string{
	0: "Success",
	1: "NotExist",
	2: "OtherError",
}
var GetBotDetailResult_Errorcode_value = map[string]int32{
	"Success":    0,
	"NotExist":   1,
	"OtherError": 2,
}

func (x GetBotDetailResult_Errorcode) String() string {
	return proto.EnumName(GetBotDetailResult_Errorcode_name, int32(x))
}
func (GetBotDetailResult_Errorcode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0}
}

type BotLikeResult_Errorcode int32

const (
	BotLikeResult_Success    BotLikeResult_Errorcode = 0
	BotLikeResult_NotExist   BotLikeResult_Errorcode = 1
	BotLikeResult_OtherError BotLikeResult_Errorcode = 2
)

var BotLikeResult_Errorcode_name = map[int32]string{
	0: "Success",
	1: "NotExist",
	2: "OtherError",
}
var BotLikeResult_Errorcode_value = map[string]int32{
	"Success":    0,
	"NotExist":   1,
	"OtherError": 2,
}

func (x BotLikeResult_Errorcode) String() string {
	return proto.EnumName(BotLikeResult_Errorcode_name, int32(x))
}
func (BotLikeResult_Errorcode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13, 0} }

// 获取自建机器人列表
type GetBotListMineReq struct {
	UserId   uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Hash     string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	OffsetId uint32 `protobuf:"varint,3,opt,name=offset_id,json=offsetId" json:"offset_id,omitempty"`
	Limit    uint32 `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *GetBotListMineReq) Reset()                    { *m = GetBotListMineReq{} }
func (m *GetBotListMineReq) String() string            { return proto.CompactTextString(m) }
func (*GetBotListMineReq) ProtoMessage()               {}
func (*GetBotListMineReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetBotListMineReq) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetBotListMineReq) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *GetBotListMineReq) GetOffsetId() uint32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *GetBotListMineReq) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// 获取机器人列表请求
type GetBotListReq struct {
	Hash     string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Offcial  bool   `protobuf:"varint,2,opt,name=offcial" json:"offcial,omitempty"`
	OffsetId uint32 `protobuf:"varint,3,opt,name=offset_id,json=offsetId" json:"offset_id,omitempty"`
	Limit    uint32 `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *GetBotListReq) Reset()                    { *m = GetBotListReq{} }
func (m *GetBotListReq) String() string            { return proto.CompactTextString(m) }
func (*GetBotListReq) ProtoMessage()               {}
func (*GetBotListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetBotListReq) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *GetBotListReq) GetOffcial() bool {
	if m != nil {
		return m.Offcial
	}
	return false
}

func (m *GetBotListReq) GetOffsetId() uint32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *GetBotListReq) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// 机器人列表信息
type BotInfo struct {
	BotId       uint32 `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	Id          uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Type        uint32 `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Hot         uint32 `protobuf:"varint,6,opt,name=hot" json:"hot,omitempty"`
}

func (m *BotInfo) Reset()                    { *m = BotInfo{} }
func (m *BotInfo) String() string            { return proto.CompactTextString(m) }
func (*BotInfo) ProtoMessage()               {}
func (*BotInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BotInfo) GetBotId() uint32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *BotInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BotInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BotInfo) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BotInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BotInfo) GetHot() uint32 {
	if m != nil {
		return m.Hot
	}
	return 0
}

// 获取机器人列表回应
type GetBotListResult struct {
	ErrCode   GetBotListResult_Errorcode `protobuf:"varint,1,opt,name=errCode,enum=apiservice.GetBotListResult_Errorcode" json:"errCode,omitempty"`
	Hash      string                     `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	BoInfoArr []*BotInfo                 `protobuf:"bytes,3,rep,name=boInfoArr" json:"boInfoArr,omitempty"`
}

func (m *GetBotListResult) Reset()                    { *m = GetBotListResult{} }
func (m *GetBotListResult) String() string            { return proto.CompactTextString(m) }
func (*GetBotListResult) ProtoMessage()               {}
func (*GetBotListResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetBotListResult) GetErrCode() GetBotListResult_Errorcode {
	if m != nil {
		return m.ErrCode
	}
	return GetBotListResult_Success
}

func (m *GetBotListResult) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *GetBotListResult) GetBoInfoArr() []*BotInfo {
	if m != nil {
		return m.BoInfoArr
	}
	return nil
}

// 获取单个广场机器人信息
type GetBotPlazaInfoByIdReq struct {
	Id       uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (m *GetBotPlazaInfoByIdReq) Reset()                    { *m = GetBotPlazaInfoByIdReq{} }
func (m *GetBotPlazaInfoByIdReq) String() string            { return proto.CompactTextString(m) }
func (*GetBotPlazaInfoByIdReq) ProtoMessage()               {}
func (*GetBotPlazaInfoByIdReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetBotPlazaInfoByIdReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetBotPlazaInfoByIdReq) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type GetBotPlazaInfoByIdReply struct {
	ErrorCode    uint32        `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	BotPlazaInfo *BotPlazaInfo `protobuf:"bytes,2,opt,name=bot_plaza_info,json=botPlazaInfo" json:"bot_plaza_info,omitempty"`
}

func (m *GetBotPlazaInfoByIdReply) Reset()                    { *m = GetBotPlazaInfoByIdReply{} }
func (m *GetBotPlazaInfoByIdReply) String() string            { return proto.CompactTextString(m) }
func (*GetBotPlazaInfoByIdReply) ProtoMessage()               {}
func (*GetBotPlazaInfoByIdReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetBotPlazaInfoByIdReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetBotPlazaInfoByIdReply) GetBotPlazaInfo() *BotPlazaInfo {
	if m != nil {
		return m.BotPlazaInfo
	}
	return nil
}

// 获取机器人广场信息
type GetBotPlazaInfoReq struct {
	Language string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
}

func (m *GetBotPlazaInfoReq) Reset()                    { *m = GetBotPlazaInfoReq{} }
func (m *GetBotPlazaInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetBotPlazaInfoReq) ProtoMessage()               {}
func (*GetBotPlazaInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetBotPlazaInfoReq) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type BotPlazaInfo struct {
	Id          uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Classify    string `protobuf:"bytes,2,opt,name=classify" json:"classify,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	About       string `protobuf:"bytes,5,opt,name=about" json:"about,omitempty"`
	Lang        string `protobuf:"bytes,6,opt,name=lang" json:"lang,omitempty"`
}

func (m *BotPlazaInfo) Reset()                    { *m = BotPlazaInfo{} }
func (m *BotPlazaInfo) String() string            { return proto.CompactTextString(m) }
func (*BotPlazaInfo) ProtoMessage()               {}
func (*BotPlazaInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BotPlazaInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BotPlazaInfo) GetClassify() string {
	if m != nil {
		return m.Classify
	}
	return ""
}

func (m *BotPlazaInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BotPlazaInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BotPlazaInfo) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *BotPlazaInfo) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

type GetBotPlazaInfoReply struct {
	ErrorCode    uint32          `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	BotPlazaInfo []*BotPlazaInfo `protobuf:"bytes,2,rep,name=bot_plaza_info,json=botPlazaInfo" json:"bot_plaza_info,omitempty"`
}

func (m *GetBotPlazaInfoReply) Reset()                    { *m = GetBotPlazaInfoReply{} }
func (m *GetBotPlazaInfoReply) String() string            { return proto.CompactTextString(m) }
func (*GetBotPlazaInfoReply) ProtoMessage()               {}
func (*GetBotPlazaInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetBotPlazaInfoReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetBotPlazaInfoReply) GetBotPlazaInfo() []*BotPlazaInfo {
	if m != nil {
		return m.BotPlazaInfo
	}
	return nil
}

// GetBotDetailRequest 获取机器人信息请求
type GetBotDetailReq struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetBotDetailReq) Reset()                    { *m = GetBotDetailReq{} }
func (m *GetBotDetailReq) String() string            { return proto.CompactTextString(m) }
func (*GetBotDetailReq) ProtoMessage()               {}
func (*GetBotDetailReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetBotDetailReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 机器人详细信息
type BotDetail struct {
	Id                uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Botname           string `protobuf:"bytes,2,opt,name=botname" json:"botname,omitempty"`
	Firstname         string `protobuf:"bytes,3,opt,name=firstname" json:"firstname,omitempty"`
	Owerid            uint32 `protobuf:"varint,4,opt,name=owerid" json:"owerid,omitempty"`
	Level             uint32 `protobuf:"varint,5,opt,name=level" json:"level,omitempty"`
	Commands          string `protobuf:"bytes,6,opt,name=commands" json:"commands,omitempty"`
	Description       string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	About             string `protobuf:"bytes,8,opt,name=about" json:"about,omitempty"`
	ChatHistory       bool   `protobuf:"varint,9,opt,name=chat_history,json=chatHistory" json:"chat_history,omitempty"`
	Nochats           bool   `protobuf:"varint,10,opt,name=nochats" json:"nochats,omitempty"`
	InfoVersion       uint32 `protobuf:"varint,11,opt,name=info_version,json=infoVersion" json:"info_version,omitempty"`
	InlinePlaceholder string `protobuf:"bytes,12,opt,name=inline_placeholder,json=inlinePlaceholder" json:"inline_placeholder,omitempty"`
	Token             string `protobuf:"bytes,13,opt,name=token" json:"token,omitempty"`
	Webhook           string `protobuf:"bytes,14,opt,name=webhook" json:"webhook,omitempty"`
	Certificate       []byte `protobuf:"bytes,15,opt,name=certificate,proto3" json:"certificate,omitempty"`
	InsertedAt        uint64 `protobuf:"varint,16,opt,name=inserted_at,json=insertedAt" json:"inserted_at,omitempty"`
	Type              uint32 `protobuf:"varint,17,opt,name=type" json:"type,omitempty"`
	Official          uint32 `protobuf:"varint,18,opt,name=official" json:"official,omitempty"`
	Hot               uint32 `protobuf:"varint,19,opt,name=hot" json:"hot,omitempty"`
}

func (m *BotDetail) Reset()                    { *m = BotDetail{} }
func (m *BotDetail) String() string            { return proto.CompactTextString(m) }
func (*BotDetail) ProtoMessage()               {}
func (*BotDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BotDetail) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BotDetail) GetBotname() string {
	if m != nil {
		return m.Botname
	}
	return ""
}

func (m *BotDetail) GetFirstname() string {
	if m != nil {
		return m.Firstname
	}
	return ""
}

func (m *BotDetail) GetOwerid() uint32 {
	if m != nil {
		return m.Owerid
	}
	return 0
}

func (m *BotDetail) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *BotDetail) GetCommands() string {
	if m != nil {
		return m.Commands
	}
	return ""
}

func (m *BotDetail) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BotDetail) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *BotDetail) GetChatHistory() bool {
	if m != nil {
		return m.ChatHistory
	}
	return false
}

func (m *BotDetail) GetNochats() bool {
	if m != nil {
		return m.Nochats
	}
	return false
}

func (m *BotDetail) GetInfoVersion() uint32 {
	if m != nil {
		return m.InfoVersion
	}
	return 0
}

func (m *BotDetail) GetInlinePlaceholder() string {
	if m != nil {
		return m.InlinePlaceholder
	}
	return ""
}

func (m *BotDetail) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *BotDetail) GetWebhook() string {
	if m != nil {
		return m.Webhook
	}
	return ""
}

func (m *BotDetail) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *BotDetail) GetInsertedAt() uint64 {
	if m != nil {
		return m.InsertedAt
	}
	return 0
}

func (m *BotDetail) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BotDetail) GetOfficial() uint32 {
	if m != nil {
		return m.Official
	}
	return 0
}

func (m *BotDetail) GetHot() uint32 {
	if m != nil {
		return m.Hot
	}
	return 0
}

// 获取机器人详细信息请求
type GetBotDetailResult struct {
	ErrCode GetBotDetailResult_Errorcode `protobuf:"varint,1,opt,name=errCode,enum=apiservice.GetBotDetailResult_Errorcode" json:"errCode,omitempty"`
	Detail  *BotDetail                   `protobuf:"bytes,2,opt,name=detail" json:"detail,omitempty"`
}

func (m *GetBotDetailResult) Reset()                    { *m = GetBotDetailResult{} }
func (m *GetBotDetailResult) String() string            { return proto.CompactTextString(m) }
func (*GetBotDetailResult) ProtoMessage()               {}
func (*GetBotDetailResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetBotDetailResult) GetErrCode() GetBotDetailResult_Errorcode {
	if m != nil {
		return m.ErrCode
	}
	return GetBotDetailResult_Success
}

func (m *GetBotDetailResult) GetDetail() *BotDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

// 收藏机器人请求,like = 0为取消收藏，like=1为收藏
type BotLikeReq struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Like uint32 `protobuf:"varint,2,opt,name=like" json:"like,omitempty"`
}

func (m *BotLikeReq) Reset()                    { *m = BotLikeReq{} }
func (m *BotLikeReq) String() string            { return proto.CompactTextString(m) }
func (*BotLikeReq) ProtoMessage()               {}
func (*BotLikeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BotLikeReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BotLikeReq) GetLike() uint32 {
	if m != nil {
		return m.Like
	}
	return 0
}

// 收藏机器人请求返回
type BotLikeResult struct {
	ErrCode BotLikeResult_Errorcode `protobuf:"varint,1,opt,name=errCode,enum=apiservice.BotLikeResult_Errorcode" json:"errCode,omitempty"`
}

func (m *BotLikeResult) Reset()                    { *m = BotLikeResult{} }
func (m *BotLikeResult) String() string            { return proto.CompactTextString(m) }
func (*BotLikeResult) ProtoMessage()               {}
func (*BotLikeResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *BotLikeResult) GetErrCode() BotLikeResult_Errorcode {
	if m != nil {
		return m.ErrCode
	}
	return BotLikeResult_Success
}

type MusicSaveReq struct {
	MusicInfo []*MusicDataInfo `protobuf:"bytes,1,rep,name=MusicInfo,json=musicInfo" json:"MusicInfo,omitempty"`
}

func (m *MusicSaveReq) Reset()                    { *m = MusicSaveReq{} }
func (m *MusicSaveReq) String() string            { return proto.CompactTextString(m) }
func (*MusicSaveReq) ProtoMessage()               {}
func (*MusicSaveReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *MusicSaveReq) GetMusicInfo() []*MusicDataInfo {
	if m != nil {
		return m.MusicInfo
	}
	return nil
}

type MusicSaveRsp struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Id        uint64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *MusicSaveRsp) Reset()                    { *m = MusicSaveRsp{} }
func (m *MusicSaveRsp) String() string            { return proto.CompactTextString(m) }
func (*MusicSaveRsp) ProtoMessage()               {}
func (*MusicSaveRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *MusicSaveRsp) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *MusicSaveRsp) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// GetMeRequest 获取自身信息请求
type GetMeRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetMeRequest) Reset()                    { *m = GetMeRequest{} }
func (m *GetMeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMeRequest) ProtoMessage()               {}
func (*GetMeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetMeRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// GetMeReply 获取自身信息响应
type GetMeReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Id        uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Username  string `protobuf:"bytes,5,opt,name=username" json:"username,omitempty"`
}

func (m *GetMeReply) Reset()                    { *m = GetMeReply{} }
func (m *GetMeReply) String() string            { return proto.CompactTextString(m) }
func (*GetMeReply) ProtoMessage()               {}
func (*GetMeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetMeReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetMeReply) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetMeReply) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *GetMeReply) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *GetMeReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// GetUpdatesRequest 获取更新数据请求
type GetUpdatesRequest struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Timeout uint64 `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *GetUpdatesRequest) Reset()                    { *m = GetUpdatesRequest{} }
func (m *GetUpdatesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUpdatesRequest) ProtoMessage()               {}
func (*GetUpdatesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetUpdatesRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetUpdatesRequest) GetTimeout() uint64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// GetUpdatesReply 获取更新数据响应
type GetUpdatesReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Messages  []byte `protobuf:"bytes,2,opt,name=messages,proto3" json:"messages,omitempty"`
}

func (m *GetUpdatesReply) Reset()                    { *m = GetUpdatesReply{} }
func (m *GetUpdatesReply) String() string            { return proto.CompactTextString(m) }
func (*GetUpdatesReply) ProtoMessage()               {}
func (*GetUpdatesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetUpdatesReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetUpdatesReply) GetMessages() []byte {
	if m != nil {
		return m.Messages
	}
	return nil
}

// SendTextMessageRequest 发送文本消息请求
type SendTextMessageRequest struct {
	Id               uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ChatType         basetypes.ChatType `protobuf:"varint,2,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	ChatId           int32              `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Text             string             `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	ReplyToMessageId uint64             `protobuf:"varint,5,opt,name=reply_to_message_id,json=replyToMessageId" json:"reply_to_message_id,omitempty"`
	Markdown         bool               `protobuf:"varint,6,opt,name=markdown" json:"markdown,omitempty"`
	ReplyMarkup      []byte             `protobuf:"bytes,7,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
}

func (m *SendTextMessageRequest) Reset()                    { *m = SendTextMessageRequest{} }
func (m *SendTextMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SendTextMessageRequest) ProtoMessage()               {}
func (*SendTextMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SendTextMessageRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SendTextMessageRequest) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *SendTextMessageRequest) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SendTextMessageRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SendTextMessageRequest) GetReplyToMessageId() uint64 {
	if m != nil {
		return m.ReplyToMessageId
	}
	return 0
}

func (m *SendTextMessageRequest) GetMarkdown() bool {
	if m != nil {
		return m.Markdown
	}
	return false
}

func (m *SendTextMessageRequest) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

// SendTextMessageReply 发送文本消息响应
type SendTextMessageReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	MessageId uint64 `protobuf:"varint,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
}

func (m *SendTextMessageReply) Reset()                    { *m = SendTextMessageReply{} }
func (m *SendTextMessageReply) String() string            { return proto.CompactTextString(m) }
func (*SendTextMessageReply) ProtoMessage()               {}
func (*SendTextMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SendTextMessageReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *SendTextMessageReply) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

// SendLocationRequest 发送地理位置请求
type SendLocationRequest struct {
	Id               uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ChatType         basetypes.ChatType `protobuf:"varint,2,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	ChatId           int32              `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Latitude         float64            `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	Longitude        float64            `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	ReplyToMessageId uint64             `protobuf:"varint,6,opt,name=reply_to_message_id,json=replyToMessageId" json:"reply_to_message_id,omitempty"`
	ReplyMarkup      []byte             `protobuf:"bytes,7,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
}

func (m *SendLocationRequest) Reset()                    { *m = SendLocationRequest{} }
func (m *SendLocationRequest) String() string            { return proto.CompactTextString(m) }
func (*SendLocationRequest) ProtoMessage()               {}
func (*SendLocationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SendLocationRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SendLocationRequest) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *SendLocationRequest) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SendLocationRequest) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *SendLocationRequest) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *SendLocationRequest) GetReplyToMessageId() uint64 {
	if m != nil {
		return m.ReplyToMessageId
	}
	return 0
}

func (m *SendLocationRequest) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

// SendLocationReply 发送地理位置响应
type SendLocationReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	MessageId uint64 `protobuf:"varint,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
}

func (m *SendLocationReply) Reset()                    { *m = SendLocationReply{} }
func (m *SendLocationReply) String() string            { return proto.CompactTextString(m) }
func (*SendLocationReply) ProtoMessage()               {}
func (*SendLocationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *SendLocationReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *SendLocationReply) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

// SendVenueRequest 发送详细地址请求
type SendVenueRequest struct {
	Id               uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ChatType         basetypes.ChatType `protobuf:"varint,2,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	ChatId           int32              `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Latitude         float64            `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	Longitude        float64            `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	Title            string             `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	Address          string             `protobuf:"bytes,7,opt,name=address" json:"address,omitempty"`
	FoursquareId     string             `protobuf:"bytes,8,opt,name=foursquare_id,json=foursquareId" json:"foursquare_id,omitempty"`
	ReplyToMessageId uint64             `protobuf:"varint,9,opt,name=reply_to_message_id,json=replyToMessageId" json:"reply_to_message_id,omitempty"`
	ReplyMarkup      []byte             `protobuf:"bytes,10,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
}

func (m *SendVenueRequest) Reset()                    { *m = SendVenueRequest{} }
func (m *SendVenueRequest) String() string            { return proto.CompactTextString(m) }
func (*SendVenueRequest) ProtoMessage()               {}
func (*SendVenueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *SendVenueRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SendVenueRequest) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *SendVenueRequest) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SendVenueRequest) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *SendVenueRequest) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *SendVenueRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SendVenueRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SendVenueRequest) GetFoursquareId() string {
	if m != nil {
		return m.FoursquareId
	}
	return ""
}

func (m *SendVenueRequest) GetReplyToMessageId() uint64 {
	if m != nil {
		return m.ReplyToMessageId
	}
	return 0
}

func (m *SendVenueRequest) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

// SendVenueReply 发送详细地址响应
type SendVenueReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	MessageId uint64 `protobuf:"varint,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
}

func (m *SendVenueReply) Reset()                    { *m = SendVenueReply{} }
func (m *SendVenueReply) String() string            { return proto.CompactTextString(m) }
func (*SendVenueReply) ProtoMessage()               {}
func (*SendVenueReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *SendVenueReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *SendVenueReply) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

// SendPhotoRequest 发送照片请求
type SendPhotoRequest struct {
	Id               uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ChatType         basetypes.ChatType `protobuf:"varint,2,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	ChatId           int32              `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Media            []byte             `protobuf:"bytes,4,opt,name=media,proto3" json:"media,omitempty"`
	ReplyToMessageId uint64             `protobuf:"varint,5,opt,name=reply_to_message_id,json=replyToMessageId" json:"reply_to_message_id,omitempty"`
	ReplyMarkup      []byte             `protobuf:"bytes,6,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
}

func (m *SendPhotoRequest) Reset()                    { *m = SendPhotoRequest{} }
func (m *SendPhotoRequest) String() string            { return proto.CompactTextString(m) }
func (*SendPhotoRequest) ProtoMessage()               {}
func (*SendPhotoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *SendPhotoRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SendPhotoRequest) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *SendPhotoRequest) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SendPhotoRequest) GetMedia() []byte {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *SendPhotoRequest) GetReplyToMessageId() uint64 {
	if m != nil {
		return m.ReplyToMessageId
	}
	return 0
}

func (m *SendPhotoRequest) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

// SendPhotoReply 发送照片响应
type SendPhotoReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	MessageId uint64 `protobuf:"varint,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	FileId    uint64 `protobuf:"varint,3,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
}

func (m *SendPhotoReply) Reset()                    { *m = SendPhotoReply{} }
func (m *SendPhotoReply) String() string            { return proto.CompactTextString(m) }
func (*SendPhotoReply) ProtoMessage()               {}
func (*SendPhotoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *SendPhotoReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *SendPhotoReply) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *SendPhotoReply) GetFileId() uint64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

// SendDocumentRequest 发送文档请求
type SendDocumentRequest struct {
	Id               uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ChatType         basetypes.ChatType `protobuf:"varint,2,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	ChatId           int32              `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Media            []byte             `protobuf:"bytes,4,opt,name=media,proto3" json:"media,omitempty"`
	ReplyToMessageId uint64             `protobuf:"varint,5,opt,name=reply_to_message_id,json=replyToMessageId" json:"reply_to_message_id,omitempty"`
	ReplyMarkup      []byte             `protobuf:"bytes,6,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
}

func (m *SendDocumentRequest) Reset()                    { *m = SendDocumentRequest{} }
func (m *SendDocumentRequest) String() string            { return proto.CompactTextString(m) }
func (*SendDocumentRequest) ProtoMessage()               {}
func (*SendDocumentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *SendDocumentRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SendDocumentRequest) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *SendDocumentRequest) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SendDocumentRequest) GetMedia() []byte {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *SendDocumentRequest) GetReplyToMessageId() uint64 {
	if m != nil {
		return m.ReplyToMessageId
	}
	return 0
}

func (m *SendDocumentRequest) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

// SendDocumentReply 发送文档响应
type SendDocumentReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	MessageId uint64 `protobuf:"varint,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	FileId    uint64 `protobuf:"varint,3,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
}

func (m *SendDocumentReply) Reset()                    { *m = SendDocumentReply{} }
func (m *SendDocumentReply) String() string            { return proto.CompactTextString(m) }
func (*SendDocumentReply) ProtoMessage()               {}
func (*SendDocumentReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *SendDocumentReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *SendDocumentReply) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *SendDocumentReply) GetFileId() uint64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

// ForwardMessageRequest 转发已有消息请求
type ForwardMessageRequest struct {
	Id           uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ChatType     basetypes.ChatType `protobuf:"varint,2,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	ChatId       int32              `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	FromChatType basetypes.ChatType `protobuf:"varint,4,opt,name=from_chat_type,json=fromChatType,enum=basetypes.ChatType" json:"from_chat_type,omitempty"`
	FromChatId   int32              `protobuf:"varint,5,opt,name=from_chat_id,json=fromChatId" json:"from_chat_id,omitempty"`
	MessageId    uint64             `protobuf:"varint,6,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
}

func (m *ForwardMessageRequest) Reset()                    { *m = ForwardMessageRequest{} }
func (m *ForwardMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*ForwardMessageRequest) ProtoMessage()               {}
func (*ForwardMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ForwardMessageRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ForwardMessageRequest) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *ForwardMessageRequest) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ForwardMessageRequest) GetFromChatType() basetypes.ChatType {
	if m != nil {
		return m.FromChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *ForwardMessageRequest) GetFromChatId() int32 {
	if m != nil {
		return m.FromChatId
	}
	return 0
}

func (m *ForwardMessageRequest) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

// ForwardMessageReply 转发已有消息响应
type ForwardMessageReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	MessageId uint64 `protobuf:"varint,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
}

func (m *ForwardMessageReply) Reset()                    { *m = ForwardMessageReply{} }
func (m *ForwardMessageReply) String() string            { return proto.CompactTextString(m) }
func (*ForwardMessageReply) ProtoMessage()               {}
func (*ForwardMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ForwardMessageReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ForwardMessageReply) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

// AnswerCallbackQueryRequest 回答回调查询请求
type AnswerCallbackQueryRequest struct {
	Id              uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	InlineMessageId string `protobuf:"bytes,2,opt,name=inline_message_id,json=inlineMessageId" json:"inline_message_id,omitempty"`
	Text            string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	ShowAlert       bool   `protobuf:"varint,4,opt,name=show_alert,json=showAlert" json:"show_alert,omitempty"`
	Url             string `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	CacheTime       uint32 `protobuf:"varint,6,opt,name=cache_time,json=cacheTime" json:"cache_time,omitempty"`
}

func (m *AnswerCallbackQueryRequest) Reset()                    { *m = AnswerCallbackQueryRequest{} }
func (m *AnswerCallbackQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*AnswerCallbackQueryRequest) ProtoMessage()               {}
func (*AnswerCallbackQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *AnswerCallbackQueryRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AnswerCallbackQueryRequest) GetInlineMessageId() string {
	if m != nil {
		return m.InlineMessageId
	}
	return ""
}

func (m *AnswerCallbackQueryRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *AnswerCallbackQueryRequest) GetShowAlert() bool {
	if m != nil {
		return m.ShowAlert
	}
	return false
}

func (m *AnswerCallbackQueryRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AnswerCallbackQueryRequest) GetCacheTime() uint32 {
	if m != nil {
		return m.CacheTime
	}
	return 0
}

// AnswerCallbackQueryReply 回答回调查询响应
type AnswerCallbackQueryReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *AnswerCallbackQueryReply) Reset()                    { *m = AnswerCallbackQueryReply{} }
func (m *AnswerCallbackQueryReply) String() string            { return proto.CompactTextString(m) }
func (*AnswerCallbackQueryReply) ProtoMessage()               {}
func (*AnswerCallbackQueryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *AnswerCallbackQueryReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// EditMessageTextRequest 编辑消息文本请求
type EditMessageTextRequest struct {
	Id              uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ChatType        basetypes.ChatType `protobuf:"varint,2,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	ChatId          int32              `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	MessageId       uint64             `protobuf:"varint,4,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	InlineMessageId string             `protobuf:"bytes,5,opt,name=inline_message_id,json=inlineMessageId" json:"inline_message_id,omitempty"`
	Text            string             `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
	Markdown        bool               `protobuf:"varint,7,opt,name=markdown" json:"markdown,omitempty"`
	ReplyMarkup     []byte             `protobuf:"bytes,8,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
}

func (m *EditMessageTextRequest) Reset()                    { *m = EditMessageTextRequest{} }
func (m *EditMessageTextRequest) String() string            { return proto.CompactTextString(m) }
func (*EditMessageTextRequest) ProtoMessage()               {}
func (*EditMessageTextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *EditMessageTextRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EditMessageTextRequest) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *EditMessageTextRequest) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *EditMessageTextRequest) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *EditMessageTextRequest) GetInlineMessageId() string {
	if m != nil {
		return m.InlineMessageId
	}
	return ""
}

func (m *EditMessageTextRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *EditMessageTextRequest) GetMarkdown() bool {
	if m != nil {
		return m.Markdown
	}
	return false
}

func (m *EditMessageTextRequest) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

// EditMessageTextReply 编辑消息文本响应
type EditMessageTextReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *EditMessageTextReply) Reset()                    { *m = EditMessageTextReply{} }
func (m *EditMessageTextReply) String() string            { return proto.CompactTextString(m) }
func (*EditMessageTextReply) ProtoMessage()               {}
func (*EditMessageTextReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *EditMessageTextReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// EditMessageCaptionRequest 编辑消息标题请求
type EditMessageCaptionRequest struct {
	Id          uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ChatType    basetypes.ChatType `protobuf:"varint,2,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	ChatId      int32              `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	MessageId   uint64             `protobuf:"varint,4,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	Caption     string             `protobuf:"bytes,5,opt,name=caption" json:"caption,omitempty"`
	ReplyMarkup []byte             `protobuf:"bytes,6,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
}

func (m *EditMessageCaptionRequest) Reset()                    { *m = EditMessageCaptionRequest{} }
func (m *EditMessageCaptionRequest) String() string            { return proto.CompactTextString(m) }
func (*EditMessageCaptionRequest) ProtoMessage()               {}
func (*EditMessageCaptionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *EditMessageCaptionRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EditMessageCaptionRequest) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *EditMessageCaptionRequest) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *EditMessageCaptionRequest) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *EditMessageCaptionRequest) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *EditMessageCaptionRequest) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

// EditMessageCaptionReply 编辑消息标题响应
type EditMessageCaptionReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *EditMessageCaptionReply) Reset()                    { *m = EditMessageCaptionReply{} }
func (m *EditMessageCaptionReply) String() string            { return proto.CompactTextString(m) }
func (*EditMessageCaptionReply) ProtoMessage()               {}
func (*EditMessageCaptionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *EditMessageCaptionReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// DeleteMessageRequest 删除消息请求
type DeleteMessageRequest struct {
	Id        uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ChatType  basetypes.ChatType `protobuf:"varint,2,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	ChatId    int32              `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	MessageId uint64             `protobuf:"varint,4,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
}

func (m *DeleteMessageRequest) Reset()                    { *m = DeleteMessageRequest{} }
func (m *DeleteMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteMessageRequest) ProtoMessage()               {}
func (*DeleteMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *DeleteMessageRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteMessageRequest) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *DeleteMessageRequest) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *DeleteMessageRequest) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

// DeleteMessageReply 删除消息响应
type DeleteMessageReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *DeleteMessageReply) Reset()                    { *m = DeleteMessageReply{} }
func (m *DeleteMessageReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteMessageReply) ProtoMessage()               {}
func (*DeleteMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *DeleteMessageReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// SetWebhookRequest 设置webhook请求
type SetWebhookRequest struct {
	Id          uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Url         string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Certificate []byte `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (m *SetWebhookRequest) Reset()                    { *m = SetWebhookRequest{} }
func (m *SetWebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*SetWebhookRequest) ProtoMessage()               {}
func (*SetWebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *SetWebhookRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SetWebhookRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SetWebhookRequest) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

// SetWebhookReply 设置webhook响应
type SetWebhookReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *SetWebhookReply) Reset()                    { *m = SetWebhookReply{} }
func (m *SetWebhookReply) String() string            { return proto.CompactTextString(m) }
func (*SetWebhookReply) ProtoMessage()               {}
func (*SetWebhookReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *SetWebhookReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// DelWebhookRequest 删除webhook请求
type DelWebhookRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DelWebhookRequest) Reset()                    { *m = DelWebhookRequest{} }
func (m *DelWebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*DelWebhookRequest) ProtoMessage()               {}
func (*DelWebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *DelWebhookRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// DelWebhookReply 删除webhook响应
type DelWebhookReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *DelWebhookReply) Reset()                    { *m = DelWebhookReply{} }
func (m *DelWebhookReply) String() string            { return proto.CompactTextString(m) }
func (*DelWebhookReply) ProtoMessage()               {}
func (*DelWebhookReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *DelWebhookReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type SendPhoneMessageRequest struct {
	Id               uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Phone            string `protobuf:"bytes,2,opt,name=phone" json:"phone,omitempty"`
	Text             string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	ReplyToMessageId uint64 `protobuf:"varint,4,opt,name=reply_to_message_id,json=replyToMessageId" json:"reply_to_message_id,omitempty"`
	Markdown         bool   `protobuf:"varint,5,opt,name=markdown" json:"markdown,omitempty"`
	ReplyMarkup      []byte `protobuf:"bytes,6,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
}

func (m *SendPhoneMessageRequest) Reset()                    { *m = SendPhoneMessageRequest{} }
func (m *SendPhoneMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SendPhoneMessageRequest) ProtoMessage()               {}
func (*SendPhoneMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *SendPhoneMessageRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SendPhoneMessageRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *SendPhoneMessageRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SendPhoneMessageRequest) GetReplyToMessageId() uint64 {
	if m != nil {
		return m.ReplyToMessageId
	}
	return 0
}

func (m *SendPhoneMessageRequest) GetMarkdown() bool {
	if m != nil {
		return m.Markdown
	}
	return false
}

func (m *SendPhoneMessageRequest) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

// 请求
type MusicQueryRequest struct {
	Context string `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	UserId  int32  `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	KeyId   int64  `protobuf:"varint,3,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
	Offset  int32  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Count   int32  `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
}

func (m *MusicQueryRequest) Reset()                    { *m = MusicQueryRequest{} }
func (m *MusicQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*MusicQueryRequest) ProtoMessage()               {}
func (*MusicQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *MusicQueryRequest) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *MusicQueryRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MusicQueryRequest) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *MusicQueryRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *MusicQueryRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// 响应
type MusicQueryReply struct {
	ErrorCode uint32           `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	MusicInfo []*MusicDataInfo `protobuf:"bytes,2,rep,name=music_info,json=musicInfo" json:"music_info,omitempty"`
}

func (m *MusicQueryReply) Reset()                    { *m = MusicQueryReply{} }
func (m *MusicQueryReply) String() string            { return proto.CompactTextString(m) }
func (*MusicQueryReply) ProtoMessage()               {}
func (*MusicQueryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *MusicQueryReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *MusicQueryReply) GetMusicInfo() []*MusicDataInfo {
	if m != nil {
		return m.MusicInfo
	}
	return nil
}

// 查询内容
type MusicDataInfo struct {
	QueryId         string `protobuf:"bytes,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	MusicName       string `protobuf:"bytes,2,opt,name=music_name,json=musicName" json:"music_name,omitempty"`
	MusicPerformer  string `protobuf:"bytes,3,opt,name=music_performer,json=musicPerformer" json:"music_performer,omitempty"`
	MusicAlbum      string `protobuf:"bytes,4,opt,name=music_album,json=musicAlbum" json:"music_album,omitempty"`
	MusicFileId     int64  `protobuf:"varint,5,opt,name=music_file_id,json=musicFileId" json:"music_file_id,omitempty"`
	MusicAccessHash int64  `protobuf:"varint,6,opt,name=music_access_hash,json=musicAccessHash" json:"music_access_hash,omitempty"`
	MusicSize       int64  `protobuf:"varint,7,opt,name=music_size,json=musicSize" json:"music_size,omitempty"`
	MusicDuration   int32  `protobuf:"varint,8,opt,name=music_duration,json=musicDuration" json:"music_duration,omitempty"`
	MusicRate       int32  `protobuf:"varint,9,opt,name=music_rate,json=musicRate" json:"music_rate,omitempty"`
	MusicHot        int32  `protobuf:"varint,10,opt,name=music_hot,json=musicHot" json:"music_hot,omitempty"`
}

func (m *MusicDataInfo) Reset()                    { *m = MusicDataInfo{} }
func (m *MusicDataInfo) String() string            { return proto.CompactTextString(m) }
func (*MusicDataInfo) ProtoMessage()               {}
func (*MusicDataInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *MusicDataInfo) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *MusicDataInfo) GetMusicName() string {
	if m != nil {
		return m.MusicName
	}
	return ""
}

func (m *MusicDataInfo) GetMusicPerformer() string {
	if m != nil {
		return m.MusicPerformer
	}
	return ""
}

func (m *MusicDataInfo) GetMusicAlbum() string {
	if m != nil {
		return m.MusicAlbum
	}
	return ""
}

func (m *MusicDataInfo) GetMusicFileId() int64 {
	if m != nil {
		return m.MusicFileId
	}
	return 0
}

func (m *MusicDataInfo) GetMusicAccessHash() int64 {
	if m != nil {
		return m.MusicAccessHash
	}
	return 0
}

func (m *MusicDataInfo) GetMusicSize() int64 {
	if m != nil {
		return m.MusicSize
	}
	return 0
}

func (m *MusicDataInfo) GetMusicDuration() int32 {
	if m != nil {
		return m.MusicDuration
	}
	return 0
}

func (m *MusicDataInfo) GetMusicRate() int32 {
	if m != nil {
		return m.MusicRate
	}
	return 0
}

func (m *MusicDataInfo) GetMusicHot() int32 {
	if m != nil {
		return m.MusicHot
	}
	return 0
}

type GetMusicFileInfoReq struct {
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	UserId  int32  `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	KeyId   int64  `protobuf:"varint,3,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
}

func (m *GetMusicFileInfoReq) Reset()                    { *m = GetMusicFileInfoReq{} }
func (m *GetMusicFileInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetMusicFileInfoReq) ProtoMessage()               {}
func (*GetMusicFileInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *GetMusicFileInfoReq) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *GetMusicFileInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetMusicFileInfoReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

type GetMusicFileInfoReply struct {
	ErrorCode uint32         `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	MusicInfo *MusicDataInfo `protobuf:"bytes,2,opt,name=music_info,json=musicInfo" json:"music_info,omitempty"`
}

func (m *GetMusicFileInfoReply) Reset()                    { *m = GetMusicFileInfoReply{} }
func (m *GetMusicFileInfoReply) String() string            { return proto.CompactTextString(m) }
func (*GetMusicFileInfoReply) ProtoMessage()               {}
func (*GetMusicFileInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *GetMusicFileInfoReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetMusicFileInfoReply) GetMusicInfo() *MusicDataInfo {
	if m != nil {
		return m.MusicInfo
	}
	return nil
}

type SendGameReq struct {
	ChatId              int32              `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType            basetypes.ChatType `protobuf:"varint,2,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	GameShortName       string             `protobuf:"bytes,3,opt,name=game_short_name,json=gameShortName" json:"game_short_name,omitempty"`
	BotId               int32              `protobuf:"varint,4,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	DisableNotification bool               `protobuf:"varint,5,opt,name=disable_notification,json=disableNotification" json:"disable_notification,omitempty"`
	ReplyToMessageId    uint64             `protobuf:"varint,6,opt,name=reply_to_message_id,json=replyToMessageId" json:"reply_to_message_id,omitempty"`
	ReplyMarkup         []byte             `protobuf:"bytes,7,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
}

func (m *SendGameReq) Reset()                    { *m = SendGameReq{} }
func (m *SendGameReq) String() string            { return proto.CompactTextString(m) }
func (*SendGameReq) ProtoMessage()               {}
func (*SendGameReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *SendGameReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SendGameReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *SendGameReq) GetGameShortName() string {
	if m != nil {
		return m.GameShortName
	}
	return ""
}

func (m *SendGameReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *SendGameReq) GetDisableNotification() bool {
	if m != nil {
		return m.DisableNotification
	}
	return false
}

func (m *SendGameReq) GetReplyToMessageId() uint64 {
	if m != nil {
		return m.ReplyToMessageId
	}
	return 0
}

func (m *SendGameReq) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

type SendGameReply struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	MessageId uint64 `protobuf:"varint,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
}

func (m *SendGameReply) Reset()                    { *m = SendGameReply{} }
func (m *SendGameReply) String() string            { return proto.CompactTextString(m) }
func (*SendGameReply) ProtoMessage()               {}
func (*SendGameReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *SendGameReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *SendGameReply) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

// 调用设置分数
type SetGameScoreReq struct {
	Userid             int32              `protobuf:"varint,1,opt,name=userid" json:"userid,omitempty"`
	Score              int32              `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Force              bool               `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
	DisableEditMessage bool               `protobuf:"varint,4,opt,name=disable_edit_message,json=disableEditMessage" json:"disable_edit_message,omitempty"`
	ChatId             int32              `protobuf:"varint,5,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType           basetypes.ChatType `protobuf:"varint,6,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	MessageId          int32              `protobuf:"varint,7,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	InlineMessageId    string             `protobuf:"bytes,8,opt,name=inline_message_id,json=inlineMessageId" json:"inline_message_id,omitempty"`
	Botid              int32              `protobuf:"varint,9,opt,name=botid" json:"botid,omitempty"`
}

func (m *SetGameScoreReq) Reset()                    { *m = SetGameScoreReq{} }
func (m *SetGameScoreReq) String() string            { return proto.CompactTextString(m) }
func (*SetGameScoreReq) ProtoMessage()               {}
func (*SetGameScoreReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *SetGameScoreReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *SetGameScoreReq) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *SetGameScoreReq) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *SetGameScoreReq) GetDisableEditMessage() bool {
	if m != nil {
		return m.DisableEditMessage
	}
	return false
}

func (m *SetGameScoreReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SetGameScoreReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *SetGameScoreReq) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *SetGameScoreReq) GetInlineMessageId() string {
	if m != nil {
		return m.InlineMessageId
	}
	return ""
}

func (m *SetGameScoreReq) GetBotid() int32 {
	if m != nil {
		return m.Botid
	}
	return 0
}

// 设置分数返回
type SetGameScoreReply struct {
	Succeed   bool   `protobuf:"varint,1,opt,name=succeed" json:"succeed,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Errorcode int32  `protobuf:"varint,3,opt,name=errorcode" json:"errorcode,omitempty"`
}

func (m *SetGameScoreReply) Reset()                    { *m = SetGameScoreReply{} }
func (m *SetGameScoreReply) String() string            { return proto.CompactTextString(m) }
func (*SetGameScoreReply) ProtoMessage()               {}
func (*SetGameScoreReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *SetGameScoreReply) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *SetGameScoreReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *SetGameScoreReply) GetErrorcode() int32 {
	if m != nil {
		return m.Errorcode
	}
	return 0
}

type AnswerInlineQueryRequest struct {
	Type              string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	InlineQueryId     string `protobuf:"bytes,2,opt,name=inline_query_id,json=inlineQueryId" json:"inline_query_id,omitempty"`
	Results           []byte `protobuf:"bytes,3,opt,name=results,proto3" json:"results,omitempty"`
	CacheTime         int32  `protobuf:"varint,4,opt,name=cache_time,json=cacheTime" json:"cache_time,omitempty"`
	IsPersonal        bool   `protobuf:"varint,5,opt,name=is_personal,json=isPersonal" json:"is_personal,omitempty"`
	NextOffset        string `protobuf:"bytes,6,opt,name=next_offset,json=nextOffset" json:"next_offset,omitempty"`
	SwitchPmText      string `protobuf:"bytes,7,opt,name=switch_pm_text,json=switchPmText" json:"switch_pm_text,omitempty"`
	SwitchPmParameter string `protobuf:"bytes,8,opt,name=switch_pm_parameter,json=switchPmParameter" json:"switch_pm_parameter,omitempty"`
}

func (m *AnswerInlineQueryRequest) Reset()                    { *m = AnswerInlineQueryRequest{} }
func (m *AnswerInlineQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*AnswerInlineQueryRequest) ProtoMessage()               {}
func (*AnswerInlineQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *AnswerInlineQueryRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AnswerInlineQueryRequest) GetInlineQueryId() string {
	if m != nil {
		return m.InlineQueryId
	}
	return ""
}

func (m *AnswerInlineQueryRequest) GetResults() []byte {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *AnswerInlineQueryRequest) GetCacheTime() int32 {
	if m != nil {
		return m.CacheTime
	}
	return 0
}

func (m *AnswerInlineQueryRequest) GetIsPersonal() bool {
	if m != nil {
		return m.IsPersonal
	}
	return false
}

func (m *AnswerInlineQueryRequest) GetNextOffset() string {
	if m != nil {
		return m.NextOffset
	}
	return ""
}

func (m *AnswerInlineQueryRequest) GetSwitchPmText() string {
	if m != nil {
		return m.SwitchPmText
	}
	return ""
}

func (m *AnswerInlineQueryRequest) GetSwitchPmParameter() string {
	if m != nil {
		return m.SwitchPmParameter
	}
	return ""
}

// 机器人返回接口-Inline
type ReplyBotInlineCall struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error" json:"error,omitempty"`
}

func (m *ReplyBotInlineCall) Reset()                    { *m = ReplyBotInlineCall{} }
func (m *ReplyBotInlineCall) String() string            { return proto.CompactTextString(m) }
func (*ReplyBotInlineCall) ProtoMessage()               {}
func (*ReplyBotInlineCall) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *ReplyBotInlineCall) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyBotInlineCall) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 获取用户当前的游戏分数排行
type GetGameHighScoresReq struct {
	UserId          int32              `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChatId          int32              `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType        basetypes.ChatType `protobuf:"varint,3,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	MessageId       int32              `protobuf:"varint,4,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	InlineMessageId string             `protobuf:"bytes,5,opt,name=inline_message_id,json=inlineMessageId" json:"inline_message_id,omitempty"`
}

func (m *GetGameHighScoresReq) Reset()                    { *m = GetGameHighScoresReq{} }
func (m *GetGameHighScoresReq) String() string            { return proto.CompactTextString(m) }
func (*GetGameHighScoresReq) ProtoMessage()               {}
func (*GetGameHighScoresReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *GetGameHighScoresReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetGameHighScoresReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetGameHighScoresReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *GetGameHighScoresReq) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *GetGameHighScoresReq) GetInlineMessageId() string {
	if m != nil {
		return m.InlineMessageId
	}
	return ""
}

type GameHighScore struct {
	Position int32           `protobuf:"varint,1,opt,name=position" json:"position,omitempty"`
	User     *basetypes.User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Score    int32           `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
}

func (m *GameHighScore) Reset()                    { *m = GameHighScore{} }
func (m *GameHighScore) String() string            { return proto.CompactTextString(m) }
func (*GameHighScore) ProtoMessage()               {}
func (*GameHighScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *GameHighScore) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *GameHighScore) GetUser() *basetypes.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GameHighScore) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type GetGameHighScoresReply struct {
	GameHighscore []*GameHighScore `protobuf:"bytes,1,rep,name=game_highscore,json=gameHighscore" json:"game_highscore,omitempty"`
}

func (m *GetGameHighScoresReply) Reset()                    { *m = GetGameHighScoresReply{} }
func (m *GetGameHighScoresReply) String() string            { return proto.CompactTextString(m) }
func (*GetGameHighScoresReply) ProtoMessage()               {}
func (*GetGameHighScoresReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *GetGameHighScoresReply) GetGameHighscore() []*GameHighScore {
	if m != nil {
		return m.GameHighscore
	}
	return nil
}

type KickChatMemberRequest struct {
	FromId   int32              `protobuf:"varint,1,opt,name=from_id,json=fromId" json:"from_id,omitempty"`
	BannedId int32              `protobuf:"varint,2,opt,name=banned_id,json=bannedId" json:"banned_id,omitempty"`
	ChatId   int32              `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType basetypes.ChatType `protobuf:"varint,4,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	UtilDate int32              `protobuf:"varint,5,opt,name=util_date,json=utilDate" json:"util_date,omitempty"`
}

func (m *KickChatMemberRequest) Reset()                    { *m = KickChatMemberRequest{} }
func (m *KickChatMemberRequest) String() string            { return proto.CompactTextString(m) }
func (*KickChatMemberRequest) ProtoMessage()               {}
func (*KickChatMemberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *KickChatMemberRequest) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *KickChatMemberRequest) GetBannedId() int32 {
	if m != nil {
		return m.BannedId
	}
	return 0
}

func (m *KickChatMemberRequest) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *KickChatMemberRequest) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *KickChatMemberRequest) GetUtilDate() int32 {
	if m != nil {
		return m.UtilDate
	}
	return 0
}

type KickChatMemberReply struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *KickChatMemberReply) Reset()                    { *m = KickChatMemberReply{} }
func (m *KickChatMemberReply) String() string            { return proto.CompactTextString(m) }
func (*KickChatMemberReply) ProtoMessage()               {}
func (*KickChatMemberReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *KickChatMemberReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type GroupInactiveUser struct {
	Id      int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Time    int32  `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	TimeStr string `protobuf:"bytes,4,opt,name=timeStr" json:"timeStr,omitempty"`
}

func (m *GroupInactiveUser) Reset()                    { *m = GroupInactiveUser{} }
func (m *GroupInactiveUser) String() string            { return proto.CompactTextString(m) }
func (*GroupInactiveUser) ProtoMessage()               {}
func (*GroupInactiveUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *GroupInactiveUser) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GroupInactiveUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupInactiveUser) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GroupInactiveUser) GetTimeStr() string {
	if m != nil {
		return m.TimeStr
	}
	return ""
}

type GetGroupInactiveUsersReq struct {
	ChatId   int32              `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType basetypes.ChatType `protobuf:"varint,2,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	Limit    int32              `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Botid    int32              `protobuf:"varint,4,opt,name=botid" json:"botid,omitempty"`
}

func (m *GetGroupInactiveUsersReq) Reset()                    { *m = GetGroupInactiveUsersReq{} }
func (m *GetGroupInactiveUsersReq) String() string            { return proto.CompactTextString(m) }
func (*GetGroupInactiveUsersReq) ProtoMessage()               {}
func (*GetGroupInactiveUsersReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *GetGroupInactiveUsersReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetGroupInactiveUsersReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *GetGroupInactiveUsersReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetGroupInactiveUsersReq) GetBotid() int32 {
	if m != nil {
		return m.Botid
	}
	return 0
}

type GetGroupInactiveUsersResult struct {
	Users     []*GroupInactiveUser `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	Count     int32                `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	ErrorCode int32                `protobuf:"varint,3,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *GetGroupInactiveUsersResult) Reset()                    { *m = GetGroupInactiveUsersResult{} }
func (m *GetGroupInactiveUsersResult) String() string            { return proto.CompactTextString(m) }
func (*GetGroupInactiveUsersResult) ProtoMessage()               {}
func (*GetGroupInactiveUsersResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *GetGroupInactiveUsersResult) GetUsers() []*GroupInactiveUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetGroupInactiveUsersResult) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetGroupInactiveUsersResult) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type DeleteChannelHistoryMessageReq struct {
	BotId    int32              `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	UserId   int32              `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChatId   int32              `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType basetypes.ChatType `protobuf:"varint,4,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
}

func (m *DeleteChannelHistoryMessageReq) Reset()         { *m = DeleteChannelHistoryMessageReq{} }
func (m *DeleteChannelHistoryMessageReq) String() string { return proto.CompactTextString(m) }
func (*DeleteChannelHistoryMessageReq) ProtoMessage()    {}
func (*DeleteChannelHistoryMessageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{64}
}

func (m *DeleteChannelHistoryMessageReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *DeleteChannelHistoryMessageReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteChannelHistoryMessageReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *DeleteChannelHistoryMessageReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

type DeleteChannelHistoryMessageReply struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *DeleteChannelHistoryMessageReply) Reset()         { *m = DeleteChannelHistoryMessageReply{} }
func (m *DeleteChannelHistoryMessageReply) String() string { return proto.CompactTextString(m) }
func (*DeleteChannelHistoryMessageReply) ProtoMessage()    {}
func (*DeleteChannelHistoryMessageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{65}
}

func (m *DeleteChannelHistoryMessageReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type LeaveChatReq struct {
	BotId    int32              `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	ChatId   int32              `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType basetypes.ChatType `protobuf:"varint,3,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
}

func (m *LeaveChatReq) Reset()                    { *m = LeaveChatReq{} }
func (m *LeaveChatReq) String() string            { return proto.CompactTextString(m) }
func (*LeaveChatReq) ProtoMessage()               {}
func (*LeaveChatReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *LeaveChatReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *LeaveChatReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *LeaveChatReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

type LeaveChatReply struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *LeaveChatReply) Reset()                    { *m = LeaveChatReply{} }
func (m *LeaveChatReply) String() string            { return proto.CompactTextString(m) }
func (*LeaveChatReply) ProtoMessage()               {}
func (*LeaveChatReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *LeaveChatReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type GetChatReq struct {
	BotId    int32              `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	ChatId   int32              `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType basetypes.ChatType `protobuf:"varint,3,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
}

func (m *GetChatReq) Reset()                    { *m = GetChatReq{} }
func (m *GetChatReq) String() string            { return proto.CompactTextString(m) }
func (*GetChatReq) ProtoMessage()               {}
func (*GetChatReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *GetChatReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *GetChatReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

type GetChatReply struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Chat      []byte `protobuf:"bytes,2,opt,name=chat,proto3" json:"chat,omitempty"`
}

func (m *GetChatReply) Reset()                    { *m = GetChatReply{} }
func (m *GetChatReply) String() string            { return proto.CompactTextString(m) }
func (*GetChatReply) ProtoMessage()               {}
func (*GetChatReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *GetChatReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetChatReply) GetChat() []byte {
	if m != nil {
		return m.Chat
	}
	return nil
}

type GetChatMembersCountReq struct {
	BotId    int32              `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	ChatId   int32              `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType basetypes.ChatType `protobuf:"varint,3,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
}

func (m *GetChatMembersCountReq) Reset()                    { *m = GetChatMembersCountReq{} }
func (m *GetChatMembersCountReq) String() string            { return proto.CompactTextString(m) }
func (*GetChatMembersCountReq) ProtoMessage()               {}
func (*GetChatMembersCountReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *GetChatMembersCountReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *GetChatMembersCountReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatMembersCountReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

type GetChatMembersCountReply struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Count     int32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *GetChatMembersCountReply) Reset()                    { *m = GetChatMembersCountReply{} }
func (m *GetChatMembersCountReply) String() string            { return proto.CompactTextString(m) }
func (*GetChatMembersCountReply) ProtoMessage()               {}
func (*GetChatMembersCountReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *GetChatMembersCountReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetChatMembersCountReply) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetChatAdministratorsReq struct {
	BotId    int32              `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	ChatId   int32              `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType basetypes.ChatType `protobuf:"varint,3,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	UserId   int32              `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetChatAdministratorsReq) Reset()                    { *m = GetChatAdministratorsReq{} }
func (m *GetChatAdministratorsReq) String() string            { return proto.CompactTextString(m) }
func (*GetChatAdministratorsReq) ProtoMessage()               {}
func (*GetChatAdministratorsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *GetChatAdministratorsReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *GetChatAdministratorsReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatAdministratorsReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *GetChatAdministratorsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetChatAdministratorsReply struct {
	ErrorCode  int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ChatMember []byte `protobuf:"bytes,2,opt,name=chat_member,json=chatMember,proto3" json:"chat_member,omitempty"`
}

func (m *GetChatAdministratorsReply) Reset()                    { *m = GetChatAdministratorsReply{} }
func (m *GetChatAdministratorsReply) String() string            { return proto.CompactTextString(m) }
func (*GetChatAdministratorsReply) ProtoMessage()               {}
func (*GetChatAdministratorsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *GetChatAdministratorsReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetChatAdministratorsReply) GetChatMember() []byte {
	if m != nil {
		return m.ChatMember
	}
	return nil
}

type SetChatTitleReq struct {
	BotId    int32              `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	ChatId   int32              `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType basetypes.ChatType `protobuf:"varint,3,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	Title    string             `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
}

func (m *SetChatTitleReq) Reset()                    { *m = SetChatTitleReq{} }
func (m *SetChatTitleReq) String() string            { return proto.CompactTextString(m) }
func (*SetChatTitleReq) ProtoMessage()               {}
func (*SetChatTitleReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *SetChatTitleReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *SetChatTitleReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SetChatTitleReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *SetChatTitleReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type SetChatTitleReply struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *SetChatTitleReply) Reset()                    { *m = SetChatTitleReply{} }
func (m *SetChatTitleReply) String() string            { return proto.CompactTextString(m) }
func (*SetChatTitleReply) ProtoMessage()               {}
func (*SetChatTitleReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *SetChatTitleReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type SetChatDescriptionReq struct {
	BotId       int32              `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	ChatId      int32              `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType    basetypes.ChatType `protobuf:"varint,3,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	Description string             `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

func (m *SetChatDescriptionReq) Reset()                    { *m = SetChatDescriptionReq{} }
func (m *SetChatDescriptionReq) String() string            { return proto.CompactTextString(m) }
func (*SetChatDescriptionReq) ProtoMessage()               {}
func (*SetChatDescriptionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *SetChatDescriptionReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *SetChatDescriptionReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SetChatDescriptionReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *SetChatDescriptionReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type SetChatDescriptionReply struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *SetChatDescriptionReply) Reset()                    { *m = SetChatDescriptionReply{} }
func (m *SetChatDescriptionReply) String() string            { return proto.CompactTextString(m) }
func (*SetChatDescriptionReply) ProtoMessage()               {}
func (*SetChatDescriptionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *SetChatDescriptionReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type PinChatMessageReq struct {
	BotId               int32              `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	ChatId              int32              `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType            basetypes.ChatType `protobuf:"varint,3,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	MessageId           int32              `protobuf:"varint,4,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	DisableNotification bool               `protobuf:"varint,5,opt,name=disable_notification,json=disableNotification" json:"disable_notification,omitempty"`
}

func (m *PinChatMessageReq) Reset()                    { *m = PinChatMessageReq{} }
func (m *PinChatMessageReq) String() string            { return proto.CompactTextString(m) }
func (*PinChatMessageReq) ProtoMessage()               {}
func (*PinChatMessageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *PinChatMessageReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *PinChatMessageReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *PinChatMessageReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *PinChatMessageReq) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *PinChatMessageReq) GetDisableNotification() bool {
	if m != nil {
		return m.DisableNotification
	}
	return false
}

type PinChatMessageReply struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *PinChatMessageReply) Reset()                    { *m = PinChatMessageReply{} }
func (m *PinChatMessageReply) String() string            { return proto.CompactTextString(m) }
func (*PinChatMessageReply) ProtoMessage()               {}
func (*PinChatMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *PinChatMessageReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type UnPinChatMessageReq struct {
	BotId    int32              `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	ChatId   int32              `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType basetypes.ChatType `protobuf:"varint,3,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
}

func (m *UnPinChatMessageReq) Reset()                    { *m = UnPinChatMessageReq{} }
func (m *UnPinChatMessageReq) String() string            { return proto.CompactTextString(m) }
func (*UnPinChatMessageReq) ProtoMessage()               {}
func (*UnPinChatMessageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *UnPinChatMessageReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *UnPinChatMessageReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *UnPinChatMessageReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

type UnPinChatMessageReply struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *UnPinChatMessageReply) Reset()                    { *m = UnPinChatMessageReply{} }
func (m *UnPinChatMessageReply) String() string            { return proto.CompactTextString(m) }
func (*UnPinChatMessageReply) ProtoMessage()               {}
func (*UnPinChatMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *UnPinChatMessageReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type SendChatActionReq struct {
	BotId    int32              `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	ChatId   int32              `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType basetypes.ChatType `protobuf:"varint,3,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	Action   string             `protobuf:"bytes,4,opt,name=action" json:"action,omitempty"`
}

func (m *SendChatActionReq) Reset()                    { *m = SendChatActionReq{} }
func (m *SendChatActionReq) String() string            { return proto.CompactTextString(m) }
func (*SendChatActionReq) ProtoMessage()               {}
func (*SendChatActionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *SendChatActionReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *SendChatActionReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SendChatActionReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *SendChatActionReq) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type SendChatActionReply struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *SendChatActionReply) Reset()                    { *m = SendChatActionReply{} }
func (m *SendChatActionReply) String() string            { return proto.CompactTextString(m) }
func (*SendChatActionReply) ProtoMessage()               {}
func (*SendChatActionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *SendChatActionReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type SendContactReq struct {
	BotId               int32              `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	ChatId              int32              `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType            basetypes.ChatType `protobuf:"varint,3,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
	PhoneNumber         string             `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	FirstName           string             `protobuf:"bytes,5,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName            string             `protobuf:"bytes,6,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Vcard               string             `protobuf:"bytes,7,opt,name=vcard" json:"vcard,omitempty"`
	DisableNotification bool               `protobuf:"varint,8,opt,name=disable_notification,json=disableNotification" json:"disable_notification,omitempty"`
	ReplyToMessageId    uint64             `protobuf:"varint,9,opt,name=reply_to_message_id,json=replyToMessageId" json:"reply_to_message_id,omitempty"`
	ReplyMarkup         []byte             `protobuf:"bytes,10,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
}

func (m *SendContactReq) Reset()                    { *m = SendContactReq{} }
func (m *SendContactReq) String() string            { return proto.CompactTextString(m) }
func (*SendContactReq) ProtoMessage()               {}
func (*SendContactReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *SendContactReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *SendContactReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SendContactReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

func (m *SendContactReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *SendContactReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *SendContactReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *SendContactReq) GetVcard() string {
	if m != nil {
		return m.Vcard
	}
	return ""
}

func (m *SendContactReq) GetDisableNotification() bool {
	if m != nil {
		return m.DisableNotification
	}
	return false
}

func (m *SendContactReq) GetReplyToMessageId() uint64 {
	if m != nil {
		return m.ReplyToMessageId
	}
	return 0
}

func (m *SendContactReq) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

type SendContactReply struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *SendContactReply) Reset()                    { *m = SendContactReply{} }
func (m *SendContactReply) String() string            { return proto.CompactTextString(m) }
func (*SendContactReply) ProtoMessage()               {}
func (*SendContactReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *SendContactReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type GetGroupsReq struct {
	BotId      int32 `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	PeerFilter int32 `protobuf:"varint,2,opt,name=peer_filter,json=peerFilter" json:"peer_filter,omitempty"`
}

func (m *GetGroupsReq) Reset()                    { *m = GetGroupsReq{} }
func (m *GetGroupsReq) String() string            { return proto.CompactTextString(m) }
func (*GetGroupsReq) ProtoMessage()               {}
func (*GetGroupsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

func (m *GetGroupsReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *GetGroupsReq) GetPeerFilter() int32 {
	if m != nil {
		return m.PeerFilter
	}
	return 0
}

type Peer struct {
	PeerID   int32  `protobuf:"varint,1,opt,name=PeerID,json=peerID" json:"PeerID,omitempty"`
	PeerName string `protobuf:"bytes,2,opt,name=PeerName,json=peerName" json:"PeerName,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *Peer) GetPeerID() int32 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *Peer) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

type GetGroupsReply struct {
	ErrorCode   int32   `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Groups      []*Peer `protobuf:"bytes,2,rep,name=Groups,json=groups" json:"Groups,omitempty"`
	SuperGroups []*Peer `protobuf:"bytes,3,rep,name=SuperGroups,json=superGroups" json:"SuperGroups,omitempty"`
	Channels    []*Peer `protobuf:"bytes,4,rep,name=Channels,json=channels" json:"Channels,omitempty"`
}

func (m *GetGroupsReply) Reset()                    { *m = GetGroupsReply{} }
func (m *GetGroupsReply) String() string            { return proto.CompactTextString(m) }
func (*GetGroupsReply) ProtoMessage()               {}
func (*GetGroupsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

func (m *GetGroupsReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetGroupsReply) GetGroups() []*Peer {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *GetGroupsReply) GetSuperGroups() []*Peer {
	if m != nil {
		return m.SuperGroups
	}
	return nil
}

func (m *GetGroupsReply) GetChannels() []*Peer {
	if m != nil {
		return m.Channels
	}
	return nil
}

type LipBlockReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// 禁言时间
	BlockTime int64 `protobuf:"varint,2,opt,name=blockTime" json:"blockTime,omitempty"`
	GroupId   int64 `protobuf:"varint,3,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	BotId     int32 `protobuf:"varint,4,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
}

func (m *LipBlockReq) Reset()                    { *m = LipBlockReq{} }
func (m *LipBlockReq) String() string            { return proto.CompactTextString(m) }
func (*LipBlockReq) ProtoMessage()               {}
func (*LipBlockReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *LipBlockReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *LipBlockReq) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *LipBlockReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *LipBlockReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

type LipBlockReply struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *LipBlockReply) Reset()                    { *m = LipBlockReply{} }
func (m *LipBlockReply) String() string            { return proto.CompactTextString(m) }
func (*LipBlockReply) ProtoMessage()               {}
func (*LipBlockReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

func (m *LipBlockReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type KickNotBanReq struct {
	BotId    int32              `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	UserId   int32              `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChatId   int32              `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatType basetypes.ChatType `protobuf:"varint,4,opt,name=chat_type,json=chatType,enum=basetypes.ChatType" json:"chat_type,omitempty"`
}

func (m *KickNotBanReq) Reset()                    { *m = KickNotBanReq{} }
func (m *KickNotBanReq) String() string            { return proto.CompactTextString(m) }
func (*KickNotBanReq) ProtoMessage()               {}
func (*KickNotBanReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *KickNotBanReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *KickNotBanReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *KickNotBanReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *KickNotBanReq) GetChatType() basetypes.ChatType {
	if m != nil {
		return m.ChatType
	}
	return basetypes.ChatType_ChatTypeZero
}

type KickNotBanReply struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *KickNotBanReply) Reset()                    { *m = KickNotBanReply{} }
func (m *KickNotBanReply) String() string            { return proto.CompactTextString(m) }
func (*KickNotBanReply) ProtoMessage()               {}
func (*KickNotBanReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

func (m *KickNotBanReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type GetAdminGroupsReq struct {
	BotId  int32 `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetAdminGroupsReq) Reset()                    { *m = GetAdminGroupsReq{} }
func (m *GetAdminGroupsReq) String() string            { return proto.CompactTextString(m) }
func (*GetAdminGroupsReq) ProtoMessage()               {}
func (*GetAdminGroupsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

func (m *GetAdminGroupsReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *GetAdminGroupsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetAdminGroupsReply struct {
	ErrorCode   int32   `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Groups      []*Peer `protobuf:"bytes,2,rep,name=Groups,json=groups" json:"Groups,omitempty"`
	SuperGroups []*Peer `protobuf:"bytes,3,rep,name=SuperGroups,json=superGroups" json:"SuperGroups,omitempty"`
	Channels    []*Peer `protobuf:"bytes,4,rep,name=Channels,json=channels" json:"Channels,omitempty"`
}

func (m *GetAdminGroupsReply) Reset()                    { *m = GetAdminGroupsReply{} }
func (m *GetAdminGroupsReply) String() string            { return proto.CompactTextString(m) }
func (*GetAdminGroupsReply) ProtoMessage()               {}
func (*GetAdminGroupsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

func (m *GetAdminGroupsReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAdminGroupsReply) GetGroups() []*Peer {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *GetAdminGroupsReply) GetSuperGroups() []*Peer {
	if m != nil {
		return m.SuperGroups
	}
	return nil
}

func (m *GetAdminGroupsReply) GetChannels() []*Peer {
	if m != nil {
		return m.Channels
	}
	return nil
}

type SetJoinGroupsReq struct {
	BotId  int32 `protobuf:"varint,1,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	Enable bool  `protobuf:"varint,2,opt,name=enable" json:"enable,omitempty"`
}

func (m *SetJoinGroupsReq) Reset()                    { *m = SetJoinGroupsReq{} }
func (m *SetJoinGroupsReq) String() string            { return proto.CompactTextString(m) }
func (*SetJoinGroupsReq) ProtoMessage()               {}
func (*SetJoinGroupsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

func (m *SetJoinGroupsReq) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *SetJoinGroupsReq) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type SetJoinGroupsReply struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *SetJoinGroupsReply) Reset()                    { *m = SetJoinGroupsReply{} }
func (m *SetJoinGroupsReply) String() string            { return proto.CompactTextString(m) }
func (*SetJoinGroupsReply) ProtoMessage()               {}
func (*SetJoinGroupsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

func (m *SetJoinGroupsReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func init() {
	proto.RegisterType((*GetBotListMineReq)(nil), "apiservice.GetBotListMineReq")
	proto.RegisterType((*GetBotListReq)(nil), "apiservice.GetBotListReq")
	proto.RegisterType((*BotInfo)(nil), "apiservice.BotInfo")
	proto.RegisterType((*GetBotListResult)(nil), "apiservice.GetBotListResult")
	proto.RegisterType((*GetBotPlazaInfoByIdReq)(nil), "apiservice.GetBotPlazaInfoByIdReq")
	proto.RegisterType((*GetBotPlazaInfoByIdReply)(nil), "apiservice.GetBotPlazaInfoByIdReply")
	proto.RegisterType((*GetBotPlazaInfoReq)(nil), "apiservice.GetBotPlazaInfoReq")
	proto.RegisterType((*BotPlazaInfo)(nil), "apiservice.BotPlazaInfo")
	proto.RegisterType((*GetBotPlazaInfoReply)(nil), "apiservice.GetBotPlazaInfoReply")
	proto.RegisterType((*GetBotDetailReq)(nil), "apiservice.GetBotDetailReq")
	proto.RegisterType((*BotDetail)(nil), "apiservice.BotDetail")
	proto.RegisterType((*GetBotDetailResult)(nil), "apiservice.GetBotDetailResult")
	proto.RegisterType((*BotLikeReq)(nil), "apiservice.BotLikeReq")
	proto.RegisterType((*BotLikeResult)(nil), "apiservice.BotLikeResult")
	proto.RegisterType((*MusicSaveReq)(nil), "apiservice.MusicSaveReq")
	proto.RegisterType((*MusicSaveRsp)(nil), "apiservice.MusicSaveRsp")
	proto.RegisterType((*GetMeRequest)(nil), "apiservice.GetMeRequest")
	proto.RegisterType((*GetMeReply)(nil), "apiservice.GetMeReply")
	proto.RegisterType((*GetUpdatesRequest)(nil), "apiservice.GetUpdatesRequest")
	proto.RegisterType((*GetUpdatesReply)(nil), "apiservice.GetUpdatesReply")
	proto.RegisterType((*SendTextMessageRequest)(nil), "apiservice.SendTextMessageRequest")
	proto.RegisterType((*SendTextMessageReply)(nil), "apiservice.SendTextMessageReply")
	proto.RegisterType((*SendLocationRequest)(nil), "apiservice.SendLocationRequest")
	proto.RegisterType((*SendLocationReply)(nil), "apiservice.SendLocationReply")
	proto.RegisterType((*SendVenueRequest)(nil), "apiservice.SendVenueRequest")
	proto.RegisterType((*SendVenueReply)(nil), "apiservice.SendVenueReply")
	proto.RegisterType((*SendPhotoRequest)(nil), "apiservice.SendPhotoRequest")
	proto.RegisterType((*SendPhotoReply)(nil), "apiservice.SendPhotoReply")
	proto.RegisterType((*SendDocumentRequest)(nil), "apiservice.SendDocumentRequest")
	proto.RegisterType((*SendDocumentReply)(nil), "apiservice.SendDocumentReply")
	proto.RegisterType((*ForwardMessageRequest)(nil), "apiservice.ForwardMessageRequest")
	proto.RegisterType((*ForwardMessageReply)(nil), "apiservice.ForwardMessageReply")
	proto.RegisterType((*AnswerCallbackQueryRequest)(nil), "apiservice.AnswerCallbackQueryRequest")
	proto.RegisterType((*AnswerCallbackQueryReply)(nil), "apiservice.AnswerCallbackQueryReply")
	proto.RegisterType((*EditMessageTextRequest)(nil), "apiservice.EditMessageTextRequest")
	proto.RegisterType((*EditMessageTextReply)(nil), "apiservice.EditMessageTextReply")
	proto.RegisterType((*EditMessageCaptionRequest)(nil), "apiservice.EditMessageCaptionRequest")
	proto.RegisterType((*EditMessageCaptionReply)(nil), "apiservice.EditMessageCaptionReply")
	proto.RegisterType((*DeleteMessageRequest)(nil), "apiservice.DeleteMessageRequest")
	proto.RegisterType((*DeleteMessageReply)(nil), "apiservice.DeleteMessageReply")
	proto.RegisterType((*SetWebhookRequest)(nil), "apiservice.SetWebhookRequest")
	proto.RegisterType((*SetWebhookReply)(nil), "apiservice.SetWebhookReply")
	proto.RegisterType((*DelWebhookRequest)(nil), "apiservice.DelWebhookRequest")
	proto.RegisterType((*DelWebhookReply)(nil), "apiservice.DelWebhookReply")
	proto.RegisterType((*SendPhoneMessageRequest)(nil), "apiservice.SendPhoneMessageRequest")
	proto.RegisterType((*MusicQueryRequest)(nil), "apiservice.MusicQueryRequest")
	proto.RegisterType((*MusicQueryReply)(nil), "apiservice.MusicQueryReply")
	proto.RegisterType((*MusicDataInfo)(nil), "apiservice.MusicDataInfo")
	proto.RegisterType((*GetMusicFileInfoReq)(nil), "apiservice.GetMusicFileInfoReq")
	proto.RegisterType((*GetMusicFileInfoReply)(nil), "apiservice.GetMusicFileInfoReply")
	proto.RegisterType((*SendGameReq)(nil), "apiservice.sendGameReq")
	proto.RegisterType((*SendGameReply)(nil), "apiservice.sendGameReply")
	proto.RegisterType((*SetGameScoreReq)(nil), "apiservice.SetGameScoreReq")
	proto.RegisterType((*SetGameScoreReply)(nil), "apiservice.SetGameScoreReply")
	proto.RegisterType((*AnswerInlineQueryRequest)(nil), "apiservice.answerInlineQueryRequest")
	proto.RegisterType((*ReplyBotInlineCall)(nil), "apiservice.ReplyBotInlineCall")
	proto.RegisterType((*GetGameHighScoresReq)(nil), "apiservice.GetGameHighScoresReq")
	proto.RegisterType((*GameHighScore)(nil), "apiservice.GameHighScore")
	proto.RegisterType((*GetGameHighScoresReply)(nil), "apiservice.GetGameHighScoresReply")
	proto.RegisterType((*KickChatMemberRequest)(nil), "apiservice.KickChatMemberRequest")
	proto.RegisterType((*KickChatMemberReply)(nil), "apiservice.KickChatMemberReply")
	proto.RegisterType((*GroupInactiveUser)(nil), "apiservice.GroupInactiveUser")
	proto.RegisterType((*GetGroupInactiveUsersReq)(nil), "apiservice.GetGroupInactiveUsersReq")
	proto.RegisterType((*GetGroupInactiveUsersResult)(nil), "apiservice.GetGroupInactiveUsersResult")
	proto.RegisterType((*DeleteChannelHistoryMessageReq)(nil), "apiservice.DeleteChannelHistoryMessageReq")
	proto.RegisterType((*DeleteChannelHistoryMessageReply)(nil), "apiservice.DeleteChannelHistoryMessageReply")
	proto.RegisterType((*LeaveChatReq)(nil), "apiservice.LeaveChatReq")
	proto.RegisterType((*LeaveChatReply)(nil), "apiservice.LeaveChatReply")
	proto.RegisterType((*GetChatReq)(nil), "apiservice.GetChatReq")
	proto.RegisterType((*GetChatReply)(nil), "apiservice.GetChatReply")
	proto.RegisterType((*GetChatMembersCountReq)(nil), "apiservice.GetChatMembersCountReq")
	proto.RegisterType((*GetChatMembersCountReply)(nil), "apiservice.GetChatMembersCountReply")
	proto.RegisterType((*GetChatAdministratorsReq)(nil), "apiservice.GetChatAdministratorsReq")
	proto.RegisterType((*GetChatAdministratorsReply)(nil), "apiservice.GetChatAdministratorsReply")
	proto.RegisterType((*SetChatTitleReq)(nil), "apiservice.SetChatTitleReq")
	proto.RegisterType((*SetChatTitleReply)(nil), "apiservice.SetChatTitleReply")
	proto.RegisterType((*SetChatDescriptionReq)(nil), "apiservice.SetChatDescriptionReq")
	proto.RegisterType((*SetChatDescriptionReply)(nil), "apiservice.SetChatDescriptionReply")
	proto.RegisterType((*PinChatMessageReq)(nil), "apiservice.PinChatMessageReq")
	proto.RegisterType((*PinChatMessageReply)(nil), "apiservice.PinChatMessageReply")
	proto.RegisterType((*UnPinChatMessageReq)(nil), "apiservice.UnPinChatMessageReq")
	proto.RegisterType((*UnPinChatMessageReply)(nil), "apiservice.UnPinChatMessageReply")
	proto.RegisterType((*SendChatActionReq)(nil), "apiservice.SendChatActionReq")
	proto.RegisterType((*SendChatActionReply)(nil), "apiservice.SendChatActionReply")
	proto.RegisterType((*SendContactReq)(nil), "apiservice.SendContactReq")
	proto.RegisterType((*SendContactReply)(nil), "apiservice.SendContactReply")
	proto.RegisterType((*GetGroupsReq)(nil), "apiservice.GetGroupsReq")
	proto.RegisterType((*Peer)(nil), "apiservice.Peer")
	proto.RegisterType((*GetGroupsReply)(nil), "apiservice.GetGroupsReply")
	proto.RegisterType((*LipBlockReq)(nil), "apiservice.LipBlockReq")
	proto.RegisterType((*LipBlockReply)(nil), "apiservice.LipBlockReply")
	proto.RegisterType((*KickNotBanReq)(nil), "apiservice.KickNotBanReq")
	proto.RegisterType((*KickNotBanReply)(nil), "apiservice.KickNotBanReply")
	proto.RegisterType((*GetAdminGroupsReq)(nil), "apiservice.GetAdminGroupsReq")
	proto.RegisterType((*GetAdminGroupsReply)(nil), "apiservice.GetAdminGroupsReply")
	proto.RegisterType((*SetJoinGroupsReq)(nil), "apiservice.SetJoinGroupsReq")
	proto.RegisterType((*SetJoinGroupsReply)(nil), "apiservice.SetJoinGroupsReply")
	proto.RegisterEnum("apiservice.GetBotListResult_Errorcode", GetBotListResult_Errorcode_name, GetBotListResult_Errorcode_value)
	proto.RegisterEnum("apiservice.GetBotDetailResult_Errorcode", GetBotDetailResult_Errorcode_name, GetBotDetailResult_Errorcode_value)
	proto.RegisterEnum("apiservice.BotLikeResult_Errorcode", BotLikeResult_Errorcode_name, BotLikeResult_Errorcode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Bot service

type BotClient interface {
	// GetMe 获取自身信息
	GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeReply, error)
	// GetUpdates 获取更新数据
	GetUpdates(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (*GetUpdatesReply, error)
	// SendTextMessage 发送文本消息
	SendTextMessage(ctx context.Context, in *SendTextMessageRequest, opts ...grpc.CallOption) (*SendTextMessageReply, error)
	// SendLocation 发送地理位置
	SendLocation(ctx context.Context, in *SendLocationRequest, opts ...grpc.CallOption) (*SendLocationReply, error)
	// SendVenue 发送详细地址
	SendVenue(ctx context.Context, in *SendVenueRequest, opts ...grpc.CallOption) (*SendVenueReply, error)
	// SendPhoto 发送照片
	SendPhoto(ctx context.Context, in *SendPhotoRequest, opts ...grpc.CallOption) (*SendPhotoReply, error)
	// SendDocument 发送文档
	SendDocument(ctx context.Context, in *SendDocumentRequest, opts ...grpc.CallOption) (*SendDocumentReply, error)
	// ForwardMessage 转发消息
	ForwardMessage(ctx context.Context, in *ForwardMessageRequest, opts ...grpc.CallOption) (*ForwardMessageReply, error)
	// AnswerCallbackQuery 应答回调查询
	AnswerCallbackQuery(ctx context.Context, in *AnswerCallbackQueryRequest, opts ...grpc.CallOption) (*AnswerCallbackQueryReply, error)
	// EditMessageText 编辑消息文本
	EditMessageText(ctx context.Context, in *EditMessageTextRequest, opts ...grpc.CallOption) (*EditMessageTextReply, error)
	// EditMessageCaption 编辑消息标题
	EditMessageCaption(ctx context.Context, in *EditMessageCaptionRequest, opts ...grpc.CallOption) (*EditMessageCaptionReply, error)
	// DeleteMessage 删除消息
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageReply, error)
	// SetWebhook 设置webhook
	SetWebhook(ctx context.Context, in *SetWebhookRequest, opts ...grpc.CallOption) (*SetWebhookReply, error)
	// DeleteWebhook 删除webhook
	DeleteWebhook(ctx context.Context, in *DelWebhookRequest, opts ...grpc.CallOption) (*DelWebhookReply, error)
	// send message to phone
	SendPhoneMessage(ctx context.Context, in *SendPhoneMessageRequest, opts ...grpc.CallOption) (*SendTextMessageReply, error)
	// 音樂查詢
	QueryMusicInfo(ctx context.Context, in *MusicQueryRequest, opts ...grpc.CallOption) (*MusicQueryReply, error)
	// save uploaded music info to db
	SaveMusicInfo(ctx context.Context, in *MusicSaveReq, opts ...grpc.CallOption) (*MusicSaveRsp, error)
	// 根据查询ID查询音乐信息
	BaseQuertIdGetMusicFileInfo(ctx context.Context, in *GetMusicFileInfoReq, opts ...grpc.CallOption) (*GetMusicFileInfoReply, error)
	// 获取机器人列表
	GetBotList(ctx context.Context, in *GetBotListReq, opts ...grpc.CallOption) (*GetBotListResult, error)
	// 获取机器人详细信息
	GetBotDetail(ctx context.Context, in *GetBotDetailReq, opts ...grpc.CallOption) (*GetBotDetailResult, error)
	// 用户收藏机器人
	BotLike(ctx context.Context, in *BotLikeReq, opts ...grpc.CallOption) (*BotLikeResult, error)
	// 获取自建机器人列表
	GetBotListMine(ctx context.Context, in *GetBotListMineReq, opts ...grpc.CallOption) (*GetBotListResult, error)
	// 分享游戏
	SendGame(ctx context.Context, in *SendGameReq, opts ...grpc.CallOption) (*SendGameReply, error)
	// 设置游戏分数
	SetGameScore(ctx context.Context, in *SetGameScoreReq, opts ...grpc.CallOption) (*SetGameScoreReply, error)
	// getGameHighScores 获取用户当前分数排行
	GetGameHighScores(ctx context.Context, in *GetGameHighScoresReq, opts ...grpc.CallOption) (*GetGameHighScoresReply, error)
	// 内联查询回调
	AnswerInlineQuery(ctx context.Context, in *AnswerInlineQueryRequest, opts ...grpc.CallOption) (*ReplyBotInlineCall, error)
	// 机器人普通群 超级群 踢人接口
	KickChatMember(ctx context.Context, in *KickChatMemberRequest, opts ...grpc.CallOption) (*KickChatMemberReply, error)
	// 获取群中用户最后登陆时间
	GetGroupInactiveUsers(ctx context.Context, in *GetGroupInactiveUsersReq, opts ...grpc.CallOption) (*GetGroupInactiveUsersResult, error)
	// 删除超级群某个用户的历史消息
	DeleteChannelHistoryMessage(ctx context.Context, in *DeleteChannelHistoryMessageReq, opts ...grpc.CallOption) (*DeleteChannelHistoryMessageReply, error)
	// 机器人自动退出群组
	LeaveChat(ctx context.Context, in *LeaveChatReq, opts ...grpc.CallOption) (*LeaveChatReply, error)
	// 獲取群訊息
	GetChat(ctx context.Context, in *GetChatReq, opts ...grpc.CallOption) (*GetChatReply, error)
	// 獲取群成員數目
	GetChatMembersCount(ctx context.Context, in *GetChatMembersCountReq, opts ...grpc.CallOption) (*GetChatMembersCountReply, error)
	// 獲取群管理員
	GetChatAdministrators(ctx context.Context, in *GetChatAdministratorsReq, opts ...grpc.CallOption) (*GetChatAdministratorsReply, error)
	// 修改群名字
	SetChatTitle(ctx context.Context, in *SetChatTitleReq, opts ...grpc.CallOption) (*SetChatTitleReply, error)
	// 修改群简介
	SetChatDescription(ctx context.Context, in *SetChatDescriptionReq, opts ...grpc.CallOption) (*SetChatDescriptionReply, error)
	// 置顶群消息
	PinChatMessage(ctx context.Context, in *PinChatMessageReq, opts ...grpc.CallOption) (*PinChatMessageReply, error)
	// 取消置顶群消息
	UnPinChatMessage(ctx context.Context, in *UnPinChatMessageReq, opts ...grpc.CallOption) (*UnPinChatMessageReply, error)
	// 發送Action
	SendChatAction(ctx context.Context, in *SendChatActionReq, opts ...grpc.CallOption) (*SendChatActionReply, error)
	// 發送名片
	SendContact(ctx context.Context, in *SendContactReq, opts ...grpc.CallOption) (*SendContactReply, error)
	// 获取群组消息
	GetGroups(ctx context.Context, in *GetGroupsReq, opts ...grpc.CallOption) (*GetGroupsReply, error)
	// 获取用户是哪些群的管理员的群列表
	GetAdminGroups(ctx context.Context, in *GetAdminGroupsReq, opts ...grpc.CallOption) (*GetAdminGroupsReply, error)
	// 超级群禁言
	LipBlock(ctx context.Context, in *LipBlockReq, opts ...grpc.CallOption) (*LipBlockReply, error)
	// 超级群解除禁言
	LipUnBlock(ctx context.Context, in *LipBlockReq, opts ...grpc.CallOption) (*LipBlockReply, error)
	// 剔除超级群 可重新加入
	KickNotBan(ctx context.Context, in *KickNotBanReq, opts ...grpc.CallOption) (*KickNotBanReply, error)
	// 获取机器人广场信息
	GetBotPlazaInfo(ctx context.Context, in *GetBotPlazaInfoReq, opts ...grpc.CallOption) (*GetBotPlazaInfoReply, error)
	// 设置机器人是否能加入群组
	SetJoinGroups(ctx context.Context, in *SetJoinGroupsReq, opts ...grpc.CallOption) (*SetJoinGroupsReply, error)
	// 获取单个广场机器人信息
	GetBotPlazaInfoById(ctx context.Context, in *GetBotPlazaInfoByIdReq, opts ...grpc.CallOption) (*GetBotPlazaInfoByIdReply, error)
}

type botClient struct {
	cc *grpc.ClientConn
}

func NewBotClient(cc *grpc.ClientConn) BotClient {
	return &botClient{cc}
}

func (c *botClient) GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeReply, error) {
	out := new(GetMeReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/GetMe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetUpdates(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (*GetUpdatesReply, error) {
	out := new(GetUpdatesReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/GetUpdates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendTextMessage(ctx context.Context, in *SendTextMessageRequest, opts ...grpc.CallOption) (*SendTextMessageReply, error) {
	out := new(SendTextMessageReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/SendTextMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendLocation(ctx context.Context, in *SendLocationRequest, opts ...grpc.CallOption) (*SendLocationReply, error) {
	out := new(SendLocationReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/SendLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendVenue(ctx context.Context, in *SendVenueRequest, opts ...grpc.CallOption) (*SendVenueReply, error) {
	out := new(SendVenueReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/SendVenue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendPhoto(ctx context.Context, in *SendPhotoRequest, opts ...grpc.CallOption) (*SendPhotoReply, error) {
	out := new(SendPhotoReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/SendPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendDocument(ctx context.Context, in *SendDocumentRequest, opts ...grpc.CallOption) (*SendDocumentReply, error) {
	out := new(SendDocumentReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/SendDocument", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) ForwardMessage(ctx context.Context, in *ForwardMessageRequest, opts ...grpc.CallOption) (*ForwardMessageReply, error) {
	out := new(ForwardMessageReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/ForwardMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) AnswerCallbackQuery(ctx context.Context, in *AnswerCallbackQueryRequest, opts ...grpc.CallOption) (*AnswerCallbackQueryReply, error) {
	out := new(AnswerCallbackQueryReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/AnswerCallbackQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) EditMessageText(ctx context.Context, in *EditMessageTextRequest, opts ...grpc.CallOption) (*EditMessageTextReply, error) {
	out := new(EditMessageTextReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/EditMessageText", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) EditMessageCaption(ctx context.Context, in *EditMessageCaptionRequest, opts ...grpc.CallOption) (*EditMessageCaptionReply, error) {
	out := new(EditMessageCaptionReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/EditMessageCaption", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageReply, error) {
	out := new(DeleteMessageReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/DeleteMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SetWebhook(ctx context.Context, in *SetWebhookRequest, opts ...grpc.CallOption) (*SetWebhookReply, error) {
	out := new(SetWebhookReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/SetWebhook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) DeleteWebhook(ctx context.Context, in *DelWebhookRequest, opts ...grpc.CallOption) (*DelWebhookReply, error) {
	out := new(DelWebhookReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/DeleteWebhook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendPhoneMessage(ctx context.Context, in *SendPhoneMessageRequest, opts ...grpc.CallOption) (*SendTextMessageReply, error) {
	out := new(SendTextMessageReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/SendPhoneMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) QueryMusicInfo(ctx context.Context, in *MusicQueryRequest, opts ...grpc.CallOption) (*MusicQueryReply, error) {
	out := new(MusicQueryReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/QueryMusicInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SaveMusicInfo(ctx context.Context, in *MusicSaveReq, opts ...grpc.CallOption) (*MusicSaveRsp, error) {
	out := new(MusicSaveRsp)
	err := grpc.Invoke(ctx, "/apiservice.Bot/SaveMusicInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) BaseQuertIdGetMusicFileInfo(ctx context.Context, in *GetMusicFileInfoReq, opts ...grpc.CallOption) (*GetMusicFileInfoReply, error) {
	out := new(GetMusicFileInfoReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/BaseQuertIdGetMusicFileInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetBotList(ctx context.Context, in *GetBotListReq, opts ...grpc.CallOption) (*GetBotListResult, error) {
	out := new(GetBotListResult)
	err := grpc.Invoke(ctx, "/apiservice.Bot/GetBotList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetBotDetail(ctx context.Context, in *GetBotDetailReq, opts ...grpc.CallOption) (*GetBotDetailResult, error) {
	out := new(GetBotDetailResult)
	err := grpc.Invoke(ctx, "/apiservice.Bot/GetBotDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) BotLike(ctx context.Context, in *BotLikeReq, opts ...grpc.CallOption) (*BotLikeResult, error) {
	out := new(BotLikeResult)
	err := grpc.Invoke(ctx, "/apiservice.Bot/BotLike", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetBotListMine(ctx context.Context, in *GetBotListMineReq, opts ...grpc.CallOption) (*GetBotListResult, error) {
	out := new(GetBotListResult)
	err := grpc.Invoke(ctx, "/apiservice.Bot/GetBotListMine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendGame(ctx context.Context, in *SendGameReq, opts ...grpc.CallOption) (*SendGameReply, error) {
	out := new(SendGameReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/sendGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SetGameScore(ctx context.Context, in *SetGameScoreReq, opts ...grpc.CallOption) (*SetGameScoreReply, error) {
	out := new(SetGameScoreReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/SetGameScore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetGameHighScores(ctx context.Context, in *GetGameHighScoresReq, opts ...grpc.CallOption) (*GetGameHighScoresReply, error) {
	out := new(GetGameHighScoresReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/GetGameHighScores", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) AnswerInlineQuery(ctx context.Context, in *AnswerInlineQueryRequest, opts ...grpc.CallOption) (*ReplyBotInlineCall, error) {
	out := new(ReplyBotInlineCall)
	err := grpc.Invoke(ctx, "/apiservice.Bot/AnswerInlineQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) KickChatMember(ctx context.Context, in *KickChatMemberRequest, opts ...grpc.CallOption) (*KickChatMemberReply, error) {
	out := new(KickChatMemberReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/KickChatMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetGroupInactiveUsers(ctx context.Context, in *GetGroupInactiveUsersReq, opts ...grpc.CallOption) (*GetGroupInactiveUsersResult, error) {
	out := new(GetGroupInactiveUsersResult)
	err := grpc.Invoke(ctx, "/apiservice.Bot/GetGroupInactiveUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) DeleteChannelHistoryMessage(ctx context.Context, in *DeleteChannelHistoryMessageReq, opts ...grpc.CallOption) (*DeleteChannelHistoryMessageReply, error) {
	out := new(DeleteChannelHistoryMessageReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/DeleteChannelHistoryMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) LeaveChat(ctx context.Context, in *LeaveChatReq, opts ...grpc.CallOption) (*LeaveChatReply, error) {
	out := new(LeaveChatReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/LeaveChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetChat(ctx context.Context, in *GetChatReq, opts ...grpc.CallOption) (*GetChatReply, error) {
	out := new(GetChatReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/GetChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetChatMembersCount(ctx context.Context, in *GetChatMembersCountReq, opts ...grpc.CallOption) (*GetChatMembersCountReply, error) {
	out := new(GetChatMembersCountReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/GetChatMembersCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetChatAdministrators(ctx context.Context, in *GetChatAdministratorsReq, opts ...grpc.CallOption) (*GetChatAdministratorsReply, error) {
	out := new(GetChatAdministratorsReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/GetChatAdministrators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SetChatTitle(ctx context.Context, in *SetChatTitleReq, opts ...grpc.CallOption) (*SetChatTitleReply, error) {
	out := new(SetChatTitleReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/SetChatTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SetChatDescription(ctx context.Context, in *SetChatDescriptionReq, opts ...grpc.CallOption) (*SetChatDescriptionReply, error) {
	out := new(SetChatDescriptionReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/SetChatDescription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) PinChatMessage(ctx context.Context, in *PinChatMessageReq, opts ...grpc.CallOption) (*PinChatMessageReply, error) {
	out := new(PinChatMessageReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/PinChatMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) UnPinChatMessage(ctx context.Context, in *UnPinChatMessageReq, opts ...grpc.CallOption) (*UnPinChatMessageReply, error) {
	out := new(UnPinChatMessageReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/UnPinChatMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendChatAction(ctx context.Context, in *SendChatActionReq, opts ...grpc.CallOption) (*SendChatActionReply, error) {
	out := new(SendChatActionReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/SendChatAction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendContact(ctx context.Context, in *SendContactReq, opts ...grpc.CallOption) (*SendContactReply, error) {
	out := new(SendContactReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/SendContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetGroups(ctx context.Context, in *GetGroupsReq, opts ...grpc.CallOption) (*GetGroupsReply, error) {
	out := new(GetGroupsReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/GetGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetAdminGroups(ctx context.Context, in *GetAdminGroupsReq, opts ...grpc.CallOption) (*GetAdminGroupsReply, error) {
	out := new(GetAdminGroupsReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/GetAdminGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) LipBlock(ctx context.Context, in *LipBlockReq, opts ...grpc.CallOption) (*LipBlockReply, error) {
	out := new(LipBlockReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/LipBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) LipUnBlock(ctx context.Context, in *LipBlockReq, opts ...grpc.CallOption) (*LipBlockReply, error) {
	out := new(LipBlockReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/LipUnBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) KickNotBan(ctx context.Context, in *KickNotBanReq, opts ...grpc.CallOption) (*KickNotBanReply, error) {
	out := new(KickNotBanReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/KickNotBan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetBotPlazaInfo(ctx context.Context, in *GetBotPlazaInfoReq, opts ...grpc.CallOption) (*GetBotPlazaInfoReply, error) {
	out := new(GetBotPlazaInfoReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/GetBotPlazaInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SetJoinGroups(ctx context.Context, in *SetJoinGroupsReq, opts ...grpc.CallOption) (*SetJoinGroupsReply, error) {
	out := new(SetJoinGroupsReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/SetJoinGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetBotPlazaInfoById(ctx context.Context, in *GetBotPlazaInfoByIdReq, opts ...grpc.CallOption) (*GetBotPlazaInfoByIdReply, error) {
	out := new(GetBotPlazaInfoByIdReply)
	err := grpc.Invoke(ctx, "/apiservice.Bot/GetBotPlazaInfoById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bot service

type BotServer interface {
	// GetMe 获取自身信息
	GetMe(context.Context, *GetMeRequest) (*GetMeReply, error)
	// GetUpdates 获取更新数据
	GetUpdates(context.Context, *GetUpdatesRequest) (*GetUpdatesReply, error)
	// SendTextMessage 发送文本消息
	SendTextMessage(context.Context, *SendTextMessageRequest) (*SendTextMessageReply, error)
	// SendLocation 发送地理位置
	SendLocation(context.Context, *SendLocationRequest) (*SendLocationReply, error)
	// SendVenue 发送详细地址
	SendVenue(context.Context, *SendVenueRequest) (*SendVenueReply, error)
	// SendPhoto 发送照片
	SendPhoto(context.Context, *SendPhotoRequest) (*SendPhotoReply, error)
	// SendDocument 发送文档
	SendDocument(context.Context, *SendDocumentRequest) (*SendDocumentReply, error)
	// ForwardMessage 转发消息
	ForwardMessage(context.Context, *ForwardMessageRequest) (*ForwardMessageReply, error)
	// AnswerCallbackQuery 应答回调查询
	AnswerCallbackQuery(context.Context, *AnswerCallbackQueryRequest) (*AnswerCallbackQueryReply, error)
	// EditMessageText 编辑消息文本
	EditMessageText(context.Context, *EditMessageTextRequest) (*EditMessageTextReply, error)
	// EditMessageCaption 编辑消息标题
	EditMessageCaption(context.Context, *EditMessageCaptionRequest) (*EditMessageCaptionReply, error)
	// DeleteMessage 删除消息
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageReply, error)
	// SetWebhook 设置webhook
	SetWebhook(context.Context, *SetWebhookRequest) (*SetWebhookReply, error)
	// DeleteWebhook 删除webhook
	DeleteWebhook(context.Context, *DelWebhookRequest) (*DelWebhookReply, error)
	// send message to phone
	SendPhoneMessage(context.Context, *SendPhoneMessageRequest) (*SendTextMessageReply, error)
	// 音樂查詢
	QueryMusicInfo(context.Context, *MusicQueryRequest) (*MusicQueryReply, error)
	// save uploaded music info to db
	SaveMusicInfo(context.Context, *MusicSaveReq) (*MusicSaveRsp, error)
	// 根据查询ID查询音乐信息
	BaseQuertIdGetMusicFileInfo(context.Context, *GetMusicFileInfoReq) (*GetMusicFileInfoReply, error)
	// 获取机器人列表
	GetBotList(context.Context, *GetBotListReq) (*GetBotListResult, error)
	// 获取机器人详细信息
	GetBotDetail(context.Context, *GetBotDetailReq) (*GetBotDetailResult, error)
	// 用户收藏机器人
	BotLike(context.Context, *BotLikeReq) (*BotLikeResult, error)
	// 获取自建机器人列表
	GetBotListMine(context.Context, *GetBotListMineReq) (*GetBotListResult, error)
	// 分享游戏
	SendGame(context.Context, *SendGameReq) (*SendGameReply, error)
	// 设置游戏分数
	SetGameScore(context.Context, *SetGameScoreReq) (*SetGameScoreReply, error)
	// getGameHighScores 获取用户当前分数排行
	GetGameHighScores(context.Context, *GetGameHighScoresReq) (*GetGameHighScoresReply, error)
	// 内联查询回调
	AnswerInlineQuery(context.Context, *AnswerInlineQueryRequest) (*ReplyBotInlineCall, error)
	// 机器人普通群 超级群 踢人接口
	KickChatMember(context.Context, *KickChatMemberRequest) (*KickChatMemberReply, error)
	// 获取群中用户最后登陆时间
	GetGroupInactiveUsers(context.Context, *GetGroupInactiveUsersReq) (*GetGroupInactiveUsersResult, error)
	// 删除超级群某个用户的历史消息
	DeleteChannelHistoryMessage(context.Context, *DeleteChannelHistoryMessageReq) (*DeleteChannelHistoryMessageReply, error)
	// 机器人自动退出群组
	LeaveChat(context.Context, *LeaveChatReq) (*LeaveChatReply, error)
	// 獲取群訊息
	GetChat(context.Context, *GetChatReq) (*GetChatReply, error)
	// 獲取群成員數目
	GetChatMembersCount(context.Context, *GetChatMembersCountReq) (*GetChatMembersCountReply, error)
	// 獲取群管理員
	GetChatAdministrators(context.Context, *GetChatAdministratorsReq) (*GetChatAdministratorsReply, error)
	// 修改群名字
	SetChatTitle(context.Context, *SetChatTitleReq) (*SetChatTitleReply, error)
	// 修改群简介
	SetChatDescription(context.Context, *SetChatDescriptionReq) (*SetChatDescriptionReply, error)
	// 置顶群消息
	PinChatMessage(context.Context, *PinChatMessageReq) (*PinChatMessageReply, error)
	// 取消置顶群消息
	UnPinChatMessage(context.Context, *UnPinChatMessageReq) (*UnPinChatMessageReply, error)
	// 發送Action
	SendChatAction(context.Context, *SendChatActionReq) (*SendChatActionReply, error)
	// 發送名片
	SendContact(context.Context, *SendContactReq) (*SendContactReply, error)
	// 获取群组消息
	GetGroups(context.Context, *GetGroupsReq) (*GetGroupsReply, error)
	// 获取用户是哪些群的管理员的群列表
	GetAdminGroups(context.Context, *GetAdminGroupsReq) (*GetAdminGroupsReply, error)
	// 超级群禁言
	LipBlock(context.Context, *LipBlockReq) (*LipBlockReply, error)
	// 超级群解除禁言
	LipUnBlock(context.Context, *LipBlockReq) (*LipBlockReply, error)
	// 剔除超级群 可重新加入
	KickNotBan(context.Context, *KickNotBanReq) (*KickNotBanReply, error)
	// 获取机器人广场信息
	GetBotPlazaInfo(context.Context, *GetBotPlazaInfoReq) (*GetBotPlazaInfoReply, error)
	// 设置机器人是否能加入群组
	SetJoinGroups(context.Context, *SetJoinGroupsReq) (*SetJoinGroupsReply, error)
	// 获取单个广场机器人信息
	GetBotPlazaInfoById(context.Context, *GetBotPlazaInfoByIdReq) (*GetBotPlazaInfoByIdReply, error)
}

func RegisterBotServer(s *grpc.Server, srv BotServer) {
	s.RegisterService(&_Bot_serviceDesc, srv)
}

func _Bot_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetMe(ctx, req.(*GetMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetUpdates(ctx, req.(*GetUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendTextMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTextMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendTextMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendTextMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendTextMessage(ctx, req.(*SendTextMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendLocation(ctx, req.(*SendLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendVenue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendVenue(ctx, req.(*SendVenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendPhoto(ctx, req.(*SendPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendDocument(ctx, req.(*SendDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_ForwardMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).ForwardMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/ForwardMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).ForwardMessage(ctx, req.(*ForwardMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_AnswerCallbackQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerCallbackQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).AnswerCallbackQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/AnswerCallbackQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).AnswerCallbackQuery(ctx, req.(*AnswerCallbackQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_EditMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).EditMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/EditMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).EditMessageText(ctx, req.(*EditMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_EditMessageCaption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageCaptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).EditMessageCaption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/EditMessageCaption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).EditMessageCaption(ctx, req.(*EditMessageCaptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SetWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SetWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SetWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SetWebhook(ctx, req.(*SetWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/DeleteWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).DeleteWebhook(ctx, req.(*DelWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendPhoneMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPhoneMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendPhoneMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendPhoneMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendPhoneMessage(ctx, req.(*SendPhoneMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_QueryMusicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MusicQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).QueryMusicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/QueryMusicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).QueryMusicInfo(ctx, req.(*MusicQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SaveMusicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MusicSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SaveMusicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SaveMusicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SaveMusicInfo(ctx, req.(*MusicSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_BaseQuertIdGetMusicFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMusicFileInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).BaseQuertIdGetMusicFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/BaseQuertIdGetMusicFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).BaseQuertIdGetMusicFileInfo(ctx, req.(*GetMusicFileInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetBotList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetBotList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotList(ctx, req.(*GetBotListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetBotDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetBotDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotDetail(ctx, req.(*GetBotDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_BotLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).BotLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/BotLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).BotLike(ctx, req.(*BotLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetBotListMine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotListMineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotListMine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetBotListMine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotListMine(ctx, req.(*GetBotListMineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendGame(ctx, req.(*SendGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SetGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGameScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SetGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SetGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SetGameScore(ctx, req.(*SetGameScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetGameHighScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameHighScoresReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetGameHighScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetGameHighScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetGameHighScores(ctx, req.(*GetGameHighScoresReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_AnswerInlineQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerInlineQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).AnswerInlineQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/AnswerInlineQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).AnswerInlineQuery(ctx, req.(*AnswerInlineQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_KickChatMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickChatMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).KickChatMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/KickChatMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).KickChatMember(ctx, req.(*KickChatMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetGroupInactiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupInactiveUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetGroupInactiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetGroupInactiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetGroupInactiveUsers(ctx, req.(*GetGroupInactiveUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_DeleteChannelHistoryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelHistoryMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).DeleteChannelHistoryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/DeleteChannelHistoryMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).DeleteChannelHistoryMessage(ctx, req.(*DeleteChannelHistoryMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_LeaveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).LeaveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/LeaveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).LeaveChat(ctx, req.(*LeaveChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetChat(ctx, req.(*GetChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetChatMembersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatMembersCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetChatMembersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetChatMembersCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetChatMembersCount(ctx, req.(*GetChatMembersCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetChatAdministrators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatAdministratorsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetChatAdministrators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetChatAdministrators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetChatAdministrators(ctx, req.(*GetChatAdministratorsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SetChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChatTitleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SetChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SetChatTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SetChatTitle(ctx, req.(*SetChatTitleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SetChatDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChatDescriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SetChatDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SetChatDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SetChatDescription(ctx, req.(*SetChatDescriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_PinChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinChatMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).PinChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/PinChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).PinChatMessage(ctx, req.(*PinChatMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_UnPinChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnPinChatMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).UnPinChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/UnPinChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).UnPinChatMessage(ctx, req.(*UnPinChatMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendChatAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChatActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendChatAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendChatAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendChatAction(ctx, req.(*SendChatActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendContact(ctx, req.(*SendContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetGroups(ctx, req.(*GetGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetAdminGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetAdminGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetAdminGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetAdminGroups(ctx, req.(*GetAdminGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_LipBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LipBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).LipBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/LipBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).LipBlock(ctx, req.(*LipBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_LipUnBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LipBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).LipUnBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/LipUnBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).LipUnBlock(ctx, req.(*LipBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_KickNotBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickNotBanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).KickNotBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/KickNotBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).KickNotBan(ctx, req.(*KickNotBanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetBotPlazaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotPlazaInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotPlazaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetBotPlazaInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotPlazaInfo(ctx, req.(*GetBotPlazaInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SetJoinGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJoinGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SetJoinGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SetJoinGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SetJoinGroups(ctx, req.(*SetJoinGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetBotPlazaInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotPlazaInfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotPlazaInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetBotPlazaInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotPlazaInfoById(ctx, req.(*GetBotPlazaInfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiservice.Bot",
	HandlerType: (*BotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMe",
			Handler:    _Bot_GetMe_Handler,
		},
		{
			MethodName: "GetUpdates",
			Handler:    _Bot_GetUpdates_Handler,
		},
		{
			MethodName: "SendTextMessage",
			Handler:    _Bot_SendTextMessage_Handler,
		},
		{
			MethodName: "SendLocation",
			Handler:    _Bot_SendLocation_Handler,
		},
		{
			MethodName: "SendVenue",
			Handler:    _Bot_SendVenue_Handler,
		},
		{
			MethodName: "SendPhoto",
			Handler:    _Bot_SendPhoto_Handler,
		},
		{
			MethodName: "SendDocument",
			Handler:    _Bot_SendDocument_Handler,
		},
		{
			MethodName: "ForwardMessage",
			Handler:    _Bot_ForwardMessage_Handler,
		},
		{
			MethodName: "AnswerCallbackQuery",
			Handler:    _Bot_AnswerCallbackQuery_Handler,
		},
		{
			MethodName: "EditMessageText",
			Handler:    _Bot_EditMessageText_Handler,
		},
		{
			MethodName: "EditMessageCaption",
			Handler:    _Bot_EditMessageCaption_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _Bot_DeleteMessage_Handler,
		},
		{
			MethodName: "SetWebhook",
			Handler:    _Bot_SetWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _Bot_DeleteWebhook_Handler,
		},
		{
			MethodName: "SendPhoneMessage",
			Handler:    _Bot_SendPhoneMessage_Handler,
		},
		{
			MethodName: "QueryMusicInfo",
			Handler:    _Bot_QueryMusicInfo_Handler,
		},
		{
			MethodName: "SaveMusicInfo",
			Handler:    _Bot_SaveMusicInfo_Handler,
		},
		{
			MethodName: "BaseQuertIdGetMusicFileInfo",
			Handler:    _Bot_BaseQuertIdGetMusicFileInfo_Handler,
		},
		{
			MethodName: "GetBotList",
			Handler:    _Bot_GetBotList_Handler,
		},
		{
			MethodName: "GetBotDetail",
			Handler:    _Bot_GetBotDetail_Handler,
		},
		{
			MethodName: "BotLike",
			Handler:    _Bot_BotLike_Handler,
		},
		{
			MethodName: "GetBotListMine",
			Handler:    _Bot_GetBotListMine_Handler,
		},
		{
			MethodName: "sendGame",
			Handler:    _Bot_SendGame_Handler,
		},
		{
			MethodName: "SetGameScore",
			Handler:    _Bot_SetGameScore_Handler,
		},
		{
			MethodName: "GetGameHighScores",
			Handler:    _Bot_GetGameHighScores_Handler,
		},
		{
			MethodName: "AnswerInlineQuery",
			Handler:    _Bot_AnswerInlineQuery_Handler,
		},
		{
			MethodName: "KickChatMember",
			Handler:    _Bot_KickChatMember_Handler,
		},
		{
			MethodName: "GetGroupInactiveUsers",
			Handler:    _Bot_GetGroupInactiveUsers_Handler,
		},
		{
			MethodName: "DeleteChannelHistoryMessage",
			Handler:    _Bot_DeleteChannelHistoryMessage_Handler,
		},
		{
			MethodName: "LeaveChat",
			Handler:    _Bot_LeaveChat_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _Bot_GetChat_Handler,
		},
		{
			MethodName: "GetChatMembersCount",
			Handler:    _Bot_GetChatMembersCount_Handler,
		},
		{
			MethodName: "GetChatAdministrators",
			Handler:    _Bot_GetChatAdministrators_Handler,
		},
		{
			MethodName: "SetChatTitle",
			Handler:    _Bot_SetChatTitle_Handler,
		},
		{
			MethodName: "SetChatDescription",
			Handler:    _Bot_SetChatDescription_Handler,
		},
		{
			MethodName: "PinChatMessage",
			Handler:    _Bot_PinChatMessage_Handler,
		},
		{
			MethodName: "UnPinChatMessage",
			Handler:    _Bot_UnPinChatMessage_Handler,
		},
		{
			MethodName: "SendChatAction",
			Handler:    _Bot_SendChatAction_Handler,
		},
		{
			MethodName: "SendContact",
			Handler:    _Bot_SendContact_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _Bot_GetGroups_Handler,
		},
		{
			MethodName: "GetAdminGroups",
			Handler:    _Bot_GetAdminGroups_Handler,
		},
		{
			MethodName: "LipBlock",
			Handler:    _Bot_LipBlock_Handler,
		},
		{
			MethodName: "LipUnBlock",
			Handler:    _Bot_LipUnBlock_Handler,
		},
		{
			MethodName: "KickNotBan",
			Handler:    _Bot_KickNotBan_Handler,
		},
		{
			MethodName: "GetBotPlazaInfo",
			Handler:    _Bot_GetBotPlazaInfo_Handler,
		},
		{
			MethodName: "SetJoinGroups",
			Handler:    _Bot_SetJoinGroups_Handler,
		},
		{
			MethodName: "GetBotPlazaInfoById",
			Handler:    _Bot_GetBotPlazaInfoById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/im/iminterfaceprotobufs/botserver/apiservice/apiservice.proto",
}

func init() {
	proto.RegisterFile("gitlab.chatserver.im/im/iminterfaceprotobufs/botserver/apiservice/apiservice.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 4053 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x3c, 0x4d, 0x6f, 0x1b, 0x49,
	0x76, 0x6c, 0x89, 0xa4, 0xc8, 0x27, 0x52, 0x96, 0x4a, 0xb2, 0x4c, 0xd3, 0xf6, 0x58, 0x53, 0x9e,
	0x9d, 0x35, 0x16, 0x3b, 0xb6, 0xc7, 0x93, 0xdd, 0xcc, 0x26, 0x98, 0xc5, 0xe8, 0x63, 0x6c, 0x6b,
	0xd7, 0x92, 0xb5, 0x2d, 0x7b, 0x36, 0x5f, 0x08, 0xd3, 0xec, 0x2e, 0x8a, 0xbd, 0x22, 0xbb, 0xe9,
	0xee, 0xa2, 0x3c, 0x9a, 0x1f, 0x90, 0x20, 0x5f, 0x40, 0x16, 0x41, 0x0e, 0xc9, 0xe6, 0x9e, 0x1f,
	0x10, 0xe4, 0x94, 0x00, 0x49, 0x0e, 0x41, 0x6e, 0x39, 0x6c, 0x10, 0x20, 0x7f, 0x20, 0xb7, 0x20,
	0xb7, 0xdc, 0x72, 0x08, 0xea, 0x55, 0xf5, 0x47, 0x75, 0x37, 0xa9, 0xf6, 0x78, 0x46, 0x93, 0xec,
	0x49, 0x7c, 0x55, 0xaf, 0x5f, 0xbf, 0xaf, 0x7a, 0xf5, 0xea, 0xbd, 0x6a, 0xc1, 0xc1, 0x89, 0xcb,
	0x47, 0x56, 0xff, 0x9e, 0x3d, 0xb4, 0x78, 0xc8, 0x82, 0x33, 0x16, 0xdc, 0x73, 0xc7, 0xf7, 0xdd,
	0xf1, 0xfd, 0x89, 0xcf, 0x2d, 0xee, 0x4f, 0x02, 0x9f, 0xfb, 0xfd, 0xe9, 0x20, 0xbc, 0xdf, 0xf7,
	0xd5, 0xfc, 0x7d, 0x6b, 0xe2, 0x8a, 0x5f, 0xae, 0xcd, 0x52, 0x3f, 0xef, 0x21, 0x26, 0x81, 0x64,
	0xa4, 0xfb, 0xc3, 0xd7, 0x27, 0xdd, 0xb7, 0x42, 0xc6, 0xcf, 0x27, 0x2c, 0x4c, 0x7e, 0x49, 0xc2,
	0x34, 0x84, 0xb5, 0xc7, 0x8c, 0xef, 0xf8, 0xfc, 0xa9, 0x1b, 0xf2, 0x03, 0xd7, 0x63, 0x26, 0x7b,
	0x49, 0xae, 0xc1, 0xd2, 0x34, 0x64, 0x41, 0xcf, 0x75, 0x3a, 0xc6, 0x96, 0x71, 0xb7, 0x6d, 0xd6,
	0x05, 0xb8, 0xef, 0x10, 0x02, 0xd5, 0xa1, 0x15, 0x0e, 0x3b, 0x0b, 0x5b, 0xc6, 0xdd, 0xa6, 0x89,
	0xbf, 0xc9, 0x0d, 0x68, 0xfa, 0x83, 0x41, 0xc8, 0xb8, 0x40, 0x5f, 0x44, 0xf4, 0x86, 0x1c, 0xd8,
	0x77, 0xc8, 0x06, 0xd4, 0x46, 0xee, 0xd8, 0xe5, 0x9d, 0x2a, 0x4e, 0x48, 0x80, 0x4e, 0xa0, 0x9d,
	0xbc, 0x54, 0xbc, 0x30, 0xa2, 0x6b, 0xa4, 0xe8, 0x76, 0x60, 0xc9, 0x1f, 0x0c, 0x6c, 0xd7, 0x1a,
	0xe1, 0xeb, 0x1a, 0x66, 0x04, 0x7e, 0x91, 0x37, 0xfe, 0x91, 0x01, 0x4b, 0x3b, 0x3e, 0xdf, 0xf7,
	0x06, 0x3e, 0xb9, 0x0a, 0xf5, 0xbe, 0xcf, 0x13, 0xe1, 0x6a, 0x7d, 0x5f, 0x3c, 0xb8, 0x02, 0x0b,
	0xae, 0x83, 0xaf, 0x6a, 0x9b, 0x0b, 0x2e, 0xca, 0xea, 0x59, 0x63, 0x86, 0x2f, 0x68, 0x9a, 0xf8,
	0x5b, 0x8c, 0x09, 0xe5, 0x29, 0xda, 0xf8, 0x9b, 0x6c, 0xc1, 0xb2, 0xc3, 0x42, 0x3b, 0x70, 0x27,
	0xdc, 0xf5, 0xbd, 0x4e, 0x0d, 0xd1, 0xd3, 0x43, 0x64, 0x15, 0x16, 0x87, 0x3e, 0xef, 0xd4, 0xf1,
	0x21, 0xf1, 0x93, 0xfe, 0xdc, 0x80, 0xd5, 0xb4, 0x06, 0xc2, 0xe9, 0x88, 0x93, 0x8f, 0x61, 0x89,
	0x05, 0xc1, 0xae, 0xef, 0x30, 0x64, 0x6c, 0xe5, 0xe1, 0xbb, 0xf7, 0x52, 0x7e, 0x90, 0x45, 0xbf,
	0xf7, 0x49, 0x10, 0xf8, 0x81, 0xed, 0x3b, 0xcc, 0x8c, 0x1e, 0x2b, 0x34, 0xcf, 0xfb, 0xd0, 0xec,
	0xfb, 0x42, 0xee, 0xed, 0x20, 0xe8, 0x2c, 0x6e, 0x2d, 0xde, 0x5d, 0x7e, 0xb8, 0x9e, 0xa6, 0xab,
	0xb4, 0x62, 0x26, 0x58, 0xf4, 0x3b, 0xd0, 0x8c, 0x89, 0x93, 0x65, 0x58, 0x3a, 0x9e, 0xda, 0x36,
	0x0b, 0xc3, 0xd5, 0x0a, 0x69, 0x41, 0xe3, 0xd0, 0xe7, 0x9f, 0x7c, 0xe6, 0x86, 0x7c, 0xd5, 0x20,
	0x6d, 0x68, 0x1e, 0xfa, 0xfc, 0xc0, 0x77, 0xdc, 0xc1, 0xf9, 0xea, 0x22, 0xdd, 0x83, 0x4d, 0xc9,
	0xe4, 0xd1, 0xc8, 0xfa, 0xdc, 0x12, 0xc4, 0x76, 0xce, 0xf7, 0x1d, 0x61, 0x5e, 0xa9, 0x5a, 0x23,
	0x56, 0x6d, 0x17, 0x1a, 0x23, 0xcb, 0x3b, 0x99, 0x5a, 0x27, 0x4c, 0xf1, 0x1a, 0xc3, 0xf4, 0x1c,
	0x3a, 0x85, 0x54, 0x26, 0xa3, 0x73, 0x72, 0x0b, 0x80, 0x09, 0xc6, 0x7a, 0x76, 0xa4, 0xa4, 0xb6,
	0xd9, 0xc4, 0x11, 0x14, 0xff, 0xfb, 0xb0, 0x22, 0x0c, 0x3b, 0x11, 0x0f, 0xf6, 0x5c, 0x6f, 0xe0,
	0x23, 0xf1, 0xe5, 0x87, 0x9d, 0x8c, 0xbc, 0x31, 0x65, 0xb3, 0xd5, 0x4f, 0x41, 0xf4, 0x01, 0x90,
	0xcc, 0xab, 0x05, 0xf3, 0x69, 0x66, 0x8d, 0x0c, 0xb3, 0x7f, 0x61, 0x40, 0x2b, 0x8d, 0x5f, 0x24,
	0xa9, 0x3d, 0xb2, 0xc2, 0xd0, 0x1d, 0x9c, 0x47, 0x92, 0x46, 0x70, 0xa1, 0x83, 0x65, 0x9c, 0xa9,
	0x9a, 0x77, 0xa6, 0x0d, 0xa8, 0x59, 0x7d, 0x7f, 0xca, 0x95, 0xa3, 0x49, 0x40, 0xd0, 0x12, 0x4c,
	0xa1, 0x8f, 0x35, 0x4d, 0xfc, 0x4d, 0xa7, 0xb0, 0x91, 0x13, 0xe7, 0x0b, 0x6a, 0x71, 0xf1, 0x35,
	0xb4, 0xf8, 0x36, 0x5c, 0x91, 0xaf, 0xdd, 0x63, 0xdc, 0x72, 0x47, 0x05, 0xf6, 0xa7, 0x7f, 0x5e,
	0x85, 0x66, 0x8c, 0x90, 0xd3, 0x59, 0x07, 0x96, 0xfa, 0x3e, 0x47, 0xd5, 0x48, 0x95, 0x45, 0x20,
	0xb9, 0x09, 0xcd, 0x81, 0x1b, 0x84, 0x3c, 0xa5, 0xb6, 0x64, 0x80, 0x6c, 0x42, 0xdd, 0x7f, 0xc5,
	0x02, 0xd7, 0x51, 0xcb, 0x53, 0x41, 0x18, 0x11, 0xd8, 0x19, 0x1b, 0xa1, 0xc6, 0x44, 0x44, 0x10,
	0x00, 0x5a, 0xc6, 0x1f, 0x8f, 0x2d, 0xcf, 0x09, 0x95, 0xd6, 0x62, 0x38, 0x6b, 0x85, 0xa5, 0x39,
	0x56, 0x68, 0xa4, 0xad, 0xf0, 0x36, 0xb4, 0x44, 0x50, 0xee, 0x0d, 0xdd, 0x90, 0xfb, 0xc1, 0x79,
	0xa7, 0x89, 0x71, 0x6b, 0x59, 0x8c, 0x3d, 0x91, 0x43, 0x42, 0x38, 0xcf, 0xc7, 0xc8, 0xdd, 0x01,
	0x19, 0xd5, 0x14, 0x28, 0x1e, 0x16, 0xda, 0xee, 0x9d, 0xb1, 0x20, 0x14, 0x6f, 0x5d, 0x46, 0x6e,
	0x97, 0xc5, 0xd8, 0xa7, 0x72, 0x88, 0xbc, 0x07, 0xc4, 0xf5, 0x46, 0xae, 0xc7, 0x84, 0x75, 0x6c,
	0x36, 0xf4, 0x47, 0x0e, 0x0b, 0x3a, 0x2d, 0x64, 0x61, 0x4d, 0xce, 0x1c, 0x25, 0x13, 0x82, 0x49,
	0xee, 0x9f, 0x32, 0xaf, 0xd3, 0x96, 0x4c, 0x22, 0x20, 0x38, 0x78, 0xc5, 0xfa, 0x43, 0xdf, 0x3f,
	0xed, 0xac, 0x48, 0xf5, 0x2a, 0x50, 0x88, 0x6d, 0xb3, 0x80, 0xbb, 0x03, 0xd7, 0xb6, 0x38, 0xeb,
	0x5c, 0xd9, 0x32, 0xee, 0xb6, 0xcc, 0xf4, 0x10, 0xb9, 0x0d, 0xcb, 0xae, 0x17, 0xb2, 0x80, 0x33,
	0xa7, 0x67, 0xf1, 0xce, 0xea, 0x96, 0x71, 0xb7, 0x6a, 0x42, 0x34, 0xb4, 0xcd, 0xe3, 0x00, 0xb9,
	0x96, 0x0a, 0x90, 0x5d, 0x10, 0xd1, 0xd9, 0xc5, 0x48, 0x4e, 0xe2, 0x68, 0x8d, 0x70, 0x14, 0x1a,
	0xd7, 0x93, 0xd0, 0xf8, 0xf7, 0x46, 0xb4, 0x0a, 0x23, 0xff, 0xc1, 0xe0, 0xb8, 0x93, 0x0d, 0x8e,
	0x77, 0xf3, 0xc1, 0x31, 0xfd, 0x40, 0x51, 0x78, 0x7c, 0x0f, 0xea, 0x0e, 0xa2, 0xa8, 0xb8, 0x70,
	0x35, 0xe3, 0xd1, 0xea, 0x79, 0x85, 0x44, 0xbf, 0x5b, 0x32, 0x0c, 0xae, 0x00, 0x3c, 0xe3, 0x43,
	0x16, 0x20, 0xf2, 0xea, 0x02, 0x7d, 0x00, 0x80, 0x91, 0xfa, 0x94, 0x15, 0xc5, 0x3e, 0xb1, 0x52,
	0xdd, 0x53, 0xa6, 0x36, 0x1a, 0xfc, 0x4d, 0x7f, 0xd7, 0x80, 0x76, 0xfc, 0x08, 0x8a, 0xfb, 0x51,
	0x56, 0xdc, 0x3b, 0x19, 0x5e, 0x13, 0xdc, 0x02, 0x49, 0xbf, 0x30, 0xeb, 0x8f, 0xa1, 0x75, 0x30,
	0x0d, 0x5d, 0xfb, 0xd8, 0x3a, 0x43, 0xe6, 0x7f, 0x19, 0x9a, 0x08, 0x8b, 0x85, 0xdd, 0x31, 0x30,
	0x0c, 0x5c, 0x4f, 0x33, 0x82, 0x93, 0x7b, 0x16, 0x97, 0x71, 0xa0, 0x39, 0x8e, 0x70, 0xe9, 0x47,
	0x69, 0x42, 0xe1, 0xe4, 0xa2, 0x98, 0x93, 0xec, 0xbd, 0x55, 0x0c, 0x10, 0x6f, 0x41, 0xeb, 0x31,
	0xe3, 0x07, 0x82, 0x87, 0x29, 0x0b, 0x79, 0x2e, 0x80, 0xfc, 0xa9, 0x01, 0xa0, 0x10, 0x4a, 0x44,
	0xb4, 0xec, 0xce, 0x7e, 0x0b, 0x00, 0xa3, 0x46, 0x2f, 0x17, 0x47, 0x0e, 0x45, 0x1c, 0xb9, 0x01,
	0xcd, 0x91, 0x15, 0xcd, 0x56, 0xa3, 0x88, 0xaf, 0x26, 0xbb, 0xd0, 0x10, 0xb9, 0x10, 0xce, 0xc9,
	0x08, 0x1c, 0xc3, 0xf4, 0x23, 0xcc, 0xa5, 0x5e, 0x4c, 0x1c, 0x8b, 0xb3, 0x70, 0x06, 0xeb, 0x62,
	0xf9, 0x71, 0x77, 0xcc, 0x44, 0xec, 0x90, 0xf2, 0x46, 0x20, 0x7d, 0x8a, 0x81, 0x33, 0x7e, 0xbc,
	0x84, 0x60, 0x5d, 0x68, 0x8c, 0x59, 0x18, 0x5a, 0x27, 0x2c, 0x44, 0x62, 0x2d, 0x33, 0x86, 0xe9,
	0x7f, 0x1b, 0xb0, 0x79, 0xcc, 0x3c, 0xe7, 0x39, 0xfb, 0x8c, 0x1f, 0xc8, 0xc1, 0x59, 0x2c, 0x3d,
	0x80, 0x26, 0x86, 0x2d, 0x5c, 0xb9, 0x0b, 0xe8, 0x6e, 0xeb, 0xf7, 0x92, 0x44, 0x71, 0x77, 0x68,
	0xf1, 0xe7, 0xe7, 0x13, 0x66, 0x36, 0x6c, 0xf5, 0x4b, 0x24, 0x88, 0xf8, 0x84, 0xca, 0xbf, 0x6a,
	0x66, 0x5d, 0x80, 0x32, 0x41, 0xe4, 0xec, 0x33, 0xae, 0xd4, 0x86, 0xbf, 0xc9, 0x7b, 0xb0, 0x1e,
	0x08, 0x69, 0x7a, 0xdc, 0xef, 0x29, 0xf6, 0xc4, 0x83, 0x35, 0x94, 0x7e, 0x15, 0xa7, 0x9e, 0xfb,
	0x8a, 0xc5, 0x7d, 0xdc, 0x32, 0xc7, 0x56, 0x70, 0xea, 0xf8, 0xaf, 0x3c, 0x0c, 0xcc, 0x0d, 0x33,
	0x86, 0x45, 0x8c, 0x94, 0xa4, 0xc4, 0xc8, 0x74, 0x82, 0x91, 0xb9, 0x65, 0x2e, 0xe3, 0xd8, 0x01,
	0x0e, 0xd1, 0xe7, 0xb0, 0x91, 0x13, 0xbb, 0x84, 0x2a, 0x6f, 0x01, 0xa4, 0x78, 0x93, 0x96, 0x69,
	0x8e, 0x23, 0xa6, 0xe8, 0xff, 0x18, 0xb0, 0x2e, 0xc8, 0x3e, 0xf5, 0x6d, 0x4b, 0x6c, 0x00, 0x97,
	0xa0, 0x4a, 0xcc, 0x3b, 0xb8, 0xcb, 0xa7, 0x8e, 0xf4, 0x42, 0xc3, 0x8c, 0x61, 0xb1, 0x11, 0x8e,
	0x7c, 0xef, 0x44, 0x4e, 0xd6, 0x70, 0x32, 0x19, 0x98, 0xa5, 0xf0, 0xfa, 0x0c, 0x85, 0x97, 0x50,
	0xea, 0x8f, 0x60, 0x4d, 0x97, 0xfe, 0xcd, 0x35, 0xfa, 0x2f, 0x0b, 0xb0, 0x2a, 0x68, 0x7e, 0xca,
	0xbc, 0x29, 0xfb, 0x3f, 0xad, 0x4e, 0xb1, 0x8d, 0xba, 0x7c, 0xc4, 0x54, 0x9a, 0x20, 0x01, 0xb1,
	0x8e, 0x2d, 0xc7, 0x09, 0x58, 0x18, 0xaa, 0xfc, 0x20, 0x02, 0xc9, 0x1d, 0x68, 0x0f, 0xfc, 0x69,
	0x10, 0xbe, 0x9c, 0x5a, 0x01, 0xca, 0x2e, 0x73, 0x84, 0x56, 0x32, 0xb8, 0xef, 0xcc, 0xb2, 0x51,
	0xb3, 0xa4, 0x8d, 0x20, 0x6f, 0xa3, 0x43, 0x58, 0x49, 0xe9, 0xf3, 0xcd, 0x0d, 0xf4, 0x6f, 0x86,
	0x34, 0xd0, 0xd1, 0xd0, 0xe7, 0xfe, 0x25, 0x18, 0x68, 0x03, 0x6a, 0x63, 0xe6, 0xb8, 0x16, 0x5a,
	0xa7, 0x65, 0x4a, 0xe0, 0x75, 0x83, 0x47, 0x56, 0x4f, 0xf5, 0xbc, 0x9e, 0x4e, 0xa4, 0x9e, 0x94,
	0x58, 0x6f, 0xac, 0x27, 0x21, 0xd0, 0xc0, 0x1d, 0xb1, 0x48, 0xa0, 0xaa, 0x59, 0x17, 0xe0, 0xbe,
	0x43, 0xff, 0x5d, 0xc5, 0x8c, 0x3d, 0xdf, 0x9e, 0x8e, 0x99, 0xc7, 0x7f, 0x81, 0x74, 0xf8, 0x13,
	0x19, 0x0f, 0x12, 0xc9, 0xbe, 0x42, 0x35, 0xfe, 0x97, 0x01, 0x57, 0x1f, 0xf9, 0xc1, 0x2b, 0x2b,
	0x70, 0x2e, 0x6f, 0x1f, 0xfb, 0x1e, 0xac, 0x0c, 0x02, 0x7f, 0xdc, 0x4b, 0xe8, 0x55, 0x67, 0xd3,
	0x6b, 0x09, 0xd4, 0x08, 0x22, 0x5b, 0xd0, 0x4a, 0x1e, 0x55, 0x6a, 0xae, 0x99, 0x10, 0xe1, 0xec,
	0x3b, 0x19, 0x4d, 0xd4, 0xb3, 0x0b, 0xef, 0x18, 0xd6, 0xb3, 0xf2, 0xbe, 0xf9, 0x6a, 0xfe, 0x3b,
	0x03, 0xba, 0xdb, 0x5e, 0xf8, 0x8a, 0x05, 0xbb, 0xd6, 0x68, 0xd4, 0xb7, 0xec, 0xd3, 0x1f, 0x4d,
	0x59, 0x70, 0x3e, 0x4b, 0x95, 0xdf, 0x02, 0x75, 0x9e, 0xe8, 0x65, 0x88, 0x36, 0xcd, 0x2b, 0x72,
	0x22, 0xf1, 0x97, 0x68, 0xcf, 0x5f, 0x4c, 0xed, 0xf9, 0xb7, 0x00, 0xc2, 0xa1, 0xff, 0xaa, 0x67,
	0x8d, 0x58, 0x20, 0xb3, 0x81, 0x86, 0xd9, 0x14, 0x23, 0xdb, 0x62, 0x40, 0xa4, 0xfd, 0xd3, 0x60,
	0xa4, 0x12, 0x28, 0xf1, 0x53, 0x3c, 0x60, 0x5b, 0xf6, 0x90, 0xf5, 0x44, 0x36, 0xa4, 0x4a, 0x25,
	0x4d, 0x1c, 0x79, 0xee, 0x8e, 0x19, 0xfd, 0x1e, 0x74, 0x0a, 0xb9, 0xbf, 0x58, 0x31, 0xf4, 0xa7,
	0x0b, 0xb0, 0xf9, 0x89, 0xe3, 0x46, 0xd9, 0x80, 0x48, 0x0c, 0x2e, 0xc1, 0x81, 0x74, 0x73, 0x54,
	0xb3, 0xde, 0x5e, 0xa8, 0xdf, 0xda, 0x7c, 0xfd, 0xd6, 0x53, 0xfa, 0x4d, 0x27, 0x49, 0x4b, 0x17,
	0x24, 0x49, 0x8d, 0xfc, 0xfa, 0xfd, 0x0e, 0x6c, 0xe4, 0x54, 0x52, 0x42, 0x95, 0x3f, 0x37, 0xe0,
	0x7a, 0xea, 0xb9, 0x5d, 0x6b, 0x72, 0x49, 0xb9, 0xd0, 0x05, 0xda, 0xec, 0xc0, 0x92, 0x6d, 0xa5,
	0xcb, 0x6f, 0x11, 0x58, 0x26, 0x96, 0x7d, 0x08, 0xd7, 0x8a, 0x64, 0x2a, 0xa1, 0x8e, 0x3f, 0x31,
	0x60, 0x63, 0x8f, 0x8d, 0x18, 0x67, 0x97, 0x17, 0x98, 0xe6, 0x6b, 0x82, 0x7e, 0x00, 0x24, 0xc3,
	0x51, 0x09, 0x39, 0x7e, 0x2c, 0xa2, 0x39, 0xff, 0xb1, 0xac, 0x02, 0xcc, 0x92, 0x41, 0x2d, 0xd9,
	0x85, 0x64, 0xc9, 0x66, 0xca, 0x05, 0x8b, 0xb9, 0x72, 0x01, 0x7d, 0x00, 0x57, 0xd2, 0x84, 0x4b,
	0xb0, 0x72, 0x07, 0xd6, 0xf6, 0xd8, 0x68, 0x3e, 0x2b, 0x82, 0x6c, 0x1a, 0xa9, 0x04, 0xd9, 0x7f,
	0x34, 0xe0, 0x9a, 0xda, 0xf4, 0xbd, 0x8b, 0x8c, 0xb5, 0x01, 0xb5, 0x89, 0x40, 0x53, 0xa2, 0x4a,
	0xa0, 0x30, 0xc8, 0xcd, 0xd8, 0x57, 0xab, 0x25, 0x0e, 0x36, 0xb5, 0x0b, 0xd6, 0x6c, 0x81, 0x9f,
	0xfe, 0xa1, 0x01, 0x6b, 0x78, 0xa6, 0xd6, 0x02, 0xb7, 0x70, 0x7d, 0xdf, 0x43, 0xd6, 0x0c, 0xe5,
	0xfa, 0x12, 0x4c, 0x17, 0xf1, 0x17, 0xa4, 0x0b, 0xa9, 0x22, 0xfe, 0x55, 0xa8, 0x9f, 0xb2, 0xf3,
	0xc8, 0xb5, 0x16, 0xcd, 0xda, 0x29, 0x3b, 0xdf, 0x77, 0xb0, 0x7c, 0x86, 0x45, 0x74, 0x14, 0xa0,
	0x66, 0x2a, 0x48, 0xe8, 0xc3, 0xf6, 0xa7, 0x1e, 0x57, 0x1b, 0x99, 0x04, 0xe8, 0x4f, 0xe0, 0x4a,
	0x9a, 0x99, 0x12, 0x1b, 0xd4, 0x87, 0x00, 0x58, 0x1f, 0x48, 0xd7, 0x14, 0xcb, 0x15, 0x13, 0xfe,
	0x63, 0x01, 0xda, 0xda, 0x24, 0xb9, 0x0e, 0x8d, 0x97, 0xe2, 0xc5, 0x51, 0x11, 0xbf, 0x69, 0x2e,
	0x21, 0xac, 0x16, 0x08, 0xbe, 0x26, 0x55, 0x40, 0x94, 0xb4, 0xf0, 0xfc, 0xfe, 0x4d, 0xb8, 0x22,
	0xa7, 0x27, 0x2c, 0x18, 0xf8, 0xc1, 0x98, 0x05, 0xca, 0xa4, 0x2b, 0x38, 0x7c, 0x14, 0x8d, 0x92,
	0xdb, 0xb0, 0x2c, 0x11, 0xad, 0x51, 0x7f, 0x3a, 0x56, 0x07, 0x5a, 0x49, 0x7a, 0x5b, 0x8c, 0x10,
	0x0a, 0x6d, 0x89, 0x10, 0xa5, 0x2d, 0x35, 0xd4, 0xa6, 0x7c, 0xea, 0x11, 0xe6, 0x2e, 0x22, 0xcc,
	0x2b, 0x22, 0x58, 0x7f, 0xe9, 0x61, 0x75, 0xbe, 0x8e, 0x78, 0x92, 0x8d, 0x6d, 0x1c, 0x7f, 0x62,
	0x85, 0xc3, 0x84, 0xf1, 0xd0, 0xfd, 0x9c, 0x61, 0x50, 0x5f, 0x54, 0x8c, 0x1f, 0xbb, 0x9f, 0x33,
	0xf2, 0x0d, 0x90, 0x1c, 0xf6, 0x9c, 0x69, 0x80, 0x87, 0x30, 0x8c, 0xeb, 0x35, 0x53, 0x32, 0xb1,
	0xa7, 0x06, 0x13, 0x2a, 0x81, 0x58, 0x93, 0x4d, 0x44, 0x91, 0x54, 0x4c, 0x8b, 0x63, 0x6d, 0x43,
	0x4e, 0x0f, 0x7d, 0x8e, 0x87, 0x88, 0x9a, 0xd9, 0xc0, 0x81, 0x27, 0x3e, 0xa7, 0xbf, 0x03, 0xeb,
	0x8f, 0x19, 0x3f, 0x88, 0xf9, 0x57, 0x05, 0xf0, 0x39, 0xca, 0x7e, 0x4d, 0x1f, 0xa3, 0x13, 0xb8,
	0x9a, 0x7f, 0xc3, 0x17, 0xf0, 0x1d, 0xa3, 0xb4, 0xef, 0xfc, 0xe5, 0x02, 0x2c, 0x87, 0xcc, 0x73,
	0x1e, 0x5b, 0xe3, 0xa8, 0xb5, 0x15, 0x05, 0x56, 0x43, 0x0b, 0xac, 0xaf, 0x1f, 0xa3, 0xdf, 0x85,
	0x2b, 0x27, 0xd6, 0x98, 0xf5, 0xc2, 0xa1, 0x1f, 0x68, 0xb5, 0xa4, 0xb6, 0x18, 0x3e, 0x16, 0xa3,
	0xe8, 0x72, 0x49, 0xbf, 0x49, 0x2e, 0x2c, 0xd5, 0x6f, 0x7a, 0x1f, 0x36, 0x1c, 0x37, 0xb4, 0xfa,
	0x23, 0xd6, 0xf3, 0x7c, 0x15, 0x32, 0xa3, 0x1d, 0xac, 0x61, 0xae, 0xab, 0xb9, 0xc3, 0xd4, 0xd4,
	0x57, 0x70, 0xb0, 0x3f, 0x80, 0x76, 0xa2, 0x9d, 0x37, 0xcf, 0x32, 0xff, 0x7a, 0x01, 0x23, 0xbe,
	0x20, 0x77, 0x6c, 0xfb, 0x01, 0x6a, 0x7c, 0x13, 0xd0, 0x29, 0x12, 0x85, 0x4b, 0x48, 0xc4, 0x95,
	0x50, 0xe0, 0x28, 0xcf, 0x91, 0x80, 0x18, 0x1d, 0xf8, 0x81, 0x2d, 0x55, 0xd9, 0x30, 0x25, 0x40,
	0x1e, 0x24, 0xba, 0x62, 0x8e, 0xcb, 0x23, 0xe1, 0x55, 0x62, 0x49, 0xd4, 0x5c, 0x6a, 0x1b, 0x4f,
	0xdb, 0xb9, 0x36, 0xdb, 0xce, 0xf5, 0x32, 0x76, 0xd6, 0x65, 0x5e, 0x52, 0x4b, 0x6a, 0x7e, 0x2a,
	0xd7, 0x28, 0x4e, 0xe5, 0x36, 0x40, 0x18, 0x5f, 0x9d, 0xf3, 0xa5, 0x27, 0xb8, 0x0e, 0xb5, 0x70,
	0xff, 0x4d, 0x29, 0x4d, 0x18, 0xa2, 0x03, 0x4b, 0xe1, 0xd4, 0xb6, 0x19, 0x93, 0x7a, 0x6b, 0x98,
	0x11, 0x28, 0x88, 0xa0, 0x41, 0xa2, 0x0d, 0x0a, 0x01, 0x72, 0x13, 0xa4, 0x99, 0xd0, 0x6e, 0x32,
	0x67, 0x48, 0x06, 0xe8, 0x5f, 0x2d, 0x40, 0xc7, 0xc2, 0x04, 0x7a, 0x1f, 0x59, 0xd2, 0xf6, 0x90,
	0xa8, 0x68, 0xaf, 0xba, 0xaf, 0x5c, 0x39, 0xb7, 0x92, 0x2a, 0x5e, 0xfb, 0xf2, 0x75, 0x6d, 0x37,
	0x21, 0x20, 0x53, 0xaf, 0x00, 0xcb, 0xd0, 0xa1, 0x4a, 0x00, 0x22, 0x30, 0x93, 0xd1, 0x4b, 0xd7,
	0x4f, 0x32, 0x7a, 0x6c, 0x25, 0x84, 0x22, 0x0a, 0x87, 0xbe, 0x67, 0x8d, 0x94, 0xd7, 0x83, 0x1b,
	0x1e, 0xa9, 0x11, 0x81, 0xe0, 0xb1, 0xcf, 0x78, 0x4f, 0x6d, 0x4a, 0x32, 0xfb, 0x05, 0x31, 0xf4,
	0x4c, 0x6e, 0x4c, 0xef, 0xc0, 0x4a, 0xf8, 0xca, 0xe5, 0xf6, 0xb0, 0x37, 0x19, 0xf7, 0x70, 0x07,
	0x94, 0x85, 0x98, 0x96, 0x1c, 0x3d, 0x1a, 0x8b, 0xbc, 0x96, 0xdc, 0x83, 0xf5, 0x04, 0x6b, 0x62,
	0x05, 0xd6, 0x98, 0x71, 0x16, 0x28, 0x03, 0xad, 0x45, 0xa8, 0x47, 0xd1, 0x04, 0xdd, 0x01, 0x82,
	0x06, 0xc0, 0xbe, 0xa8, 0x90, 0x54, 0x9c, 0x38, 0x84, 0x13, 0x4b, 0xb9, 0x50, 0x49, 0x2d, 0x53,
	0x41, 0xba, 0x2d, 0x6a, 0xca, 0x16, 0xf4, 0x9f, 0x0c, 0x6c, 0xbd, 0x09, 0x8b, 0x3e, 0x71, 0x4f,
	0x86, 0x68, 0xd5, 0xb0, 0xa0, 0xb1, 0x9e, 0xc4, 0xcb, 0x94, 0xbb, 0x2e, 0xcc, 0x76, 0xd7, 0xc5,
	0xd7, 0x77, 0xd7, 0x6a, 0x29, 0x77, 0x2d, 0x3e, 0x79, 0xd0, 0x01, 0xb4, 0x35, 0x19, 0x44, 0x0a,
	0x33, 0xf1, 0x43, 0x17, 0xe3, 0x94, 0x14, 0x20, 0x86, 0xc9, 0x1d, 0xa8, 0x0a, 0x61, 0x54, 0x74,
	0xbe, 0x92, 0x62, 0xf2, 0x45, 0xc8, 0x02, 0x13, 0x27, 0x93, 0x45, 0xbf, 0x98, 0x5a, 0xf4, 0xf4,
	0x37, 0xb0, 0x73, 0x9c, 0x55, 0x97, 0x58, 0x05, 0x1f, 0xc3, 0x0a, 0xc6, 0xd8, 0xa1, 0x7b, 0x32,
	0x94, 0x0f, 0x16, 0x74, 0x21, 0xb4, 0x07, 0x65, 0xf4, 0x7d, 0x12, 0xe1, 0xd3, 0xbf, 0x31, 0xe0,
	0xea, 0x0f, 0x5d, 0xfb, 0x54, 0x68, 0xea, 0x80, 0x8d, 0xfb, 0x2c, 0x88, 0xdc, 0xfe, 0x1a, 0x2c,
	0xe1, 0x41, 0x3d, 0x31, 0x86, 0x00, 0xf7, 0x1d, 0xb1, 0x49, 0xf6, 0x2d, 0xcf, 0x63, 0x4e, 0x62,
	0x8e, 0x86, 0x1c, 0xd0, 0x2d, 0xb5, 0x38, 0xdb, 0x52, 0xd5, 0x32, 0x96, 0xba, 0x01, 0xcd, 0x29,
	0x77, 0x47, 0x3d, 0x47, 0x6c, 0xd5, 0x32, 0x4a, 0x35, 0xc4, 0xc0, 0x9e, 0xc8, 0x9d, 0x7f, 0x09,
	0xd6, 0xb3, 0x6c, 0x17, 0xc7, 0xe7, 0x5a, 0x3a, 0xd1, 0x65, 0xb0, 0xf6, 0x38, 0xf0, 0xa7, 0x93,
	0x7d, 0xcf, 0xb2, 0xb9, 0x7b, 0xc6, 0x84, 0xea, 0x53, 0x19, 0x6e, 0x4d, 0xbb, 0xd9, 0xb0, 0x90,
	0xb9, 0xd9, 0xe0, 0x8e, 0x23, 0xbb, 0xe0, 0xef, 0xa8, 0x55, 0x71, 0xcc, 0x03, 0x95, 0xfe, 0x44,
	0x20, 0xfd, 0xa9, 0x81, 0x5d, 0xfa, 0xdc, 0xab, 0xc2, 0x2f, 0x79, 0x8b, 0x8d, 0x2f, 0x73, 0x28,
	0x77, 0x41, 0x20, 0x89, 0xa2, 0xd5, 0x74, 0x14, 0xfd, 0x3d, 0x03, 0x6e, 0xcc, 0xe0, 0x09, 0x97,
	0xea, 0x07, 0x50, 0x13, 0x2e, 0x18, 0x2a, 0x0f, 0xba, 0xa5, 0x79, 0x50, 0xf6, 0x21, 0x53, 0xe2,
	0x26, 0xc9, 0xef, 0x42, 0x2a, 0xf9, 0xcd, 0x18, 0x61, 0x31, 0x6b, 0x84, 0x9f, 0x19, 0xf0, 0x96,
	0x3c, 0x85, 0xed, 0x0e, 0x85, 0xdb, 0x8c, 0x54, 0xf3, 0x37, 0x39, 0x78, 0x64, 0xee, 0xa0, 0xc4,
	0x39, 0xc1, 0xcc, 0x7c, 0xea, 0xcb, 0xf3, 0x3a, 0xba, 0x0d, 0x5b, 0x73, 0x99, 0x2b, 0xe1, 0x65,
	0x13, 0x68, 0x3d, 0x65, 0xd6, 0x99, 0xa0, 0xc0, 0xe7, 0x4b, 0xf3, 0x25, 0x05, 0x35, 0x7a, 0x1f,
	0x56, 0x52, 0x6f, 0x2c, 0xc1, 0xa2, 0x87, 0x0d, 0xc2, 0xcb, 0x63, 0x70, 0x1b, 0x3b, 0x96, 0x65,
	0xd9, 0x13, 0xcb, 0x4d, 0x3c, 0xaa, 0xba, 0x76, 0xf8, 0x9b, 0x7e, 0x8e, 0x51, 0x30, 0x59, 0xf0,
	0xe1, 0xae, 0x70, 0xb6, 0xcb, 0x61, 0xff, 0x19, 0xae, 0xe7, 0xfc, 0xbb, 0x4b, 0x88, 0x52, 0xb8,
	0x44, 0xe8, 0x9f, 0x19, 0x31, 0xc5, 0x6d, 0x67, 0xec, 0x7a, 0x6e, 0xc8, 0x03, 0x8b, 0xfb, 0x32,
	0x42, 0x7c, 0xe5, 0xf2, 0xa4, 0x17, 0x52, 0x35, 0xbd, 0x90, 0xe8, 0x6f, 0x41, 0x77, 0x06, 0x5b,
	0x25, 0x44, 0xbd, 0x0d, 0x78, 0x97, 0xa3, 0x37, 0x46, 0x1d, 0x29, 0xe3, 0x81, 0x1d, 0x6b, 0x8d,
	0xfe, 0xbe, 0x81, 0xf9, 0x2f, 0x32, 0xe4, 0xf2, 0x11, 0xbb, 0x1c, 0x61, 0xe3, 0x06, 0x55, 0x35,
	0xd5, 0xa0, 0xa2, 0x0f, 0x31, 0xab, 0x4c, 0xb1, 0x52, 0x62, 0xd5, 0xfc, 0xcc, 0x80, 0xab, 0xea,
	0xa1, 0xbd, 0xe4, 0xb6, 0xcb, 0xe5, 0x48, 0x71, 0xe1, 0xd5, 0x27, 0xfa, 0x21, 0x5c, 0x2b, 0x62,
	0xae, 0x84, 0x5c, 0xff, 0x6c, 0xc0, 0xda, 0x91, 0xeb, 0x49, 0xff, 0x2e, 0x11, 0x84, 0x2f, 0x29,
	0x17, 0x7b, 0xfd, 0x23, 0xa0, 0x48, 0x0b, 0xb2, 0x82, 0x94, 0x90, 0xff, 0x15, 0xac, 0xbf, 0xf0,
	0xbe, 0x06, 0x05, 0xd0, 0xef, 0xc2, 0xd5, 0xfc, 0x8b, 0x4b, 0x30, 0xfc, 0xc7, 0x86, 0xec, 0x30,
	0xe1, 0x42, 0xb5, 0x2f, 0xcf, 0x09, 0x37, 0xa1, 0x6e, 0xd9, 0x29, 0xff, 0x53, 0x90, 0x50, 0x7b,
	0x96, 0x9d, 0x12, 0x52, 0xfc, 0xe7, 0x82, 0xec, 0x35, 0xee, 0xfa, 0x1e, 0xb7, 0xec, 0xcb, 0x09,
	0xe5, 0xe2, 0xd4, 0x8f, 0x25, 0xcb, 0x9e, 0x37, 0xc5, 0x28, 0xa5, 0x16, 0x12, 0x8e, 0x1d, 0xe2,
	0x50, 0xe6, 0x02, 0x4c, 0x6d, 0xee, 0x05, 0x98, 0x7a, 0xe6, 0x02, 0xcc, 0x06, 0xd4, 0xce, 0x6c,
	0x2b, 0x70, 0xd4, 0x61, 0x4b, 0x02, 0x33, 0x3d, 0xb9, 0xf1, 0xda, 0xc5, 0x8c, 0x37, 0xe8, 0x80,
	0xbf, 0x2f, 0x1b, 0xd6, 0xb1, 0xb6, 0x4b, 0x58, 0xe8, 0x11, 0x6e, 0xdb, 0x98, 0xfe, 0xcd, 0xdb,
	0x99, 0x6e, 0xc3, 0xf2, 0x84, 0xb1, 0xa0, 0x37, 0x70, 0x47, 0x9c, 0x45, 0x87, 0x3d, 0x10, 0x43,
	0x8f, 0x70, 0x84, 0xfe, 0x0a, 0x54, 0x8f, 0x18, 0x0b, 0x84, 0xff, 0x88, 0xbf, 0xfb, 0x7b, 0x51,
	0xea, 0x3b, 0x41, 0x48, 0x1c, 0x9c, 0xc4, 0xf8, 0x61, 0x92, 0x76, 0x37, 0x26, 0x0a, 0xa6, 0x7f,
	0x6b, 0xc0, 0x4a, 0x8a, 0x89, 0x12, 0xfb, 0xd0, 0x5d, 0xa8, 0x4b, 0x6c, 0x55, 0x46, 0x5d, 0x4d,
	0xe7, 0xb2, 0xe2, 0x3d, 0x66, 0xfd, 0x04, 0xe7, 0xc9, 0x43, 0x58, 0x3e, 0x9e, 0x4e, 0x58, 0xa0,
	0xd0, 0x17, 0x67, 0xa0, 0x2f, 0x87, 0x09, 0x12, 0xf9, 0x36, 0x34, 0x54, 0x6a, 0x18, 0x76, 0xaa,
	0x33, 0x1e, 0x10, 0xee, 0x86, 0x18, 0xf4, 0x0c, 0x96, 0x9f, 0xba, 0x93, 0x9d, 0x91, 0x6f, 0x9f,
	0xce, 0x3d, 0xe1, 0xde, 0x84, 0x66, 0x5f, 0x20, 0x89, 0xc3, 0x3f, 0xaa, 0x60, 0xd1, 0x4c, 0x06,
	0xc8, 0x75, 0x68, 0x20, 0xc7, 0x49, 0xc5, 0x70, 0x09, 0x61, 0x59, 0x4a, 0x2c, 0x28, 0x9f, 0xd1,
	0x7b, 0xd0, 0x4e, 0xde, 0x5b, 0xc2, 0xd2, 0x7f, 0x60, 0x40, 0x5b, 0x1c, 0xa8, 0x0e, 0x7d, 0xbe,
	0x63, 0x79, 0x5f, 0x73, 0x0e, 0xfe, 0x00, 0xae, 0xa4, 0x79, 0x29, 0xc1, 0xfe, 0x2e, 0xde, 0x2d,
	0xc3, 0x9c, 0xe5, 0x42, 0x6f, 0x9d, 0x25, 0x01, 0xfd, 0x07, 0x03, 0x2b, 0xbc, 0x1a, 0x95, 0xff,
	0x67, 0xee, 0xb6, 0x2d, 0xd6, 0x38, 0xff, 0x81, 0x5f, 0x42, 0x0d, 0x9b, 0x50, 0x67, 0x9e, 0x08,
	0x3b, 0xea, 0xfb, 0x01, 0x05, 0xd1, 0x0f, 0x80, 0x64, 0x48, 0x5c, 0xac, 0x83, 0x87, 0xff, 0xfa,
	0x16, 0x2c, 0xee, 0xf8, 0x9c, 0xfc, 0x2a, 0xd4, 0xf0, 0xe2, 0x21, 0xe9, 0x64, 0xee, 0x9f, 0xc6,
	0x97, 0x15, 0xbb, 0x9b, 0x05, 0x33, 0x93, 0xd1, 0x39, 0xad, 0x90, 0x1f, 0xe0, 0xa1, 0x44, 0xdd,
	0xf0, 0x23, 0xb7, 0x32, 0x78, 0xfa, 0xc5, 0xc1, 0xee, 0x8d, 0x59, 0xd3, 0x92, 0xd6, 0xaf, 0x8b,
	0x4c, 0x53, 0xbb, 0xe7, 0x46, 0x68, 0xfa, 0x89, 0xe2, 0xbb, 0x7f, 0xdd, 0xad, 0xb9, 0x38, 0x92,
	0xf4, 0x11, 0xb4, 0xd2, 0xb7, 0xbd, 0xc8, 0xed, 0xec, 0x33, 0x99, 0x5b, 0x70, 0xdd, 0x5b, 0xb3,
	0x11, 0x24, 0xc5, 0xc7, 0xd0, 0x8c, 0xef, 0x26, 0x91, 0x9b, 0x59, 0xec, 0xf4, 0x15, 0xb0, 0x6e,
	0x77, 0xc6, 0xac, 0x46, 0x08, 0x2f, 0xef, 0xe4, 0x09, 0xa5, 0xaf, 0x2a, 0xe5, 0x09, 0x25, 0x37,
	0x7e, 0x12, 0x19, 0xa3, 0x1b, 0x2c, 0x79, 0x19, 0x33, 0xb7, 0x76, 0xf2, 0x32, 0x6a, 0x97, 0x5f,
	0x68, 0x85, 0x7c, 0x0a, 0x2b, 0xfa, 0xb5, 0x0d, 0xf2, 0x76, 0xfa, 0x91, 0xc2, 0x2b, 0x2c, 0xdd,
	0xdb, 0xf3, 0x50, 0x24, 0x5d, 0x06, 0xeb, 0x05, 0x57, 0x1f, 0x88, 0xf6, 0x71, 0xc8, 0xec, 0x9b,
	0x1d, 0xdd, 0x77, 0x2e, 0xc4, 0x8b, 0xfd, 0x29, 0x73, 0x25, 0x40, 0xf7, 0xa7, 0xe2, 0x2b, 0x14,
	0xba, 0x3f, 0x15, 0xdd, 0x29, 0xa0, 0x15, 0xd2, 0x07, 0x92, 0xef, 0xb0, 0x93, 0x6f, 0xcc, 0x78,
	0x52, 0xbf, 0x55, 0xd0, 0xbd, 0x73, 0x11, 0x9a, 0x7c, 0xc7, 0x31, 0xb4, 0xb5, 0xc6, 0x37, 0xd1,
	0x18, 0x2b, 0xea, 0xd2, 0x77, 0xdf, 0x9a, 0x83, 0x11, 0xaf, 0xd7, 0xa4, 0x7f, 0x4d, 0x32, 0x1e,
	0x90, 0x69, 0x98, 0xeb, 0xeb, 0x35, 0xd3, 0xf6, 0xa6, 0x15, 0x72, 0x10, 0x31, 0x58, 0x48, 0x2e,
	0xd7, 0xf4, 0xd6, 0xc9, 0x65, 0xda, 0xdd, 0xb4, 0x42, 0x7e, 0x33, 0xbe, 0x9c, 0x17, 0x17, 0x6c,
	0xc9, 0x9d, 0x02, 0x8f, 0xcf, 0xb6, 0xbb, 0x4b, 0x05, 0x80, 0x43, 0x58, 0x41, 0xdf, 0x88, 0xef,
	0x7e, 0xeb, 0xcc, 0xe6, 0xba, 0xd0, 0x3a, 0xb3, 0x99, 0xbe, 0x30, 0xad, 0x90, 0x4f, 0xa0, 0x7d,
	0x6c, 0x9d, 0xb1, 0x84, 0x5c, 0x27, 0x87, 0xaf, 0x6e, 0x9c, 0x77, 0x67, 0xcc, 0x84, 0x13, 0x5a,
	0x21, 0x36, 0xdc, 0xd8, 0xb1, 0x42, 0x6c, 0x3d, 0xf0, 0x7d, 0x27, 0xdb, 0x48, 0xd4, 0x97, 0x70,
	0x41, 0x23, 0xb3, 0xfb, 0xf6, 0x7c, 0x84, 0x28, 0xc2, 0x40, 0xf2, 0xa9, 0x15, 0xb9, 0x3e, 0xeb,
	0x13, 0xac, 0x97, 0xdd, 0x9b, 0xf3, 0xbe, 0xce, 0x42, 0x83, 0xb7, 0xd2, 0x9f, 0x25, 0x90, 0x1b,
	0xb3, 0x3f, 0x58, 0x78, 0xa9, 0xfb, 0x62, 0xfe, 0x6b, 0x06, 0x5a, 0x21, 0xdf, 0xc7, 0x0f, 0xd8,
	0x9e, 0xba, 0xa7, 0x8c, 0x6c, 0x16, 0x7e, 0x0b, 0xf0, 0xb2, 0x7b, 0x7d, 0xe6, 0x37, 0x02, 0xb4,
	0x42, 0x9e, 0x61, 0x92, 0x99, 0xfa, 0xd0, 0x2f, 0xb7, 0xff, 0xe8, 0x1f, 0x01, 0x5e, 0x28, 0xdf,
	0xc7, 0xd0, 0x88, 0x5a, 0x87, 0xe4, 0x5a, 0x1a, 0x37, 0xd5, 0x6e, 0xd5, 0x59, 0xd2, 0x3a, 0x8d,
	0xb4, 0x42, 0x9e, 0x8a, 0x18, 0x9c, 0xf4, 0xbd, 0x48, 0x76, 0x05, 0xa5, 0xdb, 0x88, 0xd9, 0xf8,
	0x9b, 0x69, 0x97, 0xe1, 0x8a, 0x58, 0xcb, 0x35, 0x11, 0xf4, 0x28, 0x50, 0xd4, 0x92, 0xe9, 0xd2,
	0x0b, 0x30, 0x62, 0xe2, 0xdb, 0xd9, 0xf6, 0x19, 0xd1, 0x42, 0xeb, 0xac, 0xee, 0x9a, 0x6e, 0xda,
	0x7c, 0x6b, 0x49, 0xee, 0x1c, 0x7a, 0xa9, 0x5f, 0xdf, 0x39, 0x0a, 0xbb, 0x17, 0xfa, 0xce, 0x51,
	0xd0, 0x29, 0xa0, 0x15, 0x32, 0xc4, 0x6e, 0x7b, 0xbe, 0x20, 0xae, 0x33, 0x3e, 0xab, 0x8e, 0xdf,
	0xfd, 0x66, 0x09, 0x2c, 0xe5, 0x0b, 0xe7, 0x70, 0x63, 0x4e, 0x4d, 0x99, 0x7c, 0x2b, 0x1f, 0x69,
	0x67, 0x55, 0xc6, 0xbb, 0xdf, 0x2e, 0x8d, 0x2b, 0x85, 0xdc, 0x85, 0x66, 0x5c, 0x19, 0xd6, 0xe3,
	0x4a, 0xba, 0x44, 0xad, 0x67, 0x03, 0x7a, 0x29, 0x99, 0x56, 0xc8, 0x47, 0xb0, 0xa4, 0xaa, 0x82,
	0x24, 0x9b, 0xbd, 0x45, 0x04, 0x3a, 0x85, 0xe3, 0xf2, 0x71, 0x0b, 0xd3, 0xea, 0x6c, 0xf5, 0x94,
	0xd0, 0x82, 0x47, 0x32, 0xa5, 0xdd, 0xee, 0x3b, 0x17, 0xe2, 0xc8, 0x57, 0x9c, 0xa0, 0x2d, 0xf3,
	0x75, 0x4b, 0x52, 0x44, 0x20, 0x57, 0x71, 0xed, 0xbe, 0x5b, 0x02, 0x2b, 0xbd, 0x28, 0xe3, 0xb2,
	0x61, 0x6e, 0x51, 0xa6, 0x6b, 0x9b, 0xb9, 0x45, 0xa9, 0x57, 0x1b, 0x69, 0x85, 0xfc, 0x36, 0xe6,
	0xda, 0x99, 0x92, 0x9d, 0xee, 0xde, 0x85, 0xf5, 0xc6, 0xee, 0x9d, 0x8b, 0x50, 0x24, 0x7d, 0x13,
	0x56, 0xf4, 0xea, 0x92, 0x1e, 0xd5, 0x72, 0x25, 0x2f, 0x7d, 0xd9, 0x14, 0x14, 0xa6, 0x68, 0x85,
	0xfc, 0x1a, 0xac, 0x66, 0x6b, 0x56, 0xfa, 0xde, 0x52, 0x50, 0x4a, 0xd3, 0xf7, 0x96, 0xc2, 0x92,
	0x97, 0xe4, 0x56, 0xaf, 0x22, 0x91, 0x5c, 0x56, 0xa9, 0x15, 0xbc, 0xba, 0xb7, 0xe7, 0x4d, 0x4b,
	0x9a, 0xfb, 0xb0, 0x9c, 0x2a, 0x7a, 0x90, 0x5c, 0xd6, 0x9b, 0xd4, 0x9e, 0xba, 0x37, 0x67, 0xce,
	0xc5, 0x4b, 0x29, 0xae, 0x43, 0xe4, 0xce, 0x37, 0xf1, 0x71, 0x4b, 0x5f, 0x4a, 0x7a, 0xe1, 0x42,
	0xca, 0xa8, 0x1f, 0x31, 0x73, 0xfb, 0x8c, 0x7e, 0x88, 0xed, 0xde, 0x9e, 0x37, 0x2d, 0x69, 0x7e,
	0x0c, 0x8d, 0xe8, 0xac, 0xaf, 0x6f, 0x35, 0xa9, 0xca, 0x83, 0xbe, 0xd5, 0x68, 0xa5, 0x01, 0x5a,
	0x21, 0x3b, 0x00, 0x4f, 0xdd, 0xc9, 0x0b, 0xef, 0x4d, 0x68, 0x3c, 0x02, 0x48, 0x0e, 0xed, 0x7a,
	0x66, 0xa0, 0x15, 0x16, 0xf4, 0x6c, 0x28, 0x73, 0xce, 0xa7, 0x15, 0xf2, 0x22, 0xfa, 0x40, 0x36,
	0xf9, 0x6c, 0xb8, 0x60, 0xfb, 0x4f, 0x7f, 0x83, 0xdc, 0xdd, 0x9a, 0x3b, 0x2f, 0xc9, 0x3e, 0x83,
	0xb6, 0x76, 0xac, 0xcd, 0x1e, 0x8f, 0xf4, 0x43, 0xb3, 0xbe, 0x2d, 0xe5, 0xcf, 0xc3, 0x71, 0x54,
	0xcb, 0x7e, 0x89, 0x9d, 0x8b, 0x6a, 0x05, 0x1f, 0x7c, 0xe7, 0xa2, 0x5a, 0xe1, 0xe7, 0xdc, 0xb4,
	0xd2, 0xaf, 0xe3, 0x3f, 0x21, 0xf8, 0xe0, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xed, 0x09,
	0x1f, 0x2e, 0x41, 0x00, 0x00,
}
