// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: apiservice.proto

package apiservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BotClient is the client API for Bot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotClient interface {
	// GetMe 获取自身信息
	GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeReply, error)
	// GetUpdates 获取更新数据
	GetUpdates(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (*GetUpdatesReply, error)
	// SendTextMessage 发送文本消息
	SendTextMessage(ctx context.Context, in *SendTextMessageRequest, opts ...grpc.CallOption) (*SendTextMessageReply, error)
	// SendLocation 发送地理位置
	SendLocation(ctx context.Context, in *SendLocationRequest, opts ...grpc.CallOption) (*SendLocationReply, error)
	// SendVenue 发送详细地址
	SendVenue(ctx context.Context, in *SendVenueRequest, opts ...grpc.CallOption) (*SendVenueReply, error)
	// SendPhoto 发送照片
	SendPhoto(ctx context.Context, in *SendPhotoRequest, opts ...grpc.CallOption) (*SendPhotoReply, error)
	// SendDocument 发送文档
	SendDocument(ctx context.Context, in *SendDocumentRequest, opts ...grpc.CallOption) (*SendDocumentReply, error)
	// ForwardMessage 转发消息
	ForwardMessage(ctx context.Context, in *ForwardMessageRequest, opts ...grpc.CallOption) (*ForwardMessageReply, error)
	// AnswerCallbackQuery 应答回调查询
	AnswerCallbackQuery(ctx context.Context, in *AnswerCallbackQueryRequest, opts ...grpc.CallOption) (*AnswerCallbackQueryReply, error)
	// EditMessageText 编辑消息文本
	EditMessageText(ctx context.Context, in *EditMessageTextRequest, opts ...grpc.CallOption) (*EditMessageTextReply, error)
	// EditMessageCaption 编辑消息标题
	EditMessageCaption(ctx context.Context, in *EditMessageCaptionRequest, opts ...grpc.CallOption) (*EditMessageCaptionReply, error)
	// DeleteMessage 删除消息
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageReply, error)
	// SetWebhook 设置webhook
	SetWebhook(ctx context.Context, in *SetWebhookRequest, opts ...grpc.CallOption) (*SetWebhookReply, error)
	// DeleteWebhook 删除webhook
	DeleteWebhook(ctx context.Context, in *DelWebhookRequest, opts ...grpc.CallOption) (*DelWebhookReply, error)
	//send message to phone
	SendPhoneMessage(ctx context.Context, in *SendPhoneMessageRequest, opts ...grpc.CallOption) (*SendTextMessageReply, error)
	//音樂查詢
	QueryMusicInfo(ctx context.Context, in *MusicQueryRequest, opts ...grpc.CallOption) (*MusicQueryReply, error)
	//save uploaded music info to db
	SaveMusicInfo(ctx context.Context, in *MusicSaveReq, opts ...grpc.CallOption) (*MusicSaveRsp, error)
	//根据查询ID查询音乐信息
	BaseQuertIdGetMusicFileInfo(ctx context.Context, in *GetMusicFileInfoReq, opts ...grpc.CallOption) (*GetMusicFileInfoReply, error)
	//获取机器人列表
	GetBotList(ctx context.Context, in *GetBotListReq, opts ...grpc.CallOption) (*GetBotListResult, error)
	//获取机器人详细信息
	GetBotDetail(ctx context.Context, in *GetBotDetailReq, opts ...grpc.CallOption) (*GetBotDetailResult, error)
	//用户收藏机器人
	BotLike(ctx context.Context, in *BotLikeReq, opts ...grpc.CallOption) (*BotLikeResult, error)
	//获取自建机器人列表
	GetBotListMine(ctx context.Context, in *GetBotListMineReq, opts ...grpc.CallOption) (*GetBotListResult, error)
	// 分享游戏
	SendGame(ctx context.Context, in *SendGameReq, opts ...grpc.CallOption) (*SendGameReply, error)
	// 设置游戏分数
	SetGameScore(ctx context.Context, in *SetGameScoreReq, opts ...grpc.CallOption) (*SetGameScoreReply, error)
	// getGameHighScores 获取用户当前分数排行
	GetGameHighScores(ctx context.Context, in *GetGameHighScoresReq, opts ...grpc.CallOption) (*GetGameHighScoresReply, error)
	// 内联查询回调
	AnswerInlineQuery(ctx context.Context, in *AnswerInlineQueryRequest, opts ...grpc.CallOption) (*ReplyBotInlineCall, error)
	// 机器人普通群 超级群 踢人接口
	KickChatMember(ctx context.Context, in *KickChatMemberRequest, opts ...grpc.CallOption) (*KickChatMemberReply, error)
	// 获取群中用户最后登陆时间
	GetGroupInactiveUsers(ctx context.Context, in *GetGroupInactiveUsersReq, opts ...grpc.CallOption) (*GetGroupInactiveUsersResult, error)
	// 删除超级群某个用户的历史消息
	DeleteChannelHistoryMessage(ctx context.Context, in *DeleteChannelHistoryMessageReq, opts ...grpc.CallOption) (*DeleteChannelHistoryMessageReply, error)
	// 机器人自动退出群组
	LeaveChat(ctx context.Context, in *LeaveChatReq, opts ...grpc.CallOption) (*LeaveChatReply, error)
	// 獲取群訊息
	GetChat(ctx context.Context, in *GetChatReq, opts ...grpc.CallOption) (*GetChatReply, error)
	// 獲取群成員數目
	GetChatMembersCount(ctx context.Context, in *GetChatMembersCountReq, opts ...grpc.CallOption) (*GetChatMembersCountReply, error)
	// 獲取群管理員
	GetChatAdministrators(ctx context.Context, in *GetChatAdministratorsReq, opts ...grpc.CallOption) (*GetChatAdministratorsReply, error)
	// 修改群名字
	SetChatTitle(ctx context.Context, in *SetChatTitleReq, opts ...grpc.CallOption) (*SetChatTitleReply, error)
	// 修改群简介
	SetChatDescription(ctx context.Context, in *SetChatDescriptionReq, opts ...grpc.CallOption) (*SetChatDescriptionReply, error)
	// 置顶群消息
	PinChatMessage(ctx context.Context, in *PinChatMessageReq, opts ...grpc.CallOption) (*PinChatMessageReply, error)
	// 取消置顶群消息
	UnPinChatMessage(ctx context.Context, in *UnPinChatMessageReq, opts ...grpc.CallOption) (*UnPinChatMessageReply, error)
	// 發送Action
	SendChatAction(ctx context.Context, in *SendChatActionReq, opts ...grpc.CallOption) (*SendChatActionReply, error)
	// 發送名片
	SendContact(ctx context.Context, in *SendContactReq, opts ...grpc.CallOption) (*SendContactReply, error)
	// 获取群组消息
	GetGroups(ctx context.Context, in *GetGroupsReq, opts ...grpc.CallOption) (*GetGroupsReply, error)
	// 获取用户是哪些群的管理员的群列表
	GetAdminGroups(ctx context.Context, in *GetAdminGroupsReq, opts ...grpc.CallOption) (*GetAdminGroupsReply, error)
	// 超级群禁言
	LipBlock(ctx context.Context, in *LipBlockReq, opts ...grpc.CallOption) (*LipBlockReply, error)
	// 超级群解除禁言
	LipUnBlock(ctx context.Context, in *LipBlockReq, opts ...grpc.CallOption) (*LipBlockReply, error)
	// 剔除超级群 可重新加入
	KickNotBan(ctx context.Context, in *KickNotBanReq, opts ...grpc.CallOption) (*KickNotBanReply, error)
	// 获取机器人广场信息
	GetBotPlazaInfo(ctx context.Context, in *GetBotPlazaInfoReq, opts ...grpc.CallOption) (*GetBotPlazaInfoReply, error)
	// 设置机器人是否能加入群组
	SetJoinGroups(ctx context.Context, in *SetJoinGroupsReq, opts ...grpc.CallOption) (*SetJoinGroupsReply, error)
	// 获取单个广场机器人信息
	GetBotPlazaInfoById(ctx context.Context, in *GetBotPlazaInfoByIdReq, opts ...grpc.CallOption) (*GetBotPlazaInfoByIdReply, error)
}

type botClient struct {
	cc grpc.ClientConnInterface
}

func NewBotClient(cc grpc.ClientConnInterface) BotClient {
	return &botClient{cc}
}

func (c *botClient) GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeReply, error) {
	out := new(GetMeReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/GetMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetUpdates(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (*GetUpdatesReply, error) {
	out := new(GetUpdatesReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/GetUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendTextMessage(ctx context.Context, in *SendTextMessageRequest, opts ...grpc.CallOption) (*SendTextMessageReply, error) {
	out := new(SendTextMessageReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/SendTextMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendLocation(ctx context.Context, in *SendLocationRequest, opts ...grpc.CallOption) (*SendLocationReply, error) {
	out := new(SendLocationReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/SendLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendVenue(ctx context.Context, in *SendVenueRequest, opts ...grpc.CallOption) (*SendVenueReply, error) {
	out := new(SendVenueReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/SendVenue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendPhoto(ctx context.Context, in *SendPhotoRequest, opts ...grpc.CallOption) (*SendPhotoReply, error) {
	out := new(SendPhotoReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/SendPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendDocument(ctx context.Context, in *SendDocumentRequest, opts ...grpc.CallOption) (*SendDocumentReply, error) {
	out := new(SendDocumentReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/SendDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) ForwardMessage(ctx context.Context, in *ForwardMessageRequest, opts ...grpc.CallOption) (*ForwardMessageReply, error) {
	out := new(ForwardMessageReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/ForwardMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) AnswerCallbackQuery(ctx context.Context, in *AnswerCallbackQueryRequest, opts ...grpc.CallOption) (*AnswerCallbackQueryReply, error) {
	out := new(AnswerCallbackQueryReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/AnswerCallbackQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) EditMessageText(ctx context.Context, in *EditMessageTextRequest, opts ...grpc.CallOption) (*EditMessageTextReply, error) {
	out := new(EditMessageTextReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/EditMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) EditMessageCaption(ctx context.Context, in *EditMessageCaptionRequest, opts ...grpc.CallOption) (*EditMessageCaptionReply, error) {
	out := new(EditMessageCaptionReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/EditMessageCaption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageReply, error) {
	out := new(DeleteMessageReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SetWebhook(ctx context.Context, in *SetWebhookRequest, opts ...grpc.CallOption) (*SetWebhookReply, error) {
	out := new(SetWebhookReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/SetWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) DeleteWebhook(ctx context.Context, in *DelWebhookRequest, opts ...grpc.CallOption) (*DelWebhookReply, error) {
	out := new(DelWebhookReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/DeleteWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendPhoneMessage(ctx context.Context, in *SendPhoneMessageRequest, opts ...grpc.CallOption) (*SendTextMessageReply, error) {
	out := new(SendTextMessageReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/SendPhoneMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) QueryMusicInfo(ctx context.Context, in *MusicQueryRequest, opts ...grpc.CallOption) (*MusicQueryReply, error) {
	out := new(MusicQueryReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/QueryMusicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SaveMusicInfo(ctx context.Context, in *MusicSaveReq, opts ...grpc.CallOption) (*MusicSaveRsp, error) {
	out := new(MusicSaveRsp)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/SaveMusicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) BaseQuertIdGetMusicFileInfo(ctx context.Context, in *GetMusicFileInfoReq, opts ...grpc.CallOption) (*GetMusicFileInfoReply, error) {
	out := new(GetMusicFileInfoReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/BaseQuertIdGetMusicFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetBotList(ctx context.Context, in *GetBotListReq, opts ...grpc.CallOption) (*GetBotListResult, error) {
	out := new(GetBotListResult)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/GetBotList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetBotDetail(ctx context.Context, in *GetBotDetailReq, opts ...grpc.CallOption) (*GetBotDetailResult, error) {
	out := new(GetBotDetailResult)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/GetBotDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) BotLike(ctx context.Context, in *BotLikeReq, opts ...grpc.CallOption) (*BotLikeResult, error) {
	out := new(BotLikeResult)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/BotLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetBotListMine(ctx context.Context, in *GetBotListMineReq, opts ...grpc.CallOption) (*GetBotListResult, error) {
	out := new(GetBotListResult)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/GetBotListMine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendGame(ctx context.Context, in *SendGameReq, opts ...grpc.CallOption) (*SendGameReply, error) {
	out := new(SendGameReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/sendGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SetGameScore(ctx context.Context, in *SetGameScoreReq, opts ...grpc.CallOption) (*SetGameScoreReply, error) {
	out := new(SetGameScoreReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/SetGameScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetGameHighScores(ctx context.Context, in *GetGameHighScoresReq, opts ...grpc.CallOption) (*GetGameHighScoresReply, error) {
	out := new(GetGameHighScoresReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/GetGameHighScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) AnswerInlineQuery(ctx context.Context, in *AnswerInlineQueryRequest, opts ...grpc.CallOption) (*ReplyBotInlineCall, error) {
	out := new(ReplyBotInlineCall)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/AnswerInlineQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) KickChatMember(ctx context.Context, in *KickChatMemberRequest, opts ...grpc.CallOption) (*KickChatMemberReply, error) {
	out := new(KickChatMemberReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/KickChatMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetGroupInactiveUsers(ctx context.Context, in *GetGroupInactiveUsersReq, opts ...grpc.CallOption) (*GetGroupInactiveUsersResult, error) {
	out := new(GetGroupInactiveUsersResult)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/GetGroupInactiveUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) DeleteChannelHistoryMessage(ctx context.Context, in *DeleteChannelHistoryMessageReq, opts ...grpc.CallOption) (*DeleteChannelHistoryMessageReply, error) {
	out := new(DeleteChannelHistoryMessageReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/DeleteChannelHistoryMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) LeaveChat(ctx context.Context, in *LeaveChatReq, opts ...grpc.CallOption) (*LeaveChatReply, error) {
	out := new(LeaveChatReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/LeaveChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetChat(ctx context.Context, in *GetChatReq, opts ...grpc.CallOption) (*GetChatReply, error) {
	out := new(GetChatReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/GetChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetChatMembersCount(ctx context.Context, in *GetChatMembersCountReq, opts ...grpc.CallOption) (*GetChatMembersCountReply, error) {
	out := new(GetChatMembersCountReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/GetChatMembersCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetChatAdministrators(ctx context.Context, in *GetChatAdministratorsReq, opts ...grpc.CallOption) (*GetChatAdministratorsReply, error) {
	out := new(GetChatAdministratorsReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/GetChatAdministrators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SetChatTitle(ctx context.Context, in *SetChatTitleReq, opts ...grpc.CallOption) (*SetChatTitleReply, error) {
	out := new(SetChatTitleReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/SetChatTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SetChatDescription(ctx context.Context, in *SetChatDescriptionReq, opts ...grpc.CallOption) (*SetChatDescriptionReply, error) {
	out := new(SetChatDescriptionReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/SetChatDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) PinChatMessage(ctx context.Context, in *PinChatMessageReq, opts ...grpc.CallOption) (*PinChatMessageReply, error) {
	out := new(PinChatMessageReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/PinChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) UnPinChatMessage(ctx context.Context, in *UnPinChatMessageReq, opts ...grpc.CallOption) (*UnPinChatMessageReply, error) {
	out := new(UnPinChatMessageReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/UnPinChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendChatAction(ctx context.Context, in *SendChatActionReq, opts ...grpc.CallOption) (*SendChatActionReply, error) {
	out := new(SendChatActionReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/SendChatAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendContact(ctx context.Context, in *SendContactReq, opts ...grpc.CallOption) (*SendContactReply, error) {
	out := new(SendContactReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/SendContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetGroups(ctx context.Context, in *GetGroupsReq, opts ...grpc.CallOption) (*GetGroupsReply, error) {
	out := new(GetGroupsReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetAdminGroups(ctx context.Context, in *GetAdminGroupsReq, opts ...grpc.CallOption) (*GetAdminGroupsReply, error) {
	out := new(GetAdminGroupsReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/GetAdminGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) LipBlock(ctx context.Context, in *LipBlockReq, opts ...grpc.CallOption) (*LipBlockReply, error) {
	out := new(LipBlockReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/LipBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) LipUnBlock(ctx context.Context, in *LipBlockReq, opts ...grpc.CallOption) (*LipBlockReply, error) {
	out := new(LipBlockReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/LipUnBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) KickNotBan(ctx context.Context, in *KickNotBanReq, opts ...grpc.CallOption) (*KickNotBanReply, error) {
	out := new(KickNotBanReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/KickNotBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetBotPlazaInfo(ctx context.Context, in *GetBotPlazaInfoReq, opts ...grpc.CallOption) (*GetBotPlazaInfoReply, error) {
	out := new(GetBotPlazaInfoReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/GetBotPlazaInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SetJoinGroups(ctx context.Context, in *SetJoinGroupsReq, opts ...grpc.CallOption) (*SetJoinGroupsReply, error) {
	out := new(SetJoinGroupsReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/SetJoinGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetBotPlazaInfoById(ctx context.Context, in *GetBotPlazaInfoByIdReq, opts ...grpc.CallOption) (*GetBotPlazaInfoByIdReply, error) {
	out := new(GetBotPlazaInfoByIdReply)
	err := c.cc.Invoke(ctx, "/apiservice.Bot/GetBotPlazaInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotServer is the server API for Bot service.
// All implementations must embed UnimplementedBotServer
// for forward compatibility
type BotServer interface {
	// GetMe 获取自身信息
	GetMe(context.Context, *GetMeRequest) (*GetMeReply, error)
	// GetUpdates 获取更新数据
	GetUpdates(context.Context, *GetUpdatesRequest) (*GetUpdatesReply, error)
	// SendTextMessage 发送文本消息
	SendTextMessage(context.Context, *SendTextMessageRequest) (*SendTextMessageReply, error)
	// SendLocation 发送地理位置
	SendLocation(context.Context, *SendLocationRequest) (*SendLocationReply, error)
	// SendVenue 发送详细地址
	SendVenue(context.Context, *SendVenueRequest) (*SendVenueReply, error)
	// SendPhoto 发送照片
	SendPhoto(context.Context, *SendPhotoRequest) (*SendPhotoReply, error)
	// SendDocument 发送文档
	SendDocument(context.Context, *SendDocumentRequest) (*SendDocumentReply, error)
	// ForwardMessage 转发消息
	ForwardMessage(context.Context, *ForwardMessageRequest) (*ForwardMessageReply, error)
	// AnswerCallbackQuery 应答回调查询
	AnswerCallbackQuery(context.Context, *AnswerCallbackQueryRequest) (*AnswerCallbackQueryReply, error)
	// EditMessageText 编辑消息文本
	EditMessageText(context.Context, *EditMessageTextRequest) (*EditMessageTextReply, error)
	// EditMessageCaption 编辑消息标题
	EditMessageCaption(context.Context, *EditMessageCaptionRequest) (*EditMessageCaptionReply, error)
	// DeleteMessage 删除消息
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageReply, error)
	// SetWebhook 设置webhook
	SetWebhook(context.Context, *SetWebhookRequest) (*SetWebhookReply, error)
	// DeleteWebhook 删除webhook
	DeleteWebhook(context.Context, *DelWebhookRequest) (*DelWebhookReply, error)
	//send message to phone
	SendPhoneMessage(context.Context, *SendPhoneMessageRequest) (*SendTextMessageReply, error)
	//音樂查詢
	QueryMusicInfo(context.Context, *MusicQueryRequest) (*MusicQueryReply, error)
	//save uploaded music info to db
	SaveMusicInfo(context.Context, *MusicSaveReq) (*MusicSaveRsp, error)
	//根据查询ID查询音乐信息
	BaseQuertIdGetMusicFileInfo(context.Context, *GetMusicFileInfoReq) (*GetMusicFileInfoReply, error)
	//获取机器人列表
	GetBotList(context.Context, *GetBotListReq) (*GetBotListResult, error)
	//获取机器人详细信息
	GetBotDetail(context.Context, *GetBotDetailReq) (*GetBotDetailResult, error)
	//用户收藏机器人
	BotLike(context.Context, *BotLikeReq) (*BotLikeResult, error)
	//获取自建机器人列表
	GetBotListMine(context.Context, *GetBotListMineReq) (*GetBotListResult, error)
	// 分享游戏
	SendGame(context.Context, *SendGameReq) (*SendGameReply, error)
	// 设置游戏分数
	SetGameScore(context.Context, *SetGameScoreReq) (*SetGameScoreReply, error)
	// getGameHighScores 获取用户当前分数排行
	GetGameHighScores(context.Context, *GetGameHighScoresReq) (*GetGameHighScoresReply, error)
	// 内联查询回调
	AnswerInlineQuery(context.Context, *AnswerInlineQueryRequest) (*ReplyBotInlineCall, error)
	// 机器人普通群 超级群 踢人接口
	KickChatMember(context.Context, *KickChatMemberRequest) (*KickChatMemberReply, error)
	// 获取群中用户最后登陆时间
	GetGroupInactiveUsers(context.Context, *GetGroupInactiveUsersReq) (*GetGroupInactiveUsersResult, error)
	// 删除超级群某个用户的历史消息
	DeleteChannelHistoryMessage(context.Context, *DeleteChannelHistoryMessageReq) (*DeleteChannelHistoryMessageReply, error)
	// 机器人自动退出群组
	LeaveChat(context.Context, *LeaveChatReq) (*LeaveChatReply, error)
	// 獲取群訊息
	GetChat(context.Context, *GetChatReq) (*GetChatReply, error)
	// 獲取群成員數目
	GetChatMembersCount(context.Context, *GetChatMembersCountReq) (*GetChatMembersCountReply, error)
	// 獲取群管理員
	GetChatAdministrators(context.Context, *GetChatAdministratorsReq) (*GetChatAdministratorsReply, error)
	// 修改群名字
	SetChatTitle(context.Context, *SetChatTitleReq) (*SetChatTitleReply, error)
	// 修改群简介
	SetChatDescription(context.Context, *SetChatDescriptionReq) (*SetChatDescriptionReply, error)
	// 置顶群消息
	PinChatMessage(context.Context, *PinChatMessageReq) (*PinChatMessageReply, error)
	// 取消置顶群消息
	UnPinChatMessage(context.Context, *UnPinChatMessageReq) (*UnPinChatMessageReply, error)
	// 發送Action
	SendChatAction(context.Context, *SendChatActionReq) (*SendChatActionReply, error)
	// 發送名片
	SendContact(context.Context, *SendContactReq) (*SendContactReply, error)
	// 获取群组消息
	GetGroups(context.Context, *GetGroupsReq) (*GetGroupsReply, error)
	// 获取用户是哪些群的管理员的群列表
	GetAdminGroups(context.Context, *GetAdminGroupsReq) (*GetAdminGroupsReply, error)
	// 超级群禁言
	LipBlock(context.Context, *LipBlockReq) (*LipBlockReply, error)
	// 超级群解除禁言
	LipUnBlock(context.Context, *LipBlockReq) (*LipBlockReply, error)
	// 剔除超级群 可重新加入
	KickNotBan(context.Context, *KickNotBanReq) (*KickNotBanReply, error)
	// 获取机器人广场信息
	GetBotPlazaInfo(context.Context, *GetBotPlazaInfoReq) (*GetBotPlazaInfoReply, error)
	// 设置机器人是否能加入群组
	SetJoinGroups(context.Context, *SetJoinGroupsReq) (*SetJoinGroupsReply, error)
	// 获取单个广场机器人信息
	GetBotPlazaInfoById(context.Context, *GetBotPlazaInfoByIdReq) (*GetBotPlazaInfoByIdReply, error)
	mustEmbedUnimplementedBotServer()
}

// UnimplementedBotServer must be embedded to have forward compatible implementations.
type UnimplementedBotServer struct {
}

func (UnimplementedBotServer) GetMe(context.Context, *GetMeRequest) (*GetMeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedBotServer) GetUpdates(context.Context, *GetUpdatesRequest) (*GetUpdatesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdates not implemented")
}
func (UnimplementedBotServer) SendTextMessage(context.Context, *SendTextMessageRequest) (*SendTextMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTextMessage not implemented")
}
func (UnimplementedBotServer) SendLocation(context.Context, *SendLocationRequest) (*SendLocationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLocation not implemented")
}
func (UnimplementedBotServer) SendVenue(context.Context, *SendVenueRequest) (*SendVenueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVenue not implemented")
}
func (UnimplementedBotServer) SendPhoto(context.Context, *SendPhotoRequest) (*SendPhotoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoto not implemented")
}
func (UnimplementedBotServer) SendDocument(context.Context, *SendDocumentRequest) (*SendDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDocument not implemented")
}
func (UnimplementedBotServer) ForwardMessage(context.Context, *ForwardMessageRequest) (*ForwardMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardMessage not implemented")
}
func (UnimplementedBotServer) AnswerCallbackQuery(context.Context, *AnswerCallbackQueryRequest) (*AnswerCallbackQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerCallbackQuery not implemented")
}
func (UnimplementedBotServer) EditMessageText(context.Context, *EditMessageTextRequest) (*EditMessageTextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessageText not implemented")
}
func (UnimplementedBotServer) EditMessageCaption(context.Context, *EditMessageCaptionRequest) (*EditMessageCaptionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessageCaption not implemented")
}
func (UnimplementedBotServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedBotServer) SetWebhook(context.Context, *SetWebhookRequest) (*SetWebhookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWebhook not implemented")
}
func (UnimplementedBotServer) DeleteWebhook(context.Context, *DelWebhookRequest) (*DelWebhookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (UnimplementedBotServer) SendPhoneMessage(context.Context, *SendPhoneMessageRequest) (*SendTextMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoneMessage not implemented")
}
func (UnimplementedBotServer) QueryMusicInfo(context.Context, *MusicQueryRequest) (*MusicQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMusicInfo not implemented")
}
func (UnimplementedBotServer) SaveMusicInfo(context.Context, *MusicSaveReq) (*MusicSaveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMusicInfo not implemented")
}
func (UnimplementedBotServer) BaseQuertIdGetMusicFileInfo(context.Context, *GetMusicFileInfoReq) (*GetMusicFileInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseQuertIdGetMusicFileInfo not implemented")
}
func (UnimplementedBotServer) GetBotList(context.Context, *GetBotListReq) (*GetBotListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotList not implemented")
}
func (UnimplementedBotServer) GetBotDetail(context.Context, *GetBotDetailReq) (*GetBotDetailResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotDetail not implemented")
}
func (UnimplementedBotServer) BotLike(context.Context, *BotLikeReq) (*BotLikeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotLike not implemented")
}
func (UnimplementedBotServer) GetBotListMine(context.Context, *GetBotListMineReq) (*GetBotListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotListMine not implemented")
}
func (UnimplementedBotServer) SendGame(context.Context, *SendGameReq) (*SendGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGame not implemented")
}
func (UnimplementedBotServer) SetGameScore(context.Context, *SetGameScoreReq) (*SetGameScoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGameScore not implemented")
}
func (UnimplementedBotServer) GetGameHighScores(context.Context, *GetGameHighScoresReq) (*GetGameHighScoresReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameHighScores not implemented")
}
func (UnimplementedBotServer) AnswerInlineQuery(context.Context, *AnswerInlineQueryRequest) (*ReplyBotInlineCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerInlineQuery not implemented")
}
func (UnimplementedBotServer) KickChatMember(context.Context, *KickChatMemberRequest) (*KickChatMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickChatMember not implemented")
}
func (UnimplementedBotServer) GetGroupInactiveUsers(context.Context, *GetGroupInactiveUsersReq) (*GetGroupInactiveUsersResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInactiveUsers not implemented")
}
func (UnimplementedBotServer) DeleteChannelHistoryMessage(context.Context, *DeleteChannelHistoryMessageReq) (*DeleteChannelHistoryMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelHistoryMessage not implemented")
}
func (UnimplementedBotServer) LeaveChat(context.Context, *LeaveChatReq) (*LeaveChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChat not implemented")
}
func (UnimplementedBotServer) GetChat(context.Context, *GetChatReq) (*GetChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedBotServer) GetChatMembersCount(context.Context, *GetChatMembersCountReq) (*GetChatMembersCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMembersCount not implemented")
}
func (UnimplementedBotServer) GetChatAdministrators(context.Context, *GetChatAdministratorsReq) (*GetChatAdministratorsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatAdministrators not implemented")
}
func (UnimplementedBotServer) SetChatTitle(context.Context, *SetChatTitleReq) (*SetChatTitleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatTitle not implemented")
}
func (UnimplementedBotServer) SetChatDescription(context.Context, *SetChatDescriptionReq) (*SetChatDescriptionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatDescription not implemented")
}
func (UnimplementedBotServer) PinChatMessage(context.Context, *PinChatMessageReq) (*PinChatMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinChatMessage not implemented")
}
func (UnimplementedBotServer) UnPinChatMessage(context.Context, *UnPinChatMessageReq) (*UnPinChatMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnPinChatMessage not implemented")
}
func (UnimplementedBotServer) SendChatAction(context.Context, *SendChatActionReq) (*SendChatActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChatAction not implemented")
}
func (UnimplementedBotServer) SendContact(context.Context, *SendContactReq) (*SendContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendContact not implemented")
}
func (UnimplementedBotServer) GetGroups(context.Context, *GetGroupsReq) (*GetGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedBotServer) GetAdminGroups(context.Context, *GetAdminGroupsReq) (*GetAdminGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminGroups not implemented")
}
func (UnimplementedBotServer) LipBlock(context.Context, *LipBlockReq) (*LipBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LipBlock not implemented")
}
func (UnimplementedBotServer) LipUnBlock(context.Context, *LipBlockReq) (*LipBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LipUnBlock not implemented")
}
func (UnimplementedBotServer) KickNotBan(context.Context, *KickNotBanReq) (*KickNotBanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickNotBan not implemented")
}
func (UnimplementedBotServer) GetBotPlazaInfo(context.Context, *GetBotPlazaInfoReq) (*GetBotPlazaInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotPlazaInfo not implemented")
}
func (UnimplementedBotServer) SetJoinGroups(context.Context, *SetJoinGroupsReq) (*SetJoinGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJoinGroups not implemented")
}
func (UnimplementedBotServer) GetBotPlazaInfoById(context.Context, *GetBotPlazaInfoByIdReq) (*GetBotPlazaInfoByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotPlazaInfoById not implemented")
}
func (UnimplementedBotServer) mustEmbedUnimplementedBotServer() {}

// UnsafeBotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotServer will
// result in compilation errors.
type UnsafeBotServer interface {
	mustEmbedUnimplementedBotServer()
}

func RegisterBotServer(s grpc.ServiceRegistrar, srv BotServer) {
	s.RegisterService(&Bot_ServiceDesc, srv)
}

func _Bot_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetMe(ctx, req.(*GetMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetUpdates(ctx, req.(*GetUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendTextMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTextMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendTextMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendTextMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendTextMessage(ctx, req.(*SendTextMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendLocation(ctx, req.(*SendLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendVenue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendVenue(ctx, req.(*SendVenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendPhoto(ctx, req.(*SendPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendDocument(ctx, req.(*SendDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_ForwardMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).ForwardMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/ForwardMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).ForwardMessage(ctx, req.(*ForwardMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_AnswerCallbackQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerCallbackQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).AnswerCallbackQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/AnswerCallbackQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).AnswerCallbackQuery(ctx, req.(*AnswerCallbackQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_EditMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).EditMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/EditMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).EditMessageText(ctx, req.(*EditMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_EditMessageCaption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageCaptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).EditMessageCaption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/EditMessageCaption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).EditMessageCaption(ctx, req.(*EditMessageCaptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SetWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SetWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SetWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SetWebhook(ctx, req.(*SetWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/DeleteWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).DeleteWebhook(ctx, req.(*DelWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendPhoneMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPhoneMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendPhoneMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendPhoneMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendPhoneMessage(ctx, req.(*SendPhoneMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_QueryMusicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MusicQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).QueryMusicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/QueryMusicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).QueryMusicInfo(ctx, req.(*MusicQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SaveMusicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MusicSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SaveMusicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SaveMusicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SaveMusicInfo(ctx, req.(*MusicSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_BaseQuertIdGetMusicFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMusicFileInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).BaseQuertIdGetMusicFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/BaseQuertIdGetMusicFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).BaseQuertIdGetMusicFileInfo(ctx, req.(*GetMusicFileInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetBotList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetBotList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotList(ctx, req.(*GetBotListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetBotDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetBotDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotDetail(ctx, req.(*GetBotDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_BotLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).BotLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/BotLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).BotLike(ctx, req.(*BotLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetBotListMine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotListMineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotListMine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetBotListMine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotListMine(ctx, req.(*GetBotListMineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/sendGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendGame(ctx, req.(*SendGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SetGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGameScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SetGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SetGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SetGameScore(ctx, req.(*SetGameScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetGameHighScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameHighScoresReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetGameHighScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetGameHighScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetGameHighScores(ctx, req.(*GetGameHighScoresReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_AnswerInlineQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerInlineQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).AnswerInlineQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/AnswerInlineQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).AnswerInlineQuery(ctx, req.(*AnswerInlineQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_KickChatMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickChatMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).KickChatMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/KickChatMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).KickChatMember(ctx, req.(*KickChatMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetGroupInactiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupInactiveUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetGroupInactiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetGroupInactiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetGroupInactiveUsers(ctx, req.(*GetGroupInactiveUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_DeleteChannelHistoryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelHistoryMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).DeleteChannelHistoryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/DeleteChannelHistoryMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).DeleteChannelHistoryMessage(ctx, req.(*DeleteChannelHistoryMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_LeaveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).LeaveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/LeaveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).LeaveChat(ctx, req.(*LeaveChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetChat(ctx, req.(*GetChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetChatMembersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatMembersCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetChatMembersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetChatMembersCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetChatMembersCount(ctx, req.(*GetChatMembersCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetChatAdministrators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatAdministratorsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetChatAdministrators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetChatAdministrators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetChatAdministrators(ctx, req.(*GetChatAdministratorsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SetChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChatTitleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SetChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SetChatTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SetChatTitle(ctx, req.(*SetChatTitleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SetChatDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChatDescriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SetChatDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SetChatDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SetChatDescription(ctx, req.(*SetChatDescriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_PinChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinChatMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).PinChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/PinChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).PinChatMessage(ctx, req.(*PinChatMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_UnPinChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnPinChatMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).UnPinChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/UnPinChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).UnPinChatMessage(ctx, req.(*UnPinChatMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendChatAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChatActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendChatAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendChatAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendChatAction(ctx, req.(*SendChatActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SendContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SendContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SendContact(ctx, req.(*SendContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetGroups(ctx, req.(*GetGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetAdminGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetAdminGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetAdminGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetAdminGroups(ctx, req.(*GetAdminGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_LipBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LipBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).LipBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/LipBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).LipBlock(ctx, req.(*LipBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_LipUnBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LipBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).LipUnBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/LipUnBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).LipUnBlock(ctx, req.(*LipBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_KickNotBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickNotBanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).KickNotBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/KickNotBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).KickNotBan(ctx, req.(*KickNotBanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetBotPlazaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotPlazaInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotPlazaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetBotPlazaInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotPlazaInfo(ctx, req.(*GetBotPlazaInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SetJoinGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJoinGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).SetJoinGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/SetJoinGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).SetJoinGroups(ctx, req.(*SetJoinGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetBotPlazaInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotPlazaInfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetBotPlazaInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiservice.Bot/GetBotPlazaInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetBotPlazaInfoById(ctx, req.(*GetBotPlazaInfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Bot_ServiceDesc is the grpc.ServiceDesc for Bot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiservice.Bot",
	HandlerType: (*BotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMe",
			Handler:    _Bot_GetMe_Handler,
		},
		{
			MethodName: "GetUpdates",
			Handler:    _Bot_GetUpdates_Handler,
		},
		{
			MethodName: "SendTextMessage",
			Handler:    _Bot_SendTextMessage_Handler,
		},
		{
			MethodName: "SendLocation",
			Handler:    _Bot_SendLocation_Handler,
		},
		{
			MethodName: "SendVenue",
			Handler:    _Bot_SendVenue_Handler,
		},
		{
			MethodName: "SendPhoto",
			Handler:    _Bot_SendPhoto_Handler,
		},
		{
			MethodName: "SendDocument",
			Handler:    _Bot_SendDocument_Handler,
		},
		{
			MethodName: "ForwardMessage",
			Handler:    _Bot_ForwardMessage_Handler,
		},
		{
			MethodName: "AnswerCallbackQuery",
			Handler:    _Bot_AnswerCallbackQuery_Handler,
		},
		{
			MethodName: "EditMessageText",
			Handler:    _Bot_EditMessageText_Handler,
		},
		{
			MethodName: "EditMessageCaption",
			Handler:    _Bot_EditMessageCaption_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _Bot_DeleteMessage_Handler,
		},
		{
			MethodName: "SetWebhook",
			Handler:    _Bot_SetWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _Bot_DeleteWebhook_Handler,
		},
		{
			MethodName: "SendPhoneMessage",
			Handler:    _Bot_SendPhoneMessage_Handler,
		},
		{
			MethodName: "QueryMusicInfo",
			Handler:    _Bot_QueryMusicInfo_Handler,
		},
		{
			MethodName: "SaveMusicInfo",
			Handler:    _Bot_SaveMusicInfo_Handler,
		},
		{
			MethodName: "BaseQuertIdGetMusicFileInfo",
			Handler:    _Bot_BaseQuertIdGetMusicFileInfo_Handler,
		},
		{
			MethodName: "GetBotList",
			Handler:    _Bot_GetBotList_Handler,
		},
		{
			MethodName: "GetBotDetail",
			Handler:    _Bot_GetBotDetail_Handler,
		},
		{
			MethodName: "BotLike",
			Handler:    _Bot_BotLike_Handler,
		},
		{
			MethodName: "GetBotListMine",
			Handler:    _Bot_GetBotListMine_Handler,
		},
		{
			MethodName: "sendGame",
			Handler:    _Bot_SendGame_Handler,
		},
		{
			MethodName: "SetGameScore",
			Handler:    _Bot_SetGameScore_Handler,
		},
		{
			MethodName: "GetGameHighScores",
			Handler:    _Bot_GetGameHighScores_Handler,
		},
		{
			MethodName: "AnswerInlineQuery",
			Handler:    _Bot_AnswerInlineQuery_Handler,
		},
		{
			MethodName: "KickChatMember",
			Handler:    _Bot_KickChatMember_Handler,
		},
		{
			MethodName: "GetGroupInactiveUsers",
			Handler:    _Bot_GetGroupInactiveUsers_Handler,
		},
		{
			MethodName: "DeleteChannelHistoryMessage",
			Handler:    _Bot_DeleteChannelHistoryMessage_Handler,
		},
		{
			MethodName: "LeaveChat",
			Handler:    _Bot_LeaveChat_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _Bot_GetChat_Handler,
		},
		{
			MethodName: "GetChatMembersCount",
			Handler:    _Bot_GetChatMembersCount_Handler,
		},
		{
			MethodName: "GetChatAdministrators",
			Handler:    _Bot_GetChatAdministrators_Handler,
		},
		{
			MethodName: "SetChatTitle",
			Handler:    _Bot_SetChatTitle_Handler,
		},
		{
			MethodName: "SetChatDescription",
			Handler:    _Bot_SetChatDescription_Handler,
		},
		{
			MethodName: "PinChatMessage",
			Handler:    _Bot_PinChatMessage_Handler,
		},
		{
			MethodName: "UnPinChatMessage",
			Handler:    _Bot_UnPinChatMessage_Handler,
		},
		{
			MethodName: "SendChatAction",
			Handler:    _Bot_SendChatAction_Handler,
		},
		{
			MethodName: "SendContact",
			Handler:    _Bot_SendContact_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _Bot_GetGroups_Handler,
		},
		{
			MethodName: "GetAdminGroups",
			Handler:    _Bot_GetAdminGroups_Handler,
		},
		{
			MethodName: "LipBlock",
			Handler:    _Bot_LipBlock_Handler,
		},
		{
			MethodName: "LipUnBlock",
			Handler:    _Bot_LipUnBlock_Handler,
		},
		{
			MethodName: "KickNotBan",
			Handler:    _Bot_KickNotBan_Handler,
		},
		{
			MethodName: "GetBotPlazaInfo",
			Handler:    _Bot_GetBotPlazaInfo_Handler,
		},
		{
			MethodName: "SetJoinGroups",
			Handler:    _Bot_SetJoinGroups_Handler,
		},
		{
			MethodName: "GetBotPlazaInfoById",
			Handler:    _Bot_GetBotPlazaInfoById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apiservice.proto",
}
