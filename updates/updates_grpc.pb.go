// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: updates.proto

package updates

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserUpdatesServerClient is the client API for UserUpdatesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserUpdatesServerClient interface {
	// 单聊、普通群离线pts消息
	StoreUserPtsHandle(ctx context.Context, in *ReqStoreUserPtsHandle, opts ...grpc.CallOption) (*ReplyStoreUserPtsHandle, error)
	// 获取单聊、普通群离线pts消息
	GetUserPtsHandle(ctx context.Context, in *ReqGetUserPtsHandle, opts ...grpc.CallOption) (*ReplyGetUserPtsHandle, error)
	// 删除单条pts离线消息
	DeleteUserPtsHandle(ctx context.Context, in *ReqDeleteUserPtsHandle, opts ...grpc.CallOption) (*ReplyDeleteUserPtsHandle, error)
	// 清除用户单聊、普通群所有的离线消息
	ClearUserPtsHandle(ctx context.Context, in *ReqClearUserPtsHandle, opts ...grpc.CallOption) (*ReplyClearUserPtsHandle, error)
	// 清除对话框的离线消息
	ClearUserDialogPtsHandle(ctx context.Context, in *ReqClearUserDialogPtsHandle, opts ...grpc.CallOption) (*ReplysClearUserDialogPtsHandle, error)
	// 根据MsgID删除离线消息
	DeleteUserPtsHandleByMsgIDs(ctx context.Context, in *ReqDeleteUserPtsHandleByMsgIDs, opts ...grpc.CallOption) (*ReplyDeleteUserPtsHandleByMsgIDs, error)
	// 更新离线消息
	UpdateUserPtsHandle(ctx context.Context, in *ReqUpdateUserPtsHandle, opts ...grpc.CallOption) (*ReplyUpdateUserPtsHandle, error)
	// 通过msgID获取离线消息
	GetUserPtsHandleByMsgIDs(ctx context.Context, in *ReqGetUserPtsHandleByMsgIDs, opts ...grpc.CallOption) (*ReplyGetUserPtsHandleByMsgIDs, error)
	// ================== 存储 电话信息 联系人 加密聊天请求 二进制信息 ==================
	// infoService 调用存储信息
	StoreOtherInfoMsg(ctx context.Context, in *ReqStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyStoreOtherInfoMsg, error)
	// 批量 存储 otherInfoMsg
	BatchStoreOtherInfoMsg(ctx context.Context, in *ReqBatchStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyBatchStoreOtherInfoMsg, error)
	// 获取infoMsg信息
	GetOtherInfoMsg(ctx context.Context, in *ReqGetOtherInfoMsg, opts ...grpc.CallOption) (*ReplyGetOtherInfoMsg, error)
	// 用与实时交互查数据
	Monitor(ctx context.Context, in *ReqMonitor, opts ...grpc.CallOption) (*ReplyMonitor, error)
}

type userUpdatesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserUpdatesServerClient(cc grpc.ClientConnInterface) UserUpdatesServerClient {
	return &userUpdatesServerClient{cc}
}

func (c *userUpdatesServerClient) StoreUserPtsHandle(ctx context.Context, in *ReqStoreUserPtsHandle, opts ...grpc.CallOption) (*ReplyStoreUserPtsHandle, error) {
	out := new(ReplyStoreUserPtsHandle)
	err := c.cc.Invoke(ctx, "/updates.UserUpdatesServer/StoreUserPtsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) GetUserPtsHandle(ctx context.Context, in *ReqGetUserPtsHandle, opts ...grpc.CallOption) (*ReplyGetUserPtsHandle, error) {
	out := new(ReplyGetUserPtsHandle)
	err := c.cc.Invoke(ctx, "/updates.UserUpdatesServer/GetUserPtsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) DeleteUserPtsHandle(ctx context.Context, in *ReqDeleteUserPtsHandle, opts ...grpc.CallOption) (*ReplyDeleteUserPtsHandle, error) {
	out := new(ReplyDeleteUserPtsHandle)
	err := c.cc.Invoke(ctx, "/updates.UserUpdatesServer/DeleteUserPtsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) ClearUserPtsHandle(ctx context.Context, in *ReqClearUserPtsHandle, opts ...grpc.CallOption) (*ReplyClearUserPtsHandle, error) {
	out := new(ReplyClearUserPtsHandle)
	err := c.cc.Invoke(ctx, "/updates.UserUpdatesServer/ClearUserPtsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) ClearUserDialogPtsHandle(ctx context.Context, in *ReqClearUserDialogPtsHandle, opts ...grpc.CallOption) (*ReplysClearUserDialogPtsHandle, error) {
	out := new(ReplysClearUserDialogPtsHandle)
	err := c.cc.Invoke(ctx, "/updates.UserUpdatesServer/ClearUserDialogPtsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) DeleteUserPtsHandleByMsgIDs(ctx context.Context, in *ReqDeleteUserPtsHandleByMsgIDs, opts ...grpc.CallOption) (*ReplyDeleteUserPtsHandleByMsgIDs, error) {
	out := new(ReplyDeleteUserPtsHandleByMsgIDs)
	err := c.cc.Invoke(ctx, "/updates.UserUpdatesServer/DeleteUserPtsHandleByMsgIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) UpdateUserPtsHandle(ctx context.Context, in *ReqUpdateUserPtsHandle, opts ...grpc.CallOption) (*ReplyUpdateUserPtsHandle, error) {
	out := new(ReplyUpdateUserPtsHandle)
	err := c.cc.Invoke(ctx, "/updates.UserUpdatesServer/UpdateUserPtsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) GetUserPtsHandleByMsgIDs(ctx context.Context, in *ReqGetUserPtsHandleByMsgIDs, opts ...grpc.CallOption) (*ReplyGetUserPtsHandleByMsgIDs, error) {
	out := new(ReplyGetUserPtsHandleByMsgIDs)
	err := c.cc.Invoke(ctx, "/updates.UserUpdatesServer/GetUserPtsHandleByMsgIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) StoreOtherInfoMsg(ctx context.Context, in *ReqStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyStoreOtherInfoMsg, error) {
	out := new(ReplyStoreOtherInfoMsg)
	err := c.cc.Invoke(ctx, "/updates.UserUpdatesServer/StoreOtherInfoMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) BatchStoreOtherInfoMsg(ctx context.Context, in *ReqBatchStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyBatchStoreOtherInfoMsg, error) {
	out := new(ReplyBatchStoreOtherInfoMsg)
	err := c.cc.Invoke(ctx, "/updates.UserUpdatesServer/BatchStoreOtherInfoMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) GetOtherInfoMsg(ctx context.Context, in *ReqGetOtherInfoMsg, opts ...grpc.CallOption) (*ReplyGetOtherInfoMsg, error) {
	out := new(ReplyGetOtherInfoMsg)
	err := c.cc.Invoke(ctx, "/updates.UserUpdatesServer/GetOtherInfoMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) Monitor(ctx context.Context, in *ReqMonitor, opts ...grpc.CallOption) (*ReplyMonitor, error) {
	out := new(ReplyMonitor)
	err := c.cc.Invoke(ctx, "/updates.UserUpdatesServer/Monitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserUpdatesServerServer is the server API for UserUpdatesServer service.
// All implementations must embed UnimplementedUserUpdatesServerServer
// for forward compatibility
type UserUpdatesServerServer interface {
	// 单聊、普通群离线pts消息
	StoreUserPtsHandle(context.Context, *ReqStoreUserPtsHandle) (*ReplyStoreUserPtsHandle, error)
	// 获取单聊、普通群离线pts消息
	GetUserPtsHandle(context.Context, *ReqGetUserPtsHandle) (*ReplyGetUserPtsHandle, error)
	// 删除单条pts离线消息
	DeleteUserPtsHandle(context.Context, *ReqDeleteUserPtsHandle) (*ReplyDeleteUserPtsHandle, error)
	// 清除用户单聊、普通群所有的离线消息
	ClearUserPtsHandle(context.Context, *ReqClearUserPtsHandle) (*ReplyClearUserPtsHandle, error)
	// 清除对话框的离线消息
	ClearUserDialogPtsHandle(context.Context, *ReqClearUserDialogPtsHandle) (*ReplysClearUserDialogPtsHandle, error)
	// 根据MsgID删除离线消息
	DeleteUserPtsHandleByMsgIDs(context.Context, *ReqDeleteUserPtsHandleByMsgIDs) (*ReplyDeleteUserPtsHandleByMsgIDs, error)
	// 更新离线消息
	UpdateUserPtsHandle(context.Context, *ReqUpdateUserPtsHandle) (*ReplyUpdateUserPtsHandle, error)
	// 通过msgID获取离线消息
	GetUserPtsHandleByMsgIDs(context.Context, *ReqGetUserPtsHandleByMsgIDs) (*ReplyGetUserPtsHandleByMsgIDs, error)
	// ================== 存储 电话信息 联系人 加密聊天请求 二进制信息 ==================
	// infoService 调用存储信息
	StoreOtherInfoMsg(context.Context, *ReqStoreOtherInfoMsg) (*ReplyStoreOtherInfoMsg, error)
	// 批量 存储 otherInfoMsg
	BatchStoreOtherInfoMsg(context.Context, *ReqBatchStoreOtherInfoMsg) (*ReplyBatchStoreOtherInfoMsg, error)
	// 获取infoMsg信息
	GetOtherInfoMsg(context.Context, *ReqGetOtherInfoMsg) (*ReplyGetOtherInfoMsg, error)
	// 用与实时交互查数据
	Monitor(context.Context, *ReqMonitor) (*ReplyMonitor, error)
	mustEmbedUnimplementedUserUpdatesServerServer()
}

// UnimplementedUserUpdatesServerServer must be embedded to have forward compatible implementations.
type UnimplementedUserUpdatesServerServer struct {
}

func (UnimplementedUserUpdatesServerServer) StoreUserPtsHandle(context.Context, *ReqStoreUserPtsHandle) (*ReplyStoreUserPtsHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreUserPtsHandle not implemented")
}
func (UnimplementedUserUpdatesServerServer) GetUserPtsHandle(context.Context, *ReqGetUserPtsHandle) (*ReplyGetUserPtsHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPtsHandle not implemented")
}
func (UnimplementedUserUpdatesServerServer) DeleteUserPtsHandle(context.Context, *ReqDeleteUserPtsHandle) (*ReplyDeleteUserPtsHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPtsHandle not implemented")
}
func (UnimplementedUserUpdatesServerServer) ClearUserPtsHandle(context.Context, *ReqClearUserPtsHandle) (*ReplyClearUserPtsHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearUserPtsHandle not implemented")
}
func (UnimplementedUserUpdatesServerServer) ClearUserDialogPtsHandle(context.Context, *ReqClearUserDialogPtsHandle) (*ReplysClearUserDialogPtsHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearUserDialogPtsHandle not implemented")
}
func (UnimplementedUserUpdatesServerServer) DeleteUserPtsHandleByMsgIDs(context.Context, *ReqDeleteUserPtsHandleByMsgIDs) (*ReplyDeleteUserPtsHandleByMsgIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPtsHandleByMsgIDs not implemented")
}
func (UnimplementedUserUpdatesServerServer) UpdateUserPtsHandle(context.Context, *ReqUpdateUserPtsHandle) (*ReplyUpdateUserPtsHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPtsHandle not implemented")
}
func (UnimplementedUserUpdatesServerServer) GetUserPtsHandleByMsgIDs(context.Context, *ReqGetUserPtsHandleByMsgIDs) (*ReplyGetUserPtsHandleByMsgIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPtsHandleByMsgIDs not implemented")
}
func (UnimplementedUserUpdatesServerServer) StoreOtherInfoMsg(context.Context, *ReqStoreOtherInfoMsg) (*ReplyStoreOtherInfoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreOtherInfoMsg not implemented")
}
func (UnimplementedUserUpdatesServerServer) BatchStoreOtherInfoMsg(context.Context, *ReqBatchStoreOtherInfoMsg) (*ReplyBatchStoreOtherInfoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchStoreOtherInfoMsg not implemented")
}
func (UnimplementedUserUpdatesServerServer) GetOtherInfoMsg(context.Context, *ReqGetOtherInfoMsg) (*ReplyGetOtherInfoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOtherInfoMsg not implemented")
}
func (UnimplementedUserUpdatesServerServer) Monitor(context.Context, *ReqMonitor) (*ReplyMonitor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}
func (UnimplementedUserUpdatesServerServer) mustEmbedUnimplementedUserUpdatesServerServer() {}

// UnsafeUserUpdatesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserUpdatesServerServer will
// result in compilation errors.
type UnsafeUserUpdatesServerServer interface {
	mustEmbedUnimplementedUserUpdatesServerServer()
}

func RegisterUserUpdatesServerServer(s grpc.ServiceRegistrar, srv UserUpdatesServerServer) {
	s.RegisterService(&UserUpdatesServer_ServiceDesc, srv)
}

func _UserUpdatesServer_StoreUserPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreUserPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).StoreUserPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/StoreUserPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).StoreUserPtsHandle(ctx, req.(*ReqStoreUserPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_GetUserPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).GetUserPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/GetUserPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).GetUserPtsHandle(ctx, req.(*ReqGetUserPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_DeleteUserPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).DeleteUserPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/DeleteUserPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).DeleteUserPtsHandle(ctx, req.(*ReqDeleteUserPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_ClearUserPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqClearUserPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).ClearUserPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/ClearUserPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).ClearUserPtsHandle(ctx, req.(*ReqClearUserPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_ClearUserDialogPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqClearUserDialogPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).ClearUserDialogPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/ClearUserDialogPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).ClearUserDialogPtsHandle(ctx, req.(*ReqClearUserDialogPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_DeleteUserPtsHandleByMsgIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserPtsHandleByMsgIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).DeleteUserPtsHandleByMsgIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/DeleteUserPtsHandleByMsgIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).DeleteUserPtsHandleByMsgIDs(ctx, req.(*ReqDeleteUserPtsHandleByMsgIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_UpdateUserPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateUserPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).UpdateUserPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/UpdateUserPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).UpdateUserPtsHandle(ctx, req.(*ReqUpdateUserPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_GetUserPtsHandleByMsgIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserPtsHandleByMsgIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).GetUserPtsHandleByMsgIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/GetUserPtsHandleByMsgIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).GetUserPtsHandleByMsgIDs(ctx, req.(*ReqGetUserPtsHandleByMsgIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_StoreOtherInfoMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreOtherInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).StoreOtherInfoMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/StoreOtherInfoMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).StoreOtherInfoMsg(ctx, req.(*ReqStoreOtherInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_BatchStoreOtherInfoMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatchStoreOtherInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).BatchStoreOtherInfoMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/BatchStoreOtherInfoMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).BatchStoreOtherInfoMsg(ctx, req.(*ReqBatchStoreOtherInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_GetOtherInfoMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetOtherInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).GetOtherInfoMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/GetOtherInfoMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).GetOtherInfoMsg(ctx, req.(*ReqGetOtherInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_Monitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMonitor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).Monitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/Monitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).Monitor(ctx, req.(*ReqMonitor))
	}
	return interceptor(ctx, in, info, handler)
}

// UserUpdatesServer_ServiceDesc is the grpc.ServiceDesc for UserUpdatesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserUpdatesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "updates.UserUpdatesServer",
	HandlerType: (*UserUpdatesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreUserPtsHandle",
			Handler:    _UserUpdatesServer_StoreUserPtsHandle_Handler,
		},
		{
			MethodName: "GetUserPtsHandle",
			Handler:    _UserUpdatesServer_GetUserPtsHandle_Handler,
		},
		{
			MethodName: "DeleteUserPtsHandle",
			Handler:    _UserUpdatesServer_DeleteUserPtsHandle_Handler,
		},
		{
			MethodName: "ClearUserPtsHandle",
			Handler:    _UserUpdatesServer_ClearUserPtsHandle_Handler,
		},
		{
			MethodName: "ClearUserDialogPtsHandle",
			Handler:    _UserUpdatesServer_ClearUserDialogPtsHandle_Handler,
		},
		{
			MethodName: "DeleteUserPtsHandleByMsgIDs",
			Handler:    _UserUpdatesServer_DeleteUserPtsHandleByMsgIDs_Handler,
		},
		{
			MethodName: "UpdateUserPtsHandle",
			Handler:    _UserUpdatesServer_UpdateUserPtsHandle_Handler,
		},
		{
			MethodName: "GetUserPtsHandleByMsgIDs",
			Handler:    _UserUpdatesServer_GetUserPtsHandleByMsgIDs_Handler,
		},
		{
			MethodName: "StoreOtherInfoMsg",
			Handler:    _UserUpdatesServer_StoreOtherInfoMsg_Handler,
		},
		{
			MethodName: "BatchStoreOtherInfoMsg",
			Handler:    _UserUpdatesServer_BatchStoreOtherInfoMsg_Handler,
		},
		{
			MethodName: "GetOtherInfoMsg",
			Handler:    _UserUpdatesServer_GetOtherInfoMsg_Handler,
		},
		{
			MethodName: "Monitor",
			Handler:    _UserUpdatesServer_Monitor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "updates.proto",
}
