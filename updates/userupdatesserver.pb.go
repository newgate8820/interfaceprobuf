// Code generated by protoc-gen-gogo.
// source: userupdatesserver.proto
// DO NOT EDIT!

/*
Package updates is a generated protocol buffer package.

It is generated from these files:

	userupdatesserver.proto

It has these top-level messages:

	ReqGetUserPtsHandleByMsgIDs
	ReplyGetUserPtsHandleByMsgIDs
	ReplyUpdateUserPtsHandle
	ReqUpdateUserPtsHandle
	ReqDeleteUserPtsHandleByMsgIDs
	ReplyDeleteUserPtsHandleByMsgIDs
	ReqMonitor
	ReplyMonitor
	ReqStoreOtherInfoMsg
	ReplyStoreOtherInfoMsg
	ReqBatchStoreOtherInfoMsg
	ReplyBatchStoreOtherInfoMsg
	ReqGetOtherInfoMsg
	ReplyGetOtherInfoMsg
	ReqStoreUserPtsHandle
	ReplyStoreUserPtsHandle
	ReqGetUserPtsHandle
	ReplyGetUserPtsHandle
	ReqDeleteUserPtsHandle
	ReplyDeleteUserPtsHandle
	ReqClearUserPtsHandle
	ReplyClearUserPtsHandle
	ReqClearUserDialogPtsHandle
	ReplysClearUserDialogPtsHandle
	OtherInfoMsg
	PtsHandle
*/
package updates

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PtsHandleInt int32

const (
	PtsHandle_COMMON PtsHandleInt = 0
	PtsHandle_ACTION PtsHandleInt = 1
)

var PtsHandleInt_name = map[int32]string{
	0: "COMMON",
	1: "ACTION",
}
var PtsHandleInt_value = map[string]int32{
	"COMMON": 0,
	"ACTION": 1,
}

func (x PtsHandleInt) String() string {
	return proto.EnumName(PtsHandleInt_name, int32(x))
}
func (PtsHandleInt) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{25, 0}
}

type ReqGetUserPtsHandleByMsgIDs struct {
	UserID int32   `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	MsgIDs []int32 `protobuf:"varint,2,rep,packed,name=MsgIDs" json:"MsgIDs,omitempty"`
}

func (m *ReqGetUserPtsHandleByMsgIDs) Reset()         { *m = ReqGetUserPtsHandleByMsgIDs{} }
func (m *ReqGetUserPtsHandleByMsgIDs) String() string { return proto.CompactTextString(m) }
func (*ReqGetUserPtsHandleByMsgIDs) ProtoMessage()    {}
func (*ReqGetUserPtsHandleByMsgIDs) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{0}
}

func (m *ReqGetUserPtsHandleByMsgIDs) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ReqGetUserPtsHandleByMsgIDs) GetMsgIDs() []int32 {
	if m != nil {
		return m.MsgIDs
	}
	return nil
}

type ReplyGetUserPtsHandleByMsgIDs struct {
	PtsHandles []*PtsHandle `protobuf:"bytes,1,rep,name=PtsHandles" json:"PtsHandles,omitempty"`
}

func (m *ReplyGetUserPtsHandleByMsgIDs) Reset()         { *m = ReplyGetUserPtsHandleByMsgIDs{} }
func (m *ReplyGetUserPtsHandleByMsgIDs) String() string { return proto.CompactTextString(m) }
func (*ReplyGetUserPtsHandleByMsgIDs) ProtoMessage()    {}
func (*ReplyGetUserPtsHandleByMsgIDs) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{1}
}

func (m *ReplyGetUserPtsHandleByMsgIDs) GetPtsHandles() []*PtsHandle {
	if m != nil {
		return m.PtsHandles
	}
	return nil
}

type ReplyUpdateUserPtsHandle struct {
}

func (m *ReplyUpdateUserPtsHandle) Reset()         { *m = ReplyUpdateUserPtsHandle{} }
func (m *ReplyUpdateUserPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdateUserPtsHandle) ProtoMessage()    {}
func (*ReplyUpdateUserPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{2}
}

type ReqUpdateUserPtsHandle struct {
	PtsHandle *PtsHandle `protobuf:"bytes,1,opt,name=PtsHandle" json:"PtsHandle,omitempty"`
}

func (m *ReqUpdateUserPtsHandle) Reset()         { *m = ReqUpdateUserPtsHandle{} }
func (m *ReqUpdateUserPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateUserPtsHandle) ProtoMessage()    {}
func (*ReqUpdateUserPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{3}
}

func (m *ReqUpdateUserPtsHandle) GetPtsHandle() *PtsHandle {
	if m != nil {
		return m.PtsHandle
	}
	return nil
}

type ReqDeleteUserPtsHandleByMsgIDs struct {
	UserID int32   `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	MsgIDs []int32 `protobuf:"varint,2,rep,packed,name=MsgIDs" json:"MsgIDs,omitempty"`
}

func (m *ReqDeleteUserPtsHandleByMsgIDs) Reset()         { *m = ReqDeleteUserPtsHandleByMsgIDs{} }
func (m *ReqDeleteUserPtsHandleByMsgIDs) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteUserPtsHandleByMsgIDs) ProtoMessage()    {}
func (*ReqDeleteUserPtsHandleByMsgIDs) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{4}
}

func (m *ReqDeleteUserPtsHandleByMsgIDs) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ReqDeleteUserPtsHandleByMsgIDs) GetMsgIDs() []int32 {
	if m != nil {
		return m.MsgIDs
	}
	return nil
}

type ReplyDeleteUserPtsHandleByMsgIDs struct {
}

func (m *ReplyDeleteUserPtsHandleByMsgIDs) Reset()         { *m = ReplyDeleteUserPtsHandleByMsgIDs{} }
func (m *ReplyDeleteUserPtsHandleByMsgIDs) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteUserPtsHandleByMsgIDs) ProtoMessage()    {}
func (*ReplyDeleteUserPtsHandleByMsgIDs) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{5}
}

type ReqMonitor struct {
	Command    string   `protobuf:"bytes,1,opt,name=Command,proto3" json:"Command,omitempty"`
	SubCommand string   `protobuf:"bytes,2,opt,name=SubCommand,proto3" json:"SubCommand,omitempty"`
	Args       []string `protobuf:"bytes,3,rep,name=Args" json:"Args,omitempty"`
}

func (m *ReqMonitor) Reset()                    { *m = ReqMonitor{} }
func (m *ReqMonitor) String() string            { return proto.CompactTextString(m) }
func (*ReqMonitor) ProtoMessage()               {}
func (*ReqMonitor) Descriptor() ([]byte, []int) { return fileDescriptorUserupdatesserver, []int{6} }

func (m *ReqMonitor) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *ReqMonitor) GetSubCommand() string {
	if m != nil {
		return m.SubCommand
	}
	return ""
}

func (m *ReqMonitor) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReplyMonitor struct {
	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *ReplyMonitor) Reset()                    { *m = ReplyMonitor{} }
func (m *ReplyMonitor) String() string            { return proto.CompactTextString(m) }
func (*ReplyMonitor) ProtoMessage()               {}
func (*ReplyMonitor) Descriptor() ([]byte, []int) { return fileDescriptorUserupdatesserver, []int{7} }

func (m *ReplyMonitor) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReqStoreOtherInfoMsg struct {
	OtherInfoMsg *OtherInfoMsg `protobuf:"bytes,1,opt,name=OtherInfoMsg" json:"OtherInfoMsg,omitempty"`
}

func (m *ReqStoreOtherInfoMsg) Reset()         { *m = ReqStoreOtherInfoMsg{} }
func (m *ReqStoreOtherInfoMsg) String() string { return proto.CompactTextString(m) }
func (*ReqStoreOtherInfoMsg) ProtoMessage()    {}
func (*ReqStoreOtherInfoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{8}
}

func (m *ReqStoreOtherInfoMsg) GetOtherInfoMsg() *OtherInfoMsg {
	if m != nil {
		return m.OtherInfoMsg
	}
	return nil
}

type ReplyStoreOtherInfoMsg struct {
}

func (m *ReplyStoreOtherInfoMsg) Reset()         { *m = ReplyStoreOtherInfoMsg{} }
func (m *ReplyStoreOtherInfoMsg) String() string { return proto.CompactTextString(m) }
func (*ReplyStoreOtherInfoMsg) ProtoMessage()    {}
func (*ReplyStoreOtherInfoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{9}
}

type ReqBatchStoreOtherInfoMsg struct {
	OtherInfoMsgs []*OtherInfoMsg `protobuf:"bytes,1,rep,name=OtherInfoMsgs" json:"OtherInfoMsgs,omitempty"`
}

func (m *ReqBatchStoreOtherInfoMsg) Reset()         { *m = ReqBatchStoreOtherInfoMsg{} }
func (m *ReqBatchStoreOtherInfoMsg) String() string { return proto.CompactTextString(m) }
func (*ReqBatchStoreOtherInfoMsg) ProtoMessage()    {}
func (*ReqBatchStoreOtherInfoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{10}
}

func (m *ReqBatchStoreOtherInfoMsg) GetOtherInfoMsgs() []*OtherInfoMsg {
	if m != nil {
		return m.OtherInfoMsgs
	}
	return nil
}

type ReplyBatchStoreOtherInfoMsg struct {
}

func (m *ReplyBatchStoreOtherInfoMsg) Reset()         { *m = ReplyBatchStoreOtherInfoMsg{} }
func (m *ReplyBatchStoreOtherInfoMsg) String() string { return proto.CompactTextString(m) }
func (*ReplyBatchStoreOtherInfoMsg) ProtoMessage()    {}
func (*ReplyBatchStoreOtherInfoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{11}
}

type ReqGetOtherInfoMsg struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Date   int64 `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (m *ReqGetOtherInfoMsg) Reset()         { *m = ReqGetOtherInfoMsg{} }
func (m *ReqGetOtherInfoMsg) String() string { return proto.CompactTextString(m) }
func (*ReqGetOtherInfoMsg) ProtoMessage()    {}
func (*ReqGetOtherInfoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{12}
}

func (m *ReqGetOtherInfoMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetOtherInfoMsg) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

type ReplyGetOtherInfoMsg struct {
	OtherInfoMsgs []*OtherInfoMsg `protobuf:"bytes,1,rep,name=OtherInfoMsgs" json:"OtherInfoMsgs,omitempty"`
}

func (m *ReplyGetOtherInfoMsg) Reset()         { *m = ReplyGetOtherInfoMsg{} }
func (m *ReplyGetOtherInfoMsg) String() string { return proto.CompactTextString(m) }
func (*ReplyGetOtherInfoMsg) ProtoMessage()    {}
func (*ReplyGetOtherInfoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{13}
}

func (m *ReplyGetOtherInfoMsg) GetOtherInfoMsgs() []*OtherInfoMsg {
	if m != nil {
		return m.OtherInfoMsgs
	}
	return nil
}

type ReqStoreUserPtsHandle struct {
	PtsHandle *PtsHandle `protobuf:"bytes,1,opt,name=PtsHandle" json:"PtsHandle,omitempty"`
}

func (m *ReqStoreUserPtsHandle) Reset()         { *m = ReqStoreUserPtsHandle{} }
func (m *ReqStoreUserPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReqStoreUserPtsHandle) ProtoMessage()    {}
func (*ReqStoreUserPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{14}
}

func (m *ReqStoreUserPtsHandle) GetPtsHandle() *PtsHandle {
	if m != nil {
		return m.PtsHandle
	}
	return nil
}

type ReplyStoreUserPtsHandle struct {
}

func (m *ReplyStoreUserPtsHandle) Reset()         { *m = ReplyStoreUserPtsHandle{} }
func (m *ReplyStoreUserPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReplyStoreUserPtsHandle) ProtoMessage()    {}
func (*ReplyStoreUserPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{15}
}

type ReqGetUserPtsHandle struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Pts    int32 `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Limit  int32 `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *ReqGetUserPtsHandle) Reset()         { *m = ReqGetUserPtsHandle{} }
func (m *ReqGetUserPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReqGetUserPtsHandle) ProtoMessage()    {}
func (*ReqGetUserPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{16}
}

func (m *ReqGetUserPtsHandle) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetUserPtsHandle) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReqGetUserPtsHandle) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ReplyGetUserPtsHandle struct {
	Msgs    [][]byte `protobuf:"bytes,1,rep,name=Msgs" json:"Msgs,omitempty"`
	LastPts int32    `protobuf:"varint,2,opt,name=LastPts,proto3" json:"LastPts,omitempty"`
}

func (m *ReplyGetUserPtsHandle) Reset()         { *m = ReplyGetUserPtsHandle{} }
func (m *ReplyGetUserPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReplyGetUserPtsHandle) ProtoMessage()    {}
func (*ReplyGetUserPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{17}
}

func (m *ReplyGetUserPtsHandle) GetMsgs() [][]byte {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func (m *ReplyGetUserPtsHandle) GetLastPts() int32 {
	if m != nil {
		return m.LastPts
	}
	return 0
}

type ReqDeleteUserPtsHandle struct {
	UserId int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Ptss   []int32 `protobuf:"varint,2,rep,packed,name=Ptss" json:"Ptss,omitempty"`
}

func (m *ReqDeleteUserPtsHandle) Reset()         { *m = ReqDeleteUserPtsHandle{} }
func (m *ReqDeleteUserPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteUserPtsHandle) ProtoMessage()    {}
func (*ReqDeleteUserPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{18}
}

func (m *ReqDeleteUserPtsHandle) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqDeleteUserPtsHandle) GetPtss() []int32 {
	if m != nil {
		return m.Ptss
	}
	return nil
}

type ReplyDeleteUserPtsHandle struct {
}

func (m *ReplyDeleteUserPtsHandle) Reset()         { *m = ReplyDeleteUserPtsHandle{} }
func (m *ReplyDeleteUserPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteUserPtsHandle) ProtoMessage()    {}
func (*ReplyDeleteUserPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{19}
}

type ReqClearUserPtsHandle struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MaxPts int32 `protobuf:"varint,2,opt,name=MaxPts,proto3" json:"MaxPts,omitempty"`
}

func (m *ReqClearUserPtsHandle) Reset()         { *m = ReqClearUserPtsHandle{} }
func (m *ReqClearUserPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReqClearUserPtsHandle) ProtoMessage()    {}
func (*ReqClearUserPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{20}
}

func (m *ReqClearUserPtsHandle) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqClearUserPtsHandle) GetMaxPts() int32 {
	if m != nil {
		return m.MaxPts
	}
	return 0
}

type ReplyClearUserPtsHandle struct {
}

func (m *ReplyClearUserPtsHandle) Reset()         { *m = ReplyClearUserPtsHandle{} }
func (m *ReplyClearUserPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReplyClearUserPtsHandle) ProtoMessage()    {}
func (*ReplyClearUserPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{21}
}

type ReqClearUserDialogPtsHandle struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MaxPts int32 `protobuf:"varint,3,opt,name=MaxPts,proto3" json:"MaxPts,omitempty"`
}

func (m *ReqClearUserDialogPtsHandle) Reset()         { *m = ReqClearUserDialogPtsHandle{} }
func (m *ReqClearUserDialogPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReqClearUserDialogPtsHandle) ProtoMessage()    {}
func (*ReqClearUserDialogPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{22}
}

func (m *ReqClearUserDialogPtsHandle) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqClearUserDialogPtsHandle) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqClearUserDialogPtsHandle) GetMaxPts() int32 {
	if m != nil {
		return m.MaxPts
	}
	return 0
}

type ReplysClearUserDialogPtsHandle struct {
}

func (m *ReplysClearUserDialogPtsHandle) Reset()         { *m = ReplysClearUserDialogPtsHandle{} }
func (m *ReplysClearUserDialogPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReplysClearUserDialogPtsHandle) ProtoMessage()    {}
func (*ReplysClearUserDialogPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorUserupdatesserver, []int{23}
}

type OtherInfoMsg struct {
	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Date   int64  `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
	Msg    []byte `protobuf:"bytes,3,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (m *OtherInfoMsg) Reset()                    { *m = OtherInfoMsg{} }
func (m *OtherInfoMsg) String() string            { return proto.CompactTextString(m) }
func (*OtherInfoMsg) ProtoMessage()               {}
func (*OtherInfoMsg) Descriptor() ([]byte, []int) { return fileDescriptorUserupdatesserver, []int{24} }

func (m *OtherInfoMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *OtherInfoMsg) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *OtherInfoMsg) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type PtsHandle struct {
	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithID int32  `protobuf:"varint,6,opt,name=WithID,proto3" json:"WithID,omitempty"`
	MsgID  int32  `protobuf:"varint,7,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Pts    int32  `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Type   int32  `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Msg    []byte `protobuf:"bytes,4,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Date   int64  `protobuf:"varint,5,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (m *PtsHandle) Reset()                    { *m = PtsHandle{} }
func (m *PtsHandle) String() string            { return proto.CompactTextString(m) }
func (*PtsHandle) ProtoMessage()               {}
func (*PtsHandle) Descriptor() ([]byte, []int) { return fileDescriptorUserupdatesserver, []int{25} }

func (m *PtsHandle) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PtsHandle) GetWithID() int32 {
	if m != nil {
		return m.WithID
	}
	return 0
}

func (m *PtsHandle) GetMsgID() int32 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *PtsHandle) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *PtsHandle) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PtsHandle) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *PtsHandle) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func init() {
	proto.RegisterType((*ReqGetUserPtsHandleByMsgIDs)(nil), "updates.ReqGetUserPtsHandleByMsgIDs")
	proto.RegisterType((*ReplyGetUserPtsHandleByMsgIDs)(nil), "updates.ReplyGetUserPtsHandleByMsgIDs")
	proto.RegisterType((*ReplyUpdateUserPtsHandle)(nil), "updates.ReplyUpdateUserPtsHandle")
	proto.RegisterType((*ReqUpdateUserPtsHandle)(nil), "updates.ReqUpdateUserPtsHandle")
	proto.RegisterType((*ReqDeleteUserPtsHandleByMsgIDs)(nil), "updates.ReqDeleteUserPtsHandleByMsgIDs")
	proto.RegisterType((*ReplyDeleteUserPtsHandleByMsgIDs)(nil), "updates.ReplyDeleteUserPtsHandleByMsgIDs")
	proto.RegisterType((*ReqMonitor)(nil), "updates.ReqMonitor")
	proto.RegisterType((*ReplyMonitor)(nil), "updates.ReplyMonitor")
	proto.RegisterType((*ReqStoreOtherInfoMsg)(nil), "updates.ReqStoreOtherInfoMsg")
	proto.RegisterType((*ReplyStoreOtherInfoMsg)(nil), "updates.ReplyStoreOtherInfoMsg")
	proto.RegisterType((*ReqBatchStoreOtherInfoMsg)(nil), "updates.ReqBatchStoreOtherInfoMsg")
	proto.RegisterType((*ReplyBatchStoreOtherInfoMsg)(nil), "updates.ReplyBatchStoreOtherInfoMsg")
	proto.RegisterType((*ReqGetOtherInfoMsg)(nil), "updates.ReqGetOtherInfoMsg")
	proto.RegisterType((*ReplyGetOtherInfoMsg)(nil), "updates.ReplyGetOtherInfoMsg")
	proto.RegisterType((*ReqStoreUserPtsHandle)(nil), "updates.ReqStoreUserPtsHandle")
	proto.RegisterType((*ReplyStoreUserPtsHandle)(nil), "updates.ReplyStoreUserPtsHandle")
	proto.RegisterType((*ReqGetUserPtsHandle)(nil), "updates.ReqGetUserPtsHandle")
	proto.RegisterType((*ReplyGetUserPtsHandle)(nil), "updates.ReplyGetUserPtsHandle")
	proto.RegisterType((*ReqDeleteUserPtsHandle)(nil), "updates.ReqDeleteUserPtsHandle")
	proto.RegisterType((*ReplyDeleteUserPtsHandle)(nil), "updates.ReplyDeleteUserPtsHandle")
	proto.RegisterType((*ReqClearUserPtsHandle)(nil), "updates.ReqClearUserPtsHandle")
	proto.RegisterType((*ReplyClearUserPtsHandle)(nil), "updates.ReplyClearUserPtsHandle")
	proto.RegisterType((*ReqClearUserDialogPtsHandle)(nil), "updates.ReqClearUserDialogPtsHandle")
	proto.RegisterType((*ReplysClearUserDialogPtsHandle)(nil), "updates.ReplysClearUserDialogPtsHandle")
	proto.RegisterType((*OtherInfoMsg)(nil), "updates.OtherInfoMsg")
	proto.RegisterType((*PtsHandle)(nil), "updates.PtsHandle")
	proto.RegisterEnum("updates.PtsHandleInt", PtsHandleInt_name, PtsHandleInt_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserUpdatesServer service

type UserUpdatesServerClient interface {
	// 单聊、普通群离线pts消息
	StoreUserPtsHandle(ctx context.Context, in *ReqStoreUserPtsHandle, opts ...grpc.CallOption) (*ReplyStoreUserPtsHandle, error)
	// 获取单聊、普通群离线pts消息
	GetUserPtsHandle(ctx context.Context, in *ReqGetUserPtsHandle, opts ...grpc.CallOption) (*ReplyGetUserPtsHandle, error)
	// 删除单条pts离线消息
	DeleteUserPtsHandle(ctx context.Context, in *ReqDeleteUserPtsHandle, opts ...grpc.CallOption) (*ReplyDeleteUserPtsHandle, error)
	// 清除用户单聊、普通群所有的离线消息
	ClearUserPtsHandle(ctx context.Context, in *ReqClearUserPtsHandle, opts ...grpc.CallOption) (*ReplyClearUserPtsHandle, error)
	// 清除对话框的离线消息
	ClearUserDialogPtsHandle(ctx context.Context, in *ReqClearUserDialogPtsHandle, opts ...grpc.CallOption) (*ReplysClearUserDialogPtsHandle, error)
	// 根据MsgID删除离线消息
	DeleteUserPtsHandleByMsgIDs(ctx context.Context, in *ReqDeleteUserPtsHandleByMsgIDs, opts ...grpc.CallOption) (*ReplyDeleteUserPtsHandleByMsgIDs, error)
	// 更新离线消息
	UpdateUserPtsHandle(ctx context.Context, in *ReqUpdateUserPtsHandle, opts ...grpc.CallOption) (*ReplyUpdateUserPtsHandle, error)
	// 通过msgID获取离线消息
	GetUserPtsHandleByMsgIDs(ctx context.Context, in *ReqGetUserPtsHandleByMsgIDs, opts ...grpc.CallOption) (*ReplyGetUserPtsHandleByMsgIDs, error)
	// ================== 存储 电话信息 联系人 加密聊天请求 二进制信息 ==================
	// infoService 调用存储信息
	StoreOtherInfoMsg(ctx context.Context, in *ReqStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyStoreOtherInfoMsg, error)
	// 批量 存储 otherInfoMsg
	BatchStoreOtherInfoMsg(ctx context.Context, in *ReqBatchStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyBatchStoreOtherInfoMsg, error)
	// 获取infoMsg信息
	GetOtherInfoMsg(ctx context.Context, in *ReqGetOtherInfoMsg, opts ...grpc.CallOption) (*ReplyGetOtherInfoMsg, error)
	// 用与实时交互查数据
	Monitor(ctx context.Context, in *ReqMonitor, opts ...grpc.CallOption) (*ReplyMonitor, error)
}

type userUpdatesServerClient struct {
	cc *grpc.ClientConn
}

func NewUserUpdatesServerClient(cc *grpc.ClientConn) UserUpdatesServerClient {
	return &userUpdatesServerClient{cc}
}

func (c *userUpdatesServerClient) StoreUserPtsHandle(ctx context.Context, in *ReqStoreUserPtsHandle, opts ...grpc.CallOption) (*ReplyStoreUserPtsHandle, error) {
	out := new(ReplyStoreUserPtsHandle)
	err := grpc.Invoke(ctx, "/updates.UserUpdatesServer/StoreUserPtsHandle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) GetUserPtsHandle(ctx context.Context, in *ReqGetUserPtsHandle, opts ...grpc.CallOption) (*ReplyGetUserPtsHandle, error) {
	out := new(ReplyGetUserPtsHandle)
	err := grpc.Invoke(ctx, "/updates.UserUpdatesServer/GetUserPtsHandle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) DeleteUserPtsHandle(ctx context.Context, in *ReqDeleteUserPtsHandle, opts ...grpc.CallOption) (*ReplyDeleteUserPtsHandle, error) {
	out := new(ReplyDeleteUserPtsHandle)
	err := grpc.Invoke(ctx, "/updates.UserUpdatesServer/DeleteUserPtsHandle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) ClearUserPtsHandle(ctx context.Context, in *ReqClearUserPtsHandle, opts ...grpc.CallOption) (*ReplyClearUserPtsHandle, error) {
	out := new(ReplyClearUserPtsHandle)
	err := grpc.Invoke(ctx, "/updates.UserUpdatesServer/ClearUserPtsHandle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) ClearUserDialogPtsHandle(ctx context.Context, in *ReqClearUserDialogPtsHandle, opts ...grpc.CallOption) (*ReplysClearUserDialogPtsHandle, error) {
	out := new(ReplysClearUserDialogPtsHandle)
	err := grpc.Invoke(ctx, "/updates.UserUpdatesServer/ClearUserDialogPtsHandle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) DeleteUserPtsHandleByMsgIDs(ctx context.Context, in *ReqDeleteUserPtsHandleByMsgIDs, opts ...grpc.CallOption) (*ReplyDeleteUserPtsHandleByMsgIDs, error) {
	out := new(ReplyDeleteUserPtsHandleByMsgIDs)
	err := grpc.Invoke(ctx, "/updates.UserUpdatesServer/DeleteUserPtsHandleByMsgIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) UpdateUserPtsHandle(ctx context.Context, in *ReqUpdateUserPtsHandle, opts ...grpc.CallOption) (*ReplyUpdateUserPtsHandle, error) {
	out := new(ReplyUpdateUserPtsHandle)
	err := grpc.Invoke(ctx, "/updates.UserUpdatesServer/UpdateUserPtsHandle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) GetUserPtsHandleByMsgIDs(ctx context.Context, in *ReqGetUserPtsHandleByMsgIDs, opts ...grpc.CallOption) (*ReplyGetUserPtsHandleByMsgIDs, error) {
	out := new(ReplyGetUserPtsHandleByMsgIDs)
	err := grpc.Invoke(ctx, "/updates.UserUpdatesServer/GetUserPtsHandleByMsgIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) StoreOtherInfoMsg(ctx context.Context, in *ReqStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyStoreOtherInfoMsg, error) {
	out := new(ReplyStoreOtherInfoMsg)
	err := grpc.Invoke(ctx, "/updates.UserUpdatesServer/StoreOtherInfoMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) BatchStoreOtherInfoMsg(ctx context.Context, in *ReqBatchStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyBatchStoreOtherInfoMsg, error) {
	out := new(ReplyBatchStoreOtherInfoMsg)
	err := grpc.Invoke(ctx, "/updates.UserUpdatesServer/BatchStoreOtherInfoMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) GetOtherInfoMsg(ctx context.Context, in *ReqGetOtherInfoMsg, opts ...grpc.CallOption) (*ReplyGetOtherInfoMsg, error) {
	out := new(ReplyGetOtherInfoMsg)
	err := grpc.Invoke(ctx, "/updates.UserUpdatesServer/GetOtherInfoMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUpdatesServerClient) Monitor(ctx context.Context, in *ReqMonitor, opts ...grpc.CallOption) (*ReplyMonitor, error) {
	out := new(ReplyMonitor)
	err := grpc.Invoke(ctx, "/updates.UserUpdatesServer/Monitor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserUpdatesServer service

type UserUpdatesServerServer interface {
	// 单聊、普通群离线pts消息
	StoreUserPtsHandle(context.Context, *ReqStoreUserPtsHandle) (*ReplyStoreUserPtsHandle, error)
	// 获取单聊、普通群离线pts消息
	GetUserPtsHandle(context.Context, *ReqGetUserPtsHandle) (*ReplyGetUserPtsHandle, error)
	// 删除单条pts离线消息
	DeleteUserPtsHandle(context.Context, *ReqDeleteUserPtsHandle) (*ReplyDeleteUserPtsHandle, error)
	// 清除用户单聊、普通群所有的离线消息
	ClearUserPtsHandle(context.Context, *ReqClearUserPtsHandle) (*ReplyClearUserPtsHandle, error)
	// 清除对话框的离线消息
	ClearUserDialogPtsHandle(context.Context, *ReqClearUserDialogPtsHandle) (*ReplysClearUserDialogPtsHandle, error)
	// 根据MsgID删除离线消息
	DeleteUserPtsHandleByMsgIDs(context.Context, *ReqDeleteUserPtsHandleByMsgIDs) (*ReplyDeleteUserPtsHandleByMsgIDs, error)
	// 更新离线消息
	UpdateUserPtsHandle(context.Context, *ReqUpdateUserPtsHandle) (*ReplyUpdateUserPtsHandle, error)
	// 通过msgID获取离线消息
	GetUserPtsHandleByMsgIDs(context.Context, *ReqGetUserPtsHandleByMsgIDs) (*ReplyGetUserPtsHandleByMsgIDs, error)
	// ================== 存储 电话信息 联系人 加密聊天请求 二进制信息 ==================
	// infoService 调用存储信息
	StoreOtherInfoMsg(context.Context, *ReqStoreOtherInfoMsg) (*ReplyStoreOtherInfoMsg, error)
	// 批量 存储 otherInfoMsg
	BatchStoreOtherInfoMsg(context.Context, *ReqBatchStoreOtherInfoMsg) (*ReplyBatchStoreOtherInfoMsg, error)
	// 获取infoMsg信息
	GetOtherInfoMsg(context.Context, *ReqGetOtherInfoMsg) (*ReplyGetOtherInfoMsg, error)
	// 用与实时交互查数据
	Monitor(context.Context, *ReqMonitor) (*ReplyMonitor, error)
}

func RegisterUserUpdatesServerServer(s *grpc.Server, srv UserUpdatesServerServer) {
	s.RegisterService(&_UserUpdatesServer_serviceDesc, srv)
}

func _UserUpdatesServer_StoreUserPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreUserPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).StoreUserPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/StoreUserPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).StoreUserPtsHandle(ctx, req.(*ReqStoreUserPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_GetUserPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).GetUserPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/GetUserPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).GetUserPtsHandle(ctx, req.(*ReqGetUserPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_DeleteUserPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).DeleteUserPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/DeleteUserPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).DeleteUserPtsHandle(ctx, req.(*ReqDeleteUserPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_ClearUserPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqClearUserPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).ClearUserPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/ClearUserPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).ClearUserPtsHandle(ctx, req.(*ReqClearUserPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_ClearUserDialogPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqClearUserDialogPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).ClearUserDialogPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/ClearUserDialogPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).ClearUserDialogPtsHandle(ctx, req.(*ReqClearUserDialogPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_DeleteUserPtsHandleByMsgIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserPtsHandleByMsgIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).DeleteUserPtsHandleByMsgIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/DeleteUserPtsHandleByMsgIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).DeleteUserPtsHandleByMsgIDs(ctx, req.(*ReqDeleteUserPtsHandleByMsgIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_UpdateUserPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateUserPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).UpdateUserPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/UpdateUserPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).UpdateUserPtsHandle(ctx, req.(*ReqUpdateUserPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_GetUserPtsHandleByMsgIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserPtsHandleByMsgIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).GetUserPtsHandleByMsgIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/GetUserPtsHandleByMsgIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).GetUserPtsHandleByMsgIDs(ctx, req.(*ReqGetUserPtsHandleByMsgIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_StoreOtherInfoMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreOtherInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).StoreOtherInfoMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/StoreOtherInfoMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).StoreOtherInfoMsg(ctx, req.(*ReqStoreOtherInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_BatchStoreOtherInfoMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatchStoreOtherInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).BatchStoreOtherInfoMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/BatchStoreOtherInfoMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).BatchStoreOtherInfoMsg(ctx, req.(*ReqBatchStoreOtherInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_GetOtherInfoMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetOtherInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).GetOtherInfoMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/GetOtherInfoMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).GetOtherInfoMsg(ctx, req.(*ReqGetOtherInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUpdatesServer_Monitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMonitor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUpdatesServerServer).Monitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.UserUpdatesServer/Monitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUpdatesServerServer).Monitor(ctx, req.(*ReqMonitor))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserUpdatesServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "updates.UserUpdatesServer",
	HandlerType: (*UserUpdatesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreUserPtsHandle",
			Handler:    _UserUpdatesServer_StoreUserPtsHandle_Handler,
		},
		{
			MethodName: "GetUserPtsHandle",
			Handler:    _UserUpdatesServer_GetUserPtsHandle_Handler,
		},
		{
			MethodName: "DeleteUserPtsHandle",
			Handler:    _UserUpdatesServer_DeleteUserPtsHandle_Handler,
		},
		{
			MethodName: "ClearUserPtsHandle",
			Handler:    _UserUpdatesServer_ClearUserPtsHandle_Handler,
		},
		{
			MethodName: "ClearUserDialogPtsHandle",
			Handler:    _UserUpdatesServer_ClearUserDialogPtsHandle_Handler,
		},
		{
			MethodName: "DeleteUserPtsHandleByMsgIDs",
			Handler:    _UserUpdatesServer_DeleteUserPtsHandleByMsgIDs_Handler,
		},
		{
			MethodName: "UpdateUserPtsHandle",
			Handler:    _UserUpdatesServer_UpdateUserPtsHandle_Handler,
		},
		{
			MethodName: "GetUserPtsHandleByMsgIDs",
			Handler:    _UserUpdatesServer_GetUserPtsHandleByMsgIDs_Handler,
		},
		{
			MethodName: "StoreOtherInfoMsg",
			Handler:    _UserUpdatesServer_StoreOtherInfoMsg_Handler,
		},
		{
			MethodName: "BatchStoreOtherInfoMsg",
			Handler:    _UserUpdatesServer_BatchStoreOtherInfoMsg_Handler,
		},
		{
			MethodName: "GetOtherInfoMsg",
			Handler:    _UserUpdatesServer_GetOtherInfoMsg_Handler,
		},
		{
			MethodName: "Monitor",
			Handler:    _UserUpdatesServer_Monitor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userupdatesserver.proto",
}

func (m *ReqGetUserPtsHandleByMsgIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUserPtsHandleByMsgIDs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.UserID))
	}
	if len(m.MsgIDs) > 0 {
		dAtA2 := make([]byte, len(m.MsgIDs)*10)
		var j1 int
		for _, num1 := range m.MsgIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *ReplyGetUserPtsHandleByMsgIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetUserPtsHandleByMsgIDs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PtsHandles) > 0 {
		for _, msg := range m.PtsHandles {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserupdatesserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReplyUpdateUserPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateUserPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqUpdateUserPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateUserPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PtsHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.PtsHandle.Size()))
		n3, err := m.PtsHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ReqDeleteUserPtsHandleByMsgIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteUserPtsHandleByMsgIDs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.UserID))
	}
	if len(m.MsgIDs) > 0 {
		dAtA5 := make([]byte, len(m.MsgIDs)*10)
		var j4 int
		for _, num1 := range m.MsgIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	return i, nil
}

func (m *ReplyDeleteUserPtsHandleByMsgIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteUserPtsHandleByMsgIDs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqMonitor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMonitor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Command) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	if len(m.SubCommand) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(len(m.SubCommand)))
		i += copy(dAtA[i:], m.SubCommand)
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ReplyMonitor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyMonitor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *ReqStoreOtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStoreOtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OtherInfoMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.OtherInfoMsg.Size()))
		n6, err := m.OtherInfoMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ReplyStoreOtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyStoreOtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqBatchStoreOtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBatchStoreOtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OtherInfoMsgs) > 0 {
		for _, msg := range m.OtherInfoMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserupdatesserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReplyBatchStoreOtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyBatchStoreOtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqGetOtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetOtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.UserId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *ReplyGetOtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetOtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OtherInfoMsgs) > 0 {
		for _, msg := range m.OtherInfoMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserupdatesserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqStoreUserPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStoreUserPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PtsHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.PtsHandle.Size()))
		n7, err := m.PtsHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *ReplyStoreUserPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyStoreUserPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqGetUserPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUserPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.UserId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.Pts))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *ReplyGetUserPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetUserPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for _, b := range m.Msgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUserupdatesserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.LastPts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.LastPts))
	}
	return i, nil
}

func (m *ReqDeleteUserPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteUserPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Ptss) > 0 {
		dAtA9 := make([]byte, len(m.Ptss)*10)
		var j8 int
		for _, num1 := range m.Ptss {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	return i, nil
}

func (m *ReplyDeleteUserPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteUserPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqClearUserPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqClearUserPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.UserId))
	}
	if m.MaxPts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.MaxPts))
	}
	return i, nil
}

func (m *ReplyClearUserPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyClearUserPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqClearUserDialogPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqClearUserDialogPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.WithId))
	}
	if m.MaxPts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.MaxPts))
	}
	return i, nil
}

func (m *ReplysClearUserDialogPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplysClearUserDialogPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *OtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.UserId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.Date))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *PtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.UserId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.Pts))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.Type))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Date != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.Date))
	}
	if m.WithID != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.WithID))
	}
	if m.MsgID != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintUserupdatesserver(dAtA, i, uint64(m.MsgID))
	}
	return i, nil
}

func encodeFixed64Userupdatesserver(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Userupdatesserver(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintUserupdatesserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqGetUserPtsHandleByMsgIDs) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.UserID))
	}
	if len(m.MsgIDs) > 0 {
		l = 0
		for _, e := range m.MsgIDs {
			l += sovUserupdatesserver(uint64(e))
		}
		n += 1 + sovUserupdatesserver(uint64(l)) + l
	}
	return n
}

func (m *ReplyGetUserPtsHandleByMsgIDs) Size() (n int) {
	var l int
	_ = l
	if len(m.PtsHandles) > 0 {
		for _, e := range m.PtsHandles {
			l = e.Size()
			n += 1 + l + sovUserupdatesserver(uint64(l))
		}
	}
	return n
}

func (m *ReplyUpdateUserPtsHandle) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqUpdateUserPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.PtsHandle != nil {
		l = m.PtsHandle.Size()
		n += 1 + l + sovUserupdatesserver(uint64(l))
	}
	return n
}

func (m *ReqDeleteUserPtsHandleByMsgIDs) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.UserID))
	}
	if len(m.MsgIDs) > 0 {
		l = 0
		for _, e := range m.MsgIDs {
			l += sovUserupdatesserver(uint64(e))
		}
		n += 1 + sovUserupdatesserver(uint64(l)) + l
	}
	return n
}

func (m *ReplyDeleteUserPtsHandleByMsgIDs) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqMonitor) Size() (n int) {
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovUserupdatesserver(uint64(l))
	}
	l = len(m.SubCommand)
	if l > 0 {
		n += 1 + l + sovUserupdatesserver(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovUserupdatesserver(uint64(l))
		}
	}
	return n
}

func (m *ReplyMonitor) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovUserupdatesserver(uint64(l))
	}
	return n
}

func (m *ReqStoreOtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	if m.OtherInfoMsg != nil {
		l = m.OtherInfoMsg.Size()
		n += 1 + l + sovUserupdatesserver(uint64(l))
	}
	return n
}

func (m *ReplyStoreOtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqBatchStoreOtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.OtherInfoMsgs) > 0 {
		for _, e := range m.OtherInfoMsgs {
			l = e.Size()
			n += 1 + l + sovUserupdatesserver(uint64(l))
		}
	}
	return n
}

func (m *ReplyBatchStoreOtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqGetOtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.UserId))
	}
	if m.Date != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.Date))
	}
	return n
}

func (m *ReplyGetOtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.OtherInfoMsgs) > 0 {
		for _, e := range m.OtherInfoMsgs {
			l = e.Size()
			n += 1 + l + sovUserupdatesserver(uint64(l))
		}
	}
	return n
}

func (m *ReqStoreUserPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.PtsHandle != nil {
		l = m.PtsHandle.Size()
		n += 1 + l + sovUserupdatesserver(uint64(l))
	}
	return n
}

func (m *ReplyStoreUserPtsHandle) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqGetUserPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.UserId))
	}
	if m.Pts != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.Pts))
	}
	if m.Limit != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.Limit))
	}
	return n
}

func (m *ReplyGetUserPtsHandle) Size() (n int) {
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for _, b := range m.Msgs {
			l = len(b)
			n += 1 + l + sovUserupdatesserver(uint64(l))
		}
	}
	if m.LastPts != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.LastPts))
	}
	return n
}

func (m *ReqDeleteUserPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.UserId))
	}
	if len(m.Ptss) > 0 {
		l = 0
		for _, e := range m.Ptss {
			l += sovUserupdatesserver(uint64(e))
		}
		n += 1 + sovUserupdatesserver(uint64(l)) + l
	}
	return n
}

func (m *ReplyDeleteUserPtsHandle) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqClearUserPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.UserId))
	}
	if m.MaxPts != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.MaxPts))
	}
	return n
}

func (m *ReplyClearUserPtsHandle) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqClearUserDialogPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.WithId))
	}
	if m.MaxPts != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.MaxPts))
	}
	return n
}

func (m *ReplysClearUserDialogPtsHandle) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *OtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.UserId))
	}
	if m.Date != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.Date))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovUserupdatesserver(uint64(l))
	}
	return n
}

func (m *PtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.UserId))
	}
	if m.Pts != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.Pts))
	}
	if m.Type != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.Type))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovUserupdatesserver(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.Date))
	}
	if m.WithID != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.WithID))
	}
	if m.MsgID != 0 {
		n += 1 + sovUserupdatesserver(uint64(m.MsgID))
	}
	return n
}

func sovUserupdatesserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUserupdatesserver(x uint64) (n int) {
	return sovUserupdatesserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqGetUserPtsHandleByMsgIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUserPtsHandleByMsgIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUserPtsHandleByMsgIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserupdatesserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgIDs = append(m.MsgIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserupdatesserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserupdatesserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserupdatesserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgIDs = append(m.MsgIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetUserPtsHandleByMsgIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetUserPtsHandleByMsgIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetUserPtsHandleByMsgIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsHandles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PtsHandles = append(m.PtsHandles, &PtsHandle{})
			if err := m.PtsHandles[len(m.PtsHandles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateUserPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateUserPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateUserPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateUserPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateUserPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateUserPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PtsHandle == nil {
				m.PtsHandle = &PtsHandle{}
			}
			if err := m.PtsHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteUserPtsHandleByMsgIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteUserPtsHandleByMsgIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteUserPtsHandleByMsgIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserupdatesserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgIDs = append(m.MsgIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserupdatesserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserupdatesserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserupdatesserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgIDs = append(m.MsgIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteUserPtsHandleByMsgIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteUserPtsHandleByMsgIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteUserPtsHandleByMsgIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMonitor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMonitor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMonitor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubCommand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubCommand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyMonitor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyMonitor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyMonitor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStoreOtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStoreOtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStoreOtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherInfoMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OtherInfoMsg == nil {
				m.OtherInfoMsg = &OtherInfoMsg{}
			}
			if err := m.OtherInfoMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyStoreOtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyStoreOtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyStoreOtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBatchStoreOtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBatchStoreOtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBatchStoreOtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherInfoMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherInfoMsgs = append(m.OtherInfoMsgs, &OtherInfoMsg{})
			if err := m.OtherInfoMsgs[len(m.OtherInfoMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyBatchStoreOtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyBatchStoreOtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyBatchStoreOtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetOtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetOtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetOtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetOtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetOtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetOtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherInfoMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherInfoMsgs = append(m.OtherInfoMsgs, &OtherInfoMsg{})
			if err := m.OtherInfoMsgs[len(m.OtherInfoMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStoreUserPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStoreUserPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStoreUserPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PtsHandle == nil {
				m.PtsHandle = &PtsHandle{}
			}
			if err := m.PtsHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyStoreUserPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyStoreUserPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyStoreUserPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUserPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUserPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUserPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetUserPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetUserPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetUserPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, make([]byte, postIndex-iNdEx))
			copy(m.Msgs[len(m.Msgs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPts", wireType)
			}
			m.LastPts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteUserPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteUserPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteUserPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserupdatesserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ptss = append(m.Ptss, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserupdatesserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserupdatesserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserupdatesserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ptss = append(m.Ptss, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptss", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteUserPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteUserPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteUserPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqClearUserPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqClearUserPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqClearUserPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPts", wireType)
			}
			m.MaxPts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyClearUserPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyClearUserPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyClearUserPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqClearUserDialogPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqClearUserDialogPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqClearUserDialogPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPts", wireType)
			}
			m.MaxPts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplysClearUserDialogPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplysClearUserDialogPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplysClearUserDialogPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithID", wireType)
			}
			m.WithID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserupdatesserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserupdatesserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserupdatesserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserupdatesserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserupdatesserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUserupdatesserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUserupdatesserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUserupdatesserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUserupdatesserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserupdatesserver   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("userupdatesserver.proto", fileDescriptorUserupdatesserver) }

var fileDescriptorUserupdatesserver = []byte{
	// 859 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x6e, 0xeb, 0x44,
	0x10, 0xb6, 0x8f, 0x9b, 0x84, 0x0e, 0x41, 0xe4, 0x6c, 0x4f, 0x7b, 0x5c, 0x97, 0xa4, 0x61, 0x55,
	0xd1, 0x70, 0x53, 0xa1, 0x72, 0x81, 0x10, 0x37, 0xb4, 0x31, 0x2a, 0x41, 0x4d, 0x13, 0x36, 0x8d,
	0xa8, 0xe0, 0xca, 0x25, 0x4b, 0x1a, 0x70, 0xe3, 0xc4, 0xeb, 0x22, 0xf2, 0x6e, 0x3c, 0x00, 0x97,
	0x3c, 0x02, 0xea, 0x25, 0x4f, 0x81, 0x76, 0xfd, 0x93, 0x5d, 0x7b, 0x9d, 0xb6, 0xc0, 0xdd, 0xce,
	0xce, 0xe8, 0x9b, 0xf1, 0x37, 0xf3, 0x79, 0x16, 0xde, 0x3e, 0x30, 0x1a, 0x3e, 0x2c, 0x26, 0x5e,
	0x44, 0x19, 0xa3, 0xe1, 0xaf, 0x34, 0x3c, 0x59, 0x84, 0x41, 0x14, 0xa0, 0x5a, 0x72, 0x89, 0xfb,
	0x70, 0x40, 0xe8, 0xf2, 0x82, 0x46, 0x63, 0x46, 0xc3, 0x61, 0xc4, 0xbe, 0xf6, 0xe6, 0x13, 0x9f,
	0x9e, 0xaf, 0xfa, 0x6c, 0xda, 0x73, 0x19, 0xda, 0x83, 0x2a, 0x77, 0xf4, 0x5c, 0xdb, 0x6c, 0x9b,
	0x9d, 0x0a, 0x49, 0x2c, 0x7e, 0x1f, 0x47, 0xd8, 0xaf, 0xda, 0x16, 0xbf, 0x8f, 0x2d, 0x3c, 0x82,
	0x26, 0xa1, 0x0b, 0x7f, 0x55, 0x0a, 0x78, 0x0a, 0x90, 0x5d, 0x32, 0xdb, 0x6c, 0x5b, 0x9d, 0x77,
	0x4f, 0xd1, 0x49, 0x52, 0xcd, 0x49, 0xe6, 0x22, 0x52, 0x14, 0x76, 0xc0, 0x16, 0xa0, 0x63, 0x11,
	0xa5, 0xe0, 0xe2, 0x6f, 0x60, 0x8f, 0xd0, 0xa5, 0xc6, 0x83, 0x3e, 0x81, 0xed, 0xcc, 0x10, 0xd5,
	0xeb, 0x13, 0xad, 0x83, 0xf0, 0x10, 0x5a, 0x84, 0x2e, 0x5d, 0xea, 0xd3, 0x1c, 0xd6, 0xbf, 0xa6,
	0x03, 0x43, 0x5b, 0x54, 0xbe, 0x01, 0x13, 0x7f, 0x0f, 0x40, 0xe8, 0xb2, 0x1f, 0xcc, 0x67, 0x51,
	0x10, 0x22, 0x1b, 0x6a, 0xdd, 0xe0, 0xfe, 0xde, 0x9b, 0x4f, 0x44, 0x8a, 0x6d, 0x92, 0x9a, 0xa8,
	0x05, 0x30, 0x7a, 0xb8, 0x4d, 0x9d, 0xaf, 0x84, 0x53, 0xba, 0x41, 0x08, 0xb6, 0xce, 0xc2, 0x29,
	0xb3, 0xad, 0xb6, 0xd5, 0xd9, 0x26, 0xe2, 0x8c, 0x3b, 0x50, 0x17, 0xf9, 0x25, 0xf4, 0x3e, 0x65,
	0xcc, 0x9b, 0xd2, 0x14, 0x3d, 0x31, 0xf1, 0xb7, 0xf0, 0x86, 0xd0, 0xe5, 0x28, 0x0a, 0x42, 0x3a,
	0x88, 0xee, 0x68, 0xd8, 0x9b, 0xff, 0x14, 0xf4, 0xd9, 0x14, 0x7d, 0x0e, 0x75, 0xd9, 0x4e, 0x88,
	0xdc, 0xcd, 0x88, 0x94, 0x9d, 0x44, 0x09, 0xc5, 0x36, 0x6f, 0xcd, 0xc2, 0x5f, 0x15, 0x40, 0xf1,
	0x0d, 0xec, 0x13, 0xba, 0x3c, 0xf7, 0xa2, 0x1f, 0xef, 0x8a, 0x19, 0xbf, 0x80, 0xf7, 0x64, 0x3b,
	0x1d, 0x92, 0x92, 0x94, 0x6a, 0x2c, 0x6e, 0xf2, 0x71, 0x5e, 0xf8, 0x2b, 0x3d, 0x36, 0xfe, 0x12,
	0x50, 0x3c, 0xed, 0x4a, 0xc6, 0xb4, 0xab, 0x13, 0xa5, 0xab, 0x82, 0x51, 0xd7, 0x8b, 0xa8, 0xe0,
	0xda, 0x22, 0xe2, 0x8c, 0x47, 0x9c, 0xa7, 0x78, 0xc0, 0xff, 0xbf, 0xaa, 0x7b, 0xb0, 0x9b, 0x92,
	0xff, 0x5f, 0x67, 0x78, 0x1f, 0xde, 0xae, 0x49, 0x57, 0xa5, 0x32, 0x86, 0x1d, 0x8d, 0xd4, 0x4b,
	0xbf, 0xbe, 0x01, 0xd6, 0x30, 0x62, 0xe2, 0xe3, 0x2b, 0x84, 0x1f, 0xd1, 0x1b, 0xa8, 0x5c, 0xce,
	0xee, 0x67, 0x91, 0x6d, 0x89, 0xbb, 0xd8, 0xc0, 0x5f, 0xf1, 0xe2, 0x35, 0x92, 0xe7, 0xf4, 0x65,
	0x4c, 0xd4, 0x89, 0x38, 0xf3, 0x01, 0xbc, 0xf4, 0x58, 0xb4, 0x06, 0x4e, 0x4d, 0xec, 0x0a, 0x21,
	0x6b, 0x84, 0xb2, 0xa9, 0x3d, 0xc3, 0x88, 0xa5, 0x92, 0x13, 0xe7, 0xec, 0x57, 0xa1, 0xc1, 0xc1,
	0x17, 0x82, 0xe5, 0xae, 0x4f, 0xbd, 0xf0, 0x79, 0x09, 0xb8, 0xaa, 0xbd, 0xdf, 0xd6, 0xb5, 0x26,
	0x56, 0xc6, 0x71, 0x11, 0x0a, 0x53, 0xf1, 0x3b, 0xcd, 0x1c, 0xee, 0xcc, 0xf3, 0x83, 0xe9, 0xb3,
	0x32, 0x7d, 0x37, 0x8b, 0xee, 0x7a, 0x93, 0x34, 0x53, 0x6c, 0x49, 0x15, 0x58, 0x4a, 0x05, 0x6d,
	0xfe, 0xa7, 0x5a, 0xf8, 0x2b, 0x56, 0x96, 0x09, 0x5f, 0xaa, 0xba, 0x7d, 0xc9, 0x8c, 0xf3, 0xce,
	0x73, 0xa9, 0xf3, 0x94, 0x75, 0xc2, 0x8f, 0xf8, 0x77, 0x53, 0x1a, 0xc4, 0x17, 0x4c, 0x0c, 0x82,
	0xad, 0xeb, 0xd5, 0x82, 0x26, 0xd5, 0x8b, 0x73, 0x8a, 0xbe, 0x95, 0xa1, 0x67, 0x35, 0x54, 0xa4,
	0x1a, 0x52, 0x46, 0x5c, 0xbb, 0x2a, 0x31, 0xe2, 0xf2, 0x19, 0x14, 0xff, 0x4d, 0xbb, 0x16, 0xcf,
	0xa0, 0x30, 0x70, 0x13, 0xac, 0xd9, 0x3c, 0x42, 0x00, 0xd5, 0xee, 0xa0, 0xdf, 0x1f, 0x5c, 0x35,
	0x0c, 0x7e, 0x3e, 0xeb, 0x5e, 0xf7, 0x06, 0x57, 0x0d, 0xf3, 0xf4, 0xef, 0x77, 0xe0, 0x35, 0xaf,
	0x31, 0x5e, 0x13, 0x6c, 0x24, 0x36, 0x21, 0xba, 0x01, 0xa4, 0x91, 0x5c, 0x2b, 0xd3, 0x97, 0x56,
	0x92, 0x4e, 0x5b, 0xf2, 0xeb, 0x75, 0x66, 0x20, 0x02, 0x8d, 0x82, 0x1a, 0x3e, 0x90, 0x71, 0xf3,
	0x5e, 0xa7, 0xa5, 0xa2, 0xe6, 0xfd, 0xd8, 0x40, 0x3f, 0xc0, 0x8e, 0x4e, 0x1c, 0x87, 0x32, 0xac,
	0x26, 0xc0, 0xf9, 0x50, 0x45, 0xd6, 0x09, 0xc3, 0xe0, 0x54, 0x68, 0x74, 0xa1, 0x50, 0x51, 0xf4,
	0xe7, 0xa9, 0xd0, 0xc8, 0xc1, 0x40, 0xbf, 0x80, 0x5d, 0xaa, 0x86, 0x23, 0x2d, 0x7e, 0x2e, 0xca,
	0x39, 0x56, 0xb3, 0x94, 0x8f, 0xbc, 0x81, 0x18, 0x1c, 0x6c, 0xda, 0xde, 0xc7, 0x4f, 0x70, 0x95,
	0x06, 0x3a, 0x1f, 0x3f, 0xc9, 0x59, 0xb6, 0xbd, 0x45, 0x63, 0x74, 0xcf, 0x0f, 0xa5, 0x31, 0x9a,
	0x80, 0x7c, 0x63, 0x74, 0x8f, 0x1b, 0x03, 0xfd, 0x0c, 0x76, 0xe9, 0x53, 0xea, 0x68, 0xd3, 0x44,
	0x65, 0xdf, 0xf2, 0xd1, 0xe6, 0xc9, 0x92, 0x3e, 0x64, 0x0c, 0xaf, 0x8b, 0xdb, 0xb8, 0x59, 0x90,
	0x83, 0xec, 0x76, 0x0e, 0x35, 0x6a, 0x50, 0x36, 0xae, 0x81, 0x26, 0xb0, 0x57, 0xb2, 0xe9, 0xb1,
	0x8c, 0xad, 0x8f, 0x71, 0x8e, 0xd4, 0x04, 0x25, 0x7b, 0xdd, 0x40, 0x03, 0x78, 0x3f, 0xbf, 0x92,
	0x0f, 0x72, 0xfc, 0x28, 0xb8, 0xcd, 0x02, 0x2d, 0x39, 0xc0, 0xcf, 0xa0, 0x96, 0xbe, 0x9a, 0x76,
	0x64, 0xa0, 0xe4, 0xd2, 0xd9, 0x55, 0x01, 0x92, 0x6b, 0x6c, 0x9c, 0xd7, 0xff, 0x78, 0x6c, 0x99,
	0x7f, 0x3e, 0xb6, 0xcc, 0xbf, 0x1e, 0x5b, 0xe6, 0x6d, 0x55, 0xbc, 0xb7, 0x3f, 0xfd, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x4c, 0x20, 0x10, 0x38, 0x8a, 0x0b, 0x00, 0x00,
}
