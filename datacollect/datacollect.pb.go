// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/datacollect/datacollect.proto

/*
Package datacollect is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/datacollect/datacollect.proto

It has these top-level messages:

	PushMessageData
	PushMessageDataList
	SendMessageDataList
	SendMessageData
	CountDataList
	CountData
	DeviceInfoData
	DeviceInfoDataList
	UserTraceData
	UserTraceDataList
	UserSessionData
	UserSessionDataList
	AudioVoiceData
	AudioVoiceDataList
	PhoneCallData
	PhoneCallDataList
	FileUploadData
	FileUploadDataList
	FileDownloadData
	FileDownloadDataList
	FileDownloadIdData
	FileDownloadIdDataList
	UserExpansionData
	ActiveGroupData
	ActiveGroupDataList
	ActiveGroupIdData
	ActiveGroupIdDataList
	ErrorData
*/
package datacollect

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ## 数据采集kafka_topic ## (使用enum string)
type CollectTopic int32

const (
	CollectTopic_TOPIC_DEFAULT      CollectTopic = 0
	CollectTopic_TOPIC_DEVICE_INFO  CollectTopic = 1
	CollectTopic_TOPIC_PUSH_MESSAGE CollectTopic = 2
	CollectTopic_TOPIC_SEND_MESSAGE CollectTopic = 3
	CollectTopic_TOPIC_COUNT_DATA   CollectTopic = 4
	CollectTopic_TOPIC_USER_TRACE   CollectTopic = 5
	CollectTopic_TOPIC_USER_SESSION CollectTopic = 6
)

var CollectTopic_name = map[int32]string{
	0: "TOPIC_DEFAULT",
	1: "TOPIC_DEVICE_INFO",
	2: "TOPIC_PUSH_MESSAGE",
	3: "TOPIC_SEND_MESSAGE",
	4: "TOPIC_COUNT_DATA",
	5: "TOPIC_USER_TRACE",
	6: "TOPIC_USER_SESSION",
}
var CollectTopic_value = map[string]int32{
	"TOPIC_DEFAULT":      0,
	"TOPIC_DEVICE_INFO":  1,
	"TOPIC_PUSH_MESSAGE": 2,
	"TOPIC_SEND_MESSAGE": 3,
	"TOPIC_COUNT_DATA":   4,
	"TOPIC_USER_TRACE":   5,
	"TOPIC_USER_SESSION": 6,
}

func (x CollectTopic) String() string {
	return proto.EnumName(CollectTopic_name, int32(x))
}
func (CollectTopic) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ## 数据采集kafka_key ## (使用enum string)
type CollectKey int32

const (
	CollectKey_KEY_DEVICE_INFO      CollectKey = 0
	CollectKey_KEY_PUSH_MESSAGE     CollectKey = 1
	CollectKey_KEY_SEND_MESSAGE     CollectKey = 2
	CollectKey_KEY_COUNT_DATA       CollectKey = 3
	CollectKey_KEY_USER_TRACE       CollectKey = 4
	CollectKey_KEY_USER_SESSION     CollectKey = 5
	CollectKey_KEY_FILE_UPLOAD      CollectKey = 6
	CollectKey_KEY_FILE_DOWNLOAD    CollectKey = 7
	CollectKey_KEY_AUDIO_VOICE      CollectKey = 8
	CollectKey_KEY_PHONE_CALL       CollectKey = 9
	CollectKey_KEY_FILE_DOWNLOAD_ID CollectKey = 10
	CollectKey_KEY_USER_EXPANSION   CollectKey = 11
	CollectKey_KEY_ACTIVE_GROUP     CollectKey = 12
	CollectKey_KEY_ACTIVE_GROUP_ID  CollectKey = 13
)

var CollectKey_name = map[int32]string{
	0:  "KEY_DEVICE_INFO",
	1:  "KEY_PUSH_MESSAGE",
	2:  "KEY_SEND_MESSAGE",
	3:  "KEY_COUNT_DATA",
	4:  "KEY_USER_TRACE",
	5:  "KEY_USER_SESSION",
	6:  "KEY_FILE_UPLOAD",
	7:  "KEY_FILE_DOWNLOAD",
	8:  "KEY_AUDIO_VOICE",
	9:  "KEY_PHONE_CALL",
	10: "KEY_FILE_DOWNLOAD_ID",
	11: "KEY_USER_EXPANSION",
	12: "KEY_ACTIVE_GROUP",
	13: "KEY_ACTIVE_GROUP_ID",
}
var CollectKey_value = map[string]int32{
	"KEY_DEVICE_INFO":      0,
	"KEY_PUSH_MESSAGE":     1,
	"KEY_SEND_MESSAGE":     2,
	"KEY_COUNT_DATA":       3,
	"KEY_USER_TRACE":       4,
	"KEY_USER_SESSION":     5,
	"KEY_FILE_UPLOAD":      6,
	"KEY_FILE_DOWNLOAD":    7,
	"KEY_AUDIO_VOICE":      8,
	"KEY_PHONE_CALL":       9,
	"KEY_FILE_DOWNLOAD_ID": 10,
	"KEY_USER_EXPANSION":   11,
	"KEY_ACTIVE_GROUP":     12,
	"KEY_ACTIVE_GROUP_ID":  13,
}

func (x CollectKey) String() string {
	return proto.EnumName(CollectKey_name, int32(x))
}
func (CollectKey) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// ## 数据采集kafka_消费组 ## (使用enum string)
type CollectGroup int32

const (
	CollectGroup_GROUP_MONITOR_SERVER     CollectGroup = 0
	CollectGroup_GROUP_ACTIVE_USER_SERVER CollectGroup = 1
	CollectGroup_GROUP_BG                 CollectGroup = 2
)

var CollectGroup_name = map[int32]string{
	0: "GROUP_MONITOR_SERVER",
	1: "GROUP_ACTIVE_USER_SERVER",
	2: "GROUP_BG",
}
var CollectGroup_value = map[string]int32{
	"GROUP_MONITOR_SERVER":     0,
	"GROUP_ACTIVE_USER_SERVER": 1,
	"GROUP_BG":                 2,
}

func (x CollectGroup) String() string {
	return proto.EnumName(CollectGroup_name, int32(x))
}
func (CollectGroup) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type LinkInformation int32

const (
	LinkInformation_pt_monitor_kafka LinkInformation = 0
)

var LinkInformation_name = map[int32]string{
	0: "pt_monitor_kafka",
}
var LinkInformation_value = map[string]int32{
	"pt_monitor_kafka": 0,
}

func (x LinkInformation) String() string {
	return proto.EnumName(LinkInformation_name, int32(x))
}
func (LinkInformation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// ## mime类型 ##
type MimeType int32

const (
	MimeType_UNKNOWN     MimeType = 0
	MimeType_APPLICATION MimeType = 1
	MimeType_TEXT        MimeType = 2
	MimeType_IMAGE       MimeType = 3
	MimeType_AUDIO       MimeType = 4
	MimeType_VIDEO       MimeType = 5
	MimeType_MESSAGE     MimeType = 6
	MimeType_DRAWING     MimeType = 7
	MimeType_JAVA        MimeType = 8
)

var MimeType_name = map[int32]string{
	0: "UNKNOWN",
	1: "APPLICATION",
	2: "TEXT",
	3: "IMAGE",
	4: "AUDIO",
	5: "VIDEO",
	6: "MESSAGE",
	7: "DRAWING",
	8: "JAVA",
}
var MimeType_value = map[string]int32{
	"UNKNOWN":     0,
	"APPLICATION": 1,
	"TEXT":        2,
	"IMAGE":       3,
	"AUDIO":       4,
	"VIDEO":       5,
	"MESSAGE":     6,
	"DRAWING":     7,
	"JAVA":        8,
}

func (x MimeType) String() string {
	return proto.EnumName(MimeType_name, int32(x))
}
func (MimeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// ## 推送消息-数据类型 ##
type PushMessageType int32

const (
	PushMessageType_ANDROID PushMessageType = 0
	PushMessageType_IOS     PushMessageType = 1
)

var PushMessageType_name = map[int32]string{
	0: "ANDROID",
	1: "IOS",
}
var PushMessageType_value = map[string]int32{
	"ANDROID": 0,
	"IOS":     1,
}

func (x PushMessageType) String() string {
	return proto.EnumName(PushMessageType_name, int32(x))
}
func (PushMessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// ## 发送消息-数据类型 ##
type SendMessageType int32

const (
	SendMessageType_U_SendUserMessage          SendMessageType = 0
	SendMessageType_U_SendChatMessage          SendMessageType = 1
	SendMessageType_U_SendChannelMessage       SendMessageType = 2
	SendMessageType_U_SendUserMedia            SendMessageType = 3
	SendMessageType_U_SendChatMedia            SendMessageType = 4
	SendMessageType_U_SendChannelMedia         SendMessageType = 5
	SendMessageType_U_EditMessage              SendMessageType = 6
	SendMessageType_U_DeleteMessage            SendMessageType = 7
	SendMessageType_U_ForwardMessage           SendMessageType = 8
	SendMessageType_B_SendUserMessage          SendMessageType = 9
	SendMessageType_B_SendChatMessage          SendMessageType = 10
	SendMessageType_B_SendChannelMessage       SendMessageType = 11
	SendMessageType_B_SendUserMedia            SendMessageType = 12
	SendMessageType_B_SendChatMedia            SendMessageType = 13
	SendMessageType_B_SendChannelMedia         SendMessageType = 14
	SendMessageType_B_EditMessage              SendMessageType = 15
	SendMessageType_B_DeleteMessage            SendMessageType = 16
	SendMessageType_B_ForwardMessage           SendMessageType = 17
	SendMessageType_B_InlineSendUserMessage    SendMessageType = 18
	SendMessageType_B_InlineSendChatMessage    SendMessageType = 19
	SendMessageType_B_InlineSendChannelMessage SendMessageType = 20
	SendMessageType_B_InlineSendUserMedia      SendMessageType = 21
	SendMessageType_B_InlineSendChatMedia      SendMessageType = 22
	SendMessageType_B_InlineSendChannelMedia   SendMessageType = 23
	SendMessageType_U_SendUserMessage_354      SendMessageType = 24
	SendMessageType_U_SendChatMessage_354      SendMessageType = 25
	SendMessageType_U_SendChannelMessage_354   SendMessageType = 26
	SendMessageType_U_SendUserMedia_354        SendMessageType = 27
	SendMessageType_U_SendChatMedia_354        SendMessageType = 28
	SendMessageType_U_SendChannelMedia_354     SendMessageType = 29
)

var SendMessageType_name = map[int32]string{
	0:  "U_SendUserMessage",
	1:  "U_SendChatMessage",
	2:  "U_SendChannelMessage",
	3:  "U_SendUserMedia",
	4:  "U_SendChatMedia",
	5:  "U_SendChannelMedia",
	6:  "U_EditMessage",
	7:  "U_DeleteMessage",
	8:  "U_ForwardMessage",
	9:  "B_SendUserMessage",
	10: "B_SendChatMessage",
	11: "B_SendChannelMessage",
	12: "B_SendUserMedia",
	13: "B_SendChatMedia",
	14: "B_SendChannelMedia",
	15: "B_EditMessage",
	16: "B_DeleteMessage",
	17: "B_ForwardMessage",
	18: "B_InlineSendUserMessage",
	19: "B_InlineSendChatMessage",
	20: "B_InlineSendChannelMessage",
	21: "B_InlineSendUserMedia",
	22: "B_InlineSendChatMedia",
	23: "B_InlineSendChannelMedia",
	24: "U_SendUserMessage_354",
	25: "U_SendChatMessage_354",
	26: "U_SendChannelMessage_354",
	27: "U_SendUserMedia_354",
	28: "U_SendChatMedia_354",
	29: "U_SendChannelMedia_354",
}
var SendMessageType_value = map[string]int32{
	"U_SendUserMessage":          0,
	"U_SendChatMessage":          1,
	"U_SendChannelMessage":       2,
	"U_SendUserMedia":            3,
	"U_SendChatMedia":            4,
	"U_SendChannelMedia":         5,
	"U_EditMessage":              6,
	"U_DeleteMessage":            7,
	"U_ForwardMessage":           8,
	"B_SendUserMessage":          9,
	"B_SendChatMessage":          10,
	"B_SendChannelMessage":       11,
	"B_SendUserMedia":            12,
	"B_SendChatMedia":            13,
	"B_SendChannelMedia":         14,
	"B_EditMessage":              15,
	"B_DeleteMessage":            16,
	"B_ForwardMessage":           17,
	"B_InlineSendUserMessage":    18,
	"B_InlineSendChatMessage":    19,
	"B_InlineSendChannelMessage": 20,
	"B_InlineSendUserMedia":      21,
	"B_InlineSendChatMedia":      22,
	"B_InlineSendChannelMedia":   23,
	"U_SendUserMessage_354":      24,
	"U_SendChatMessage_354":      25,
	"U_SendChannelMessage_354":   26,
	"U_SendUserMedia_354":        27,
	"U_SendChatMedia_354":        28,
	"U_SendChannelMedia_354":     29,
}

func (x SendMessageType) String() string {
	return proto.EnumName(SendMessageType_name, int32(x))
}
func (SendMessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// ## 推送消息-数据对象 ##
type PushMessageData struct {
	Type PushMessageType `protobuf:"varint,1,opt,name=type,enum=datacollect.PushMessageType" json:"type,omitempty"`
	Succ int32           `protobuf:"varint,2,opt,name=succ" json:"succ,omitempty"`
	Fail int32           `protobuf:"varint,3,opt,name=fail" json:"fail,omitempty"`
}

func (m *PushMessageData) Reset()                    { *m = PushMessageData{} }
func (m *PushMessageData) String() string            { return proto.CompactTextString(m) }
func (*PushMessageData) ProtoMessage()               {}
func (*PushMessageData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PushMessageData) GetType() PushMessageType {
	if m != nil {
		return m.Type
	}
	return PushMessageType_ANDROID
}

func (m *PushMessageData) GetSucc() int32 {
	if m != nil {
		return m.Succ
	}
	return 0
}

func (m *PushMessageData) GetFail() int32 {
	if m != nil {
		return m.Fail
	}
	return 0
}

// ## 推送消息-数据对象列表 ##
type PushMessageDataList struct {
	Data      []*PushMessageData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Timestamp int32              `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *PushMessageDataList) Reset()                    { *m = PushMessageDataList{} }
func (m *PushMessageDataList) String() string            { return proto.CompactTextString(m) }
func (*PushMessageDataList) ProtoMessage()               {}
func (*PushMessageDataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PushMessageDataList) GetData() []*PushMessageData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PushMessageDataList) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// ## 发送消息-数据对象列表 ##
type SendMessageDataList struct {
	Data      []*SendMessageData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Timestamp int32              `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *SendMessageDataList) Reset()                    { *m = SendMessageDataList{} }
func (m *SendMessageDataList) String() string            { return proto.CompactTextString(m) }
func (*SendMessageDataList) ProtoMessage()               {}
func (*SendMessageDataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SendMessageDataList) GetData() []*SendMessageData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SendMessageDataList) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// ## 发送消息-数据对象 ##
type SendMessageData struct {
	Type       SendMessageType `protobuf:"varint,1,opt,name=type,enum=datacollect.SendMessageType" json:"type,omitempty"`
	Succ       int32           `protobuf:"varint,2,opt,name=succ" json:"succ,omitempty"`
	Fail       int32           `protobuf:"varint,3,opt,name=fail" json:"fail,omitempty"`
	ErrorCodes []*ErrorData    `protobuf:"bytes,4,rep,name=ErrorCodes" json:"ErrorCodes,omitempty"`
}

func (m *SendMessageData) Reset()                    { *m = SendMessageData{} }
func (m *SendMessageData) String() string            { return proto.CompactTextString(m) }
func (*SendMessageData) ProtoMessage()               {}
func (*SendMessageData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SendMessageData) GetType() SendMessageType {
	if m != nil {
		return m.Type
	}
	return SendMessageType_U_SendUserMessage
}

func (m *SendMessageData) GetSucc() int32 {
	if m != nil {
		return m.Succ
	}
	return 0
}

func (m *SendMessageData) GetFail() int32 {
	if m != nil {
		return m.Fail
	}
	return 0
}

func (m *SendMessageData) GetErrorCodes() []*ErrorData {
	if m != nil {
		return m.ErrorCodes
	}
	return nil
}

// ## 统计次数-数据项列表 ##
type CountDataList struct {
	Data      []*CountData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Timestamp int32        `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *CountDataList) Reset()                    { *m = CountDataList{} }
func (m *CountDataList) String() string            { return proto.CompactTextString(m) }
func (*CountDataList) ProtoMessage()               {}
func (*CountDataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CountDataList) GetData() []*CountData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CountDataList) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// ## 统计次数-数据项 ##
type CountData struct {
	Id   int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Data int64 `protobuf:"varint,2,opt,name=data" json:"data,omitempty"`
}

func (m *CountData) Reset()                    { *m = CountData{} }
func (m *CountData) String() string            { return proto.CompactTextString(m) }
func (*CountData) ProtoMessage()               {}
func (*CountData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CountData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CountData) GetData() int64 {
	if m != nil {
		return m.Data
	}
	return 0
}

// ## 设备信息 ##
type DeviceInfoData struct {
	KeyId         int64  `protobuf:"varint,1,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
	UserId        int32  `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ApiId         int32  `protobuf:"varint,3,opt,name=api_id,json=apiId" json:"api_id,omitempty"`
	UniqueNumber  string `protobuf:"bytes,4,opt,name=unique_number,json=uniqueNumber" json:"unique_number,omitempty"`
	DeviceModel   string `protobuf:"bytes,5,opt,name=device_model,json=deviceModel" json:"device_model,omitempty"`
	SystemVersion string `protobuf:"bytes,6,opt,name=system_version,json=systemVersion" json:"system_version,omitempty"`
	AppVersion    string `protobuf:"bytes,7,opt,name=app_version,json=appVersion" json:"app_version,omitempty"`
	LangCode      string `protobuf:"bytes,8,opt,name=lang_code,json=langCode" json:"lang_code,omitempty"`
}

func (m *DeviceInfoData) Reset()                    { *m = DeviceInfoData{} }
func (m *DeviceInfoData) String() string            { return proto.CompactTextString(m) }
func (*DeviceInfoData) ProtoMessage()               {}
func (*DeviceInfoData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeviceInfoData) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *DeviceInfoData) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeviceInfoData) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *DeviceInfoData) GetUniqueNumber() string {
	if m != nil {
		return m.UniqueNumber
	}
	return ""
}

func (m *DeviceInfoData) GetDeviceModel() string {
	if m != nil {
		return m.DeviceModel
	}
	return ""
}

func (m *DeviceInfoData) GetSystemVersion() string {
	if m != nil {
		return m.SystemVersion
	}
	return ""
}

func (m *DeviceInfoData) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *DeviceInfoData) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

// ## 设备信息列表 ##
type DeviceInfoDataList struct {
	Data      []*DeviceInfoData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Timestamp int32             `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *DeviceInfoDataList) Reset()                    { *m = DeviceInfoDataList{} }
func (m *DeviceInfoDataList) String() string            { return proto.CompactTextString(m) }
func (*DeviceInfoDataList) ProtoMessage()               {}
func (*DeviceInfoDataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeviceInfoDataList) GetData() []*DeviceInfoData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DeviceInfoDataList) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// ## 用户记录信息 ##
type UserTraceData struct {
	KeyId      int64  `protobuf:"varint,1,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
	UserId     int32  `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ApiId      int32  `protobuf:"varint,3,opt,name=api_id,json=apiId" json:"api_id,omitempty"`
	ModuleId   int64  `protobuf:"varint,4,opt,name=module_id,json=moduleId" json:"module_id,omitempty"`
	Phone      string `protobuf:"bytes,5,opt,name=phone" json:"phone,omitempty"`
	ClientIp   string `protobuf:"bytes,6,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	MetaData   string `protobuf:"bytes,7,opt,name=meta_data,json=metaData" json:"meta_data,omitempty"`
	Timestamp  int32  `protobuf:"varint,8,opt,name=timestamp" json:"timestamp,omitempty"`
	AppVersion string `protobuf:"bytes,9,opt,name=app_version,json=appVersion" json:"app_version,omitempty"`
}

func (m *UserTraceData) Reset()                    { *m = UserTraceData{} }
func (m *UserTraceData) String() string            { return proto.CompactTextString(m) }
func (*UserTraceData) ProtoMessage()               {}
func (*UserTraceData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UserTraceData) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *UserTraceData) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserTraceData) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *UserTraceData) GetModuleId() int64 {
	if m != nil {
		return m.ModuleId
	}
	return 0
}

func (m *UserTraceData) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserTraceData) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *UserTraceData) GetMetaData() string {
	if m != nil {
		return m.MetaData
	}
	return ""
}

func (m *UserTraceData) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UserTraceData) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

// ## 用户记录信息列表 ##
type UserTraceDataList struct {
	Data      []*UserTraceData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Timestamp int32            `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *UserTraceDataList) Reset()                    { *m = UserTraceDataList{} }
func (m *UserTraceDataList) String() string            { return proto.CompactTextString(m) }
func (*UserTraceDataList) ProtoMessage()               {}
func (*UserTraceDataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UserTraceDataList) GetData() []*UserTraceData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UserTraceDataList) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type UserSessionData struct {
	KeyId      int64 `protobuf:"varint,1,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
	UserId     int32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OnlineFlag int32 `protobuf:"varint,3,opt,name=online_flag,json=onlineFlag" json:"online_flag,omitempty"`
	ApiId      int32 `protobuf:"varint,4,opt,name=api_id,json=apiId" json:"api_id,omitempty"`
}

func (m *UserSessionData) Reset()                    { *m = UserSessionData{} }
func (m *UserSessionData) String() string            { return proto.CompactTextString(m) }
func (*UserSessionData) ProtoMessage()               {}
func (*UserSessionData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UserSessionData) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *UserSessionData) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserSessionData) GetOnlineFlag() int32 {
	if m != nil {
		return m.OnlineFlag
	}
	return 0
}

func (m *UserSessionData) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

type UserSessionDataList struct {
	Data      []*UserSessionData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Timestamp int32              `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *UserSessionDataList) Reset()                    { *m = UserSessionDataList{} }
func (m *UserSessionDataList) String() string            { return proto.CompactTextString(m) }
func (*UserSessionDataList) ProtoMessage()               {}
func (*UserSessionDataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UserSessionDataList) GetData() []*UserSessionData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UserSessionDataList) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// 语音时长
type AudioVoiceData struct {
	Duration  int64 `protobuf:"varint,1,opt,name=duration" json:"duration,omitempty"`
	Timestamp int32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	ApiId     int32 `protobuf:"varint,3,opt,name=api_id,json=apiId" json:"api_id,omitempty"`
}

func (m *AudioVoiceData) Reset()                    { *m = AudioVoiceData{} }
func (m *AudioVoiceData) String() string            { return proto.CompactTextString(m) }
func (*AudioVoiceData) ProtoMessage()               {}
func (*AudioVoiceData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AudioVoiceData) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *AudioVoiceData) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AudioVoiceData) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

type AudioVoiceDataList struct {
	Data      []*AudioVoiceData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Timestamp int32             `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *AudioVoiceDataList) Reset()                    { *m = AudioVoiceDataList{} }
func (m *AudioVoiceDataList) String() string            { return proto.CompactTextString(m) }
func (*AudioVoiceDataList) ProtoMessage()               {}
func (*AudioVoiceDataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AudioVoiceDataList) GetData() []*AudioVoiceData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AudioVoiceDataList) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// 电话时长
type PhoneCallData struct {
	Duration  int64 `protobuf:"varint,1,opt,name=duration" json:"duration,omitempty"`
	Timestamp int32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	ApiId     int32 `protobuf:"varint,3,opt,name=api_id,json=apiId" json:"api_id,omitempty"`
}

func (m *PhoneCallData) Reset()                    { *m = PhoneCallData{} }
func (m *PhoneCallData) String() string            { return proto.CompactTextString(m) }
func (*PhoneCallData) ProtoMessage()               {}
func (*PhoneCallData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PhoneCallData) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *PhoneCallData) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PhoneCallData) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

type PhoneCallDataList struct {
	Data      []*PhoneCallData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Timestamp int32            `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *PhoneCallDataList) Reset()                    { *m = PhoneCallDataList{} }
func (m *PhoneCallDataList) String() string            { return proto.CompactTextString(m) }
func (*PhoneCallDataList) ProtoMessage()               {}
func (*PhoneCallDataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PhoneCallDataList) GetData() []*PhoneCallData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PhoneCallDataList) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// 文件上传
type FileUploadData struct {
	Type MimeType `protobuf:"varint,1,opt,name=type,enum=datacollect.MimeType" json:"type,omitempty"`
	Succ int32    `protobuf:"varint,2,opt,name=succ" json:"succ,omitempty"`
	Fail int32    `protobuf:"varint,3,opt,name=fail" json:"fail,omitempty"`
}

func (m *FileUploadData) Reset()                    { *m = FileUploadData{} }
func (m *FileUploadData) String() string            { return proto.CompactTextString(m) }
func (*FileUploadData) ProtoMessage()               {}
func (*FileUploadData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FileUploadData) GetType() MimeType {
	if m != nil {
		return m.Type
	}
	return MimeType_UNKNOWN
}

func (m *FileUploadData) GetSucc() int32 {
	if m != nil {
		return m.Succ
	}
	return 0
}

func (m *FileUploadData) GetFail() int32 {
	if m != nil {
		return m.Fail
	}
	return 0
}

// 文件上传list
type FileUploadDataList struct {
	Data      []*FileUploadData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Timestamp int32             `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *FileUploadDataList) Reset()                    { *m = FileUploadDataList{} }
func (m *FileUploadDataList) String() string            { return proto.CompactTextString(m) }
func (*FileUploadDataList) ProtoMessage()               {}
func (*FileUploadDataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *FileUploadDataList) GetData() []*FileUploadData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FileUploadDataList) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// 文件下载
type FileDownloadData struct {
	Type MimeType `protobuf:"varint,1,opt,name=type,enum=datacollect.MimeType" json:"type,omitempty"`
	Succ int32    `protobuf:"varint,2,opt,name=succ" json:"succ,omitempty"`
	Fail int32    `protobuf:"varint,3,opt,name=fail" json:"fail,omitempty"`
}

func (m *FileDownloadData) Reset()                    { *m = FileDownloadData{} }
func (m *FileDownloadData) String() string            { return proto.CompactTextString(m) }
func (*FileDownloadData) ProtoMessage()               {}
func (*FileDownloadData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *FileDownloadData) GetType() MimeType {
	if m != nil {
		return m.Type
	}
	return MimeType_UNKNOWN
}

func (m *FileDownloadData) GetSucc() int32 {
	if m != nil {
		return m.Succ
	}
	return 0
}

func (m *FileDownloadData) GetFail() int32 {
	if m != nil {
		return m.Fail
	}
	return 0
}

// 文件下载list
type FileDownloadDataList struct {
	Data      []*FileDownloadData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Timestamp int32               `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *FileDownloadDataList) Reset()                    { *m = FileDownloadDataList{} }
func (m *FileDownloadDataList) String() string            { return proto.CompactTextString(m) }
func (*FileDownloadDataList) ProtoMessage()               {}
func (*FileDownloadDataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *FileDownloadDataList) GetData() []*FileDownloadData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FileDownloadDataList) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// 文件下载 fid
type FileDownloadIdData struct {
	Id         int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash" json:"access_hash,omitempty"`
	Succ       int32 `protobuf:"varint,3,opt,name=succ" json:"succ,omitempty"`
	Fail       int32 `protobuf:"varint,4,opt,name=fail" json:"fail,omitempty"`
}

func (m *FileDownloadIdData) Reset()                    { *m = FileDownloadIdData{} }
func (m *FileDownloadIdData) String() string            { return proto.CompactTextString(m) }
func (*FileDownloadIdData) ProtoMessage()               {}
func (*FileDownloadIdData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *FileDownloadIdData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FileDownloadIdData) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *FileDownloadIdData) GetSucc() int32 {
	if m != nil {
		return m.Succ
	}
	return 0
}

func (m *FileDownloadIdData) GetFail() int32 {
	if m != nil {
		return m.Fail
	}
	return 0
}

// 文件下载fid list
type FileDownloadIdDataList struct {
	Data      []*FileDownloadIdData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Timestamp int32                 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *FileDownloadIdDataList) Reset()                    { *m = FileDownloadIdDataList{} }
func (m *FileDownloadIdDataList) String() string            { return proto.CompactTextString(m) }
func (*FileDownloadIdDataList) ProtoMessage()               {}
func (*FileDownloadIdDataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *FileDownloadIdDataList) GetData() []*FileDownloadIdData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FileDownloadIdDataList) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type UserExpansionData struct {
	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Data   string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *UserExpansionData) Reset()                    { *m = UserExpansionData{} }
func (m *UserExpansionData) String() string            { return proto.CompactTextString(m) }
func (*UserExpansionData) ProtoMessage()               {}
func (*UserExpansionData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *UserExpansionData) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserExpansionData) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ActiveGroupData struct {
	Type int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Data int32 `protobuf:"varint,2,opt,name=data" json:"data,omitempty"`
}

func (m *ActiveGroupData) Reset()                    { *m = ActiveGroupData{} }
func (m *ActiveGroupData) String() string            { return proto.CompactTextString(m) }
func (*ActiveGroupData) ProtoMessage()               {}
func (*ActiveGroupData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ActiveGroupData) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ActiveGroupData) GetData() int32 {
	if m != nil {
		return m.Data
	}
	return 0
}

// 活跃群
type ActiveGroupDataList struct {
	Data      []*ActiveGroupData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Timestamp int32              `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ActiveGroupDataList) Reset()                    { *m = ActiveGroupDataList{} }
func (m *ActiveGroupDataList) String() string            { return proto.CompactTextString(m) }
func (*ActiveGroupDataList) ProtoMessage()               {}
func (*ActiveGroupDataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ActiveGroupDataList) GetData() []*ActiveGroupData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ActiveGroupDataList) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// 活跃群id
type ActiveGroupIdData struct {
	GroupId   int32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	GroupType int32 `protobuf:"varint,2,opt,name=group_type,json=groupType" json:"group_type,omitempty"`
}

func (m *ActiveGroupIdData) Reset()                    { *m = ActiveGroupIdData{} }
func (m *ActiveGroupIdData) String() string            { return proto.CompactTextString(m) }
func (*ActiveGroupIdData) ProtoMessage()               {}
func (*ActiveGroupIdData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ActiveGroupIdData) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *ActiveGroupIdData) GetGroupType() int32 {
	if m != nil {
		return m.GroupType
	}
	return 0
}

type ActiveGroupIdDataList struct {
	GroupIds  []int32 `protobuf:"varint,1,rep,packed,name=group_ids,json=groupIds" json:"group_ids,omitempty"`
	GroupType int32   `protobuf:"varint,2,opt,name=group_type,json=groupType" json:"group_type,omitempty"`
	Timestamp int32   `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ActiveGroupIdDataList) Reset()                    { *m = ActiveGroupIdDataList{} }
func (m *ActiveGroupIdDataList) String() string            { return proto.CompactTextString(m) }
func (*ActiveGroupIdDataList) ProtoMessage()               {}
func (*ActiveGroupIdDataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ActiveGroupIdDataList) GetGroupIds() []int32 {
	if m != nil {
		return m.GroupIds
	}
	return nil
}

func (m *ActiveGroupIdDataList) GetGroupType() int32 {
	if m != nil {
		return m.GroupType
	}
	return 0
}

func (m *ActiveGroupIdDataList) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ErrorData struct {
	Code  int32 `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
}

func (m *ErrorData) Reset()                    { *m = ErrorData{} }
func (m *ErrorData) String() string            { return proto.CompactTextString(m) }
func (*ErrorData) ProtoMessage()               {}
func (*ErrorData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ErrorData) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ErrorData) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*PushMessageData)(nil), "datacollect.PushMessageData")
	proto.RegisterType((*PushMessageDataList)(nil), "datacollect.PushMessageDataList")
	proto.RegisterType((*SendMessageDataList)(nil), "datacollect.SendMessageDataList")
	proto.RegisterType((*SendMessageData)(nil), "datacollect.SendMessageData")
	proto.RegisterType((*CountDataList)(nil), "datacollect.CountDataList")
	proto.RegisterType((*CountData)(nil), "datacollect.CountData")
	proto.RegisterType((*DeviceInfoData)(nil), "datacollect.DeviceInfoData")
	proto.RegisterType((*DeviceInfoDataList)(nil), "datacollect.DeviceInfoDataList")
	proto.RegisterType((*UserTraceData)(nil), "datacollect.UserTraceData")
	proto.RegisterType((*UserTraceDataList)(nil), "datacollect.UserTraceDataList")
	proto.RegisterType((*UserSessionData)(nil), "datacollect.UserSessionData")
	proto.RegisterType((*UserSessionDataList)(nil), "datacollect.UserSessionDataList")
	proto.RegisterType((*AudioVoiceData)(nil), "datacollect.AudioVoiceData")
	proto.RegisterType((*AudioVoiceDataList)(nil), "datacollect.AudioVoiceDataList")
	proto.RegisterType((*PhoneCallData)(nil), "datacollect.PhoneCallData")
	proto.RegisterType((*PhoneCallDataList)(nil), "datacollect.PhoneCallDataList")
	proto.RegisterType((*FileUploadData)(nil), "datacollect.FileUploadData")
	proto.RegisterType((*FileUploadDataList)(nil), "datacollect.FileUploadDataList")
	proto.RegisterType((*FileDownloadData)(nil), "datacollect.FileDownloadData")
	proto.RegisterType((*FileDownloadDataList)(nil), "datacollect.FileDownloadDataList")
	proto.RegisterType((*FileDownloadIdData)(nil), "datacollect.FileDownloadIdData")
	proto.RegisterType((*FileDownloadIdDataList)(nil), "datacollect.FileDownloadIdDataList")
	proto.RegisterType((*UserExpansionData)(nil), "datacollect.UserExpansionData")
	proto.RegisterType((*ActiveGroupData)(nil), "datacollect.ActiveGroupData")
	proto.RegisterType((*ActiveGroupDataList)(nil), "datacollect.ActiveGroupDataList")
	proto.RegisterType((*ActiveGroupIdData)(nil), "datacollect.ActiveGroupIdData")
	proto.RegisterType((*ActiveGroupIdDataList)(nil), "datacollect.ActiveGroupIdDataList")
	proto.RegisterType((*ErrorData)(nil), "datacollect.ErrorData")
	proto.RegisterEnum("datacollect.CollectTopic", CollectTopic_name, CollectTopic_value)
	proto.RegisterEnum("datacollect.CollectKey", CollectKey_name, CollectKey_value)
	proto.RegisterEnum("datacollect.CollectGroup", CollectGroup_name, CollectGroup_value)
	proto.RegisterEnum("datacollect.LinkInformation", LinkInformation_name, LinkInformation_value)
	proto.RegisterEnum("datacollect.MimeType", MimeType_name, MimeType_value)
	proto.RegisterEnum("datacollect.PushMessageType", PushMessageType_name, PushMessageType_value)
	proto.RegisterEnum("datacollect.SendMessageType", SendMessageType_name, SendMessageType_value)
}

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/datacollect/datacollect.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xdb, 0x72, 0xa3, 0xd8,
	0x15, 0xb5, 0x6e, 0xb6, 0xb4, 0xe5, 0x0b, 0x3e, 0xbe, 0xb4, 0xda, 0xee, 0x4e, 0x3b, 0x4e, 0xa5,
	0xd2, 0xf1, 0x83, 0x9d, 0xa4, 0x33, 0xa9, 0xca, 0x5b, 0x90, 0xc0, 0x6e, 0xd2, 0xb2, 0x50, 0xe9,
	0xd6, 0x33, 0x4f, 0xe4, 0x18, 0x8e, 0x25, 0xca, 0x08, 0x18, 0x40, 0xee, 0xf8, 0x35, 0x95, 0x3f,
	0xc9, 0x6b, 0x7e, 0x22, 0x9f, 0x94, 0x3f, 0x48, 0xed, 0x73, 0x00, 0x01, 0x72, 0x8f, 0x35, 0x53,
	0x99, 0x37, 0x58, 0xfb, 0xba, 0xd6, 0x3e, 0x17, 0x24, 0x68, 0x4f, 0xed, 0xc8, 0xa1, 0x77, 0x97,
	0xe6, 0x8c, 0x46, 0x21, 0x0b, 0x1e, 0x59, 0x70, 0x69, 0xcf, 0xaf, 0x6c, 0x37, 0x62, 0xc1, 0x3d,
	0x35, 0x99, 0x1f, 0x78, 0x77, 0x8b, 0xfb, 0x2b, 0x8b, 0x46, 0xd4, 0xf4, 0x1c, 0x87, 0x99, 0x51,
	0xf6, 0xf9, 0xd2, 0x0f, 0xbc, 0xc8, 0x23, 0xcd, 0x0c, 0x74, 0xfe, 0x00, 0x7b, 0xfd, 0x45, 0x38,
	0xbb, 0x65, 0x61, 0x48, 0xa7, 0x4c, 0xa1, 0x11, 0x25, 0xbf, 0x83, 0x6a, 0xf4, 0xe4, 0xb3, 0x56,
	0xe9, 0xac, 0xf4, 0x7e, 0xf7, 0x0f, 0x6f, 0x2e, 0xb3, 0x19, 0x32, 0xbe, 0xa3, 0x27, 0x9f, 0x0d,
	0xb8, 0x27, 0x21, 0x50, 0x0d, 0x17, 0xa6, 0xd9, 0x2a, 0x9f, 0x95, 0xde, 0xd7, 0x06, 0xfc, 0x19,
	0xb1, 0x7b, 0x6a, 0x3b, 0xad, 0x8a, 0xc0, 0xf0, 0xf9, 0x9c, 0xc1, 0x41, 0xa1, 0x58, 0xd7, 0x0e,
	0x23, 0x2c, 0x88, 0x35, 0x5a, 0xa5, 0xb3, 0xca, 0xfb, 0xe6, 0xd7, 0x0b, 0xa2, 0xff, 0x80, 0x7b,
	0x92, 0x37, 0xd0, 0x88, 0xec, 0x39, 0x0b, 0x23, 0x3a, 0xf7, 0xe3, 0xaa, 0x4b, 0x00, 0xcb, 0x0c,
	0x99, 0x6b, 0xfd, 0x98, 0x32, 0x05, 0xff, 0xb5, 0xca, 0xfc, 0xab, 0x04, 0x7b, 0x85, 0xb8, 0x1f,
	0xd4, 0x2e, 0xe3, 0xfb, 0xe3, 0xb5, 0x23, 0x7f, 0x02, 0x50, 0x83, 0xc0, 0x0b, 0x3a, 0x9e, 0xc5,
	0xc2, 0x56, 0x95, 0x73, 0x38, 0xce, 0xe5, 0xe7, 0x66, 0xde, 0x7d, 0xc6, 0xf3, 0xfc, 0x3b, 0xd8,
	0xe9, 0x78, 0x0b, 0x37, 0x4a, 0x65, 0xb8, 0xc8, 0xc9, 0x90, 0x4f, 0x91, 0x7a, 0xae, 0x25, 0xc0,
	0x15, 0x34, 0xd2, 0x00, 0xb2, 0x0b, 0x65, 0xdb, 0xe2, 0xbc, 0x2b, 0x83, 0xb2, 0x6d, 0x21, 0x07,
	0x5e, 0xa6, 0xcc, 0x11, 0xfe, 0x7c, 0xfe, 0xcf, 0x32, 0xec, 0x2a, 0xec, 0xd1, 0x36, 0x99, 0xe6,
	0xde, 0x7b, 0x3c, 0xec, 0x08, 0x36, 0x1f, 0xd8, 0x93, 0x91, 0x86, 0xd6, 0x1e, 0xd8, 0x93, 0x66,
	0x91, 0x57, 0xb0, 0xb5, 0x08, 0x59, 0x80, 0xb8, 0x28, 0xbb, 0x89, 0xaf, 0x9a, 0x85, 0xfe, 0xd4,
	0xb7, 0x11, 0x17, 0xe2, 0xd4, 0xa8, 0x6f, 0x6b, 0x16, 0xf9, 0x15, 0xec, 0x2c, 0x5c, 0xfb, 0xfb,
	0x05, 0x33, 0xdc, 0xc5, 0xfc, 0x8e, 0x05, 0xad, 0xea, 0x59, 0xe9, 0x7d, 0x63, 0xb0, 0x2d, 0xc0,
	0x1e, 0xc7, 0xc8, 0x2f, 0x61, 0xdb, 0xe2, 0xd5, 0x8d, 0xb9, 0x67, 0x31, 0xa7, 0x55, 0xe3, 0x3e,
	0x4d, 0x81, 0xdd, 0x22, 0x44, 0x7e, 0x0d, 0xbb, 0xe1, 0x53, 0x18, 0xb1, 0xb9, 0xf1, 0xc8, 0x82,
	0xd0, 0xf6, 0xdc, 0xd6, 0x26, 0x77, 0xda, 0x11, 0xe8, 0x44, 0x80, 0xe4, 0x1d, 0x34, 0xa9, 0xef,
	0xa7, 0x3e, 0x5b, 0xdc, 0x07, 0xa8, 0xef, 0x27, 0x0e, 0xa7, 0xd0, 0x70, 0xa8, 0x3b, 0x35, 0x4c,
	0xcf, 0x62, 0xad, 0x3a, 0x37, 0xd7, 0x11, 0xc0, 0x99, 0x9c, 0x9b, 0x40, 0xf2, 0x2a, 0xf0, 0xb9,
	0x5c, 0xe5, 0xe6, 0x72, 0x9a, 0x9b, 0x4b, 0xde, 0x7d, 0xad, 0xe1, 0xfc, 0xa3, 0x0c, 0x3b, 0xe3,
	0x90, 0x05, 0xa3, 0x80, 0x9a, 0xec, 0xff, 0x29, 0xf5, 0x29, 0x34, 0xe6, 0x9e, 0xb5, 0x70, 0x18,
	0x5a, 0xaa, 0x3c, 0x53, 0x5d, 0x00, 0x9a, 0x45, 0x0e, 0xa1, 0xe6, 0xcf, 0x3c, 0x97, 0xc5, 0xda,
	0x8a, 0x17, 0x0c, 0x31, 0x1d, 0x9b, 0xb9, 0x91, 0x61, 0xfb, 0xb1, 0xa0, 0x75, 0x01, 0x68, 0x3e,
	0xcf, 0xc7, 0x22, 0x6a, 0x70, 0xf2, 0x42, 0xc9, 0x3a, 0x02, 0xca, 0x0a, 0xc7, 0x7a, 0x81, 0x63,
	0x71, 0x0c, 0x8d, 0xe2, 0x18, 0xce, 0x29, 0xec, 0xe7, 0x34, 0xe0, 0x42, 0x5f, 0xe6, 0x84, 0x3e,
	0xc9, 0x09, 0x9d, 0xf3, 0x5e, 0x4b, 0xe7, 0x27, 0xd8, 0xc3, 0xa0, 0x21, 0x0b, 0xb1, 0xe2, 0x4f,
	0x12, 0xfa, 0x1d, 0x34, 0x3d, 0xd7, 0xb1, 0x5d, 0x66, 0xdc, 0x3b, 0x74, 0x1a, 0xab, 0x0d, 0x02,
	0xba, 0x76, 0xe8, 0x34, 0x33, 0x89, 0x6a, 0x66, 0x12, 0x78, 0xce, 0x15, 0x4a, 0xbf, 0x78, 0xce,
	0x15, 0xfc, 0xd7, 0x62, 0x48, 0x61, 0x57, 0x5e, 0x58, 0xb6, 0x37, 0xf1, 0xec, 0x78, 0x25, 0x9d,
	0x40, 0xdd, 0x5a, 0x04, 0x34, 0x42, 0xd1, 0x05, 0xc5, 0xf4, 0xfd, 0x87, 0x73, 0x7d, 0x65, 0x4d,
	0xe1, 0x8e, 0xc8, 0x97, 0x78, 0x71, 0x47, 0xe4, 0xdd, 0xd7, 0xe2, 0xf1, 0x37, 0xd8, 0xe9, 0xe3,
	0x72, 0xec, 0x50, 0xc7, 0xf9, 0x79, 0x68, 0x50, 0xd8, 0xcf, 0x55, 0x78, 0x71, 0xb9, 0xe5, 0xbc,
	0xd7, 0x22, 0x61, 0xc2, 0xee, 0xb5, 0xed, 0xb0, 0xb1, 0xef, 0x78, 0xd4, 0xe2, 0x2c, 0x7e, 0x9b,
	0xbb, 0x72, 0x8e, 0x72, 0xf9, 0x6f, 0xed, 0xf9, 0x4f, 0xb9, 0xa7, 0x4d, 0x20, 0xf9, 0x22, 0x2f,
	0x8e, 0x23, 0xef, 0xbe, 0xe6, 0x2d, 0x2d, 0x61, 0x94, 0xe2, 0x7d, 0x71, 0x7f, 0x4e, 0x2e, 0x53,
	0x38, 0x2c, 0x96, 0xe1, 0x6c, 0x7e, 0x9f, 0x63, 0xf3, 0x76, 0x85, 0x4d, 0x36, 0x60, 0x2d, 0x3e,
	0x73, 0x21, 0x5a, 0x12, 0xa7, 0x59, 0xcf, 0x5e, 0x8b, 0x78, 0x64, 0x99, 0x26, 0x0b, 0x43, 0x63,
	0x46, 0xc3, 0x59, 0x7c, 0x3b, 0x82, 0x80, 0x3e, 0xd2, 0x70, 0x96, 0xf2, 0xaa, 0x3c, 0xc3, 0xab,
	0x9a, 0xe1, 0xf5, 0x00, 0xc7, 0xab, 0xe5, 0x38, 0xb3, 0x0f, 0x39, 0x66, 0xef, 0xbe, 0xca, 0x4c,
	0x5b, 0x9f, 0xdb, 0x5f, 0xc4, 0x39, 0xaa, 0xfe, 0xdd, 0xa7, 0x6e, 0x7a, 0xcc, 0x65, 0xce, 0xb3,
	0x52, 0xee, 0x3c, 0xcb, 0x5e, 0xfd, 0x8d, 0xf8, 0xea, 0xff, 0x33, 0xec, 0xc9, 0x66, 0x64, 0x3f,
	0xb2, 0x9b, 0xc0, 0x5b, 0xf8, 0x3c, 0x9e, 0x64, 0x86, 0x5d, 0x5b, 0x4e, 0x35, 0x0d, 0xad, 0xc5,
	0xa1, 0x0c, 0x0e, 0x0a, 0xa1, 0x2f, 0x1e, 0x73, 0x05, 0xff, 0xb5, 0x38, 0xde, 0xc2, 0x7e, 0x26,
	0x2c, 0x1e, 0xdf, 0x6b, 0xa8, 0x4f, 0xf1, 0x75, 0x49, 0x72, 0x6b, 0x2a, 0xcc, 0xe4, 0x2d, 0x80,
	0x30, 0x71, 0x12, 0x71, 0x3a, 0x8e, 0xe0, 0x2a, 0x3d, 0xff, 0x1e, 0x8e, 0x56, 0xd2, 0xf1, 0xbe,
	0x4f, 0xa1, 0x91, 0xa4, 0x0c, 0x79, 0xf3, 0xb5, 0x41, 0x3d, 0xce, 0x19, 0xbe, 0x90, 0x34, 0xcf,
	0xa0, 0x52, 0x64, 0xf0, 0x0d, 0x34, 0xd2, 0x6f, 0x40, 0x54, 0x12, 0x3f, 0x36, 0x12, 0x75, 0xf1,
	0x19, 0x6f, 0x67, 0xfe, 0xc1, 0x16, 0x27, 0x16, 0x2f, 0x17, 0xff, 0x2e, 0xc1, 0x76, 0x47, 0x08,
	0x37, 0xf2, 0x7c, 0xdb, 0x24, 0xfb, 0xb0, 0x33, 0xd2, 0xfb, 0x5a, 0xc7, 0x50, 0xd4, 0x6b, 0x79,
	0xdc, 0x1d, 0x49, 0x1b, 0xe4, 0x08, 0xf6, 0x13, 0x68, 0xa2, 0x75, 0x54, 0x43, 0xeb, 0x5d, 0xeb,
	0x52, 0x89, 0x1c, 0x03, 0x11, 0x70, 0x7f, 0x3c, 0xfc, 0x68, 0xdc, 0xaa, 0xc3, 0xa1, 0x7c, 0xa3,
	0x4a, 0xe5, 0x25, 0x3e, 0x54, 0x7b, 0x4a, 0x8a, 0x57, 0xc8, 0x21, 0x48, 0x02, 0xef, 0xe8, 0xe3,
	0xde, 0xc8, 0x50, 0xe4, 0x91, 0x2c, 0x55, 0x97, 0xe8, 0x78, 0xa8, 0x0e, 0x8c, 0xd1, 0x40, 0xee,
	0xa8, 0x52, 0x6d, 0x99, 0x83, 0xa3, 0x43, 0x75, 0x38, 0xd4, 0xf4, 0x9e, 0xb4, 0x79, 0xf1, 0x9f,
	0x32, 0x40, 0xdc, 0xee, 0x27, 0xf6, 0x44, 0x0e, 0x60, 0xef, 0x93, 0xfa, 0x5d, 0xae, 0xaf, 0x0d,
	0xcc, 0x88, 0x60, 0xae, 0xab, 0x52, 0x82, 0xe6, 0x7a, 0x2a, 0x13, 0x02, 0xbb, 0x88, 0x66, 0x3a,
	0xaa, 0x24, 0x58, 0xa6, 0x9f, 0x6a, 0x12, 0x9d, 0xeb, 0xa6, 0x96, 0x94, 0xbf, 0xd6, 0xba, 0xaa,
	0x31, 0xee, 0x77, 0x75, 0x59, 0x91, 0x36, 0x51, 0xad, 0x14, 0x54, 0xf4, 0xcf, 0x3d, 0x0e, 0x6f,
	0x25, 0xbe, 0xf2, 0x58, 0xd1, 0x74, 0x63, 0xa2, 0x6b, 0x1d, 0x55, 0xaa, 0x27, 0xa5, 0xfa, 0x1f,
	0xf5, 0x9e, 0x6a, 0x74, 0xe4, 0x6e, 0x57, 0x6a, 0x90, 0x16, 0x1c, 0xae, 0xc4, 0x1b, 0x9a, 0x22,
	0x01, 0x8a, 0x92, 0x36, 0xa1, 0x7e, 0xdb, 0x97, 0x7b, 0xbc, 0x8d, 0x66, 0xd2, 0x9c, 0xdc, 0x19,
	0x69, 0x13, 0xd5, 0xb8, 0x19, 0xe8, 0xe3, 0xbe, 0xb4, 0x4d, 0x5e, 0xc1, 0x41, 0x11, 0xc5, 0x34,
	0x3b, 0x17, 0xa3, 0x74, 0xe2, 0x7c, 0x75, 0x62, 0x41, 0x61, 0xbd, 0xd5, 0x7b, 0xda, 0x48, 0x47,
	0x82, 0x83, 0x89, 0x3a, 0x90, 0x36, 0xc8, 0x1b, 0x68, 0x09, 0x4b, 0x9c, 0x24, 0xa6, 0xcf, 0xad,
	0x25, 0xb2, 0x0d, 0x75, 0x61, 0x6d, 0xdf, 0x48, 0xe5, 0x8b, 0xdf, 0xc0, 0x5e, 0xd7, 0x76, 0x1f,
	0xf0, 0x33, 0x35, 0x98, 0x8b, 0x6b, 0xf4, 0x10, 0x24, 0x3f, 0x32, 0xe6, 0x9e, 0x6b, 0x47, 0x5e,
	0x60, 0x3c, 0xd0, 0xfb, 0x07, 0x2a, 0x6d, 0x5c, 0x7c, 0x81, 0x7a, 0x72, 0x9a, 0x93, 0x26, 0x6c,
	0x8d, 0x7b, 0x9f, 0x7a, 0xfa, 0xe7, 0x9e, 0xb4, 0x41, 0xf6, 0xa0, 0x29, 0xf7, 0xfb, 0x5d, 0xad,
	0x23, 0x8f, 0x90, 0x57, 0x89, 0xd4, 0xa1, 0x3a, 0x52, 0xbf, 0x1d, 0x49, 0x65, 0xd2, 0x80, 0x9a,
	0x76, 0x2b, 0x56, 0x51, 0x03, 0x6a, 0x5c, 0x43, 0xa9, 0x8a, 0x8f, 0x13, 0x4d, 0x51, 0x75, 0xa9,
	0x86, 0x89, 0x92, 0xa1, 0x6e, 0xe2, 0x8b, 0x32, 0x90, 0x3f, 0x6b, 0xbd, 0x1b, 0x69, 0x0b, 0x93,
	0xfc, 0x55, 0x9e, 0xc8, 0x52, 0x1d, 0x3b, 0x2c, 0xfc, 0x82, 0x45, 0x4f, 0xb9, 0xa7, 0x0c, 0x74,
	0x4d, 0x91, 0x36, 0xc8, 0x16, 0x54, 0x34, 0x7d, 0x28, 0x95, 0x2e, 0xfe, 0x5b, 0xcb, 0xfd, 0xb6,
	0xe3, 0x9e, 0x47, 0xb0, 0x3f, 0x36, 0x10, 0xc4, 0xa3, 0x30, 0x36, 0x88, 0xad, 0x21, 0xe0, 0xce,
	0x8c, 0x46, 0x09, 0x5c, 0x42, 0x49, 0x53, 0xd8, 0x75, 0x99, 0x93, 0x58, 0xca, 0xb8, 0x0c, 0xb2,
	0x79, 0x2c, 0x9b, 0x4a, 0x95, 0x25, 0x28, 0xb2, 0x20, 0x58, 0xc5, 0x69, 0x17, 0x72, 0x20, 0x5e,
	0xc3, 0x0d, 0x3a, 0x36, 0x54, 0xcb, 0x4e, 0xcb, 0x6d, 0x8a, 0x78, 0x85, 0x39, 0x2c, 0x62, 0x09,
	0xb8, 0x85, 0xea, 0x8f, 0x8d, 0x6b, 0x2f, 0xf8, 0x42, 0x83, 0x84, 0x89, 0x54, 0xc7, 0x86, 0xdb,
	0x2b, 0x3c, 0x1a, 0x4b, 0x38, 0xcb, 0x03, 0x90, 0x47, 0xfb, 0x39, 0x1e, 0x4d, 0x2c, 0xd9, 0x2e,
	0xf0, 0xd8, 0x5e, 0x82, 0x4b, 0x1e, 0x3b, 0xc8, 0xa3, 0xbd, 0xca, 0x63, 0x17, 0x79, 0xb4, 0x73,
	0x3c, 0xf6, 0x44, 0x7c, 0x9e, 0x87, 0x84, 0x3c, 0xda, 0x45, 0x1e, 0xfb, 0xe4, 0x14, 0x5e, 0xb5,
	0x0d, 0x8d, 0x7f, 0x25, 0x17, 0xd9, 0x90, 0xa2, 0x31, 0xcb, 0xe9, 0x80, 0xfc, 0x02, 0x4e, 0x0a,
	0xc6, 0x2c, 0xb3, 0x43, 0xf2, 0x1a, 0x8e, 0x56, 0x33, 0x63, 0xcb, 0x47, 0x45, 0xd3, 0x92, 0xe5,
	0x31, 0x6e, 0x95, 0x67, 0xb3, 0xa2, 0xf5, 0x15, 0x06, 0xae, 0xac, 0x1e, 0xe3, 0xc3, 0x37, 0x7f,
	0x94, 0x5a, 0x4b, 0x53, 0xa6, 0x4b, 0x6e, 0x7a, 0x8d, 0x39, 0x9f, 0x5b, 0x45, 0xdc, 0x7a, 0x82,
	0xfb, 0xbb, 0xb0, 0x92, 0xb8, 0xe1, 0x74, 0x69, 0x48, 0xfb, 0xe3, 0x86, 0x37, 0xe4, 0x04, 0x8e,
	0x57, 0x57, 0x14, 0xb7, 0xbd, 0x6d, 0x5f, 0xc1, 0x99, 0x3d, 0xbf, 0xbc, 0xb3, 0xa7, 0x78, 0x59,
	0x5e, 0xce, 0xa8, 0x6b, 0x39, 0xb6, 0x3b, 0xbd, 0xb4, 0xbc, 0x39, 0xb5, 0x5d, 0xf1, 0xdf, 0x51,
	0xbb, 0x89, 0x77, 0x4b, 0x7c, 0x74, 0xdc, 0x6d, 0x72, 0xec, 0xc3, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x53, 0x30, 0x89, 0x36, 0x95, 0x12, 0x00, 0x00,
}
