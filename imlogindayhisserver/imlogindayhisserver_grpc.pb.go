// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imlogindayhisserver.proto

package imlogindayhisserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImLoginDayHisServerClient is the client API for ImLoginDayHisServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImLoginDayHisServerClient interface {
	// 设置本日登录
	SetLoginHisDay(ctx context.Context, in *SetLoginHisDayReq, opts ...grpc.CallOption) (*SetLoginHisDayResult, error)
	// 判断本日是否登录
	GetNowDayHisDay(ctx context.Context, in *GetNowDayHisDayReq, opts ...grpc.CallOption) (*GetNowDayHisDayResult, error)
	// 获取历史数量
	GetHisCount(ctx context.Context, in *GetHisCountReq, opts ...grpc.CallOption) (*GetHisCountResult, error)
}

type imLoginDayHisServerClient struct {
	cc grpc.ClientConnInterface
}

func NewImLoginDayHisServerClient(cc grpc.ClientConnInterface) ImLoginDayHisServerClient {
	return &imLoginDayHisServerClient{cc}
}

func (c *imLoginDayHisServerClient) SetLoginHisDay(ctx context.Context, in *SetLoginHisDayReq, opts ...grpc.CallOption) (*SetLoginHisDayResult, error) {
	out := new(SetLoginHisDayResult)
	err := c.cc.Invoke(ctx, "/imlogindayhisserver.ImLoginDayHisServer/SetLoginHisDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imLoginDayHisServerClient) GetNowDayHisDay(ctx context.Context, in *GetNowDayHisDayReq, opts ...grpc.CallOption) (*GetNowDayHisDayResult, error) {
	out := new(GetNowDayHisDayResult)
	err := c.cc.Invoke(ctx, "/imlogindayhisserver.ImLoginDayHisServer/GetNowDayHisDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imLoginDayHisServerClient) GetHisCount(ctx context.Context, in *GetHisCountReq, opts ...grpc.CallOption) (*GetHisCountResult, error) {
	out := new(GetHisCountResult)
	err := c.cc.Invoke(ctx, "/imlogindayhisserver.ImLoginDayHisServer/GetHisCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImLoginDayHisServerServer is the server API for ImLoginDayHisServer service.
// All implementations must embed UnimplementedImLoginDayHisServerServer
// for forward compatibility
type ImLoginDayHisServerServer interface {
	// 设置本日登录
	SetLoginHisDay(context.Context, *SetLoginHisDayReq) (*SetLoginHisDayResult, error)
	// 判断本日是否登录
	GetNowDayHisDay(context.Context, *GetNowDayHisDayReq) (*GetNowDayHisDayResult, error)
	// 获取历史数量
	GetHisCount(context.Context, *GetHisCountReq) (*GetHisCountResult, error)
	mustEmbedUnimplementedImLoginDayHisServerServer()
}

// UnimplementedImLoginDayHisServerServer must be embedded to have forward compatible implementations.
type UnimplementedImLoginDayHisServerServer struct {
}

func (UnimplementedImLoginDayHisServerServer) SetLoginHisDay(context.Context, *SetLoginHisDayReq) (*SetLoginHisDayResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLoginHisDay not implemented")
}
func (UnimplementedImLoginDayHisServerServer) GetNowDayHisDay(context.Context, *GetNowDayHisDayReq) (*GetNowDayHisDayResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNowDayHisDay not implemented")
}
func (UnimplementedImLoginDayHisServerServer) GetHisCount(context.Context, *GetHisCountReq) (*GetHisCountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHisCount not implemented")
}
func (UnimplementedImLoginDayHisServerServer) mustEmbedUnimplementedImLoginDayHisServerServer() {}

// UnsafeImLoginDayHisServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImLoginDayHisServerServer will
// result in compilation errors.
type UnsafeImLoginDayHisServerServer interface {
	mustEmbedUnimplementedImLoginDayHisServerServer()
}

func RegisterImLoginDayHisServerServer(s grpc.ServiceRegistrar, srv ImLoginDayHisServerServer) {
	s.RegisterService(&ImLoginDayHisServer_ServiceDesc, srv)
}

func _ImLoginDayHisServer_SetLoginHisDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLoginHisDayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImLoginDayHisServerServer).SetLoginHisDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imlogindayhisserver.ImLoginDayHisServer/SetLoginHisDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImLoginDayHisServerServer).SetLoginHisDay(ctx, req.(*SetLoginHisDayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImLoginDayHisServer_GetNowDayHisDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNowDayHisDayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImLoginDayHisServerServer).GetNowDayHisDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imlogindayhisserver.ImLoginDayHisServer/GetNowDayHisDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImLoginDayHisServerServer).GetNowDayHisDay(ctx, req.(*GetNowDayHisDayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImLoginDayHisServer_GetHisCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHisCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImLoginDayHisServerServer).GetHisCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imlogindayhisserver.ImLoginDayHisServer/GetHisCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImLoginDayHisServerServer).GetHisCount(ctx, req.(*GetHisCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ImLoginDayHisServer_ServiceDesc is the grpc.ServiceDesc for ImLoginDayHisServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImLoginDayHisServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imlogindayhisserver.ImLoginDayHisServer",
	HandlerType: (*ImLoginDayHisServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLoginHisDay",
			Handler:    _ImLoginDayHisServer_SetLoginHisDay_Handler,
		},
		{
			MethodName: "GetNowDayHisDay",
			Handler:    _ImLoginDayHisServer_GetNowDayHisDay_Handler,
		},
		{
			MethodName: "GetHisCount",
			Handler:    _ImLoginDayHisServer_GetHisCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imlogindayhisserver.proto",
}
