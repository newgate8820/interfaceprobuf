// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/imlogindayhisserver/imlogindayhisserver.proto

/*
Package imlogindayhisserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/imlogindayhisserver/imlogindayhisserver.proto

It has these top-level messages:

	SetLoginHisDayReq
	SetLoginHisDayResult
	GetNowDayHisDayReq
	GetNowDayHisDayResult
	GetHisCountReq
	GetHisCountResult
*/
package imlogindayhisserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SetLoginHisDayResult_ResultCode int32

const (
	SetLoginHisDayResult_Success       SetLoginHisDayResult_ResultCode = 0
	SetLoginHisDayResult_InternalError SetLoginHisDayResult_ResultCode = 1
)

var SetLoginHisDayResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var SetLoginHisDayResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x SetLoginHisDayResult_ResultCode) String() string {
	return proto.EnumName(SetLoginHisDayResult_ResultCode_name, int32(x))
}
func (SetLoginHisDayResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImlogindayhisserver, []int{1, 0}
}

type GetNowDayHisDayResult_ResultCode int32

const (
	GetNowDayHisDayResult_Success       GetNowDayHisDayResult_ResultCode = 0
	GetNowDayHisDayResult_InternalError GetNowDayHisDayResult_ResultCode = 1
)

var GetNowDayHisDayResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var GetNowDayHisDayResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x GetNowDayHisDayResult_ResultCode) String() string {
	return proto.EnumName(GetNowDayHisDayResult_ResultCode_name, int32(x))
}
func (GetNowDayHisDayResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImlogindayhisserver, []int{3, 0}
}

type GetHisCountResult_ResultCode int32

const (
	GetHisCountResult_Success       GetHisCountResult_ResultCode = 0
	GetHisCountResult_InternalError GetHisCountResult_ResultCode = 1
)

var GetHisCountResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var GetHisCountResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x GetHisCountResult_ResultCode) String() string {
	return proto.EnumName(GetHisCountResult_ResultCode_name, int32(x))
}
func (GetHisCountResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImlogindayhisserver, []int{5, 0}
}

type SetLoginHisDayReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *SetLoginHisDayReq) Reset()         { *m = SetLoginHisDayReq{} }
func (m *SetLoginHisDayReq) String() string { return proto.CompactTextString(m) }
func (*SetLoginHisDayReq) ProtoMessage()    {}
func (*SetLoginHisDayReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImlogindayhisserver, []int{0}
}

func (m *SetLoginHisDayReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type SetLoginHisDayResult struct {
	Result bool                            `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Count  int32                           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Code   SetLoginHisDayResult_ResultCode `protobuf:"varint,3,opt,name=code,proto3,enum=imlogindayhisserver.SetLoginHisDayResult_ResultCode" json:"code,omitempty"`
}

func (m *SetLoginHisDayResult) Reset()         { *m = SetLoginHisDayResult{} }
func (m *SetLoginHisDayResult) String() string { return proto.CompactTextString(m) }
func (*SetLoginHisDayResult) ProtoMessage()    {}
func (*SetLoginHisDayResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImlogindayhisserver, []int{1}
}

func (m *SetLoginHisDayResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *SetLoginHisDayResult) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SetLoginHisDayResult) GetCode() SetLoginHisDayResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return SetLoginHisDayResult_Success
}

type GetNowDayHisDayReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetNowDayHisDayReq) Reset()         { *m = GetNowDayHisDayReq{} }
func (m *GetNowDayHisDayReq) String() string { return proto.CompactTextString(m) }
func (*GetNowDayHisDayReq) ProtoMessage()    {}
func (*GetNowDayHisDayReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImlogindayhisserver, []int{2}
}

func (m *GetNowDayHisDayReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetNowDayHisDayResult struct {
	Result bool                             `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Code   GetNowDayHisDayResult_ResultCode `protobuf:"varint,2,opt,name=code,proto3,enum=imlogindayhisserver.GetNowDayHisDayResult_ResultCode" json:"code,omitempty"`
}

func (m *GetNowDayHisDayResult) Reset()         { *m = GetNowDayHisDayResult{} }
func (m *GetNowDayHisDayResult) String() string { return proto.CompactTextString(m) }
func (*GetNowDayHisDayResult) ProtoMessage()    {}
func (*GetNowDayHisDayResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImlogindayhisserver, []int{3}
}

func (m *GetNowDayHisDayResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *GetNowDayHisDayResult) GetCode() GetNowDayHisDayResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return GetNowDayHisDayResult_Success
}

type GetHisCountReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetHisCountReq) Reset()         { *m = GetHisCountReq{} }
func (m *GetHisCountReq) String() string { return proto.CompactTextString(m) }
func (*GetHisCountReq) ProtoMessage()    {}
func (*GetHisCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImlogindayhisserver, []int{4}
}

func (m *GetHisCountReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetHisCountResult struct {
	Count int32                        `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Code  GetHisCountResult_ResultCode `protobuf:"varint,2,opt,name=code,proto3,enum=imlogindayhisserver.GetHisCountResult_ResultCode" json:"code,omitempty"`
}

func (m *GetHisCountResult) Reset()         { *m = GetHisCountResult{} }
func (m *GetHisCountResult) String() string { return proto.CompactTextString(m) }
func (*GetHisCountResult) ProtoMessage()    {}
func (*GetHisCountResult) Descriptor() ([]byte, []int) {
	return fileDescriptorImlogindayhisserver, []int{5}
}

func (m *GetHisCountResult) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetHisCountResult) GetCode() GetHisCountResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return GetHisCountResult_Success
}

func init() {
	proto.RegisterType((*SetLoginHisDayReq)(nil), "imlogindayhisserver.SetLoginHisDayReq")
	proto.RegisterType((*SetLoginHisDayResult)(nil), "imlogindayhisserver.SetLoginHisDayResult")
	proto.RegisterType((*GetNowDayHisDayReq)(nil), "imlogindayhisserver.GetNowDayHisDayReq")
	proto.RegisterType((*GetNowDayHisDayResult)(nil), "imlogindayhisserver.GetNowDayHisDayResult")
	proto.RegisterType((*GetHisCountReq)(nil), "imlogindayhisserver.GetHisCountReq")
	proto.RegisterType((*GetHisCountResult)(nil), "imlogindayhisserver.GetHisCountResult")
	proto.RegisterEnum("imlogindayhisserver.SetLoginHisDayResult_ResultCode", SetLoginHisDayResult_ResultCode_name, SetLoginHisDayResult_ResultCode_value)
	proto.RegisterEnum("imlogindayhisserver.GetNowDayHisDayResult_ResultCode", GetNowDayHisDayResult_ResultCode_name, GetNowDayHisDayResult_ResultCode_value)
	proto.RegisterEnum("imlogindayhisserver.GetHisCountResult_ResultCode", GetHisCountResult_ResultCode_name, GetHisCountResult_ResultCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImLoginDayHisServer service

type ImLoginDayHisServerClient interface {
	// 设置本日登录
	SetLoginHisDay(ctx context.Context, in *SetLoginHisDayReq, opts ...grpc.CallOption) (*SetLoginHisDayResult, error)
	// 判断本日是否登录
	GetNowDayHisDay(ctx context.Context, in *GetNowDayHisDayReq, opts ...grpc.CallOption) (*GetNowDayHisDayResult, error)
	// 获取历史数量
	GetHisCount(ctx context.Context, in *GetHisCountReq, opts ...grpc.CallOption) (*GetHisCountResult, error)
}

type imLoginDayHisServerClient struct {
	cc *grpc.ClientConn
}

func NewImLoginDayHisServerClient(cc *grpc.ClientConn) ImLoginDayHisServerClient {
	return &imLoginDayHisServerClient{cc}
}

func (c *imLoginDayHisServerClient) SetLoginHisDay(ctx context.Context, in *SetLoginHisDayReq, opts ...grpc.CallOption) (*SetLoginHisDayResult, error) {
	out := new(SetLoginHisDayResult)
	err := grpc.Invoke(ctx, "/imlogindayhisserver.ImLoginDayHisServer/SetLoginHisDay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imLoginDayHisServerClient) GetNowDayHisDay(ctx context.Context, in *GetNowDayHisDayReq, opts ...grpc.CallOption) (*GetNowDayHisDayResult, error) {
	out := new(GetNowDayHisDayResult)
	err := grpc.Invoke(ctx, "/imlogindayhisserver.ImLoginDayHisServer/GetNowDayHisDay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imLoginDayHisServerClient) GetHisCount(ctx context.Context, in *GetHisCountReq, opts ...grpc.CallOption) (*GetHisCountResult, error) {
	out := new(GetHisCountResult)
	err := grpc.Invoke(ctx, "/imlogindayhisserver.ImLoginDayHisServer/GetHisCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImLoginDayHisServer service

type ImLoginDayHisServerServer interface {
	// 设置本日登录
	SetLoginHisDay(context.Context, *SetLoginHisDayReq) (*SetLoginHisDayResult, error)
	// 判断本日是否登录
	GetNowDayHisDay(context.Context, *GetNowDayHisDayReq) (*GetNowDayHisDayResult, error)
	// 获取历史数量
	GetHisCount(context.Context, *GetHisCountReq) (*GetHisCountResult, error)
}

func RegisterImLoginDayHisServerServer(s *grpc.Server, srv ImLoginDayHisServerServer) {
	s.RegisterService(&_ImLoginDayHisServer_serviceDesc, srv)
}

func _ImLoginDayHisServer_SetLoginHisDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLoginHisDayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImLoginDayHisServerServer).SetLoginHisDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imlogindayhisserver.ImLoginDayHisServer/SetLoginHisDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImLoginDayHisServerServer).SetLoginHisDay(ctx, req.(*SetLoginHisDayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImLoginDayHisServer_GetNowDayHisDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNowDayHisDayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImLoginDayHisServerServer).GetNowDayHisDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imlogindayhisserver.ImLoginDayHisServer/GetNowDayHisDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImLoginDayHisServerServer).GetNowDayHisDay(ctx, req.(*GetNowDayHisDayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImLoginDayHisServer_GetHisCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHisCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImLoginDayHisServerServer).GetHisCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imlogindayhisserver.ImLoginDayHisServer/GetHisCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImLoginDayHisServerServer).GetHisCount(ctx, req.(*GetHisCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImLoginDayHisServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imlogindayhisserver.ImLoginDayHisServer",
	HandlerType: (*ImLoginDayHisServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLoginHisDay",
			Handler:    _ImLoginDayHisServer_SetLoginHisDay_Handler,
		},
		{
			MethodName: "GetNowDayHisDay",
			Handler:    _ImLoginDayHisServer_GetNowDayHisDay_Handler,
		},
		{
			MethodName: "GetHisCount",
			Handler:    _ImLoginDayHisServer_GetHisCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/imlogindayhisserver/imlogindayhisserver.proto",
}

func (m *SetLoginHisDayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLoginHisDayReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImlogindayhisserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *SetLoginHisDayResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLoginHisDayResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImlogindayhisserver(dAtA, i, uint64(m.Count))
	}
	if m.Code != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImlogindayhisserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *GetNowDayHisDayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNowDayHisDayReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImlogindayhisserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetNowDayHisDayResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNowDayHisDayResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImlogindayhisserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *GetHisCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHisCountReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImlogindayhisserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetHisCountResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHisCountResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImlogindayhisserver(dAtA, i, uint64(m.Count))
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImlogindayhisserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func encodeVarintImlogindayhisserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SetLoginHisDayReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImlogindayhisserver(uint64(m.UserId))
	}
	return n
}

func (m *SetLoginHisDayResult) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.Count != 0 {
		n += 1 + sovImlogindayhisserver(uint64(m.Count))
	}
	if m.Code != 0 {
		n += 1 + sovImlogindayhisserver(uint64(m.Code))
	}
	return n
}

func (m *GetNowDayHisDayReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImlogindayhisserver(uint64(m.UserId))
	}
	return n
}

func (m *GetNowDayHisDayResult) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.Code != 0 {
		n += 1 + sovImlogindayhisserver(uint64(m.Code))
	}
	return n
}

func (m *GetHisCountReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImlogindayhisserver(uint64(m.UserId))
	}
	return n
}

func (m *GetHisCountResult) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovImlogindayhisserver(uint64(m.Count))
	}
	if m.Code != 0 {
		n += 1 + sovImlogindayhisserver(uint64(m.Code))
	}
	return n
}

func sovImlogindayhisserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImlogindayhisserver(x uint64) (n int) {
	return sovImlogindayhisserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetLoginHisDayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImlogindayhisserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLoginHisDayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLoginHisDayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImlogindayhisserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImlogindayhisserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImlogindayhisserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetLoginHisDayResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImlogindayhisserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLoginHisDayResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLoginHisDayResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImlogindayhisserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImlogindayhisserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImlogindayhisserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (SetLoginHisDayResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImlogindayhisserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImlogindayhisserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNowDayHisDayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImlogindayhisserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNowDayHisDayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNowDayHisDayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImlogindayhisserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImlogindayhisserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImlogindayhisserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNowDayHisDayResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImlogindayhisserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNowDayHisDayResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNowDayHisDayResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImlogindayhisserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImlogindayhisserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (GetNowDayHisDayResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImlogindayhisserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImlogindayhisserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHisCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImlogindayhisserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHisCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHisCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImlogindayhisserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImlogindayhisserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImlogindayhisserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHisCountResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImlogindayhisserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHisCountResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHisCountResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImlogindayhisserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImlogindayhisserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (GetHisCountResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImlogindayhisserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImlogindayhisserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImlogindayhisserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImlogindayhisserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImlogindayhisserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImlogindayhisserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImlogindayhisserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImlogindayhisserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImlogindayhisserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImlogindayhisserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImlogindayhisserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/imlogindayhisserver/imlogindayhisserver.proto", fileDescriptorImlogindayhisserver)
}

var fileDescriptorImlogindayhisserver = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xc1, 0xae, 0xd2, 0x40,
	0x14, 0x86, 0x3b, 0x28, 0x60, 0x0e, 0x8a, 0x30, 0xa0, 0x12, 0x16, 0x84, 0xd4, 0x04, 0xc1, 0x60,
	0x89, 0xa8, 0x2f, 0x20, 0x10, 0x68, 0x62, 0x5c, 0x94, 0xad, 0x89, 0x29, 0xed, 0x00, 0x93, 0x94,
	0x0e, 0x9d, 0x99, 0x6a, 0x78, 0x19, 0xd7, 0x3e, 0x84, 0x4b, 0x17, 0x77, 0x79, 0x1f, 0xe1, 0x86,
	0x27, 0xb9, 0xe9, 0x94, 0xe4, 0x52, 0x6e, 0x2f, 0xb7, 0x09, 0xab, 0xf6, 0x9c, 0x9e, 0xfe, 0xd3,
	0xef, 0xff, 0x4f, 0x0a, 0xd6, 0x8a, 0x4a, 0xcf, 0x5e, 0x18, 0xce, 0xda, 0x96, 0x82, 0xf0, 0x5f,
	0x84, 0x1b, 0x74, 0x33, 0xa0, 0xbe, 0x24, 0x7c, 0x69, 0x3b, 0x64, 0xcb, 0xd9, 0x22, 0x5c, 0x0e,
	0xe8, 0xc6, 0x63, 0x2b, 0xea, 0xbb, 0xf6, 0x6e, 0x4d, 0x45, 0x3c, 0x96, 0xd6, 0x33, 0xb6, 0x9c,
	0x49, 0x86, 0x6b, 0x29, 0x8f, 0xf4, 0x3e, 0x54, 0xe7, 0x44, 0x7e, 0x8b, 0xfa, 0x33, 0x2a, 0xc6,
	0xf6, 0xce, 0x22, 0x01, 0x7e, 0x03, 0xc5, 0x50, 0x10, 0xfe, 0x93, 0xba, 0x0d, 0xd4, 0x46, 0xdd,
	0xbc, 0x55, 0x88, 0x4a, 0xd3, 0xd5, 0xff, 0x21, 0xa8, 0x9f, 0x8e, 0x8b, 0xd0, 0x93, 0xf8, 0x35,
	0x14, 0xb8, 0xba, 0x53, 0x2f, 0x3c, 0xb3, 0x0e, 0x15, 0xae, 0x43, 0xde, 0x61, 0xa1, 0x2f, 0x1b,
	0x39, 0xa5, 0x13, 0x17, 0x78, 0x06, 0x4f, 0x1d, 0xe6, 0x92, 0xc6, 0x93, 0x36, 0xea, 0x96, 0x87,
	0x9f, 0x8d, 0xb4, 0x6f, 0x4e, 0x3b, 0xc6, 0x88, 0x2f, 0x23, 0xe6, 0x12, 0x4b, 0x29, 0xe8, 0x7d,
	0x80, 0xbb, 0x1e, 0x2e, 0x41, 0x71, 0x1e, 0x3a, 0x0e, 0x11, 0xa2, 0xa2, 0xe1, 0x2a, 0xbc, 0x30,
	0x23, 0xbf, 0x7c, 0xdb, 0x9b, 0x70, 0xce, 0x78, 0x05, 0xe9, 0x1f, 0x00, 0x4f, 0x89, 0xfc, 0xce,
	0x7e, 0x8f, 0xed, 0x5d, 0x06, 0xda, 0xbf, 0x08, 0x5e, 0xdd, 0x9b, 0x3f, 0x8b, 0x6b, 0x1e, 0xc0,
	0x72, 0x0a, 0xec, 0x4b, 0x2a, 0x58, 0xaa, 0xe2, 0xa5, 0x64, 0x3d, 0x28, 0x4f, 0x89, 0x9c, 0x51,
	0x31, 0x8a, 0x0c, 0x3e, 0x4b, 0xf5, 0x07, 0x41, 0x35, 0x31, 0x9b, 0x0c, 0x0a, 0x1d, 0x07, 0x35,
	0x49, 0xf0, 0x7c, 0x7c, 0x88, 0x27, 0xa9, 0x75, 0x21, 0xcb, 0xf0, 0x7f, 0x0e, 0x6a, 0xe6, 0x46,
	0x85, 0x1f, 0xbb, 0x34, 0x57, 0x07, 0x61, 0x02, 0xe5, 0xe4, 0x52, 0xe0, 0x4e, 0xa6, 0xcd, 0x09,
	0x9a, 0xbd, 0xcc, 0x1b, 0xa6, 0x6b, 0x78, 0x0d, 0x2f, 0x4f, 0x22, 0xc2, 0xef, 0xb2, 0x05, 0x19,
	0x34, 0xdf, 0x67, 0x4f, 0x5c, 0xd7, 0xf0, 0x0f, 0x28, 0x1d, 0x99, 0x87, 0xdf, 0x3e, 0x6e, 0x6f,
	0xd0, 0xec, 0x64, 0xcb, 0x40, 0xd7, 0xbe, 0x3e, 0xbf, 0xda, 0xb7, 0xd0, 0xf5, 0xbe, 0x85, 0x6e,
	0xf6, 0x2d, 0xb4, 0x28, 0xa8, 0x7f, 0xc0, 0xa7, 0xdb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x9c,
	0xc9, 0x47, 0x59, 0x04, 0x00, 0x00,
}
