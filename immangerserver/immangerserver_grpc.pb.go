// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: immangerserver.proto

package immangerserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerServiceClient is the client API for ServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerServiceClient interface {
	// 通知系统所有人的功能（公告）
	NotifyAllImUser(ctx context.Context, in *NotifyAllImUserReq, opts ...grpc.CallOption) (*OpResp, error)
	// 禁止人登录功能/禁止用户登录时间
	BannedUser(ctx context.Context, in *BannedUserReq, opts ...grpc.CallOption) (*OpResp, error)
	// 踢人下线功能
	KickUser(ctx context.Context, in *KickUserReq, opts ...grpc.CallOption) (*OpResp, error)
	// 删除账号功能（兼顾踢人下线）
	DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*OpResp, error)
	// 解散群功能
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*OpResp, error)
	// 将一个用户的创建的所有群转让给指定用户
	ConverOwernsGroup(ctx context.Context, in *ConverOwernsGroupReq, opts ...grpc.CallOption) (*OpResp, error)
	// 清楚用户历史功能（针对单聊）
	ClearUserPeerHistory(ctx context.Context, in *ClearUserPeerHistoryReq, opts ...grpc.CallOption) (*OpResp, error)
	// 删除两步验证功能
	DelTwoCheck(ctx context.Context, in *DelTwoCheckReq, opts ...grpc.CallOption) (*OpResp, error)
}

type serverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerServiceClient(cc grpc.ClientConnInterface) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) NotifyAllImUser(ctx context.Context, in *NotifyAllImUserReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := c.cc.Invoke(ctx, "/immangerserver.ServerService/NotifyAllImUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) BannedUser(ctx context.Context, in *BannedUserReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := c.cc.Invoke(ctx, "/immangerserver.ServerService/BannedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) KickUser(ctx context.Context, in *KickUserReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := c.cc.Invoke(ctx, "/immangerserver.ServerService/KickUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := c.cc.Invoke(ctx, "/immangerserver.ServerService/DelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := c.cc.Invoke(ctx, "/immangerserver.ServerService/deleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ConverOwernsGroup(ctx context.Context, in *ConverOwernsGroupReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := c.cc.Invoke(ctx, "/immangerserver.ServerService/converOwernsGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ClearUserPeerHistory(ctx context.Context, in *ClearUserPeerHistoryReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := c.cc.Invoke(ctx, "/immangerserver.ServerService/clearUserPeerHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) DelTwoCheck(ctx context.Context, in *DelTwoCheckReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := c.cc.Invoke(ctx, "/immangerserver.ServerService/delTwoCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServiceServer is the server API for ServerService service.
// All implementations must embed UnimplementedServerServiceServer
// for forward compatibility
type ServerServiceServer interface {
	// 通知系统所有人的功能（公告）
	NotifyAllImUser(context.Context, *NotifyAllImUserReq) (*OpResp, error)
	// 禁止人登录功能/禁止用户登录时间
	BannedUser(context.Context, *BannedUserReq) (*OpResp, error)
	// 踢人下线功能
	KickUser(context.Context, *KickUserReq) (*OpResp, error)
	// 删除账号功能（兼顾踢人下线）
	DelUser(context.Context, *DelUserReq) (*OpResp, error)
	// 解散群功能
	DeleteGroup(context.Context, *DeleteGroupReq) (*OpResp, error)
	// 将一个用户的创建的所有群转让给指定用户
	ConverOwernsGroup(context.Context, *ConverOwernsGroupReq) (*OpResp, error)
	// 清楚用户历史功能（针对单聊）
	ClearUserPeerHistory(context.Context, *ClearUserPeerHistoryReq) (*OpResp, error)
	// 删除两步验证功能
	DelTwoCheck(context.Context, *DelTwoCheckReq) (*OpResp, error)
	mustEmbedUnimplementedServerServiceServer()
}

// UnimplementedServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerServiceServer struct {
}

func (UnimplementedServerServiceServer) NotifyAllImUser(context.Context, *NotifyAllImUserReq) (*OpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAllImUser not implemented")
}
func (UnimplementedServerServiceServer) BannedUser(context.Context, *BannedUserReq) (*OpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BannedUser not implemented")
}
func (UnimplementedServerServiceServer) KickUser(context.Context, *KickUserReq) (*OpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickUser not implemented")
}
func (UnimplementedServerServiceServer) DelUser(context.Context, *DelUserReq) (*OpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUser not implemented")
}
func (UnimplementedServerServiceServer) DeleteGroup(context.Context, *DeleteGroupReq) (*OpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedServerServiceServer) ConverOwernsGroup(context.Context, *ConverOwernsGroupReq) (*OpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConverOwernsGroup not implemented")
}
func (UnimplementedServerServiceServer) ClearUserPeerHistory(context.Context, *ClearUserPeerHistoryReq) (*OpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearUserPeerHistory not implemented")
}
func (UnimplementedServerServiceServer) DelTwoCheck(context.Context, *DelTwoCheckReq) (*OpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTwoCheck not implemented")
}
func (UnimplementedServerServiceServer) mustEmbedUnimplementedServerServiceServer() {}

// UnsafeServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServiceServer will
// result in compilation errors.
type UnsafeServerServiceServer interface {
	mustEmbedUnimplementedServerServiceServer()
}

func RegisterServerServiceServer(s grpc.ServiceRegistrar, srv ServerServiceServer) {
	s.RegisterService(&ServerService_ServiceDesc, srv)
}

func _ServerService_NotifyAllImUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyAllImUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).NotifyAllImUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/NotifyAllImUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).NotifyAllImUser(ctx, req.(*NotifyAllImUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_BannedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannedUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).BannedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/BannedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).BannedUser(ctx, req.(*BannedUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_KickUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).KickUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/KickUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).KickUser(ctx, req.(*KickUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_DelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).DelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/DelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).DelUser(ctx, req.(*DelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/deleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ConverOwernsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConverOwernsGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ConverOwernsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/converOwernsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ConverOwernsGroup(ctx, req.(*ConverOwernsGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ClearUserPeerHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearUserPeerHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ClearUserPeerHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/clearUserPeerHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ClearUserPeerHistory(ctx, req.(*ClearUserPeerHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_DelTwoCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTwoCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).DelTwoCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/delTwoCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).DelTwoCheck(ctx, req.(*DelTwoCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerService_ServiceDesc is the grpc.ServiceDesc for ServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "immangerserver.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyAllImUser",
			Handler:    _ServerService_NotifyAllImUser_Handler,
		},
		{
			MethodName: "BannedUser",
			Handler:    _ServerService_BannedUser_Handler,
		},
		{
			MethodName: "KickUser",
			Handler:    _ServerService_KickUser_Handler,
		},
		{
			MethodName: "DelUser",
			Handler:    _ServerService_DelUser_Handler,
		},
		{
			MethodName: "deleteGroup",
			Handler:    _ServerService_DeleteGroup_Handler,
		},
		{
			MethodName: "converOwernsGroup",
			Handler:    _ServerService_ConverOwernsGroup_Handler,
		},
		{
			MethodName: "clearUserPeerHistory",
			Handler:    _ServerService_ClearUserPeerHistory_Handler,
		},
		{
			MethodName: "delTwoCheck",
			Handler:    _ServerService_DelTwoCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "immangerserver.proto",
}
