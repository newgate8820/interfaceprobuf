// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/immangerserver/immangerserver.proto

/*
Package immangerserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/immangerserver/immangerserver.proto

It has these top-level messages:

	DelTwoCheckReq
	ClearUserPeerHistoryReq
	ConverOwernsGroupReq
	DeleteGroupReq
	DelUserReq
	OpResp
	KickUserReq
	BannedUserReq
	NotifyAllImUserReq
*/
package immangerserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 错误代码的返回
type ErrorCode int32

const (
	ErrorCode_Sucessful   ErrorCode = 0
	ErrorCode_Failed      ErrorCode = 1
	ErrorCode_INTERNALERR ErrorCode = 2
)

var ErrorCode_name = map[int32]string{
	0: "Sucessful",
	1: "Failed",
	2: "INTERNALERR",
}
var ErrorCode_value = map[string]int32{
	"Sucessful":   0,
	"Failed":      1,
	"INTERNALERR": 2,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorImmangerserver, []int{0} }

// 删除两部验证
type DelTwoCheckReq struct {
	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *DelTwoCheckReq) Reset()                    { *m = DelTwoCheckReq{} }
func (m *DelTwoCheckReq) String() string            { return proto.CompactTextString(m) }
func (*DelTwoCheckReq) ProtoMessage()               {}
func (*DelTwoCheckReq) Descriptor() ([]byte, []int) { return fileDescriptorImmangerserver, []int{0} }

func (m *DelTwoCheckReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// 清楚用户聊天消息
type ClearUserPeerHistoryReq struct {
	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *ClearUserPeerHistoryReq) Reset()         { *m = ClearUserPeerHistoryReq{} }
func (m *ClearUserPeerHistoryReq) String() string { return proto.CompactTextString(m) }
func (*ClearUserPeerHistoryReq) ProtoMessage()    {}
func (*ClearUserPeerHistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImmangerserver, []int{1}
}

func (m *ClearUserPeerHistoryReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// 将指定用户创建的群转移到目标用户请求
type ConverOwernsGroupReq struct {
	FromPhone string `protobuf:"bytes,1,opt,name=fromPhone,proto3" json:"fromPhone,omitempty"`
	ToPhone   string `protobuf:"bytes,2,opt,name=toPhone,proto3" json:"toPhone,omitempty"`
}

func (m *ConverOwernsGroupReq) Reset()         { *m = ConverOwernsGroupReq{} }
func (m *ConverOwernsGroupReq) String() string { return proto.CompactTextString(m) }
func (*ConverOwernsGroupReq) ProtoMessage()    {}
func (*ConverOwernsGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImmangerserver, []int{2}
}

func (m *ConverOwernsGroupReq) GetFromPhone() string {
	if m != nil {
		return m.FromPhone
	}
	return ""
}

func (m *ConverOwernsGroupReq) GetToPhone() string {
	if m != nil {
		return m.ToPhone
	}
	return ""
}

// 解散群请求
type DeleteGroupReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *DeleteGroupReq) Reset()                    { *m = DeleteGroupReq{} }
func (m *DeleteGroupReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteGroupReq) ProtoMessage()               {}
func (*DeleteGroupReq) Descriptor() ([]byte, []int) { return fileDescriptorImmangerserver, []int{3} }

func (m *DeleteGroupReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

// 删除帐号请求
type DelUserReq struct {
	UserPhone string `protobuf:"bytes,1,opt,name=userPhone,proto3" json:"userPhone,omitempty"`
}

func (m *DelUserReq) Reset()                    { *m = DelUserReq{} }
func (m *DelUserReq) String() string            { return proto.CompactTextString(m) }
func (*DelUserReq) ProtoMessage()               {}
func (*DelUserReq) Descriptor() ([]byte, []int) { return fileDescriptorImmangerserver, []int{4} }

func (m *DelUserReq) GetUserPhone() string {
	if m != nil {
		return m.UserPhone
	}
	return ""
}

// 返回结构提
type OpResp struct {
	Err ErrorCode `protobuf:"varint,1,opt,name=err,proto3,enum=immangerserver.ErrorCode" json:"err,omitempty"`
}

func (m *OpResp) Reset()                    { *m = OpResp{} }
func (m *OpResp) String() string            { return proto.CompactTextString(m) }
func (*OpResp) ProtoMessage()               {}
func (*OpResp) Descriptor() ([]byte, []int) { return fileDescriptorImmangerserver, []int{5} }

func (m *OpResp) GetErr() ErrorCode {
	if m != nil {
		return m.Err
	}
	return ErrorCode_Sucessful
}

// 踢人下线请求
type KickUserReq struct {
	KickedPhone string `protobuf:"bytes,1,opt,name=KickedPhone,proto3" json:"KickedPhone,omitempty"`
}

func (m *KickUserReq) Reset()                    { *m = KickUserReq{} }
func (m *KickUserReq) String() string            { return proto.CompactTextString(m) }
func (*KickUserReq) ProtoMessage()               {}
func (*KickUserReq) Descriptor() ([]byte, []int) { return fileDescriptorImmangerserver, []int{6} }

func (m *KickUserReq) GetKickedPhone() string {
	if m != nil {
		return m.KickedPhone
	}
	return ""
}

// 禁止人登录功能/禁止用户登录时间的请求
type BannedUserReq struct {
	UserPhone  string `protobuf:"bytes,1,opt,name=UserPhone,proto3" json:"UserPhone,omitempty"`
	BannedDate int32  `protobuf:"varint,2,opt,name=bannedDate,proto3" json:"bannedDate,omitempty"`
}

func (m *BannedUserReq) Reset()                    { *m = BannedUserReq{} }
func (m *BannedUserReq) String() string            { return proto.CompactTextString(m) }
func (*BannedUserReq) ProtoMessage()               {}
func (*BannedUserReq) Descriptor() ([]byte, []int) { return fileDescriptorImmangerserver, []int{7} }

func (m *BannedUserReq) GetUserPhone() string {
	if m != nil {
		return m.UserPhone
	}
	return ""
}

func (m *BannedUserReq) GetBannedDate() int32 {
	if m != nil {
		return m.BannedDate
	}
	return 0
}

// 通知系统所有人的功能（公告）请求参数
type NotifyAllImUserReq struct {
	CNNotifyMsg string `protobuf:"bytes,1,opt,name=CNNotifyMsg,proto3" json:"CNNotifyMsg,omitempty"`
	ENNotifyMsg string `protobuf:"bytes,2,opt,name=ENNotifyMsg,proto3" json:"ENNotifyMsg,omitempty"`
}

func (m *NotifyAllImUserReq) Reset()         { *m = NotifyAllImUserReq{} }
func (m *NotifyAllImUserReq) String() string { return proto.CompactTextString(m) }
func (*NotifyAllImUserReq) ProtoMessage()    {}
func (*NotifyAllImUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImmangerserver, []int{8}
}

func (m *NotifyAllImUserReq) GetCNNotifyMsg() string {
	if m != nil {
		return m.CNNotifyMsg
	}
	return ""
}

func (m *NotifyAllImUserReq) GetENNotifyMsg() string {
	if m != nil {
		return m.ENNotifyMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*DelTwoCheckReq)(nil), "immangerserver.delTwoCheckReq")
	proto.RegisterType((*ClearUserPeerHistoryReq)(nil), "immangerserver.clearUserPeerHistoryReq")
	proto.RegisterType((*ConverOwernsGroupReq)(nil), "immangerserver.converOwernsGroupReq")
	proto.RegisterType((*DeleteGroupReq)(nil), "immangerserver.deleteGroupReq")
	proto.RegisterType((*DelUserReq)(nil), "immangerserver.DelUserReq")
	proto.RegisterType((*OpResp)(nil), "immangerserver.OpResp")
	proto.RegisterType((*KickUserReq)(nil), "immangerserver.KickUserReq")
	proto.RegisterType((*BannedUserReq)(nil), "immangerserver.BannedUserReq")
	proto.RegisterType((*NotifyAllImUserReq)(nil), "immangerserver.NotifyAllImUserReq")
	proto.RegisterEnum("immangerserver.ErrorCode", ErrorCode_name, ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServerService service

type ServerServiceClient interface {
	// 通知系统所有人的功能（公告）
	NotifyAllImUser(ctx context.Context, in *NotifyAllImUserReq, opts ...grpc.CallOption) (*OpResp, error)
	// 禁止人登录功能/禁止用户登录时间
	BannedUser(ctx context.Context, in *BannedUserReq, opts ...grpc.CallOption) (*OpResp, error)
	// 踢人下线功能
	KickUser(ctx context.Context, in *KickUserReq, opts ...grpc.CallOption) (*OpResp, error)
	// 删除账号功能（兼顾踢人下线）
	DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*OpResp, error)
	// 解散群功能
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*OpResp, error)
	// 将一个用户的创建的所有群转让给指定用户
	ConverOwernsGroup(ctx context.Context, in *ConverOwernsGroupReq, opts ...grpc.CallOption) (*OpResp, error)
	// 清楚用户历史功能（针对单聊）
	ClearUserPeerHistory(ctx context.Context, in *ClearUserPeerHistoryReq, opts ...grpc.CallOption) (*OpResp, error)
	// 删除两步验证功能
	DelTwoCheck(ctx context.Context, in *DelTwoCheckReq, opts ...grpc.CallOption) (*OpResp, error)
}

type serverServiceClient struct {
	cc *grpc.ClientConn
}

func NewServerServiceClient(cc *grpc.ClientConn) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) NotifyAllImUser(ctx context.Context, in *NotifyAllImUserReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := grpc.Invoke(ctx, "/immangerserver.ServerService/NotifyAllImUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) BannedUser(ctx context.Context, in *BannedUserReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := grpc.Invoke(ctx, "/immangerserver.ServerService/BannedUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) KickUser(ctx context.Context, in *KickUserReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := grpc.Invoke(ctx, "/immangerserver.ServerService/KickUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := grpc.Invoke(ctx, "/immangerserver.ServerService/DelUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := grpc.Invoke(ctx, "/immangerserver.ServerService/deleteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ConverOwernsGroup(ctx context.Context, in *ConverOwernsGroupReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := grpc.Invoke(ctx, "/immangerserver.ServerService/converOwernsGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ClearUserPeerHistory(ctx context.Context, in *ClearUserPeerHistoryReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := grpc.Invoke(ctx, "/immangerserver.ServerService/clearUserPeerHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) DelTwoCheck(ctx context.Context, in *DelTwoCheckReq, opts ...grpc.CallOption) (*OpResp, error) {
	out := new(OpResp)
	err := grpc.Invoke(ctx, "/immangerserver.ServerService/delTwoCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServerService service

type ServerServiceServer interface {
	// 通知系统所有人的功能（公告）
	NotifyAllImUser(context.Context, *NotifyAllImUserReq) (*OpResp, error)
	// 禁止人登录功能/禁止用户登录时间
	BannedUser(context.Context, *BannedUserReq) (*OpResp, error)
	// 踢人下线功能
	KickUser(context.Context, *KickUserReq) (*OpResp, error)
	// 删除账号功能（兼顾踢人下线）
	DelUser(context.Context, *DelUserReq) (*OpResp, error)
	// 解散群功能
	DeleteGroup(context.Context, *DeleteGroupReq) (*OpResp, error)
	// 将一个用户的创建的所有群转让给指定用户
	ConverOwernsGroup(context.Context, *ConverOwernsGroupReq) (*OpResp, error)
	// 清楚用户历史功能（针对单聊）
	ClearUserPeerHistory(context.Context, *ClearUserPeerHistoryReq) (*OpResp, error)
	// 删除两步验证功能
	DelTwoCheck(context.Context, *DelTwoCheckReq) (*OpResp, error)
}

func RegisterServerServiceServer(s *grpc.Server, srv ServerServiceServer) {
	s.RegisterService(&_ServerService_serviceDesc, srv)
}

func _ServerService_NotifyAllImUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyAllImUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).NotifyAllImUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/NotifyAllImUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).NotifyAllImUser(ctx, req.(*NotifyAllImUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_BannedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannedUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).BannedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/BannedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).BannedUser(ctx, req.(*BannedUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_KickUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).KickUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/KickUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).KickUser(ctx, req.(*KickUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_DelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).DelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/DelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).DelUser(ctx, req.(*DelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ConverOwernsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConverOwernsGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ConverOwernsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/ConverOwernsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ConverOwernsGroup(ctx, req.(*ConverOwernsGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ClearUserPeerHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearUserPeerHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ClearUserPeerHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/ClearUserPeerHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ClearUserPeerHistory(ctx, req.(*ClearUserPeerHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_DelTwoCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTwoCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).DelTwoCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immangerserver.ServerService/DelTwoCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).DelTwoCheck(ctx, req.(*DelTwoCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "immangerserver.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyAllImUser",
			Handler:    _ServerService_NotifyAllImUser_Handler,
		},
		{
			MethodName: "BannedUser",
			Handler:    _ServerService_BannedUser_Handler,
		},
		{
			MethodName: "KickUser",
			Handler:    _ServerService_KickUser_Handler,
		},
		{
			MethodName: "DelUser",
			Handler:    _ServerService_DelUser_Handler,
		},
		{
			MethodName: "deleteGroup",
			Handler:    _ServerService_DeleteGroup_Handler,
		},
		{
			MethodName: "converOwernsGroup",
			Handler:    _ServerService_ConverOwernsGroup_Handler,
		},
		{
			MethodName: "clearUserPeerHistory",
			Handler:    _ServerService_ClearUserPeerHistory_Handler,
		},
		{
			MethodName: "delTwoCheck",
			Handler:    _ServerService_DelTwoCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/immangerserver/immangerserver.proto",
}

func (m *DelTwoCheckReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelTwoCheckReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImmangerserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	return i, nil
}

func (m *ClearUserPeerHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearUserPeerHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImmangerserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	return i, nil
}

func (m *ConverOwernsGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConverOwernsGroupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FromPhone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImmangerserver(dAtA, i, uint64(len(m.FromPhone)))
		i += copy(dAtA[i:], m.FromPhone)
	}
	if len(m.ToPhone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImmangerserver(dAtA, i, uint64(len(m.ToPhone)))
		i += copy(dAtA[i:], m.ToPhone)
	}
	return i, nil
}

func (m *DeleteGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGroupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImmangerserver(dAtA, i, uint64(m.ChannelId))
	}
	return i, nil
}

func (m *DelUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserPhone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImmangerserver(dAtA, i, uint64(len(m.UserPhone)))
		i += copy(dAtA[i:], m.UserPhone)
	}
	return i, nil
}

func (m *OpResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImmangerserver(dAtA, i, uint64(m.Err))
	}
	return i, nil
}

func (m *KickUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KickedPhone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImmangerserver(dAtA, i, uint64(len(m.KickedPhone)))
		i += copy(dAtA[i:], m.KickedPhone)
	}
	return i, nil
}

func (m *BannedUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannedUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserPhone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImmangerserver(dAtA, i, uint64(len(m.UserPhone)))
		i += copy(dAtA[i:], m.UserPhone)
	}
	if m.BannedDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImmangerserver(dAtA, i, uint64(m.BannedDate))
	}
	return i, nil
}

func (m *NotifyAllImUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyAllImUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CNNotifyMsg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImmangerserver(dAtA, i, uint64(len(m.CNNotifyMsg)))
		i += copy(dAtA[i:], m.CNNotifyMsg)
	}
	if len(m.ENNotifyMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImmangerserver(dAtA, i, uint64(len(m.ENNotifyMsg)))
		i += copy(dAtA[i:], m.ENNotifyMsg)
	}
	return i, nil
}

func encodeVarintImmangerserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DelTwoCheckReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImmangerserver(uint64(l))
	}
	return n
}

func (m *ClearUserPeerHistoryReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImmangerserver(uint64(l))
	}
	return n
}

func (m *ConverOwernsGroupReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.FromPhone)
	if l > 0 {
		n += 1 + l + sovImmangerserver(uint64(l))
	}
	l = len(m.ToPhone)
	if l > 0 {
		n += 1 + l + sovImmangerserver(uint64(l))
	}
	return n
}

func (m *DeleteGroupReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovImmangerserver(uint64(m.ChannelId))
	}
	return n
}

func (m *DelUserReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserPhone)
	if l > 0 {
		n += 1 + l + sovImmangerserver(uint64(l))
	}
	return n
}

func (m *OpResp) Size() (n int) {
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovImmangerserver(uint64(m.Err))
	}
	return n
}

func (m *KickUserReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.KickedPhone)
	if l > 0 {
		n += 1 + l + sovImmangerserver(uint64(l))
	}
	return n
}

func (m *BannedUserReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserPhone)
	if l > 0 {
		n += 1 + l + sovImmangerserver(uint64(l))
	}
	if m.BannedDate != 0 {
		n += 1 + sovImmangerserver(uint64(m.BannedDate))
	}
	return n
}

func (m *NotifyAllImUserReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.CNNotifyMsg)
	if l > 0 {
		n += 1 + l + sovImmangerserver(uint64(l))
	}
	l = len(m.ENNotifyMsg)
	if l > 0 {
		n += 1 + l + sovImmangerserver(uint64(l))
	}
	return n
}

func sovImmangerserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImmangerserver(x uint64) (n int) {
	return sovImmangerserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelTwoCheckReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImmangerserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: delTwoCheckReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: delTwoCheckReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmangerserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmangerserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImmangerserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImmangerserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearUserPeerHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImmangerserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: clearUserPeerHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: clearUserPeerHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmangerserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmangerserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImmangerserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImmangerserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConverOwernsGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImmangerserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: converOwernsGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: converOwernsGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmangerserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmangerserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmangerserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmangerserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImmangerserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImmangerserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImmangerserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: deleteGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: deleteGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmangerserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImmangerserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImmangerserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImmangerserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmangerserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmangerserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImmangerserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImmangerserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImmangerserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmangerserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= (ErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImmangerserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImmangerserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImmangerserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmangerserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmangerserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KickedPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImmangerserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImmangerserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BannedUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImmangerserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BannedUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BannedUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmangerserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmangerserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedDate", wireType)
			}
			m.BannedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmangerserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImmangerserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImmangerserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyAllImUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImmangerserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyAllImUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyAllImUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNNotifyMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmangerserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmangerserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CNNotifyMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ENNotifyMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmangerserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmangerserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ENNotifyMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImmangerserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImmangerserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImmangerserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImmangerserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImmangerserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImmangerserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImmangerserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImmangerserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImmangerserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImmangerserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImmangerserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/immangerserver/immangerserver.proto", fileDescriptorImmangerserver)
}

var fileDescriptorImmangerserver = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0x0b, 0x4d, 0xc9, 0x84, 0xa4, 0x61, 0x15, 0x41, 0x29, 0x34, 0xaa, 0x56, 0x08, 0x50,
	0x91, 0x12, 0xa9, 0x08, 0x71, 0x44, 0x69, 0x1a, 0xda, 0x08, 0xea, 0x54, 0x4e, 0x2b, 0xc1, 0x09,
	0x39, 0xf6, 0x38, 0x59, 0xd5, 0xf6, 0x9a, 0xb5, 0xdd, 0xaa, 0x7f, 0xc8, 0x91, 0x4f, 0x40, 0xb9,
	0xf3, 0x0f, 0xc8, 0x76, 0x9c, 0x6c, 0x36, 0xa9, 0xb9, 0x58, 0x9a, 0xe7, 0xb7, 0x6f, 0xde, 0xcc,
	0xce, 0x0e, 0x9c, 0x8d, 0x59, 0xe4, 0x9a, 0xa3, 0x96, 0x35, 0x31, 0xa3, 0x10, 0xc5, 0x0d, 0x8a,
	0x16, 0xf3, 0xda, 0xcc, 0x8f, 0x50, 0x38, 0xa6, 0x85, 0x81, 0xe0, 0xa3, 0xd8, 0x69, 0x33, 0xcf,
	0x33, 0xfd, 0x31, 0x8a, 0x8c, 0xa1, 0x84, 0xad, 0x40, 0xf0, 0x88, 0x93, 0xda, 0x32, 0x4a, 0x5f,
	0x43, 0xcd, 0x46, 0xf7, 0xf2, 0x96, 0x77, 0x27, 0x68, 0x5d, 0x1b, 0xf8, 0x93, 0x34, 0x60, 0x2b,
	0x98, 0x70, 0x1f, 0x77, 0xb5, 0x03, 0xed, 0x6d, 0xd9, 0xc8, 0x02, 0xda, 0x86, 0x67, 0x96, 0x8b,
	0xa6, 0xb8, 0x0a, 0x51, 0x5c, 0x20, 0x8a, 0x33, 0x16, 0x46, 0x5c, 0xdc, 0xdd, 0x7f, 0x40, 0x87,
	0x86, 0xc5, 0xfd, 0x1b, 0x14, 0x83, 0x5b, 0x14, 0x7e, 0x78, 0x2a, 0x78, 0x1c, 0x24, 0xec, 0x97,
	0x50, 0x76, 0x04, 0xf7, 0x2e, 0xa4, 0x13, 0x0b, 0x80, 0xec, 0xc2, 0x76, 0xc4, 0xb3, 0x7f, 0x9b,
	0xe9, 0xbf, 0x3c, 0xa4, 0xed, 0xd4, 0x28, 0x46, 0x38, 0x57, 0xda, 0x07, 0xb0, 0x26, 0xa6, 0xef,
	0xa3, 0xfb, 0x83, 0xd9, 0xa9, 0xd4, 0x96, 0x51, 0x9e, 0x21, 0x7d, 0x9b, 0x1e, 0x02, 0x9c, 0xa0,
	0x9b, 0xf8, 0x9d, 0xa5, 0x8d, 0x13, 0xeb, 0x72, 0xda, 0x39, 0x40, 0x3f, 0x40, 0x69, 0x10, 0x18,
	0x18, 0x06, 0xe4, 0x1d, 0x3c, 0x40, 0x21, 0x52, 0x46, 0xed, 0xe8, 0x79, 0x4b, 0xe9, 0x61, 0x4f,
	0x08, 0x2e, 0xba, 0xdc, 0x46, 0x23, 0x61, 0xd1, 0x36, 0x54, 0xbe, 0x30, 0xeb, 0x3a, 0xcf, 0x71,
	0x90, 0x85, 0x68, 0xcb, 0x59, 0x64, 0x88, 0x9e, 0x43, 0xf5, 0x38, 0xf1, 0x67, 0x4b, 0xb6, 0xae,
	0x54, 0x5b, 0x73, 0x80, 0x34, 0x01, 0x46, 0x29, 0xfd, 0xc4, 0x8c, 0xb2, 0x86, 0x6c, 0x19, 0x12,
	0x42, 0xbf, 0x01, 0xd1, 0x79, 0xc4, 0x9c, 0xbb, 0x8e, 0xeb, 0xf6, 0x3d, 0xc9, 0x46, 0x57, 0xcf,
	0xf0, 0xf3, 0x70, 0x9c, 0xdb, 0x90, 0xa0, 0x84, 0xd1, 0x93, 0x18, 0x59, 0xa7, 0x65, 0xe8, 0xf0,
	0x23, 0x94, 0xe7, 0xb5, 0x92, 0x2a, 0x94, 0x87, 0xb1, 0x85, 0x61, 0xe8, 0xc4, 0x6e, 0x7d, 0x83,
	0x00, 0x94, 0x3e, 0x9b, 0xcc, 0x45, 0xbb, 0xae, 0x91, 0x1d, 0xa8, 0xf4, 0xf5, 0xcb, 0x9e, 0xa1,
	0x77, 0xbe, 0xf6, 0x0c, 0xa3, 0xbe, 0x79, 0xf4, 0xf7, 0x21, 0x54, 0x87, 0x69, 0xb3, 0x92, 0x2f,
	0xb3, 0x90, 0x0c, 0x60, 0x47, 0x31, 0x49, 0xa8, 0xda, 0xd7, 0xd5, 0x2a, 0xf6, 0x9e, 0xaa, 0x9c,
	0xec, 0x82, 0xe8, 0x06, 0xe9, 0x01, 0x2c, 0x9a, 0x48, 0xf6, 0x55, 0xde, 0x52, 0x83, 0x0b, 0x64,
	0x3a, 0xf0, 0x28, 0xbf, 0x3c, 0xf2, 0x42, 0x65, 0x49, 0xd7, 0x5a, 0x20, 0xf1, 0x09, 0xb6, 0x67,
	0x23, 0x46, 0xf6, 0x54, 0xd2, 0x62, 0xf6, 0x0a, 0x04, 0x4e, 0xa1, 0x22, 0x0d, 0x35, 0x69, 0xaa,
	0xc4, 0xe5, 0x89, 0x2f, 0x10, 0x1a, 0xc2, 0x93, 0x95, 0xd7, 0x46, 0x5e, 0xa9, 0xf4, 0x75, 0x0f,
	0xb2, 0x40, 0xf4, 0x3b, 0x34, 0xd6, 0xbd, 0x79, 0xf2, 0x66, 0x45, 0x77, 0xfd, 0x66, 0xf8, 0x6f,
	0xe1, 0xf9, 0xda, 0x59, 0x5b, 0xb8, 0xb4, 0x93, 0xee, 0x17, 0x3a, 0x7e, 0xfc, 0x6b, 0xda, 0xd4,
	0x7e, 0x4f, 0x9b, 0xda, 0x9f, 0x69, 0x53, 0x1b, 0x95, 0xd2, 0x25, 0xf7, 0xfe, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x17, 0x8f, 0xbf, 0x57, 0x30, 0x05, 0x00, 0x00,
}
