// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pbsearchserver.proto

package pbsearchserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchServiceClient interface {
	SearchMessage(ctx context.Context, in *SearchMessageReq, opts ...grpc.CallOption) (*SearchResp, error)
	SearchUserMessageByMaxMsgId(ctx context.Context, in *SearchUserMessageByMaxMsgIdReq, opts ...grpc.CallOption) (*SearchResp, error)
	SearchChannelMessageByMaxMsgId(ctx context.Context, in *SearchChannelMessageByMaxMsgIdReq, opts ...grpc.CallOption) (*SearchResp, error)
	UpdateUserMessageMediaUnreadByMsgIds(ctx context.Context, in *UpdateUserMessageMediaUnreadByMsgIdsReq, opts ...grpc.CallOption) (*NoUseResp, error)
	SearchUserMessageMedia(ctx context.Context, in *SearchUserMessageMediaReq, opts ...grpc.CallOption) (*SearchMediaResp, error)
	SearchChannelMessageMedia(ctx context.Context, in *SearchChannelMessageMediaReq, opts ...grpc.CallOption) (*SearchMediaResp, error)
	// 搜索logic协议处理
	HandleSearchLogic(ctx context.Context, in *HandleSearchLogicReq, opts ...grpc.CallOption) (*HandleSearchLogicResp, error)
	// 新增消息
	AddMessage(ctx context.Context, in *MessageInfo, opts ...grpc.CallOption) (*NoUseResp, error)
	// 单条删除普通消息
	DeleteUserMessage(ctx context.Context, in *DeleteUserMessageReq, opts ...grpc.CallOption) (*NoUseResp, error)
	// 单条删除超级群消息
	DeleteChannelMessage(ctx context.Context, in *DeleteChannelMessageReq, opts ...grpc.CallOption) (*NoUseResp, error)
	// 批量删除普通消息
	DeleteUserMessageByMsgIds(ctx context.Context, in *DeleteUserMessageByMsgIdsReq, opts ...grpc.CallOption) (*NoUseResp, error)
	// 根据Userid、WithId、WithType删除普通消息-(清除历史消息)
	DeleteUserMessageByUWT(ctx context.Context, in *DeleteUserMessageByUWTReq, opts ...grpc.CallOption) (*NoUseResp, error)
	DeleteUserMessageByUuids(ctx context.Context, in *DeleteUserMessageByUuidsReq, opts ...grpc.CallOption) (*NoUseResp, error)
	// 批量删除超级群消息
	DeleteChannelMessageByMsgIds(ctx context.Context, in *DeleteChannelMessageByMsgIdsReq, opts ...grpc.CallOption) (*NoUseResp, error)
	// 根据WithId删除超级群消息
	DeleteChannelMessageByWithId(ctx context.Context, in *DeleteChannelMessageByWithIdReq, opts ...grpc.CallOption) (*NoUseResp, error)
	// 超级群清除历史
	DeleteChannelMessageByUWM(ctx context.Context, in *DeleteChannelMessageByUWMReq, opts ...grpc.CallOption) (*NoUseResp, error)
	// 添加群组成员
	InsertGroupUsers(ctx context.Context, in *InsertGroupUsersReq, opts ...grpc.CallOption) (*HandlerReply, error)
	// 移除群组成员
	DeleteGroupUsers(ctx context.Context, in *DeleteGroupUsersReq, opts ...grpc.CallOption) (*HandlerReply, error)
	// 更新群组用户
	UpdateGroupUser(ctx context.Context, in *UpdateGroupUserReq, opts ...grpc.CallOption) (*HandlerReply, error)
	// 更新用户昵称
	RenameGroupUser(ctx context.Context, in *RenameGroupUserReq, opts ...grpc.CallOption) (*HandlerReply, error)
	// 群组成员搜索(昵称模糊匹配)
	SearchGroupUsers(ctx context.Context, in *SearchGroupUsersReq, opts ...grpc.CallOption) (*SearchGroupUsersRsp, error)
	// @ add by qingsong at 2020-04-24 for fuzzy search channel by title or username /////////////////
	// 新增群组名称信息 for create channel
	InsertChanName(ctx context.Context, in *InsertChanNameReq, opts ...grpc.CallOption) (*HandlerReply, error)
	// 更新群组名称信息 for edit channel title or username column
	UpdateChanName(ctx context.Context, in *UpdateChanNameReq, opts ...grpc.CallOption) (*HandlerReply, error)
	// 删除群组名称信息 for dismiss channel
	DeleteChanName(ctx context.Context, in *DeleteChanNameReq, opts ...grpc.CallOption) (*HandlerReply, error)
	// 根据名称搜索群组
	SearchChannels(ctx context.Context, in *SearchChannelsReq, opts ...grpc.CallOption) (*SearchChannelsRsp, error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) SearchMessage(ctx context.Context, in *SearchMessageReq, opts ...grpc.CallOption) (*SearchResp, error) {
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/SearchMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchUserMessageByMaxMsgId(ctx context.Context, in *SearchUserMessageByMaxMsgIdReq, opts ...grpc.CallOption) (*SearchResp, error) {
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/SearchUserMessageByMaxMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchChannelMessageByMaxMsgId(ctx context.Context, in *SearchChannelMessageByMaxMsgIdReq, opts ...grpc.CallOption) (*SearchResp, error) {
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/SearchChannelMessageByMaxMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) UpdateUserMessageMediaUnreadByMsgIds(ctx context.Context, in *UpdateUserMessageMediaUnreadByMsgIdsReq, opts ...grpc.CallOption) (*NoUseResp, error) {
	out := new(NoUseResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/UpdateUserMessageMediaUnreadByMsgIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchUserMessageMedia(ctx context.Context, in *SearchUserMessageMediaReq, opts ...grpc.CallOption) (*SearchMediaResp, error) {
	out := new(SearchMediaResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/SearchUserMessageMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchChannelMessageMedia(ctx context.Context, in *SearchChannelMessageMediaReq, opts ...grpc.CallOption) (*SearchMediaResp, error) {
	out := new(SearchMediaResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/SearchChannelMessageMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) HandleSearchLogic(ctx context.Context, in *HandleSearchLogicReq, opts ...grpc.CallOption) (*HandleSearchLogicResp, error) {
	out := new(HandleSearchLogicResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/HandleSearchLogic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) AddMessage(ctx context.Context, in *MessageInfo, opts ...grpc.CallOption) (*NoUseResp, error) {
	out := new(NoUseResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/AddMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteUserMessage(ctx context.Context, in *DeleteUserMessageReq, opts ...grpc.CallOption) (*NoUseResp, error) {
	out := new(NoUseResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/DeleteUserMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteChannelMessage(ctx context.Context, in *DeleteChannelMessageReq, opts ...grpc.CallOption) (*NoUseResp, error) {
	out := new(NoUseResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/DeleteChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteUserMessageByMsgIds(ctx context.Context, in *DeleteUserMessageByMsgIdsReq, opts ...grpc.CallOption) (*NoUseResp, error) {
	out := new(NoUseResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/DeleteUserMessageByMsgIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteUserMessageByUWT(ctx context.Context, in *DeleteUserMessageByUWTReq, opts ...grpc.CallOption) (*NoUseResp, error) {
	out := new(NoUseResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/DeleteUserMessageByUWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteUserMessageByUuids(ctx context.Context, in *DeleteUserMessageByUuidsReq, opts ...grpc.CallOption) (*NoUseResp, error) {
	out := new(NoUseResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/DeleteUserMessageByUuids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteChannelMessageByMsgIds(ctx context.Context, in *DeleteChannelMessageByMsgIdsReq, opts ...grpc.CallOption) (*NoUseResp, error) {
	out := new(NoUseResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/DeleteChannelMessageByMsgIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteChannelMessageByWithId(ctx context.Context, in *DeleteChannelMessageByWithIdReq, opts ...grpc.CallOption) (*NoUseResp, error) {
	out := new(NoUseResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/DeleteChannelMessageByWithId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteChannelMessageByUWM(ctx context.Context, in *DeleteChannelMessageByUWMReq, opts ...grpc.CallOption) (*NoUseResp, error) {
	out := new(NoUseResp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/DeleteChannelMessageByUWM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) InsertGroupUsers(ctx context.Context, in *InsertGroupUsersReq, opts ...grpc.CallOption) (*HandlerReply, error) {
	out := new(HandlerReply)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/InsertGroupUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteGroupUsers(ctx context.Context, in *DeleteGroupUsersReq, opts ...grpc.CallOption) (*HandlerReply, error) {
	out := new(HandlerReply)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/DeleteGroupUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) UpdateGroupUser(ctx context.Context, in *UpdateGroupUserReq, opts ...grpc.CallOption) (*HandlerReply, error) {
	out := new(HandlerReply)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/UpdateGroupUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) RenameGroupUser(ctx context.Context, in *RenameGroupUserReq, opts ...grpc.CallOption) (*HandlerReply, error) {
	out := new(HandlerReply)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/RenameGroupUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchGroupUsers(ctx context.Context, in *SearchGroupUsersReq, opts ...grpc.CallOption) (*SearchGroupUsersRsp, error) {
	out := new(SearchGroupUsersRsp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/SearchGroupUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) InsertChanName(ctx context.Context, in *InsertChanNameReq, opts ...grpc.CallOption) (*HandlerReply, error) {
	out := new(HandlerReply)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/InsertChanName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) UpdateChanName(ctx context.Context, in *UpdateChanNameReq, opts ...grpc.CallOption) (*HandlerReply, error) {
	out := new(HandlerReply)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/UpdateChanName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteChanName(ctx context.Context, in *DeleteChanNameReq, opts ...grpc.CallOption) (*HandlerReply, error) {
	out := new(HandlerReply)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/DeleteChanName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchChannels(ctx context.Context, in *SearchChannelsReq, opts ...grpc.CallOption) (*SearchChannelsRsp, error) {
	out := new(SearchChannelsRsp)
	err := c.cc.Invoke(ctx, "/pbsearchserver.SearchService/SearchChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServiceServer is the server API for SearchService service.
// All implementations must embed UnimplementedSearchServiceServer
// for forward compatibility
type SearchServiceServer interface {
	SearchMessage(context.Context, *SearchMessageReq) (*SearchResp, error)
	SearchUserMessageByMaxMsgId(context.Context, *SearchUserMessageByMaxMsgIdReq) (*SearchResp, error)
	SearchChannelMessageByMaxMsgId(context.Context, *SearchChannelMessageByMaxMsgIdReq) (*SearchResp, error)
	UpdateUserMessageMediaUnreadByMsgIds(context.Context, *UpdateUserMessageMediaUnreadByMsgIdsReq) (*NoUseResp, error)
	SearchUserMessageMedia(context.Context, *SearchUserMessageMediaReq) (*SearchMediaResp, error)
	SearchChannelMessageMedia(context.Context, *SearchChannelMessageMediaReq) (*SearchMediaResp, error)
	// 搜索logic协议处理
	HandleSearchLogic(context.Context, *HandleSearchLogicReq) (*HandleSearchLogicResp, error)
	// 新增消息
	AddMessage(context.Context, *MessageInfo) (*NoUseResp, error)
	// 单条删除普通消息
	DeleteUserMessage(context.Context, *DeleteUserMessageReq) (*NoUseResp, error)
	// 单条删除超级群消息
	DeleteChannelMessage(context.Context, *DeleteChannelMessageReq) (*NoUseResp, error)
	// 批量删除普通消息
	DeleteUserMessageByMsgIds(context.Context, *DeleteUserMessageByMsgIdsReq) (*NoUseResp, error)
	// 根据Userid、WithId、WithType删除普通消息-(清除历史消息)
	DeleteUserMessageByUWT(context.Context, *DeleteUserMessageByUWTReq) (*NoUseResp, error)
	DeleteUserMessageByUuids(context.Context, *DeleteUserMessageByUuidsReq) (*NoUseResp, error)
	// 批量删除超级群消息
	DeleteChannelMessageByMsgIds(context.Context, *DeleteChannelMessageByMsgIdsReq) (*NoUseResp, error)
	// 根据WithId删除超级群消息
	DeleteChannelMessageByWithId(context.Context, *DeleteChannelMessageByWithIdReq) (*NoUseResp, error)
	// 超级群清除历史
	DeleteChannelMessageByUWM(context.Context, *DeleteChannelMessageByUWMReq) (*NoUseResp, error)
	// 添加群组成员
	InsertGroupUsers(context.Context, *InsertGroupUsersReq) (*HandlerReply, error)
	// 移除群组成员
	DeleteGroupUsers(context.Context, *DeleteGroupUsersReq) (*HandlerReply, error)
	// 更新群组用户
	UpdateGroupUser(context.Context, *UpdateGroupUserReq) (*HandlerReply, error)
	// 更新用户昵称
	RenameGroupUser(context.Context, *RenameGroupUserReq) (*HandlerReply, error)
	// 群组成员搜索(昵称模糊匹配)
	SearchGroupUsers(context.Context, *SearchGroupUsersReq) (*SearchGroupUsersRsp, error)
	// @ add by qingsong at 2020-04-24 for fuzzy search channel by title or username /////////////////
	// 新增群组名称信息 for create channel
	InsertChanName(context.Context, *InsertChanNameReq) (*HandlerReply, error)
	// 更新群组名称信息 for edit channel title or username column
	UpdateChanName(context.Context, *UpdateChanNameReq) (*HandlerReply, error)
	// 删除群组名称信息 for dismiss channel
	DeleteChanName(context.Context, *DeleteChanNameReq) (*HandlerReply, error)
	// 根据名称搜索群组
	SearchChannels(context.Context, *SearchChannelsReq) (*SearchChannelsRsp, error)
	mustEmbedUnimplementedSearchServiceServer()
}

// UnimplementedSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSearchServiceServer struct {
}

func (UnimplementedSearchServiceServer) SearchMessage(context.Context, *SearchMessageReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMessage not implemented")
}
func (UnimplementedSearchServiceServer) SearchUserMessageByMaxMsgId(context.Context, *SearchUserMessageByMaxMsgIdReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserMessageByMaxMsgId not implemented")
}
func (UnimplementedSearchServiceServer) SearchChannelMessageByMaxMsgId(context.Context, *SearchChannelMessageByMaxMsgIdReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChannelMessageByMaxMsgId not implemented")
}
func (UnimplementedSearchServiceServer) UpdateUserMessageMediaUnreadByMsgIds(context.Context, *UpdateUserMessageMediaUnreadByMsgIdsReq) (*NoUseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserMessageMediaUnreadByMsgIds not implemented")
}
func (UnimplementedSearchServiceServer) SearchUserMessageMedia(context.Context, *SearchUserMessageMediaReq) (*SearchMediaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserMessageMedia not implemented")
}
func (UnimplementedSearchServiceServer) SearchChannelMessageMedia(context.Context, *SearchChannelMessageMediaReq) (*SearchMediaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChannelMessageMedia not implemented")
}
func (UnimplementedSearchServiceServer) HandleSearchLogic(context.Context, *HandleSearchLogicReq) (*HandleSearchLogicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleSearchLogic not implemented")
}
func (UnimplementedSearchServiceServer) AddMessage(context.Context, *MessageInfo) (*NoUseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMessage not implemented")
}
func (UnimplementedSearchServiceServer) DeleteUserMessage(context.Context, *DeleteUserMessageReq) (*NoUseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMessage not implemented")
}
func (UnimplementedSearchServiceServer) DeleteChannelMessage(context.Context, *DeleteChannelMessageReq) (*NoUseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelMessage not implemented")
}
func (UnimplementedSearchServiceServer) DeleteUserMessageByMsgIds(context.Context, *DeleteUserMessageByMsgIdsReq) (*NoUseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMessageByMsgIds not implemented")
}
func (UnimplementedSearchServiceServer) DeleteUserMessageByUWT(context.Context, *DeleteUserMessageByUWTReq) (*NoUseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMessageByUWT not implemented")
}
func (UnimplementedSearchServiceServer) DeleteUserMessageByUuids(context.Context, *DeleteUserMessageByUuidsReq) (*NoUseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMessageByUuids not implemented")
}
func (UnimplementedSearchServiceServer) DeleteChannelMessageByMsgIds(context.Context, *DeleteChannelMessageByMsgIdsReq) (*NoUseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelMessageByMsgIds not implemented")
}
func (UnimplementedSearchServiceServer) DeleteChannelMessageByWithId(context.Context, *DeleteChannelMessageByWithIdReq) (*NoUseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelMessageByWithId not implemented")
}
func (UnimplementedSearchServiceServer) DeleteChannelMessageByUWM(context.Context, *DeleteChannelMessageByUWMReq) (*NoUseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelMessageByUWM not implemented")
}
func (UnimplementedSearchServiceServer) InsertGroupUsers(context.Context, *InsertGroupUsersReq) (*HandlerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertGroupUsers not implemented")
}
func (UnimplementedSearchServiceServer) DeleteGroupUsers(context.Context, *DeleteGroupUsersReq) (*HandlerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupUsers not implemented")
}
func (UnimplementedSearchServiceServer) UpdateGroupUser(context.Context, *UpdateGroupUserReq) (*HandlerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupUser not implemented")
}
func (UnimplementedSearchServiceServer) RenameGroupUser(context.Context, *RenameGroupUserReq) (*HandlerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameGroupUser not implemented")
}
func (UnimplementedSearchServiceServer) SearchGroupUsers(context.Context, *SearchGroupUsersReq) (*SearchGroupUsersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroupUsers not implemented")
}
func (UnimplementedSearchServiceServer) InsertChanName(context.Context, *InsertChanNameReq) (*HandlerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertChanName not implemented")
}
func (UnimplementedSearchServiceServer) UpdateChanName(context.Context, *UpdateChanNameReq) (*HandlerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChanName not implemented")
}
func (UnimplementedSearchServiceServer) DeleteChanName(context.Context, *DeleteChanNameReq) (*HandlerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChanName not implemented")
}
func (UnimplementedSearchServiceServer) SearchChannels(context.Context, *SearchChannelsReq) (*SearchChannelsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChannels not implemented")
}
func (UnimplementedSearchServiceServer) mustEmbedUnimplementedSearchServiceServer() {}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_SearchMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/SearchMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchMessage(ctx, req.(*SearchMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchUserMessageByMaxMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserMessageByMaxMsgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchUserMessageByMaxMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/SearchUserMessageByMaxMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchUserMessageByMaxMsgId(ctx, req.(*SearchUserMessageByMaxMsgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchChannelMessageByMaxMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChannelMessageByMaxMsgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchChannelMessageByMaxMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/SearchChannelMessageByMaxMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchChannelMessageByMaxMsgId(ctx, req.(*SearchChannelMessageByMaxMsgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_UpdateUserMessageMediaUnreadByMsgIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserMessageMediaUnreadByMsgIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).UpdateUserMessageMediaUnreadByMsgIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/UpdateUserMessageMediaUnreadByMsgIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).UpdateUserMessageMediaUnreadByMsgIds(ctx, req.(*UpdateUserMessageMediaUnreadByMsgIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchUserMessageMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserMessageMediaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchUserMessageMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/SearchUserMessageMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchUserMessageMedia(ctx, req.(*SearchUserMessageMediaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchChannelMessageMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChannelMessageMediaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchChannelMessageMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/SearchChannelMessageMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchChannelMessageMedia(ctx, req.(*SearchChannelMessageMediaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_HandleSearchLogic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleSearchLogicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).HandleSearchLogic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/HandleSearchLogic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).HandleSearchLogic(ctx, req.(*HandleSearchLogicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_AddMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).AddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/AddMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).AddMessage(ctx, req.(*MessageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteUserMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteUserMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/DeleteUserMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteUserMessage(ctx, req.(*DeleteUserMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/DeleteChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteChannelMessage(ctx, req.(*DeleteChannelMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteUserMessageByMsgIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserMessageByMsgIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteUserMessageByMsgIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/DeleteUserMessageByMsgIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteUserMessageByMsgIds(ctx, req.(*DeleteUserMessageByMsgIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteUserMessageByUWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserMessageByUWTReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteUserMessageByUWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/DeleteUserMessageByUWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteUserMessageByUWT(ctx, req.(*DeleteUserMessageByUWTReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteUserMessageByUuids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserMessageByUuidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteUserMessageByUuids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/DeleteUserMessageByUuids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteUserMessageByUuids(ctx, req.(*DeleteUserMessageByUuidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteChannelMessageByMsgIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelMessageByMsgIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteChannelMessageByMsgIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/DeleteChannelMessageByMsgIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteChannelMessageByMsgIds(ctx, req.(*DeleteChannelMessageByMsgIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteChannelMessageByWithId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelMessageByWithIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteChannelMessageByWithId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/DeleteChannelMessageByWithId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteChannelMessageByWithId(ctx, req.(*DeleteChannelMessageByWithIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteChannelMessageByUWM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelMessageByUWMReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteChannelMessageByUWM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/DeleteChannelMessageByUWM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteChannelMessageByUWM(ctx, req.(*DeleteChannelMessageByUWMReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_InsertGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertGroupUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).InsertGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/InsertGroupUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).InsertGroupUsers(ctx, req.(*InsertGroupUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/DeleteGroupUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteGroupUsers(ctx, req.(*DeleteGroupUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_UpdateGroupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).UpdateGroupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/UpdateGroupUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).UpdateGroupUser(ctx, req.(*UpdateGroupUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_RenameGroupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameGroupUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).RenameGroupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/RenameGroupUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).RenameGroupUser(ctx, req.(*RenameGroupUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGroupUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/SearchGroupUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchGroupUsers(ctx, req.(*SearchGroupUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_InsertChanName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertChanNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).InsertChanName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/InsertChanName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).InsertChanName(ctx, req.(*InsertChanNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_UpdateChanName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).UpdateChanName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/UpdateChanName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).UpdateChanName(ctx, req.(*UpdateChanNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteChanName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChanNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteChanName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/DeleteChanName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteChanName(ctx, req.(*DeleteChanNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChannelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsearchserver.SearchService/SearchChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchChannels(ctx, req.(*SearchChannelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbsearchserver.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchMessage",
			Handler:    _SearchService_SearchMessage_Handler,
		},
		{
			MethodName: "SearchUserMessageByMaxMsgId",
			Handler:    _SearchService_SearchUserMessageByMaxMsgId_Handler,
		},
		{
			MethodName: "SearchChannelMessageByMaxMsgId",
			Handler:    _SearchService_SearchChannelMessageByMaxMsgId_Handler,
		},
		{
			MethodName: "UpdateUserMessageMediaUnreadByMsgIds",
			Handler:    _SearchService_UpdateUserMessageMediaUnreadByMsgIds_Handler,
		},
		{
			MethodName: "SearchUserMessageMedia",
			Handler:    _SearchService_SearchUserMessageMedia_Handler,
		},
		{
			MethodName: "SearchChannelMessageMedia",
			Handler:    _SearchService_SearchChannelMessageMedia_Handler,
		},
		{
			MethodName: "HandleSearchLogic",
			Handler:    _SearchService_HandleSearchLogic_Handler,
		},
		{
			MethodName: "AddMessage",
			Handler:    _SearchService_AddMessage_Handler,
		},
		{
			MethodName: "DeleteUserMessage",
			Handler:    _SearchService_DeleteUserMessage_Handler,
		},
		{
			MethodName: "DeleteChannelMessage",
			Handler:    _SearchService_DeleteChannelMessage_Handler,
		},
		{
			MethodName: "DeleteUserMessageByMsgIds",
			Handler:    _SearchService_DeleteUserMessageByMsgIds_Handler,
		},
		{
			MethodName: "DeleteUserMessageByUWT",
			Handler:    _SearchService_DeleteUserMessageByUWT_Handler,
		},
		{
			MethodName: "DeleteUserMessageByUuids",
			Handler:    _SearchService_DeleteUserMessageByUuids_Handler,
		},
		{
			MethodName: "DeleteChannelMessageByMsgIds",
			Handler:    _SearchService_DeleteChannelMessageByMsgIds_Handler,
		},
		{
			MethodName: "DeleteChannelMessageByWithId",
			Handler:    _SearchService_DeleteChannelMessageByWithId_Handler,
		},
		{
			MethodName: "DeleteChannelMessageByUWM",
			Handler:    _SearchService_DeleteChannelMessageByUWM_Handler,
		},
		{
			MethodName: "InsertGroupUsers",
			Handler:    _SearchService_InsertGroupUsers_Handler,
		},
		{
			MethodName: "DeleteGroupUsers",
			Handler:    _SearchService_DeleteGroupUsers_Handler,
		},
		{
			MethodName: "UpdateGroupUser",
			Handler:    _SearchService_UpdateGroupUser_Handler,
		},
		{
			MethodName: "RenameGroupUser",
			Handler:    _SearchService_RenameGroupUser_Handler,
		},
		{
			MethodName: "SearchGroupUsers",
			Handler:    _SearchService_SearchGroupUsers_Handler,
		},
		{
			MethodName: "InsertChanName",
			Handler:    _SearchService_InsertChanName_Handler,
		},
		{
			MethodName: "UpdateChanName",
			Handler:    _SearchService_UpdateChanName_Handler,
		},
		{
			MethodName: "DeleteChanName",
			Handler:    _SearchService_DeleteChanName_Handler,
		},
		{
			MethodName: "SearchChannels",
			Handler:    _SearchService_SearchChannels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbsearchserver.proto",
}
