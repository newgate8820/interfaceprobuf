// protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/pbsearchserver/pbsearchserver.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: pbsearchserver.proto

package pbsearchserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PeerType int32

const (
	PeerType_Empty     PeerType = 0
	PeerType_Self_User PeerType = 1
	PeerType_Chat      PeerType = 2
	PeerType_Channel   PeerType = 3
)

// Enum value maps for PeerType.
var (
	PeerType_name = map[int32]string{
		0: "Empty",
		1: "Self_User",
		2: "Chat",
		3: "Channel",
	}
	PeerType_value = map[string]int32{
		"Empty":     0,
		"Self_User": 1,
		"Chat":      2,
		"Channel":   3,
	}
)

func (x PeerType) Enum() *PeerType {
	p := new(PeerType)
	*p = x
	return p
}

func (x PeerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbsearchserver_proto_enumTypes[0].Descriptor()
}

func (PeerType) Type() protoreflect.EnumType {
	return &file_pbsearchserver_proto_enumTypes[0]
}

func (x PeerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerType.Descriptor instead.
func (PeerType) EnumDescriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{0}
}

type EMsgFlag int32

const (
	EMsgFlag_USERMESSAGE    EMsgFlag = 0
	EMsgFlag_CHANNELMESSAGE EMsgFlag = 1
)

// Enum value maps for EMsgFlag.
var (
	EMsgFlag_name = map[int32]string{
		0: "USERMESSAGE",
		1: "CHANNELMESSAGE",
	}
	EMsgFlag_value = map[string]int32{
		"USERMESSAGE":    0,
		"CHANNELMESSAGE": 1,
	}
)

func (x EMsgFlag) Enum() *EMsgFlag {
	p := new(EMsgFlag)
	*p = x
	return p
}

func (x EMsgFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMsgFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_pbsearchserver_proto_enumTypes[1].Descriptor()
}

func (EMsgFlag) Type() protoreflect.EnumType {
	return &file_pbsearchserver_proto_enumTypes[1]
}

func (x EMsgFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMsgFlag.Descriptor instead.
func (EMsgFlag) EnumDescriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{1}
}

type ErrorCode int32

const (
	ErrorCode_RPC_OK          ErrorCode = 0
	ErrorCode_RPC_ERROR       ErrorCode = 1
	ErrorCode_CHAN_NOT_EXIST  ErrorCode = 2
	ErrorCode_USER_NOT_EXIST  ErrorCode = 3
	ErrorCode_USER_NOT_FOUND  ErrorCode = 4
	ErrorCode_Keyword_Illegal ErrorCode = 5
	ErrorCode_Channel_Illegal ErrorCode = 6
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "RPC_OK",
		1: "RPC_ERROR",
		2: "CHAN_NOT_EXIST",
		3: "USER_NOT_EXIST",
		4: "USER_NOT_FOUND",
		5: "Keyword_Illegal",
		6: "Channel_Illegal",
	}
	ErrorCode_value = map[string]int32{
		"RPC_OK":          0,
		"RPC_ERROR":       1,
		"CHAN_NOT_EXIST":  2,
		"USER_NOT_EXIST":  3,
		"USER_NOT_FOUND":  4,
		"Keyword_Illegal": 5,
		"Channel_Illegal": 6,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbsearchserver_proto_enumTypes[2].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_pbsearchserver_proto_enumTypes[2]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{2}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WithId       int32    `protobuf:"varint,2,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`
	WithIdType   int32    `protobuf:"varint,3,opt,name=with_id_type,json=withIdType,proto3" json:"with_id_type,omitempty"`
	MsgId        int32    `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	MessageType  int32    `protobuf:"varint,5,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Message      string   `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	FromId       int32    `protobuf:"varint,7,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ToId         int32    `protobuf:"varint,8,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	Media        int32    `protobuf:"varint,9,opt,name=media,proto3" json:"media,omitempty"`
	Date         int32    `protobuf:"varint,10,opt,name=date,proto3" json:"date,omitempty"`
	Uuid         int64    `protobuf:"varint,11,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Flags        int32    `protobuf:"varint,12,opt,name=flags,proto3" json:"flags,omitempty"`
	Out          bool     `protobuf:"varint,13,opt,name=out,proto3" json:"out,omitempty"`
	Mentioned    bool     `protobuf:"varint,14,opt,name=mentioned,proto3" json:"mentioned,omitempty"`
	MediaUnread  bool     `protobuf:"varint,15,opt,name=mediaUnread,proto3" json:"mediaUnread,omitempty"`
	Silent       bool     `protobuf:"varint,16,opt,name=silent,proto3" json:"silent,omitempty"`
	Post         bool     `protobuf:"varint,17,opt,name=post,proto3" json:"post,omitempty"`
	Pts          int32    `protobuf:"varint,18,opt,name=pts,proto3" json:"pts,omitempty"`
	FwdFrom      string   `protobuf:"bytes,19,opt,name=fwd_from,json=fwdFrom,proto3" json:"fwd_from,omitempty"`
	ViaBotId     int32    `protobuf:"varint,20,opt,name=via_bot_id,json=viaBotId,proto3" json:"via_bot_id,omitempty"`
	ReplyToMsgId int32    `protobuf:"varint,21,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	MediaData    string   `protobuf:"bytes,22,opt,name=media_data,json=mediaData,proto3" json:"media_data,omitempty"`
	ReplyMarkup  string   `protobuf:"bytes,23,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities     string   `protobuf:"bytes,24,opt,name=entities,proto3" json:"entities,omitempty"`
	Views        int32    `protobuf:"varint,25,opt,name=views,proto3" json:"views,omitempty"`
	EditDate     int32    `protobuf:"varint,26,opt,name=edit_date,json=editDate,proto3" json:"edit_date,omitempty"`
	Action       string   `protobuf:"bytes,27,opt,name=action,proto3" json:"action,omitempty"`
	RandomId     int64    `protobuf:"varint,28,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	InsertDate   int32    `protobuf:"varint,29,opt,name=insert_date,json=insertDate,proto3" json:"insert_date,omitempty"`
	UpdateDate   int32    `protobuf:"varint,30,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	GroupId      int64    `protobuf:"varint,31,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Combination  string   `protobuf:"bytes,32,opt,name=combination,proto3" json:"combination,omitempty"`
	Encry        int32    `protobuf:"varint,33,opt,name=encry,proto3" json:"encry,omitempty"`
	Flag         EMsgFlag `protobuf:"varint,34,opt,name=flag,proto3,enum=pbsearchserver.EMsgFlag" json:"flag,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Message) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *Message) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *Message) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *Message) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *Message) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Message) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *Message) GetToId() int32 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *Message) GetMedia() int32 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *Message) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *Message) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *Message) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Message) GetOut() bool {
	if x != nil {
		return x.Out
	}
	return false
}

func (x *Message) GetMentioned() bool {
	if x != nil {
		return x.Mentioned
	}
	return false
}

func (x *Message) GetMediaUnread() bool {
	if x != nil {
		return x.MediaUnread
	}
	return false
}

func (x *Message) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *Message) GetPost() bool {
	if x != nil {
		return x.Post
	}
	return false
}

func (x *Message) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *Message) GetFwdFrom() string {
	if x != nil {
		return x.FwdFrom
	}
	return ""
}

func (x *Message) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

func (x *Message) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *Message) GetMediaData() string {
	if x != nil {
		return x.MediaData
	}
	return ""
}

func (x *Message) GetReplyMarkup() string {
	if x != nil {
		return x.ReplyMarkup
	}
	return ""
}

func (x *Message) GetEntities() string {
	if x != nil {
		return x.Entities
	}
	return ""
}

func (x *Message) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *Message) GetEditDate() int32 {
	if x != nil {
		return x.EditDate
	}
	return 0
}

func (x *Message) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Message) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *Message) GetInsertDate() int32 {
	if x != nil {
		return x.InsertDate
	}
	return 0
}

func (x *Message) GetUpdateDate() int32 {
	if x != nil {
		return x.UpdateDate
	}
	return 0
}

func (x *Message) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Message) GetCombination() string {
	if x != nil {
		return x.Combination
	}
	return ""
}

func (x *Message) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *Message) GetFlag() EMsgFlag {
	if x != nil {
		return x.Flag
	}
	return EMsgFlag_USERMESSAGE
}

type MessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WithId     int32  `protobuf:"varint,2,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`
	WithIdType int32  `protobuf:"varint,3,opt,name=with_id_type,json=withIdType,proto3" json:"with_id_type,omitempty"`
	MsgId      int32  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Message    string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	FromId     int32  `protobuf:"varint,6,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Media      int32  `protobuf:"varint,7,opt,name=media,proto3" json:"media,omitempty"`
	Date       int32  `protobuf:"varint,8,opt,name=date,proto3" json:"date,omitempty"`
	Encry      int32  `protobuf:"varint,9,opt,name=encry,proto3" json:"encry,omitempty"`
	Uuid       int64  `protobuf:"varint,10,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *MessageInfo) Reset() {
	*x = MessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageInfo) ProtoMessage() {}

func (x *MessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageInfo.ProtoReflect.Descriptor instead.
func (*MessageInfo) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{1}
}

func (x *MessageInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessageInfo) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *MessageInfo) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *MessageInfo) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *MessageInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MessageInfo) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *MessageInfo) GetMedia() int32 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *MessageInfo) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *MessageInfo) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *MessageInfo) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

// 搜索协议请求
type HandleSearchLogicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId  int64  `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId      int64  `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId     int32  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CrcId      int64  `protobuf:"varint,4,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	ObjBin     []byte `protobuf:"bytes,5,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	PhoneId    string `protobuf:"bytes,6,opt,name=phone_id,json=phoneId,proto3" json:"phone_id,omitempty"`
	Layer      int32  `protobuf:"varint,7,opt,name=layer,proto3" json:"layer,omitempty"`
	AppVersion string `protobuf:"bytes,8,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
}

func (x *HandleSearchLogicReq) Reset() {
	*x = HandleSearchLogicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleSearchLogicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleSearchLogicReq) ProtoMessage() {}

func (x *HandleSearchLogicReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleSearchLogicReq.ProtoReflect.Descriptor instead.
func (*HandleSearchLogicReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{2}
}

func (x *HandleSearchLogicReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleSearchLogicReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleSearchLogicReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *HandleSearchLogicReq) GetCrcId() int64 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleSearchLogicReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleSearchLogicReq) GetPhoneId() string {
	if x != nil {
		return x.PhoneId
	}
	return ""
}

func (x *HandleSearchLogicReq) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *HandleSearchLogicReq) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

// 搜索协议响应
type HandleSearchLogicResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ErrCode int32  `protobuf:"varint,2,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	ErrMsg  string `protobuf:"bytes,3,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (x *HandleSearchLogicResp) Reset() {
	*x = HandleSearchLogicResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleSearchLogicResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleSearchLogicResp) ProtoMessage() {}

func (x *HandleSearchLogicResp) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleSearchLogicResp.ProtoReflect.Descriptor instead.
func (*HandleSearchLogicResp) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{3}
}

func (x *HandleSearchLogicResp) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *HandleSearchLogicResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *HandleSearchLogicResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

// es 消息搜索结构体
type MessageSearchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId      int64    `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId     int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FromId     int32    `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PeerType   PeerType `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3,enum=pbsearchserver.PeerType" json:"peer_type,omitempty"`
	WithId     int32    `protobuf:"varint,5,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`
	WithIdType int32    `protobuf:"varint,6,opt,name=with_id_type,json=withIdType,proto3" json:"with_id_type,omitempty"`
	Keyword    string   `protobuf:"bytes,7,opt,name=keyword,proto3" json:"keyword,omitempty"`
	MinDate    int32    `protobuf:"varint,8,opt,name=min_date,json=minDate,proto3" json:"min_date,omitempty"`
	MaxDate    int32    `protobuf:"varint,9,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	Offset     int32    `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	MaxId      int32    `protobuf:"varint,11,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Limit      int32    `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
	Encry      int32    `protobuf:"varint,13,opt,name=encry,proto3" json:"encry,omitempty"`
	MediaTypes []int32  `protobuf:"varint,14,rep,packed,name=media_types,json=mediaTypes,proto3" json:"media_types,omitempty"`
}

func (x *MessageSearchReq) Reset() {
	*x = MessageSearchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSearchReq) ProtoMessage() {}

func (x *MessageSearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSearchReq.ProtoReflect.Descriptor instead.
func (*MessageSearchReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{4}
}

func (x *MessageSearchReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *MessageSearchReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessageSearchReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *MessageSearchReq) GetPeerType() PeerType {
	if x != nil {
		return x.PeerType
	}
	return PeerType_Empty
}

func (x *MessageSearchReq) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *MessageSearchReq) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *MessageSearchReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *MessageSearchReq) GetMinDate() int32 {
	if x != nil {
		return x.MinDate
	}
	return 0
}

func (x *MessageSearchReq) GetMaxDate() int32 {
	if x != nil {
		return x.MaxDate
	}
	return 0
}

func (x *MessageSearchReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MessageSearchReq) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *MessageSearchReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MessageSearchReq) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *MessageSearchReq) GetMediaTypes() []int32 {
	if x != nil {
		return x.MediaTypes
	}
	return nil
}

type NoUseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved uint32 `protobuf:"varint,1,opt,name=reserved,proto3" json:"reserved,omitempty"`
}

func (x *NoUseResp) Reset() {
	*x = NoUseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoUseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoUseResp) ProtoMessage() {}

func (x *NoUseResp) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoUseResp.ProtoReflect.Descriptor instead.
func (*NoUseResp) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{5}
}

func (x *NoUseResp) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

// 删除普通消息请求
type DeleteUserMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MsgId  int32 `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *DeleteUserMessageReq) Reset() {
	*x = DeleteUserMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserMessageReq) ProtoMessage() {}

func (x *DeleteUserMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserMessageReq.ProtoReflect.Descriptor instead.
func (*DeleteUserMessageReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteUserMessageReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteUserMessageReq) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type DeleteChannelMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithId int32 `protobuf:"varint,1,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`
	MsgId  int32 `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *DeleteChannelMessageReq) Reset() {
	*x = DeleteChannelMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChannelMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannelMessageReq) ProtoMessage() {}

func (x *DeleteChannelMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannelMessageReq.ProtoReflect.Descriptor instead.
func (*DeleteChannelMessageReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteChannelMessageReq) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *DeleteChannelMessageReq) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type SearchCursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  int32 `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	UWId  int32 `protobuf:"varint,2,opt,name=u_w_id,json=uWId,proto3" json:"u_w_id,omitempty"`
	MsgId int32 `protobuf:"varint,3,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *SearchCursor) Reset() {
	*x = SearchCursor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCursor) ProtoMessage() {}

func (x *SearchCursor) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCursor.ProtoReflect.Descriptor instead.
func (*SearchCursor) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{8}
}

func (x *SearchCursor) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *SearchCursor) GetUWId() int32 {
	if x != nil {
		return x.UWId
	}
	return 0
}

func (x *SearchCursor) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type UserChannelMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MsgIdStart int32 `protobuf:"varint,2,opt,name=msg_id_start,json=msgIdStart,proto3" json:"msg_id_start,omitempty"`
}

func (x *UserChannelMsgId) Reset() {
	*x = UserChannelMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChannelMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChannelMsgId) ProtoMessage() {}

func (x *UserChannelMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChannelMsgId.ProtoReflect.Descriptor instead.
func (*UserChannelMsgId) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{9}
}

func (x *UserChannelMsgId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UserChannelMsgId) GetMsgIdStart() int32 {
	if x != nil {
		return x.MsgIdStart
	}
	return 0
}

// 全局搜索请求
type SearchMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId             uint64              `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Keyword           string              `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Cursor            *SearchCursor       `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Size              int32               `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	UserId            int32               `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FromId            int32               `protobuf:"varint,6,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Searchtype        EMsgFlag            `protobuf:"varint,7,opt,name=searchtype,proto3,enum=pbsearchserver.EMsgFlag" json:"searchtype,omitempty"`
	UserChannelMsgIds []*UserChannelMsgId `protobuf:"bytes,8,rep,name=user_channel_msg_ids,json=userChannelMsgIds,proto3" json:"user_channel_msg_ids,omitempty"`
}

func (x *SearchMessageReq) Reset() {
	*x = SearchMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMessageReq) ProtoMessage() {}

func (x *SearchMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMessageReq.ProtoReflect.Descriptor instead.
func (*SearchMessageReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{10}
}

func (x *SearchMessageReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SearchMessageReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchMessageReq) GetCursor() *SearchCursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *SearchMessageReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchMessageReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchMessageReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *SearchMessageReq) GetSearchtype() EMsgFlag {
	if x != nil {
		return x.Searchtype
	}
	return EMsgFlag_USERMESSAGE
}

func (x *SearchMessageReq) GetUserChannelMsgIds() []*UserChannelMsgId {
	if x != nil {
		return x.UserChannelMsgIds
	}
	return nil
}

type SearchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*Message    `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Count    int32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Cursor   *SearchCursor `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *SearchResp) Reset() {
	*x = SearchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResp) ProtoMessage() {}

func (x *SearchResp) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResp.ProtoReflect.Descriptor instead.
func (*SearchResp) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{11}
}

func (x *SearchResp) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *SearchResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SearchResp) GetCursor() *SearchCursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

type SearchUserMessageByMaxMsgIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId    uint64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Keyword  string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Size     int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	UserId   int32  `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WithId   int32  `protobuf:"varint,5,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`
	FromId   int32  `protobuf:"varint,6,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	MaxMsgId int32  `protobuf:"varint,7,opt,name=max_msg_id,json=maxMsgId,proto3" json:"max_msg_id,omitempty"`
}

func (x *SearchUserMessageByMaxMsgIdReq) Reset() {
	*x = SearchUserMessageByMaxMsgIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserMessageByMaxMsgIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserMessageByMaxMsgIdReq) ProtoMessage() {}

func (x *SearchUserMessageByMaxMsgIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserMessageByMaxMsgIdReq.ProtoReflect.Descriptor instead.
func (*SearchUserMessageByMaxMsgIdReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{12}
}

func (x *SearchUserMessageByMaxMsgIdReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SearchUserMessageByMaxMsgIdReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchUserMessageByMaxMsgIdReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchUserMessageByMaxMsgIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchUserMessageByMaxMsgIdReq) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *SearchUserMessageByMaxMsgIdReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *SearchUserMessageByMaxMsgIdReq) GetMaxMsgId() int32 {
	if x != nil {
		return x.MaxMsgId
	}
	return 0
}

type SearchChannelMessageByMaxMsgIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId      uint64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Keyword    string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Size       int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	UserId     int32  `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WithId     int32  `protobuf:"varint,5,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`
	FromId     int32  `protobuf:"varint,6,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	MsgIdStart int32  `protobuf:"varint,7,opt,name=msg_id_start,json=msgIdStart,proto3" json:"msg_id_start,omitempty"`
	MaxMsgId   int32  `protobuf:"varint,8,opt,name=max_msg_id,json=maxMsgId,proto3" json:"max_msg_id,omitempty"`
}

func (x *SearchChannelMessageByMaxMsgIdReq) Reset() {
	*x = SearchChannelMessageByMaxMsgIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchChannelMessageByMaxMsgIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchChannelMessageByMaxMsgIdReq) ProtoMessage() {}

func (x *SearchChannelMessageByMaxMsgIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchChannelMessageByMaxMsgIdReq.ProtoReflect.Descriptor instead.
func (*SearchChannelMessageByMaxMsgIdReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{13}
}

func (x *SearchChannelMessageByMaxMsgIdReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SearchChannelMessageByMaxMsgIdReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchChannelMessageByMaxMsgIdReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchChannelMessageByMaxMsgIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchChannelMessageByMaxMsgIdReq) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *SearchChannelMessageByMaxMsgIdReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *SearchChannelMessageByMaxMsgIdReq) GetMsgIdStart() int32 {
	if x != nil {
		return x.MsgIdStart
	}
	return 0
}

func (x *SearchChannelMessageByMaxMsgIdReq) GetMaxMsgId() int32 {
	if x != nil {
		return x.MaxMsgId
	}
	return 0
}

type UpdateUserMessageMediaUnreadByMsgIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaUnread bool    `protobuf:"varint,1,opt,name=media_unread,json=mediaUnread,proto3" json:"media_unread,omitempty"`
	UserId      int32   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MsgIds      []int32 `protobuf:"varint,3,rep,packed,name=msg_ids,json=msgIds,proto3" json:"msg_ids,omitempty"`
}

func (x *UpdateUserMessageMediaUnreadByMsgIdsReq) Reset() {
	*x = UpdateUserMessageMediaUnreadByMsgIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserMessageMediaUnreadByMsgIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserMessageMediaUnreadByMsgIdsReq) ProtoMessage() {}

func (x *UpdateUserMessageMediaUnreadByMsgIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserMessageMediaUnreadByMsgIdsReq.ProtoReflect.Descriptor instead.
func (*UpdateUserMessageMediaUnreadByMsgIdsReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateUserMessageMediaUnreadByMsgIdsReq) GetMediaUnread() bool {
	if x != nil {
		return x.MediaUnread
	}
	return false
}

func (x *UpdateUserMessageMediaUnreadByMsgIdsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserMessageMediaUnreadByMsgIdsReq) GetMsgIds() []int32 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

type DeleteUserMessageByMsgIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MsgIds []int32 `protobuf:"varint,2,rep,packed,name=msg_ids,json=msgIds,proto3" json:"msg_ids,omitempty"`
}

func (x *DeleteUserMessageByMsgIdsReq) Reset() {
	*x = DeleteUserMessageByMsgIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserMessageByMsgIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserMessageByMsgIdsReq) ProtoMessage() {}

func (x *DeleteUserMessageByMsgIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserMessageByMsgIdsReq.ProtoReflect.Descriptor instead.
func (*DeleteUserMessageByMsgIdsReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteUserMessageByMsgIdsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteUserMessageByMsgIdsReq) GetMsgIds() []int32 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

type DeleteUserMessageByUuidsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Uuids  []int32 `protobuf:"varint,2,rep,packed,name=uuids,proto3" json:"uuids,omitempty"`
}

func (x *DeleteUserMessageByUuidsReq) Reset() {
	*x = DeleteUserMessageByUuidsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserMessageByUuidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserMessageByUuidsReq) ProtoMessage() {}

func (x *DeleteUserMessageByUuidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserMessageByUuidsReq.ProtoReflect.Descriptor instead.
func (*DeleteUserMessageByUuidsReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteUserMessageByUuidsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteUserMessageByUuidsReq) GetUuids() []int32 {
	if x != nil {
		return x.Uuids
	}
	return nil
}

type DeleteUserMessageByUWTReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WithId     int32 `protobuf:"varint,2,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`
	WithIdType int32 `protobuf:"varint,3,opt,name=with_id_type,json=withIdType,proto3" json:"with_id_type,omitempty"`
}

func (x *DeleteUserMessageByUWTReq) Reset() {
	*x = DeleteUserMessageByUWTReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserMessageByUWTReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserMessageByUWTReq) ProtoMessage() {}

func (x *DeleteUserMessageByUWTReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserMessageByUWTReq.ProtoReflect.Descriptor instead.
func (*DeleteUserMessageByUWTReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteUserMessageByUWTReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteUserMessageByUWTReq) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *DeleteUserMessageByUWTReq) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

// 批量删除超级群消息
type DeleteChannelMessageByMsgIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithId int32   `protobuf:"varint,1,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`
	MsgIds []int32 `protobuf:"varint,2,rep,packed,name=msg_ids,json=msgIds,proto3" json:"msg_ids,omitempty"`
}

func (x *DeleteChannelMessageByMsgIdsReq) Reset() {
	*x = DeleteChannelMessageByMsgIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChannelMessageByMsgIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannelMessageByMsgIdsReq) ProtoMessage() {}

func (x *DeleteChannelMessageByMsgIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannelMessageByMsgIdsReq.ProtoReflect.Descriptor instead.
func (*DeleteChannelMessageByMsgIdsReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteChannelMessageByMsgIdsReq) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *DeleteChannelMessageByMsgIdsReq) GetMsgIds() []int32 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

// 删除具体超级群消息
type DeleteChannelMessageByWithIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithId int32 `protobuf:"varint,1,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`
}

func (x *DeleteChannelMessageByWithIdReq) Reset() {
	*x = DeleteChannelMessageByWithIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChannelMessageByWithIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannelMessageByWithIdReq) ProtoMessage() {}

func (x *DeleteChannelMessageByWithIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannelMessageByWithIdReq.ProtoReflect.Descriptor instead.
func (*DeleteChannelMessageByWithIdReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteChannelMessageByWithIdReq) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

// 根据个人清除超级群消息
type DeleteChannelMessageByUWMReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WithId   int32 `protobuf:"varint,2,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`
	MaxMsgId int32 `protobuf:"varint,3,opt,name=max_msg_id,json=maxMsgId,proto3" json:"max_msg_id,omitempty"`
}

func (x *DeleteChannelMessageByUWMReq) Reset() {
	*x = DeleteChannelMessageByUWMReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChannelMessageByUWMReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannelMessageByUWMReq) ProtoMessage() {}

func (x *DeleteChannelMessageByUWMReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannelMessageByUWMReq.ProtoReflect.Descriptor instead.
func (*DeleteChannelMessageByUWMReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteChannelMessageByUWMReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteChannelMessageByUWMReq) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *DeleteChannelMessageByUWMReq) GetMaxMsgId() int32 {
	if x != nil {
		return x.MaxMsgId
	}
	return 0
}

// 搜索普通群媒体消息
type SearchUserMessageMediaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string        `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Size       int32         `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WithId     int32         `protobuf:"varint,4,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`
	WithType   int32         `protobuf:"varint,5,opt,name=with_type,json=withType,proto3" json:"with_type,omitempty"`
	Encry      int32         `protobuf:"varint,6,opt,name=encry,proto3" json:"encry,omitempty"`
	MaxMsgId   int32         `protobuf:"varint,7,opt,name=max_msg_id,json=maxMsgId,proto3" json:"max_msg_id,omitempty"`
	Offset     int32         `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	MediaTypes []int32       `protobuf:"varint,9,rep,packed,name=media_types,json=mediaTypes,proto3" json:"media_types,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,10,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *SearchUserMessageMediaReq) Reset() {
	*x = SearchUserMessageMediaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserMessageMediaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserMessageMediaReq) ProtoMessage() {}

func (x *SearchUserMessageMediaReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserMessageMediaReq.ProtoReflect.Descriptor instead.
func (*SearchUserMessageMediaReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{21}
}

func (x *SearchUserMessageMediaReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchUserMessageMediaReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchUserMessageMediaReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchUserMessageMediaReq) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *SearchUserMessageMediaReq) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *SearchUserMessageMediaReq) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *SearchUserMessageMediaReq) GetMaxMsgId() int32 {
	if x != nil {
		return x.MaxMsgId
	}
	return 0
}

func (x *SearchUserMessageMediaReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchUserMessageMediaReq) GetMediaTypes() []int32 {
	if x != nil {
		return x.MediaTypes
	}
	return nil
}

func (x *SearchUserMessageMediaReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 搜索超级群媒体消息
type SearchChannelMessageMediaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string        `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Size       int32         `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WithId     int32         `protobuf:"varint,4,opt,name=with_id,json=withId,proto3" json:"with_id,omitempty"`
	MaxMsgId   int32         `protobuf:"varint,5,opt,name=max_msg_id,json=maxMsgId,proto3" json:"max_msg_id,omitempty"`
	Encry      int32         `protobuf:"varint,6,opt,name=encry,proto3" json:"encry,omitempty"`
	Offset     int32         `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
	MediaTypes []int32       `protobuf:"varint,8,rep,packed,name=media_types,json=mediaTypes,proto3" json:"media_types,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,9,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *SearchChannelMessageMediaReq) Reset() {
	*x = SearchChannelMessageMediaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchChannelMessageMediaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchChannelMessageMediaReq) ProtoMessage() {}

func (x *SearchChannelMessageMediaReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchChannelMessageMediaReq.ProtoReflect.Descriptor instead.
func (*SearchChannelMessageMediaReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{22}
}

func (x *SearchChannelMessageMediaReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchChannelMessageMediaReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchChannelMessageMediaReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchChannelMessageMediaReq) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *SearchChannelMessageMediaReq) GetMaxMsgId() int32 {
	if x != nil {
		return x.MaxMsgId
	}
	return 0
}

func (x *SearchChannelMessageMediaReq) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *SearchChannelMessageMediaReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchChannelMessageMediaReq) GetMediaTypes() []int32 {
	if x != nil {
		return x.MediaTypes
	}
	return nil
}

func (x *SearchChannelMessageMediaReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SearchMediaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*pbcomm.UserMsg `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Count    int32             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SearchMediaResp) Reset() {
	*x = SearchMediaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMediaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMediaResp) ProtoMessage() {}

func (x *SearchMediaResp) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMediaResp.ProtoReflect.Descriptor instead.
func (*SearchMediaResp) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{23}
}

func (x *SearchMediaResp) GetMessages() []*pbcomm.UserMsg {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *SearchMediaResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type HandlerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyCode ErrorCode `protobuf:"varint,1,opt,name=Reply_code,json=ReplyCode,proto3,enum=pbsearchserver.ErrorCode" json:"Reply_code,omitempty"`
	ReplyInfo string    `protobuf:"bytes,2,opt,name=Reply_info,json=ReplyInfo,proto3" json:"Reply_info,omitempty"`
}

func (x *HandlerReply) Reset() {
	*x = HandlerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlerReply) ProtoMessage() {}

func (x *HandlerReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlerReply.ProtoReflect.Descriptor instead.
func (*HandlerReply) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{24}
}

func (x *HandlerReply) GetReplyCode() ErrorCode {
	if x != nil {
		return x.ReplyCode
	}
	return ErrorCode_RPC_OK
}

func (x *HandlerReply) GetReplyInfo() string {
	if x != nil {
		return x.ReplyInfo
	}
	return ""
}

// 用户昵称信息
type UserNameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32  `protobuf:"varint,1,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=First_name,json=FirstName,proto3" json:"First_name,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=Last_name,json=LastName,proto3" json:"Last_name,omitempty"`
	IsKick    bool   `protobuf:"varint,4,opt,name=Is_kick,json=IsKick,proto3" json:"Is_kick,omitempty"` // add for kicked flag.
}

func (x *UserNameInfo) Reset() {
	*x = UserNameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNameInfo) ProtoMessage() {}

func (x *UserNameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNameInfo.ProtoReflect.Descriptor instead.
func (*UserNameInfo) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{25}
}

func (x *UserNameInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserNameInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserNameInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserNameInfo) GetIsKick() bool {
	if x != nil {
		return x.IsKick
	}
	return false
}

type InsertGroupUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int32           `protobuf:"varint,1,opt,name=Group_id,json=GroupId,proto3" json:"Group_id,omitempty"`
	UserArr []*UserNameInfo `protobuf:"bytes,2,rep,name=User_arr,json=UserArr,proto3" json:"User_arr,omitempty"` // matched users
}

func (x *InsertGroupUsersReq) Reset() {
	*x = InsertGroupUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertGroupUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertGroupUsersReq) ProtoMessage() {}

func (x *InsertGroupUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertGroupUsersReq.ProtoReflect.Descriptor instead.
func (*InsertGroupUsersReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{26}
}

func (x *InsertGroupUsersReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *InsertGroupUsersReq) GetUserArr() []*UserNameInfo {
	if x != nil {
		return x.UserArr
	}
	return nil
}

// 删除群组用户
type DeleteGroupUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int32   `protobuf:"varint,1,opt,name=Group_id,json=GroupId,proto3" json:"Group_id,omitempty"`
	UserIds []int32 `protobuf:"varint,2,rep,packed,name=User_ids,json=UserIds,proto3" json:"User_ids,omitempty"` // matched users
}

func (x *DeleteGroupUsersReq) Reset() {
	*x = DeleteGroupUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupUsersReq) ProtoMessage() {}

func (x *DeleteGroupUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupUsersReq.ProtoReflect.Descriptor instead.
func (*DeleteGroupUsersReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteGroupUsersReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DeleteGroupUsersReq) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type UpdateGroupUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int32         `protobuf:"varint,1,opt,name=Group_id,json=GroupId,proto3" json:"Group_id,omitempty"`
	User    *UserNameInfo `protobuf:"bytes,2,opt,name=User,proto3" json:"User,omitempty"`
}

func (x *UpdateGroupUserReq) Reset() {
	*x = UpdateGroupUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupUserReq) ProtoMessage() {}

func (x *UpdateGroupUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupUserReq.ProtoReflect.Descriptor instead.
func (*UpdateGroupUserReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateGroupUserReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateGroupUserReq) GetUser() *UserNameInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type RenameGroupUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int32         `protobuf:"varint,1,opt,name=Group_id,json=GroupId,proto3" json:"Group_id,omitempty"`
	User    *UserNameInfo `protobuf:"bytes,2,opt,name=User,proto3" json:"User,omitempty"` // matched users
}

func (x *RenameGroupUserReq) Reset() {
	*x = RenameGroupUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameGroupUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameGroupUserReq) ProtoMessage() {}

func (x *RenameGroupUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameGroupUserReq.ProtoReflect.Descriptor instead.
func (*RenameGroupUserReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{29}
}

func (x *RenameGroupUserReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *RenameGroupUserReq) GetUser() *UserNameInfo {
	if x != nil {
		return x.User
	}
	return nil
}

// 群组用户昵称模糊匹配请求
type SearchGroupUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int32  `protobuf:"varint,1,opt,name=Group_id,json=GroupId,proto3" json:"Group_id,omitempty"` // group or channel id
	KickFlg bool   `protobuf:"varint,2,opt,name=Kick_flg,json=KickFlg,proto3" json:"Kick_flg,omitempty"` //  true:kicked; false:normal;
	KeyWord string `protobuf:"bytes,3,opt,name=Key_word,json=KeyWord,proto3" json:"Key_word,omitempty"`  // fuzzy match key word
	RetRows int32  `protobuf:"varint,4,opt,name=Ret_rows,json=RetRows,proto3" json:"Ret_rows,omitempty"` // reply max rows
}

func (x *SearchGroupUsersReq) Reset() {
	*x = SearchGroupUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchGroupUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchGroupUsersReq) ProtoMessage() {}

func (x *SearchGroupUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchGroupUsersReq.ProtoReflect.Descriptor instead.
func (*SearchGroupUsersReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{30}
}

func (x *SearchGroupUsersReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SearchGroupUsersReq) GetKickFlg() bool {
	if x != nil {
		return x.KickFlg
	}
	return false
}

func (x *SearchGroupUsersReq) GetKeyWord() string {
	if x != nil {
		return x.KeyWord
	}
	return ""
}

func (x *SearchGroupUsersReq) GetRetRows() int32 {
	if x != nil {
		return x.RetRows
	}
	return 0
}

// 群组用户昵称模糊匹配返回
type SearchGroupUsersRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode ErrorCode `protobuf:"varint,1,opt,name=Err_code,json=ErrCode,proto3,enum=pbsearchserver.ErrorCode" json:"Err_code,omitempty"` // error no
	ErrInfo string    `protobuf:"bytes,2,opt,name=Err_info,json=ErrInfo,proto3" json:"Err_info,omitempty"`                                // error msg
	UserIds []int32   `protobuf:"varint,3,rep,packed,name=User_ids,json=UserIds,proto3" json:"User_ids,omitempty"`                        // matched users
}

func (x *SearchGroupUsersRsp) Reset() {
	*x = SearchGroupUsersRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchGroupUsersRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchGroupUsersRsp) ProtoMessage() {}

func (x *SearchGroupUsersRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchGroupUsersRsp.ProtoReflect.Descriptor instead.
func (*SearchGroupUsersRsp) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{31}
}

func (x *SearchGroupUsersRsp) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_RPC_OK
}

func (x *SearchGroupUsersRsp) GetErrInfo() string {
	if x != nil {
		return x.ErrInfo
	}
	return ""
}

func (x *SearchGroupUsersRsp) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// @ add by qingsong at 2020-04-24 for fuzzy search channel by title or username /////////////////
// 新增群组名称信息 for create channel
type InsertChanNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Uname     string `protobuf:"bytes,3,opt,name=Uname,proto3" json:"Uname,omitempty"`
}

func (x *InsertChanNameReq) Reset() {
	*x = InsertChanNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertChanNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertChanNameReq) ProtoMessage() {}

func (x *InsertChanNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertChanNameReq.ProtoReflect.Descriptor instead.
func (*InsertChanNameReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{32}
}

func (x *InsertChanNameReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *InsertChanNameReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InsertChanNameReq) GetUname() string {
	if x != nil {
		return x.Uname
	}
	return ""
}

// 更新群组名称信息 for edit channel title or username column
type UpdateChanNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Uname     string `protobuf:"bytes,3,opt,name=Uname,proto3" json:"Uname,omitempty"`
}

func (x *UpdateChanNameReq) Reset() {
	*x = UpdateChanNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChanNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChanNameReq) ProtoMessage() {}

func (x *UpdateChanNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChanNameReq.ProtoReflect.Descriptor instead.
func (*UpdateChanNameReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateChanNameReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChanNameReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateChanNameReq) GetUname() string {
	if x != nil {
		return x.Uname
	}
	return ""
}

// 删除群组名称信息 for dismiss channel
type DeleteChanNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
}

func (x *DeleteChanNameReq) Reset() {
	*x = DeleteChanNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChanNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChanNameReq) ProtoMessage() {}

func (x *DeleteChanNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChanNameReq.ProtoReflect.Descriptor instead.
func (*DeleteChanNameReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteChanNameReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

// 根据名称搜索群组
type SearchChannelsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyWord string `protobuf:"bytes,1,opt,name=Key_word,json=KeyWord,proto3" json:"Key_word,omitempty"` //
	RetRows int32  `protobuf:"varint,2,opt,name=Ret_rows,json=RetRows,proto3" json:"Ret_rows,omitempty"`
}

func (x *SearchChannelsReq) Reset() {
	*x = SearchChannelsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchChannelsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchChannelsReq) ProtoMessage() {}

func (x *SearchChannelsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchChannelsReq.ProtoReflect.Descriptor instead.
func (*SearchChannelsReq) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{35}
}

func (x *SearchChannelsReq) GetKeyWord() string {
	if x != nil {
		return x.KeyWord
	}
	return ""
}

func (x *SearchChannelsReq) GetRetRows() int32 {
	if x != nil {
		return x.RetRows
	}
	return 0
}

type SearchChannelsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode ErrorCode `protobuf:"varint,1,opt,name=Err_code,json=ErrCode,proto3,enum=pbsearchserver.ErrorCode" json:"Err_code,omitempty"`
	ErrInfo string    `protobuf:"bytes,2,opt,name=Err_info,json=ErrInfo,proto3" json:"Err_info,omitempty"`
	ChanIds []int32   `protobuf:"varint,3,rep,packed,name=Chan_ids,json=ChanIds,proto3" json:"Chan_ids,omitempty"`
}

func (x *SearchChannelsRsp) Reset() {
	*x = SearchChannelsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbsearchserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchChannelsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchChannelsRsp) ProtoMessage() {}

func (x *SearchChannelsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbsearchserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchChannelsRsp.ProtoReflect.Descriptor instead.
func (*SearchChannelsRsp) Descriptor() ([]byte, []int) {
	return file_pbsearchserver_proto_rawDescGZIP(), []int{36}
}

func (x *SearchChannelsRsp) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_RPC_OK
}

func (x *SearchChannelsRsp) GetErrInfo() string {
	if x != nil {
		return x.ErrInfo
	}
	return ""
}

func (x *SearchChannelsRsp) GetChanIds() []int32 {
	if x != nil {
		return x.ChanIds
	}
	return nil
}

var File_pbsearchserver_proto protoreflect.FileDescriptor

var file_pbsearchserver_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x13, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xac, 0x07, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x13,
	0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x77, 0x64, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x77, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x0a, 0x76, 0x69, 0x61, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x65, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x45, 0x4d, 0x73, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x22, 0xff, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x49, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x14, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x72,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x15,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73,
	0x67, 0x22, 0x99, 0x03, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x27, 0x0a,
	0x09, 0x4e, 0x6f, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0x46, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x49,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x0c, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x06, 0x75, 0x5f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75,
	0x57, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22,
	0xcc, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x4d, 0x73, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x52,
	0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x11, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x22, 0x8d,
	0x01, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xce,
	0x01, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x77, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22,
	0xf3, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x73, 0x22, 0x50, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x22, 0x4c, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x75,
	0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x73, 0x22, 0x6f, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x57, 0x54, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x53, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x22, 0x3a, 0x0a, 0x1f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x77, 0x69, 0x74, 0x68, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x55, 0x57, 0x4d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x77, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x90, 0x02, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x54, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x67, 0x0a,
	0x0c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a,
	0x0a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7c, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x49,
	0x73, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73,
	0x4b, 0x69, 0x63, 0x6b, 0x22, 0x69, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x72, 0x22,
	0x4b, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x22,
	0x61, 0x0a, 0x12, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x4b, 0x69, 0x63, 0x6b, 0x5f, 0x66, 0x6c,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x4b, 0x69, 0x63, 0x6b, 0x46, 0x6c, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x52,
	0x65, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52,
	0x65, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x73, 0x70, 0x12, 0x34,
	0x0a, 0x08, 0x45, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x5e, 0x0a, 0x11, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x55, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x55, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x49,
	0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x52, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x52, 0x65, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x7f, 0x0a, 0x11, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x73, 0x70, 0x12, 0x34,
	0x0a, 0x08, 0x45, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x2a, 0x3b, 0x0a, 0x08, 0x50, 0x65,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x66, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x03, 0x2a, 0x2f, 0x0a, 0x08, 0x45, 0x4d, 0x73, 0x67, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x2a, 0x8c, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x50, 0x43, 0x5f, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x50, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x49, 0x6c,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x10, 0x06, 0x32, 0x83, 0x13, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70,
	0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1b, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2e, 0x2e, 0x70, 0x62, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x61,
	0x78, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x31, 0x2e, 0x70, 0x62, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70,
	0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x24, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x73, 0x12, 0x37, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x55,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x6c, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2c, 0x2e,
	0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x11, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x19, 0x2e,
	0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x62, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x66, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x2e,
	0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x55,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55,
	0x57, 0x54, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x57, 0x54, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x6c, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73,
	0x12, 0x2f, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6c,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x2f,
	0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x57, 0x4d, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x55, 0x57, 0x4d, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x55, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x22, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e,
	0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x62,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x20, 0x5a,
	0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x70, 0x62, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbsearchserver_proto_rawDescOnce sync.Once
	file_pbsearchserver_proto_rawDescData = file_pbsearchserver_proto_rawDesc
)

func file_pbsearchserver_proto_rawDescGZIP() []byte {
	file_pbsearchserver_proto_rawDescOnce.Do(func() {
		file_pbsearchserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbsearchserver_proto_rawDescData)
	})
	return file_pbsearchserver_proto_rawDescData
}

var file_pbsearchserver_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pbsearchserver_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_pbsearchserver_proto_goTypes = []interface{}{
	(PeerType)(0),                                   // 0: pbsearchserver.PeerType
	(EMsgFlag)(0),                                   // 1: pbsearchserver.EMsgFlag
	(ErrorCode)(0),                                  // 2: pbsearchserver.ErrorCode
	(*Message)(nil),                                 // 3: pbsearchserver.Message
	(*MessageInfo)(nil),                             // 4: pbsearchserver.MessageInfo
	(*HandleSearchLogicReq)(nil),                    // 5: pbsearchserver.HandleSearchLogicReq
	(*HandleSearchLogicResp)(nil),                   // 6: pbsearchserver.HandleSearchLogicResp
	(*MessageSearchReq)(nil),                        // 7: pbsearchserver.MessageSearchReq
	(*NoUseResp)(nil),                               // 8: pbsearchserver.NoUseResp
	(*DeleteUserMessageReq)(nil),                    // 9: pbsearchserver.DeleteUserMessageReq
	(*DeleteChannelMessageReq)(nil),                 // 10: pbsearchserver.DeleteChannelMessageReq
	(*SearchCursor)(nil),                            // 11: pbsearchserver.SearchCursor
	(*UserChannelMsgId)(nil),                        // 12: pbsearchserver.UserChannelMsgId
	(*SearchMessageReq)(nil),                        // 13: pbsearchserver.SearchMessageReq
	(*SearchResp)(nil),                              // 14: pbsearchserver.SearchResp
	(*SearchUserMessageByMaxMsgIdReq)(nil),          // 15: pbsearchserver.SearchUserMessageByMaxMsgIdReq
	(*SearchChannelMessageByMaxMsgIdReq)(nil),       // 16: pbsearchserver.SearchChannelMessageByMaxMsgIdReq
	(*UpdateUserMessageMediaUnreadByMsgIdsReq)(nil), // 17: pbsearchserver.UpdateUserMessageMediaUnreadByMsgIdsReq
	(*DeleteUserMessageByMsgIdsReq)(nil),            // 18: pbsearchserver.DeleteUserMessageByMsgIdsReq
	(*DeleteUserMessageByUuidsReq)(nil),             // 19: pbsearchserver.DeleteUserMessageByUuidsReq
	(*DeleteUserMessageByUWTReq)(nil),               // 20: pbsearchserver.DeleteUserMessageByUWTReq
	(*DeleteChannelMessageByMsgIdsReq)(nil),         // 21: pbsearchserver.DeleteChannelMessageByMsgIdsReq
	(*DeleteChannelMessageByWithIdReq)(nil),         // 22: pbsearchserver.DeleteChannelMessageByWithIdReq
	(*DeleteChannelMessageByUWMReq)(nil),            // 23: pbsearchserver.DeleteChannelMessageByUWMReq
	(*SearchUserMessageMediaReq)(nil),               // 24: pbsearchserver.SearchUserMessageMediaReq
	(*SearchChannelMessageMediaReq)(nil),            // 25: pbsearchserver.SearchChannelMessageMediaReq
	(*SearchMediaResp)(nil),                         // 26: pbsearchserver.SearchMediaResp
	(*HandlerReply)(nil),                            // 27: pbsearchserver.HandlerReply
	(*UserNameInfo)(nil),                            // 28: pbsearchserver.UserNameInfo
	(*InsertGroupUsersReq)(nil),                     // 29: pbsearchserver.InsertGroupUsersReq
	(*DeleteGroupUsersReq)(nil),                     // 30: pbsearchserver.DeleteGroupUsersReq
	(*UpdateGroupUserReq)(nil),                      // 31: pbsearchserver.UpdateGroupUserReq
	(*RenameGroupUserReq)(nil),                      // 32: pbsearchserver.RenameGroupUserReq
	(*SearchGroupUsersReq)(nil),                     // 33: pbsearchserver.SearchGroupUsersReq
	(*SearchGroupUsersRsp)(nil),                     // 34: pbsearchserver.SearchGroupUsersRsp
	(*InsertChanNameReq)(nil),                       // 35: pbsearchserver.InsertChanNameReq
	(*UpdateChanNameReq)(nil),                       // 36: pbsearchserver.UpdateChanNameReq
	(*DeleteChanNameReq)(nil),                       // 37: pbsearchserver.DeleteChanNameReq
	(*SearchChannelsReq)(nil),                       // 38: pbsearchserver.SearchChannelsReq
	(*SearchChannelsRsp)(nil),                       // 39: pbsearchserver.SearchChannelsRsp
	(*pbcomm.Debug)(nil),                            // 40: pbcomm.Debug
	(*pbcomm.UserMsg)(nil),                          // 41: pbcomm.UserMsg
}
var file_pbsearchserver_proto_depIdxs = []int32{
	1,  // 0: pbsearchserver.Message.flag:type_name -> pbsearchserver.EMsgFlag
	0,  // 1: pbsearchserver.MessageSearchReq.peer_type:type_name -> pbsearchserver.PeerType
	11, // 2: pbsearchserver.SearchMessageReq.cursor:type_name -> pbsearchserver.SearchCursor
	1,  // 3: pbsearchserver.SearchMessageReq.searchtype:type_name -> pbsearchserver.EMsgFlag
	12, // 4: pbsearchserver.SearchMessageReq.user_channel_msg_ids:type_name -> pbsearchserver.UserChannelMsgId
	3,  // 5: pbsearchserver.SearchResp.messages:type_name -> pbsearchserver.Message
	11, // 6: pbsearchserver.SearchResp.cursor:type_name -> pbsearchserver.SearchCursor
	40, // 7: pbsearchserver.SearchUserMessageMediaReq.Debug:type_name -> pbcomm.Debug
	40, // 8: pbsearchserver.SearchChannelMessageMediaReq.Debug:type_name -> pbcomm.Debug
	41, // 9: pbsearchserver.SearchMediaResp.messages:type_name -> pbcomm.UserMsg
	2,  // 10: pbsearchserver.HandlerReply.Reply_code:type_name -> pbsearchserver.ErrorCode
	28, // 11: pbsearchserver.InsertGroupUsersReq.User_arr:type_name -> pbsearchserver.UserNameInfo
	28, // 12: pbsearchserver.UpdateGroupUserReq.User:type_name -> pbsearchserver.UserNameInfo
	28, // 13: pbsearchserver.RenameGroupUserReq.User:type_name -> pbsearchserver.UserNameInfo
	2,  // 14: pbsearchserver.SearchGroupUsersRsp.Err_code:type_name -> pbsearchserver.ErrorCode
	2,  // 15: pbsearchserver.SearchChannelsRsp.Err_code:type_name -> pbsearchserver.ErrorCode
	13, // 16: pbsearchserver.SearchService.SearchMessage:input_type -> pbsearchserver.SearchMessageReq
	15, // 17: pbsearchserver.SearchService.SearchUserMessageByMaxMsgId:input_type -> pbsearchserver.SearchUserMessageByMaxMsgIdReq
	16, // 18: pbsearchserver.SearchService.SearchChannelMessageByMaxMsgId:input_type -> pbsearchserver.SearchChannelMessageByMaxMsgIdReq
	17, // 19: pbsearchserver.SearchService.UpdateUserMessageMediaUnreadByMsgIds:input_type -> pbsearchserver.UpdateUserMessageMediaUnreadByMsgIdsReq
	24, // 20: pbsearchserver.SearchService.SearchUserMessageMedia:input_type -> pbsearchserver.SearchUserMessageMediaReq
	25, // 21: pbsearchserver.SearchService.SearchChannelMessageMedia:input_type -> pbsearchserver.SearchChannelMessageMediaReq
	5,  // 22: pbsearchserver.SearchService.HandleSearchLogic:input_type -> pbsearchserver.HandleSearchLogicReq
	4,  // 23: pbsearchserver.SearchService.AddMessage:input_type -> pbsearchserver.MessageInfo
	9,  // 24: pbsearchserver.SearchService.DeleteUserMessage:input_type -> pbsearchserver.DeleteUserMessageReq
	10, // 25: pbsearchserver.SearchService.DeleteChannelMessage:input_type -> pbsearchserver.DeleteChannelMessageReq
	18, // 26: pbsearchserver.SearchService.DeleteUserMessageByMsgIds:input_type -> pbsearchserver.DeleteUserMessageByMsgIdsReq
	20, // 27: pbsearchserver.SearchService.DeleteUserMessageByUWT:input_type -> pbsearchserver.DeleteUserMessageByUWTReq
	19, // 28: pbsearchserver.SearchService.DeleteUserMessageByUuids:input_type -> pbsearchserver.DeleteUserMessageByUuidsReq
	21, // 29: pbsearchserver.SearchService.DeleteChannelMessageByMsgIds:input_type -> pbsearchserver.DeleteChannelMessageByMsgIdsReq
	22, // 30: pbsearchserver.SearchService.DeleteChannelMessageByWithId:input_type -> pbsearchserver.DeleteChannelMessageByWithIdReq
	23, // 31: pbsearchserver.SearchService.DeleteChannelMessageByUWM:input_type -> pbsearchserver.DeleteChannelMessageByUWMReq
	29, // 32: pbsearchserver.SearchService.InsertGroupUsers:input_type -> pbsearchserver.InsertGroupUsersReq
	30, // 33: pbsearchserver.SearchService.DeleteGroupUsers:input_type -> pbsearchserver.DeleteGroupUsersReq
	31, // 34: pbsearchserver.SearchService.UpdateGroupUser:input_type -> pbsearchserver.UpdateGroupUserReq
	32, // 35: pbsearchserver.SearchService.RenameGroupUser:input_type -> pbsearchserver.RenameGroupUserReq
	33, // 36: pbsearchserver.SearchService.SearchGroupUsers:input_type -> pbsearchserver.SearchGroupUsersReq
	35, // 37: pbsearchserver.SearchService.InsertChanName:input_type -> pbsearchserver.InsertChanNameReq
	36, // 38: pbsearchserver.SearchService.UpdateChanName:input_type -> pbsearchserver.UpdateChanNameReq
	37, // 39: pbsearchserver.SearchService.DeleteChanName:input_type -> pbsearchserver.DeleteChanNameReq
	38, // 40: pbsearchserver.SearchService.SearchChannels:input_type -> pbsearchserver.SearchChannelsReq
	14, // 41: pbsearchserver.SearchService.SearchMessage:output_type -> pbsearchserver.SearchResp
	14, // 42: pbsearchserver.SearchService.SearchUserMessageByMaxMsgId:output_type -> pbsearchserver.SearchResp
	14, // 43: pbsearchserver.SearchService.SearchChannelMessageByMaxMsgId:output_type -> pbsearchserver.SearchResp
	8,  // 44: pbsearchserver.SearchService.UpdateUserMessageMediaUnreadByMsgIds:output_type -> pbsearchserver.NoUseResp
	26, // 45: pbsearchserver.SearchService.SearchUserMessageMedia:output_type -> pbsearchserver.SearchMediaResp
	26, // 46: pbsearchserver.SearchService.SearchChannelMessageMedia:output_type -> pbsearchserver.SearchMediaResp
	6,  // 47: pbsearchserver.SearchService.HandleSearchLogic:output_type -> pbsearchserver.HandleSearchLogicResp
	8,  // 48: pbsearchserver.SearchService.AddMessage:output_type -> pbsearchserver.NoUseResp
	8,  // 49: pbsearchserver.SearchService.DeleteUserMessage:output_type -> pbsearchserver.NoUseResp
	8,  // 50: pbsearchserver.SearchService.DeleteChannelMessage:output_type -> pbsearchserver.NoUseResp
	8,  // 51: pbsearchserver.SearchService.DeleteUserMessageByMsgIds:output_type -> pbsearchserver.NoUseResp
	8,  // 52: pbsearchserver.SearchService.DeleteUserMessageByUWT:output_type -> pbsearchserver.NoUseResp
	8,  // 53: pbsearchserver.SearchService.DeleteUserMessageByUuids:output_type -> pbsearchserver.NoUseResp
	8,  // 54: pbsearchserver.SearchService.DeleteChannelMessageByMsgIds:output_type -> pbsearchserver.NoUseResp
	8,  // 55: pbsearchserver.SearchService.DeleteChannelMessageByWithId:output_type -> pbsearchserver.NoUseResp
	8,  // 56: pbsearchserver.SearchService.DeleteChannelMessageByUWM:output_type -> pbsearchserver.NoUseResp
	27, // 57: pbsearchserver.SearchService.InsertGroupUsers:output_type -> pbsearchserver.HandlerReply
	27, // 58: pbsearchserver.SearchService.DeleteGroupUsers:output_type -> pbsearchserver.HandlerReply
	27, // 59: pbsearchserver.SearchService.UpdateGroupUser:output_type -> pbsearchserver.HandlerReply
	27, // 60: pbsearchserver.SearchService.RenameGroupUser:output_type -> pbsearchserver.HandlerReply
	34, // 61: pbsearchserver.SearchService.SearchGroupUsers:output_type -> pbsearchserver.SearchGroupUsersRsp
	27, // 62: pbsearchserver.SearchService.InsertChanName:output_type -> pbsearchserver.HandlerReply
	27, // 63: pbsearchserver.SearchService.UpdateChanName:output_type -> pbsearchserver.HandlerReply
	27, // 64: pbsearchserver.SearchService.DeleteChanName:output_type -> pbsearchserver.HandlerReply
	39, // 65: pbsearchserver.SearchService.SearchChannels:output_type -> pbsearchserver.SearchChannelsRsp
	41, // [41:66] is the sub-list for method output_type
	16, // [16:41] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_pbsearchserver_proto_init() }
func file_pbsearchserver_proto_init() {
	if File_pbsearchserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbsearchserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleSearchLogicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleSearchLogicResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSearchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoUseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChannelMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCursor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChannelMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserMessageByMaxMsgIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchChannelMessageByMaxMsgIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserMessageMediaUnreadByMsgIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserMessageByMsgIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserMessageByUuidsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserMessageByUWTReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChannelMessageByMsgIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChannelMessageByWithIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChannelMessageByUWMReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserMessageMediaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchChannelMessageMediaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMediaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertGroupUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameGroupUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchGroupUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchGroupUsersRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertChanNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChanNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChanNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchChannelsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbsearchserver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchChannelsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbsearchserver_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbsearchserver_proto_goTypes,
		DependencyIndexes: file_pbsearchserver_proto_depIdxs,
		EnumInfos:         file_pbsearchserver_proto_enumTypes,
		MessageInfos:      file_pbsearchserver_proto_msgTypes,
	}.Build()
	File_pbsearchserver_proto = out.File
	file_pbsearchserver_proto_rawDesc = nil
	file_pbsearchserver_proto_goTypes = nil
	file_pbsearchserver_proto_depIdxs = nil
}
