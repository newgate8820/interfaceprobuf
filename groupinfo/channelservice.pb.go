//
//Channel操作相关接口定义
//作者：hujian
//日期：2017-12-04
//版本：1.0
//修改日期：
//修改日志：
//Date           Desc
//-----------------------------------------------------
//2017-12-04     新建文件,在原有基础上更改
//protoc --gogofast_out=plugins=grpc:. *.proto
//protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/groupinfo/channelservice.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: channelservice.proto

//import "gitlab.chatserver.im/interfaceprobuf/groupinfo/chatservice.proto" ;
//import "gitlab.chatserver.im/im/iminterfaceprotobufs/infoserver/userserver.proto" ;

package groupinfo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateChannelGeoResp_ErrorCode int32

const (
	UpdateChannelGeoResp_SucessFul UpdateChannelGeoResp_ErrorCode = 0
	UpdateChannelGeoResp_Failed    UpdateChannelGeoResp_ErrorCode = 2
	UpdateChannelGeoResp_DBFailed  UpdateChannelGeoResp_ErrorCode = 3
)

// Enum value maps for UpdateChannelGeoResp_ErrorCode.
var (
	UpdateChannelGeoResp_ErrorCode_name = map[int32]string{
		0: "SucessFul",
		2: "Failed",
		3: "DBFailed",
	}
	UpdateChannelGeoResp_ErrorCode_value = map[string]int32{
		"SucessFul": 0,
		"Failed":    2,
		"DBFailed":  3,
	}
)

func (x UpdateChannelGeoResp_ErrorCode) Enum() *UpdateChannelGeoResp_ErrorCode {
	p := new(UpdateChannelGeoResp_ErrorCode)
	*p = x
	return p
}

func (x UpdateChannelGeoResp_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateChannelGeoResp_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_channelservice_proto_enumTypes[0].Descriptor()
}

func (UpdateChannelGeoResp_ErrorCode) Type() protoreflect.EnumType {
	return &file_channelservice_proto_enumTypes[0]
}

func (x UpdateChannelGeoResp_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateChannelGeoResp_ErrorCode.Descriptor instead.
func (UpdateChannelGeoResp_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{66, 0}
}

// 群成员的基础信息
type ChannelParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              int32          `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                          //群成员的iD
	InviteId            int32          `protobuf:"varint,2,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`                                    //邀请者的ID
	CanSetUsername      bool           `protobuf:"varint,3,opt,name=can_set_username,json=canSetUsername,proto3" json:"can_set_username,omitempty"`                //是否可以更改超级群的username 默认为true
	CanViewParticipants bool           `protobuf:"varint,4,opt,name=can_view_participants,json=canViewParticipants,proto3" json:"can_view_participants,omitempty"` //是否可以查看超级群的成员列表默认为true
	IsCreator           bool           `protobuf:"varint,5,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"`                                 //是否是群的创建者
	IsAdmin             bool           `protobuf:"varint,6,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`                                       //是否是超级群的管理员
	IsBan               bool           `protobuf:"varint,7,opt,name=is_ban,json=isBan,proto3" json:"is_ban,omitempty"`                                             //是否是被禁权的成员
	JoinTime            int32          `protobuf:"varint,8,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`                                    //进群时间
	AdRight             *AdminRights   `protobuf:"bytes,9,opt,name=ad_right,json=adRight,proto3" json:"ad_right,omitempty"`                                        //如果是管理员的话有此权限
	BanRight            *BannerRights  `protobuf:"bytes,10,opt,name=ban_right,json=banRight,proto3" json:"ban_right,omitempty"`                                    //bannner用户的权限
	Resultcode          ChatResultCode `protobuf:"varint,11,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`                 //返回结果码
	ExportedInviteLink  string         `protobuf:"bytes,12,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"`    //邀请链接
	StartMsgid          int32          `protobuf:"varint,13,opt,name=Start_msgid,json=StartMsgid,proto3" json:"Start_msgid,omitempty"`                             // add by qingsong at 2019-12-06 for member's start message id.
	Rank                string         `protobuf:"bytes,14,opt,name=rank,proto3" json:"rank,omitempty"`                                                            // 群成员称号
}

func (x *ChannelParticipant) Reset() {
	*x = ChannelParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelParticipant) ProtoMessage() {}

func (x *ChannelParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelParticipant.ProtoReflect.Descriptor instead.
func (*ChannelParticipant) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelParticipant) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelParticipant) GetInviteId() int32 {
	if x != nil {
		return x.InviteId
	}
	return 0
}

func (x *ChannelParticipant) GetCanSetUsername() bool {
	if x != nil {
		return x.CanSetUsername
	}
	return false
}

func (x *ChannelParticipant) GetCanViewParticipants() bool {
	if x != nil {
		return x.CanViewParticipants
	}
	return false
}

func (x *ChannelParticipant) GetIsCreator() bool {
	if x != nil {
		return x.IsCreator
	}
	return false
}

func (x *ChannelParticipant) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *ChannelParticipant) GetIsBan() bool {
	if x != nil {
		return x.IsBan
	}
	return false
}

func (x *ChannelParticipant) GetJoinTime() int32 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *ChannelParticipant) GetAdRight() *AdminRights {
	if x != nil {
		return x.AdRight
	}
	return nil
}

func (x *ChannelParticipant) GetBanRight() *BannerRights {
	if x != nil {
		return x.BanRight
	}
	return nil
}

func (x *ChannelParticipant) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

func (x *ChannelParticipant) GetExportedInviteLink() string {
	if x != nil {
		return x.ExportedInviteLink
	}
	return ""
}

func (x *ChannelParticipant) GetStartMsgid() int32 {
	if x != nil {
		return x.StartMsgid
	}
	return 0
}

func (x *ChannelParticipant) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

// 群成员的列表
type ChannelParticipantArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32                 `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	Part       []*ChannelParticipant `protobuf:"bytes,2,rep,name=part,proto3" json:"part,omitempty"`
}

func (x *ChannelParticipantArr) Reset() {
	*x = ChannelParticipantArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelParticipantArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelParticipantArr) ProtoMessage() {}

func (x *ChannelParticipantArr) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelParticipantArr.ProtoReflect.Descriptor instead.
func (*ChannelParticipantArr) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelParticipantArr) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ChannelParticipantArr) GetPart() []*ChannelParticipant {
	if x != nil {
		return x.Part
	}
	return nil
}

// 邀请用户
type InvitedUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`            //要进入此超级群/频道的ID
	IsBotUser bool  `protobuf:"varint,2,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"` //被邀请者是不是机器人
}

func (x *InvitedUsers) Reset() {
	*x = InvitedUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitedUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitedUsers) ProtoMessage() {}

func (x *InvitedUsers) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitedUsers.ProtoReflect.Descriptor instead.
func (*InvitedUsers) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{2}
}

func (x *InvitedUsers) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InvitedUsers) GetIsBotUser() bool {
	if x != nil {
		return x.IsBotUser
	}
	return false
}

// 管理员相关权限
type AdminRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeGroupInfo bool  `protobuf:"varint,1,opt,name=change_group_info,json=changeGroupInfo,proto3" json:"change_group_info,omitempty"` //如果是管理员的话，是否有修改群信息权限
	DeleteMessages  bool  `protobuf:"varint,2,opt,name=delete_messages,json=deleteMessages,proto3" json:"delete_messages,omitempty"`      //如果是管理员的话，是否有删除消息的权限
	BanUsers        bool  `protobuf:"varint,3,opt,name=ban_users,json=banUsers,proto3" json:"ban_users,omitempty"`                        //如果是管理员的话，是否有禁止成员的权限的权限
	PinMessages     bool  `protobuf:"varint,4,opt,name=pin_messages,json=pinMessages,proto3" json:"pin_messages,omitempty"`               //如果是管理员的话，是否有置顶消息的权限
	AddNewAdmin     bool  `protobuf:"varint,5,opt,name=add_new_admin,json=addNewAdmin,proto3" json:"add_new_admin,omitempty"`             //如果是管理员的话，是否有添加新管理员的权限
	PromotedBy      int32 `protobuf:"varint,6,opt,name=promoted_by,json=promotedBy,proto3" json:"promoted_by,omitempty"`                  //如果是管理员的话，被XX升级为管理员
	PostMessages    bool  `protobuf:"varint,7,opt,name=post_messages,json=postMessages,proto3" json:"post_messages,omitempty"`            //频道是否可以发消息
	EditMessages    bool  `protobuf:"varint,8,opt,name=edit_messages,json=editMessages,proto3" json:"edit_messages,omitempty"`            //编辑消息
	InviteUsers     bool  `protobuf:"varint,9,opt,name=invite_users,json=inviteUsers,proto3" json:"invite_users,omitempty"`               //邀请用户
	InviteLink      bool  `protobuf:"varint,10,opt,name=invite_link,json=inviteLink,proto3" json:"invite_link,omitempty"`                 //邀请链接
}

func (x *AdminRights) Reset() {
	*x = AdminRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRights) ProtoMessage() {}

func (x *AdminRights) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRights.ProtoReflect.Descriptor instead.
func (*AdminRights) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{3}
}

func (x *AdminRights) GetChangeGroupInfo() bool {
	if x != nil {
		return x.ChangeGroupInfo
	}
	return false
}

func (x *AdminRights) GetDeleteMessages() bool {
	if x != nil {
		return x.DeleteMessages
	}
	return false
}

func (x *AdminRights) GetBanUsers() bool {
	if x != nil {
		return x.BanUsers
	}
	return false
}

func (x *AdminRights) GetPinMessages() bool {
	if x != nil {
		return x.PinMessages
	}
	return false
}

func (x *AdminRights) GetAddNewAdmin() bool {
	if x != nil {
		return x.AddNewAdmin
	}
	return false
}

func (x *AdminRights) GetPromotedBy() int32 {
	if x != nil {
		return x.PromotedBy
	}
	return 0
}

func (x *AdminRights) GetPostMessages() bool {
	if x != nil {
		return x.PostMessages
	}
	return false
}

func (x *AdminRights) GetEditMessages() bool {
	if x != nil {
		return x.EditMessages
	}
	return false
}

func (x *AdminRights) GetInviteUsers() bool {
	if x != nil {
		return x.InviteUsers
	}
	return false
}

func (x *AdminRights) GetInviteLink() bool {
	if x != nil {
		return x.InviteLink
	}
	return false
}

// bannner用户的权限
type BannerRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanReadMessages bool  `protobuf:"varint,1,opt,name=can_read_messages,json=canReadMessages,proto3" json:"can_read_messages,omitempty"` //如果是banner的话，是否有读取消息的权限
	CanSendMessge   bool  `protobuf:"varint,2,opt,name=can_send_messge,json=canSendMessge,proto3" json:"can_send_messge,omitempty"`       //如果是banner的话，是否发送文本消息的权限
	CanSendMedia    bool  `protobuf:"varint,3,opt,name=can_send_media,json=canSendMedia,proto3" json:"can_send_media,omitempty"`          //如果是banner的话，是否发送媒体消息的权限
	CanSendSticker  bool  `protobuf:"varint,4,opt,name=can_send_sticker,json=canSendSticker,proto3" json:"can_send_sticker,omitempty"`    //如果是banner的话，是否发送sticker和gif的权限
	CanEmbedLinks   bool  `protobuf:"varint,5,opt,name=can_embed_links,json=canEmbedLinks,proto3" json:"can_embed_links,omitempty"`       //如果是banner的话，是否有此权限
	KickedBy        int32 `protobuf:"varint,6,opt,name=kicked_by,json=kickedBy,proto3" json:"kicked_by,omitempty"`                        //如果是bannned用户的话，被谁禁止部分权限的
	UntilDate       int32 `protobuf:"varint,7,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`                     //如果是banner的话，什么时候解除此禁止权限
	CanSendGifs     bool  `protobuf:"varint,8,opt,name=can_send_gifs,json=canSendGifs,proto3" json:"can_send_gifs,omitempty"`
	CanSendGames    bool  `protobuf:"varint,9,opt,name=can_send_games,json=canSendGames,proto3" json:"can_send_games,omitempty"`
	CanSendInline   bool  `protobuf:"varint,10,opt,name=can_send_inline,json=canSendInline,proto3" json:"can_send_inline,omitempty"`
	// @ add by Qingsong at 2019-11-14 for ban member rights.
	InviteUser      bool `protobuf:"varint,11,opt,name=invite_user,json=inviteUser,proto3" json:"invite_user,omitempty"`                  // 邀請用戶
	PinMessage      bool `protobuf:"varint,12,opt,name=pin_message,json=pinMessage,proto3" json:"pin_message,omitempty"`                  // 置頂消息
	ChangeGroupInfo bool `protobuf:"varint,13,opt,name=change_group_info,json=changeGroupInfo,proto3" json:"change_group_info,omitempty"` // 修群组信息
	CanSendPolls    bool `protobuf:"varint,14,opt,name=can_send_polls,json=canSendPolls,proto3" json:"can_send_polls,omitempty"`          // 发起投票权限
}

func (x *BannerRights) Reset() {
	*x = BannerRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerRights) ProtoMessage() {}

func (x *BannerRights) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerRights.ProtoReflect.Descriptor instead.
func (*BannerRights) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{4}
}

func (x *BannerRights) GetCanReadMessages() bool {
	if x != nil {
		return x.CanReadMessages
	}
	return false
}

func (x *BannerRights) GetCanSendMessge() bool {
	if x != nil {
		return x.CanSendMessge
	}
	return false
}

func (x *BannerRights) GetCanSendMedia() bool {
	if x != nil {
		return x.CanSendMedia
	}
	return false
}

func (x *BannerRights) GetCanSendSticker() bool {
	if x != nil {
		return x.CanSendSticker
	}
	return false
}

func (x *BannerRights) GetCanEmbedLinks() bool {
	if x != nil {
		return x.CanEmbedLinks
	}
	return false
}

func (x *BannerRights) GetKickedBy() int32 {
	if x != nil {
		return x.KickedBy
	}
	return 0
}

func (x *BannerRights) GetUntilDate() int32 {
	if x != nil {
		return x.UntilDate
	}
	return 0
}

func (x *BannerRights) GetCanSendGifs() bool {
	if x != nil {
		return x.CanSendGifs
	}
	return false
}

func (x *BannerRights) GetCanSendGames() bool {
	if x != nil {
		return x.CanSendGames
	}
	return false
}

func (x *BannerRights) GetCanSendInline() bool {
	if x != nil {
		return x.CanSendInline
	}
	return false
}

func (x *BannerRights) GetInviteUser() bool {
	if x != nil {
		return x.InviteUser
	}
	return false
}

func (x *BannerRights) GetPinMessage() bool {
	if x != nil {
		return x.PinMessage
	}
	return false
}

func (x *BannerRights) GetChangeGroupInfo() bool {
	if x != nil {
		return x.ChangeGroupInfo
	}
	return false
}

func (x *BannerRights) GetCanSendPolls() bool {
	if x != nil {
		return x.CanSendPolls
	}
	return false
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// 创建频道的请求包
type CreateChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32            `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //超级群的ID
	AccessHash int64            `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	CreatorId  int32            `protobuf:"varint,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`    //创建者的ID
	Title      string           `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                              //群名称
	About      string           `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`                              //信息
	Broadcast  bool             `protobuf:"varint,6,opt,name=broadcast,proto3" json:"broadcast,omitempty"`                     //频道
	Megagroup  bool             `protobuf:"varint,7,opt,name=megagroup,proto3" json:"megagroup,omitempty"`                     //超级群
	Cluster    int32            `protobuf:"varint,8,opt,name=cluster,proto3" json:"cluster,omitempty"`                         //所在域
	Date       int32            `protobuf:"varint,9,opt,name=date,proto3" json:"date,omitempty"`                               //创建时间
	HasGeo     bool             `protobuf:"varint,10,opt,name=has_geo,json=hasGeo,proto3" json:"has_geo,omitempty"`            //是否含有地理位置坐标
	Location   *ChannelLocation `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`
	Dlog       *pbcomm.Debug    `protobuf:"bytes,12,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *CreateChannelReq) Reset() {
	*x = CreateChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelReq) ProtoMessage() {}

func (x *CreateChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelReq.ProtoReflect.Descriptor instead.
func (*CreateChannelReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{5}
}

func (x *CreateChannelReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *CreateChannelReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *CreateChannelReq) GetCreatorId() int32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *CreateChannelReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateChannelReq) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *CreateChannelReq) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

func (x *CreateChannelReq) GetMegagroup() bool {
	if x != nil {
		return x.Megagroup
	}
	return false
}

func (x *CreateChannelReq) GetCluster() int32 {
	if x != nil {
		return x.Cluster
	}
	return 0
}

func (x *CreateChannelReq) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *CreateChannelReq) GetHasGeo() bool {
	if x != nil {
		return x.HasGeo
	}
	return false
}

func (x *CreateChannelReq) GetLocation() *ChannelLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CreateChannelReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type ChannelupdatesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *ChannelInfoBase `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"` //channel基本信息
	//UserInfoArray users = 2; //在线用户信息
	Participants *ChannelParticipantArr `protobuf:"bytes,2,opt,name=participants,proto3" json:"participants,omitempty"`                            //在线用户权限
	Resultcode   ChatResultCode         `protobuf:"varint,3,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *ChannelupdatesResp) Reset() {
	*x = ChannelupdatesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelupdatesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelupdatesResp) ProtoMessage() {}

func (x *ChannelupdatesResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelupdatesResp.ProtoReflect.Descriptor instead.
func (*ChannelupdatesResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{6}
}

func (x *ChannelupdatesResp) GetChannel() *ChannelInfoBase {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *ChannelupdatesResp) GetParticipants() *ChannelParticipantArr {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ChannelupdatesResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获取channel信息
type GetChannelUpdatesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //超级群的ID
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //超级群的ID
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                             //日志
}

func (x *GetChannelUpdatesReq) Reset() {
	*x = GetChannelUpdatesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelUpdatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelUpdatesReq) ProtoMessage() {}

func (x *GetChannelUpdatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelUpdatesReq.ProtoReflect.Descriptor instead.
func (*GetChannelUpdatesReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{7}
}

func (x *GetChannelUpdatesReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelUpdatesReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChannelUpdatesReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 添加(主动加入)超级群、频道的用户的请求
type AddChannelUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32           `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //channle的Id
	InvitorId  int32           `protobuf:"varint,2,opt,name=invitor_id,json=invitorId,proto3" json:"invitor_id,omitempty"` //邀请者的用户ID（如果是自己加入invitor_id 为自己的用户ID）
	AccessHash int64           `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	StartMsgid int32           `protobuf:"varint,4,opt,name=start_msgid,json=startMsgid,proto3" json:"start_msgid,omitempty"` // add by qingsong at 2019-12-06 for record channel member start message id.
	Users      []*InvitedUsers `protobuf:"bytes,5,rep,name=users,proto3" json:"users,omitempty"`
	Dlog       *pbcomm.Debug   `protobuf:"bytes,6,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *AddChannelUserReq) Reset() {
	*x = AddChannelUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddChannelUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChannelUserReq) ProtoMessage() {}

func (x *AddChannelUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChannelUserReq.ProtoReflect.Descriptor instead.
func (*AddChannelUserReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{8}
}

func (x *AddChannelUserReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *AddChannelUserReq) GetInvitorId() int32 {
	if x != nil {
		return x.InvitorId
	}
	return 0
}

func (x *AddChannelUserReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *AddChannelUserReq) GetStartMsgid() int32 {
	if x != nil {
		return x.StartMsgid
	}
	return 0
}

func (x *AddChannelUserReq) GetUsers() []*InvitedUsers {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *AddChannelUserReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 踢人或者主动离开超级群、频道的的请求接口
type DelChannelUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`   //channle的Id
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`            //要进离开/被踢 超级群/频道的成员的用户ID
	IsBotUser bool          `protobuf:"varint,3,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"` //被邀请者是不是机器人
	IsKicked  bool          `protobuf:"varint,4,opt,name=is_kicked,json=isKicked,proto3" json:"is_kicked,omitempty"`      // 是否是离开超级群\频道
	KickedId  int32         `protobuf:"varint,5,opt,name=Kicked_id,json=KickedId,proto3" json:"Kicked_id,omitempty"`      //如果是超级群被踢的话将，此用户保存到被踢列表中
	Dlog      *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                               //日志
}

func (x *DelChannelUserReq) Reset() {
	*x = DelChannelUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChannelUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChannelUserReq) ProtoMessage() {}

func (x *DelChannelUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChannelUserReq.ProtoReflect.Descriptor instead.
func (*DelChannelUserReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{9}
}

func (x *DelChannelUserReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *DelChannelUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelChannelUserReq) GetIsBotUser() bool {
	if x != nil {
		return x.IsBotUser
	}
	return false
}

func (x *DelChannelUserReq) GetIsKicked() bool {
	if x != nil {
		return x.IsKicked
	}
	return false
}

func (x *DelChannelUserReq) GetKickedId() int32 {
	if x != nil {
		return x.KickedId
	}
	return 0
}

func (x *DelChannelUserReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 更新群about请求
type UpdateChanAboutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	About     string        `protobuf:"bytes,3,opt,name=about,proto3" json:"about,omitempty"` //超级群/频道的简略说明
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`   //日志
}

func (x *UpdateChanAboutReq) Reset() {
	*x = UpdateChanAboutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChanAboutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChanAboutReq) ProtoMessage() {}

func (x *UpdateChanAboutReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChanAboutReq.ProtoReflect.Descriptor instead.
func (*UpdateChanAboutReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateChanAboutReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChanAboutReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChanAboutReq) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *UpdateChanAboutReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 更新群名称请求
type UpdateChanTitleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title     string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"` //超级群/频道的简略说明
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`   //日志
}

func (x *UpdateChanTitleReq) Reset() {
	*x = UpdateChanTitleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChanTitleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChanTitleReq) ProtoMessage() {}

func (x *UpdateChanTitleReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChanTitleReq.ProtoReflect.Descriptor instead.
func (*UpdateChanTitleReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateChanTitleReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChanTitleReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChanTitleReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateChanTitleReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 更新群头像请求
type UpdateChanPhotoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Photo     string        `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"` //超级群/频道的简略说明 json的格式
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`   //日志
}

func (x *UpdateChanPhotoReq) Reset() {
	*x = UpdateChanPhotoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChanPhotoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChanPhotoReq) ProtoMessage() {}

func (x *UpdateChanPhotoReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChanPhotoReq.ProtoReflect.Descriptor instead.
func (*UpdateChanPhotoReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateChanPhotoReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChanPhotoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChanPhotoReq) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *UpdateChanPhotoReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
type UpdateChanAdminRightsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	FromId      int32         `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"` //修改人
	UserId      int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //被修改人
	KeepAdmin   bool          `protobuf:"varint,4,opt,name=keep_admin,json=keepAdmin,proto3" json:"keep_admin,omitempty"`
	AdminRights *AdminRights  `protobuf:"bytes,5,opt,name=admin_rights,json=adminRights,proto3" json:"admin_rights,omitempty"` //权限
	Dlog        *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                  //日志
}

func (x *UpdateChanAdminRightsReq) Reset() {
	*x = UpdateChanAdminRightsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChanAdminRightsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChanAdminRightsReq) ProtoMessage() {}

func (x *UpdateChanAdminRightsReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChanAdminRightsReq.ProtoReflect.Descriptor instead.
func (*UpdateChanAdminRightsReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateChanAdminRightsReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChanAdminRightsReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UpdateChanAdminRightsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChanAdminRightsReq) GetKeepAdmin() bool {
	if x != nil {
		return x.KeepAdmin
	}
	return false
}

func (x *UpdateChanAdminRightsReq) GetAdminRights() *AdminRights {
	if x != nil {
		return x.AdminRights
	}
	return nil
}

func (x *UpdateChanAdminRightsReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type UpdateChanAdminRightsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates    *ChannelupdatesResp `protobuf:"bytes,1,opt,name=updates,proto3" json:"updates,omitempty"`
	IsAdd      bool                `protobuf:"varint,2,opt,name=isAdd,proto3" json:"isAdd,omitempty"`                                         //新增成员，并赋予权限
	Ispromote  bool                `protobuf:"varint,3,opt,name=ispromote,proto3" json:"ispromote,omitempty"`                                 //权限的增减，true,增加权限，false,降低权限
	Resultcode ChatResultCode      `protobuf:"varint,4,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *UpdateChanAdminRightsResp) Reset() {
	*x = UpdateChanAdminRightsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChanAdminRightsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChanAdminRightsResp) ProtoMessage() {}

func (x *UpdateChanAdminRightsResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChanAdminRightsResp.ProtoReflect.Descriptor instead.
func (*UpdateChanAdminRightsResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateChanAdminRightsResp) GetUpdates() *ChannelupdatesResp {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *UpdateChanAdminRightsResp) GetIsAdd() bool {
	if x != nil {
		return x.IsAdd
	}
	return false
}

func (x *UpdateChanAdminRightsResp) GetIspromote() bool {
	if x != nil {
		return x.Ispromote
	}
	return false
}

func (x *UpdateChanAdminRightsResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

type UpdateChanHiddenprehistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId        int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	FromId           int32         `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"` //修改人
	UserId           int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //被修改人
	HiddenPrehistory bool          `protobuf:"varint,4,opt,name=Hidden_prehistory,json=HiddenPrehistory,proto3" json:"Hidden_prehistory,omitempty"`
	Dlog             *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *UpdateChanHiddenprehistoryReq) Reset() {
	*x = UpdateChanHiddenprehistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChanHiddenprehistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChanHiddenprehistoryReq) ProtoMessage() {}

func (x *UpdateChanHiddenprehistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChanHiddenprehistoryReq.ProtoReflect.Descriptor instead.
func (*UpdateChanHiddenprehistoryReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateChanHiddenprehistoryReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChanHiddenprehistoryReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UpdateChanHiddenprehistoryReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChanHiddenprehistoryReq) GetHiddenPrehistory() bool {
	if x != nil {
		return x.HiddenPrehistory
	}
	return false
}

func (x *UpdateChanHiddenprehistoryReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type UpdateChanBanRightsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`         //修改人
	UserId    int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`         //被修改人
	IsKick    bool          `protobuf:"varint,4,opt,name=isKick,proto3" json:"isKick,omitempty"`                       //被踢
	BanRights *BannerRights `protobuf:"bytes,5,opt,name=ban_rights,json=banRights,proto3" json:"ban_rights,omitempty"` //权限
	BanDate   int32         `protobuf:"varint,6,opt,name=ban_date,json=banDate,proto3" json:"ban_date,omitempty"`      //ban的期限
	Dlog      *pbcomm.Debug `protobuf:"bytes,7,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                            //日志
}

func (x *UpdateChanBanRightsReq) Reset() {
	*x = UpdateChanBanRightsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChanBanRightsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChanBanRightsReq) ProtoMessage() {}

func (x *UpdateChanBanRightsReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChanBanRightsReq.ProtoReflect.Descriptor instead.
func (*UpdateChanBanRightsReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateChanBanRightsReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChanBanRightsReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UpdateChanBanRightsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChanBanRightsReq) GetIsKick() bool {
	if x != nil {
		return x.IsKick
	}
	return false
}

func (x *UpdateChanBanRightsReq) GetBanRights() *BannerRights {
	if x != nil {
		return x.BanRights
	}
	return nil
}

func (x *UpdateChanBanRightsReq) GetBanDate() int32 {
	if x != nil {
		return x.BanDate
	}
	return 0
}

func (x *UpdateChanBanRightsReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// channel最基础的请求
type DismissChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //channle的Id
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //请求者的用户Id
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	CmdOption  bool          `protobuf:"varint,4,opt,name=CmdOption,proto3" json:"CmdOption,omitempty"`                     //是否是管理员命令操作
	Dlog       *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                //日志
}

func (x *DismissChannelReq) Reset() {
	*x = DismissChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DismissChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DismissChannelReq) ProtoMessage() {}

func (x *DismissChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DismissChannelReq.ProtoReflect.Descriptor instead.
func (*DismissChannelReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{17}
}

func (x *DismissChannelReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *DismissChannelReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DismissChannelReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *DismissChannelReq) GetCmdOption() bool {
	if x != nil {
		return x.CmdOption
	}
	return false
}

func (x *DismissChannelReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type DismissChannelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B          bool           `protobuf:"varint,1,opt,name=b,proto3" json:"b,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *DismissChannelResp) Reset() {
	*x = DismissChannelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DismissChannelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DismissChannelResp) ProtoMessage() {}

func (x *DismissChannelResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DismissChannelResp.ProtoReflect.Descriptor instead.
func (*DismissChannelResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{18}
}

func (x *DismissChannelResp) GetB() bool {
	if x != nil {
		return x.B
	}
	return false
}

func (x *DismissChannelResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 超级群/频道 的按类型的偏移获取
type ParticipantLimitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //成员的ID
	Offset    int32         `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`                        //偏移地址
	Limit     int32         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                          //每次能够取的最大个数
	PartType  int32         `protobuf:"varint,4,opt,name=part_type,json=partType,proto3" json:"part_type,omitempty"`    //成员类型 1 代表 channelParticipantsRecent  2、代表 channelParticipantsAdmins 3代表channelParticipantsKicked 4代表channelParticipantsBots 5代表channelParticipantsBanned
	Userid    int32         `protobuf:"varint,5,opt,name=userid,proto3" json:"userid,omitempty"`
	Q         string        `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`       //根据用户名匹配
	Dlog      *pbcomm.Debug `protobuf:"bytes,7,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *ParticipantLimitReq) Reset() {
	*x = ParticipantLimitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantLimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantLimitReq) ProtoMessage() {}

func (x *ParticipantLimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantLimitReq.ProtoReflect.Descriptor instead.
func (*ParticipantLimitReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{19}
}

func (x *ParticipantLimitReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ParticipantLimitReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ParticipantLimitReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ParticipantLimitReq) GetPartType() int32 {
	if x != nil {
		return x.PartType
	}
	return 0
}

func (x *ParticipantLimitReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ParticipantLimitReq) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ParticipantLimitReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 群成员的列表
type ParticipantLimitResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32                 `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	Part       []*ChannelParticipant `protobuf:"bytes,2,rep,name=part,proto3" json:"part,omitempty"`
	//UserInfoArray users = 3; //在线用户信息
	Resultcode ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *ParticipantLimitResp) Reset() {
	*x = ParticipantLimitResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantLimitResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantLimitResp) ProtoMessage() {}

func (x *ParticipantLimitResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantLimitResp.ProtoReflect.Descriptor instead.
func (*ParticipantLimitResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{20}
}

func (x *ParticipantLimitResp) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ParticipantLimitResp) GetPart() []*ChannelParticipant {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *ParticipantLimitResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// channel最基础的请求
type GetChannelOnePartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //channle的Id
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //请求者的用户Id
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                //日志
}

func (x *GetChannelOnePartReq) Reset() {
	*x = GetChannelOnePartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelOnePartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelOnePartReq) ProtoMessage() {}

func (x *GetChannelOnePartReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelOnePartReq.ProtoReflect.Descriptor instead.
func (*GetChannelOnePartReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{21}
}

func (x *GetChannelOnePartReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelOnePartReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChannelOnePartReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetChannelOnePartReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 群成员的基础信息
type GetChannelOnePartResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OneParticipant *ChannelParticipant `protobuf:"bytes,1,opt,name=one_participant,json=oneParticipant,proto3" json:"one_participant,omitempty"`
	//userInfo user_info = 2 ;
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *GetChannelOnePartResp) Reset() {
	*x = GetChannelOnePartResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelOnePartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelOnePartResp) ProtoMessage() {}

func (x *GetChannelOnePartResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelOnePartResp.ProtoReflect.Descriptor instead.
func (*GetChannelOnePartResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{22}
}

func (x *GetChannelOnePartResp) GetOneParticipant() *ChannelParticipant {
	if x != nil {
		return x.OneParticipant
	}
	return nil
}

func (x *GetChannelOnePartResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获取channel userids信息
type GetChannelUsersIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //超级群的ID
	Dlog      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                             //日志
}

func (x *GetChannelUsersIdReq) Reset() {
	*x = GetChannelUsersIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelUsersIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelUsersIdReq) ProtoMessage() {}

func (x *GetChannelUsersIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelUsersIdReq.ProtoReflect.Descriptor instead.
func (*GetChannelUsersIdReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{23}
}

func (x *GetChannelUsersIdReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelUsersIdReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type GetChannelUsersIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32          `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     []int32        `protobuf:"varint,2,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *GetChannelUsersIdResp) Reset() {
	*x = GetChannelUsersIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelUsersIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelUsersIdResp) ProtoMessage() {}

func (x *GetChannelUsersIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelUsersIdResp.ProtoReflect.Descriptor instead.
func (*GetChannelUsersIdResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{24}
}

func (x *GetChannelUsersIdResp) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelUsersIdResp) GetUserId() []int32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *GetChannelUsersIdResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// channel最基础的请求
type GetChannelBaseInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //channle的Id
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //请求者的用户Id
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                //日志
}

func (x *GetChannelBaseInfoReq) Reset() {
	*x = GetChannelBaseInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelBaseInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelBaseInfoReq) ProtoMessage() {}

func (x *GetChannelBaseInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelBaseInfoReq.ProtoReflect.Descriptor instead.
func (*GetChannelBaseInfoReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{25}
}

func (x *GetChannelBaseInfoReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelBaseInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChannelBaseInfoReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetChannelBaseInfoReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 群基础信息
type GetChannelBaseInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseInfo   *ChannelInfoBase `protobuf:"bytes,1,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`
	Resultcode ChatResultCode   `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *GetChannelBaseInfoResp) Reset() {
	*x = GetChannelBaseInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelBaseInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelBaseInfoResp) ProtoMessage() {}

func (x *GetChannelBaseInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelBaseInfoResp.ProtoReflect.Descriptor instead.
func (*GetChannelBaseInfoResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{26}
}

func (x *GetChannelBaseInfoResp) GetBaseInfo() *ChannelInfoBase {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *GetChannelBaseInfoResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// 获取channel信息  不带user信息
type GetChannelInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //channle的Id
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	Dlog       *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                //日志
}

func (x *GetChannelInfoReq) Reset() {
	*x = GetChannelInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInfoReq) ProtoMessage() {}

func (x *GetChannelInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInfoReq.ProtoReflect.Descriptor instead.
func (*GetChannelInfoReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{27}
}

func (x *GetChannelInfoReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelInfoReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetChannelInfoReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 群基础信息
type GetChannelInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseInfo   *ChannelInfoBase `protobuf:"bytes,1,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`                                    //基础信息  不带user信息
	Resultcode ChatResultCode   `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *GetChannelInfoResp) Reset() {
	*x = GetChannelInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInfoResp) ProtoMessage() {}

func (x *GetChannelInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInfoResp.ProtoReflect.Descriptor instead.
func (*GetChannelInfoResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{28}
}

func (x *GetChannelInfoResp) GetBaseInfo() *ChannelInfoBase {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *GetChannelInfoResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 批量获取
// channel最基础的请求
type BatchChannelBaseInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //channle的Id
	UserId    []int32       `protobuf:"varint,2,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`   //请求者的用户Id
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                             //日志
}

func (x *BatchChannelBaseInfoReq) Reset() {
	*x = BatchChannelBaseInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchChannelBaseInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchChannelBaseInfoReq) ProtoMessage() {}

func (x *BatchChannelBaseInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchChannelBaseInfoReq.ProtoReflect.Descriptor instead.
func (*BatchChannelBaseInfoReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{29}
}

func (x *BatchChannelBaseInfoReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *BatchChannelBaseInfoReq) GetUserId() []int32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *BatchChannelBaseInfoReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type BatchChannelBaseInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel    []*ChannelInfoBase `protobuf:"bytes,1,rep,name=channel,proto3" json:"channel,omitempty"`                                      //channel的基础信息
	Resultcode ChatResultCode     `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *BatchChannelBaseInfoResp) Reset() {
	*x = BatchChannelBaseInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchChannelBaseInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchChannelBaseInfoResp) ProtoMessage() {}

func (x *BatchChannelBaseInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchChannelBaseInfoResp.ProtoReflect.Descriptor instead.
func (*BatchChannelBaseInfoResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{30}
}

func (x *BatchChannelBaseInfoResp) GetChannel() []*ChannelInfoBase {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *BatchChannelBaseInfoResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// ChannelLink
type GetChanByLinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelLink string        `protobuf:"bytes,1,opt,name=channel_link,json=channelLink,proto3" json:"channel_link,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //请求者的用户Id
	Dlog        *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                    //日志
}

func (x *GetChanByLinkReq) Reset() {
	*x = GetChanByLinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChanByLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChanByLinkReq) ProtoMessage() {}

func (x *GetChanByLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChanByLinkReq.ProtoReflect.Descriptor instead.
func (*GetChanByLinkReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{31}
}

func (x *GetChanByLinkReq) GetChannelLink() string {
	if x != nil {
		return x.ChannelLink
	}
	return ""
}

func (x *GetChanByLinkReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChanByLinkReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 返回为 ChannelInfoBaseResp
// -----------------------------------------------------------------------------
// ChannelLinkorusername
type GetChanInfoByLinkOrUserNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelLink string        `protobuf:"bytes,1,opt,name=channel_link,json=channelLink,proto3" json:"channel_link,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *GetChanInfoByLinkOrUserNameReq) Reset() {
	*x = GetChanInfoByLinkOrUserNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChanInfoByLinkOrUserNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChanInfoByLinkOrUserNameReq) ProtoMessage() {}

func (x *GetChanInfoByLinkOrUserNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChanInfoByLinkOrUserNameReq.ProtoReflect.Descriptor instead.
func (*GetChanInfoByLinkOrUserNameReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{32}
}

func (x *GetChanInfoByLinkOrUserNameReq) GetChannelLink() string {
	if x != nil {
		return x.ChannelLink
	}
	return ""
}

func (x *GetChanInfoByLinkOrUserNameReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 返回为 ChannelInfoBaseResp
// -----------------------------------------------------------------------------
// GetFullChannelInfo
type GetFullChannelInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //channle的Id
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //请求者的用户Id
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	Dlog       *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                //日志
}

func (x *GetFullChannelInfoReq) Reset() {
	*x = GetFullChannelInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullChannelInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullChannelInfoReq) ProtoMessage() {}

func (x *GetFullChannelInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullChannelInfoReq.ProtoReflect.Descriptor instead.
func (*GetFullChannelInfoReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{33}
}

func (x *GetFullChannelInfoReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetFullChannelInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFullChannelInfoReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetFullChannelInfoReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type GetFullChannelInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channelinfo        *ChannelInfoBase `protobuf:"bytes,1,opt,name=channelinfo,proto3" json:"channelinfo,omitempty"`
	ExportedInviteLink string           `protobuf:"bytes,2,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"`    //邀请链接
	ParticipantsCount  int32            `protobuf:"varint,3,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`        //成员个数
	AdminsCount        int32            `protobuf:"varint,4,opt,name=admins_count,json=adminsCount,proto3" json:"admins_count,omitempty"`                          //管理员个数
	KickedCount        int32            `protobuf:"varint,5,opt,name=kicked_count,json=kickedCount,proto3" json:"kicked_count,omitempty"`                          //被踢个数
	BannedCount        int32            `protobuf:"varint,6,opt,name=banned_count,json=bannedCount,proto3" json:"banned_count,omitempty"`                          //被禁止的个数（68层使用）
	PinnedMsgId        int32            `protobuf:"varint,7,opt,name=pinned_msg_id,json=pinnedMsgId,proto3" json:"pinned_msg_id,omitempty"`                        //置顶的消息的ID
	MigratedFromMaxId  int32            `protobuf:"varint,8,opt,name=migrated_from_max_id,json=migratedFromMaxId,proto3" json:"migrated_from_max_id,omitempty"`    //如果是超级群的话从这个普通群升级而来，默认为0
	MigratedFromChatId int32            `protobuf:"varint,9,opt,name=migrated_from_chat_id,json=migratedFromChatId,proto3" json:"migrated_from_chat_id,omitempty"` //如果是超级群的话从这个普通群升级而来，默认为0
	AdminRights        *AdminRights     `protobuf:"bytes,10,opt,name=admin_rights,json=adminRights,proto3" json:"admin_rights,omitempty"`                          //是否可以设置username
	BanRights          *BannerRights    `protobuf:"bytes,11,opt,name=ban_rights,json=banRights,proto3" json:"ban_rights,omitempty"`                                //是否可以查看群成员列表
	About              string           `protobuf:"bytes,12,opt,name=about,proto3" json:"about,omitempty"`                                                         //群简要
	BotCount           int32            `protobuf:"varint,13,opt,name=bot_count,json=botCount,proto3" json:"bot_count,omitempty"`                                  //机器人个数，如果大于0，就从机器人服务那边去取
	BotId              []int32          `protobuf:"varint,14,rep,packed,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`                                    //机器人id的数组
	//UserInfoArray users = 15; //用户信息
	CanSetUsername      bool `protobuf:"varint,15,opt,name=Can_set_username,json=CanSetUsername,proto3" json:"Can_set_username,omitempty"`
	CanViewParticipants bool `protobuf:"varint,16,opt,name=Can_view_participants,json=CanViewParticipants,proto3" json:"Can_view_participants,omitempty"`
	/// --------------------- TODO
	Longitude  float64        `protobuf:"fixed64,17,opt,name=longitude,proto3" json:"longitude,omitempty"`                                //地理位置
	Latitude   float64        `protobuf:"fixed64,18,opt,name=latitude,proto3" json:"latitude,omitempty"`                                  //
	Addr       string         `protobuf:"bytes,19,opt,name=addr,proto3" json:"addr,omitempty"`                                            //地理位置
	Resultcode ChatResultCode `protobuf:"varint,20,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *GetFullChannelInfoResp) Reset() {
	*x = GetFullChannelInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullChannelInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullChannelInfoResp) ProtoMessage() {}

func (x *GetFullChannelInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullChannelInfoResp.ProtoReflect.Descriptor instead.
func (*GetFullChannelInfoResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{34}
}

func (x *GetFullChannelInfoResp) GetChannelinfo() *ChannelInfoBase {
	if x != nil {
		return x.Channelinfo
	}
	return nil
}

func (x *GetFullChannelInfoResp) GetExportedInviteLink() string {
	if x != nil {
		return x.ExportedInviteLink
	}
	return ""
}

func (x *GetFullChannelInfoResp) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetAdminsCount() int32 {
	if x != nil {
		return x.AdminsCount
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetKickedCount() int32 {
	if x != nil {
		return x.KickedCount
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetBannedCount() int32 {
	if x != nil {
		return x.BannedCount
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetPinnedMsgId() int32 {
	if x != nil {
		return x.PinnedMsgId
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetMigratedFromMaxId() int32 {
	if x != nil {
		return x.MigratedFromMaxId
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetMigratedFromChatId() int32 {
	if x != nil {
		return x.MigratedFromChatId
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetAdminRights() *AdminRights {
	if x != nil {
		return x.AdminRights
	}
	return nil
}

func (x *GetFullChannelInfoResp) GetBanRights() *BannerRights {
	if x != nil {
		return x.BanRights
	}
	return nil
}

func (x *GetFullChannelInfoResp) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *GetFullChannelInfoResp) GetBotCount() int32 {
	if x != nil {
		return x.BotCount
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetBotId() []int32 {
	if x != nil {
		return x.BotId
	}
	return nil
}

func (x *GetFullChannelInfoResp) GetCanSetUsername() bool {
	if x != nil {
		return x.CanSetUsername
	}
	return false
}

func (x *GetFullChannelInfoResp) GetCanViewParticipants() bool {
	if x != nil {
		return x.CanViewParticipants
	}
	return false
}

func (x *GetFullChannelInfoResp) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *GetFullChannelInfoResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 切换邀请规则
type ToggleInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash  int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	AdminEnable bool          `protobuf:"varint,4,opt,name=admin_enable,json=adminEnable,proto3" json:"admin_enable,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *ToggleInviteReq) Reset() {
	*x = ToggleInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleInviteReq) ProtoMessage() {}

func (x *ToggleInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleInviteReq.ProtoReflect.Descriptor instead.
func (*ToggleInviteReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{35}
}

func (x *ToggleInviteReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ToggleInviteReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ToggleInviteReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ToggleInviteReq) GetAdminEnable() bool {
	if x != nil {
		return x.AdminEnable
	}
	return false
}

func (x *ToggleInviteReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 返回为ChannelupdatesResp  user可以为空
// -----------------------------------------------------------------------------
// 生成群群链接
type CreateChannelLinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *CreateChannelLinkReq) Reset() {
	*x = CreateChannelLinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelLinkReq) ProtoMessage() {}

func (x *CreateChannelLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelLinkReq.ProtoReflect.Descriptor instead.
func (*CreateChannelLinkReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{36}
}

func (x *CreateChannelLinkReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *CreateChannelLinkReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateChannelLinkReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 生成群链接
type CreateChannelLinkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link       string         `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`                                            //群信息
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *CreateChannelLinkResp) Reset() {
	*x = CreateChannelLinkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelLinkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelLinkResp) ProtoMessage() {}

func (x *CreateChannelLinkResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelLinkResp.ProtoReflect.Descriptor instead.
func (*CreateChannelLinkResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{37}
}

func (x *CreateChannelLinkResp) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *CreateChannelLinkResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 校验邀请链接合法
type CheckChannelInviteLinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash string        `protobuf:"bytes,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *CheckChannelInviteLinkReq) Reset() {
	*x = CheckChannelInviteLinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChannelInviteLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChannelInviteLinkReq) ProtoMessage() {}

func (x *CheckChannelInviteLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChannelInviteLinkReq.ProtoReflect.Descriptor instead.
func (*CheckChannelInviteLinkReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{38}
}

func (x *CheckChannelInviteLinkReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *CheckChannelInviteLinkReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckChannelInviteLinkReq) GetAccessHash() string {
	if x != nil {
		return x.AccessHash
	}
	return ""
}

func (x *CheckChannelInviteLinkReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 生成群链接
type CheckChannelInviteLinkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link        string           `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`    //link
	Gtype       int32            `protobuf:"varint,2,opt,name=gtype,proto3" json:"gtype,omitempty"` //0:不存在  1：普通群  2：超级群
	ChanInfo    *ChannelInfoBase `protobuf:"bytes,3,opt,name=chanInfo,proto3" json:"chanInfo,omitempty"`
	Chatinfo    *GetChatInfoResp `protobuf:"bytes,4,opt,name=chatinfo,proto3" json:"chatinfo,omitempty"`
	LinkCreator int32            `protobuf:"varint,5,opt,name=linkCreator,proto3" json:"linkCreator,omitempty"`
	Resultcode  ChatResultCode   `protobuf:"varint,6,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *CheckChannelInviteLinkResp) Reset() {
	*x = CheckChannelInviteLinkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChannelInviteLinkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChannelInviteLinkResp) ProtoMessage() {}

func (x *CheckChannelInviteLinkResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChannelInviteLinkResp.ProtoReflect.Descriptor instead.
func (*CheckChannelInviteLinkResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{39}
}

func (x *CheckChannelInviteLinkResp) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *CheckChannelInviteLinkResp) GetGtype() int32 {
	if x != nil {
		return x.Gtype
	}
	return 0
}

func (x *CheckChannelInviteLinkResp) GetChanInfo() *ChannelInfoBase {
	if x != nil {
		return x.ChanInfo
	}
	return nil
}

func (x *CheckChannelInviteLinkResp) GetChatinfo() *GetChatInfoResp {
	if x != nil {
		return x.Chatinfo
	}
	return nil
}

func (x *CheckChannelInviteLinkResp) GetLinkCreator() int32 {
	if x != nil {
		return x.LinkCreator
	}
	return 0
}

func (x *CheckChannelInviteLinkResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 更改username
type UpdateChannelUserNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName  string        `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *UpdateChannelUserNameReq) Reset() {
	*x = UpdateChannelUserNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelUserNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelUserNameReq) ProtoMessage() {}

func (x *UpdateChannelUserNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelUserNameReq.ProtoReflect.Descriptor instead.
func (*UpdateChannelUserNameReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateChannelUserNameReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChannelUserNameReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChannelUserNameReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UpdateChannelUserNameReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type UpdateChannelUserNameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *UpdateChannelUserNameResp) Reset() {
	*x = UpdateChannelUserNameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelUserNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelUserNameResp) ProtoMessage() {}

func (x *UpdateChannelUserNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelUserNameResp.ProtoReflect.Descriptor instead.
func (*UpdateChannelUserNameResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateChannelUserNameResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 更改username
type UpdateChannelPinnedMsgIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PinnedMsgId int32         `protobuf:"varint,3,opt,name=pinned_msg_id,json=pinnedMsgId,proto3" json:"pinned_msg_id,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *UpdateChannelPinnedMsgIdReq) Reset() {
	*x = UpdateChannelPinnedMsgIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelPinnedMsgIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelPinnedMsgIdReq) ProtoMessage() {}

func (x *UpdateChannelPinnedMsgIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelPinnedMsgIdReq.ProtoReflect.Descriptor instead.
func (*UpdateChannelPinnedMsgIdReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateChannelPinnedMsgIdReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChannelPinnedMsgIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChannelPinnedMsgIdReq) GetPinnedMsgId() int32 {
	if x != nil {
		return x.PinnedMsgId
	}
	return 0
}

func (x *UpdateChannelPinnedMsgIdReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type UpdateChannelPinnedMsgIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *UpdateChannelPinnedMsgIdResp) Reset() {
	*x = UpdateChannelPinnedMsgIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelPinnedMsgIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelPinnedMsgIdResp) ProtoMessage() {}

func (x *UpdateChannelPinnedMsgIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelPinnedMsgIdResp.ProtoReflect.Descriptor instead.
func (*UpdateChannelPinnedMsgIdResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateChannelPinnedMsgIdResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 检查userName是否可用
type CheckUserNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	UserName   string        `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"` //创建时输入的username
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                         //日志
}

func (x *CheckUserNameReq) Reset() {
	*x = CheckUserNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserNameReq) ProtoMessage() {}

func (x *CheckUserNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserNameReq.ProtoReflect.Descriptor instead.
func (*CheckUserNameReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{44}
}

func (x *CheckUserNameReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *CheckUserNameReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *CheckUserNameReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CheckUserNameReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type CheckUserNameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *CheckUserNameResp) Reset() {
	*x = CheckUserNameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserNameResp) ProtoMessage() {}

func (x *CheckUserNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserNameResp.ProtoReflect.Descriptor instead.
func (*CheckUserNameResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{45}
}

func (x *CheckUserNameResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 检查群是否是加密
type CheckChannelIsEncryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *CheckChannelIsEncryReq) Reset() {
	*x = CheckChannelIsEncryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChannelIsEncryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChannelIsEncryReq) ProtoMessage() {}

func (x *CheckChannelIsEncryReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChannelIsEncryReq.ProtoReflect.Descriptor instead.
func (*CheckChannelIsEncryReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{46}
}

func (x *CheckChannelIsEncryReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *CheckChannelIsEncryReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 检查群是否是加密
type CheckChannelIsEncryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encry      bool           `protobuf:"varint,1,opt,name=encry,proto3" json:"encry,omitempty"`                                         //是否加密
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *CheckChannelIsEncryResp) Reset() {
	*x = CheckChannelIsEncryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChannelIsEncryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChannelIsEncryResp) ProtoMessage() {}

func (x *CheckChannelIsEncryResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChannelIsEncryResp.ProtoReflect.Descriptor instead.
func (*CheckChannelIsEncryResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{47}
}

func (x *CheckChannelIsEncryResp) GetEncry() bool {
	if x != nil {
		return x.Encry
	}
	return false
}

func (x *CheckChannelIsEncryResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// --------------------------------groupinfo 独立后新增---------------------------------------------
// 根据userid查询所有的超级群
type GetAllChannelInfoByUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *GetAllChannelInfoByUserIdReq) Reset() {
	*x = GetAllChannelInfoByUserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllChannelInfoByUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllChannelInfoByUserIdReq) ProtoMessage() {}

func (x *GetAllChannelInfoByUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllChannelInfoByUserIdReq.ProtoReflect.Descriptor instead.
func (*GetAllChannelInfoByUserIdReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{48}
}

func (x *GetAllChannelInfoByUserIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAllChannelInfoByUserIdReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type GetAllChannelInfoByUserIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels   []*ChannelInfoBase `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	Resultcode ChatResultCode     `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *GetAllChannelInfoByUserIdResp) Reset() {
	*x = GetAllChannelInfoByUserIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllChannelInfoByUserIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllChannelInfoByUserIdResp) ProtoMessage() {}

func (x *GetAllChannelInfoByUserIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllChannelInfoByUserIdResp.ProtoReflect.Descriptor instead.
func (*GetAllChannelInfoByUserIdResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{49}
}

func (x *GetAllChannelInfoByUserIdResp) GetChannels() []*ChannelInfoBase {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *GetAllChannelInfoByUserIdResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 全体禁言
type EveryoneQuietReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId int32         `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Quiet     bool          `protobuf:"varint,3,opt,name=quiet,proto3" json:"quiet,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`
}

func (x *EveryoneQuietReq) Reset() {
	*x = EveryoneQuietReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EveryoneQuietReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EveryoneQuietReq) ProtoMessage() {}

func (x *EveryoneQuietReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EveryoneQuietReq.ProtoReflect.Descriptor instead.
func (*EveryoneQuietReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{50}
}

func (x *EveryoneQuietReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *EveryoneQuietReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *EveryoneQuietReq) GetQuiet() bool {
	if x != nil {
		return x.Quiet
	}
	return false
}

func (x *EveryoneQuietReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 禁止私聊
type EditPrivateChatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId int32         `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Enable    bool          `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`
}

func (x *EditPrivateChatReq) Reset() {
	*x = EditPrivateChatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditPrivateChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditPrivateChatReq) ProtoMessage() {}

func (x *EditPrivateChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditPrivateChatReq.ProtoReflect.Descriptor instead.
func (*EditPrivateChatReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{51}
}

func (x *EditPrivateChatReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *EditPrivateChatReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *EditPrivateChatReq) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *EditPrivateChatReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 通用的更新操作响应
type UpdateChannelCommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *UpdateChannelCommonResp) Reset() {
	*x = UpdateChannelCommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelCommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelCommonResp) ProtoMessage() {}

func (x *UpdateChannelCommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelCommonResp.ProtoReflect.Descriptor instead.
func (*UpdateChannelCommonResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateChannelCommonResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 变更创建者请求
type SetChannelCreatorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Operator  int32         `protobuf:"varint,2,opt,name=operator,proto3" json:"operator,omitempty"`           //操作者id
	UserId    int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //变更者id
	Remark    string        `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`
	IsAdd     bool          `protobuf:"varint,5,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"` //不在群是否添加进群
	Dlog      *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog,proto3" json:"Dlog,omitempty"`
}

func (x *SetChannelCreatorReq) Reset() {
	*x = SetChannelCreatorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChannelCreatorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelCreatorReq) ProtoMessage() {}

func (x *SetChannelCreatorReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelCreatorReq.ProtoReflect.Descriptor instead.
func (*SetChannelCreatorReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{53}
}

func (x *SetChannelCreatorReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *SetChannelCreatorReq) GetOperator() int32 {
	if x != nil {
		return x.Operator
	}
	return 0
}

func (x *SetChannelCreatorReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetChannelCreatorReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SetChannelCreatorReq) GetIsAdd() bool {
	if x != nil {
		return x.IsAdd
	}
	return false
}

func (x *SetChannelCreatorReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type ResetUserAllCreateGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator   int32         `protobuf:"varint,1,opt,name=operator,proto3" json:"operator,omitempty"`
	FromUserid int32         `protobuf:"varint,2,opt,name=from_userid,json=fromUserid,proto3" json:"from_userid,omitempty"`
	ToUserid   int32         `protobuf:"varint,3,opt,name=to_userid,json=toUserid,proto3" json:"to_userid,omitempty"`
	Remark     string        `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog,proto3" json:"Dlog,omitempty"`
}

func (x *ResetUserAllCreateGroupsReq) Reset() {
	*x = ResetUserAllCreateGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetUserAllCreateGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetUserAllCreateGroupsReq) ProtoMessage() {}

func (x *ResetUserAllCreateGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetUserAllCreateGroupsReq.ProtoReflect.Descriptor instead.
func (*ResetUserAllCreateGroupsReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{54}
}

func (x *ResetUserAllCreateGroupsReq) GetOperator() int32 {
	if x != nil {
		return x.Operator
	}
	return 0
}

func (x *ResetUserAllCreateGroupsReq) GetFromUserid() int32 {
	if x != nil {
		return x.FromUserid
	}
	return 0
}

func (x *ResetUserAllCreateGroupsReq) GetToUserid() int32 {
	if x != nil {
		return x.ToUserid
	}
	return 0
}

func (x *ResetUserAllCreateGroupsReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ResetUserAllCreateGroupsReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type ResetUserAllCreateGroupsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuperIds   []int32        `protobuf:"varint,1,rep,packed,name=superIds,proto3" json:"superIds,omitempty"`
	ChannelIds []int32        `protobuf:"varint,2,rep,packed,name=channelIds,proto3" json:"channelIds,omitempty"`
	GroupIds   []int32        `protobuf:"varint,3,rep,packed,name=groupIds,proto3" json:"groupIds,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,4,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (x *ResetUserAllCreateGroupsResp) Reset() {
	*x = ResetUserAllCreateGroupsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetUserAllCreateGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetUserAllCreateGroupsResp) ProtoMessage() {}

func (x *ResetUserAllCreateGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetUserAllCreateGroupsResp.ProtoReflect.Descriptor instead.
func (*ResetUserAllCreateGroupsResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{55}
}

func (x *ResetUserAllCreateGroupsResp) GetSuperIds() []int32 {
	if x != nil {
		return x.SuperIds
	}
	return nil
}

func (x *ResetUserAllCreateGroupsResp) GetChannelIds() []int32 {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

func (x *ResetUserAllCreateGroupsResp) GetGroupIds() []int32 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *ResetUserAllCreateGroupsResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

type GetChannelBotIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog,proto3" json:"Dlog,omitempty"`
}

func (x *GetChannelBotIdsReq) Reset() {
	*x = GetChannelBotIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelBotIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelBotIdsReq) ProtoMessage() {}

func (x *GetChannelBotIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelBotIdsReq.ProtoReflect.Descriptor instead.
func (*GetChannelBotIdsReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{56}
}

func (x *GetChannelBotIdsReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelBotIdsReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type GetChannelBotIdsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotIds     []int32        `protobuf:"varint,1,rep,packed,name=botIds,proto3" json:"botIds,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (x *GetChannelBotIdsResp) Reset() {
	*x = GetChannelBotIdsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelBotIdsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelBotIdsResp) ProtoMessage() {}

func (x *GetChannelBotIdsResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelBotIdsResp.ProtoReflect.Descriptor instead.
func (*GetChannelBotIdsResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{57}
}

func (x *GetChannelBotIdsResp) GetBotIds() []int32 {
	if x != nil {
		return x.BotIds
	}
	return nil
}

func (x *GetChannelBotIdsResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

type GetChannelActiveUserIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog,proto3" json:"Dlog,omitempty"`
}

func (x *GetChannelActiveUserIdsReq) Reset() {
	*x = GetChannelActiveUserIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelActiveUserIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelActiveUserIdsReq) ProtoMessage() {}

func (x *GetChannelActiveUserIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelActiveUserIdsReq.ProtoReflect.Descriptor instead.
func (*GetChannelActiveUserIdsReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{58}
}

func (x *GetChannelActiveUserIdsReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelActiveUserIdsReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type GetChannelActiveUserIdsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds    []int32        `protobuf:"varint,1,rep,packed,name=UserIds,proto3" json:"UserIds,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (x *GetChannelActiveUserIdsResp) Reset() {
	*x = GetChannelActiveUserIdsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelActiveUserIdsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelActiveUserIdsResp) ProtoMessage() {}

func (x *GetChannelActiveUserIdsResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelActiveUserIdsResp.ProtoReflect.Descriptor instead.
func (*GetChannelActiveUserIdsResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{59}
}

func (x *GetChannelActiveUserIdsResp) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetChannelActiveUserIdsResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

type CheckUserInChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId int32         `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"`
}

func (x *CheckUserInChannelReq) Reset() {
	*x = CheckUserInChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserInChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserInChannelReq) ProtoMessage() {}

func (x *CheckUserInChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserInChannelReq.ProtoReflect.Descriptor instead.
func (*CheckUserInChannelReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{60}
}

func (x *CheckUserInChannelReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckUserInChannelReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *CheckUserInChannelReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type CheckUserInChannelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State bool `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *CheckUserInChannelResp) Reset() {
	*x = CheckUserInChannelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserInChannelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserInChannelResp) ProtoMessage() {}

func (x *CheckUserInChannelResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserInChannelResp.ProtoReflect.Descriptor instead.
func (*CheckUserInChannelResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{61}
}

func (x *CheckUserInChannelResp) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

// 超级群官方认证
type UpdateChannelVerifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId []int32       `protobuf:"varint,2,rep,packed,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Verify    bool          `protobuf:"varint,3,opt,name=verify,proto3" json:"verify,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UpdateChannelVerifyReq) Reset() {
	*x = UpdateChannelVerifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelVerifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelVerifyReq) ProtoMessage() {}

func (x *UpdateChannelVerifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelVerifyReq.ProtoReflect.Descriptor instead.
func (*UpdateChannelVerifyReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateChannelVerifyReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChannelVerifyReq) GetChannelId() []int32 {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

func (x *UpdateChannelVerifyReq) GetVerify() bool {
	if x != nil {
		return x.Verify
	}
	return false
}

func (x *UpdateChannelVerifyReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateChannelVerifyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *UpdateChannelVerifyResp) Reset() {
	*x = UpdateChannelVerifyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelVerifyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelVerifyResp) ProtoMessage() {}

func (x *UpdateChannelVerifyResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelVerifyResp.ProtoReflect.Descriptor instead.
func (*UpdateChannelVerifyResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{63}
}

func (x *UpdateChannelVerifyResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 群地理位置坐标结构
type ChannelLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat  float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Long float64 `protobuf:"fixed64,2,opt,name=long,proto3" json:"long,omitempty"`
	Addr string  `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *ChannelLocation) Reset() {
	*x = ChannelLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelLocation) ProtoMessage() {}

func (x *ChannelLocation) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelLocation.ProtoReflect.Descriptor instead.
func (*ChannelLocation) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{64}
}

func (x *ChannelLocation) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *ChannelLocation) GetLong() float64 {
	if x != nil {
		return x.Long
	}
	return 0
}

func (x *ChannelLocation) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

// 更新群地理位置
type UpdateChannelGeoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsClear   bool             `protobuf:"varint,1,opt,name=isClear,proto3" json:"isClear,omitempty"`                      //是否清楚地理位置
	Location  *ChannelLocation `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`                     //群地理位置
	ChannelId int32            `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //群ID
	UserId    int32            `protobuf:"varint,4,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`          //操作者的ID
	KeyId     int64            `protobuf:"varint,5,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             //操作的端标识
}

func (x *UpdateChannelGeoReq) Reset() {
	*x = UpdateChannelGeoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelGeoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelGeoReq) ProtoMessage() {}

func (x *UpdateChannelGeoReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelGeoReq.ProtoReflect.Descriptor instead.
func (*UpdateChannelGeoReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{65}
}

func (x *UpdateChannelGeoReq) GetIsClear() bool {
	if x != nil {
		return x.IsClear
	}
	return false
}

func (x *UpdateChannelGeoReq) GetLocation() *ChannelLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UpdateChannelGeoReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChannelGeoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChannelGeoReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

type UpdateChannelGeoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err UpdateChannelGeoResp_ErrorCode `protobuf:"varint,1,opt,name=err,proto3,enum=groupinfo.UpdateChannelGeoResp_ErrorCode" json:"err,omitempty"` //返回结果
}

func (x *UpdateChannelGeoResp) Reset() {
	*x = UpdateChannelGeoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelGeoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelGeoResp) ProtoMessage() {}

func (x *UpdateChannelGeoResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelGeoResp.ProtoReflect.Descriptor instead.
func (*UpdateChannelGeoResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{66}
}

func (x *UpdateChannelGeoResp) GetErr() UpdateChannelGeoResp_ErrorCode {
	if x != nil {
		return x.Err
	}
	return UpdateChannelGeoResp_SucessFul
}

type BoolResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *BoolResult) Reset() {
	*x = BoolResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolResult) ProtoMessage() {}

func (x *BoolResult) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolResult.ProtoReflect.Descriptor instead.
func (*BoolResult) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{67}
}

func (x *BoolResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// message for UpdateChannelBannedRights
// request
type UpdateChannelBannedRightsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32 `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	BannedFlag int32 `protobuf:"varint,2,opt,name=Banned_flag,json=BannedFlag,proto3" json:"Banned_flag,omitempty"`
	AccessHash int64 `protobuf:"varint,3,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
}

func (x *UpdateChannelBannedRightsReq) Reset() {
	*x = UpdateChannelBannedRightsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelBannedRightsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelBannedRightsReq) ProtoMessage() {}

func (x *UpdateChannelBannedRightsReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelBannedRightsReq.ProtoReflect.Descriptor instead.
func (*UpdateChannelBannedRightsReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{68}
}

func (x *UpdateChannelBannedRightsReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChannelBannedRightsReq) GetBannedFlag() int32 {
	if x != nil {
		return x.BannedFlag
	}
	return 0
}

func (x *UpdateChannelBannedRightsReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// response
type UpdateChannelBannedRightsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32  `protobuf:"varint,1,opt,name=Error_code,json=ErrorCode,proto3" json:"Error_code,omitempty"`
	ErrorInfo string `protobuf:"bytes,2,opt,name=Error_info,json=ErrorInfo,proto3" json:"Error_info,omitempty"`
}

func (x *UpdateChannelBannedRightsRsp) Reset() {
	*x = UpdateChannelBannedRightsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelBannedRightsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelBannedRightsRsp) ProtoMessage() {}

func (x *UpdateChannelBannedRightsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelBannedRightsRsp.ProtoReflect.Descriptor instead.
func (*UpdateChannelBannedRightsRsp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{69}
}

func (x *UpdateChannelBannedRightsRsp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *UpdateChannelBannedRightsRsp) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

// @ bgn add by qingsong at 2019-11-04 for get channel base info , channel member info.
type GetChnlAndMembInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId int32 `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"` // channel id
	MembId int32 `protobuf:"varint,2,opt,name=Memb_id,json=MembId,proto3" json:"Memb_id,omitempty"` // channel member's user id.
}

func (x *GetChnlAndMembInfoReq) Reset() {
	*x = GetChnlAndMembInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChnlAndMembInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChnlAndMembInfoReq) ProtoMessage() {}

func (x *GetChnlAndMembInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChnlAndMembInfoReq.ProtoReflect.Descriptor instead.
func (*GetChnlAndMembInfoReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{70}
}

func (x *GetChnlAndMembInfoReq) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *GetChnlAndMembInfoReq) GetMembId() int32 {
	if x != nil {
		return x.MembId
	}
	return 0
}

type GetChnlAndMembInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlInfo *ChannelInfoBase    `protobuf:"bytes,1,opt,name=ChnlInfo,proto3" json:"ChnlInfo,omitempty"`
	MembInfo *ChannelParticipant `protobuf:"bytes,2,opt,name=MembInfo,proto3" json:"MembInfo,omitempty"`
}

func (x *GetChnlAndMembInfoRsp) Reset() {
	*x = GetChnlAndMembInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChnlAndMembInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChnlAndMembInfoRsp) ProtoMessage() {}

func (x *GetChnlAndMembInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChnlAndMembInfoRsp.ProtoReflect.Descriptor instead.
func (*GetChnlAndMembInfoRsp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{71}
}

func (x *GetChnlAndMembInfoRsp) GetChnlInfo() *ChannelInfoBase {
	if x != nil {
		return x.ChnlInfo
	}
	return nil
}

func (x *GetChnlAndMembInfoRsp) GetMembInfo() *ChannelParticipant {
	if x != nil {
		return x.MembInfo
	}
	return nil
}

type SetChnlSlowModeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId  int32 `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"` // channel id
	HashId  int64 `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"` // access_hash
	Seconds int32 `protobuf:"varint,3,opt,name=Seconds,proto3" json:"Seconds,omitempty"`             // interval time (s)
}

func (x *SetChnlSlowModeReq) Reset() {
	*x = SetChnlSlowModeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChnlSlowModeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChnlSlowModeReq) ProtoMessage() {}

func (x *SetChnlSlowModeReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChnlSlowModeReq.ProtoReflect.Descriptor instead.
func (*SetChnlSlowModeReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{72}
}

func (x *SetChnlSlowModeReq) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *SetChnlSlowModeReq) GetHashId() int64 {
	if x != nil {
		return x.HashId
	}
	return 0
}

func (x *SetChnlSlowModeReq) GetSeconds() int32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type SetChnlSlowModeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResCode int32  `protobuf:"varint,1,opt,name=Res_code,json=ResCode,proto3" json:"Res_code,omitempty"` // result code
	ResInfo string `protobuf:"bytes,2,opt,name=Res_info,json=ResInfo,proto3" json:"Res_info,omitempty"`  // result information.
}

func (x *SetChnlSlowModeRsp) Reset() {
	*x = SetChnlSlowModeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChnlSlowModeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChnlSlowModeRsp) ProtoMessage() {}

func (x *SetChnlSlowModeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChnlSlowModeRsp.ProtoReflect.Descriptor instead.
func (*SetChnlSlowModeRsp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{73}
}

func (x *SetChnlSlowModeRsp) GetResCode() int32 {
	if x != nil {
		return x.ResCode
	}
	return 0
}

func (x *SetChnlSlowModeRsp) GetResInfo() string {
	if x != nil {
		return x.ResInfo
	}
	return ""
}

// @ bgn add by qingsong at 2019-11-12 for set channel  geo.
type SetChnlGeoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId  int32   `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	GeoLng  float64 `protobuf:"fixed64,2,opt,name=Geo_lng,json=GeoLng,proto3" json:"Geo_lng,omitempty"`
	GeoLat  float64 `protobuf:"fixed64,3,opt,name=Geo_lat,json=GeoLat,proto3" json:"Geo_lat,omitempty"`
	GeoAddr string  `protobuf:"bytes,4,opt,name=GeoAddr,proto3" json:"GeoAddr,omitempty"`
}

func (x *SetChnlGeoReq) Reset() {
	*x = SetChnlGeoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChnlGeoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChnlGeoReq) ProtoMessage() {}

func (x *SetChnlGeoReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChnlGeoReq.ProtoReflect.Descriptor instead.
func (*SetChnlGeoReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{74}
}

func (x *SetChnlGeoReq) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *SetChnlGeoReq) GetGeoLng() float64 {
	if x != nil {
		return x.GeoLng
	}
	return 0
}

func (x *SetChnlGeoReq) GetGeoLat() float64 {
	if x != nil {
		return x.GeoLat
	}
	return 0
}

func (x *SetChnlGeoReq) GetGeoAddr() string {
	if x != nil {
		return x.GeoAddr
	}
	return ""
}

type SetChnlGeoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResCode int32  `protobuf:"varint,1,opt,name=ResCode,proto3" json:"ResCode,omitempty"`
	ResInfo string `protobuf:"bytes,2,opt,name=ResInfo,proto3" json:"ResInfo,omitempty"`
}

func (x *SetChnlGeoRsp) Reset() {
	*x = SetChnlGeoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChnlGeoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChnlGeoRsp) ProtoMessage() {}

func (x *SetChnlGeoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChnlGeoRsp.ProtoReflect.Descriptor instead.
func (*SetChnlGeoRsp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{75}
}

func (x *SetChnlGeoRsp) GetResCode() int32 {
	if x != nil {
		return x.ResCode
	}
	return 0
}

func (x *SetChnlGeoRsp) GetResInfo() string {
	if x != nil {
		return x.ResInfo
	}
	return ""
}

// @ add by qingsong at 2019-11-21 for channel toggle signatures
type ToggleSignaturesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId int32 `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId int64 `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	IsSign bool  `protobuf:"varint,3,opt,name=Is_sign,json=IsSign,proto3" json:"Is_sign,omitempty"`
}

func (x *ToggleSignaturesReq) Reset() {
	*x = ToggleSignaturesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleSignaturesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleSignaturesReq) ProtoMessage() {}

func (x *ToggleSignaturesReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleSignaturesReq.ProtoReflect.Descriptor instead.
func (*ToggleSignaturesReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{76}
}

func (x *ToggleSignaturesReq) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *ToggleSignaturesReq) GetHashId() int64 {
	if x != nil {
		return x.HashId
	}
	return 0
}

func (x *ToggleSignaturesReq) GetIsSign() bool {
	if x != nil {
		return x.IsSign
	}
	return false
}

type ToggleSignaturesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResCode int32  `protobuf:"varint,1,opt,name=Res_code,json=ResCode,proto3" json:"Res_code,omitempty"`
	ResInfo string `protobuf:"bytes,2,opt,name=Res_info,json=ResInfo,proto3" json:"Res_info,omitempty"`
}

func (x *ToggleSignaturesRsp) Reset() {
	*x = ToggleSignaturesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleSignaturesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleSignaturesRsp) ProtoMessage() {}

func (x *ToggleSignaturesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleSignaturesRsp.ProtoReflect.Descriptor instead.
func (*ToggleSignaturesRsp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{77}
}

func (x *ToggleSignaturesRsp) GetResCode() int32 {
	if x != nil {
		return x.ResCode
	}
	return 0
}

func (x *ToggleSignaturesRsp) GetResInfo() string {
	if x != nil {
		return x.ResInfo
	}
	return ""
}

// @ add by qingsong at 2019-12-23 for channel set setParticipantBanMode
type GroupUpdateBanModeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId  int32 `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`    // channel id
	HashId  int64 `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`    // access hash
	FromId  int32 `protobuf:"varint,3,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`    // from user id.
	BanMode bool  `protobuf:"varint,4,opt,name=Ban_mode,json=BanMode,proto3" json:"Ban_mode,omitempty"` // 禁止加好友
}

func (x *GroupUpdateBanModeReq) Reset() {
	*x = GroupUpdateBanModeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupUpdateBanModeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupUpdateBanModeReq) ProtoMessage() {}

func (x *GroupUpdateBanModeReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupUpdateBanModeReq.ProtoReflect.Descriptor instead.
func (*GroupUpdateBanModeReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{78}
}

func (x *GroupUpdateBanModeReq) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *GroupUpdateBanModeReq) GetHashId() int64 {
	if x != nil {
		return x.HashId
	}
	return 0
}

func (x *GroupUpdateBanModeReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *GroupUpdateBanModeReq) GetBanMode() bool {
	if x != nil {
		return x.BanMode
	}
	return false
}

type GroupUpdateBanModeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResCode int32  `protobuf:"varint,1,opt,name=Res_code,json=ResCode,proto3" json:"Res_code,omitempty"`
	ResInfo string `protobuf:"bytes,2,opt,name=Res_info,json=ResInfo,proto3" json:"Res_info,omitempty"`
}

func (x *GroupUpdateBanModeRsp) Reset() {
	*x = GroupUpdateBanModeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupUpdateBanModeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupUpdateBanModeRsp) ProtoMessage() {}

func (x *GroupUpdateBanModeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupUpdateBanModeRsp.ProtoReflect.Descriptor instead.
func (*GroupUpdateBanModeRsp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{79}
}

func (x *GroupUpdateBanModeRsp) GetResCode() int32 {
	if x != nil {
		return x.ResCode
	}
	return 0
}

func (x *GroupUpdateBanModeRsp) GetResInfo() string {
	if x != nil {
		return x.ResInfo
	}
	return ""
}

// @ add by qingsong at 2019-12-23 for get user own channels.
type GroupGetUserOwnChannelsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"` // user id.
}

func (x *GroupGetUserOwnChannelsReq) Reset() {
	*x = GroupGetUserOwnChannelsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupGetUserOwnChannelsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupGetUserOwnChannelsReq) ProtoMessage() {}

func (x *GroupGetUserOwnChannelsReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupGetUserOwnChannelsReq.ProtoReflect.Descriptor instead.
func (*GroupGetUserOwnChannelsReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{80}
}

func (x *GroupGetUserOwnChannelsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ChannelBrief struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId            int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	AccessHash           int64  `protobuf:"varint,2,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
	BroadcastOrMegagroup bool   `protobuf:"varint,3,opt,name=Broadcast_or_megagroup,json=BroadcastOrMegagroup,proto3" json:"Broadcast_or_megagroup,omitempty"`
	Title                string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
}

func (x *ChannelBrief) Reset() {
	*x = ChannelBrief{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelBrief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelBrief) ProtoMessage() {}

func (x *ChannelBrief) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelBrief.ProtoReflect.Descriptor instead.
func (*ChannelBrief) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{81}
}

func (x *ChannelBrief) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelBrief) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ChannelBrief) GetBroadcastOrMegagroup() bool {
	if x != nil {
		return x.BroadcastOrMegagroup
	}
	return false
}

func (x *ChannelBrief) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type GroupGetUserOwnChannelsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chnls []*ChannelBrief `protobuf:"bytes,1,rep,name=Chnls,proto3" json:"Chnls,omitempty"`
}

func (x *GroupGetUserOwnChannelsRsp) Reset() {
	*x = GroupGetUserOwnChannelsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupGetUserOwnChannelsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupGetUserOwnChannelsRsp) ProtoMessage() {}

func (x *GroupGetUserOwnChannelsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupGetUserOwnChannelsRsp.ProtoReflect.Descriptor instead.
func (*GroupGetUserOwnChannelsRsp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{82}
}

func (x *GroupGetUserOwnChannelsRsp) GetChnls() []*ChannelBrief {
	if x != nil {
		return x.Chnls
	}
	return nil
}

// request
type UpdateChannelRestrictedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId         int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	Restricted        bool   `protobuf:"varint,2,opt,name=restricted,proto3" json:"restricted,omitempty"`
	AccessHash        int64  `protobuf:"varint,3,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
	RestrictionReason string `protobuf:"bytes,4,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
}

func (x *UpdateChannelRestrictedReq) Reset() {
	*x = UpdateChannelRestrictedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelRestrictedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelRestrictedReq) ProtoMessage() {}

func (x *UpdateChannelRestrictedReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelRestrictedReq.ProtoReflect.Descriptor instead.
func (*UpdateChannelRestrictedReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{83}
}

func (x *UpdateChannelRestrictedReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChannelRestrictedReq) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *UpdateChannelRestrictedReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *UpdateChannelRestrictedReq) GetRestrictionReason() string {
	if x != nil {
		return x.RestrictionReason
	}
	return ""
}

// response
type UpdateChannelRestrictedRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32  `protobuf:"varint,1,opt,name=Error_code,json=ErrorCode,proto3" json:"Error_code,omitempty"`
	ErrorInfo string `protobuf:"bytes,2,opt,name=Error_info,json=ErrorInfo,proto3" json:"Error_info,omitempty"`
}

func (x *UpdateChannelRestrictedRsp) Reset() {
	*x = UpdateChannelRestrictedRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelRestrictedRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelRestrictedRsp) ProtoMessage() {}

func (x *UpdateChannelRestrictedRsp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelRestrictedRsp.ProtoReflect.Descriptor instead.
func (*UpdateChannelRestrictedRsp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{84}
}

func (x *UpdateChannelRestrictedRsp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *UpdateChannelRestrictedRsp) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

// request
type DelChannelKickedLeftReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	FromId    int32 `protobuf:"varint,3,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
}

func (x *DelChannelKickedLeftReq) Reset() {
	*x = DelChannelKickedLeftReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChannelKickedLeftReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChannelKickedLeftReq) ProtoMessage() {}

func (x *DelChannelKickedLeftReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChannelKickedLeftReq.ProtoReflect.Descriptor instead.
func (*DelChannelKickedLeftReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{85}
}

func (x *DelChannelKickedLeftReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *DelChannelKickedLeftReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelChannelKickedLeftReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

// response
type DelChannelKickedLeftRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ChatResultCode `protobuf:"varint,1,opt,name=Error_code,json=ErrorCode,proto3,enum=groupinfo.ChatResultCode" json:"Error_code,omitempty"`
	ErrorInfo string         `protobuf:"bytes,2,opt,name=Error_info,json=ErrorInfo,proto3" json:"Error_info,omitempty"`
}

func (x *DelChannelKickedLeftRsp) Reset() {
	*x = DelChannelKickedLeftRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChannelKickedLeftRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChannelKickedLeftRsp) ProtoMessage() {}

func (x *DelChannelKickedLeftRsp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChannelKickedLeftRsp.ProtoReflect.Descriptor instead.
func (*DelChannelKickedLeftRsp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{86}
}

func (x *DelChannelKickedLeftRsp) GetErrorCode() ChatResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return ChatResultCode_Chat_RPC_OK
}

func (x *DelChannelKickedLeftRsp) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

// rpc GMsGetHotGroups (GetHotGroupsReq) returns (GetHotGroupsRsp) {}
type GetHotGroupIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level int32         `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"` // user vip level.
	Limit int32         `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"` // reply limit.
	Hash  uint32        `protobuf:"varint,3,opt,name=Hash,proto3" json:"Hash,omitempty"`   // hash version code
	Debug *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *GetHotGroupIDsReq) Reset() {
	*x = GetHotGroupIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHotGroupIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotGroupIDsReq) ProtoMessage() {}

func (x *GetHotGroupIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotGroupIDsReq.ProtoReflect.Descriptor instead.
func (*GetHotGroupIDsReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{87}
}

func (x *GetHotGroupIDsReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GetHotGroupIDsReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetHotGroupIDsReq) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetHotGroupIDsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type HotGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   int32  `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	GroupType string `protobuf:"bytes,2,opt,name=GroupType,proto3" json:"GroupType,omitempty"`
}

func (x *HotGroup) Reset() {
	*x = HotGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotGroup) ProtoMessage() {}

func (x *HotGroup) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotGroup.ProtoReflect.Descriptor instead.
func (*HotGroup) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{88}
}

func (x *HotGroup) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *HotGroup) GetGroupType() string {
	if x != nil {
		return x.GroupType
	}
	return ""
}

type GetHotGroupIDsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errno  int32         `protobuf:"varint,1,opt,name=Errno,proto3" json:"Errno,omitempty"`
	HotArr []*HotGroup   `protobuf:"bytes,2,rep,name=HotArr,proto3" json:"HotArr,omitempty"`
	Hash   uint32        `protobuf:"varint,3,opt,name=Hash,proto3" json:"Hash,omitempty"` // hash version code
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *GetHotGroupIDsRsp) Reset() {
	*x = GetHotGroupIDsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHotGroupIDsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotGroupIDsRsp) ProtoMessage() {}

func (x *GetHotGroupIDsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotGroupIDsRsp.ProtoReflect.Descriptor instead.
func (*GetHotGroupIDsRsp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{89}
}

func (x *GetHotGroupIDsRsp) GetErrno() int32 {
	if x != nil {
		return x.Errno
	}
	return 0
}

func (x *GetHotGroupIDsRsp) GetHotArr() []*HotGroup {
	if x != nil {
		return x.HotArr
	}
	return nil
}

func (x *GetHotGroupIDsRsp) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetHotGroupIDsRsp) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// rpc GMsGetHotGroupLv (GetHotGroupLvReq) returns (GetHotGroupLvRsp) {}
type GetHotGroupLvReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group int32         `protobuf:"varint,1,opt,name=Group,proto3" json:"Group,omitempty"` // group id
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *GetHotGroupLvReq) Reset() {
	*x = GetHotGroupLvReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHotGroupLvReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotGroupLvReq) ProtoMessage() {}

func (x *GetHotGroupLvReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotGroupLvReq.ProtoReflect.Descriptor instead.
func (*GetHotGroupLvReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{90}
}

func (x *GetHotGroupLvReq) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *GetHotGroupLvReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetHotGroupLvRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errno int32         `protobuf:"varint,1,opt,name=Errno,proto3" json:"Errno,omitempty"`
	Level int32         `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"` // when level is 0, the group not hot group.
	Debug *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *GetHotGroupLvRsp) Reset() {
	*x = GetHotGroupLvRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHotGroupLvRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotGroupLvRsp) ProtoMessage() {}

func (x *GetHotGroupLvRsp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotGroupLvRsp.ProtoReflect.Descriptor instead.
func (*GetHotGroupLvRsp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{91}
}

func (x *GetHotGroupLvRsp) GetErrno() int32 {
	if x != nil {
		return x.Errno
	}
	return 0
}

func (x *GetHotGroupLvRsp) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GetHotGroupLvRsp) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// rpc GMsSetDiscussionGroup(GMsSetDiscussionGroupReq) returns (GMsSetDiscussionGroupRsp) {}
type GMsSetDiscussionGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcast int32         `protobuf:"varint,1,opt,name=Broadcast,proto3" json:"Broadcast,omitempty"`
	Megagroup int32         `protobuf:"varint,2,opt,name=Megagroup,proto3" json:"Megagroup,omitempty"`
	Operation bool          `protobuf:"varint,3,opt,name=Operation,proto3" json:"Operation,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *GMsSetDiscussionGroupReq) Reset() {
	*x = GMsSetDiscussionGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GMsSetDiscussionGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GMsSetDiscussionGroupReq) ProtoMessage() {}

func (x *GMsSetDiscussionGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GMsSetDiscussionGroupReq.ProtoReflect.Descriptor instead.
func (*GMsSetDiscussionGroupReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{92}
}

func (x *GMsSetDiscussionGroupReq) GetBroadcast() int32 {
	if x != nil {
		return x.Broadcast
	}
	return 0
}

func (x *GMsSetDiscussionGroupReq) GetMegagroup() int32 {
	if x != nil {
		return x.Megagroup
	}
	return 0
}

func (x *GMsSetDiscussionGroupReq) GetOperation() bool {
	if x != nil {
		return x.Operation
	}
	return false
}

func (x *GMsSetDiscussionGroupReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GMsSetDiscussionGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GMsSetDiscussionGroupRsp) Reset() {
	*x = GMsSetDiscussionGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GMsSetDiscussionGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GMsSetDiscussionGroupRsp) ProtoMessage() {}

func (x *GMsSetDiscussionGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GMsSetDiscussionGroupRsp.ProtoReflect.Descriptor instead.
func (*GMsSetDiscussionGroupRsp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{93}
}

var File_channelservice_proto protoreflect.FileDescriptor

var file_channelservice_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x1a, 0x13, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x04, 0x0a, 0x12, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x61, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x63, 0x61, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x15, 0x0a,
	0x06, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x42, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x07, 0x61, 0x64, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x52, 0x08, 0x62, 0x61, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x6a, 0x0a, 0x15,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x41, 0x72, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x22, 0x47, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x22, 0xf5, 0x02, 0x0a, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61,
	0x64, 0x64, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x9c, 0x04, 0x0a, 0x0c, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67,
	0x69, 0x66, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x53, 0x65,
	0x6e, 0x64, 0x47, 0x69, 0x66, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x69, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x53,
	0x65, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x22, 0xfb, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x65, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x47, 0x65, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xcb, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x71, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xe5, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x04,
	0x44, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22,
	0xc8, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x4b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4b,
	0x69, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c,
	0x6f, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c,
	0x6f, 0x67, 0x22, 0xe8, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12,
	0x39, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0b, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c,
	0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xc3, 0x01,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x41, 0x64, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x64, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x70, 0x72, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x5f, 0x70, 0x72, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xf7, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x61, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x61,
	0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67,
	0x22, 0xad, 0x01, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x6d, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x43, 0x6d, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67,
	0x22, 0x5d, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x01, 0x62, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xc8, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x46, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x58, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c,
	0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x8a, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a,
	0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67,
	0x22, 0x8b, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x76,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x74, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x71, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x42,
	0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x66, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x21, 0x0a, 0x04,
	0x44, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22,
	0x93, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xcc, 0x06, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x30,
	0x0a, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x15, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0b,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x62,
	0x61, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6f,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x43, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x43, 0x61, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x71, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x66, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x93, 0x02, 0x0a,
	0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x56, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x9c, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44,
	0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x59,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44,
	0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x4e,
	0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5a,
	0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x73,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x6a, 0x0a, 0x17, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5a, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c,
	0x6f, 0x67, 0x22, 0x92, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x72,
	0x79, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x69, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x69, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x69, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c,
	0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x87, 0x01,
	0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x54, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xbc, 0x01,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x64, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xb2, 0x01, 0x0a,
	0x1b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x21,
	0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f,
	0x67, 0x22, 0xb1, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x75, 0x70, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44,
	0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x69,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x6f, 0x74, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5e, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x72, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x72, 0x0a,
	0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f,
	0x67, 0x22, 0x2e, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x54, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x22, 0xb6, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x89, 0x01,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47,
	0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x22, 0x34, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x46, 0x75, 0x6c, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x42, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x22, 0x24, 0x0a, 0x0a, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x7f, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x5c, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x73, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x49,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x68, 0x6e, 0x6c, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x43, 0x68, 0x6e, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x6e, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x6e, 0x6c, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x08, 0x43, 0x68, 0x6e, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x08, 0x43, 0x68, 0x6e, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x4d,
	0x65, 0x6d, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x4d, 0x65,
	0x6d, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x60, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x68, 0x6e,
	0x6c, 0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x43, 0x68, 0x6e, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43,
	0x68, 0x6e, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x4a, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43,
	0x68, 0x6e, 0x6c, 0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x19,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x74, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x43, 0x68, 0x6e, 0x6c, 0x47,
	0x65, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x43, 0x68, 0x6e, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x6e, 0x6c, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x47, 0x65, 0x6f, 0x5f, 0x6c, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x47, 0x65, 0x6f, 0x4c, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x5f, 0x6c,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x47, 0x65, 0x6f, 0x4c, 0x61, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x47, 0x65, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x22, 0x43, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x43, 0x68, 0x6e, 0x6c, 0x47, 0x65, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x60, 0x0a, 0x13, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x43, 0x68, 0x6e, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x6e, 0x6c, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x49, 0x73, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x53, 0x69, 0x67,
	0x6e, 0x22, 0x4b, 0x0a, 0x13, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x65, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7d,
	0x0a, 0x15, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x43, 0x68, 0x6e, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x6e, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x46, 0x72, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x42, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a,
	0x15, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x35, 0x0a, 0x1a,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x55, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x72, 0x69, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f,
	0x72, 0x4d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x4b, 0x0a, 0x1a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x77, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x73, 0x70, 0x12, 0x2d,
	0x0a, 0x05, 0x43, 0x68, 0x6e, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x05, 0x43, 0x68, 0x6e, 0x6c, 0x73, 0x22, 0xab, 0x01,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x12,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6a, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x46, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x73, 0x70, 0x12, 0x38,
	0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x78, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x42, 0x0a, 0x08, 0x48, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6e,
	0x6f, 0x12, 0x2b, 0x0a, 0x06, 0x48, 0x6f, 0x74, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x6f,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x48, 0x6f, 0x74, 0x41, 0x72, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x76, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x76, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6e, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x99, 0x01, 0x0a, 0x18,
	0x47, 0x4d, 0x73, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x67, 0x61, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x65, 0x67, 0x61, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x4d, 0x73, 0x53, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x73, 0x70, 0x32, 0xd0, 0x23, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x6f,
	0x12, 0x1e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1d,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62,
	0x6f, 0x75, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x45,
	0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x11, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x61, 0x6e, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x61, 0x6e, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x1b, 0x45, 0x64, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x70, 0x72, 0x65,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x48, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x70, 0x72, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x44,
	0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x4f, 0x6e, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1b,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x42, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x75,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x0c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x1f, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x24,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x26, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x70, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x72,
	0x79, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x69, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x51, 0x75,
	0x69, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x26,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x6f, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x6f, 0x74, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x6f, 0x74, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x6f, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x27,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x6e, 0x6c, 0x41, 0x6e, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x6e, 0x6c, 0x41, 0x6e, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x6e, 0x6c, 0x41, 0x6e,
	0x64, 0x4d, 0x65, 0x6d, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x6e, 0x6c, 0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65,
	0x74, 0x43, 0x68, 0x6e, 0x6c, 0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x68, 0x6e, 0x6c, 0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x43, 0x68, 0x6e, 0x6c, 0x47, 0x65, 0x6f, 0x12,
	0x18, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x68, 0x6e, 0x6c, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x6e, 0x6c, 0x47, 0x65, 0x6f,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x25, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x77, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x69, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x25, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x22, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79,
	0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x11, 0x47, 0x4d, 0x73, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x4e, 0x0a, 0x10, 0x47, 0x4d, 0x73, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x76, 0x12, 0x1b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x76, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x76, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x63, 0x0a, 0x15, 0x47, 0x4d, 0x73, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x4d, 0x73, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x4d, 0x73, 0x53,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_channelservice_proto_rawDescOnce sync.Once
	file_channelservice_proto_rawDescData = file_channelservice_proto_rawDesc
)

func file_channelservice_proto_rawDescGZIP() []byte {
	file_channelservice_proto_rawDescOnce.Do(func() {
		file_channelservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_channelservice_proto_rawDescData)
	})
	return file_channelservice_proto_rawDescData
}

var file_channelservice_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_channelservice_proto_msgTypes = make([]protoimpl.MessageInfo, 94)
var file_channelservice_proto_goTypes = []interface{}{
	(UpdateChannelGeoResp_ErrorCode)(0),    // 0: groupinfo.UpdateChannelGeoResp.ErrorCode
	(*ChannelParticipant)(nil),             // 1: groupinfo.ChannelParticipant
	(*ChannelParticipantArr)(nil),          // 2: groupinfo.ChannelParticipantArr
	(*InvitedUsers)(nil),                   // 3: groupinfo.InvitedUsers
	(*AdminRights)(nil),                    // 4: groupinfo.AdminRights
	(*BannerRights)(nil),                   // 5: groupinfo.BannerRights
	(*CreateChannelReq)(nil),               // 6: groupinfo.CreateChannelReq
	(*ChannelupdatesResp)(nil),             // 7: groupinfo.ChannelupdatesResp
	(*GetChannelUpdatesReq)(nil),           // 8: groupinfo.GetChannelUpdatesReq
	(*AddChannelUserReq)(nil),              // 9: groupinfo.AddChannelUserReq
	(*DelChannelUserReq)(nil),              // 10: groupinfo.DelChannelUserReq
	(*UpdateChanAboutReq)(nil),             // 11: groupinfo.UpdateChanAboutReq
	(*UpdateChanTitleReq)(nil),             // 12: groupinfo.UpdateChanTitleReq
	(*UpdateChanPhotoReq)(nil),             // 13: groupinfo.UpdateChanPhotoReq
	(*UpdateChanAdminRightsReq)(nil),       // 14: groupinfo.UpdateChanAdminRightsReq
	(*UpdateChanAdminRightsResp)(nil),      // 15: groupinfo.UpdateChanAdminRightsResp
	(*UpdateChanHiddenprehistoryReq)(nil),  // 16: groupinfo.UpdateChanHiddenprehistoryReq
	(*UpdateChanBanRightsReq)(nil),         // 17: groupinfo.UpdateChanBanRightsReq
	(*DismissChannelReq)(nil),              // 18: groupinfo.DismissChannelReq
	(*DismissChannelResp)(nil),             // 19: groupinfo.DismissChannelResp
	(*ParticipantLimitReq)(nil),            // 20: groupinfo.ParticipantLimitReq
	(*ParticipantLimitResp)(nil),           // 21: groupinfo.ParticipantLimitResp
	(*GetChannelOnePartReq)(nil),           // 22: groupinfo.GetChannelOnePartReq
	(*GetChannelOnePartResp)(nil),          // 23: groupinfo.GetChannelOnePartResp
	(*GetChannelUsersIdReq)(nil),           // 24: groupinfo.GetChannelUsersIdReq
	(*GetChannelUsersIdResp)(nil),          // 25: groupinfo.GetChannelUsersIdResp
	(*GetChannelBaseInfoReq)(nil),          // 26: groupinfo.GetChannelBaseInfoReq
	(*GetChannelBaseInfoResp)(nil),         // 27: groupinfo.GetChannelBaseInfoResp
	(*GetChannelInfoReq)(nil),              // 28: groupinfo.GetChannelInfoReq
	(*GetChannelInfoResp)(nil),             // 29: groupinfo.GetChannelInfoResp
	(*BatchChannelBaseInfoReq)(nil),        // 30: groupinfo.BatchChannelBaseInfoReq
	(*BatchChannelBaseInfoResp)(nil),       // 31: groupinfo.BatchChannelBaseInfoResp
	(*GetChanByLinkReq)(nil),               // 32: groupinfo.GetChanByLinkReq
	(*GetChanInfoByLinkOrUserNameReq)(nil), // 33: groupinfo.GetChanInfoByLinkOrUserNameReq
	(*GetFullChannelInfoReq)(nil),          // 34: groupinfo.GetFullChannelInfoReq
	(*GetFullChannelInfoResp)(nil),         // 35: groupinfo.GetFullChannelInfoResp
	(*ToggleInviteReq)(nil),                // 36: groupinfo.ToggleInviteReq
	(*CreateChannelLinkReq)(nil),           // 37: groupinfo.CreateChannelLinkReq
	(*CreateChannelLinkResp)(nil),          // 38: groupinfo.CreateChannelLinkResp
	(*CheckChannelInviteLinkReq)(nil),      // 39: groupinfo.CheckChannelInviteLinkReq
	(*CheckChannelInviteLinkResp)(nil),     // 40: groupinfo.CheckChannelInviteLinkResp
	(*UpdateChannelUserNameReq)(nil),       // 41: groupinfo.UpdateChannelUserNameReq
	(*UpdateChannelUserNameResp)(nil),      // 42: groupinfo.UpdateChannelUserNameResp
	(*UpdateChannelPinnedMsgIdReq)(nil),    // 43: groupinfo.UpdateChannelPinnedMsgIdReq
	(*UpdateChannelPinnedMsgIdResp)(nil),   // 44: groupinfo.UpdateChannelPinnedMsgIdResp
	(*CheckUserNameReq)(nil),               // 45: groupinfo.CheckUserNameReq
	(*CheckUserNameResp)(nil),              // 46: groupinfo.CheckUserNameResp
	(*CheckChannelIsEncryReq)(nil),         // 47: groupinfo.CheckChannelIsEncryReq
	(*CheckChannelIsEncryResp)(nil),        // 48: groupinfo.CheckChannelIsEncryResp
	(*GetAllChannelInfoByUserIdReq)(nil),   // 49: groupinfo.GetAllChannelInfoByUserIdReq
	(*GetAllChannelInfoByUserIdResp)(nil),  // 50: groupinfo.GetAllChannelInfoByUserIdResp
	(*EveryoneQuietReq)(nil),               // 51: groupinfo.EveryoneQuietReq
	(*EditPrivateChatReq)(nil),             // 52: groupinfo.EditPrivateChatReq
	(*UpdateChannelCommonResp)(nil),        // 53: groupinfo.UpdateChannelCommonResp
	(*SetChannelCreatorReq)(nil),           // 54: groupinfo.SetChannelCreatorReq
	(*ResetUserAllCreateGroupsReq)(nil),    // 55: groupinfo.ResetUserAllCreateGroupsReq
	(*ResetUserAllCreateGroupsResp)(nil),   // 56: groupinfo.ResetUserAllCreateGroupsResp
	(*GetChannelBotIdsReq)(nil),            // 57: groupinfo.GetChannelBotIdsReq
	(*GetChannelBotIdsResp)(nil),           // 58: groupinfo.GetChannelBotIdsResp
	(*GetChannelActiveUserIdsReq)(nil),     // 59: groupinfo.GetChannelActiveUserIdsReq
	(*GetChannelActiveUserIdsResp)(nil),    // 60: groupinfo.GetChannelActiveUserIdsResp
	(*CheckUserInChannelReq)(nil),          // 61: groupinfo.CheckUserInChannelReq
	(*CheckUserInChannelResp)(nil),         // 62: groupinfo.CheckUserInChannelResp
	(*UpdateChannelVerifyReq)(nil),         // 63: groupinfo.UpdateChannelVerifyReq
	(*UpdateChannelVerifyResp)(nil),        // 64: groupinfo.UpdateChannelVerifyResp
	(*ChannelLocation)(nil),                // 65: groupinfo.channelLocation
	(*UpdateChannelGeoReq)(nil),            // 66: groupinfo.UpdateChannelGeoReq
	(*UpdateChannelGeoResp)(nil),           // 67: groupinfo.UpdateChannelGeoResp
	(*BoolResult)(nil),                     // 68: groupinfo.BoolResult
	(*UpdateChannelBannedRightsReq)(nil),   // 69: groupinfo.UpdateChannelBannedRightsReq
	(*UpdateChannelBannedRightsRsp)(nil),   // 70: groupinfo.UpdateChannelBannedRightsRsp
	(*GetChnlAndMembInfoReq)(nil),          // 71: groupinfo.GetChnlAndMembInfoReq
	(*GetChnlAndMembInfoRsp)(nil),          // 72: groupinfo.GetChnlAndMembInfoRsp
	(*SetChnlSlowModeReq)(nil),             // 73: groupinfo.SetChnlSlowModeReq
	(*SetChnlSlowModeRsp)(nil),             // 74: groupinfo.SetChnlSlowModeRsp
	(*SetChnlGeoReq)(nil),                  // 75: groupinfo.SetChnlGeoReq
	(*SetChnlGeoRsp)(nil),                  // 76: groupinfo.SetChnlGeoRsp
	(*ToggleSignaturesReq)(nil),            // 77: groupinfo.ToggleSignaturesReq
	(*ToggleSignaturesRsp)(nil),            // 78: groupinfo.ToggleSignaturesRsp
	(*GroupUpdateBanModeReq)(nil),          // 79: groupinfo.GroupUpdateBanModeReq
	(*GroupUpdateBanModeRsp)(nil),          // 80: groupinfo.GroupUpdateBanModeRsp
	(*GroupGetUserOwnChannelsReq)(nil),     // 81: groupinfo.GroupGetUserOwnChannelsReq
	(*ChannelBrief)(nil),                   // 82: groupinfo.ChannelBrief
	(*GroupGetUserOwnChannelsRsp)(nil),     // 83: groupinfo.GroupGetUserOwnChannelsRsp
	(*UpdateChannelRestrictedReq)(nil),     // 84: groupinfo.UpdateChannelRestrictedReq
	(*UpdateChannelRestrictedRsp)(nil),     // 85: groupinfo.UpdateChannelRestrictedRsp
	(*DelChannelKickedLeftReq)(nil),        // 86: groupinfo.DelChannelKickedLeftReq
	(*DelChannelKickedLeftRsp)(nil),        // 87: groupinfo.DelChannelKickedLeftRsp
	(*GetHotGroupIDsReq)(nil),              // 88: groupinfo.GetHotGroupIDsReq
	(*HotGroup)(nil),                       // 89: groupinfo.HotGroup
	(*GetHotGroupIDsRsp)(nil),              // 90: groupinfo.GetHotGroupIDsRsp
	(*GetHotGroupLvReq)(nil),               // 91: groupinfo.GetHotGroupLvReq
	(*GetHotGroupLvRsp)(nil),               // 92: groupinfo.GetHotGroupLvRsp
	(*GMsSetDiscussionGroupReq)(nil),       // 93: groupinfo.GMsSetDiscussionGroupReq
	(*GMsSetDiscussionGroupRsp)(nil),       // 94: groupinfo.GMsSetDiscussionGroupRsp
	(ChatResultCode)(0),                    // 95: groupinfo.ChatResultCode
	(*pbcomm.Debug)(nil),                   // 96: pbcomm.Debug
	(*ChannelInfoBase)(nil),                // 97: groupinfo.ChannelInfoBase
	(*GetChatInfoResp)(nil),                // 98: groupinfo.GetChatInfoResp
}
var file_channelservice_proto_depIdxs = []int32{
	4,   // 0: groupinfo.ChannelParticipant.ad_right:type_name -> groupinfo.AdminRights
	5,   // 1: groupinfo.ChannelParticipant.ban_right:type_name -> groupinfo.BannerRights
	95,  // 2: groupinfo.ChannelParticipant.resultcode:type_name -> groupinfo.ChatResultCode
	1,   // 3: groupinfo.ChannelParticipantArr.part:type_name -> groupinfo.ChannelParticipant
	65,  // 4: groupinfo.CreateChannelReq.location:type_name -> groupinfo.channelLocation
	96,  // 5: groupinfo.CreateChannelReq.Dlog:type_name -> pbcomm.Debug
	97,  // 6: groupinfo.ChannelupdatesResp.channel:type_name -> groupinfo.ChannelInfoBase
	2,   // 7: groupinfo.ChannelupdatesResp.participants:type_name -> groupinfo.ChannelParticipantArr
	95,  // 8: groupinfo.ChannelupdatesResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 9: groupinfo.GetChannelUpdatesReq.Dlog:type_name -> pbcomm.Debug
	3,   // 10: groupinfo.AddChannelUserReq.users:type_name -> groupinfo.InvitedUsers
	96,  // 11: groupinfo.AddChannelUserReq.Dlog:type_name -> pbcomm.Debug
	96,  // 12: groupinfo.DelChannelUserReq.Dlog:type_name -> pbcomm.Debug
	96,  // 13: groupinfo.UpdateChanAboutReq.Dlog:type_name -> pbcomm.Debug
	96,  // 14: groupinfo.UpdateChanTitleReq.Dlog:type_name -> pbcomm.Debug
	96,  // 15: groupinfo.UpdateChanPhotoReq.Dlog:type_name -> pbcomm.Debug
	4,   // 16: groupinfo.UpdateChanAdminRightsReq.admin_rights:type_name -> groupinfo.AdminRights
	96,  // 17: groupinfo.UpdateChanAdminRightsReq.Dlog:type_name -> pbcomm.Debug
	7,   // 18: groupinfo.UpdateChanAdminRightsResp.updates:type_name -> groupinfo.ChannelupdatesResp
	95,  // 19: groupinfo.UpdateChanAdminRightsResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 20: groupinfo.UpdateChanHiddenprehistoryReq.Dlog:type_name -> pbcomm.Debug
	5,   // 21: groupinfo.UpdateChanBanRightsReq.ban_rights:type_name -> groupinfo.BannerRights
	96,  // 22: groupinfo.UpdateChanBanRightsReq.Dlog:type_name -> pbcomm.Debug
	96,  // 23: groupinfo.DismissChannelReq.Dlog:type_name -> pbcomm.Debug
	95,  // 24: groupinfo.DismissChannelResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 25: groupinfo.ParticipantLimitReq.Dlog:type_name -> pbcomm.Debug
	1,   // 26: groupinfo.ParticipantLimitResp.part:type_name -> groupinfo.ChannelParticipant
	95,  // 27: groupinfo.ParticipantLimitResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 28: groupinfo.GetChannelOnePartReq.Dlog:type_name -> pbcomm.Debug
	1,   // 29: groupinfo.GetChannelOnePartResp.one_participant:type_name -> groupinfo.ChannelParticipant
	95,  // 30: groupinfo.GetChannelOnePartResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 31: groupinfo.GetChannelUsersIdReq.Dlog:type_name -> pbcomm.Debug
	95,  // 32: groupinfo.GetChannelUsersIdResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 33: groupinfo.GetChannelBaseInfoReq.Dlog:type_name -> pbcomm.Debug
	97,  // 34: groupinfo.GetChannelBaseInfoResp.baseInfo:type_name -> groupinfo.ChannelInfoBase
	95,  // 35: groupinfo.GetChannelBaseInfoResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 36: groupinfo.GetChannelInfoReq.Dlog:type_name -> pbcomm.Debug
	97,  // 37: groupinfo.GetChannelInfoResp.baseInfo:type_name -> groupinfo.ChannelInfoBase
	95,  // 38: groupinfo.GetChannelInfoResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 39: groupinfo.BatchChannelBaseInfoReq.Dlog:type_name -> pbcomm.Debug
	97,  // 40: groupinfo.BatchChannelBaseInfoResp.channel:type_name -> groupinfo.ChannelInfoBase
	95,  // 41: groupinfo.BatchChannelBaseInfoResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 42: groupinfo.GetChanByLinkReq.Dlog:type_name -> pbcomm.Debug
	96,  // 43: groupinfo.GetChanInfoByLinkOrUserNameReq.Dlog:type_name -> pbcomm.Debug
	96,  // 44: groupinfo.GetFullChannelInfoReq.Dlog:type_name -> pbcomm.Debug
	97,  // 45: groupinfo.GetFullChannelInfoResp.channelinfo:type_name -> groupinfo.ChannelInfoBase
	4,   // 46: groupinfo.GetFullChannelInfoResp.admin_rights:type_name -> groupinfo.AdminRights
	5,   // 47: groupinfo.GetFullChannelInfoResp.ban_rights:type_name -> groupinfo.BannerRights
	95,  // 48: groupinfo.GetFullChannelInfoResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 49: groupinfo.ToggleInviteReq.Dlog:type_name -> pbcomm.Debug
	96,  // 50: groupinfo.CreateChannelLinkReq.Dlog:type_name -> pbcomm.Debug
	95,  // 51: groupinfo.CreateChannelLinkResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 52: groupinfo.CheckChannelInviteLinkReq.Dlog:type_name -> pbcomm.Debug
	97,  // 53: groupinfo.CheckChannelInviteLinkResp.chanInfo:type_name -> groupinfo.ChannelInfoBase
	98,  // 54: groupinfo.CheckChannelInviteLinkResp.chatinfo:type_name -> groupinfo.GetChatInfoResp
	95,  // 55: groupinfo.CheckChannelInviteLinkResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 56: groupinfo.UpdateChannelUserNameReq.Dlog:type_name -> pbcomm.Debug
	95,  // 57: groupinfo.UpdateChannelUserNameResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 58: groupinfo.UpdateChannelPinnedMsgIdReq.Dlog:type_name -> pbcomm.Debug
	95,  // 59: groupinfo.UpdateChannelPinnedMsgIdResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 60: groupinfo.CheckUserNameReq.Dlog:type_name -> pbcomm.Debug
	95,  // 61: groupinfo.CheckUserNameResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 62: groupinfo.CheckChannelIsEncryReq.Dlog:type_name -> pbcomm.Debug
	95,  // 63: groupinfo.CheckChannelIsEncryResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 64: groupinfo.GetAllChannelInfoByUserIdReq.Dlog:type_name -> pbcomm.Debug
	97,  // 65: groupinfo.GetAllChannelInfoByUserIdResp.channels:type_name -> groupinfo.ChannelInfoBase
	95,  // 66: groupinfo.GetAllChannelInfoByUserIdResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 67: groupinfo.EveryoneQuietReq.Dlog:type_name -> pbcomm.Debug
	96,  // 68: groupinfo.EditPrivateChatReq.Dlog:type_name -> pbcomm.Debug
	95,  // 69: groupinfo.UpdateChannelCommonResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 70: groupinfo.SetChannelCreatorReq.Dlog:type_name -> pbcomm.Debug
	96,  // 71: groupinfo.ResetUserAllCreateGroupsReq.Dlog:type_name -> pbcomm.Debug
	95,  // 72: groupinfo.ResetUserAllCreateGroupsResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 73: groupinfo.GetChannelBotIdsReq.Dlog:type_name -> pbcomm.Debug
	95,  // 74: groupinfo.GetChannelBotIdsResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 75: groupinfo.GetChannelActiveUserIdsReq.Dlog:type_name -> pbcomm.Debug
	95,  // 76: groupinfo.GetChannelActiveUserIdsResp.resultcode:type_name -> groupinfo.ChatResultCode
	96,  // 77: groupinfo.CheckUserInChannelReq.Dlog:type_name -> pbcomm.Debug
	96,  // 78: groupinfo.UpdateChannelVerifyReq.debug:type_name -> pbcomm.Debug
	95,  // 79: groupinfo.UpdateChannelVerifyResp.resultcode:type_name -> groupinfo.ChatResultCode
	65,  // 80: groupinfo.UpdateChannelGeoReq.location:type_name -> groupinfo.channelLocation
	0,   // 81: groupinfo.UpdateChannelGeoResp.err:type_name -> groupinfo.UpdateChannelGeoResp.ErrorCode
	97,  // 82: groupinfo.GetChnlAndMembInfoRsp.ChnlInfo:type_name -> groupinfo.ChannelInfoBase
	1,   // 83: groupinfo.GetChnlAndMembInfoRsp.MembInfo:type_name -> groupinfo.ChannelParticipant
	82,  // 84: groupinfo.GroupGetUserOwnChannelsRsp.Chnls:type_name -> groupinfo.ChannelBrief
	95,  // 85: groupinfo.DelChannelKickedLeftRsp.Error_code:type_name -> groupinfo.ChatResultCode
	96,  // 86: groupinfo.GetHotGroupIDsReq.Debug:type_name -> pbcomm.Debug
	89,  // 87: groupinfo.GetHotGroupIDsRsp.HotArr:type_name -> groupinfo.HotGroup
	96,  // 88: groupinfo.GetHotGroupIDsRsp.Debug:type_name -> pbcomm.Debug
	96,  // 89: groupinfo.GetHotGroupLvReq.Debug:type_name -> pbcomm.Debug
	96,  // 90: groupinfo.GetHotGroupLvRsp.Debug:type_name -> pbcomm.Debug
	96,  // 91: groupinfo.GMsSetDiscussionGroupReq.Debug:type_name -> pbcomm.Debug
	66,  // 92: groupinfo.ChannelServerService.UpdateChannelGeo:input_type -> groupinfo.UpdateChannelGeoReq
	6,   // 93: groupinfo.ChannelServerService.CreateChannel:input_type -> groupinfo.CreateChannelReq
	8,   // 94: groupinfo.ChannelServerService.GetChannelUpdatesInfo:input_type -> groupinfo.GetChannelUpdatesReq
	9,   // 95: groupinfo.ChannelServerService.AddChannelUser:input_type -> groupinfo.AddChannelUserReq
	10,  // 96: groupinfo.ChannelServerService.DelChannelUser:input_type -> groupinfo.DelChannelUserReq
	11,  // 97: groupinfo.ChannelServerService.EditChannelAbout:input_type -> groupinfo.UpdateChanAboutReq
	12,  // 98: groupinfo.ChannelServerService.EditChannelTitle:input_type -> groupinfo.UpdateChanTitleReq
	13,  // 99: groupinfo.ChannelServerService.EditChannelPhoto:input_type -> groupinfo.UpdateChanPhotoReq
	14,  // 100: groupinfo.ChannelServerService.EditChanAdminRights:input_type -> groupinfo.UpdateChanAdminRightsReq
	17,  // 101: groupinfo.ChannelServerService.EditChanBanRights:input_type -> groupinfo.UpdateChanBanRightsReq
	16,  // 102: groupinfo.ChannelServerService.EditChannelHiddenprehistory:input_type -> groupinfo.UpdateChanHiddenprehistoryReq
	18,  // 103: groupinfo.ChannelServerService.DismissChannel:input_type -> groupinfo.DismissChannelReq
	20,  // 104: groupinfo.ChannelServerService.GetParticipantLimitReq:input_type -> groupinfo.ParticipantLimitReq
	22,  // 105: groupinfo.ChannelServerService.GetChanOneParticipantReq:input_type -> groupinfo.GetChannelOnePartReq
	24,  // 106: groupinfo.ChannelServerService.GetChanUsersId:input_type -> groupinfo.GetChannelUsersIdReq
	26,  // 107: groupinfo.ChannelServerService.GetChannelBaseInfo:input_type -> groupinfo.GetChannelBaseInfoReq
	28,  // 108: groupinfo.ChannelServerService.GetChannelInfo:input_type -> groupinfo.GetChannelInfoReq
	30,  // 109: groupinfo.ChannelServerService.GetBatchChanBaseInfo:input_type -> groupinfo.BatchChannelBaseInfoReq
	32,  // 110: groupinfo.ChannelServerService.GetChanInfoByLink:input_type -> groupinfo.GetChanByLinkReq
	34,  // 111: groupinfo.ChannelServerService.GetChannelFullInfo:input_type -> groupinfo.GetFullChannelInfoReq
	36,  // 112: groupinfo.ChannelServerService.ToggleInvite:input_type -> groupinfo.ToggleInviteReq
	37,  // 113: groupinfo.ChannelServerService.CreateChannelLink:input_type -> groupinfo.CreateChannelLinkReq
	39,  // 114: groupinfo.ChannelServerService.CheckChannelInviteLink:input_type -> groupinfo.CheckChannelInviteLinkReq
	41,  // 115: groupinfo.ChannelServerService.UpdateChannelUserName:input_type -> groupinfo.UpdateChannelUserNameReq
	43,  // 116: groupinfo.ChannelServerService.UpdateChannelPinnedMsgId:input_type -> groupinfo.UpdateChannelPinnedMsgIdReq
	45,  // 117: groupinfo.ChannelServerService.CheckUserName:input_type -> groupinfo.CheckUserNameReq
	47,  // 118: groupinfo.ChannelServerService.CheckChannelIsEncry:input_type -> groupinfo.CheckChannelIsEncryReq
	49,  // 119: groupinfo.ChannelServerService.GetAllChannelInfoByUserId:input_type -> groupinfo.GetAllChannelInfoByUserIdReq
	51,  // 120: groupinfo.ChannelServerService.UpdateEveryoneQuiet:input_type -> groupinfo.EveryoneQuietReq
	52,  // 121: groupinfo.ChannelServerService.UpdatePrivateChat:input_type -> groupinfo.EditPrivateChatReq
	54,  // 122: groupinfo.ChannelServerService.SetChannelCreator:input_type -> groupinfo.SetChannelCreatorReq
	55,  // 123: groupinfo.ChannelServerService.ResetUserAllCreateGroups:input_type -> groupinfo.ResetUserAllCreateGroupsReq
	57,  // 124: groupinfo.ChannelServerService.GetChannelBotIds:input_type -> groupinfo.GetChannelBotIdsReq
	59,  // 125: groupinfo.ChannelServerService.GetChannelActiveUserIds:input_type -> groupinfo.GetChannelActiveUserIdsReq
	61,  // 126: groupinfo.ChannelServerService.CheckUserInChannel:input_type -> groupinfo.CheckUserInChannelReq
	63,  // 127: groupinfo.ChannelServerService.UpdateChannelVerify:input_type -> groupinfo.UpdateChannelVerifyReq
	69,  // 128: groupinfo.ChannelServerService.UpdateChannelBannedRights:input_type -> groupinfo.UpdateChannelBannedRightsReq
	71,  // 129: groupinfo.ChannelServerService.GetChnlAndMembInfo:input_type -> groupinfo.GetChnlAndMembInfoReq
	73,  // 130: groupinfo.ChannelServerService.SetChnlSlowMode:input_type -> groupinfo.SetChnlSlowModeReq
	75,  // 131: groupinfo.ChannelServerService.SetChnlGeo:input_type -> groupinfo.SetChnlGeoReq
	77,  // 132: groupinfo.ChannelServerService.ToggleSignatures:input_type -> groupinfo.ToggleSignaturesReq
	79,  // 133: groupinfo.ChannelServerService.GroupUpdateBanMode:input_type -> groupinfo.GroupUpdateBanModeReq
	81,  // 134: groupinfo.ChannelServerService.GroupGetUserOwnChannels:input_type -> groupinfo.GroupGetUserOwnChannelsReq
	84,  // 135: groupinfo.ChannelServerService.UpdateChannelRestricted:input_type -> groupinfo.UpdateChannelRestrictedReq
	86,  // 136: groupinfo.ChannelServerService.DelChannelKickedLeft:input_type -> groupinfo.DelChannelKickedLeftReq
	33,  // 137: groupinfo.ChannelServerService.GetChanInfoByLinkOrUserName:input_type -> groupinfo.GetChanInfoByLinkOrUserNameReq
	88,  // 138: groupinfo.ChannelServerService.GMsGetHotGroupIDs:input_type -> groupinfo.GetHotGroupIDsReq
	91,  // 139: groupinfo.ChannelServerService.GMsGetHotGroupLv:input_type -> groupinfo.GetHotGroupLvReq
	93,  // 140: groupinfo.ChannelServerService.GMsSetDiscussionGroup:input_type -> groupinfo.GMsSetDiscussionGroupReq
	67,  // 141: groupinfo.ChannelServerService.UpdateChannelGeo:output_type -> groupinfo.UpdateChannelGeoResp
	7,   // 142: groupinfo.ChannelServerService.CreateChannel:output_type -> groupinfo.ChannelupdatesResp
	7,   // 143: groupinfo.ChannelServerService.GetChannelUpdatesInfo:output_type -> groupinfo.ChannelupdatesResp
	7,   // 144: groupinfo.ChannelServerService.AddChannelUser:output_type -> groupinfo.ChannelupdatesResp
	7,   // 145: groupinfo.ChannelServerService.DelChannelUser:output_type -> groupinfo.ChannelupdatesResp
	7,   // 146: groupinfo.ChannelServerService.EditChannelAbout:output_type -> groupinfo.ChannelupdatesResp
	7,   // 147: groupinfo.ChannelServerService.EditChannelTitle:output_type -> groupinfo.ChannelupdatesResp
	7,   // 148: groupinfo.ChannelServerService.EditChannelPhoto:output_type -> groupinfo.ChannelupdatesResp
	15,  // 149: groupinfo.ChannelServerService.EditChanAdminRights:output_type -> groupinfo.UpdateChanAdminRightsResp
	7,   // 150: groupinfo.ChannelServerService.EditChanBanRights:output_type -> groupinfo.ChannelupdatesResp
	7,   // 151: groupinfo.ChannelServerService.EditChannelHiddenprehistory:output_type -> groupinfo.ChannelupdatesResp
	19,  // 152: groupinfo.ChannelServerService.DismissChannel:output_type -> groupinfo.DismissChannelResp
	21,  // 153: groupinfo.ChannelServerService.GetParticipantLimitReq:output_type -> groupinfo.ParticipantLimitResp
	23,  // 154: groupinfo.ChannelServerService.GetChanOneParticipantReq:output_type -> groupinfo.GetChannelOnePartResp
	25,  // 155: groupinfo.ChannelServerService.GetChanUsersId:output_type -> groupinfo.GetChannelUsersIdResp
	27,  // 156: groupinfo.ChannelServerService.GetChannelBaseInfo:output_type -> groupinfo.GetChannelBaseInfoResp
	29,  // 157: groupinfo.ChannelServerService.GetChannelInfo:output_type -> groupinfo.GetChannelInfoResp
	31,  // 158: groupinfo.ChannelServerService.GetBatchChanBaseInfo:output_type -> groupinfo.BatchChannelBaseInfoResp
	27,  // 159: groupinfo.ChannelServerService.GetChanInfoByLink:output_type -> groupinfo.GetChannelBaseInfoResp
	35,  // 160: groupinfo.ChannelServerService.GetChannelFullInfo:output_type -> groupinfo.GetFullChannelInfoResp
	7,   // 161: groupinfo.ChannelServerService.ToggleInvite:output_type -> groupinfo.ChannelupdatesResp
	38,  // 162: groupinfo.ChannelServerService.CreateChannelLink:output_type -> groupinfo.CreateChannelLinkResp
	40,  // 163: groupinfo.ChannelServerService.CheckChannelInviteLink:output_type -> groupinfo.CheckChannelInviteLinkResp
	42,  // 164: groupinfo.ChannelServerService.UpdateChannelUserName:output_type -> groupinfo.UpdateChannelUserNameResp
	44,  // 165: groupinfo.ChannelServerService.UpdateChannelPinnedMsgId:output_type -> groupinfo.UpdateChannelPinnedMsgIdResp
	46,  // 166: groupinfo.ChannelServerService.CheckUserName:output_type -> groupinfo.CheckUserNameResp
	48,  // 167: groupinfo.ChannelServerService.CheckChannelIsEncry:output_type -> groupinfo.CheckChannelIsEncryResp
	50,  // 168: groupinfo.ChannelServerService.GetAllChannelInfoByUserId:output_type -> groupinfo.GetAllChannelInfoByUserIdResp
	53,  // 169: groupinfo.ChannelServerService.UpdateEveryoneQuiet:output_type -> groupinfo.UpdateChannelCommonResp
	53,  // 170: groupinfo.ChannelServerService.UpdatePrivateChat:output_type -> groupinfo.UpdateChannelCommonResp
	53,  // 171: groupinfo.ChannelServerService.SetChannelCreator:output_type -> groupinfo.UpdateChannelCommonResp
	56,  // 172: groupinfo.ChannelServerService.ResetUserAllCreateGroups:output_type -> groupinfo.ResetUserAllCreateGroupsResp
	58,  // 173: groupinfo.ChannelServerService.GetChannelBotIds:output_type -> groupinfo.GetChannelBotIdsResp
	60,  // 174: groupinfo.ChannelServerService.GetChannelActiveUserIds:output_type -> groupinfo.GetChannelActiveUserIdsResp
	62,  // 175: groupinfo.ChannelServerService.CheckUserInChannel:output_type -> groupinfo.CheckUserInChannelResp
	64,  // 176: groupinfo.ChannelServerService.UpdateChannelVerify:output_type -> groupinfo.UpdateChannelVerifyResp
	70,  // 177: groupinfo.ChannelServerService.UpdateChannelBannedRights:output_type -> groupinfo.UpdateChannelBannedRightsRsp
	72,  // 178: groupinfo.ChannelServerService.GetChnlAndMembInfo:output_type -> groupinfo.GetChnlAndMembInfoRsp
	74,  // 179: groupinfo.ChannelServerService.SetChnlSlowMode:output_type -> groupinfo.SetChnlSlowModeRsp
	76,  // 180: groupinfo.ChannelServerService.SetChnlGeo:output_type -> groupinfo.SetChnlGeoRsp
	78,  // 181: groupinfo.ChannelServerService.ToggleSignatures:output_type -> groupinfo.ToggleSignaturesRsp
	80,  // 182: groupinfo.ChannelServerService.GroupUpdateBanMode:output_type -> groupinfo.GroupUpdateBanModeRsp
	83,  // 183: groupinfo.ChannelServerService.GroupGetUserOwnChannels:output_type -> groupinfo.GroupGetUserOwnChannelsRsp
	85,  // 184: groupinfo.ChannelServerService.UpdateChannelRestricted:output_type -> groupinfo.UpdateChannelRestrictedRsp
	87,  // 185: groupinfo.ChannelServerService.DelChannelKickedLeft:output_type -> groupinfo.DelChannelKickedLeftRsp
	27,  // 186: groupinfo.ChannelServerService.GetChanInfoByLinkOrUserName:output_type -> groupinfo.GetChannelBaseInfoResp
	90,  // 187: groupinfo.ChannelServerService.GMsGetHotGroupIDs:output_type -> groupinfo.GetHotGroupIDsRsp
	92,  // 188: groupinfo.ChannelServerService.GMsGetHotGroupLv:output_type -> groupinfo.GetHotGroupLvRsp
	94,  // 189: groupinfo.ChannelServerService.GMsSetDiscussionGroup:output_type -> groupinfo.GMsSetDiscussionGroupRsp
	141, // [141:190] is the sub-list for method output_type
	92,  // [92:141] is the sub-list for method input_type
	92,  // [92:92] is the sub-list for extension type_name
	92,  // [92:92] is the sub-list for extension extendee
	0,   // [0:92] is the sub-list for field type_name
}

func init() { file_channelservice_proto_init() }
func file_channelservice_proto_init() {
	if File_channelservice_proto != nil {
		return
	}
	file_chatcommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_channelservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelParticipantArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitedUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelupdatesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelUpdatesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddChannelUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChannelUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChanAboutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChanTitleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChanPhotoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChanAdminRightsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChanAdminRightsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChanHiddenprehistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChanBanRightsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DismissChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DismissChannelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantLimitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantLimitResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelOnePartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelOnePartResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelUsersIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelUsersIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelBaseInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelBaseInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchChannelBaseInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchChannelBaseInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChanByLinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChanInfoByLinkOrUserNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullChannelInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullChannelInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelLinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelLinkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChannelInviteLinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChannelInviteLinkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelUserNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelUserNameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelPinnedMsgIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelPinnedMsgIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserNameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChannelIsEncryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChannelIsEncryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllChannelInfoByUserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllChannelInfoByUserIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EveryoneQuietReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditPrivateChatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelCommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChannelCreatorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetUserAllCreateGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetUserAllCreateGroupsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelBotIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelBotIdsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelActiveUserIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelActiveUserIdsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserInChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserInChannelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelVerifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelVerifyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelGeoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelGeoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelBannedRightsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelBannedRightsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChnlAndMembInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChnlAndMembInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChnlSlowModeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChnlSlowModeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChnlGeoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChnlGeoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleSignaturesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleSignaturesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupUpdateBanModeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupUpdateBanModeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupGetUserOwnChannelsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelBrief); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupGetUserOwnChannelsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelRestrictedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelRestrictedRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChannelKickedLeftReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChannelKickedLeftRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHotGroupIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHotGroupIDsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHotGroupLvReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHotGroupLvRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GMsSetDiscussionGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GMsSetDiscussionGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_channelservice_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   94,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_channelservice_proto_goTypes,
		DependencyIndexes: file_channelservice_proto_depIdxs,
		EnumInfos:         file_channelservice_proto_enumTypes,
		MessageInfos:      file_channelservice_proto_msgTypes,
	}.Build()
	File_channelservice_proto = out.File
	file_channelservice_proto_rawDesc = nil
	file_channelservice_proto_goTypes = nil
	file_channelservice_proto_depIdxs = nil
}
