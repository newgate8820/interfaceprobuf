// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/groupinfo/channelservice.proto

/*
Package groupinfo is a generated protocol buffer package.

import "gitlab.chatserver.im/interfaceprobuf/groupinfo/chatservice.proto" ;
import "gitlab.chatserver.im/im/iminterfaceprotobufs/infoserver/userserver.proto" ;

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/groupinfo/channelservice.proto

It has these top-level messages:

	ChannelParticipant
	ChannelParticipantArr
	InvitedUsers
	AdminRights
	BannerRights
	CreateChannelReq
	ChannelupdatesResp
	GetChannelUpdatesReq
	AddChannelUserReq
	DelChannelUserReq
	UpdateChanAboutReq
	UpdateChanTitleReq
	UpdateChanPhotoReq
	UpdateChanAdminRightsReq
	UpdateChanAdminRightsResp
	UpdateChanHiddenprehistoryReq
	UpdateChanBanRightsReq
	DismissChannelReq
	DismissChannelResp
	ParticipantLimitReq
	ParticipantLimitResp
	GetChannelOnePartReq
	GetChannelOnePartResp
	GetChannelUsersIdReq
	GetChannelUsersIdResp
	GetChannelBaseInfoReq
	GetChannelBaseInfoResp
	GetChannelInfoReq
	GetChannelInfoResp
	BatchChannelBaseInfoReq
	BatchChannelBaseInfoResp
	GetChanByLinkReq
	GetChanInfoByLinkOrUserNameReq
	GetFullChannelInfoReq
	GetFullChannelInfoResp
	ToggleInviteReq
	CreateChannelLinkReq
	CreateChannelLinkResp
	CheckChannelInviteLinkReq
	CheckChannelInviteLinkResp
	UpdateChannelUserNameReq
	UpdateChannelUserNameResp
	UpdateChannelPinnedMsgIdReq
	UpdateChannelPinnedMsgIdResp
	CheckUserNameReq
	CheckUserNameResp
	CheckChannelIsEncryReq
	CheckChannelIsEncryResp
	GetAllChannelInfoByUserIdReq
	GetAllChannelInfoByUserIdResp
	EveryoneQuietReq
	EditPrivateChatReq
	UpdateChannelCommonResp
	SetChannelCreatorReq
	ResetUserAllCreateGroupsReq
	ResetUserAllCreateGroupsResp
	GetChannelBotIdsReq
	GetChannelBotIdsResp
	GetChannelActiveUserIdsReq
	GetChannelActiveUserIdsResp
	CheckUserInChannelReq
	CheckUserInChannelResp
	UpdateChannelVerifyReq
	UpdateChannelVerifyResp
	ChannelLocation
	UpdateChannelGeoReq
	UpdateChannelGeoResp
	BoolResult
	UpdateChannelBannedRightsReq
	UpdateChannelBannedRightsRsp
	GetChnlAndMembInfoReq
	GetChnlAndMembInfoRsp
	SetChnlSlowModeReq
	SetChnlSlowModeRsp
	SetChnlGeoReq
	SetChnlGeoRsp
	ToggleSignaturesReq
	ToggleSignaturesRsp
	GroupUpdateBanModeReq
	GroupUpdateBanModeRsp
	GroupGetUserOwnChannelsReq
	ChannelBrief
	GroupGetUserOwnChannelsRsp
	UpdateChannelRestrictedReq
	UpdateChannelRestrictedRsp
	DelChannelKickedLeftReq
	DelChannelKickedLeftRsp
	GetHotGroupIDsReq
	HotGroup
	GetHotGroupIDsRsp
	GetHotGroupLvReq
	GetHotGroupLvRsp
	GMsSetDiscussionGroupReq
	GMsSetDiscussionGroupRsp
*/
package groupinfo

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/pbcomm"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UpdateChannelGeoResp_ErrorCode int32

const (
	UpdateChannelGeoResp_SucessFul UpdateChannelGeoResp_ErrorCode = 0
	UpdateChannelGeoResp_Failed    UpdateChannelGeoResp_ErrorCode = 2
	UpdateChannelGeoResp_DBFailed  UpdateChannelGeoResp_ErrorCode = 3
)

var UpdateChannelGeoResp_ErrorCode_name = map[int32]string{
	0: "SucessFul",
	2: "Failed",
	3: "DBFailed",
}
var UpdateChannelGeoResp_ErrorCode_value = map[string]int32{
	"SucessFul": 0,
	"Failed":    2,
	"DBFailed":  3,
}

func (x UpdateChannelGeoResp_ErrorCode) String() string {
	return proto.EnumName(UpdateChannelGeoResp_ErrorCode_name, int32(x))
}
func (UpdateChannelGeoResp_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{66, 0}
}

// 群成员的基础信息
type ChannelParticipant struct {
	UserId              int32          `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InviteId            int32          `protobuf:"varint,2,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`
	CanSetUsername      bool           `protobuf:"varint,3,opt,name=can_set_username,json=canSetUsername,proto3" json:"can_set_username,omitempty"`
	CanViewParticipants bool           `protobuf:"varint,4,opt,name=can_view_participants,json=canViewParticipants,proto3" json:"can_view_participants,omitempty"`
	IsCreator           bool           `protobuf:"varint,5,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"`
	IsAdmin             bool           `protobuf:"varint,6,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	IsBan               bool           `protobuf:"varint,7,opt,name=is_ban,json=isBan,proto3" json:"is_ban,omitempty"`
	JoinTime            int32          `protobuf:"varint,8,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	AdRight             *AdminRights   `protobuf:"bytes,9,opt,name=ad_right,json=adRight" json:"ad_right,omitempty"`
	BanRight            *BannerRights  `protobuf:"bytes,10,opt,name=ban_right,json=banRight" json:"ban_right,omitempty"`
	Resultcode          ChatResultCode `protobuf:"varint,11,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
	ExportedInviteLink  string         `protobuf:"bytes,12,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"`
	StartMsgid          int32          `protobuf:"varint,13,opt,name=Start_msgid,json=StartMsgid,proto3" json:"Start_msgid,omitempty"`
	Rank                string         `protobuf:"bytes,14,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (m *ChannelParticipant) Reset()         { *m = ChannelParticipant{} }
func (m *ChannelParticipant) String() string { return proto.CompactTextString(m) }
func (*ChannelParticipant) ProtoMessage()    {}
func (*ChannelParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{0}
}

func (m *ChannelParticipant) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelParticipant) GetInviteId() int32 {
	if m != nil {
		return m.InviteId
	}
	return 0
}

func (m *ChannelParticipant) GetCanSetUsername() bool {
	if m != nil {
		return m.CanSetUsername
	}
	return false
}

func (m *ChannelParticipant) GetCanViewParticipants() bool {
	if m != nil {
		return m.CanViewParticipants
	}
	return false
}

func (m *ChannelParticipant) GetIsCreator() bool {
	if m != nil {
		return m.IsCreator
	}
	return false
}

func (m *ChannelParticipant) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *ChannelParticipant) GetIsBan() bool {
	if m != nil {
		return m.IsBan
	}
	return false
}

func (m *ChannelParticipant) GetJoinTime() int32 {
	if m != nil {
		return m.JoinTime
	}
	return 0
}

func (m *ChannelParticipant) GetAdRight() *AdminRights {
	if m != nil {
		return m.AdRight
	}
	return nil
}

func (m *ChannelParticipant) GetBanRight() *BannerRights {
	if m != nil {
		return m.BanRight
	}
	return nil
}

func (m *ChannelParticipant) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

func (m *ChannelParticipant) GetExportedInviteLink() string {
	if m != nil {
		return m.ExportedInviteLink
	}
	return ""
}

func (m *ChannelParticipant) GetStartMsgid() int32 {
	if m != nil {
		return m.StartMsgid
	}
	return 0
}

func (m *ChannelParticipant) GetRank() string {
	if m != nil {
		return m.Rank
	}
	return ""
}

// 群成员的列表
type ChannelParticipantArr struct {
	TotalCount int32                 `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	Part       []*ChannelParticipant `protobuf:"bytes,2,rep,name=part" json:"part,omitempty"`
}

func (m *ChannelParticipantArr) Reset()         { *m = ChannelParticipantArr{} }
func (m *ChannelParticipantArr) String() string { return proto.CompactTextString(m) }
func (*ChannelParticipantArr) ProtoMessage()    {}
func (*ChannelParticipantArr) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{1}
}

func (m *ChannelParticipantArr) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ChannelParticipantArr) GetPart() []*ChannelParticipant {
	if m != nil {
		return m.Part
	}
	return nil
}

// 邀请用户
type InvitedUsers struct {
	UserId    int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsBotUser bool  `protobuf:"varint,2,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"`
}

func (m *InvitedUsers) Reset()                    { *m = InvitedUsers{} }
func (m *InvitedUsers) String() string            { return proto.CompactTextString(m) }
func (*InvitedUsers) ProtoMessage()               {}
func (*InvitedUsers) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{2} }

func (m *InvitedUsers) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *InvitedUsers) GetIsBotUser() bool {
	if m != nil {
		return m.IsBotUser
	}
	return false
}

// 管理员相关权限
type AdminRights struct {
	ChangeGroupInfo bool  `protobuf:"varint,1,opt,name=change_group_info,json=changeGroupInfo,proto3" json:"change_group_info,omitempty"`
	DeleteMessages  bool  `protobuf:"varint,2,opt,name=delete_messages,json=deleteMessages,proto3" json:"delete_messages,omitempty"`
	BanUsers        bool  `protobuf:"varint,3,opt,name=ban_users,json=banUsers,proto3" json:"ban_users,omitempty"`
	PinMessages     bool  `protobuf:"varint,4,opt,name=pin_messages,json=pinMessages,proto3" json:"pin_messages,omitempty"`
	AddNewAdmin     bool  `protobuf:"varint,5,opt,name=add_new_admin,json=addNewAdmin,proto3" json:"add_new_admin,omitempty"`
	PromotedBy      int32 `protobuf:"varint,6,opt,name=promoted_by,json=promotedBy,proto3" json:"promoted_by,omitempty"`
	PostMessages    bool  `protobuf:"varint,7,opt,name=post_messages,json=postMessages,proto3" json:"post_messages,omitempty"`
	EditMessages    bool  `protobuf:"varint,8,opt,name=edit_messages,json=editMessages,proto3" json:"edit_messages,omitempty"`
	InviteUsers     bool  `protobuf:"varint,9,opt,name=invite_users,json=inviteUsers,proto3" json:"invite_users,omitempty"`
	InviteLink      bool  `protobuf:"varint,10,opt,name=invite_link,json=inviteLink,proto3" json:"invite_link,omitempty"`
}

func (m *AdminRights) Reset()                    { *m = AdminRights{} }
func (m *AdminRights) String() string            { return proto.CompactTextString(m) }
func (*AdminRights) ProtoMessage()               {}
func (*AdminRights) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{3} }

func (m *AdminRights) GetChangeGroupInfo() bool {
	if m != nil {
		return m.ChangeGroupInfo
	}
	return false
}

func (m *AdminRights) GetDeleteMessages() bool {
	if m != nil {
		return m.DeleteMessages
	}
	return false
}

func (m *AdminRights) GetBanUsers() bool {
	if m != nil {
		return m.BanUsers
	}
	return false
}

func (m *AdminRights) GetPinMessages() bool {
	if m != nil {
		return m.PinMessages
	}
	return false
}

func (m *AdminRights) GetAddNewAdmin() bool {
	if m != nil {
		return m.AddNewAdmin
	}
	return false
}

func (m *AdminRights) GetPromotedBy() int32 {
	if m != nil {
		return m.PromotedBy
	}
	return 0
}

func (m *AdminRights) GetPostMessages() bool {
	if m != nil {
		return m.PostMessages
	}
	return false
}

func (m *AdminRights) GetEditMessages() bool {
	if m != nil {
		return m.EditMessages
	}
	return false
}

func (m *AdminRights) GetInviteUsers() bool {
	if m != nil {
		return m.InviteUsers
	}
	return false
}

func (m *AdminRights) GetInviteLink() bool {
	if m != nil {
		return m.InviteLink
	}
	return false
}

// bannner用户的权限
type BannerRights struct {
	CanReadMessages bool  `protobuf:"varint,1,opt,name=can_read_messages,json=canReadMessages,proto3" json:"can_read_messages,omitempty"`
	CanSendMessge   bool  `protobuf:"varint,2,opt,name=can_send_messge,json=canSendMessge,proto3" json:"can_send_messge,omitempty"`
	CanSendMedia    bool  `protobuf:"varint,3,opt,name=can_send_media,json=canSendMedia,proto3" json:"can_send_media,omitempty"`
	CanSendSticker  bool  `protobuf:"varint,4,opt,name=can_send_sticker,json=canSendSticker,proto3" json:"can_send_sticker,omitempty"`
	CanEmbedLinks   bool  `protobuf:"varint,5,opt,name=can_embed_links,json=canEmbedLinks,proto3" json:"can_embed_links,omitempty"`
	KickedBy        int32 `protobuf:"varint,6,opt,name=kicked_by,json=kickedBy,proto3" json:"kicked_by,omitempty"`
	UntilDate       int32 `protobuf:"varint,7,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
	CanSendGifs     bool  `protobuf:"varint,8,opt,name=can_send_gifs,json=canSendGifs,proto3" json:"can_send_gifs,omitempty"`
	CanSendGames    bool  `protobuf:"varint,9,opt,name=can_send_games,json=canSendGames,proto3" json:"can_send_games,omitempty"`
	CanSendInline   bool  `protobuf:"varint,10,opt,name=can_send_inline,json=canSendInline,proto3" json:"can_send_inline,omitempty"`
	// @ add by Qingsong at 2019-11-14 for ban member rights.
	InviteUser      bool `protobuf:"varint,11,opt,name=invite_user,json=inviteUser,proto3" json:"invite_user,omitempty"`
	PinMessage      bool `protobuf:"varint,12,opt,name=pin_message,json=pinMessage,proto3" json:"pin_message,omitempty"`
	ChangeGroupInfo bool `protobuf:"varint,13,opt,name=change_group_info,json=changeGroupInfo,proto3" json:"change_group_info,omitempty"`
	CanSendPolls    bool `protobuf:"varint,14,opt,name=can_send_polls,json=canSendPolls,proto3" json:"can_send_polls,omitempty"`
}

func (m *BannerRights) Reset()                    { *m = BannerRights{} }
func (m *BannerRights) String() string            { return proto.CompactTextString(m) }
func (*BannerRights) ProtoMessage()               {}
func (*BannerRights) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{4} }

func (m *BannerRights) GetCanReadMessages() bool {
	if m != nil {
		return m.CanReadMessages
	}
	return false
}

func (m *BannerRights) GetCanSendMessge() bool {
	if m != nil {
		return m.CanSendMessge
	}
	return false
}

func (m *BannerRights) GetCanSendMedia() bool {
	if m != nil {
		return m.CanSendMedia
	}
	return false
}

func (m *BannerRights) GetCanSendSticker() bool {
	if m != nil {
		return m.CanSendSticker
	}
	return false
}

func (m *BannerRights) GetCanEmbedLinks() bool {
	if m != nil {
		return m.CanEmbedLinks
	}
	return false
}

func (m *BannerRights) GetKickedBy() int32 {
	if m != nil {
		return m.KickedBy
	}
	return 0
}

func (m *BannerRights) GetUntilDate() int32 {
	if m != nil {
		return m.UntilDate
	}
	return 0
}

func (m *BannerRights) GetCanSendGifs() bool {
	if m != nil {
		return m.CanSendGifs
	}
	return false
}

func (m *BannerRights) GetCanSendGames() bool {
	if m != nil {
		return m.CanSendGames
	}
	return false
}

func (m *BannerRights) GetCanSendInline() bool {
	if m != nil {
		return m.CanSendInline
	}
	return false
}

func (m *BannerRights) GetInviteUser() bool {
	if m != nil {
		return m.InviteUser
	}
	return false
}

func (m *BannerRights) GetPinMessage() bool {
	if m != nil {
		return m.PinMessage
	}
	return false
}

func (m *BannerRights) GetChangeGroupInfo() bool {
	if m != nil {
		return m.ChangeGroupInfo
	}
	return false
}

func (m *BannerRights) GetCanSendPolls() bool {
	if m != nil {
		return m.CanSendPolls
	}
	return false
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// 创建频道的请求包
type CreateChannelReq struct {
	ChannelId  int32            `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash int64            `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	CreatorId  int32            `protobuf:"varint,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Title      string           `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	About      string           `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	Broadcast  bool             `protobuf:"varint,6,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Megagroup  bool             `protobuf:"varint,7,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	Cluster    int32            `protobuf:"varint,8,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Date       int32            `protobuf:"varint,9,opt,name=date,proto3" json:"date,omitempty"`
	HasGeo     bool             `protobuf:"varint,10,opt,name=has_geo,json=hasGeo,proto3" json:"has_geo,omitempty"`
	Location   *ChannelLocation `protobuf:"bytes,11,opt,name=location" json:"location,omitempty"`
	Dlog       *pbcomm.Debug    `protobuf:"bytes,12,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CreateChannelReq) Reset()                    { *m = CreateChannelReq{} }
func (m *CreateChannelReq) String() string            { return proto.CompactTextString(m) }
func (*CreateChannelReq) ProtoMessage()               {}
func (*CreateChannelReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{5} }

func (m *CreateChannelReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *CreateChannelReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *CreateChannelReq) GetCreatorId() int32 {
	if m != nil {
		return m.CreatorId
	}
	return 0
}

func (m *CreateChannelReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateChannelReq) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *CreateChannelReq) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *CreateChannelReq) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *CreateChannelReq) GetCluster() int32 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *CreateChannelReq) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *CreateChannelReq) GetHasGeo() bool {
	if m != nil {
		return m.HasGeo
	}
	return false
}

func (m *CreateChannelReq) GetLocation() *ChannelLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CreateChannelReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type ChannelupdatesResp struct {
	Channel *ChannelInfoBase `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	// UserInfoArray users = 2; //在线用户信息
	Participants *ChannelParticipantArr `protobuf:"bytes,2,opt,name=participants" json:"participants,omitempty"`
	Resultcode   ChatResultCode         `protobuf:"varint,3,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChannelupdatesResp) Reset()         { *m = ChannelupdatesResp{} }
func (m *ChannelupdatesResp) String() string { return proto.CompactTextString(m) }
func (*ChannelupdatesResp) ProtoMessage()    {}
func (*ChannelupdatesResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{6}
}

func (m *ChannelupdatesResp) GetChannel() *ChannelInfoBase {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *ChannelupdatesResp) GetParticipants() *ChannelParticipantArr {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *ChannelupdatesResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获取channel信息
type GetChannelUpdatesReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChannelUpdatesReq) Reset()         { *m = GetChannelUpdatesReq{} }
func (m *GetChannelUpdatesReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelUpdatesReq) ProtoMessage()    {}
func (*GetChannelUpdatesReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{7}
}

func (m *GetChannelUpdatesReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelUpdatesReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChannelUpdatesReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 添加(主动加入)超级群、频道的用户的请求
type AddChannelUserReq struct {
	ChannelId  int32           `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	InvitorId  int32           `protobuf:"varint,2,opt,name=invitor_id,json=invitorId,proto3" json:"invitor_id,omitempty"`
	AccessHash int64           `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	StartMsgid int32           `protobuf:"varint,4,opt,name=start_msgid,json=startMsgid,proto3" json:"start_msgid,omitempty"`
	Users      []*InvitedUsers `protobuf:"bytes,5,rep,name=users" json:"users,omitempty"`
	Dlog       *pbcomm.Debug   `protobuf:"bytes,6,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *AddChannelUserReq) Reset()                    { *m = AddChannelUserReq{} }
func (m *AddChannelUserReq) String() string            { return proto.CompactTextString(m) }
func (*AddChannelUserReq) ProtoMessage()               {}
func (*AddChannelUserReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{8} }

func (m *AddChannelUserReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *AddChannelUserReq) GetInvitorId() int32 {
	if m != nil {
		return m.InvitorId
	}
	return 0
}

func (m *AddChannelUserReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *AddChannelUserReq) GetStartMsgid() int32 {
	if m != nil {
		return m.StartMsgid
	}
	return 0
}

func (m *AddChannelUserReq) GetUsers() []*InvitedUsers {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *AddChannelUserReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 踢人或者主动离开超级群、频道的的请求接口
type DelChannelUserReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsBotUser bool          `protobuf:"varint,3,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"`
	IsKicked  bool          `protobuf:"varint,4,opt,name=is_kicked,json=isKicked,proto3" json:"is_kicked,omitempty"`
	KickedId  int32         `protobuf:"varint,5,opt,name=Kicked_id,json=KickedId,proto3" json:"Kicked_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *DelChannelUserReq) Reset()                    { *m = DelChannelUserReq{} }
func (m *DelChannelUserReq) String() string            { return proto.CompactTextString(m) }
func (*DelChannelUserReq) ProtoMessage()               {}
func (*DelChannelUserReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{9} }

func (m *DelChannelUserReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *DelChannelUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelChannelUserReq) GetIsBotUser() bool {
	if m != nil {
		return m.IsBotUser
	}
	return false
}

func (m *DelChannelUserReq) GetIsKicked() bool {
	if m != nil {
		return m.IsKicked
	}
	return false
}

func (m *DelChannelUserReq) GetKickedId() int32 {
	if m != nil {
		return m.KickedId
	}
	return 0
}

func (m *DelChannelUserReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 更新群about请求
type UpdateChanAboutReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	About     string        `protobuf:"bytes,3,opt,name=about,proto3" json:"about,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChanAboutReq) Reset()         { *m = UpdateChanAboutReq{} }
func (m *UpdateChanAboutReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChanAboutReq) ProtoMessage()    {}
func (*UpdateChanAboutReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{10}
}

func (m *UpdateChanAboutReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChanAboutReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChanAboutReq) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *UpdateChanAboutReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 更新群名称请求
type UpdateChanTitleReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title     string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChanTitleReq) Reset()         { *m = UpdateChanTitleReq{} }
func (m *UpdateChanTitleReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChanTitleReq) ProtoMessage()    {}
func (*UpdateChanTitleReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{11}
}

func (m *UpdateChanTitleReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChanTitleReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChanTitleReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateChanTitleReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 更新群头像请求
type UpdateChanPhotoReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Photo     string        `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChanPhotoReq) Reset()         { *m = UpdateChanPhotoReq{} }
func (m *UpdateChanPhotoReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChanPhotoReq) ProtoMessage()    {}
func (*UpdateChanPhotoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{12}
}

func (m *UpdateChanPhotoReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChanPhotoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChanPhotoReq) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *UpdateChanPhotoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
type UpdateChanAdminRightsReq struct {
	ChannelId   int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	FromId      int32         `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	UserId      int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeepAdmin   bool          `protobuf:"varint,4,opt,name=keep_admin,json=keepAdmin,proto3" json:"keep_admin,omitempty"`
	AdminRights *AdminRights  `protobuf:"bytes,5,opt,name=admin_rights,json=adminRights" json:"admin_rights,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChanAdminRightsReq) Reset()         { *m = UpdateChanAdminRightsReq{} }
func (m *UpdateChanAdminRightsReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChanAdminRightsReq) ProtoMessage()    {}
func (*UpdateChanAdminRightsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{13}
}

func (m *UpdateChanAdminRightsReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChanAdminRightsReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UpdateChanAdminRightsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChanAdminRightsReq) GetKeepAdmin() bool {
	if m != nil {
		return m.KeepAdmin
	}
	return false
}

func (m *UpdateChanAdminRightsReq) GetAdminRights() *AdminRights {
	if m != nil {
		return m.AdminRights
	}
	return nil
}

func (m *UpdateChanAdminRightsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type UpdateChanAdminRightsResp struct {
	Updates    *ChannelupdatesResp `protobuf:"bytes,1,opt,name=updates" json:"updates,omitempty"`
	IsAdd      bool                `protobuf:"varint,2,opt,name=isAdd,proto3" json:"isAdd,omitempty"`
	Ispromote  bool                `protobuf:"varint,3,opt,name=ispromote,proto3" json:"ispromote,omitempty"`
	Resultcode ChatResultCode      `protobuf:"varint,4,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *UpdateChanAdminRightsResp) Reset()         { *m = UpdateChanAdminRightsResp{} }
func (m *UpdateChanAdminRightsResp) String() string { return proto.CompactTextString(m) }
func (*UpdateChanAdminRightsResp) ProtoMessage()    {}
func (*UpdateChanAdminRightsResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{14}
}

func (m *UpdateChanAdminRightsResp) GetUpdates() *ChannelupdatesResp {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *UpdateChanAdminRightsResp) GetIsAdd() bool {
	if m != nil {
		return m.IsAdd
	}
	return false
}

func (m *UpdateChanAdminRightsResp) GetIspromote() bool {
	if m != nil {
		return m.Ispromote
	}
	return false
}

func (m *UpdateChanAdminRightsResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

type UpdateChanHiddenprehistoryReq struct {
	ChannelId        int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	FromId           int32         `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	UserId           int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	HiddenPrehistory bool          `protobuf:"varint,4,opt,name=Hidden_prehistory,json=HiddenPrehistory,proto3" json:"Hidden_prehistory,omitempty"`
	Dlog             *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChanHiddenprehistoryReq) Reset()         { *m = UpdateChanHiddenprehistoryReq{} }
func (m *UpdateChanHiddenprehistoryReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChanHiddenprehistoryReq) ProtoMessage()    {}
func (*UpdateChanHiddenprehistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{15}
}

func (m *UpdateChanHiddenprehistoryReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChanHiddenprehistoryReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UpdateChanHiddenprehistoryReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChanHiddenprehistoryReq) GetHiddenPrehistory() bool {
	if m != nil {
		return m.HiddenPrehistory
	}
	return false
}

func (m *UpdateChanHiddenprehistoryReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type UpdateChanBanRightsReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	UserId    int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsKick    bool          `protobuf:"varint,4,opt,name=isKick,proto3" json:"isKick,omitempty"`
	BanRights *BannerRights `protobuf:"bytes,5,opt,name=ban_rights,json=banRights" json:"ban_rights,omitempty"`
	BanDate   int32         `protobuf:"varint,6,opt,name=ban_date,json=banDate,proto3" json:"ban_date,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,7,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChanBanRightsReq) Reset()         { *m = UpdateChanBanRightsReq{} }
func (m *UpdateChanBanRightsReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChanBanRightsReq) ProtoMessage()    {}
func (*UpdateChanBanRightsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{16}
}

func (m *UpdateChanBanRightsReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChanBanRightsReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UpdateChanBanRightsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChanBanRightsReq) GetIsKick() bool {
	if m != nil {
		return m.IsKick
	}
	return false
}

func (m *UpdateChanBanRightsReq) GetBanRights() *BannerRights {
	if m != nil {
		return m.BanRights
	}
	return nil
}

func (m *UpdateChanBanRightsReq) GetBanDate() int32 {
	if m != nil {
		return m.BanDate
	}
	return 0
}

func (m *UpdateChanBanRightsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// channel最基础的请求
type DismissChannelReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	CmdOption  bool          `protobuf:"varint,4,opt,name=CmdOption,proto3" json:"CmdOption,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *DismissChannelReq) Reset()         { *m = DismissChannelReq{} }
func (m *DismissChannelReq) String() string { return proto.CompactTextString(m) }
func (*DismissChannelReq) ProtoMessage()    {}
func (*DismissChannelReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{17}
}

func (m *DismissChannelReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *DismissChannelReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DismissChannelReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *DismissChannelReq) GetCmdOption() bool {
	if m != nil {
		return m.CmdOption
	}
	return false
}

func (m *DismissChannelReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type DismissChannelResp struct {
	B          bool           `protobuf:"varint,1,opt,name=b,proto3" json:"b,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *DismissChannelResp) Reset()         { *m = DismissChannelResp{} }
func (m *DismissChannelResp) String() string { return proto.CompactTextString(m) }
func (*DismissChannelResp) ProtoMessage()    {}
func (*DismissChannelResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{18}
}

func (m *DismissChannelResp) GetB() bool {
	if m != nil {
		return m.B
	}
	return false
}

func (m *DismissChannelResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 超级群/频道 的按类型的偏移获取
type ParticipantLimitReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Offset    int32         `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int32         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	PartType  int32         `protobuf:"varint,4,opt,name=part_type,json=partType,proto3" json:"part_type,omitempty"`
	Userid    int32         `protobuf:"varint,5,opt,name=userid,proto3" json:"userid,omitempty"`
	Q         string        `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,7,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *ParticipantLimitReq) Reset()         { *m = ParticipantLimitReq{} }
func (m *ParticipantLimitReq) String() string { return proto.CompactTextString(m) }
func (*ParticipantLimitReq) ProtoMessage()    {}
func (*ParticipantLimitReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{19}
}

func (m *ParticipantLimitReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ParticipantLimitReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ParticipantLimitReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ParticipantLimitReq) GetPartType() int32 {
	if m != nil {
		return m.PartType
	}
	return 0
}

func (m *ParticipantLimitReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ParticipantLimitReq) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *ParticipantLimitReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 群成员的列表
type ParticipantLimitResp struct {
	TotalCount int32                 `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	Part       []*ChannelParticipant `protobuf:"bytes,2,rep,name=part" json:"part,omitempty"`
	// UserInfoArray users = 3; //在线用户信息
	Resultcode ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ParticipantLimitResp) Reset()         { *m = ParticipantLimitResp{} }
func (m *ParticipantLimitResp) String() string { return proto.CompactTextString(m) }
func (*ParticipantLimitResp) ProtoMessage()    {}
func (*ParticipantLimitResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{20}
}

func (m *ParticipantLimitResp) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ParticipantLimitResp) GetPart() []*ChannelParticipant {
	if m != nil {
		return m.Part
	}
	return nil
}

func (m *ParticipantLimitResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// channel最基础的请求
type GetChannelOnePartReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChannelOnePartReq) Reset()         { *m = GetChannelOnePartReq{} }
func (m *GetChannelOnePartReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelOnePartReq) ProtoMessage()    {}
func (*GetChannelOnePartReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{21}
}

func (m *GetChannelOnePartReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelOnePartReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChannelOnePartReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetChannelOnePartReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 群成员的基础信息
type GetChannelOnePartResp struct {
	OneParticipant *ChannelParticipant `protobuf:"bytes,1,opt,name=one_participant,json=oneParticipant" json:"one_participant,omitempty"`
	// userInfo user_info = 2 ;
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChannelOnePartResp) Reset()         { *m = GetChannelOnePartResp{} }
func (m *GetChannelOnePartResp) String() string { return proto.CompactTextString(m) }
func (*GetChannelOnePartResp) ProtoMessage()    {}
func (*GetChannelOnePartResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{22}
}

func (m *GetChannelOnePartResp) GetOneParticipant() *ChannelParticipant {
	if m != nil {
		return m.OneParticipant
	}
	return nil
}

func (m *GetChannelOnePartResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获取channel userids信息
type GetChannelUsersIdReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChannelUsersIdReq) Reset()         { *m = GetChannelUsersIdReq{} }
func (m *GetChannelUsersIdReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelUsersIdReq) ProtoMessage()    {}
func (*GetChannelUsersIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{23}
}

func (m *GetChannelUsersIdReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelUsersIdReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GetChannelUsersIdResp struct {
	ChannelId  int32          `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     []int32        `protobuf:"varint,2,rep,packed,name=user_id,json=userId" json:"user_id,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChannelUsersIdResp) Reset()         { *m = GetChannelUsersIdResp{} }
func (m *GetChannelUsersIdResp) String() string { return proto.CompactTextString(m) }
func (*GetChannelUsersIdResp) ProtoMessage()    {}
func (*GetChannelUsersIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{24}
}

func (m *GetChannelUsersIdResp) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelUsersIdResp) GetUserId() []int32 {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *GetChannelUsersIdResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// channel最基础的请求
type GetChannelBaseInfoReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChannelBaseInfoReq) Reset()         { *m = GetChannelBaseInfoReq{} }
func (m *GetChannelBaseInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelBaseInfoReq) ProtoMessage()    {}
func (*GetChannelBaseInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{25}
}

func (m *GetChannelBaseInfoReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelBaseInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChannelBaseInfoReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetChannelBaseInfoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 群基础信息
type GetChannelBaseInfoResp struct {
	BaseInfo   *ChannelInfoBase `protobuf:"bytes,1,opt,name=baseInfo" json:"baseInfo,omitempty"`
	Resultcode ChatResultCode   `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChannelBaseInfoResp) Reset()         { *m = GetChannelBaseInfoResp{} }
func (m *GetChannelBaseInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetChannelBaseInfoResp) ProtoMessage()    {}
func (*GetChannelBaseInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{26}
}

func (m *GetChannelBaseInfoResp) GetBaseInfo() *ChannelInfoBase {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *GetChannelBaseInfoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// 获取channel信息  不带user信息
type GetChannelInfoReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChannelInfoReq) Reset()         { *m = GetChannelInfoReq{} }
func (m *GetChannelInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelInfoReq) ProtoMessage()    {}
func (*GetChannelInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{27}
}

func (m *GetChannelInfoReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelInfoReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetChannelInfoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 群基础信息
type GetChannelInfoResp struct {
	BaseInfo   *ChannelInfoBase `protobuf:"bytes,1,opt,name=baseInfo" json:"baseInfo,omitempty"`
	Resultcode ChatResultCode   `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChannelInfoResp) Reset()         { *m = GetChannelInfoResp{} }
func (m *GetChannelInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetChannelInfoResp) ProtoMessage()    {}
func (*GetChannelInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{28}
}

func (m *GetChannelInfoResp) GetBaseInfo() *ChannelInfoBase {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *GetChannelInfoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 批量获取
// channel最基础的请求
type BatchChannelBaseInfoReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    []int32       `protobuf:"varint,2,rep,packed,name=user_id,json=userId" json:"user_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *BatchChannelBaseInfoReq) Reset()         { *m = BatchChannelBaseInfoReq{} }
func (m *BatchChannelBaseInfoReq) String() string { return proto.CompactTextString(m) }
func (*BatchChannelBaseInfoReq) ProtoMessage()    {}
func (*BatchChannelBaseInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{29}
}

func (m *BatchChannelBaseInfoReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *BatchChannelBaseInfoReq) GetUserId() []int32 {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *BatchChannelBaseInfoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type BatchChannelBaseInfoResp struct {
	Channel    []*ChannelInfoBase `protobuf:"bytes,1,rep,name=channel" json:"channel,omitempty"`
	Resultcode ChatResultCode     `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *BatchChannelBaseInfoResp) Reset()         { *m = BatchChannelBaseInfoResp{} }
func (m *BatchChannelBaseInfoResp) String() string { return proto.CompactTextString(m) }
func (*BatchChannelBaseInfoResp) ProtoMessage()    {}
func (*BatchChannelBaseInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{30}
}

func (m *BatchChannelBaseInfoResp) GetChannel() []*ChannelInfoBase {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *BatchChannelBaseInfoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// ChannelLink
type GetChanByLinkReq struct {
	ChannelLink string        `protobuf:"bytes,1,opt,name=channel_link,json=channelLink,proto3" json:"channel_link,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChanByLinkReq) Reset()                    { *m = GetChanByLinkReq{} }
func (m *GetChanByLinkReq) String() string            { return proto.CompactTextString(m) }
func (*GetChanByLinkReq) ProtoMessage()               {}
func (*GetChanByLinkReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{31} }

func (m *GetChanByLinkReq) GetChannelLink() string {
	if m != nil {
		return m.ChannelLink
	}
	return ""
}

func (m *GetChanByLinkReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChanByLinkReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 返回为 ChannelInfoBaseResp
// -----------------------------------------------------------------------------
// ChannelLinkorusername
type GetChanInfoByLinkOrUserNameReq struct {
	ChannelLink string        `protobuf:"bytes,1,opt,name=channel_link,json=channelLink,proto3" json:"channel_link,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChanInfoByLinkOrUserNameReq) Reset()         { *m = GetChanInfoByLinkOrUserNameReq{} }
func (m *GetChanInfoByLinkOrUserNameReq) String() string { return proto.CompactTextString(m) }
func (*GetChanInfoByLinkOrUserNameReq) ProtoMessage()    {}
func (*GetChanInfoByLinkOrUserNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{32}
}

func (m *GetChanInfoByLinkOrUserNameReq) GetChannelLink() string {
	if m != nil {
		return m.ChannelLink
	}
	return ""
}

func (m *GetChanInfoByLinkOrUserNameReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 返回为 ChannelInfoBaseResp
// -----------------------------------------------------------------------------
// GetFullChannelInfo
type GetFullChannelInfoReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetFullChannelInfoReq) Reset()         { *m = GetFullChannelInfoReq{} }
func (m *GetFullChannelInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetFullChannelInfoReq) ProtoMessage()    {}
func (*GetFullChannelInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{33}
}

func (m *GetFullChannelInfoReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetFullChannelInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetFullChannelInfoReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetFullChannelInfoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GetFullChannelInfoResp struct {
	Channelinfo        *ChannelInfoBase `protobuf:"bytes,1,opt,name=channelinfo" json:"channelinfo,omitempty"`
	ExportedInviteLink string           `protobuf:"bytes,2,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"`
	ParticipantsCount  int32            `protobuf:"varint,3,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
	AdminsCount        int32            `protobuf:"varint,4,opt,name=admins_count,json=adminsCount,proto3" json:"admins_count,omitempty"`
	KickedCount        int32            `protobuf:"varint,5,opt,name=kicked_count,json=kickedCount,proto3" json:"kicked_count,omitempty"`
	BannedCount        int32            `protobuf:"varint,6,opt,name=banned_count,json=bannedCount,proto3" json:"banned_count,omitempty"`
	PinnedMsgId        int32            `protobuf:"varint,7,opt,name=pinned_msg_id,json=pinnedMsgId,proto3" json:"pinned_msg_id,omitempty"`
	MigratedFromMaxId  int32            `protobuf:"varint,8,opt,name=migrated_from_max_id,json=migratedFromMaxId,proto3" json:"migrated_from_max_id,omitempty"`
	MigratedFromChatId int32            `protobuf:"varint,9,opt,name=migrated_from_chat_id,json=migratedFromChatId,proto3" json:"migrated_from_chat_id,omitempty"`
	AdminRights        *AdminRights     `protobuf:"bytes,10,opt,name=admin_rights,json=adminRights" json:"admin_rights,omitempty"`
	BanRights          *BannerRights    `protobuf:"bytes,11,opt,name=ban_rights,json=banRights" json:"ban_rights,omitempty"`
	About              string           `protobuf:"bytes,12,opt,name=about,proto3" json:"about,omitempty"`
	BotCount           int32            `protobuf:"varint,13,opt,name=bot_count,json=botCount,proto3" json:"bot_count,omitempty"`
	BotId              []int32          `protobuf:"varint,14,rep,packed,name=bot_id,json=botId" json:"bot_id,omitempty"`
	// UserInfoArray users = 15; //用户信息
	CanSetUsername      bool `protobuf:"varint,15,opt,name=Can_set_username,json=CanSetUsername,proto3" json:"Can_set_username,omitempty"`
	CanViewParticipants bool `protobuf:"varint,16,opt,name=Can_view_participants,json=CanViewParticipants,proto3" json:"Can_view_participants,omitempty"`
	// / --------------------- TODO
	Longitude  float64        `protobuf:"fixed64,17,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude   float64        `protobuf:"fixed64,18,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Addr       string         `protobuf:"bytes,19,opt,name=addr,proto3" json:"addr,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,20,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetFullChannelInfoResp) Reset()         { *m = GetFullChannelInfoResp{} }
func (m *GetFullChannelInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetFullChannelInfoResp) ProtoMessage()    {}
func (*GetFullChannelInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{34}
}

func (m *GetFullChannelInfoResp) GetChannelinfo() *ChannelInfoBase {
	if m != nil {
		return m.Channelinfo
	}
	return nil
}

func (m *GetFullChannelInfoResp) GetExportedInviteLink() string {
	if m != nil {
		return m.ExportedInviteLink
	}
	return ""
}

func (m *GetFullChannelInfoResp) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetAdminsCount() int32 {
	if m != nil {
		return m.AdminsCount
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetKickedCount() int32 {
	if m != nil {
		return m.KickedCount
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetBannedCount() int32 {
	if m != nil {
		return m.BannedCount
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetPinnedMsgId() int32 {
	if m != nil {
		return m.PinnedMsgId
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetMigratedFromMaxId() int32 {
	if m != nil {
		return m.MigratedFromMaxId
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetMigratedFromChatId() int32 {
	if m != nil {
		return m.MigratedFromChatId
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetAdminRights() *AdminRights {
	if m != nil {
		return m.AdminRights
	}
	return nil
}

func (m *GetFullChannelInfoResp) GetBanRights() *BannerRights {
	if m != nil {
		return m.BanRights
	}
	return nil
}

func (m *GetFullChannelInfoResp) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *GetFullChannelInfoResp) GetBotCount() int32 {
	if m != nil {
		return m.BotCount
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetBotId() []int32 {
	if m != nil {
		return m.BotId
	}
	return nil
}

func (m *GetFullChannelInfoResp) GetCanSetUsername() bool {
	if m != nil {
		return m.CanSetUsername
	}
	return false
}

func (m *GetFullChannelInfoResp) GetCanViewParticipants() bool {
	if m != nil {
		return m.CanViewParticipants
	}
	return false
}

func (m *GetFullChannelInfoResp) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *GetFullChannelInfoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 切换邀请规则
type ToggleInviteReq struct {
	ChannelId   int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash  int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	AdminEnable bool          `protobuf:"varint,4,opt,name=admin_enable,json=adminEnable,proto3" json:"admin_enable,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *ToggleInviteReq) Reset()                    { *m = ToggleInviteReq{} }
func (m *ToggleInviteReq) String() string            { return proto.CompactTextString(m) }
func (*ToggleInviteReq) ProtoMessage()               {}
func (*ToggleInviteReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{35} }

func (m *ToggleInviteReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ToggleInviteReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ToggleInviteReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ToggleInviteReq) GetAdminEnable() bool {
	if m != nil {
		return m.AdminEnable
	}
	return false
}

func (m *ToggleInviteReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 返回为ChannelupdatesResp  user可以为空
// -----------------------------------------------------------------------------
// 生成群群链接
type CreateChannelLinkReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CreateChannelLinkReq) Reset()         { *m = CreateChannelLinkReq{} }
func (m *CreateChannelLinkReq) String() string { return proto.CompactTextString(m) }
func (*CreateChannelLinkReq) ProtoMessage()    {}
func (*CreateChannelLinkReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{36}
}

func (m *CreateChannelLinkReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *CreateChannelLinkReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateChannelLinkReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 生成群链接
type CreateChannelLinkResp struct {
	Link       string         `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CreateChannelLinkResp) Reset()         { *m = CreateChannelLinkResp{} }
func (m *CreateChannelLinkResp) String() string { return proto.CompactTextString(m) }
func (*CreateChannelLinkResp) ProtoMessage()    {}
func (*CreateChannelLinkResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{37}
}

func (m *CreateChannelLinkResp) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CreateChannelLinkResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 校验邀请链接合法
type CheckChannelInviteLinkReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash string        `protobuf:"bytes,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CheckChannelInviteLinkReq) Reset()         { *m = CheckChannelInviteLinkReq{} }
func (m *CheckChannelInviteLinkReq) String() string { return proto.CompactTextString(m) }
func (*CheckChannelInviteLinkReq) ProtoMessage()    {}
func (*CheckChannelInviteLinkReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{38}
}

func (m *CheckChannelInviteLinkReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *CheckChannelInviteLinkReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckChannelInviteLinkReq) GetAccessHash() string {
	if m != nil {
		return m.AccessHash
	}
	return ""
}

func (m *CheckChannelInviteLinkReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 生成群链接
type CheckChannelInviteLinkResp struct {
	Link        string           `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Gtype       int32            `protobuf:"varint,2,opt,name=gtype,proto3" json:"gtype,omitempty"`
	ChanInfo    *ChannelInfoBase `protobuf:"bytes,3,opt,name=chanInfo" json:"chanInfo,omitempty"`
	Chatinfo    *GetChatInfoResp `protobuf:"bytes,4,opt,name=chatinfo" json:"chatinfo,omitempty"`
	LinkCreator int32            `protobuf:"varint,5,opt,name=linkCreator,proto3" json:"linkCreator,omitempty"`
	Resultcode  ChatResultCode   `protobuf:"varint,6,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CheckChannelInviteLinkResp) Reset()         { *m = CheckChannelInviteLinkResp{} }
func (m *CheckChannelInviteLinkResp) String() string { return proto.CompactTextString(m) }
func (*CheckChannelInviteLinkResp) ProtoMessage()    {}
func (*CheckChannelInviteLinkResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{39}
}

func (m *CheckChannelInviteLinkResp) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CheckChannelInviteLinkResp) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *CheckChannelInviteLinkResp) GetChanInfo() *ChannelInfoBase {
	if m != nil {
		return m.ChanInfo
	}
	return nil
}

func (m *CheckChannelInviteLinkResp) GetChatinfo() *GetChatInfoResp {
	if m != nil {
		return m.Chatinfo
	}
	return nil
}

func (m *CheckChannelInviteLinkResp) GetLinkCreator() int32 {
	if m != nil {
		return m.LinkCreator
	}
	return 0
}

func (m *CheckChannelInviteLinkResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 更改username
type UpdateChannelUserNameReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName  string        `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChannelUserNameReq) Reset()         { *m = UpdateChannelUserNameReq{} }
func (m *UpdateChannelUserNameReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelUserNameReq) ProtoMessage()    {}
func (*UpdateChannelUserNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{40}
}

func (m *UpdateChannelUserNameReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChannelUserNameReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChannelUserNameReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UpdateChannelUserNameReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type UpdateChannelUserNameResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *UpdateChannelUserNameResp) Reset()         { *m = UpdateChannelUserNameResp{} }
func (m *UpdateChannelUserNameResp) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelUserNameResp) ProtoMessage()    {}
func (*UpdateChannelUserNameResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{41}
}

func (m *UpdateChannelUserNameResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 更改username
type UpdateChannelPinnedMsgIdReq struct {
	ChannelId   int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PinnedMsgId int32         `protobuf:"varint,3,opt,name=pinned_msg_id,json=pinnedMsgId,proto3" json:"pinned_msg_id,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChannelPinnedMsgIdReq) Reset()         { *m = UpdateChannelPinnedMsgIdReq{} }
func (m *UpdateChannelPinnedMsgIdReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelPinnedMsgIdReq) ProtoMessage()    {}
func (*UpdateChannelPinnedMsgIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{42}
}

func (m *UpdateChannelPinnedMsgIdReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChannelPinnedMsgIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChannelPinnedMsgIdReq) GetPinnedMsgId() int32 {
	if m != nil {
		return m.PinnedMsgId
	}
	return 0
}

func (m *UpdateChannelPinnedMsgIdReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type UpdateChannelPinnedMsgIdResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *UpdateChannelPinnedMsgIdResp) Reset()         { *m = UpdateChannelPinnedMsgIdResp{} }
func (m *UpdateChannelPinnedMsgIdResp) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelPinnedMsgIdResp) ProtoMessage()    {}
func (*UpdateChannelPinnedMsgIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{43}
}

func (m *UpdateChannelPinnedMsgIdResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 检查userName是否可用
type CheckUserNameReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	UserName   string        `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CheckUserNameReq) Reset()                    { *m = CheckUserNameReq{} }
func (m *CheckUserNameReq) String() string            { return proto.CompactTextString(m) }
func (*CheckUserNameReq) ProtoMessage()               {}
func (*CheckUserNameReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{44} }

func (m *CheckUserNameReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *CheckUserNameReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *CheckUserNameReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CheckUserNameReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type CheckUserNameResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CheckUserNameResp) Reset()         { *m = CheckUserNameResp{} }
func (m *CheckUserNameResp) String() string { return proto.CompactTextString(m) }
func (*CheckUserNameResp) ProtoMessage()    {}
func (*CheckUserNameResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{45}
}

func (m *CheckUserNameResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 检查群是否是加密
type CheckChannelIsEncryReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CheckChannelIsEncryReq) Reset()         { *m = CheckChannelIsEncryReq{} }
func (m *CheckChannelIsEncryReq) String() string { return proto.CompactTextString(m) }
func (*CheckChannelIsEncryReq) ProtoMessage()    {}
func (*CheckChannelIsEncryReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{46}
}

func (m *CheckChannelIsEncryReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *CheckChannelIsEncryReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 检查群是否是加密
type CheckChannelIsEncryResp struct {
	Encry      bool           `protobuf:"varint,1,opt,name=encry,proto3" json:"encry,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CheckChannelIsEncryResp) Reset()         { *m = CheckChannelIsEncryResp{} }
func (m *CheckChannelIsEncryResp) String() string { return proto.CompactTextString(m) }
func (*CheckChannelIsEncryResp) ProtoMessage()    {}
func (*CheckChannelIsEncryResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{47}
}

func (m *CheckChannelIsEncryResp) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *CheckChannelIsEncryResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// --------------------------------groupinfo 独立后新增---------------------------------------------
// 根据userid查询所有的超级群
type GetAllChannelInfoByUserIdReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetAllChannelInfoByUserIdReq) Reset()         { *m = GetAllChannelInfoByUserIdReq{} }
func (m *GetAllChannelInfoByUserIdReq) String() string { return proto.CompactTextString(m) }
func (*GetAllChannelInfoByUserIdReq) ProtoMessage()    {}
func (*GetAllChannelInfoByUserIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{48}
}

func (m *GetAllChannelInfoByUserIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetAllChannelInfoByUserIdReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GetAllChannelInfoByUserIdResp struct {
	Channels   []*ChannelInfoBase `protobuf:"bytes,1,rep,name=channels" json:"channels,omitempty"`
	Resultcode ChatResultCode     `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetAllChannelInfoByUserIdResp) Reset()         { *m = GetAllChannelInfoByUserIdResp{} }
func (m *GetAllChannelInfoByUserIdResp) String() string { return proto.CompactTextString(m) }
func (*GetAllChannelInfoByUserIdResp) ProtoMessage()    {}
func (*GetAllChannelInfoByUserIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{49}
}

func (m *GetAllChannelInfoByUserIdResp) GetChannels() []*ChannelInfoBase {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *GetAllChannelInfoByUserIdResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 全体禁言
type EveryoneQuietReq struct {
	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId int32         `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Quiet     bool          `protobuf:"varint,3,opt,name=quiet,proto3" json:"quiet,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *EveryoneQuietReq) Reset()                    { *m = EveryoneQuietReq{} }
func (m *EveryoneQuietReq) String() string            { return proto.CompactTextString(m) }
func (*EveryoneQuietReq) ProtoMessage()               {}
func (*EveryoneQuietReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{50} }

func (m *EveryoneQuietReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *EveryoneQuietReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *EveryoneQuietReq) GetQuiet() bool {
	if m != nil {
		return m.Quiet
	}
	return false
}

func (m *EveryoneQuietReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 禁止私聊
type EditPrivateChatReq struct {
	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId int32         `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Enable    bool          `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *EditPrivateChatReq) Reset()         { *m = EditPrivateChatReq{} }
func (m *EditPrivateChatReq) String() string { return proto.CompactTextString(m) }
func (*EditPrivateChatReq) ProtoMessage()    {}
func (*EditPrivateChatReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{51}
}

func (m *EditPrivateChatReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *EditPrivateChatReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *EditPrivateChatReq) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *EditPrivateChatReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 通用的更新操作响应
type UpdateChannelCommonResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *UpdateChannelCommonResp) Reset()         { *m = UpdateChannelCommonResp{} }
func (m *UpdateChannelCommonResp) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelCommonResp) ProtoMessage()    {}
func (*UpdateChannelCommonResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{52}
}

func (m *UpdateChannelCommonResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 变更创建者请求
type SetChannelCreatorReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Operator  int32         `protobuf:"varint,2,opt,name=operator,proto3" json:"operator,omitempty"`
	UserId    int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Remark    string        `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`
	IsAdd     bool          `protobuf:"varint,5,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *SetChannelCreatorReq) Reset()         { *m = SetChannelCreatorReq{} }
func (m *SetChannelCreatorReq) String() string { return proto.CompactTextString(m) }
func (*SetChannelCreatorReq) ProtoMessage()    {}
func (*SetChannelCreatorReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{53}
}

func (m *SetChannelCreatorReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *SetChannelCreatorReq) GetOperator() int32 {
	if m != nil {
		return m.Operator
	}
	return 0
}

func (m *SetChannelCreatorReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetChannelCreatorReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *SetChannelCreatorReq) GetIsAdd() bool {
	if m != nil {
		return m.IsAdd
	}
	return false
}

func (m *SetChannelCreatorReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type ResetUserAllCreateGroupsReq struct {
	Operator   int32         `protobuf:"varint,1,opt,name=operator,proto3" json:"operator,omitempty"`
	FromUserid int32         `protobuf:"varint,2,opt,name=from_userid,json=fromUserid,proto3" json:"from_userid,omitempty"`
	ToUserid   int32         `protobuf:"varint,3,opt,name=to_userid,json=toUserid,proto3" json:"to_userid,omitempty"`
	Remark     string        `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *ResetUserAllCreateGroupsReq) Reset()         { *m = ResetUserAllCreateGroupsReq{} }
func (m *ResetUserAllCreateGroupsReq) String() string { return proto.CompactTextString(m) }
func (*ResetUserAllCreateGroupsReq) ProtoMessage()    {}
func (*ResetUserAllCreateGroupsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{54}
}

func (m *ResetUserAllCreateGroupsReq) GetOperator() int32 {
	if m != nil {
		return m.Operator
	}
	return 0
}

func (m *ResetUserAllCreateGroupsReq) GetFromUserid() int32 {
	if m != nil {
		return m.FromUserid
	}
	return 0
}

func (m *ResetUserAllCreateGroupsReq) GetToUserid() int32 {
	if m != nil {
		return m.ToUserid
	}
	return 0
}

func (m *ResetUserAllCreateGroupsReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *ResetUserAllCreateGroupsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type ResetUserAllCreateGroupsResp struct {
	SuperIds   []int32        `protobuf:"varint,1,rep,packed,name=superIds" json:"superIds,omitempty"`
	ChannelIds []int32        `protobuf:"varint,2,rep,packed,name=channelIds" json:"channelIds,omitempty"`
	GroupIds   []int32        `protobuf:"varint,3,rep,packed,name=groupIds" json:"groupIds,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,4,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ResetUserAllCreateGroupsResp) Reset()         { *m = ResetUserAllCreateGroupsResp{} }
func (m *ResetUserAllCreateGroupsResp) String() string { return proto.CompactTextString(m) }
func (*ResetUserAllCreateGroupsResp) ProtoMessage()    {}
func (*ResetUserAllCreateGroupsResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{55}
}

func (m *ResetUserAllCreateGroupsResp) GetSuperIds() []int32 {
	if m != nil {
		return m.SuperIds
	}
	return nil
}

func (m *ResetUserAllCreateGroupsResp) GetChannelIds() []int32 {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

func (m *ResetUserAllCreateGroupsResp) GetGroupIds() []int32 {
	if m != nil {
		return m.GroupIds
	}
	return nil
}

func (m *ResetUserAllCreateGroupsResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

type GetChannelBotIdsReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChannelBotIdsReq) Reset()         { *m = GetChannelBotIdsReq{} }
func (m *GetChannelBotIdsReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelBotIdsReq) ProtoMessage()    {}
func (*GetChannelBotIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{56}
}

func (m *GetChannelBotIdsReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelBotIdsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GetChannelBotIdsResp struct {
	BotIds     []int32        `protobuf:"varint,1,rep,packed,name=botIds" json:"botIds,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChannelBotIdsResp) Reset()         { *m = GetChannelBotIdsResp{} }
func (m *GetChannelBotIdsResp) String() string { return proto.CompactTextString(m) }
func (*GetChannelBotIdsResp) ProtoMessage()    {}
func (*GetChannelBotIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{57}
}

func (m *GetChannelBotIdsResp) GetBotIds() []int32 {
	if m != nil {
		return m.BotIds
	}
	return nil
}

func (m *GetChannelBotIdsResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

type GetChannelActiveUserIdsReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChannelActiveUserIdsReq) Reset()         { *m = GetChannelActiveUserIdsReq{} }
func (m *GetChannelActiveUserIdsReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelActiveUserIdsReq) ProtoMessage()    {}
func (*GetChannelActiveUserIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{58}
}

func (m *GetChannelActiveUserIdsReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelActiveUserIdsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GetChannelActiveUserIdsResp struct {
	UserIds    []int32        `protobuf:"varint,1,rep,packed,name=UserIds" json:"UserIds,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChannelActiveUserIdsResp) Reset()         { *m = GetChannelActiveUserIdsResp{} }
func (m *GetChannelActiveUserIdsResp) String() string { return proto.CompactTextString(m) }
func (*GetChannelActiveUserIdsResp) ProtoMessage()    {}
func (*GetChannelActiveUserIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{59}
}

func (m *GetChannelActiveUserIdsResp) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *GetChannelActiveUserIdsResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

type CheckUserInChannelReq struct {
	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId int32         `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CheckUserInChannelReq) Reset()         { *m = CheckUserInChannelReq{} }
func (m *CheckUserInChannelReq) String() string { return proto.CompactTextString(m) }
func (*CheckUserInChannelReq) ProtoMessage()    {}
func (*CheckUserInChannelReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{60}
}

func (m *CheckUserInChannelReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckUserInChannelReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *CheckUserInChannelReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type CheckUserInChannelResp struct {
	State bool `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *CheckUserInChannelResp) Reset()         { *m = CheckUserInChannelResp{} }
func (m *CheckUserInChannelResp) String() string { return proto.CompactTextString(m) }
func (*CheckUserInChannelResp) ProtoMessage()    {}
func (*CheckUserInChannelResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{61}
}

func (m *CheckUserInChannelResp) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

// 超级群官方认证
type UpdateChannelVerifyReq struct {
	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId []int32       `protobuf:"varint,2,rep,packed,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Verify    bool          `protobuf:"varint,3,opt,name=verify,proto3" json:"verify,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *UpdateChannelVerifyReq) Reset()         { *m = UpdateChannelVerifyReq{} }
func (m *UpdateChannelVerifyReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelVerifyReq) ProtoMessage()    {}
func (*UpdateChannelVerifyReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{62}
}

func (m *UpdateChannelVerifyReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChannelVerifyReq) GetChannelId() []int32 {
	if m != nil {
		return m.ChannelId
	}
	return nil
}

func (m *UpdateChannelVerifyReq) GetVerify() bool {
	if m != nil {
		return m.Verify
	}
	return false
}

func (m *UpdateChannelVerifyReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateChannelVerifyResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *UpdateChannelVerifyResp) Reset()         { *m = UpdateChannelVerifyResp{} }
func (m *UpdateChannelVerifyResp) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelVerifyResp) ProtoMessage()    {}
func (*UpdateChannelVerifyResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{63}
}

func (m *UpdateChannelVerifyResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 群地理位置坐标结构
type ChannelLocation struct {
	Lat  float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Long float64 `protobuf:"fixed64,2,opt,name=long,proto3" json:"long,omitempty"`
	Addr string  `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *ChannelLocation) Reset()                    { *m = ChannelLocation{} }
func (m *ChannelLocation) String() string            { return proto.CompactTextString(m) }
func (*ChannelLocation) ProtoMessage()               {}
func (*ChannelLocation) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{64} }

func (m *ChannelLocation) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *ChannelLocation) GetLong() float64 {
	if m != nil {
		return m.Long
	}
	return 0
}

func (m *ChannelLocation) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

// 更新群地理位置
type UpdateChannelGeoReq struct {
	IsClear   bool             `protobuf:"varint,1,opt,name=isClear,proto3" json:"isClear,omitempty"`
	Location  *ChannelLocation `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	ChannelId int32            `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32            `protobuf:"varint,4,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	KeyId     int64            `protobuf:"varint,5,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (m *UpdateChannelGeoReq) Reset()         { *m = UpdateChannelGeoReq{} }
func (m *UpdateChannelGeoReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelGeoReq) ProtoMessage()    {}
func (*UpdateChannelGeoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{65}
}

func (m *UpdateChannelGeoReq) GetIsClear() bool {
	if m != nil {
		return m.IsClear
	}
	return false
}

func (m *UpdateChannelGeoReq) GetLocation() *ChannelLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *UpdateChannelGeoReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChannelGeoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChannelGeoReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

type UpdateChannelGeoResp struct {
	Err UpdateChannelGeoResp_ErrorCode `protobuf:"varint,1,opt,name=err,proto3,enum=groupinfo.UpdateChannelGeoResp_ErrorCode" json:"err,omitempty"`
}

func (m *UpdateChannelGeoResp) Reset()         { *m = UpdateChannelGeoResp{} }
func (m *UpdateChannelGeoResp) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelGeoResp) ProtoMessage()    {}
func (*UpdateChannelGeoResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{66}
}

func (m *UpdateChannelGeoResp) GetErr() UpdateChannelGeoResp_ErrorCode {
	if m != nil {
		return m.Err
	}
	return UpdateChannelGeoResp_SucessFul
}

type BoolResult struct {
	Result bool `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *BoolResult) Reset()                    { *m = BoolResult{} }
func (m *BoolResult) String() string            { return proto.CompactTextString(m) }
func (*BoolResult) ProtoMessage()               {}
func (*BoolResult) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{67} }

func (m *BoolResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// message for UpdateChannelBannedRights
// request
type UpdateChannelBannedRightsReq struct {
	ChannelId  int32 `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	BannedFlag int32 `protobuf:"varint,2,opt,name=Banned_flag,json=BannedFlag,proto3" json:"Banned_flag,omitempty"`
	AccessHash int64 `protobuf:"varint,3,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
}

func (m *UpdateChannelBannedRightsReq) Reset()         { *m = UpdateChannelBannedRightsReq{} }
func (m *UpdateChannelBannedRightsReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelBannedRightsReq) ProtoMessage()    {}
func (*UpdateChannelBannedRightsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{68}
}

func (m *UpdateChannelBannedRightsReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChannelBannedRightsReq) GetBannedFlag() int32 {
	if m != nil {
		return m.BannedFlag
	}
	return 0
}

func (m *UpdateChannelBannedRightsReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// response
type UpdateChannelBannedRightsRsp struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=Error_code,json=ErrorCode,proto3" json:"Error_code,omitempty"`
	ErrorInfo string `protobuf:"bytes,2,opt,name=Error_info,json=ErrorInfo,proto3" json:"Error_info,omitempty"`
}

func (m *UpdateChannelBannedRightsRsp) Reset()         { *m = UpdateChannelBannedRightsRsp{} }
func (m *UpdateChannelBannedRightsRsp) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelBannedRightsRsp) ProtoMessage()    {}
func (*UpdateChannelBannedRightsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{69}
}

func (m *UpdateChannelBannedRightsRsp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateChannelBannedRightsRsp) GetErrorInfo() string {
	if m != nil {
		return m.ErrorInfo
	}
	return ""
}

// @ bgn add by qingsong at 2019-11-04 for get channel base info , channel member info.
type GetChnlAndMembInfoReq struct {
	ChnlId int32 `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	MembId int32 `protobuf:"varint,2,opt,name=Memb_id,json=MembId,proto3" json:"Memb_id,omitempty"`
}

func (m *GetChnlAndMembInfoReq) Reset()         { *m = GetChnlAndMembInfoReq{} }
func (m *GetChnlAndMembInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetChnlAndMembInfoReq) ProtoMessage()    {}
func (*GetChnlAndMembInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{70}
}

func (m *GetChnlAndMembInfoReq) GetChnlId() int32 {
	if m != nil {
		return m.ChnlId
	}
	return 0
}

func (m *GetChnlAndMembInfoReq) GetMembId() int32 {
	if m != nil {
		return m.MembId
	}
	return 0
}

type GetChnlAndMembInfoRsp struct {
	ChnlInfo *ChannelInfoBase    `protobuf:"bytes,1,opt,name=ChnlInfo" json:"ChnlInfo,omitempty"`
	MembInfo *ChannelParticipant `protobuf:"bytes,2,opt,name=MembInfo" json:"MembInfo,omitempty"`
}

func (m *GetChnlAndMembInfoRsp) Reset()         { *m = GetChnlAndMembInfoRsp{} }
func (m *GetChnlAndMembInfoRsp) String() string { return proto.CompactTextString(m) }
func (*GetChnlAndMembInfoRsp) ProtoMessage()    {}
func (*GetChnlAndMembInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{71}
}

func (m *GetChnlAndMembInfoRsp) GetChnlInfo() *ChannelInfoBase {
	if m != nil {
		return m.ChnlInfo
	}
	return nil
}

func (m *GetChnlAndMembInfoRsp) GetMembInfo() *ChannelParticipant {
	if m != nil {
		return m.MembInfo
	}
	return nil
}

type SetChnlSlowModeReq struct {
	ChnlId  int32 `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId  int64 `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	Seconds int32 `protobuf:"varint,3,opt,name=Seconds,proto3" json:"Seconds,omitempty"`
}

func (m *SetChnlSlowModeReq) Reset()         { *m = SetChnlSlowModeReq{} }
func (m *SetChnlSlowModeReq) String() string { return proto.CompactTextString(m) }
func (*SetChnlSlowModeReq) ProtoMessage()    {}
func (*SetChnlSlowModeReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{72}
}

func (m *SetChnlSlowModeReq) GetChnlId() int32 {
	if m != nil {
		return m.ChnlId
	}
	return 0
}

func (m *SetChnlSlowModeReq) GetHashId() int64 {
	if m != nil {
		return m.HashId
	}
	return 0
}

func (m *SetChnlSlowModeReq) GetSeconds() int32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

type SetChnlSlowModeRsp struct {
	ResCode int32  `protobuf:"varint,1,opt,name=Res_code,json=ResCode,proto3" json:"Res_code,omitempty"`
	ResInfo string `protobuf:"bytes,2,opt,name=Res_info,json=ResInfo,proto3" json:"Res_info,omitempty"`
}

func (m *SetChnlSlowModeRsp) Reset()         { *m = SetChnlSlowModeRsp{} }
func (m *SetChnlSlowModeRsp) String() string { return proto.CompactTextString(m) }
func (*SetChnlSlowModeRsp) ProtoMessage()    {}
func (*SetChnlSlowModeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{73}
}

func (m *SetChnlSlowModeRsp) GetResCode() int32 {
	if m != nil {
		return m.ResCode
	}
	return 0
}

func (m *SetChnlSlowModeRsp) GetResInfo() string {
	if m != nil {
		return m.ResInfo
	}
	return ""
}

// @ bgn add by qingsong at 2019-11-12 for set channel  geo.
type SetChnlGeoReq struct {
	ChnlId  int32   `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	GeoLng  float64 `protobuf:"fixed64,2,opt,name=Geo_lng,json=GeoLng,proto3" json:"Geo_lng,omitempty"`
	GeoLat  float64 `protobuf:"fixed64,3,opt,name=Geo_lat,json=GeoLat,proto3" json:"Geo_lat,omitempty"`
	GeoAddr string  `protobuf:"bytes,4,opt,name=GeoAddr,proto3" json:"GeoAddr,omitempty"`
}

func (m *SetChnlGeoReq) Reset()                    { *m = SetChnlGeoReq{} }
func (m *SetChnlGeoReq) String() string            { return proto.CompactTextString(m) }
func (*SetChnlGeoReq) ProtoMessage()               {}
func (*SetChnlGeoReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{74} }

func (m *SetChnlGeoReq) GetChnlId() int32 {
	if m != nil {
		return m.ChnlId
	}
	return 0
}

func (m *SetChnlGeoReq) GetGeoLng() float64 {
	if m != nil {
		return m.GeoLng
	}
	return 0
}

func (m *SetChnlGeoReq) GetGeoLat() float64 {
	if m != nil {
		return m.GeoLat
	}
	return 0
}

func (m *SetChnlGeoReq) GetGeoAddr() string {
	if m != nil {
		return m.GeoAddr
	}
	return ""
}

type SetChnlGeoRsp struct {
	ResCode int32  `protobuf:"varint,1,opt,name=ResCode,proto3" json:"ResCode,omitempty"`
	ResInfo string `protobuf:"bytes,2,opt,name=ResInfo,proto3" json:"ResInfo,omitempty"`
}

func (m *SetChnlGeoRsp) Reset()                    { *m = SetChnlGeoRsp{} }
func (m *SetChnlGeoRsp) String() string            { return proto.CompactTextString(m) }
func (*SetChnlGeoRsp) ProtoMessage()               {}
func (*SetChnlGeoRsp) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{75} }

func (m *SetChnlGeoRsp) GetResCode() int32 {
	if m != nil {
		return m.ResCode
	}
	return 0
}

func (m *SetChnlGeoRsp) GetResInfo() string {
	if m != nil {
		return m.ResInfo
	}
	return ""
}

// @ add by qingsong at 2019-11-21 for channel toggle signatures
type ToggleSignaturesReq struct {
	ChnlId int32 `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId int64 `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	IsSign bool  `protobuf:"varint,3,opt,name=Is_sign,json=IsSign,proto3" json:"Is_sign,omitempty"`
}

func (m *ToggleSignaturesReq) Reset()         { *m = ToggleSignaturesReq{} }
func (m *ToggleSignaturesReq) String() string { return proto.CompactTextString(m) }
func (*ToggleSignaturesReq) ProtoMessage()    {}
func (*ToggleSignaturesReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{76}
}

func (m *ToggleSignaturesReq) GetChnlId() int32 {
	if m != nil {
		return m.ChnlId
	}
	return 0
}

func (m *ToggleSignaturesReq) GetHashId() int64 {
	if m != nil {
		return m.HashId
	}
	return 0
}

func (m *ToggleSignaturesReq) GetIsSign() bool {
	if m != nil {
		return m.IsSign
	}
	return false
}

type ToggleSignaturesRsp struct {
	ResCode int32  `protobuf:"varint,1,opt,name=Res_code,json=ResCode,proto3" json:"Res_code,omitempty"`
	ResInfo string `protobuf:"bytes,2,opt,name=Res_info,json=ResInfo,proto3" json:"Res_info,omitempty"`
}

func (m *ToggleSignaturesRsp) Reset()         { *m = ToggleSignaturesRsp{} }
func (m *ToggleSignaturesRsp) String() string { return proto.CompactTextString(m) }
func (*ToggleSignaturesRsp) ProtoMessage()    {}
func (*ToggleSignaturesRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{77}
}

func (m *ToggleSignaturesRsp) GetResCode() int32 {
	if m != nil {
		return m.ResCode
	}
	return 0
}

func (m *ToggleSignaturesRsp) GetResInfo() string {
	if m != nil {
		return m.ResInfo
	}
	return ""
}

// @ add by qingsong at 2019-12-23 for channel set setParticipantBanMode
type GroupUpdateBanModeReq struct {
	ChnlId  int32 `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId  int64 `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	FromId  int32 `protobuf:"varint,3,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
	BanMode bool  `protobuf:"varint,4,opt,name=Ban_mode,json=BanMode,proto3" json:"Ban_mode,omitempty"`
}

func (m *GroupUpdateBanModeReq) Reset()         { *m = GroupUpdateBanModeReq{} }
func (m *GroupUpdateBanModeReq) String() string { return proto.CompactTextString(m) }
func (*GroupUpdateBanModeReq) ProtoMessage()    {}
func (*GroupUpdateBanModeReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{78}
}

func (m *GroupUpdateBanModeReq) GetChnlId() int32 {
	if m != nil {
		return m.ChnlId
	}
	return 0
}

func (m *GroupUpdateBanModeReq) GetHashId() int64 {
	if m != nil {
		return m.HashId
	}
	return 0
}

func (m *GroupUpdateBanModeReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *GroupUpdateBanModeReq) GetBanMode() bool {
	if m != nil {
		return m.BanMode
	}
	return false
}

type GroupUpdateBanModeRsp struct {
	ResCode int32  `protobuf:"varint,1,opt,name=Res_code,json=ResCode,proto3" json:"Res_code,omitempty"`
	ResInfo string `protobuf:"bytes,2,opt,name=Res_info,json=ResInfo,proto3" json:"Res_info,omitempty"`
}

func (m *GroupUpdateBanModeRsp) Reset()         { *m = GroupUpdateBanModeRsp{} }
func (m *GroupUpdateBanModeRsp) String() string { return proto.CompactTextString(m) }
func (*GroupUpdateBanModeRsp) ProtoMessage()    {}
func (*GroupUpdateBanModeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{79}
}

func (m *GroupUpdateBanModeRsp) GetResCode() int32 {
	if m != nil {
		return m.ResCode
	}
	return 0
}

func (m *GroupUpdateBanModeRsp) GetResInfo() string {
	if m != nil {
		return m.ResInfo
	}
	return ""
}

// @ add by qingsong at 2019-12-23 for get user own channels.
type GroupGetUserOwnChannelsReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
}

func (m *GroupGetUserOwnChannelsReq) Reset()         { *m = GroupGetUserOwnChannelsReq{} }
func (m *GroupGetUserOwnChannelsReq) String() string { return proto.CompactTextString(m) }
func (*GroupGetUserOwnChannelsReq) ProtoMessage()    {}
func (*GroupGetUserOwnChannelsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{80}
}

func (m *GroupGetUserOwnChannelsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type ChannelBrief struct {
	ChannelId            int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	AccessHash           int64  `protobuf:"varint,2,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
	BroadcastOrMegagroup bool   `protobuf:"varint,3,opt,name=Broadcast_or_megagroup,json=BroadcastOrMegagroup,proto3" json:"Broadcast_or_megagroup,omitempty"`
	Title                string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
}

func (m *ChannelBrief) Reset()                    { *m = ChannelBrief{} }
func (m *ChannelBrief) String() string            { return proto.CompactTextString(m) }
func (*ChannelBrief) ProtoMessage()               {}
func (*ChannelBrief) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{81} }

func (m *ChannelBrief) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelBrief) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ChannelBrief) GetBroadcastOrMegagroup() bool {
	if m != nil {
		return m.BroadcastOrMegagroup
	}
	return false
}

func (m *ChannelBrief) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type GroupGetUserOwnChannelsRsp struct {
	Chnls []*ChannelBrief `protobuf:"bytes,1,rep,name=Chnls" json:"Chnls,omitempty"`
}

func (m *GroupGetUserOwnChannelsRsp) Reset()         { *m = GroupGetUserOwnChannelsRsp{} }
func (m *GroupGetUserOwnChannelsRsp) String() string { return proto.CompactTextString(m) }
func (*GroupGetUserOwnChannelsRsp) ProtoMessage()    {}
func (*GroupGetUserOwnChannelsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{82}
}

func (m *GroupGetUserOwnChannelsRsp) GetChnls() []*ChannelBrief {
	if m != nil {
		return m.Chnls
	}
	return nil
}

// request
type UpdateChannelRestrictedReq struct {
	ChannelId         int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	Restricted        bool   `protobuf:"varint,2,opt,name=restricted,proto3" json:"restricted,omitempty"`
	AccessHash        int64  `protobuf:"varint,3,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
	RestrictionReason string `protobuf:"bytes,4,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
}

func (m *UpdateChannelRestrictedReq) Reset()         { *m = UpdateChannelRestrictedReq{} }
func (m *UpdateChannelRestrictedReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelRestrictedReq) ProtoMessage()    {}
func (*UpdateChannelRestrictedReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{83}
}

func (m *UpdateChannelRestrictedReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChannelRestrictedReq) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *UpdateChannelRestrictedReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *UpdateChannelRestrictedReq) GetRestrictionReason() string {
	if m != nil {
		return m.RestrictionReason
	}
	return ""
}

// response
type UpdateChannelRestrictedRsp struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=Error_code,json=ErrorCode,proto3" json:"Error_code,omitempty"`
	ErrorInfo string `protobuf:"bytes,2,opt,name=Error_info,json=ErrorInfo,proto3" json:"Error_info,omitempty"`
}

func (m *UpdateChannelRestrictedRsp) Reset()         { *m = UpdateChannelRestrictedRsp{} }
func (m *UpdateChannelRestrictedRsp) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelRestrictedRsp) ProtoMessage()    {}
func (*UpdateChannelRestrictedRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{84}
}

func (m *UpdateChannelRestrictedRsp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateChannelRestrictedRsp) GetErrorInfo() string {
	if m != nil {
		return m.ErrorInfo
	}
	return ""
}

// request
type DelChannelKickedLeftReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	FromId    int32 `protobuf:"varint,3,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
}

func (m *DelChannelKickedLeftReq) Reset()         { *m = DelChannelKickedLeftReq{} }
func (m *DelChannelKickedLeftReq) String() string { return proto.CompactTextString(m) }
func (*DelChannelKickedLeftReq) ProtoMessage()    {}
func (*DelChannelKickedLeftReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{85}
}

func (m *DelChannelKickedLeftReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *DelChannelKickedLeftReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelChannelKickedLeftReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

// response
type DelChannelKickedLeftRsp struct {
	ErrorCode ChatResultCode `protobuf:"varint,1,opt,name=Error_code,json=ErrorCode,proto3,enum=groupinfo.ChatResultCode" json:"Error_code,omitempty"`
	ErrorInfo string         `protobuf:"bytes,2,opt,name=Error_info,json=ErrorInfo,proto3" json:"Error_info,omitempty"`
}

func (m *DelChannelKickedLeftRsp) Reset()         { *m = DelChannelKickedLeftRsp{} }
func (m *DelChannelKickedLeftRsp) String() string { return proto.CompactTextString(m) }
func (*DelChannelKickedLeftRsp) ProtoMessage()    {}
func (*DelChannelKickedLeftRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{86}
}

func (m *DelChannelKickedLeftRsp) GetErrorCode() ChatResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return ChatResultCode_Chat_RPC_OK
}

func (m *DelChannelKickedLeftRsp) GetErrorInfo() string {
	if m != nil {
		return m.ErrorInfo
	}
	return ""
}

// rpc GMsGetHotGroups (GetHotGroupsReq) returns (GetHotGroupsRsp) {}
type GetHotGroupIDsReq struct {
	Level int32         `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	Limit int32         `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Hash  uint32        `protobuf:"varint,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *GetHotGroupIDsReq) Reset()         { *m = GetHotGroupIDsReq{} }
func (m *GetHotGroupIDsReq) String() string { return proto.CompactTextString(m) }
func (*GetHotGroupIDsReq) ProtoMessage()    {}
func (*GetHotGroupIDsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{87}
}

func (m *GetHotGroupIDsReq) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GetHotGroupIDsReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetHotGroupIDsReq) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetHotGroupIDsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type HotGroup struct {
	GroupId   int32  `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	GroupType string `protobuf:"bytes,2,opt,name=GroupType,proto3" json:"GroupType,omitempty"`
}

func (m *HotGroup) Reset()                    { *m = HotGroup{} }
func (m *HotGroup) String() string            { return proto.CompactTextString(m) }
func (*HotGroup) ProtoMessage()               {}
func (*HotGroup) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{88} }

func (m *HotGroup) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *HotGroup) GetGroupType() string {
	if m != nil {
		return m.GroupType
	}
	return ""
}

type GetHotGroupIDsRsp struct {
	Errno  int32         `protobuf:"varint,1,opt,name=Errno,proto3" json:"Errno,omitempty"`
	HotArr []*HotGroup   `protobuf:"bytes,2,rep,name=HotArr" json:"HotArr,omitempty"`
	Hash   uint32        `protobuf:"varint,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *GetHotGroupIDsRsp) Reset()         { *m = GetHotGroupIDsRsp{} }
func (m *GetHotGroupIDsRsp) String() string { return proto.CompactTextString(m) }
func (*GetHotGroupIDsRsp) ProtoMessage()    {}
func (*GetHotGroupIDsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{89}
}

func (m *GetHotGroupIDsRsp) GetErrno() int32 {
	if m != nil {
		return m.Errno
	}
	return 0
}

func (m *GetHotGroupIDsRsp) GetHotArr() []*HotGroup {
	if m != nil {
		return m.HotArr
	}
	return nil
}

func (m *GetHotGroupIDsRsp) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetHotGroupIDsRsp) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// rpc GMsGetHotGroupLv (GetHotGroupLvReq) returns (GetHotGroupLvRsp) {}
type GetHotGroupLvReq struct {
	Group int32         `protobuf:"varint,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *GetHotGroupLvReq) Reset()                    { *m = GetHotGroupLvReq{} }
func (m *GetHotGroupLvReq) String() string            { return proto.CompactTextString(m) }
func (*GetHotGroupLvReq) ProtoMessage()               {}
func (*GetHotGroupLvReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{90} }

func (m *GetHotGroupLvReq) GetGroup() int32 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *GetHotGroupLvReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GetHotGroupLvRsp struct {
	Errno int32         `protobuf:"varint,1,opt,name=Errno,proto3" json:"Errno,omitempty"`
	Level int32         `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *GetHotGroupLvRsp) Reset()                    { *m = GetHotGroupLvRsp{} }
func (m *GetHotGroupLvRsp) String() string            { return proto.CompactTextString(m) }
func (*GetHotGroupLvRsp) ProtoMessage()               {}
func (*GetHotGroupLvRsp) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{91} }

func (m *GetHotGroupLvRsp) GetErrno() int32 {
	if m != nil {
		return m.Errno
	}
	return 0
}

func (m *GetHotGroupLvRsp) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GetHotGroupLvRsp) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// rpc GMsSetDiscussionGroup(GMsSetDiscussionGroupReq) returns (GMsSetDiscussionGroupRsp) {}
type GMsSetDiscussionGroupReq struct {
	Broadcast int32         `protobuf:"varint,1,opt,name=Broadcast,proto3" json:"Broadcast,omitempty"`
	Megagroup int32         `protobuf:"varint,2,opt,name=Megagroup,proto3" json:"Megagroup,omitempty"`
	Operation bool          `protobuf:"varint,3,opt,name=Operation,proto3" json:"Operation,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *GMsSetDiscussionGroupReq) Reset()         { *m = GMsSetDiscussionGroupReq{} }
func (m *GMsSetDiscussionGroupReq) String() string { return proto.CompactTextString(m) }
func (*GMsSetDiscussionGroupReq) ProtoMessage()    {}
func (*GMsSetDiscussionGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{92}
}

func (m *GMsSetDiscussionGroupReq) GetBroadcast() int32 {
	if m != nil {
		return m.Broadcast
	}
	return 0
}

func (m *GMsSetDiscussionGroupReq) GetMegagroup() int32 {
	if m != nil {
		return m.Megagroup
	}
	return 0
}

func (m *GMsSetDiscussionGroupReq) GetOperation() bool {
	if m != nil {
		return m.Operation
	}
	return false
}

func (m *GMsSetDiscussionGroupReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GMsSetDiscussionGroupRsp struct {
}

func (m *GMsSetDiscussionGroupRsp) Reset()         { *m = GMsSetDiscussionGroupRsp{} }
func (m *GMsSetDiscussionGroupRsp) String() string { return proto.CompactTextString(m) }
func (*GMsSetDiscussionGroupRsp) ProtoMessage()    {}
func (*GMsSetDiscussionGroupRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{93}
}

func init() {
	proto.RegisterType((*ChannelParticipant)(nil), "groupinfo.ChannelParticipant")
	proto.RegisterType((*ChannelParticipantArr)(nil), "groupinfo.ChannelParticipantArr")
	proto.RegisterType((*InvitedUsers)(nil), "groupinfo.InvitedUsers")
	proto.RegisterType((*AdminRights)(nil), "groupinfo.AdminRights")
	proto.RegisterType((*BannerRights)(nil), "groupinfo.BannerRights")
	proto.RegisterType((*CreateChannelReq)(nil), "groupinfo.CreateChannelReq")
	proto.RegisterType((*ChannelupdatesResp)(nil), "groupinfo.ChannelupdatesResp")
	proto.RegisterType((*GetChannelUpdatesReq)(nil), "groupinfo.GetChannelUpdatesReq")
	proto.RegisterType((*AddChannelUserReq)(nil), "groupinfo.AddChannelUserReq")
	proto.RegisterType((*DelChannelUserReq)(nil), "groupinfo.DelChannelUserReq")
	proto.RegisterType((*UpdateChanAboutReq)(nil), "groupinfo.UpdateChanAboutReq")
	proto.RegisterType((*UpdateChanTitleReq)(nil), "groupinfo.UpdateChanTitleReq")
	proto.RegisterType((*UpdateChanPhotoReq)(nil), "groupinfo.UpdateChanPhotoReq")
	proto.RegisterType((*UpdateChanAdminRightsReq)(nil), "groupinfo.UpdateChanAdminRightsReq")
	proto.RegisterType((*UpdateChanAdminRightsResp)(nil), "groupinfo.UpdateChanAdminRightsResp")
	proto.RegisterType((*UpdateChanHiddenprehistoryReq)(nil), "groupinfo.UpdateChanHiddenprehistoryReq")
	proto.RegisterType((*UpdateChanBanRightsReq)(nil), "groupinfo.UpdateChanBanRightsReq")
	proto.RegisterType((*DismissChannelReq)(nil), "groupinfo.DismissChannelReq")
	proto.RegisterType((*DismissChannelResp)(nil), "groupinfo.DismissChannelResp")
	proto.RegisterType((*ParticipantLimitReq)(nil), "groupinfo.ParticipantLimitReq")
	proto.RegisterType((*ParticipantLimitResp)(nil), "groupinfo.ParticipantLimitResp")
	proto.RegisterType((*GetChannelOnePartReq)(nil), "groupinfo.GetChannelOnePartReq")
	proto.RegisterType((*GetChannelOnePartResp)(nil), "groupinfo.GetChannelOnePartResp")
	proto.RegisterType((*GetChannelUsersIdReq)(nil), "groupinfo.GetChannelUsersIdReq")
	proto.RegisterType((*GetChannelUsersIdResp)(nil), "groupinfo.GetChannelUsersIdResp")
	proto.RegisterType((*GetChannelBaseInfoReq)(nil), "groupinfo.GetChannelBaseInfoReq")
	proto.RegisterType((*GetChannelBaseInfoResp)(nil), "groupinfo.GetChannelBaseInfoResp")
	proto.RegisterType((*GetChannelInfoReq)(nil), "groupinfo.GetChannelInfoReq")
	proto.RegisterType((*GetChannelInfoResp)(nil), "groupinfo.GetChannelInfoResp")
	proto.RegisterType((*BatchChannelBaseInfoReq)(nil), "groupinfo.BatchChannelBaseInfoReq")
	proto.RegisterType((*BatchChannelBaseInfoResp)(nil), "groupinfo.BatchChannelBaseInfoResp")
	proto.RegisterType((*GetChanByLinkReq)(nil), "groupinfo.GetChanByLinkReq")
	proto.RegisterType((*GetChanInfoByLinkOrUserNameReq)(nil), "groupinfo.GetChanInfoByLinkOrUserNameReq")
	proto.RegisterType((*GetFullChannelInfoReq)(nil), "groupinfo.GetFullChannelInfoReq")
	proto.RegisterType((*GetFullChannelInfoResp)(nil), "groupinfo.GetFullChannelInfoResp")
	proto.RegisterType((*ToggleInviteReq)(nil), "groupinfo.ToggleInviteReq")
	proto.RegisterType((*CreateChannelLinkReq)(nil), "groupinfo.CreateChannelLinkReq")
	proto.RegisterType((*CreateChannelLinkResp)(nil), "groupinfo.CreateChannelLinkResp")
	proto.RegisterType((*CheckChannelInviteLinkReq)(nil), "groupinfo.CheckChannelInviteLinkReq")
	proto.RegisterType((*CheckChannelInviteLinkResp)(nil), "groupinfo.CheckChannelInviteLinkResp")
	proto.RegisterType((*UpdateChannelUserNameReq)(nil), "groupinfo.UpdateChannelUserNameReq")
	proto.RegisterType((*UpdateChannelUserNameResp)(nil), "groupinfo.UpdateChannelUserNameResp")
	proto.RegisterType((*UpdateChannelPinnedMsgIdReq)(nil), "groupinfo.UpdateChannelPinnedMsgIdReq")
	proto.RegisterType((*UpdateChannelPinnedMsgIdResp)(nil), "groupinfo.UpdateChannelPinnedMsgIdResp")
	proto.RegisterType((*CheckUserNameReq)(nil), "groupinfo.CheckUserNameReq")
	proto.RegisterType((*CheckUserNameResp)(nil), "groupinfo.CheckUserNameResp")
	proto.RegisterType((*CheckChannelIsEncryReq)(nil), "groupinfo.CheckChannelIsEncryReq")
	proto.RegisterType((*CheckChannelIsEncryResp)(nil), "groupinfo.CheckChannelIsEncryResp")
	proto.RegisterType((*GetAllChannelInfoByUserIdReq)(nil), "groupinfo.GetAllChannelInfoByUserIdReq")
	proto.RegisterType((*GetAllChannelInfoByUserIdResp)(nil), "groupinfo.GetAllChannelInfoByUserIdResp")
	proto.RegisterType((*EveryoneQuietReq)(nil), "groupinfo.EveryoneQuietReq")
	proto.RegisterType((*EditPrivateChatReq)(nil), "groupinfo.EditPrivateChatReq")
	proto.RegisterType((*UpdateChannelCommonResp)(nil), "groupinfo.UpdateChannelCommonResp")
	proto.RegisterType((*SetChannelCreatorReq)(nil), "groupinfo.SetChannelCreatorReq")
	proto.RegisterType((*ResetUserAllCreateGroupsReq)(nil), "groupinfo.ResetUserAllCreateGroupsReq")
	proto.RegisterType((*ResetUserAllCreateGroupsResp)(nil), "groupinfo.ResetUserAllCreateGroupsResp")
	proto.RegisterType((*GetChannelBotIdsReq)(nil), "groupinfo.GetChannelBotIdsReq")
	proto.RegisterType((*GetChannelBotIdsResp)(nil), "groupinfo.GetChannelBotIdsResp")
	proto.RegisterType((*GetChannelActiveUserIdsReq)(nil), "groupinfo.GetChannelActiveUserIdsReq")
	proto.RegisterType((*GetChannelActiveUserIdsResp)(nil), "groupinfo.GetChannelActiveUserIdsResp")
	proto.RegisterType((*CheckUserInChannelReq)(nil), "groupinfo.CheckUserInChannelReq")
	proto.RegisterType((*CheckUserInChannelResp)(nil), "groupinfo.CheckUserInChannelResp")
	proto.RegisterType((*UpdateChannelVerifyReq)(nil), "groupinfo.UpdateChannelVerifyReq")
	proto.RegisterType((*UpdateChannelVerifyResp)(nil), "groupinfo.UpdateChannelVerifyResp")
	proto.RegisterType((*ChannelLocation)(nil), "groupinfo.channelLocation")
	proto.RegisterType((*UpdateChannelGeoReq)(nil), "groupinfo.UpdateChannelGeoReq")
	proto.RegisterType((*UpdateChannelGeoResp)(nil), "groupinfo.UpdateChannelGeoResp")
	proto.RegisterType((*BoolResult)(nil), "groupinfo.BoolResult")
	proto.RegisterType((*UpdateChannelBannedRightsReq)(nil), "groupinfo.UpdateChannelBannedRightsReq")
	proto.RegisterType((*UpdateChannelBannedRightsRsp)(nil), "groupinfo.UpdateChannelBannedRightsRsp")
	proto.RegisterType((*GetChnlAndMembInfoReq)(nil), "groupinfo.GetChnlAndMembInfoReq")
	proto.RegisterType((*GetChnlAndMembInfoRsp)(nil), "groupinfo.GetChnlAndMembInfoRsp")
	proto.RegisterType((*SetChnlSlowModeReq)(nil), "groupinfo.SetChnlSlowModeReq")
	proto.RegisterType((*SetChnlSlowModeRsp)(nil), "groupinfo.SetChnlSlowModeRsp")
	proto.RegisterType((*SetChnlGeoReq)(nil), "groupinfo.SetChnlGeoReq")
	proto.RegisterType((*SetChnlGeoRsp)(nil), "groupinfo.SetChnlGeoRsp")
	proto.RegisterType((*ToggleSignaturesReq)(nil), "groupinfo.ToggleSignaturesReq")
	proto.RegisterType((*ToggleSignaturesRsp)(nil), "groupinfo.ToggleSignaturesRsp")
	proto.RegisterType((*GroupUpdateBanModeReq)(nil), "groupinfo.GroupUpdateBanModeReq")
	proto.RegisterType((*GroupUpdateBanModeRsp)(nil), "groupinfo.GroupUpdateBanModeRsp")
	proto.RegisterType((*GroupGetUserOwnChannelsReq)(nil), "groupinfo.GroupGetUserOwnChannelsReq")
	proto.RegisterType((*ChannelBrief)(nil), "groupinfo.ChannelBrief")
	proto.RegisterType((*GroupGetUserOwnChannelsRsp)(nil), "groupinfo.GroupGetUserOwnChannelsRsp")
	proto.RegisterType((*UpdateChannelRestrictedReq)(nil), "groupinfo.UpdateChannelRestrictedReq")
	proto.RegisterType((*UpdateChannelRestrictedRsp)(nil), "groupinfo.UpdateChannelRestrictedRsp")
	proto.RegisterType((*DelChannelKickedLeftReq)(nil), "groupinfo.DelChannelKickedLeftReq")
	proto.RegisterType((*DelChannelKickedLeftRsp)(nil), "groupinfo.DelChannelKickedLeftRsp")
	proto.RegisterType((*GetHotGroupIDsReq)(nil), "groupinfo.GetHotGroupIDsReq")
	proto.RegisterType((*HotGroup)(nil), "groupinfo.HotGroup")
	proto.RegisterType((*GetHotGroupIDsRsp)(nil), "groupinfo.GetHotGroupIDsRsp")
	proto.RegisterType((*GetHotGroupLvReq)(nil), "groupinfo.GetHotGroupLvReq")
	proto.RegisterType((*GetHotGroupLvRsp)(nil), "groupinfo.GetHotGroupLvRsp")
	proto.RegisterType((*GMsSetDiscussionGroupReq)(nil), "groupinfo.GMsSetDiscussionGroupReq")
	proto.RegisterType((*GMsSetDiscussionGroupRsp)(nil), "groupinfo.GMsSetDiscussionGroupRsp")
	proto.RegisterEnum("groupinfo.UpdateChannelGeoResp_ErrorCode", UpdateChannelGeoResp_ErrorCode_name, UpdateChannelGeoResp_ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChannelServerService service

type ChannelServerServiceClient interface {
	// 修改群的地理位置坐标
	UpdateChannelGeo(ctx context.Context, in *UpdateChannelGeoReq, opts ...grpc.CallOption) (*UpdateChannelGeoResp, error)
	// 创建频道
	CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 获取channel信息
	GetChannelUpdatesInfo(ctx context.Context, in *GetChannelUpdatesReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 添加群成员
	AddChannelUser(ctx context.Context, in *AddChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 删除群成员
	DelChannelUser(ctx context.Context, in *DelChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 编辑about
	EditChannelAbout(ctx context.Context, in *UpdateChanAboutReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 编辑title
	EditChannelTitle(ctx context.Context, in *UpdateChanTitleReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 编辑photo
	EditChannelPhoto(ctx context.Context, in *UpdateChanPhotoReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 编辑管理员权限
	EditChanAdminRights(ctx context.Context, in *UpdateChanAdminRightsReq, opts ...grpc.CallOption) (*UpdateChanAdminRightsResp, error)
	// 编辑ban权限
	EditChanBanRights(ctx context.Context, in *UpdateChanBanRightsReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 编辑歷史紀錄對新用戶可見或不可見
	EditChannelHiddenprehistory(ctx context.Context, in *UpdateChanHiddenprehistoryReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 解散channel
	DismissChannel(ctx context.Context, in *DismissChannelReq, opts ...grpc.CallOption) (*DismissChannelResp, error)
	// 根据偏移获取
	GetParticipantLimitReq(ctx context.Context, in *ParticipantLimitReq, opts ...grpc.CallOption) (*ParticipantLimitResp, error)
	// 获取单个信息
	GetChanOneParticipantReq(ctx context.Context, in *GetChannelOnePartReq, opts ...grpc.CallOption) (*GetChannelOnePartResp, error)
	// 获取所有用户Id
	GetChanUsersId(ctx context.Context, in *GetChannelUsersIdReq, opts ...grpc.CallOption) (*GetChannelUsersIdResp, error)
	// 获取channel基本信息
	GetChannelBaseInfo(ctx context.Context, in *GetChannelBaseInfoReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error)
	// 获取channel信息 不带user信息
	GetChannelInfo(ctx context.Context, in *GetChannelInfoReq, opts ...grpc.CallOption) (*GetChannelInfoResp, error)
	// 批量获取channel基本信息
	GetBatchChanBaseInfo(ctx context.Context, in *BatchChannelBaseInfoReq, opts ...grpc.CallOption) (*BatchChannelBaseInfoResp, error)
	// 根据link获取
	GetChanInfoByLink(ctx context.Context, in *GetChanByLinkReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error)
	// 获取全部信息
	GetChannelFullInfo(ctx context.Context, in *GetFullChannelInfoReq, opts ...grpc.CallOption) (*GetFullChannelInfoResp, error)
	// 切换邀请成员规则
	ToggleInvite(ctx context.Context, in *ToggleInviteReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 生成群邀请链接
	CreateChannelLink(ctx context.Context, in *CreateChannelLinkReq, opts ...grpc.CallOption) (*CreateChannelLinkResp, error)
	// 校验邀请链接合法
	CheckChannelInviteLink(ctx context.Context, in *CheckChannelInviteLinkReq, opts ...grpc.CallOption) (*CheckChannelInviteLinkResp, error)
	// 更新channel userName
	UpdateChannelUserName(ctx context.Context, in *UpdateChannelUserNameReq, opts ...grpc.CallOption) (*UpdateChannelUserNameResp, error)
	// 更新channel置顶消息
	UpdateChannelPinnedMsgId(ctx context.Context, in *UpdateChannelPinnedMsgIdReq, opts ...grpc.CallOption) (*UpdateChannelPinnedMsgIdResp, error)
	// 检查userName是否可用
	CheckUserName(ctx context.Context, in *CheckUserNameReq, opts ...grpc.CallOption) (*CheckUserNameResp, error)
	// 检查是否是加密群
	CheckChannelIsEncry(ctx context.Context, in *CheckChannelIsEncryReq, opts ...grpc.CallOption) (*CheckChannelIsEncryResp, error)
	// --------------------groupinfo 独立后新增接口--------------------------
	// 根据userid获取所有的普通群信息
	GetAllChannelInfoByUserId(ctx context.Context, in *GetAllChannelInfoByUserIdReq, opts ...grpc.CallOption) (*GetAllChannelInfoByUserIdResp, error)
	// 编辑全体禁言状态
	UpdateEveryoneQuiet(ctx context.Context, in *EveryoneQuietReq, opts ...grpc.CallOption) (*UpdateChannelCommonResp, error)
	// 编辑禁止私聊状态
	UpdatePrivateChat(ctx context.Context, in *EditPrivateChatReq, opts ...grpc.CallOption) (*UpdateChannelCommonResp, error)
	// 变更超级群创建者
	SetChannelCreator(ctx context.Context, in *SetChannelCreatorReq, opts ...grpc.CallOption) (*UpdateChannelCommonResp, error)
	// 重置用户所有创建群的创建者
	ResetUserAllCreateGroups(ctx context.Context, in *ResetUserAllCreateGroupsReq, opts ...grpc.CallOption) (*ResetUserAllCreateGroupsResp, error)
	// 获取机器人ID
	GetChannelBotIds(ctx context.Context, in *GetChannelBotIdsReq, opts ...grpc.CallOption) (*GetChannelBotIdsResp, error)
	// 获取活跃用户ID
	GetChannelActiveUserIds(ctx context.Context, in *GetChannelActiveUserIdsReq, opts ...grpc.CallOption) (*GetChannelActiveUserIdsResp, error)
	// 判断超级群成员是否存在
	CheckUserInChannel(ctx context.Context, in *CheckUserInChannelReq, opts ...grpc.CallOption) (*CheckUserInChannelResp, error)
	// 超级群官方认证
	UpdateChannelVerify(ctx context.Context, in *UpdateChannelVerifyReq, opts ...grpc.CallOption) (*UpdateChannelVerifyResp, error)
	// @ bgn add for update channel's banned rights by qingsong at 2019-10-28
	UpdateChannelBannedRights(ctx context.Context, in *UpdateChannelBannedRightsReq, opts ...grpc.CallOption) (*UpdateChannelBannedRightsRsp, error)
	// @ bgn add by qingsong at 2019-11-04 for get channel base info , channel member info
	GetChnlAndMembInfo(ctx context.Context, in *GetChnlAndMembInfoReq, opts ...grpc.CallOption) (*GetChnlAndMembInfoRsp, error)
	// @ bgn add by qingsong at 2019-11-05 for set channel slow mode.
	SetChnlSlowMode(ctx context.Context, in *SetChnlSlowModeReq, opts ...grpc.CallOption) (*SetChnlSlowModeRsp, error)
	// @ add by qingsong at 2019-11-12 for set channel Geo
	SetChnlGeo(ctx context.Context, in *SetChnlGeoReq, opts ...grpc.CallOption) (*SetChnlGeoRsp, error)
	// @ add by qingsong at 2019-11-21 for channel toggle signatures
	ToggleSignatures(ctx context.Context, in *ToggleSignaturesReq, opts ...grpc.CallOption) (*ToggleSignaturesRsp, error)
	// @ add by qingsong at 2019-12-23 for channel set setParticipantBanMode
	GroupUpdateBanMode(ctx context.Context, in *GroupUpdateBanModeReq, opts ...grpc.CallOption) (*GroupUpdateBanModeRsp, error)
	// @ add by qingsong at 2019-12-27 for get user own channels.
	GroupGetUserOwnChannels(ctx context.Context, in *GroupGetUserOwnChannelsReq, opts ...grpc.CallOption) (*GroupGetUserOwnChannelsRsp, error)
	// @ bgn add by zcl at 2020-4-18 for update chat_channel restricted
	UpdateChannelRestricted(ctx context.Context, in *UpdateChannelRestrictedReq, opts ...grpc.CallOption) (*UpdateChannelRestrictedRsp, error)
	// @ bgn add by zcl at 2020-4-23 for delete channel_kicked_left where channel_id,user_id
	DelChannelKickedLeft(ctx context.Context, in *DelChannelKickedLeftReq, opts ...grpc.CallOption) (*DelChannelKickedLeftRsp, error)
	// 根据link获取私有群，公有基本信息
	GetChanInfoByLinkOrUserName(ctx context.Context, in *GetChanInfoByLinkOrUserNameReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error)
	// @ add by qingsong 2020-06-03 for get hot groups.
	GMsGetHotGroupIDs(ctx context.Context, in *GetHotGroupIDsReq, opts ...grpc.CallOption) (*GetHotGroupIDsRsp, error)
	// @ add by qingsong 2020-07-06 for get hot group level.
	GMsGetHotGroupLv(ctx context.Context, in *GetHotGroupLvReq, opts ...grpc.CallOption) (*GetHotGroupLvRsp, error)
	// @ add by qingsong at 2020.10.20 for set discussion group.
	GMsSetDiscussionGroup(ctx context.Context, in *GMsSetDiscussionGroupReq, opts ...grpc.CallOption) (*GMsSetDiscussionGroupRsp, error)
}

type channelServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewChannelServerServiceClient(cc *grpc.ClientConn) ChannelServerServiceClient {
	return &channelServerServiceClient{cc}
}

func (c *channelServerServiceClient) UpdateChannelGeo(ctx context.Context, in *UpdateChannelGeoReq, opts ...grpc.CallOption) (*UpdateChannelGeoResp, error) {
	out := new(UpdateChannelGeoResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdateChannelGeo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/CreateChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelUpdatesInfo(ctx context.Context, in *GetChannelUpdatesReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChannelUpdatesInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) AddChannelUser(ctx context.Context, in *AddChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/AddChannelUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) DelChannelUser(ctx context.Context, in *DelChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/DelChannelUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChannelAbout(ctx context.Context, in *UpdateChanAboutReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/EditChannelAbout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChannelTitle(ctx context.Context, in *UpdateChanTitleReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/EditChannelTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChannelPhoto(ctx context.Context, in *UpdateChanPhotoReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/EditChannelPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChanAdminRights(ctx context.Context, in *UpdateChanAdminRightsReq, opts ...grpc.CallOption) (*UpdateChanAdminRightsResp, error) {
	out := new(UpdateChanAdminRightsResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/EditChanAdminRights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChanBanRights(ctx context.Context, in *UpdateChanBanRightsReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/EditChanBanRights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChannelHiddenprehistory(ctx context.Context, in *UpdateChanHiddenprehistoryReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/EditChannelHiddenprehistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) DismissChannel(ctx context.Context, in *DismissChannelReq, opts ...grpc.CallOption) (*DismissChannelResp, error) {
	out := new(DismissChannelResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/DismissChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetParticipantLimitReq(ctx context.Context, in *ParticipantLimitReq, opts ...grpc.CallOption) (*ParticipantLimitResp, error) {
	out := new(ParticipantLimitResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GetParticipantLimitReq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChanOneParticipantReq(ctx context.Context, in *GetChannelOnePartReq, opts ...grpc.CallOption) (*GetChannelOnePartResp, error) {
	out := new(GetChannelOnePartResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChanOneParticipantReq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChanUsersId(ctx context.Context, in *GetChannelUsersIdReq, opts ...grpc.CallOption) (*GetChannelUsersIdResp, error) {
	out := new(GetChannelUsersIdResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChanUsersId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelBaseInfo(ctx context.Context, in *GetChannelBaseInfoReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error) {
	out := new(GetChannelBaseInfoResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChannelBaseInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelInfo(ctx context.Context, in *GetChannelInfoReq, opts ...grpc.CallOption) (*GetChannelInfoResp, error) {
	out := new(GetChannelInfoResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChannelInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetBatchChanBaseInfo(ctx context.Context, in *BatchChannelBaseInfoReq, opts ...grpc.CallOption) (*BatchChannelBaseInfoResp, error) {
	out := new(BatchChannelBaseInfoResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GetBatchChanBaseInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChanInfoByLink(ctx context.Context, in *GetChanByLinkReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error) {
	out := new(GetChannelBaseInfoResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChanInfoByLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelFullInfo(ctx context.Context, in *GetFullChannelInfoReq, opts ...grpc.CallOption) (*GetFullChannelInfoResp, error) {
	out := new(GetFullChannelInfoResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChannelFullInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) ToggleInvite(ctx context.Context, in *ToggleInviteReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/ToggleInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CreateChannelLink(ctx context.Context, in *CreateChannelLinkReq, opts ...grpc.CallOption) (*CreateChannelLinkResp, error) {
	out := new(CreateChannelLinkResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/CreateChannelLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CheckChannelInviteLink(ctx context.Context, in *CheckChannelInviteLinkReq, opts ...grpc.CallOption) (*CheckChannelInviteLinkResp, error) {
	out := new(CheckChannelInviteLinkResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/CheckChannelInviteLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelUserName(ctx context.Context, in *UpdateChannelUserNameReq, opts ...grpc.CallOption) (*UpdateChannelUserNameResp, error) {
	out := new(UpdateChannelUserNameResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdateChannelUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelPinnedMsgId(ctx context.Context, in *UpdateChannelPinnedMsgIdReq, opts ...grpc.CallOption) (*UpdateChannelPinnedMsgIdResp, error) {
	out := new(UpdateChannelPinnedMsgIdResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdateChannelPinnedMsgId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CheckUserName(ctx context.Context, in *CheckUserNameReq, opts ...grpc.CallOption) (*CheckUserNameResp, error) {
	out := new(CheckUserNameResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/CheckUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CheckChannelIsEncry(ctx context.Context, in *CheckChannelIsEncryReq, opts ...grpc.CallOption) (*CheckChannelIsEncryResp, error) {
	out := new(CheckChannelIsEncryResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/CheckChannelIsEncry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetAllChannelInfoByUserId(ctx context.Context, in *GetAllChannelInfoByUserIdReq, opts ...grpc.CallOption) (*GetAllChannelInfoByUserIdResp, error) {
	out := new(GetAllChannelInfoByUserIdResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GetAllChannelInfoByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateEveryoneQuiet(ctx context.Context, in *EveryoneQuietReq, opts ...grpc.CallOption) (*UpdateChannelCommonResp, error) {
	out := new(UpdateChannelCommonResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdateEveryoneQuiet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdatePrivateChat(ctx context.Context, in *EditPrivateChatReq, opts ...grpc.CallOption) (*UpdateChannelCommonResp, error) {
	out := new(UpdateChannelCommonResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdatePrivateChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) SetChannelCreator(ctx context.Context, in *SetChannelCreatorReq, opts ...grpc.CallOption) (*UpdateChannelCommonResp, error) {
	out := new(UpdateChannelCommonResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/SetChannelCreator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) ResetUserAllCreateGroups(ctx context.Context, in *ResetUserAllCreateGroupsReq, opts ...grpc.CallOption) (*ResetUserAllCreateGroupsResp, error) {
	out := new(ResetUserAllCreateGroupsResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/ResetUserAllCreateGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelBotIds(ctx context.Context, in *GetChannelBotIdsReq, opts ...grpc.CallOption) (*GetChannelBotIdsResp, error) {
	out := new(GetChannelBotIdsResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChannelBotIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelActiveUserIds(ctx context.Context, in *GetChannelActiveUserIdsReq, opts ...grpc.CallOption) (*GetChannelActiveUserIdsResp, error) {
	out := new(GetChannelActiveUserIdsResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChannelActiveUserIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CheckUserInChannel(ctx context.Context, in *CheckUserInChannelReq, opts ...grpc.CallOption) (*CheckUserInChannelResp, error) {
	out := new(CheckUserInChannelResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/CheckUserInChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelVerify(ctx context.Context, in *UpdateChannelVerifyReq, opts ...grpc.CallOption) (*UpdateChannelVerifyResp, error) {
	out := new(UpdateChannelVerifyResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdateChannelVerify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelBannedRights(ctx context.Context, in *UpdateChannelBannedRightsReq, opts ...grpc.CallOption) (*UpdateChannelBannedRightsRsp, error) {
	out := new(UpdateChannelBannedRightsRsp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdateChannelBannedRights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChnlAndMembInfo(ctx context.Context, in *GetChnlAndMembInfoReq, opts ...grpc.CallOption) (*GetChnlAndMembInfoRsp, error) {
	out := new(GetChnlAndMembInfoRsp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChnlAndMembInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) SetChnlSlowMode(ctx context.Context, in *SetChnlSlowModeReq, opts ...grpc.CallOption) (*SetChnlSlowModeRsp, error) {
	out := new(SetChnlSlowModeRsp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/SetChnlSlowMode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) SetChnlGeo(ctx context.Context, in *SetChnlGeoReq, opts ...grpc.CallOption) (*SetChnlGeoRsp, error) {
	out := new(SetChnlGeoRsp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/SetChnlGeo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) ToggleSignatures(ctx context.Context, in *ToggleSignaturesReq, opts ...grpc.CallOption) (*ToggleSignaturesRsp, error) {
	out := new(ToggleSignaturesRsp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/ToggleSignatures", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GroupUpdateBanMode(ctx context.Context, in *GroupUpdateBanModeReq, opts ...grpc.CallOption) (*GroupUpdateBanModeRsp, error) {
	out := new(GroupUpdateBanModeRsp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GroupUpdateBanMode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GroupGetUserOwnChannels(ctx context.Context, in *GroupGetUserOwnChannelsReq, opts ...grpc.CallOption) (*GroupGetUserOwnChannelsRsp, error) {
	out := new(GroupGetUserOwnChannelsRsp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GroupGetUserOwnChannels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelRestricted(ctx context.Context, in *UpdateChannelRestrictedReq, opts ...grpc.CallOption) (*UpdateChannelRestrictedRsp, error) {
	out := new(UpdateChannelRestrictedRsp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdateChannelRestricted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) DelChannelKickedLeft(ctx context.Context, in *DelChannelKickedLeftReq, opts ...grpc.CallOption) (*DelChannelKickedLeftRsp, error) {
	out := new(DelChannelKickedLeftRsp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/DelChannelKickedLeft", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChanInfoByLinkOrUserName(ctx context.Context, in *GetChanInfoByLinkOrUserNameReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error) {
	out := new(GetChannelBaseInfoResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChanInfoByLinkOrUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GMsGetHotGroupIDs(ctx context.Context, in *GetHotGroupIDsReq, opts ...grpc.CallOption) (*GetHotGroupIDsRsp, error) {
	out := new(GetHotGroupIDsRsp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GMsGetHotGroupIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GMsGetHotGroupLv(ctx context.Context, in *GetHotGroupLvReq, opts ...grpc.CallOption) (*GetHotGroupLvRsp, error) {
	out := new(GetHotGroupLvRsp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GMsGetHotGroupLv", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GMsSetDiscussionGroup(ctx context.Context, in *GMsSetDiscussionGroupReq, opts ...grpc.CallOption) (*GMsSetDiscussionGroupRsp, error) {
	out := new(GMsSetDiscussionGroupRsp)
	err := grpc.Invoke(ctx, "/groupinfo.ChannelServerService/GMsSetDiscussionGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChannelServerService service

type ChannelServerServiceServer interface {
	// 修改群的地理位置坐标
	UpdateChannelGeo(context.Context, *UpdateChannelGeoReq) (*UpdateChannelGeoResp, error)
	// 创建频道
	CreateChannel(context.Context, *CreateChannelReq) (*ChannelupdatesResp, error)
	// 获取channel信息
	GetChannelUpdatesInfo(context.Context, *GetChannelUpdatesReq) (*ChannelupdatesResp, error)
	// 添加群成员
	AddChannelUser(context.Context, *AddChannelUserReq) (*ChannelupdatesResp, error)
	// 删除群成员
	DelChannelUser(context.Context, *DelChannelUserReq) (*ChannelupdatesResp, error)
	// 编辑about
	EditChannelAbout(context.Context, *UpdateChanAboutReq) (*ChannelupdatesResp, error)
	// 编辑title
	EditChannelTitle(context.Context, *UpdateChanTitleReq) (*ChannelupdatesResp, error)
	// 编辑photo
	EditChannelPhoto(context.Context, *UpdateChanPhotoReq) (*ChannelupdatesResp, error)
	// 编辑管理员权限
	EditChanAdminRights(context.Context, *UpdateChanAdminRightsReq) (*UpdateChanAdminRightsResp, error)
	// 编辑ban权限
	EditChanBanRights(context.Context, *UpdateChanBanRightsReq) (*ChannelupdatesResp, error)
	// 编辑歷史紀錄對新用戶可見或不可見
	EditChannelHiddenprehistory(context.Context, *UpdateChanHiddenprehistoryReq) (*ChannelupdatesResp, error)
	// 解散channel
	DismissChannel(context.Context, *DismissChannelReq) (*DismissChannelResp, error)
	// 根据偏移获取
	GetParticipantLimitReq(context.Context, *ParticipantLimitReq) (*ParticipantLimitResp, error)
	// 获取单个信息
	GetChanOneParticipantReq(context.Context, *GetChannelOnePartReq) (*GetChannelOnePartResp, error)
	// 获取所有用户Id
	GetChanUsersId(context.Context, *GetChannelUsersIdReq) (*GetChannelUsersIdResp, error)
	// 获取channel基本信息
	GetChannelBaseInfo(context.Context, *GetChannelBaseInfoReq) (*GetChannelBaseInfoResp, error)
	// 获取channel信息 不带user信息
	GetChannelInfo(context.Context, *GetChannelInfoReq) (*GetChannelInfoResp, error)
	// 批量获取channel基本信息
	GetBatchChanBaseInfo(context.Context, *BatchChannelBaseInfoReq) (*BatchChannelBaseInfoResp, error)
	// 根据link获取
	GetChanInfoByLink(context.Context, *GetChanByLinkReq) (*GetChannelBaseInfoResp, error)
	// 获取全部信息
	GetChannelFullInfo(context.Context, *GetFullChannelInfoReq) (*GetFullChannelInfoResp, error)
	// 切换邀请成员规则
	ToggleInvite(context.Context, *ToggleInviteReq) (*ChannelupdatesResp, error)
	// 生成群邀请链接
	CreateChannelLink(context.Context, *CreateChannelLinkReq) (*CreateChannelLinkResp, error)
	// 校验邀请链接合法
	CheckChannelInviteLink(context.Context, *CheckChannelInviteLinkReq) (*CheckChannelInviteLinkResp, error)
	// 更新channel userName
	UpdateChannelUserName(context.Context, *UpdateChannelUserNameReq) (*UpdateChannelUserNameResp, error)
	// 更新channel置顶消息
	UpdateChannelPinnedMsgId(context.Context, *UpdateChannelPinnedMsgIdReq) (*UpdateChannelPinnedMsgIdResp, error)
	// 检查userName是否可用
	CheckUserName(context.Context, *CheckUserNameReq) (*CheckUserNameResp, error)
	// 检查是否是加密群
	CheckChannelIsEncry(context.Context, *CheckChannelIsEncryReq) (*CheckChannelIsEncryResp, error)
	// --------------------groupinfo 独立后新增接口--------------------------
	// 根据userid获取所有的普通群信息
	GetAllChannelInfoByUserId(context.Context, *GetAllChannelInfoByUserIdReq) (*GetAllChannelInfoByUserIdResp, error)
	// 编辑全体禁言状态
	UpdateEveryoneQuiet(context.Context, *EveryoneQuietReq) (*UpdateChannelCommonResp, error)
	// 编辑禁止私聊状态
	UpdatePrivateChat(context.Context, *EditPrivateChatReq) (*UpdateChannelCommonResp, error)
	// 变更超级群创建者
	SetChannelCreator(context.Context, *SetChannelCreatorReq) (*UpdateChannelCommonResp, error)
	// 重置用户所有创建群的创建者
	ResetUserAllCreateGroups(context.Context, *ResetUserAllCreateGroupsReq) (*ResetUserAllCreateGroupsResp, error)
	// 获取机器人ID
	GetChannelBotIds(context.Context, *GetChannelBotIdsReq) (*GetChannelBotIdsResp, error)
	// 获取活跃用户ID
	GetChannelActiveUserIds(context.Context, *GetChannelActiveUserIdsReq) (*GetChannelActiveUserIdsResp, error)
	// 判断超级群成员是否存在
	CheckUserInChannel(context.Context, *CheckUserInChannelReq) (*CheckUserInChannelResp, error)
	// 超级群官方认证
	UpdateChannelVerify(context.Context, *UpdateChannelVerifyReq) (*UpdateChannelVerifyResp, error)
	// @ bgn add for update channel's banned rights by qingsong at 2019-10-28
	UpdateChannelBannedRights(context.Context, *UpdateChannelBannedRightsReq) (*UpdateChannelBannedRightsRsp, error)
	// @ bgn add by qingsong at 2019-11-04 for get channel base info , channel member info
	GetChnlAndMembInfo(context.Context, *GetChnlAndMembInfoReq) (*GetChnlAndMembInfoRsp, error)
	// @ bgn add by qingsong at 2019-11-05 for set channel slow mode.
	SetChnlSlowMode(context.Context, *SetChnlSlowModeReq) (*SetChnlSlowModeRsp, error)
	// @ add by qingsong at 2019-11-12 for set channel Geo
	SetChnlGeo(context.Context, *SetChnlGeoReq) (*SetChnlGeoRsp, error)
	// @ add by qingsong at 2019-11-21 for channel toggle signatures
	ToggleSignatures(context.Context, *ToggleSignaturesReq) (*ToggleSignaturesRsp, error)
	// @ add by qingsong at 2019-12-23 for channel set setParticipantBanMode
	GroupUpdateBanMode(context.Context, *GroupUpdateBanModeReq) (*GroupUpdateBanModeRsp, error)
	// @ add by qingsong at 2019-12-27 for get user own channels.
	GroupGetUserOwnChannels(context.Context, *GroupGetUserOwnChannelsReq) (*GroupGetUserOwnChannelsRsp, error)
	// @ bgn add by zcl at 2020-4-18 for update chat_channel restricted
	UpdateChannelRestricted(context.Context, *UpdateChannelRestrictedReq) (*UpdateChannelRestrictedRsp, error)
	// @ bgn add by zcl at 2020-4-23 for delete channel_kicked_left where channel_id,user_id
	DelChannelKickedLeft(context.Context, *DelChannelKickedLeftReq) (*DelChannelKickedLeftRsp, error)
	// 根据link获取私有群，公有基本信息
	GetChanInfoByLinkOrUserName(context.Context, *GetChanInfoByLinkOrUserNameReq) (*GetChannelBaseInfoResp, error)
	// @ add by qingsong 2020-06-03 for get hot groups.
	GMsGetHotGroupIDs(context.Context, *GetHotGroupIDsReq) (*GetHotGroupIDsRsp, error)
	// @ add by qingsong 2020-07-06 for get hot group level.
	GMsGetHotGroupLv(context.Context, *GetHotGroupLvReq) (*GetHotGroupLvRsp, error)
	// @ add by qingsong at 2020.10.20 for set discussion group.
	GMsSetDiscussionGroup(context.Context, *GMsSetDiscussionGroupReq) (*GMsSetDiscussionGroupRsp, error)
}

func RegisterChannelServerServiceServer(s *grpc.Server, srv ChannelServerServiceServer) {
	s.RegisterService(&_ChannelServerService_serviceDesc, srv)
}

func _ChannelServerService_UpdateChannelGeo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelGeoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelGeo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdateChannelGeo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelGeo(ctx, req.(*UpdateChannelGeoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CreateChannel(ctx, req.(*CreateChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelUpdatesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelUpdatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelUpdatesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChannelUpdatesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelUpdatesInfo(ctx, req.(*GetChannelUpdatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_AddChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChannelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).AddChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/AddChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).AddChannelUser(ctx, req.(*AddChannelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_DelChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChannelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).DelChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/DelChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).DelChannelUser(ctx, req.(*DelChannelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChannelAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanAboutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChannelAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/EditChannelAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChannelAbout(ctx, req.(*UpdateChanAboutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChannelTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanTitleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChannelTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/EditChannelTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChannelTitle(ctx, req.(*UpdateChanTitleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChannelPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanPhotoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChannelPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/EditChannelPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChannelPhoto(ctx, req.(*UpdateChanPhotoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChanAdminRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanAdminRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChanAdminRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/EditChanAdminRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChanAdminRights(ctx, req.(*UpdateChanAdminRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChanBanRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanBanRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChanBanRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/EditChanBanRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChanBanRights(ctx, req.(*UpdateChanBanRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChannelHiddenprehistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanHiddenprehistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChannelHiddenprehistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/EditChannelHiddenprehistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChannelHiddenprehistory(ctx, req.(*UpdateChanHiddenprehistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_DismissChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DismissChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).DismissChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/DismissChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).DismissChannel(ctx, req.(*DismissChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetParticipantLimitReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipantLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetParticipantLimitReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetParticipantLimitReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetParticipantLimitReq(ctx, req.(*ParticipantLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChanOneParticipantReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelOnePartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChanOneParticipantReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChanOneParticipantReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChanOneParticipantReq(ctx, req.(*GetChannelOnePartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChanUsersId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelUsersIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChanUsersId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChanUsersId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChanUsersId(ctx, req.(*GetChannelUsersIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelBaseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChannelBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelBaseInfo(ctx, req.(*GetChannelBaseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelInfo(ctx, req.(*GetChannelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetBatchChanBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchChannelBaseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetBatchChanBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetBatchChanBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetBatchChanBaseInfo(ctx, req.(*BatchChannelBaseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChanInfoByLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChanByLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChanInfoByLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChanInfoByLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChanInfoByLink(ctx, req.(*GetChanByLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullChannelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChannelFullInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelFullInfo(ctx, req.(*GetFullChannelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_ToggleInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).ToggleInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/ToggleInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).ToggleInvite(ctx, req.(*ToggleInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CreateChannelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CreateChannelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/CreateChannelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CreateChannelLink(ctx, req.(*CreateChannelLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CheckChannelInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChannelInviteLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CheckChannelInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/CheckChannelInviteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CheckChannelInviteLink(ctx, req.(*CheckChannelInviteLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdateChannelUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelUserName(ctx, req.(*UpdateChannelUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelPinnedMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelPinnedMsgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelPinnedMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdateChannelPinnedMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelPinnedMsgId(ctx, req.(*UpdateChannelPinnedMsgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CheckUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CheckUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/CheckUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CheckUserName(ctx, req.(*CheckUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CheckChannelIsEncry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChannelIsEncryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CheckChannelIsEncry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/CheckChannelIsEncry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CheckChannelIsEncry(ctx, req.(*CheckChannelIsEncryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetAllChannelInfoByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChannelInfoByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetAllChannelInfoByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetAllChannelInfoByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetAllChannelInfoByUserId(ctx, req.(*GetAllChannelInfoByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateEveryoneQuiet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EveryoneQuietReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateEveryoneQuiet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdateEveryoneQuiet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateEveryoneQuiet(ctx, req.(*EveryoneQuietReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdatePrivateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPrivateChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdatePrivateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdatePrivateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdatePrivateChat(ctx, req.(*EditPrivateChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_SetChannelCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelCreatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).SetChannelCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/SetChannelCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).SetChannelCreator(ctx, req.(*SetChannelCreatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_ResetUserAllCreateGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserAllCreateGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).ResetUserAllCreateGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/ResetUserAllCreateGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).ResetUserAllCreateGroups(ctx, req.(*ResetUserAllCreateGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelBotIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelBotIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelBotIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChannelBotIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelBotIds(ctx, req.(*GetChannelBotIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelActiveUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelActiveUserIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelActiveUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChannelActiveUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelActiveUserIds(ctx, req.(*GetChannelActiveUserIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CheckUserInChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserInChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CheckUserInChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/CheckUserInChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CheckUserInChannel(ctx, req.(*CheckUserInChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelVerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdateChannelVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelVerify(ctx, req.(*UpdateChannelVerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelBannedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelBannedRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelBannedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdateChannelBannedRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelBannedRights(ctx, req.(*UpdateChannelBannedRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChnlAndMembInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChnlAndMembInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChnlAndMembInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChnlAndMembInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChnlAndMembInfo(ctx, req.(*GetChnlAndMembInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_SetChnlSlowMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChnlSlowModeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).SetChnlSlowMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/SetChnlSlowMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).SetChnlSlowMode(ctx, req.(*SetChnlSlowModeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_SetChnlGeo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChnlGeoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).SetChnlGeo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/SetChnlGeo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).SetChnlGeo(ctx, req.(*SetChnlGeoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_ToggleSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleSignaturesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).ToggleSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/ToggleSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).ToggleSignatures(ctx, req.(*ToggleSignaturesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GroupUpdateBanMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUpdateBanModeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GroupUpdateBanMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GroupUpdateBanMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GroupUpdateBanMode(ctx, req.(*GroupUpdateBanModeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GroupGetUserOwnChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupGetUserOwnChannelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GroupGetUserOwnChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GroupGetUserOwnChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GroupGetUserOwnChannels(ctx, req.(*GroupGetUserOwnChannelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelRestricted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelRestrictedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelRestricted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdateChannelRestricted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelRestricted(ctx, req.(*UpdateChannelRestrictedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_DelChannelKickedLeft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChannelKickedLeftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).DelChannelKickedLeft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/DelChannelKickedLeft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).DelChannelKickedLeft(ctx, req.(*DelChannelKickedLeftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChanInfoByLinkOrUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChanInfoByLinkOrUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChanInfoByLinkOrUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChanInfoByLinkOrUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChanInfoByLinkOrUserName(ctx, req.(*GetChanInfoByLinkOrUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GMsGetHotGroupIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotGroupIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GMsGetHotGroupIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GMsGetHotGroupIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GMsGetHotGroupIDs(ctx, req.(*GetHotGroupIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GMsGetHotGroupLv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotGroupLvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GMsGetHotGroupLv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GMsGetHotGroupLv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GMsGetHotGroupLv(ctx, req.(*GetHotGroupLvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GMsSetDiscussionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GMsSetDiscussionGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GMsSetDiscussionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GMsSetDiscussionGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GMsSetDiscussionGroup(ctx, req.(*GMsSetDiscussionGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "groupinfo.ChannelServerService",
	HandlerType: (*ChannelServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateChannelGeo",
			Handler:    _ChannelServerService_UpdateChannelGeo_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _ChannelServerService_CreateChannel_Handler,
		},
		{
			MethodName: "GetChannelUpdatesInfo",
			Handler:    _ChannelServerService_GetChannelUpdatesInfo_Handler,
		},
		{
			MethodName: "AddChannelUser",
			Handler:    _ChannelServerService_AddChannelUser_Handler,
		},
		{
			MethodName: "DelChannelUser",
			Handler:    _ChannelServerService_DelChannelUser_Handler,
		},
		{
			MethodName: "EditChannelAbout",
			Handler:    _ChannelServerService_EditChannelAbout_Handler,
		},
		{
			MethodName: "EditChannelTitle",
			Handler:    _ChannelServerService_EditChannelTitle_Handler,
		},
		{
			MethodName: "EditChannelPhoto",
			Handler:    _ChannelServerService_EditChannelPhoto_Handler,
		},
		{
			MethodName: "EditChanAdminRights",
			Handler:    _ChannelServerService_EditChanAdminRights_Handler,
		},
		{
			MethodName: "EditChanBanRights",
			Handler:    _ChannelServerService_EditChanBanRights_Handler,
		},
		{
			MethodName: "EditChannelHiddenprehistory",
			Handler:    _ChannelServerService_EditChannelHiddenprehistory_Handler,
		},
		{
			MethodName: "DismissChannel",
			Handler:    _ChannelServerService_DismissChannel_Handler,
		},
		{
			MethodName: "GetParticipantLimitReq",
			Handler:    _ChannelServerService_GetParticipantLimitReq_Handler,
		},
		{
			MethodName: "GetChanOneParticipantReq",
			Handler:    _ChannelServerService_GetChanOneParticipantReq_Handler,
		},
		{
			MethodName: "GetChanUsersId",
			Handler:    _ChannelServerService_GetChanUsersId_Handler,
		},
		{
			MethodName: "GetChannelBaseInfo",
			Handler:    _ChannelServerService_GetChannelBaseInfo_Handler,
		},
		{
			MethodName: "GetChannelInfo",
			Handler:    _ChannelServerService_GetChannelInfo_Handler,
		},
		{
			MethodName: "GetBatchChanBaseInfo",
			Handler:    _ChannelServerService_GetBatchChanBaseInfo_Handler,
		},
		{
			MethodName: "GetChanInfoByLink",
			Handler:    _ChannelServerService_GetChanInfoByLink_Handler,
		},
		{
			MethodName: "GetChannelFullInfo",
			Handler:    _ChannelServerService_GetChannelFullInfo_Handler,
		},
		{
			MethodName: "ToggleInvite",
			Handler:    _ChannelServerService_ToggleInvite_Handler,
		},
		{
			MethodName: "CreateChannelLink",
			Handler:    _ChannelServerService_CreateChannelLink_Handler,
		},
		{
			MethodName: "CheckChannelInviteLink",
			Handler:    _ChannelServerService_CheckChannelInviteLink_Handler,
		},
		{
			MethodName: "UpdateChannelUserName",
			Handler:    _ChannelServerService_UpdateChannelUserName_Handler,
		},
		{
			MethodName: "UpdateChannelPinnedMsgId",
			Handler:    _ChannelServerService_UpdateChannelPinnedMsgId_Handler,
		},
		{
			MethodName: "CheckUserName",
			Handler:    _ChannelServerService_CheckUserName_Handler,
		},
		{
			MethodName: "CheckChannelIsEncry",
			Handler:    _ChannelServerService_CheckChannelIsEncry_Handler,
		},
		{
			MethodName: "GetAllChannelInfoByUserId",
			Handler:    _ChannelServerService_GetAllChannelInfoByUserId_Handler,
		},
		{
			MethodName: "UpdateEveryoneQuiet",
			Handler:    _ChannelServerService_UpdateEveryoneQuiet_Handler,
		},
		{
			MethodName: "UpdatePrivateChat",
			Handler:    _ChannelServerService_UpdatePrivateChat_Handler,
		},
		{
			MethodName: "SetChannelCreator",
			Handler:    _ChannelServerService_SetChannelCreator_Handler,
		},
		{
			MethodName: "ResetUserAllCreateGroups",
			Handler:    _ChannelServerService_ResetUserAllCreateGroups_Handler,
		},
		{
			MethodName: "GetChannelBotIds",
			Handler:    _ChannelServerService_GetChannelBotIds_Handler,
		},
		{
			MethodName: "GetChannelActiveUserIds",
			Handler:    _ChannelServerService_GetChannelActiveUserIds_Handler,
		},
		{
			MethodName: "CheckUserInChannel",
			Handler:    _ChannelServerService_CheckUserInChannel_Handler,
		},
		{
			MethodName: "UpdateChannelVerify",
			Handler:    _ChannelServerService_UpdateChannelVerify_Handler,
		},
		{
			MethodName: "UpdateChannelBannedRights",
			Handler:    _ChannelServerService_UpdateChannelBannedRights_Handler,
		},
		{
			MethodName: "GetChnlAndMembInfo",
			Handler:    _ChannelServerService_GetChnlAndMembInfo_Handler,
		},
		{
			MethodName: "SetChnlSlowMode",
			Handler:    _ChannelServerService_SetChnlSlowMode_Handler,
		},
		{
			MethodName: "SetChnlGeo",
			Handler:    _ChannelServerService_SetChnlGeo_Handler,
		},
		{
			MethodName: "ToggleSignatures",
			Handler:    _ChannelServerService_ToggleSignatures_Handler,
		},
		{
			MethodName: "GroupUpdateBanMode",
			Handler:    _ChannelServerService_GroupUpdateBanMode_Handler,
		},
		{
			MethodName: "GroupGetUserOwnChannels",
			Handler:    _ChannelServerService_GroupGetUserOwnChannels_Handler,
		},
		{
			MethodName: "UpdateChannelRestricted",
			Handler:    _ChannelServerService_UpdateChannelRestricted_Handler,
		},
		{
			MethodName: "DelChannelKickedLeft",
			Handler:    _ChannelServerService_DelChannelKickedLeft_Handler,
		},
		{
			MethodName: "GetChanInfoByLinkOrUserName",
			Handler:    _ChannelServerService_GetChanInfoByLinkOrUserName_Handler,
		},
		{
			MethodName: "GMsGetHotGroupIDs",
			Handler:    _ChannelServerService_GMsGetHotGroupIDs_Handler,
		},
		{
			MethodName: "GMsGetHotGroupLv",
			Handler:    _ChannelServerService_GMsGetHotGroupLv_Handler,
		},
		{
			MethodName: "GMsSetDiscussionGroup",
			Handler:    _ChannelServerService_GMsSetDiscussionGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/groupinfo/channelservice.proto",
}

func (m *ChannelParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelParticipant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.InviteId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.InviteId))
	}
	if m.CanSetUsername {
		dAtA[i] = 0x18
		i++
		if m.CanSetUsername {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanViewParticipants {
		dAtA[i] = 0x20
		i++
		if m.CanViewParticipants {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsCreator {
		dAtA[i] = 0x28
		i++
		if m.IsCreator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAdmin {
		dAtA[i] = 0x30
		i++
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBan {
		dAtA[i] = 0x38
		i++
		if m.IsBan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.JoinTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.JoinTime))
	}
	if m.AdRight != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AdRight.Size()))
		n1, err := m.AdRight.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.BanRight != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BanRight.Size()))
		n2, err := m.BanRight.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	if len(m.ExportedInviteLink) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ExportedInviteLink)))
		i += copy(dAtA[i:], m.ExportedInviteLink)
	}
	if m.StartMsgid != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.StartMsgid))
	}
	if len(m.Rank) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Rank)))
		i += copy(dAtA[i:], m.Rank)
	}
	return i, nil
}

func (m *ChannelParticipantArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelParticipantArr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.TotalCount))
	}
	if len(m.Part) > 0 {
		for _, msg := range m.Part {
			dAtA[i] = 0x12
			i++
			i = encodeVarintChannelservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InvitedUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvitedUsers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.IsBotUser {
		dAtA[i] = 0x10
		i++
		if m.IsBotUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AdminRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRights) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChangeGroupInfo {
		dAtA[i] = 0x8
		i++
		if m.ChangeGroupInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DeleteMessages {
		dAtA[i] = 0x10
		i++
		if m.DeleteMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BanUsers {
		dAtA[i] = 0x18
		i++
		if m.BanUsers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PinMessages {
		dAtA[i] = 0x20
		i++
		if m.PinMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AddNewAdmin {
		dAtA[i] = 0x28
		i++
		if m.AddNewAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PromotedBy != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.PromotedBy))
	}
	if m.PostMessages {
		dAtA[i] = 0x38
		i++
		if m.PostMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EditMessages {
		dAtA[i] = 0x40
		i++
		if m.EditMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InviteUsers {
		dAtA[i] = 0x48
		i++
		if m.InviteUsers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InviteLink {
		dAtA[i] = 0x50
		i++
		if m.InviteLink {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *BannerRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannerRights) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CanReadMessages {
		dAtA[i] = 0x8
		i++
		if m.CanReadMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendMessge {
		dAtA[i] = 0x10
		i++
		if m.CanSendMessge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendMedia {
		dAtA[i] = 0x18
		i++
		if m.CanSendMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendSticker {
		dAtA[i] = 0x20
		i++
		if m.CanSendSticker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanEmbedLinks {
		dAtA[i] = 0x28
		i++
		if m.CanEmbedLinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickedBy != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.KickedBy))
	}
	if m.UntilDate != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UntilDate))
	}
	if m.CanSendGifs {
		dAtA[i] = 0x40
		i++
		if m.CanSendGifs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendGames {
		dAtA[i] = 0x48
		i++
		if m.CanSendGames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendInline {
		dAtA[i] = 0x50
		i++
		if m.CanSendInline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InviteUser {
		dAtA[i] = 0x58
		i++
		if m.InviteUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PinMessage {
		dAtA[i] = 0x60
		i++
		if m.PinMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChangeGroupInfo {
		dAtA[i] = 0x68
		i++
		if m.ChangeGroupInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendPolls {
		dAtA[i] = 0x70
		i++
		if m.CanSendPolls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.CreatorId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.CreatorId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.Broadcast {
		dAtA[i] = 0x30
		i++
		if m.Broadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Megagroup {
		dAtA[i] = 0x38
		i++
		if m.Megagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Cluster != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Cluster))
	}
	if m.Date != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Date))
	}
	if m.HasGeo {
		dAtA[i] = 0x50
		i++
		if m.HasGeo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Location != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Location.Size()))
		n3, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Dlog != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n4, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ChannelupdatesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelupdatesResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Channel.Size()))
		n5, err := m.Channel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Participants != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Participants.Size()))
		n6, err := m.Participants.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChannelUpdatesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelUpdatesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n7, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *AddChannelUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddChannelUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.InvitorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.InvitorId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.StartMsgid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.StartMsgid))
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintChannelservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Dlog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n8, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *DelChannelUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChannelUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.IsBotUser {
		dAtA[i] = 0x18
		i++
		if m.IsBotUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsKicked {
		dAtA[i] = 0x20
		i++
		if m.IsKicked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickedId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.KickedId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n9, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *UpdateChanAboutReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChanAboutReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n10, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *UpdateChanTitleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChanTitleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n11, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *UpdateChanPhotoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChanPhotoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n12, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *UpdateChanAdminRightsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChanAdminRightsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.FromId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.KeepAdmin {
		dAtA[i] = 0x20
		i++
		if m.KeepAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AdminRights != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AdminRights.Size()))
		n13, err := m.AdminRights.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Dlog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n14, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *UpdateChanAdminRightsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChanAdminRightsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Updates != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Updates.Size()))
		n15, err := m.Updates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.IsAdd {
		dAtA[i] = 0x10
		i++
		if m.IsAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ispromote {
		dAtA[i] = 0x18
		i++
		if m.Ispromote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *UpdateChanHiddenprehistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChanHiddenprehistoryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.FromId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.HiddenPrehistory {
		dAtA[i] = 0x20
		i++
		if m.HiddenPrehistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n16, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *UpdateChanBanRightsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChanBanRightsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.FromId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.IsKick {
		dAtA[i] = 0x20
		i++
		if m.IsKick {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BanRights != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BanRights.Size()))
		n17, err := m.BanRights.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.BanDate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BanDate))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n18, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *DismissChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DismissChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.CmdOption {
		dAtA[i] = 0x20
		i++
		if m.CmdOption {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n19, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *DismissChannelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DismissChannelResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.B {
		dAtA[i] = 0x8
		i++
		if m.B {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ParticipantLimitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipantLimitReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Limit))
	}
	if m.PartType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.PartType))
	}
	if m.Userid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Userid))
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n20, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *ParticipantLimitResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipantLimitResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.TotalCount))
	}
	if len(m.Part) > 0 {
		for _, msg := range m.Part {
			dAtA[i] = 0x12
			i++
			i = encodeVarintChannelservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChannelOnePartReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelOnePartReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n21, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *GetChannelOnePartResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelOnePartResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OneParticipant != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.OneParticipant.Size()))
		n22, err := m.OneParticipant.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChannelUsersIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelUsersIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n23, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *GetChannelUsersIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelUsersIdResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.UserId) > 0 {
		dAtA25 := make([]byte, len(m.UserId)*10)
		var j24 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j24))
		i += copy(dAtA[i:], dAtA25[:j24])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChannelBaseInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelBaseInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n26, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *GetChannelBaseInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelBaseInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BaseInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BaseInfo.Size()))
		n27, err := m.BaseInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChannelInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n28, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *GetChannelInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BaseInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BaseInfo.Size()))
		n29, err := m.BaseInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *BatchChannelBaseInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchChannelBaseInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.UserId) > 0 {
		dAtA31 := make([]byte, len(m.UserId)*10)
		var j30 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j30))
		i += copy(dAtA[i:], dAtA31[:j30])
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n32, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *BatchChannelBaseInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchChannelBaseInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		for _, msg := range m.Channel {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChannelservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChanByLinkReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChanByLinkReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelLink) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ChannelLink)))
		i += copy(dAtA[i:], m.ChannelLink)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n33, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *GetChanInfoByLinkOrUserNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChanInfoByLinkOrUserNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelLink) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ChannelLink)))
		i += copy(dAtA[i:], m.ChannelLink)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n34, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *GetFullChannelInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullChannelInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n35, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *GetFullChannelInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullChannelInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channelinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Channelinfo.Size()))
		n36, err := m.Channelinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if len(m.ExportedInviteLink) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ExportedInviteLink)))
		i += copy(dAtA[i:], m.ExportedInviteLink)
	}
	if m.ParticipantsCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ParticipantsCount))
	}
	if m.AdminsCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BannedCount))
	}
	if m.PinnedMsgId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.PinnedMsgId))
	}
	if m.MigratedFromMaxId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.MigratedFromMaxId))
	}
	if m.MigratedFromChatId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.MigratedFromChatId))
	}
	if m.AdminRights != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AdminRights.Size()))
		n37, err := m.AdminRights.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.BanRights != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BanRights.Size()))
		n38, err := m.BanRights.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.BotCount != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BotCount))
	}
	if len(m.BotId) > 0 {
		dAtA40 := make([]byte, len(m.BotId)*10)
		var j39 int
		for _, num1 := range m.BotId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA40[j39] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j39++
			}
			dAtA40[j39] = uint8(num)
			j39++
		}
		dAtA[i] = 0x72
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j39))
		i += copy(dAtA[i:], dAtA40[:j39])
	}
	if m.CanSetUsername {
		dAtA[i] = 0x78
		i++
		if m.CanSetUsername {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanViewParticipants {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.CanViewParticipants {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x89
		i++
		dAtA[i] = 0x1
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i += 8
	}
	if m.Latitude != 0 {
		dAtA[i] = 0x91
		i++
		dAtA[i] = 0x1
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i += 8
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ToggleInviteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToggleInviteReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.AdminEnable {
		dAtA[i] = 0x20
		i++
		if m.AdminEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n41, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *CreateChannelLinkReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChannelLinkReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n42, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}

func (m *CreateChannelLinkResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChannelLinkResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Link) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *CheckChannelInviteLinkReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChannelInviteLinkReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.AccessHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.AccessHash)))
		i += copy(dAtA[i:], m.AccessHash)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n43, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}

func (m *CheckChannelInviteLinkResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChannelInviteLinkResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Link) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Gtype))
	}
	if m.ChanInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChanInfo.Size()))
		n44, err := m.ChanInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if m.Chatinfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Chatinfo.Size()))
		n45, err := m.Chatinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if m.LinkCreator != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.LinkCreator))
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *UpdateChannelUserNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelUserNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n46, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}

func (m *UpdateChannelUserNameResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelUserNameResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *UpdateChannelPinnedMsgIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelPinnedMsgIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.PinnedMsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.PinnedMsgId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n47, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *UpdateChannelPinnedMsgIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelPinnedMsgIdResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *CheckUserNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n48, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}

func (m *CheckUserNameResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserNameResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *CheckChannelIsEncryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChannelIsEncryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n49, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}

func (m *CheckChannelIsEncryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChannelIsEncryResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Encry {
		dAtA[i] = 0x8
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetAllChannelInfoByUserIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllChannelInfoByUserIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n50, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}

func (m *GetAllChannelInfoByUserIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllChannelInfoByUserIdResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, msg := range m.Channels {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChannelservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *EveryoneQuietReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EveryoneQuietReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Quiet {
		dAtA[i] = 0x18
		i++
		if m.Quiet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n51, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}

func (m *EditPrivateChatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditPrivateChatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Enable {
		dAtA[i] = 0x18
		i++
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n52, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}

func (m *UpdateChannelCommonResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelCommonResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *SetChannelCreatorReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetChannelCreatorReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Operator != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Operator))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.IsAdd {
		dAtA[i] = 0x28
		i++
		if m.IsAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n53, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}

func (m *ResetUserAllCreateGroupsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetUserAllCreateGroupsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operator != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Operator))
	}
	if m.FromUserid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.FromUserid))
	}
	if m.ToUserid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ToUserid))
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n54, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}

func (m *ResetUserAllCreateGroupsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetUserAllCreateGroupsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SuperIds) > 0 {
		dAtA56 := make([]byte, len(m.SuperIds)*10)
		var j55 int
		for _, num1 := range m.SuperIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA56[j55] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j55++
			}
			dAtA56[j55] = uint8(num)
			j55++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j55))
		i += copy(dAtA[i:], dAtA56[:j55])
	}
	if len(m.ChannelIds) > 0 {
		dAtA58 := make([]byte, len(m.ChannelIds)*10)
		var j57 int
		for _, num1 := range m.ChannelIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA58[j57] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j57++
			}
			dAtA58[j57] = uint8(num)
			j57++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j57))
		i += copy(dAtA[i:], dAtA58[:j57])
	}
	if len(m.GroupIds) > 0 {
		dAtA60 := make([]byte, len(m.GroupIds)*10)
		var j59 int
		for _, num1 := range m.GroupIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA60[j59] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j59++
			}
			dAtA60[j59] = uint8(num)
			j59++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j59))
		i += copy(dAtA[i:], dAtA60[:j59])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChannelBotIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelBotIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n61, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}

func (m *GetChannelBotIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelBotIdsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BotIds) > 0 {
		dAtA63 := make([]byte, len(m.BotIds)*10)
		var j62 int
		for _, num1 := range m.BotIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA63[j62] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j62++
			}
			dAtA63[j62] = uint8(num)
			j62++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j62))
		i += copy(dAtA[i:], dAtA63[:j62])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChannelActiveUserIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelActiveUserIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n64, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}

func (m *GetChannelActiveUserIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelActiveUserIdsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		dAtA66 := make([]byte, len(m.UserIds)*10)
		var j65 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA66[j65] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j65++
			}
			dAtA66[j65] = uint8(num)
			j65++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j65))
		i += copy(dAtA[i:], dAtA66[:j65])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *CheckUserInChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserInChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n67, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	return i, nil
}

func (m *CheckUserInChannelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserInChannelResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State {
		dAtA[i] = 0x8
		i++
		if m.State {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateChannelVerifyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelVerifyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.ChannelId) > 0 {
		dAtA69 := make([]byte, len(m.ChannelId)*10)
		var j68 int
		for _, num1 := range m.ChannelId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA69[j68] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j68++
			}
			dAtA69[j68] = uint8(num)
			j68++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j68))
		i += copy(dAtA[i:], dAtA69[:j68])
	}
	if m.Verify {
		dAtA[i] = 0x18
		i++
		if m.Verify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Debug.Size()))
		n70, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	return i, nil
}

func (m *UpdateChannelVerifyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelVerifyResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ChannelLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelLocation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lat != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i += 8
	}
	if m.Long != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Long))))
		i += 8
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	return i, nil
}

func (m *UpdateChannelGeoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelGeoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsClear {
		dAtA[i] = 0x8
		i++
		if m.IsClear {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Location != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Location.Size()))
		n71, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.KeyId))
	}
	return i, nil
}

func (m *UpdateChannelGeoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelGeoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Err))
	}
	return i, nil
}

func (m *BoolResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoolResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateChannelBannedRightsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelBannedRightsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.BannedFlag != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BannedFlag))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	return i, nil
}

func (m *UpdateChannelBannedRightsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelBannedRightsRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.ErrorInfo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ErrorInfo)))
		i += copy(dAtA[i:], m.ErrorInfo)
	}
	return i, nil
}

func (m *GetChnlAndMembInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChnlAndMembInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChnlId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChnlId))
	}
	if m.MembId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.MembId))
	}
	return i, nil
}

func (m *GetChnlAndMembInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChnlAndMembInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChnlInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChnlInfo.Size()))
		n72, err := m.ChnlInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	if m.MembInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.MembInfo.Size()))
		n73, err := m.MembInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}

func (m *SetChnlSlowModeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetChnlSlowModeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChnlId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.HashId))
	}
	if m.Seconds != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Seconds))
	}
	return i, nil
}

func (m *SetChnlSlowModeRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetChnlSlowModeRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ResCode))
	}
	if len(m.ResInfo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ResInfo)))
		i += copy(dAtA[i:], m.ResInfo)
	}
	return i, nil
}

func (m *SetChnlGeoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetChnlGeoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChnlId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChnlId))
	}
	if m.GeoLng != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.GeoLng))))
		i += 8
	}
	if m.GeoLat != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.GeoLat))))
		i += 8
	}
	if len(m.GeoAddr) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.GeoAddr)))
		i += copy(dAtA[i:], m.GeoAddr)
	}
	return i, nil
}

func (m *SetChnlGeoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetChnlGeoRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ResCode))
	}
	if len(m.ResInfo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ResInfo)))
		i += copy(dAtA[i:], m.ResInfo)
	}
	return i, nil
}

func (m *ToggleSignaturesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToggleSignaturesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChnlId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.HashId))
	}
	if m.IsSign {
		dAtA[i] = 0x18
		i++
		if m.IsSign {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ToggleSignaturesRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToggleSignaturesRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ResCode))
	}
	if len(m.ResInfo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ResInfo)))
		i += copy(dAtA[i:], m.ResInfo)
	}
	return i, nil
}

func (m *GroupUpdateBanModeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupUpdateBanModeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChnlId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.HashId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.FromId))
	}
	if m.BanMode {
		dAtA[i] = 0x20
		i++
		if m.BanMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GroupUpdateBanModeRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupUpdateBanModeRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ResCode))
	}
	if len(m.ResInfo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ResInfo)))
		i += copy(dAtA[i:], m.ResInfo)
	}
	return i, nil
}

func (m *GroupGetUserOwnChannelsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupGetUserOwnChannelsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *ChannelBrief) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelBrief) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.BroadcastOrMegagroup {
		dAtA[i] = 0x18
		i++
		if m.BroadcastOrMegagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	return i, nil
}

func (m *GroupGetUserOwnChannelsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupGetUserOwnChannelsRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Chnls) > 0 {
		for _, msg := range m.Chnls {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChannelservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateChannelRestrictedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelRestrictedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Restricted {
		dAtA[i] = 0x10
		i++
		if m.Restricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.RestrictionReason) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.RestrictionReason)))
		i += copy(dAtA[i:], m.RestrictionReason)
	}
	return i, nil
}

func (m *UpdateChannelRestrictedRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelRestrictedRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.ErrorInfo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ErrorInfo)))
		i += copy(dAtA[i:], m.ErrorInfo)
	}
	return i, nil
}

func (m *DelChannelKickedLeftReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChannelKickedLeftReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.FromId))
	}
	return i, nil
}

func (m *DelChannelKickedLeftRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChannelKickedLeftRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.ErrorInfo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ErrorInfo)))
		i += copy(dAtA[i:], m.ErrorInfo)
	}
	return i, nil
}

func (m *GetHotGroupIDsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHotGroupIDsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Level))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Limit))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Debug.Size()))
		n74, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}

func (m *HotGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.GroupId))
	}
	if len(m.GroupType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.GroupType)))
		i += copy(dAtA[i:], m.GroupType)
	}
	return i, nil
}

func (m *GetHotGroupIDsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHotGroupIDsRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errno != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Errno))
	}
	if len(m.HotArr) > 0 {
		for _, msg := range m.HotArr {
			dAtA[i] = 0x12
			i++
			i = encodeVarintChannelservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Hash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Debug.Size()))
		n75, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}

func (m *GetHotGroupLvReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHotGroupLvReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Group != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Group))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Debug.Size()))
		n76, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}

func (m *GetHotGroupLvRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHotGroupLvRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errno != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Errno))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Level))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Debug.Size()))
		n77, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}

func (m *GMsSetDiscussionGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GMsSetDiscussionGroupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Broadcast != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Broadcast))
	}
	if m.Megagroup != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Megagroup))
	}
	if m.Operation {
		dAtA[i] = 0x18
		i++
		if m.Operation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Debug.Size()))
		n78, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}

func (m *GMsSetDiscussionGroupRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GMsSetDiscussionGroupRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintChannelservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChannelParticipant) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.InviteId != 0 {
		n += 1 + sovChannelservice(uint64(m.InviteId))
	}
	if m.CanSetUsername {
		n += 2
	}
	if m.CanViewParticipants {
		n += 2
	}
	if m.IsCreator {
		n += 2
	}
	if m.IsAdmin {
		n += 2
	}
	if m.IsBan {
		n += 2
	}
	if m.JoinTime != 0 {
		n += 1 + sovChannelservice(uint64(m.JoinTime))
	}
	if m.AdRight != nil {
		l = m.AdRight.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.BanRight != nil {
		l = m.BanRight.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	l = len(m.ExportedInviteLink)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.StartMsgid != 0 {
		n += 1 + sovChannelservice(uint64(m.StartMsgid))
	}
	l = len(m.Rank)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ChannelParticipantArr) Size() (n int) {
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovChannelservice(uint64(m.TotalCount))
	}
	if len(m.Part) > 0 {
		for _, e := range m.Part {
			l = e.Size()
			n += 1 + l + sovChannelservice(uint64(l))
		}
	}
	return n
}

func (m *InvitedUsers) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.IsBotUser {
		n += 2
	}
	return n
}

func (m *AdminRights) Size() (n int) {
	var l int
	_ = l
	if m.ChangeGroupInfo {
		n += 2
	}
	if m.DeleteMessages {
		n += 2
	}
	if m.BanUsers {
		n += 2
	}
	if m.PinMessages {
		n += 2
	}
	if m.AddNewAdmin {
		n += 2
	}
	if m.PromotedBy != 0 {
		n += 1 + sovChannelservice(uint64(m.PromotedBy))
	}
	if m.PostMessages {
		n += 2
	}
	if m.EditMessages {
		n += 2
	}
	if m.InviteUsers {
		n += 2
	}
	if m.InviteLink {
		n += 2
	}
	return n
}

func (m *BannerRights) Size() (n int) {
	var l int
	_ = l
	if m.CanReadMessages {
		n += 2
	}
	if m.CanSendMessge {
		n += 2
	}
	if m.CanSendMedia {
		n += 2
	}
	if m.CanSendSticker {
		n += 2
	}
	if m.CanEmbedLinks {
		n += 2
	}
	if m.KickedBy != 0 {
		n += 1 + sovChannelservice(uint64(m.KickedBy))
	}
	if m.UntilDate != 0 {
		n += 1 + sovChannelservice(uint64(m.UntilDate))
	}
	if m.CanSendGifs {
		n += 2
	}
	if m.CanSendGames {
		n += 2
	}
	if m.CanSendInline {
		n += 2
	}
	if m.InviteUser {
		n += 2
	}
	if m.PinMessage {
		n += 2
	}
	if m.ChangeGroupInfo {
		n += 2
	}
	if m.CanSendPolls {
		n += 2
	}
	return n
}

func (m *CreateChannelReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.CreatorId != 0 {
		n += 1 + sovChannelservice(uint64(m.CreatorId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Broadcast {
		n += 2
	}
	if m.Megagroup {
		n += 2
	}
	if m.Cluster != 0 {
		n += 1 + sovChannelservice(uint64(m.Cluster))
	}
	if m.Date != 0 {
		n += 1 + sovChannelservice(uint64(m.Date))
	}
	if m.HasGeo {
		n += 2
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ChannelupdatesResp) Size() (n int) {
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Participants != nil {
		l = m.Participants.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChannelUpdatesReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *AddChannelUserReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.InvitorId != 0 {
		n += 1 + sovChannelservice(uint64(m.InvitorId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.StartMsgid != 0 {
		n += 1 + sovChannelservice(uint64(m.StartMsgid))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovChannelservice(uint64(l))
		}
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *DelChannelUserReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.IsBotUser {
		n += 2
	}
	if m.IsKicked {
		n += 2
	}
	if m.KickedId != 0 {
		n += 1 + sovChannelservice(uint64(m.KickedId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChanAboutReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChanTitleReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChanPhotoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChanAdminRightsReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovChannelservice(uint64(m.FromId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.KeepAdmin {
		n += 2
	}
	if m.AdminRights != nil {
		l = m.AdminRights.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChanAdminRightsResp) Size() (n int) {
	var l int
	_ = l
	if m.Updates != nil {
		l = m.Updates.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.IsAdd {
		n += 2
	}
	if m.Ispromote {
		n += 2
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *UpdateChanHiddenprehistoryReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovChannelservice(uint64(m.FromId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.HiddenPrehistory {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChanBanRightsReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovChannelservice(uint64(m.FromId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.IsKick {
		n += 2
	}
	if m.BanRights != nil {
		l = m.BanRights.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.BanDate != 0 {
		n += 1 + sovChannelservice(uint64(m.BanDate))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *DismissChannelReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.CmdOption {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *DismissChannelResp) Size() (n int) {
	var l int
	_ = l
	if m.B {
		n += 2
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ParticipantLimitReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Offset != 0 {
		n += 1 + sovChannelservice(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovChannelservice(uint64(m.Limit))
	}
	if m.PartType != 0 {
		n += 1 + sovChannelservice(uint64(m.PartType))
	}
	if m.Userid != 0 {
		n += 1 + sovChannelservice(uint64(m.Userid))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ParticipantLimitResp) Size() (n int) {
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovChannelservice(uint64(m.TotalCount))
	}
	if len(m.Part) > 0 {
		for _, e := range m.Part {
			l = e.Size()
			n += 1 + l + sovChannelservice(uint64(l))
		}
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChannelOnePartReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetChannelOnePartResp) Size() (n int) {
	var l int
	_ = l
	if m.OneParticipant != nil {
		l = m.OneParticipant.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChannelUsersIdReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetChannelUsersIdResp) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChannelBaseInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetChannelBaseInfoResp) Size() (n int) {
	var l int
	_ = l
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChannelInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetChannelInfoResp) Size() (n int) {
	var l int
	_ = l
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *BatchChannelBaseInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *BatchChannelBaseInfoResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Channel) > 0 {
		for _, e := range m.Channel {
			l = e.Size()
			n += 1 + l + sovChannelservice(uint64(l))
		}
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChanByLinkReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChannelLink)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetChanInfoByLinkOrUserNameReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChannelLink)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetFullChannelInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetFullChannelInfoResp) Size() (n int) {
	var l int
	_ = l
	if m.Channelinfo != nil {
		l = m.Channelinfo.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	l = len(m.ExportedInviteLink)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.ParticipantsCount != 0 {
		n += 1 + sovChannelservice(uint64(m.ParticipantsCount))
	}
	if m.AdminsCount != 0 {
		n += 1 + sovChannelservice(uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		n += 1 + sovChannelservice(uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		n += 1 + sovChannelservice(uint64(m.BannedCount))
	}
	if m.PinnedMsgId != 0 {
		n += 1 + sovChannelservice(uint64(m.PinnedMsgId))
	}
	if m.MigratedFromMaxId != 0 {
		n += 1 + sovChannelservice(uint64(m.MigratedFromMaxId))
	}
	if m.MigratedFromChatId != 0 {
		n += 1 + sovChannelservice(uint64(m.MigratedFromChatId))
	}
	if m.AdminRights != nil {
		l = m.AdminRights.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.BanRights != nil {
		l = m.BanRights.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.BotCount != 0 {
		n += 1 + sovChannelservice(uint64(m.BotCount))
	}
	if len(m.BotId) > 0 {
		l = 0
		for _, e := range m.BotId {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if m.CanSetUsername {
		n += 2
	}
	if m.CanViewParticipants {
		n += 3
	}
	if m.Longitude != 0 {
		n += 10
	}
	if m.Latitude != 0 {
		n += 10
	}
	l = len(m.Addr)
	if l > 0 {
		n += 2 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 2 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ToggleInviteReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.AdminEnable {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *CreateChannelLinkReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *CreateChannelLinkResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *CheckChannelInviteLinkReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	l = len(m.AccessHash)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *CheckChannelInviteLinkResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Gtype != 0 {
		n += 1 + sovChannelservice(uint64(m.Gtype))
	}
	if m.ChanInfo != nil {
		l = m.ChanInfo.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Chatinfo != nil {
		l = m.Chatinfo.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.LinkCreator != 0 {
		n += 1 + sovChannelservice(uint64(m.LinkCreator))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *UpdateChannelUserNameReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChannelUserNameResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *UpdateChannelPinnedMsgIdReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.PinnedMsgId != 0 {
		n += 1 + sovChannelservice(uint64(m.PinnedMsgId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChannelPinnedMsgIdResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *CheckUserNameReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *CheckUserNameResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *CheckChannelIsEncryReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *CheckChannelIsEncryResp) Size() (n int) {
	var l int
	_ = l
	if m.Encry {
		n += 2
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetAllChannelInfoByUserIdReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetAllChannelInfoByUserIdResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 1 + l + sovChannelservice(uint64(l))
		}
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *EveryoneQuietReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Quiet {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *EditPrivateChatReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Enable {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChannelCommonResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *SetChannelCreatorReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Operator != 0 {
		n += 1 + sovChannelservice(uint64(m.Operator))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.IsAdd {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ResetUserAllCreateGroupsReq) Size() (n int) {
	var l int
	_ = l
	if m.Operator != 0 {
		n += 1 + sovChannelservice(uint64(m.Operator))
	}
	if m.FromUserid != 0 {
		n += 1 + sovChannelservice(uint64(m.FromUserid))
	}
	if m.ToUserid != 0 {
		n += 1 + sovChannelservice(uint64(m.ToUserid))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ResetUserAllCreateGroupsResp) Size() (n int) {
	var l int
	_ = l
	if len(m.SuperIds) > 0 {
		l = 0
		for _, e := range m.SuperIds {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if len(m.ChannelIds) > 0 {
		l = 0
		for _, e := range m.ChannelIds {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if len(m.GroupIds) > 0 {
		l = 0
		for _, e := range m.GroupIds {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChannelBotIdsReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetChannelBotIdsResp) Size() (n int) {
	var l int
	_ = l
	if len(m.BotIds) > 0 {
		l = 0
		for _, e := range m.BotIds {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChannelActiveUserIdsReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetChannelActiveUserIdsResp) Size() (n int) {
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *CheckUserInChannelReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *CheckUserInChannelResp) Size() (n int) {
	var l int
	_ = l
	if m.State {
		n += 2
	}
	return n
}

func (m *UpdateChannelVerifyReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if len(m.ChannelId) > 0 {
		l = 0
		for _, e := range m.ChannelId {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if m.Verify {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChannelVerifyResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ChannelLocation) Size() (n int) {
	var l int
	_ = l
	if m.Lat != 0 {
		n += 9
	}
	if m.Long != 0 {
		n += 9
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChannelGeoReq) Size() (n int) {
	var l int
	_ = l
	if m.IsClear {
		n += 2
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovChannelservice(uint64(m.KeyId))
	}
	return n
}

func (m *UpdateChannelGeoResp) Size() (n int) {
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovChannelservice(uint64(m.Err))
	}
	return n
}

func (m *BoolResult) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *UpdateChannelBannedRightsReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.BannedFlag != 0 {
		n += 1 + sovChannelservice(uint64(m.BannedFlag))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	return n
}

func (m *UpdateChannelBannedRightsRsp) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovChannelservice(uint64(m.ErrorCode))
	}
	l = len(m.ErrorInfo)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetChnlAndMembInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChnlId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChnlId))
	}
	if m.MembId != 0 {
		n += 1 + sovChannelservice(uint64(m.MembId))
	}
	return n
}

func (m *GetChnlAndMembInfoRsp) Size() (n int) {
	var l int
	_ = l
	if m.ChnlInfo != nil {
		l = m.ChnlInfo.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.MembInfo != nil {
		l = m.MembInfo.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *SetChnlSlowModeReq) Size() (n int) {
	var l int
	_ = l
	if m.ChnlId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		n += 1 + sovChannelservice(uint64(m.HashId))
	}
	if m.Seconds != 0 {
		n += 1 + sovChannelservice(uint64(m.Seconds))
	}
	return n
}

func (m *SetChnlSlowModeRsp) Size() (n int) {
	var l int
	_ = l
	if m.ResCode != 0 {
		n += 1 + sovChannelservice(uint64(m.ResCode))
	}
	l = len(m.ResInfo)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *SetChnlGeoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChnlId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChnlId))
	}
	if m.GeoLng != 0 {
		n += 9
	}
	if m.GeoLat != 0 {
		n += 9
	}
	l = len(m.GeoAddr)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *SetChnlGeoRsp) Size() (n int) {
	var l int
	_ = l
	if m.ResCode != 0 {
		n += 1 + sovChannelservice(uint64(m.ResCode))
	}
	l = len(m.ResInfo)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ToggleSignaturesReq) Size() (n int) {
	var l int
	_ = l
	if m.ChnlId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		n += 1 + sovChannelservice(uint64(m.HashId))
	}
	if m.IsSign {
		n += 2
	}
	return n
}

func (m *ToggleSignaturesRsp) Size() (n int) {
	var l int
	_ = l
	if m.ResCode != 0 {
		n += 1 + sovChannelservice(uint64(m.ResCode))
	}
	l = len(m.ResInfo)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GroupUpdateBanModeReq) Size() (n int) {
	var l int
	_ = l
	if m.ChnlId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		n += 1 + sovChannelservice(uint64(m.HashId))
	}
	if m.FromId != 0 {
		n += 1 + sovChannelservice(uint64(m.FromId))
	}
	if m.BanMode {
		n += 2
	}
	return n
}

func (m *GroupUpdateBanModeRsp) Size() (n int) {
	var l int
	_ = l
	if m.ResCode != 0 {
		n += 1 + sovChannelservice(uint64(m.ResCode))
	}
	l = len(m.ResInfo)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GroupGetUserOwnChannelsReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	return n
}

func (m *ChannelBrief) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.BroadcastOrMegagroup {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GroupGetUserOwnChannelsRsp) Size() (n int) {
	var l int
	_ = l
	if len(m.Chnls) > 0 {
		for _, e := range m.Chnls {
			l = e.Size()
			n += 1 + l + sovChannelservice(uint64(l))
		}
	}
	return n
}

func (m *UpdateChannelRestrictedReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Restricted {
		n += 2
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	l = len(m.RestrictionReason)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChannelRestrictedRsp) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovChannelservice(uint64(m.ErrorCode))
	}
	l = len(m.ErrorInfo)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *DelChannelKickedLeftReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.FromId != 0 {
		n += 1 + sovChannelservice(uint64(m.FromId))
	}
	return n
}

func (m *DelChannelKickedLeftRsp) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovChannelservice(uint64(m.ErrorCode))
	}
	l = len(m.ErrorInfo)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetHotGroupIDsReq) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovChannelservice(uint64(m.Level))
	}
	if m.Limit != 0 {
		n += 1 + sovChannelservice(uint64(m.Limit))
	}
	if m.Hash != 0 {
		n += 1 + sovChannelservice(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *HotGroup) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovChannelservice(uint64(m.GroupId))
	}
	l = len(m.GroupType)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetHotGroupIDsRsp) Size() (n int) {
	var l int
	_ = l
	if m.Errno != 0 {
		n += 1 + sovChannelservice(uint64(m.Errno))
	}
	if len(m.HotArr) > 0 {
		for _, e := range m.HotArr {
			l = e.Size()
			n += 1 + l + sovChannelservice(uint64(l))
		}
	}
	if m.Hash != 0 {
		n += 1 + sovChannelservice(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetHotGroupLvReq) Size() (n int) {
	var l int
	_ = l
	if m.Group != 0 {
		n += 1 + sovChannelservice(uint64(m.Group))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetHotGroupLvRsp) Size() (n int) {
	var l int
	_ = l
	if m.Errno != 0 {
		n += 1 + sovChannelservice(uint64(m.Errno))
	}
	if m.Level != 0 {
		n += 1 + sovChannelservice(uint64(m.Level))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GMsSetDiscussionGroupReq) Size() (n int) {
	var l int
	_ = l
	if m.Broadcast != 0 {
		n += 1 + sovChannelservice(uint64(m.Broadcast))
	}
	if m.Megagroup != 0 {
		n += 1 + sovChannelservice(uint64(m.Megagroup))
	}
	if m.Operation {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GMsSetDiscussionGroupRsp) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovChannelservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChannelservice(x uint64) (n int) {
	return sovChannelservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChannelParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteId", wireType)
			}
			m.InviteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSetUsername", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSetUsername = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanViewParticipants", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanViewParticipants = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCreator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCreator = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBan = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
			}
			m.JoinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdRight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdRight == nil {
				m.AdRight = &AdminRights{}
			}
			if err := m.AdRight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanRight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BanRight == nil {
				m.BanRight = &BannerRights{}
			}
			if err := m.BanRight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartMsgid", wireType)
			}
			m.StartMsgid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartMsgid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelParticipantArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelParticipantArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelParticipantArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Part = append(m.Part, &ChannelParticipant{})
			if err := m.Part[len(m.Part)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvitedUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvitedUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvitedUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBotUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBotUser = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeGroupInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeGroupInfo = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteMessages = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanUsers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BanUsers = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PinMessages = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddNewAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddNewAdmin = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotedBy", wireType)
			}
			m.PromotedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromotedBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PostMessages = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EditMessages = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUsers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteUsers = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteLink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteLink = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BannerRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BannerRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BannerRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanReadMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanReadMessages = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMessge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMessge = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMedia = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendSticker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendSticker = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanEmbedLinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanEmbedLinks = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedBy", wireType)
			}
			m.KickedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UntilDate", wireType)
			}
			m.UntilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UntilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendGifs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendGifs = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendGames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendGames = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendInline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendInline = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteUser = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PinMessage = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeGroupInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeGroupInfo = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendPolls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendPolls = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorId", wireType)
			}
			m.CreatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Broadcast = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Megagroup = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasGeo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasGeo = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &ChannelLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelupdatesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelupdatesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelupdatesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &ChannelInfoBase{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participants == nil {
				m.Participants = &ChannelParticipantArr{}
			}
			if err := m.Participants.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelUpdatesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelUpdatesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelUpdatesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddChannelUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddChannelUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddChannelUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitorId", wireType)
			}
			m.InvitorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvitorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartMsgid", wireType)
			}
			m.StartMsgid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartMsgid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &InvitedUsers{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChannelUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChannelUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChannelUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBotUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBotUser = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsKicked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsKicked = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedId", wireType)
			}
			m.KickedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChanAboutReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChanAboutReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChanAboutReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChanTitleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChanTitleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChanTitleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChanPhotoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChanPhotoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChanPhotoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChanAdminRightsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChanAdminRightsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChanAdminRightsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeepAdmin = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminRights == nil {
				m.AdminRights = &AdminRights{}
			}
			if err := m.AdminRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChanAdminRightsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChanAdminRightsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChanAdminRightsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updates == nil {
				m.Updates = &ChannelupdatesResp{}
			}
			if err := m.Updates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdd = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ispromote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ispromote = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChanHiddenprehistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChanHiddenprehistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChanHiddenprehistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenPrehistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HiddenPrehistory = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChanBanRightsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChanBanRightsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChanBanRightsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsKick", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsKick = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BanRights == nil {
				m.BanRights = &BannerRights{}
			}
			if err := m.BanRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanDate", wireType)
			}
			m.BanDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BanDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DismissChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DismissChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DismissChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdOption", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CmdOption = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DismissChannelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DismissChannelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DismissChannelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.B = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipantLimitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipantLimitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipantLimitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartType", wireType)
			}
			m.PartType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipantLimitResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipantLimitResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipantLimitResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Part = append(m.Part, &ChannelParticipant{})
			if err := m.Part[len(m.Part)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelOnePartReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelOnePartReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelOnePartReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelOnePartResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelOnePartResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelOnePartResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneParticipant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OneParticipant == nil {
				m.OneParticipant = &ChannelParticipant{}
			}
			if err := m.OneParticipant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelUsersIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelUsersIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelUsersIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelUsersIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelUsersIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelUsersIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelBaseInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelBaseInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelBaseInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelBaseInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelBaseInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelBaseInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &ChannelInfoBase{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &ChannelInfoBase{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchChannelBaseInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchChannelBaseInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchChannelBaseInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchChannelBaseInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchChannelBaseInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchChannelBaseInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = append(m.Channel, &ChannelInfoBase{})
			if err := m.Channel[len(m.Channel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChanByLinkReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChanByLinkReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChanByLinkReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChanInfoByLinkOrUserNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChanInfoByLinkOrUserNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChanInfoByLinkOrUserNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFullChannelInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullChannelInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullChannelInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFullChannelInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullChannelInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullChannelInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channelinfo == nil {
				m.Channelinfo = &ChannelInfoBase{}
			}
			if err := m.Channelinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsCount", wireType)
			}
			m.AdminsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedCount", wireType)
			}
			m.KickedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedCount", wireType)
			}
			m.BannedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedMsgId", wireType)
			}
			m.PinnedMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PinnedMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedFromMaxId", wireType)
			}
			m.MigratedFromMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedFromMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedFromChatId", wireType)
			}
			m.MigratedFromChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedFromChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminRights == nil {
				m.AdminRights = &AdminRights{}
			}
			if err := m.AdminRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BanRights == nil {
				m.BanRights = &BannerRights{}
			}
			if err := m.BanRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotCount", wireType)
			}
			m.BotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BotId = append(m.BotId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BotId = append(m.BotId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSetUsername", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSetUsername = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanViewParticipants", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanViewParticipants = bool(v != 0)
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToggleInviteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToggleInviteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToggleInviteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminEnable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChannelLinkReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChannelLinkReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChannelLinkReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChannelLinkResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChannelLinkResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChannelLinkResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChannelInviteLinkReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChannelInviteLinkReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChannelInviteLinkReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChannelInviteLinkResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChannelInviteLinkResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChannelInviteLinkResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChanInfo == nil {
				m.ChanInfo = &ChannelInfoBase{}
			}
			if err := m.ChanInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chatinfo == nil {
				m.Chatinfo = &GetChatInfoResp{}
			}
			if err := m.Chatinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkCreator", wireType)
			}
			m.LinkCreator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LinkCreator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelUserNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelUserNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelUserNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelUserNameResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelUserNameResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelUserNameResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelPinnedMsgIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelPinnedMsgIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelPinnedMsgIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedMsgId", wireType)
			}
			m.PinnedMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PinnedMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelPinnedMsgIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelPinnedMsgIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelPinnedMsgIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserNameResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserNameResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserNameResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChannelIsEncryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChannelIsEncryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChannelIsEncryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChannelIsEncryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChannelIsEncryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChannelIsEncryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllChannelInfoByUserIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllChannelInfoByUserIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllChannelInfoByUserIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllChannelInfoByUserIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllChannelInfoByUserIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllChannelInfoByUserIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &ChannelInfoBase{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EveryoneQuietReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EveryoneQuietReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EveryoneQuietReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quiet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Quiet = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditPrivateChatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditPrivateChatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditPrivateChatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelCommonResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelCommonResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelCommonResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetChannelCreatorReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetChannelCreatorReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetChannelCreatorReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdd = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetUserAllCreateGroupsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetUserAllCreateGroupsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetUserAllCreateGroupsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromUserid", wireType)
			}
			m.FromUserid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromUserid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUserid", wireType)
			}
			m.ToUserid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToUserid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetUserAllCreateGroupsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetUserAllCreateGroupsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetUserAllCreateGroupsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SuperIds = append(m.SuperIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SuperIds = append(m.SuperIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperIds", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelIds = append(m.ChannelIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelIds = append(m.ChannelIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIds", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupIds = append(m.GroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupIds = append(m.GroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIds", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelBotIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelBotIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelBotIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelBotIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelBotIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelBotIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BotIds = append(m.BotIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BotIds = append(m.BotIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BotIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelActiveUserIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelActiveUserIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelActiveUserIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelActiveUserIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelActiveUserIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelActiveUserIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserInChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserInChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserInChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserInChannelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserInChannelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserInChannelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelVerifyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelVerifyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelVerifyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelId = append(m.ChannelId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelId = append(m.ChannelId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verify = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelVerifyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelVerifyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelVerifyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: channelLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: channelLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Long", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Long = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelGeoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelGeoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelGeoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsClear", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsClear = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &ChannelLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelGeoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelGeoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelGeoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= (UpdateChannelGeoResp_ErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoolResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoolResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoolResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelBannedRightsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelBannedRightsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelBannedRightsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedFlag", wireType)
			}
			m.BannedFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedFlag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelBannedRightsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelBannedRightsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelBannedRightsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChnlAndMembInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChnlAndMembInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChnlAndMembInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChnlId", wireType)
			}
			m.ChnlId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChnlId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembId", wireType)
			}
			m.MembId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MembId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChnlAndMembInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChnlAndMembInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChnlAndMembInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChnlInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChnlInfo == nil {
				m.ChnlInfo = &ChannelInfoBase{}
			}
			if err := m.ChnlInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MembInfo == nil {
				m.MembInfo = &ChannelParticipant{}
			}
			if err := m.MembInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetChnlSlowModeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetChnlSlowModeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetChnlSlowModeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChnlId", wireType)
			}
			m.ChnlId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChnlId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			m.HashId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HashId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetChnlSlowModeRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetChnlSlowModeRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetChnlSlowModeRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResCode", wireType)
			}
			m.ResCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetChnlGeoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetChnlGeoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetChnlGeoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChnlId", wireType)
			}
			m.ChnlId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChnlId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoLng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.GeoLng = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoLat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.GeoLat = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeoAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetChnlGeoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetChnlGeoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetChnlGeoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResCode", wireType)
			}
			m.ResCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToggleSignaturesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToggleSignaturesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToggleSignaturesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChnlId", wireType)
			}
			m.ChnlId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChnlId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			m.HashId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HashId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSign", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSign = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToggleSignaturesRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToggleSignaturesRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToggleSignaturesRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResCode", wireType)
			}
			m.ResCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupUpdateBanModeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupUpdateBanModeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupUpdateBanModeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChnlId", wireType)
			}
			m.ChnlId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChnlId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			m.HashId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HashId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BanMode = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupUpdateBanModeRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupUpdateBanModeRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupUpdateBanModeRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResCode", wireType)
			}
			m.ResCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupGetUserOwnChannelsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupGetUserOwnChannelsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupGetUserOwnChannelsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelBrief) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelBrief: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelBrief: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastOrMegagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BroadcastOrMegagroup = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupGetUserOwnChannelsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupGetUserOwnChannelsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupGetUserOwnChannelsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chnls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chnls = append(m.Chnls, &ChannelBrief{})
			if err := m.Chnls[len(m.Chnls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelRestrictedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelRestrictedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelRestrictedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestrictionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelRestrictedRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelRestrictedRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelRestrictedRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChannelKickedLeftReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChannelKickedLeftReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChannelKickedLeftReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChannelKickedLeftRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChannelKickedLeftRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChannelKickedLeftRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHotGroupIDsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHotGroupIDsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHotGroupIDsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHotGroupIDsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHotGroupIDsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHotGroupIDsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errno", wireType)
			}
			m.Errno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errno |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HotArr = append(m.HotArr, &HotGroup{})
			if err := m.HotArr[len(m.HotArr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHotGroupLvReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHotGroupLvReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHotGroupLvReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHotGroupLvRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHotGroupLvRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHotGroupLvRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errno", wireType)
			}
			m.Errno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errno |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GMsSetDiscussionGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GMsSetDiscussionGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GMsSetDiscussionGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			m.Broadcast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Broadcast |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			m.Megagroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Megagroup |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Operation = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GMsSetDiscussionGroupRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GMsSetDiscussionGroupRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GMsSetDiscussionGroupRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChannelservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChannelservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChannelservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChannelservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChannelservice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/groupinfo/channelservice.proto", fileDescriptorChannelservice)
}

var fileDescriptorChannelservice = []byte{
	// 4580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x7c, 0xcd, 0x6f, 0x1b, 0x49,
	0x76, 0xb8, 0x5a, 0x14, 0x25, 0xf2, 0x51, 0x92, 0xa5, 0xb2, 0x64, 0xd1, 0x94, 0x6c, 0xcb, 0xed,
	0xd9, 0x19, 0xed, 0x6f, 0x31, 0x9e, 0xdf, 0x38, 0x93, 0xcd, 0x0e, 0x12, 0x20, 0x10, 0x69, 0x5b,
	0x56, 0x2c, 0x8d, 0x3d, 0x2d, 0x7b, 0x76, 0x77, 0x92, 0x2c, 0xa7, 0xc9, 0x2e, 0x51, 0x6d, 0x91,
	0xdd, 0xad, 0xae, 0xa6, 0x3c, 0x3a, 0x04, 0x39, 0x04, 0x41, 0x90, 0x2c, 0x82, 0x00, 0xb3, 0x87,
	0x20, 0x8b, 0xbd, 0x04, 0xc8, 0x2d, 0x08, 0x90, 0xe4, 0x90, 0x53, 0x0e, 0x01, 0x72, 0x19, 0x20,
	0x39, 0xec, 0x9f, 0x10, 0x0c, 0x10, 0x20, 0xff, 0x40, 0x90, 0x43, 0x2e, 0x41, 0x7d, 0x35, 0xab,
	0xfa, 0x83, 0x6c, 0x9a, 0x63, 0xec, 0xc9, 0xac, 0xaa, 0xd7, 0xaf, 0xde, 0x57, 0xbd, 0x7a, 0xf5,
	0xde, 0x93, 0xa1, 0xd5, 0x73, 0xa3, 0xbe, 0xdd, 0xb9, 0xdf, 0x3d, 0xb3, 0x23, 0x82, 0xc3, 0x4b,
	0x1c, 0xde, 0x77, 0x07, 0x1f, 0xb8, 0x5e, 0x84, 0xc3, 0x53, 0xbb, 0x8b, 0x83, 0xd0, 0xef, 0x0c,
	0x4f, 0x3f, 0xe8, 0x85, 0xfe, 0x30, 0x70, 0xbd, 0x53, 0xff, 0x83, 0xee, 0x99, 0xed, 0x79, 0xb8,
	0x4f, 0x41, 0xdd, 0x2e, 0xbe, 0x1f, 0x84, 0x7e, 0xe4, 0xa3, 0x6a, 0xbc, 0xde, 0xf8, 0x41, 0x21,
	0x7c, 0x41, 0xa7, 0xeb, 0x0f, 0x06, 0xe2, 0x1f, 0x8e, 0xa4, 0xf1, 0xdb, 0xd3, 0x53, 0x12, 0xd1,
	0xcf, 0x7d, 0x8f, 0x23, 0x30, 0xff, 0x7a, 0x01, 0x50, 0x8b, 0x93, 0xf7, 0xdc, 0x0e, 0x23, 0xb7,
	0xeb, 0x06, 0xb6, 0x17, 0xa1, 0x2d, 0x58, 0x1a, 0x12, 0x1c, 0xb6, 0x5d, 0xa7, 0x6e, 0xec, 0x1a,
	0x7b, 0x65, 0x6b, 0x91, 0x0e, 0x0f, 0x1d, 0xb4, 0x0d, 0x55, 0xd7, 0xbb, 0x74, 0x23, 0x4c, 0x97,
	0xe6, 0xd9, 0x52, 0x85, 0x4f, 0x1c, 0x3a, 0x68, 0x0f, 0xd6, 0xba, 0xb6, 0xd7, 0x26, 0x38, 0x6a,
	0x53, 0x70, 0xcf, 0x1e, 0xe0, 0x7a, 0x69, 0xd7, 0xd8, 0xab, 0x58, 0xab, 0x5d, 0xdb, 0x3b, 0xc1,
	0xd1, 0x4b, 0x31, 0x8b, 0x1e, 0xc0, 0x26, 0x85, 0xbc, 0x74, 0xf1, 0xeb, 0x76, 0x30, 0xda, 0x97,
	0xd4, 0x17, 0x18, 0xf8, 0xf5, 0xae, 0xed, 0x7d, 0xe6, 0xe2, 0xd7, 0x0a, 0x49, 0x04, 0xdd, 0x02,
	0x70, 0x49, 0xbb, 0x1b, 0x62, 0x3b, 0xf2, 0xc3, 0x7a, 0x99, 0x01, 0x56, 0x5d, 0xd2, 0xe2, 0x13,
	0xe8, 0x26, 0x54, 0x5c, 0xd2, 0xb6, 0x9d, 0x81, 0xeb, 0xd5, 0x17, 0xd9, 0xe2, 0x92, 0x4b, 0xf6,
	0xe9, 0x10, 0x6d, 0xc2, 0xa2, 0x4b, 0xda, 0x1d, 0xdb, 0xab, 0x2f, 0xb1, 0x85, 0xb2, 0x4b, 0x9a,
	0xb6, 0x47, 0x79, 0x79, 0xe5, 0xbb, 0x5e, 0x3b, 0x72, 0x07, 0xb8, 0x5e, 0xe1, 0xbc, 0xd0, 0x89,
	0x17, 0xee, 0x00, 0xa3, 0x0f, 0xa1, 0x62, 0x3b, 0xed, 0xd0, 0xed, 0x9d, 0x45, 0xf5, 0xea, 0xae,
	0xb1, 0x57, 0x7b, 0x70, 0xe3, 0x7e, 0x2c, 0xc7, 0xfb, 0x0c, 0xaf, 0x45, 0x17, 0x89, 0xb5, 0x64,
	0x3b, 0xec, 0x17, 0xfa, 0x08, 0xaa, 0x1d, 0xdb, 0x13, 0xdf, 0x00, 0xfb, 0x66, 0x4b, 0xf9, 0xa6,
	0x49, 0xa5, 0x1c, 0x8a, 0x8f, 0x2a, 0x1d, 0x9b, 0x7f, 0x8f, 0x3e, 0x06, 0x08, 0x31, 0x19, 0xf6,
	0xa3, 0xae, 0xef, 0xe0, 0x7a, 0x6d, 0xd7, 0xd8, 0x5b, 0x7d, 0x70, 0x53, 0xf9, 0xac, 0x75, 0x66,
	0x47, 0x16, 0x03, 0x68, 0xf9, 0x0e, 0xb6, 0x14, 0x60, 0xf4, 0xff, 0x61, 0x03, 0x7f, 0x19, 0xf8,
	0x61, 0x84, 0x9d, 0xb6, 0xd0, 0x4a, 0xdf, 0xf5, 0xce, 0xeb, 0xcb, 0xbb, 0xc6, 0x5e, 0xd5, 0x42,
	0x72, 0xed, 0x90, 0x2d, 0x1d, 0xb9, 0xde, 0x39, 0xba, 0x03, 0xb5, 0x93, 0xc8, 0x0e, 0xa3, 0xf6,
	0x80, 0xf4, 0x5c, 0xa7, 0xbe, 0xc2, 0x98, 0x06, 0x36, 0x75, 0x4c, 0x67, 0x10, 0x82, 0x85, 0xd0,
	0xf6, 0xce, 0xeb, 0xab, 0x0c, 0x05, 0xfb, 0x6d, 0xbe, 0x82, 0xcd, 0xb4, 0x89, 0xec, 0x87, 0x21,
	0xba, 0x0d, 0xf0, 0xc2, 0x8f, 0xec, 0x7e, 0xcb, 0x1f, 0x7a, 0x91, 0x30, 0x14, 0x65, 0x06, 0x7d,
	0x08, 0x0b, 0x54, 0xb9, 0xf5, 0xf9, 0xdd, 0xd2, 0x5e, 0xed, 0xc1, 0x2d, 0x9d, 0xa9, 0x04, 0x3e,
	0x8b, 0x81, 0x9a, 0x07, 0xb0, 0xcc, 0xc9, 0x75, 0xa8, 0xad, 0x90, 0x7c, 0x43, 0xbc, 0x0d, 0x35,
	0xaa, 0x53, 0x9f, 0x9b, 0x1a, 0x33, 0x45, 0x66, 0x0e, 0x4d, 0x9f, 0x59, 0x99, 0xf9, 0xdf, 0xf3,
	0x50, 0x53, 0xb4, 0x84, 0xfe, 0x1f, 0xac, 0xd3, 0x63, 0xd8, 0xc3, 0x6d, 0x46, 0x45, 0x9b, 0x92,
	0xc1, 0x50, 0x56, 0xac, 0x6b, 0x7c, 0xe1, 0x80, 0xce, 0x1f, 0x7a, 0xa7, 0x3e, 0x7a, 0x0f, 0xae,
	0x39, 0xb8, 0x8f, 0x23, 0xdc, 0x1e, 0x60, 0x42, 0xec, 0x1e, 0x26, 0x02, 0xff, 0x2a, 0x9f, 0x3e,
	0x16, 0xb3, 0xd4, 0x82, 0xa8, 0xc6, 0x29, 0x05, 0x44, 0x58, 0x3a, 0x55, 0x2c, 0x27, 0xfd, 0x2e,
	0x2c, 0x07, 0xae, 0x37, 0x42, 0xc1, 0x4d, 0xbb, 0x16, 0xb8, 0x5e, 0xfc, 0xbd, 0x09, 0x2b, 0xb6,
	0xe3, 0xb4, 0x3d, 0xfc, 0x5a, 0x18, 0x2e, 0xb7, 0xea, 0x9a, 0xed, 0x38, 0x9f, 0xe0, 0xd7, 0xdc,
	0x78, 0xef, 0x40, 0x2d, 0x08, 0xfd, 0x81, 0x4f, 0x95, 0xdc, 0xb9, 0x62, 0xa6, 0x5d, 0xb6, 0x40,
	0x4e, 0x35, 0xaf, 0xd0, 0x3d, 0x58, 0x09, 0x7c, 0x12, 0x8d, 0x36, 0xe2, 0x46, 0xbe, 0x4c, 0x27,
	0xe3, 0x9d, 0xee, 0xc1, 0x0a, 0x76, 0x5c, 0x05, 0xa8, 0xc2, 0x81, 0xe8, 0x64, 0x0c, 0x74, 0x17,
	0x96, 0x85, 0x19, 0x71, 0x8e, 0xaa, 0x9c, 0x1a, 0x3e, 0xc7, 0x99, 0xba, 0x03, 0x35, 0xd5, 0xd2,
	0x80, 0x41, 0x80, 0x1b, 0x5b, 0x98, 0xf9, 0x8b, 0x05, 0x58, 0x56, 0x2d, 0x9d, 0x09, 0x9e, 0x9e,
	0x0a, 0x6c, 0x3b, 0xa3, 0xdd, 0xa5, 0xe0, 0x6d, 0xcf, 0xc2, 0xb6, 0x13, 0x13, 0xf0, 0x2e, 0x5c,
	0xe3, 0x0e, 0xc4, 0xe3, 0xb0, 0x3d, 0x2c, 0x04, 0xbf, 0xc2, 0xfc, 0x87, 0xc7, 0x20, 0x7b, 0x18,
	0xbd, 0x03, 0xab, 0x0a, 0x9c, 0xe3, 0xda, 0x42, 0xf8, 0xcb, 0x31, 0x98, 0xe3, 0xda, 0x23, 0x77,
	0xe4, 0x39, 0x6d, 0x12, 0xb9, 0xdd, 0x73, 0x1c, 0x0a, 0x25, 0xac, 0x0a, 0xb8, 0x13, 0x3e, 0x2b,
	0xf7, 0xc5, 0x83, 0x0e, 0x76, 0x18, 0x63, 0x44, 0x68, 0x82, 0xee, 0xfb, 0x88, 0xce, 0x52, 0xde,
	0x98, 0xbe, 0xcf, 0xe9, 0x17, 0x8a, 0x26, 0x2a, 0x7c, 0xa2, 0x79, 0x45, 0xfd, 0xd3, 0xd0, 0x8b,
	0xdc, 0x7e, 0xdb, 0xb1, 0x23, 0xcc, 0x94, 0x50, 0xb6, 0xaa, 0x6c, 0xe6, 0xa1, 0x1d, 0x61, 0xaa,
	0xeb, 0x98, 0x9a, 0x9e, 0x7b, 0x2a, 0x35, 0x50, 0x13, 0xa4, 0x1c, 0xb8, 0xa7, 0x44, 0xe3, 0xab,
	0x67, 0x0f, 0xb0, 0x54, 0x81, 0xe4, 0xeb, 0x80, 0xce, 0x69, 0x52, 0x72, 0xbd, 0xbe, 0xeb, 0x61,
	0xa1, 0x07, 0x29, 0xa5, 0x43, 0x36, 0xa9, 0xe8, 0x8a, 0x1d, 0x91, 0x9a, 0xaa, 0x2b, 0xaa, 0x4d,
	0x66, 0x5a, 0x23, 0x0b, 0x65, 0x6e, 0xa3, 0x62, 0xc1, 0xc8, 0x40, 0xb3, 0x0f, 0xcd, 0x4a, 0xf6,
	0xa1, 0x51, 0x69, 0x0f, 0xfc, 0x7e, 0x9f, 0x30, 0x1f, 0x32, 0xa2, 0xfd, 0x39, 0x9d, 0x33, 0xff,
	0x77, 0x1e, 0xd6, 0x98, 0xc7, 0xc6, 0xc2, 0x05, 0x58, 0xf8, 0x82, 0x4a, 0x4e, 0x5c, 0x91, 0xa3,
	0x73, 0x5e, 0x15, 0x33, 0x87, 0x0e, 0x25, 0xd3, 0xee, 0x76, 0x31, 0x21, 0xed, 0x33, 0x9b, 0x9c,
	0x31, 0x8b, 0x28, 0x59, 0xc0, 0xa7, 0x9e, 0xd8, 0xe4, 0x8c, 0x7d, 0xcf, 0x6f, 0x01, 0xfa, 0x7d,
	0x49, 0x7c, 0xcf, 0x67, 0x0e, 0x1d, 0xb4, 0x01, 0xe5, 0xc8, 0x8d, 0xfa, 0x98, 0x29, 0xbf, 0x6a,
	0xf1, 0x01, 0x9d, 0xb5, 0x3b, 0xfe, 0x30, 0x62, 0x9a, 0xae, 0x5a, 0x7c, 0x80, 0x76, 0xa0, 0xda,
	0x09, 0x7d, 0xdb, 0xe9, 0xda, 0x24, 0x12, 0xd7, 0xc8, 0x68, 0x82, 0xae, 0x0e, 0x70, 0xcf, 0x66,
	0xc2, 0x10, 0xc7, 0x6c, 0x34, 0x81, 0xea, 0xb0, 0xd4, 0xed, 0x0f, 0x49, 0x84, 0x43, 0x71, 0x9b,
	0xc8, 0x21, 0xf5, 0xaa, 0xcc, 0x28, 0xaa, 0x6c, 0x9a, 0xfd, 0xa6, 0x9e, 0xed, 0xcc, 0x26, 0xed,
	0x1e, 0xf6, 0x85, 0xf6, 0x16, 0xcf, 0x6c, 0x72, 0x80, 0x7d, 0xf4, 0x7d, 0xa8, 0xf4, 0xfd, 0xae,
	0x1d, 0xb9, 0xbe, 0xc7, 0x74, 0x56, 0x7b, 0xd0, 0x50, 0x3c, 0xa7, 0x10, 0xcb, 0x91, 0x80, 0xb0,
	0x62, 0x58, 0x74, 0x17, 0x16, 0x1e, 0xf6, 0xfd, 0x1e, 0x53, 0x63, 0xed, 0xc1, 0xca, 0x7d, 0x11,
	0x28, 0x3c, 0xc4, 0x9d, 0x61, 0xcf, 0x62, 0x4b, 0xe6, 0xbf, 0x19, 0xf1, 0x6d, 0x3f, 0x0c, 0x28,
	0x15, 0xc4, 0xc2, 0x24, 0x40, 0x1f, 0xc1, 0x92, 0x40, 0xcb, 0x84, 0xaf, 0x6f, 0x28, 0xe0, 0xa9,
	0x8e, 0x9b, 0x36, 0xc1, 0x96, 0x04, 0x45, 0x0f, 0x61, 0x59, 0xbb, 0xba, 0xe7, 0xd9, 0xa7, 0xbb,
	0x63, 0xbd, 0xfc, 0x7e, 0x18, 0x5a, 0xda, 0x57, 0x89, 0xeb, 0xaf, 0x34, 0xc5, 0xf5, 0x67, 0x5e,
	0xc0, 0xc6, 0x01, 0x8e, 0xc4, 0x26, 0x2f, 0x25, 0x3f, 0x13, 0xcd, 0x49, 0xb9, 0x52, 0xe6, 0xb5,
	0x2b, 0x45, 0x0a, 0xb0, 0x94, 0x2f, 0xc0, 0xff, 0x34, 0x60, 0x7d, 0xdf, 0x71, 0xe4, 0x9e, 0x04,
	0x87, 0x05, 0x36, 0xa4, 0x81, 0x0b, 0x3d, 0x74, 0xbe, 0xb2, 0x67, 0x55, 0xcc, 0xa4, 0xcd, 0xbb,
	0x94, 0x32, 0xef, 0x3b, 0x50, 0x23, 0xca, 0xa5, 0xbd, 0xc0, 0x6f, 0x00, 0x32, 0xba, 0xb4, 0xdf,
	0x87, 0x32, 0x77, 0xd8, 0x65, 0x76, 0xd1, 0xaa, 0x41, 0x87, 0x7a, 0x99, 0x5a, 0x1c, 0x2a, 0xe6,
	0x73, 0x31, 0x9f, 0xcf, 0xaf, 0x0d, 0x58, 0x7f, 0x88, 0xfb, 0xd3, 0xf1, 0x99, 0x2b, 0xd8, 0xc4,
	0x5d, 0x5d, 0x4a, 0xdc, 0xd5, 0x2c, 0xa8, 0x24, 0x6d, 0xee, 0x48, 0x85, 0x87, 0xae, 0xb8, 0xe4,
	0x29, 0x1b, 0xd3, 0x45, 0xfe, 0x8b, 0xe2, 0x2d, 0x73, 0x9f, 0xcb, 0x27, 0x14, 0x95, 0x8d, 0x61,
	0xe5, 0x8f, 0x0d, 0x40, 0xdc, 0x38, 0x28, 0x37, 0xfb, 0xf4, 0x94, 0xcf, 0xc2, 0x4b, 0xec, 0x36,
	0x4a, 0xaa, 0xdb, 0x90, 0x74, 0x2c, 0x14, 0xa5, 0xe3, 0x05, 0xf5, 0x41, 0x33, 0xd2, 0xc1, 0x9d,
	0x5a, 0x49, 0x75, 0x6a, 0x53, 0xd3, 0xf1, 0xfc, 0xcc, 0x8f, 0xfc, 0x19, 0xe9, 0x08, 0x28, 0x0e,
	0x49, 0x07, 0x1b, 0x14, 0xa1, 0xe3, 0xbf, 0x0c, 0xa8, 0x2b, 0x7a, 0x51, 0x02, 0xea, 0x42, 0xd4,
	0x9c, 0x86, 0xfe, 0x40, 0xa1, 0x86, 0x0e, 0x75, 0x32, 0x4b, 0x1a, 0x99, 0xb7, 0x00, 0xce, 0x31,
	0x0e, 0x44, 0x98, 0xc5, 0x6d, 0xac, 0x4a, 0x67, 0x78, 0x90, 0xf5, 0x31, 0x2c, 0xb3, 0x15, 0x1e,
	0xbc, 0xf3, 0xdb, 0x3f, 0x3f, 0xe2, 0xaf, 0xd9, 0x4a, 0x60, 0x59, 0xc0, 0x04, 0xff, 0xd5, 0x80,
	0x9b, 0x39, 0xac, 0x92, 0x00, 0xfd, 0x06, 0x2c, 0x09, 0x67, 0x2c, 0xbc, 0x6f, 0x46, 0xa0, 0xac,
	0x78, 0x6b, 0x4b, 0x42, 0x53, 0xd1, 0xd3, 0x17, 0x8e, 0x23, 0x62, 0x24, 0x3e, 0xa0, 0x77, 0x94,
	0x4b, 0x44, 0x78, 0x38, 0x3a, 0x6a, 0x62, 0x22, 0xe1, 0x6e, 0x17, 0xa6, 0x71, 0xb7, 0xff, 0x62,
	0xc0, 0xad, 0x11, 0x17, 0x4f, 0x5c, 0xc7, 0xc1, 0x5e, 0x10, 0xe2, 0x33, 0x97, 0x44, 0x7e, 0x78,
	0xf5, 0x56, 0xb4, 0xf6, 0x3d, 0x58, 0xe7, 0xfb, 0xb4, 0x47, 0x1b, 0x09, 0xe5, 0xad, 0xf1, 0x85,
	0xe7, 0xf1, 0x7c, 0xac, 0x88, 0x72, 0xbe, 0x22, 0xfe, 0xc7, 0x80, 0x1b, 0x23, 0x16, 0x9a, 0xf6,
	0xdb, 0xb4, 0xb8, 0x1b, 0xf4, 0xd1, 0x49, 0x1d, 0x95, 0x20, 0x58, 0x8c, 0xd0, 0xf7, 0x01, 0xe2,
	0x57, 0xa2, 0x34, 0xb4, 0xdc, 0x67, 0x62, 0x55, 0x3e, 0x13, 0x09, 0x7d, 0xdf, 0xd2, 0xef, 0x58,
	0x1c, 0xc1, 0x43, 0xcf, 0xa5, 0x8e, 0xed, 0xb1, 0xd0, 0x52, 0x72, 0xbe, 0x94, 0xcf, 0xf9, 0xdf,
	0x51, 0x87, 0xee, 0x92, 0x81, 0x4b, 0x48, 0xf1, 0xc0, 0x2b, 0xf7, 0xd0, 0x4f, 0xbc, 0xb2, 0x76,
	0xa0, 0xda, 0x1a, 0x38, 0xcf, 0x02, 0x16, 0xc4, 0x88, 0xd3, 0x16, 0x4f, 0x14, 0xd1, 0xd4, 0xef,
	0x03, 0x4a, 0x92, 0x4b, 0x02, 0xb4, 0x0c, 0x46, 0x47, 0xbc, 0x1d, 0x8c, 0x4e, 0xc2, 0x96, 0xe7,
	0xa7, 0xb1, 0xe5, 0xaf, 0x0d, 0xb8, 0xae, 0x84, 0x25, 0x47, 0xee, 0xc0, 0x2d, 0x72, 0x2b, 0xdc,
	0x80, 0x45, 0xff, 0xf4, 0x94, 0xe0, 0x48, 0xca, 0x83, 0x8f, 0xe8, 0x49, 0xec, 0x53, 0x14, 0xc2,
	0x04, 0xf8, 0x80, 0xde, 0x5c, 0x34, 0xd4, 0x69, 0x47, 0x57, 0x01, 0x16, 0xb7, 0x76, 0x85, 0x4e,
	0xbc, 0xb8, 0x0a, 0x30, 0x45, 0x45, 0x85, 0x19, 0xdf, 0x69, 0x62, 0x44, 0x59, 0xbc, 0x60, 0xfa,
	0xad, 0x5a, 0xc6, 0x45, 0x11, 0xcd, 0xfe, 0x8d, 0x01, 0x1b, 0x69, 0x56, 0x48, 0xf0, 0x16, 0x5e,
	0xe7, 0xb3, 0x04, 0x6b, 0x5f, 0x19, 0x6a, 0xb4, 0xf6, 0xcc, 0xc3, 0x14, 0xfb, 0x5b, 0xb5, 0xc1,
	0x02, 0x77, 0xd0, 0xcf, 0x0d, 0xd8, 0xcc, 0x20, 0x8a, 0x04, 0xe8, 0x31, 0x5c, 0xf3, 0x3d, 0xac,
	0xe6, 0xa6, 0xf2, 0x9d, 0xb3, 0x2a, 0xa7, 0x55, 0x9f, 0x23, 0x91, 0x89, 0xb4, 0x19, 0x6c, 0xf4,
	0x47, 0x5a, 0x78, 0x4b, 0x23, 0xb7, 0x43, 0xa7, 0x80, 0xc0, 0x24, 0xdb, 0xf3, 0xf9, 0x6c, 0xff,
	0x99, 0xc6, 0x76, 0x8c, 0x9a, 0x04, 0x53, 0x29, 0xa3, 0xa4, 0x28, 0x63, 0x06, 0xc3, 0xf8, 0x99,
	0x46, 0x0c, 0x7d, 0x62, 0xd0, 0xa7, 0xc6, 0xaf, 0xda, 0x32, 0x7e, 0x6a, 0xc0, 0x8d, 0x2c, 0xaa,
	0x48, 0x40, 0xdf, 0x67, 0x1d, 0x31, 0x2e, 0xf0, 0x5c, 0x8a, 0x61, 0x67, 0x31, 0x85, 0x4b, 0x58,
	0x1f, 0x11, 0x53, 0x50, 0x3c, 0x13, 0x5f, 0xcd, 0x05, 0x9e, 0x3b, 0x7f, 0x62, 0x00, 0x4a, 0x6e,
	0xfc, 0xab, 0x91, 0x40, 0x04, 0x5b, 0x4d, 0x3b, 0xea, 0x9e, 0xcd, 0x68, 0x26, 0xa5, 0xe9, 0x9e,
	0x7b, 0x3f, 0x35, 0xa0, 0x9e, 0xbd, 0x6d, 0xf2, 0xd5, 0x5c, 0x2a, 0xfa, 0x6a, 0x9e, 0x41, 0x06,
	0x17, 0xb0, 0x26, 0x94, 0xd1, 0xbc, 0x3a, 0x72, 0xbd, 0x73, 0xca, 0xfc, 0x5d, 0x58, 0x96, 0xcc,
	0xb3, 0x84, 0x9c, 0xc1, 0x6e, 0x8e, 0x9a, 0xcc, 0x12, 0xb8, 0xde, 0xf9, 0x4c, 0xef, 0xdd, 0x53,
	0xb8, 0x2d, 0xb6, 0x64, 0x9c, 0xb0, 0x6d, 0x9f, 0x85, 0xd4, 0x63, 0x7c, 0x62, 0x0f, 0x70, 0x41,
	0x02, 0x0a, 0x78, 0x24, 0xe1, 0x04, 0x1e, 0x0f, 0xfb, 0xfd, 0xe9, 0xac, 0x7c, 0x76, 0x27, 0x30,
	0x26, 0x08, 0xf9, 0xf7, 0x45, 0xe6, 0x04, 0x52, 0x54, 0x91, 0x00, 0xfd, 0x16, 0x48, 0x16, 0xdd,
	0x62, 0xa7, 0x40, 0x05, 0xcf, 0x4d, 0xdc, 0xcf, 0xe7, 0x26, 0xee, 0xdf, 0x07, 0xa4, 0xa6, 0x4d,
	0xda, 0x5d, 0x76, 0xa9, 0xf3, 0x70, 0x63, 0x5d, 0x5d, 0xe1, 0x77, 0xfb, 0x5d, 0xf1, 0x9e, 0x91,
	0x80, 0x3c, 0xfa, 0xe0, 0xef, 0x96, 0x11, 0x88, 0xc8, 0x65, 0x72, 0x10, 0x1e, 0x86, 0xd4, 0xf8,
	0x5c, 0x0c, 0xd2, 0xa1, 0x44, 0x4b, 0x10, 0x1e, 0x76, 0xd6, 0xf8, 0x1c, 0x07, 0x31, 0x61, 0x25,
	0x70, 0x19, 0xc8, 0x80, 0xf4, 0xa8, 0x16, 0x78, 0xde, 0xb3, 0xc6, 0x27, 0x8f, 0x49, 0xef, 0xd0,
	0x41, 0x1f, 0xc0, 0xc6, 0xc0, 0xed, 0x85, 0x36, 0xe5, 0x96, 0x05, 0xd1, 0x03, 0xfb, 0x4b, 0x0a,
	0xca, 0x93, 0x64, 0xeb, 0x72, 0xed, 0x71, 0xe8, 0x0f, 0x8e, 0xed, 0x2f, 0x0f, 0x1d, 0xf4, 0x21,
	0x6c, 0xea, 0x1f, 0x74, 0xcf, 0xec, 0x88, 0x7e, 0xc1, 0xf3, 0x67, 0x48, 0xfd, 0x82, 0x9e, 0x17,
	0x76, 0x01, 0xe9, 0x0f, 0x38, 0x28, 0xfe, 0x80, 0xd3, 0x03, 0xf2, 0x5a, 0xe1, 0x80, 0x3c, 0xce,
	0x04, 0x2c, 0xab, 0x99, 0x80, 0x6d, 0xa8, 0x76, 0xfc, 0x48, 0x08, 0x8c, 0xd7, 0x57, 0x2a, 0x1d,
	0x3f, 0xe2, 0xd2, 0xda, 0x84, 0x45, 0xba, 0xe8, 0x3a, 0xf5, 0x55, 0xe6, 0x8a, 0xca, 0x1d, 0x3f,
	0xe2, 0x75, 0xb3, 0x56, 0xb2, 0x6e, 0x76, 0x8d, 0x27, 0xaa, 0x5b, 0xa9, 0xba, 0x59, 0x2b, 0xb3,
	0x6e, 0xb6, 0xc6, 0xeb, 0x66, 0xad, 0x8c, 0xba, 0xd9, 0x0e, 0x54, 0xfb, 0xbe, 0xd7, 0x73, 0xa3,
	0xa1, 0x83, 0xeb, 0xeb, 0xbb, 0xc6, 0x9e, 0x61, 0x8d, 0x26, 0x50, 0x03, 0x2a, 0x7d, 0x3b, 0xe2,
	0x8b, 0x88, 0x2d, 0xc6, 0x63, 0x84, 0x60, 0xc1, 0x76, 0x9c, 0xb0, 0x7e, 0x9d, 0x17, 0x83, 0xe8,
	0xef, 0x84, 0xff, 0xda, 0x98, 0xc6, 0x7f, 0xfd, 0xbd, 0x01, 0xd7, 0x5e, 0xf8, 0xbd, 0x5e, 0x1f,
	0x73, 0xc3, 0x7e, 0xcb, 0xc7, 0x5b, 0x18, 0x04, 0xf6, 0xec, 0x8e, 0xc8, 0xfd, 0x56, 0x84, 0xe2,
	0x1f, 0xb1, 0xa9, 0x22, 0x1e, 0xe0, 0x02, 0x36, 0xb4, 0x6c, 0xb5, 0x74, 0xbb, 0x6f, 0x31, 0xc5,
	0x78, 0x0a, 0x9b, 0x19, 0x5b, 0x92, 0x80, 0x6a, 0x43, 0xf1, 0xb0, 0xec, 0xf7, 0x2c, 0xb7, 0xc9,
	0x5f, 0x1a, 0x70, 0xb3, 0x75, 0x86, 0xbb, 0xe7, 0xb1, 0xa7, 0x92, 0xce, 0xe6, 0x5b, 0xd6, 0x4b,
	0x75, 0xda, 0xd8, 0xeb, 0x67, 0xf3, 0xd0, 0xc8, 0xa3, 0x2c, 0x47, 0x0e, 0x1b, 0x50, 0xee, 0xb1,
	0x67, 0x16, 0xa7, 0x86, 0x0f, 0x68, 0x9c, 0xd2, 0x15, 0x57, 0x97, 0x90, 0xf8, 0xd8, 0x38, 0x45,
	0xc2, 0x8a, 0xef, 0x22, 0xe6, 0xd9, 0x17, 0x52, 0xdf, 0xf1, 0x0b, 0x31, 0x92, 0x57, 0x81, 0x15,
	0xc3, 0xa2, 0x5d, 0xa8, 0x51, 0x6a, 0x5a, 0x4a, 0x89, 0xba, 0x6c, 0xa9, 0x53, 0x09, 0x7d, 0x2d,
	0x4e, 0xf9, 0x80, 0x52, 0xf2, 0x65, 0x22, 0x6e, 0x97, 0xb7, 0xf0, 0x9b, 0xaa, 0x6b, 0x1b, 0xaa,
	0x6c, 0x21, 0x2e, 0xd5, 0x57, 0xad, 0xca, 0x50, 0xe0, 0x2d, 0xa2, 0xaa, 0xcf, 0xd4, 0xc4, 0x96,
	0x46, 0x13, 0x09, 0x12, 0xcc, 0x1a, 0xd3, 0x30, 0xfb, 0x0b, 0x03, 0xb6, 0x35, 0xc4, 0xcf, 0x47,
	0xf7, 0xc9, 0x2c, 0xfc, 0xa6, 0xae, 0xab, 0x52, 0xfa, 0xba, 0x2a, 0xc0, 0xf6, 0x8f, 0x61, 0x27,
	0x9f, 0xba, 0xd9, 0x38, 0xff, 0xca, 0x80, 0x35, 0x66, 0xfc, 0x53, 0xa8, 0x77, 0x62, 0xa8, 0x3f,
	0xab, 0x9a, 0x3f, 0x81, 0xf5, 0x04, 0x4d, 0xb3, 0x31, 0xf9, 0x39, 0xdc, 0xd0, 0x0e, 0x38, 0x79,
	0xe4, 0x75, 0x0b, 0xa5, 0x10, 0x0b, 0x84, 0x92, 0xaf, 0x60, 0x2b, 0x13, 0x37, 0x09, 0xa8, 0x97,
	0xc0, 0x74, 0x20, 0x52, 0x48, 0x7c, 0x30, 0x8b, 0x0f, 0xfd, 0x1c, 0x76, 0x0e, 0x70, 0xb4, 0xaf,
	0x85, 0x87, 0xcd, 0xab, 0x97, 0xcc, 0xd6, 0x28, 0x37, 0xb9, 0xdd, 0x0b, 0x05, 0xf8, 0xf8, 0xca,
	0x80, 0x5b, 0x63, 0x90, 0xf3, 0x67, 0x98, 0xec, 0x2c, 0x2a, 0xf0, 0x02, 0x89, 0x61, 0x67, 0x61,
	0xf8, 0x8f, 0x0c, 0x58, 0x7b, 0x74, 0x89, 0xc3, 0x2b, 0xdf, 0xc3, 0x9f, 0x0e, 0x5d, 0x1c, 0x8d,
	0xe5, 0x52, 0x57, 0xe6, 0x7c, 0x52, 0x99, 0x1b, 0x50, 0xbe, 0xa0, 0x38, 0x44, 0x96, 0x9a, 0x0f,
	0x8a, 0x98, 0x23, 0x7d, 0x96, 0x3e, 0x72, 0xdc, 0xe8, 0x79, 0xe8, 0x5e, 0xf2, 0x43, 0x38, 0x13,
	0x1d, 0x37, 0x60, 0x51, 0x04, 0x09, 0x9c, 0x10, 0x31, 0x2a, 0x42, 0xc9, 0x0b, 0xd8, 0xd2, 0x1c,
	0x41, 0x8b, 0xf5, 0x56, 0xcd, 0x7a, 0x3c, 0xfe, 0xd9, 0x80, 0x8d, 0x93, 0xf8, 0xd9, 0x2d, 0xee,
	0x8e, 0x02, 0xa7, 0xa3, 0x01, 0x15, 0x3f, 0xc0, 0x21, 0xbb, 0x7c, 0x44, 0x6f, 0x96, 0x1c, 0x8f,
	0xcd, 0x53, 0x87, 0x78, 0x60, 0x87, 0xe7, 0xa2, 0x3c, 0x2e, 0x46, 0xa2, 0x69, 0xca, 0x76, 0x1c,
	0xd1, 0x0a, 0x21, 0xca, 0x0b, 0x05, 0xca, 0x1d, 0xff, 0x68, 0xc0, 0xb6, 0x85, 0x09, 0x0f, 0x5b,
	0xa9, 0xfd, 0xb2, 0x70, 0x86, 0x75, 0x0a, 0xb0, 0x54, 0xbb, 0x4a, 0xa6, 0x91, 0x20, 0xf3, 0x0e,
	0xd4, 0x58, 0xc4, 0x2f, 0x72, 0xa3, 0x9c, 0x0b, 0xa0, 0x53, 0x2f, 0x79, 0x7e, 0x74, 0x1b, 0xaa,
	0x91, 0x2f, 0x97, 0x39, 0x27, 0x95, 0xc8, 0x17, 0x8b, 0x79, 0xbc, 0x14, 0x88, 0xf4, 0xfe, 0xc1,
	0x80, 0x9d, 0x7c, 0xa2, 0x49, 0x40, 0xa9, 0x26, 0xc3, 0x80, 0x8a, 0x8c, 0x9f, 0xb6, 0xb2, 0x15,
	0x8f, 0xd1, 0xed, 0x58, 0x2f, 0x74, 0x95, 0xa7, 0x19, 0x94, 0x19, 0xfa, 0x2d, 0x53, 0x3c, 0x5d,
	0x2d, 0xf1, 0x6f, 0xe5, 0x78, 0x96, 0x8a, 0xcc, 0x0f, 0xe1, 0xba, 0x92, 0xa3, 0xa2, 0x4f, 0x09,
	0xf2, 0xed, 0xf8, 0x50, 0x57, 0x4d, 0x3d, 0x4a, 0xc4, 0x24, 0xa0, 0xf2, 0x65, 0x2f, 0x16, 0x29,
	0x01, 0x31, 0x9a, 0xc5, 0xa3, 0xfc, 0x04, 0x1a, 0xa3, 0xad, 0xf6, 0xbb, 0x91, 0x7b, 0x89, 0xb9,
	0x8b, 0xfb, 0x96, 0x58, 0x09, 0x61, 0x3b, 0x17, 0x3f, 0x61, 0x3d, 0x1b, 0x62, 0x28, 0x58, 0x92,
	0xc3, 0x59, 0x78, 0x0a, 0x61, 0x33, 0xbe, 0x2e, 0x0f, 0x3d, 0xa5, 0xde, 0xf2, 0xa6, 0x1e, 0xaa,
	0xc0, 0xb3, 0xe1, 0xbe, 0xb8, 0x52, 0x13, 0x7b, 0xf2, 0x5b, 0x8f, 0x44, 0x76, 0x84, 0xe5, 0xad,
	0xc7, 0x06, 0xe6, 0x9f, 0x6b, 0xa5, 0x30, 0x0f, 0xf7, 0x3f, 0xc3, 0xa1, 0x7b, 0x7a, 0x35, 0x15,
	0x95, 0xa5, 0x94, 0x1f, 0xbd, 0x64, 0x48, 0xa4, 0x1f, 0xe5, 0x23, 0x74, 0x0f, 0xca, 0x0e, 0xa5,
	0x34, 0xdb, 0x91, 0xf2, 0xb5, 0x94, 0x27, 0x95, 0xe4, 0xcc, 0xe6, 0x49, 0x9f, 0xc2, 0xb5, 0x44,
	0xc3, 0x0c, 0x5a, 0x83, 0x52, 0xdf, 0xe6, 0xd9, 0x7c, 0xc3, 0xa2, 0x3f, 0xd9, 0x83, 0xc2, 0xf7,
	0xb8, 0x15, 0x19, 0x16, 0xfb, 0x1d, 0x3f, 0x7d, 0x4b, 0xa3, 0xa7, 0xaf, 0xf9, 0x4f, 0x06, 0x5c,
	0xd7, 0x68, 0x3c, 0xc0, 0x2c, 0x45, 0x55, 0x87, 0x25, 0x97, 0xb4, 0xfa, 0xd8, 0x0e, 0x85, 0x88,
	0xe5, 0x50, 0x6b, 0xe5, 0x99, 0x9f, 0xa2, 0x95, 0x47, 0x17, 0x74, 0x29, 0x23, 0xbc, 0x7d, 0x29,
	0x14, 0xc4, 0x13, 0x3b, 0x8b, 0xdc, 0x68, 0xa9, 0xcf, 0x3e, 0xc7, 0x57, 0xb2, 0x51, 0xa2, 0x64,
	0x95, 0xcf, 0xf1, 0xd5, 0xa1, 0x63, 0xfe, 0xa9, 0x01, 0x1b, 0x69, 0xc2, 0x49, 0x80, 0x7e, 0x13,
	0x4a, 0x38, 0x0c, 0x85, 0x48, 0xbf, 0xab, 0x90, 0x96, 0x05, 0x7d, 0xff, 0x51, 0x18, 0xfa, 0x21,
	0x13, 0x31, 0xfd, 0xca, 0xfc, 0x08, 0xaa, 0xf1, 0x0c, 0x5a, 0x81, 0xea, 0xc9, 0x90, 0xc6, 0x9b,
	0x8f, 0x87, 0xfd, 0xb5, 0x39, 0x04, 0xb0, 0xf8, 0xd8, 0x76, 0xfb, 0xd8, 0x59, 0x9b, 0x47, 0xcb,
	0x50, 0x79, 0xd8, 0x14, 0xa3, 0x92, 0xf9, 0x0e, 0x40, 0xd3, 0xf7, 0xfb, 0x5c, 0x5f, 0xd4, 0x64,
	0xf8, 0x2f, 0x21, 0x39, 0x31, 0x32, 0xff, 0x30, 0x11, 0x60, 0xb3, 0x1c, 0x8c, 0xa3, 0x55, 0x6b,
	0x5b, 0x29, 0xbf, 0xd0, 0x52, 0x03, 0x62, 0xfe, 0x45, 0xfb, 0xb4, 0x6f, 0xf7, 0xe4, 0x2d, 0xc2,
	0xa7, 0x1e, 0xf7, 0xed, 0x1e, 0x05, 0xd8, 0x4f, 0xa7, 0x0f, 0xf6, 0xe3, 0x88, 0xd9, 0xfc, 0xbd,
	0x71, 0x04, 0xf0, 0x42, 0x09, 0x63, 0xbe, 0x1d, 0xdb, 0x64, 0xd9, 0x52, 0xc4, 0x11, 0x2f, 0xb3,
	0x37, 0x24, 0x4f, 0xeb, 0xf1, 0x65, 0x1a, 0x8f, 0x99, 0x87, 0xa2, 0xe4, 0xe1, 0xf5, 0xf7, 0x3d,
	0xe7, 0x18, 0x0f, 0x3a, 0x32, 0xdb, 0xb9, 0x05, 0x4b, 0x74, 0x56, 0x39, 0x7a, 0x74, 0xc8, 0x55,
	0x4e, 0xe1, 0x94, 0x17, 0x0d, 0xfb, 0xcc, 0x19, 0xd5, 0x72, 0x74, 0x5c, 0x3c, 0x3c, 0x64, 0x1f,
	0x17, 0xcc, 0xd2, 0x4b, 0x58, 0xf4, 0x31, 0x54, 0x24, 0x1a, 0x61, 0xb4, 0x13, 0x6a, 0x5e, 0x31,
	0xb8, 0xf9, 0x05, 0xa0, 0x13, 0x4e, 0xcb, 0x49, 0xdf, 0x7f, 0x7d, 0x4c, 0x4d, 0x65, 0x02, 0x53,
	0x54, 0xd8, 0x92, 0xa9, 0x92, 0xb5, 0x48, 0x87, 0x87, 0x0e, 0x3d, 0x51, 0x27, 0xb8, 0xeb, 0x7b,
	0x0e, 0x11, 0xc6, 0x2f, 0x87, 0xe6, 0xef, 0xa4, 0x77, 0x20, 0x01, 0xba, 0x09, 0x15, 0x0b, 0x13,
	0x55, 0x17, 0x4b, 0x16, 0x26, 0x4c, 0x13, 0x62, 0x49, 0xd1, 0x03, 0x5d, 0x62, 0xd4, 0x46, 0xb0,
	0x22, 0x70, 0x89, 0x83, 0x3c, 0x8e, 0xd0, 0x03, 0xec, 0xb7, 0xfb, 0xb1, 0x93, 0x58, 0x3c, 0xc0,
	0xfe, 0x91, 0xd7, 0x8b, 0x17, 0x6c, 0x1e, 0xc4, 0x8a, 0x05, 0x3b, 0xa2, 0x1c, 0x1c, 0x60, 0x7f,
	0x9f, 0xba, 0x10, 0x1e, 0x8a, 0xc8, 0xa1, 0xd9, 0xd2, 0x76, 0xe5, 0x57, 0x90, 0x20, 0x36, 0x49,
	0x3b, 0x5f, 0x39, 0xcc, 0x20, 0xfd, 0x0b, 0xb8, 0xce, 0x33, 0x69, 0x27, 0x6e, 0xcf, 0xb3, 0xa3,
	0x61, 0xc8, 0x3b, 0xdf, 0xa6, 0x97, 0xf4, 0x16, 0x2c, 0x1d, 0x92, 0x36, 0x71, 0x7b, 0x9e, 0x74,
	0xda, 0x87, 0x84, 0xe2, 0x34, 0x9f, 0x66, 0xec, 0xf0, 0xc6, 0x92, 0xfe, 0x03, 0xd8, 0x64, 0x91,
	0x14, 0x3f, 0x52, 0x4d, 0xdb, 0x7b, 0x73, 0xd3, 0xd8, 0x82, 0xa5, 0xc7, 0xa2, 0x11, 0x43, 0xc4,
	0xb1, 0x8f, 0x79, 0x23, 0xc6, 0x4d, 0xa8, 0x34, 0x6d, 0xaf, 0x3d, 0x90, 0x51, 0x54, 0xc5, 0x5a,
	0x12, 0x1b, 0x99, 0xc7, 0x99, 0xdb, 0xbf, 0x31, 0x37, 0xbf, 0x0e, 0x0d, 0x86, 0xee, 0x80, 0x07,
	0x8b, 0xcf, 0x5e, 0xcb, 0xeb, 0x56, 0xea, 0xe0, 0xa5, 0x7e, 0x7b, 0x72, 0xe7, 0x6c, 0xfe, 0xdc,
	0x80, 0x65, 0xe9, 0x4d, 0x42, 0x17, 0x9f, 0x16, 0x70, 0x62, 0xfb, 0xe9, 0x57, 0xfd, 0xc8, 0x47,
	0xa1, 0x8f, 0xe0, 0x46, 0x53, 0xb6, 0xa6, 0xb6, 0xfd, 0xb0, 0x3d, 0x6a, 0x4d, 0xe5, 0xaa, 0xdc,
	0x88, 0x57, 0x9f, 0x85, 0xc7, 0x71, 0x97, 0xea, 0x06, 0x94, 0x5f, 0xa8, 0xdd, 0xb0, 0x6c, 0x60,
	0x3e, 0xcd, 0xe7, 0x89, 0x04, 0xe8, 0x7d, 0x28, 0x53, 0xbd, 0xc8, 0x67, 0xe6, 0x56, 0xda, 0x1f,
	0x30, 0x8e, 0x2c, 0x0e, 0x65, 0xfe, 0xad, 0x01, 0x0d, 0xcd, 0x7b, 0x5a, 0x98, 0x44, 0xa1, 0xdb,
	0x8d, 0xb0, 0x53, 0xc0, 0x79, 0xdf, 0x66, 0xd7, 0xbd, 0x80, 0x17, 0xbd, 0x4d, 0xca, 0xcc, 0x44,
	0xdf, 0x8d, 0xde, 0x07, 0x24, 0xc1, 0x5d, 0x9f, 0x75, 0x9e, 0x13, 0xd1, 0x85, 0x52, 0xb5, 0xd6,
	0x95, 0x15, 0x8b, 0x2d, 0x98, 0x9f, 0xe7, 0x13, 0x3b, 0xb3, 0xa3, 0x7f, 0x05, 0x5b, 0xa3, 0x36,
	0x4a, 0xde, 0xb5, 0x78, 0x84, 0x4f, 0xa3, 0x02, 0x52, 0x50, 0xcc, 0x68, 0x5e, 0xbb, 0xe3, 0xf3,
	0x0e, 0x80, 0x19, 0xe6, 0xec, 0x45, 0x02, 0xf4, 0x83, 0x14, 0x13, 0x63, 0x23, 0xa8, 0xe2, 0xfc,
	0x7d, 0xc9, 0x0a, 0xd3, 0x4f, 0xfc, 0x88, 0xf7, 0x81, 0x3f, 0x64, 0x27, 0x60, 0x03, 0xca, 0x47,
	0xf8, 0x52, 0x34, 0x13, 0x97, 0x2d, 0x3e, 0x60, 0xb3, 0xac, 0x47, 0x46, 0xa4, 0x68, 0xd9, 0x80,
	0xc6, 0x59, 0x4f, 0xa4, 0x16, 0x57, 0x2c, 0xf6, 0x9b, 0xc6, 0x8b, 0x0f, 0xc7, 0xc4, 0x8b, 0xec,
	0x1f, 0xb3, 0x09, 0x15, 0xb9, 0x2d, 0x73, 0xb6, 0xfc, 0x39, 0x25, 0x4f, 0xb1, 0x18, 0xa2, 0x1d,
	0xa8, 0xb2, 0x9f, 0x2f, 0x64, 0x6e, 0xb8, 0x6a, 0x8d, 0x26, 0xcc, 0xbf, 0x30, 0x52, 0xe4, 0xf3,
	0x78, 0xf9, 0x51, 0x18, 0x7a, 0xbe, 0x24, 0x9f, 0x0d, 0xd0, 0xf7, 0x60, 0xf1, 0x89, 0x1f, 0xed,
	0x87, 0xa1, 0xe8, 0x97, 0xb9, 0xae, 0x88, 0x4f, 0x22, 0xb0, 0x04, 0xc8, 0x9b, 0x73, 0x75, 0xcc,
	0x4a, 0xbc, 0x12, 0xdf, 0xd1, 0xa5, 0x10, 0x27, 0x1b, 0x49, 0x7a, 0x38, 0xcf, 0x31, 0xba, 0xf9,
	0x31, 0xe8, 0xba, 0x49, 0x74, 0xb9, 0xec, 0xc5, 0x3a, 0x9b, 0x57, 0x75, 0x16, 0x6f, 0x52, 0x1a,
	0xb3, 0xc9, 0x5f, 0x19, 0x50, 0x3f, 0x38, 0x26, 0x27, 0x38, 0x7a, 0xe8, 0x92, 0xee, 0x90, 0x10,
	0xd7, 0xf7, 0xb8, 0x38, 0xf0, 0x05, 0x55, 0x40, 0xec, 0x85, 0xa4, 0x91, 0x37, 0xd5, 0x7e, 0xfa,
	0xd8, 0x31, 0xc9, 0x57, 0xcf, 0xc8, 0x53, 0xed, 0x40, 0xf5, 0x19, 0xcb, 0x0b, 0xd0, 0xf0, 0x59,
	0x74, 0x32, 0xc6, 0x13, 0xc5, 0xe4, 0xd9, 0xc8, 0x23, 0x8d, 0x04, 0x0f, 0x7e, 0x79, 0x0f, 0x36,
	0xc4, 0x69, 0x39, 0x61, 0x7f, 0x3a, 0x77, 0xc2, 0xff, 0x3e, 0x0f, 0xbd, 0x84, 0xb5, 0x64, 0xfc,
	0x8b, 0x6e, 0x8f, 0x0d, 0x8e, 0x2f, 0x1a, 0x77, 0x26, 0x04, 0xcf, 0xe6, 0x1c, 0x3a, 0x86, 0x15,
	0xad, 0xb0, 0x83, 0xb6, 0xd5, 0x13, 0x98, 0xf8, 0x9b, 0x88, 0xc6, 0xf8, 0x26, 0x50, 0x73, 0x0e,
	0xfd, 0x58, 0xeb, 0xe1, 0xe1, 0x4b, 0x2c, 0x7e, 0xbb, 0x93, 0xaa, 0x55, 0xe8, 0xfd, 0xf1, 0x93,
	0x51, 0x3f, 0x83, 0x55, 0xbd, 0xc9, 0x1d, 0xed, 0x68, 0x85, 0xd4, 0x44, 0xff, 0x7b, 0x21, 0x84,
	0x7a, 0x37, 0xb9, 0x86, 0x30, 0xd5, 0x68, 0x3e, 0x19, 0xa1, 0x05, 0x6b, 0x8f, 0x1c, 0x37, 0x7e,
	0xd6, 0xb3, 0xca, 0xeb, 0xad, 0x4c, 0x15, 0xc8, 0x86, 0xef, 0x69, 0x71, 0xb2, 0x6b, 0x31, 0x07,
	0xa7, 0x6c, 0xde, 0x9e, 0x16, 0x27, 0x6b, 0xb6, 0xce, 0xc1, 0x29, 0x1b, 0xb1, 0x27, 0xe3, 0xec,
	0xc0, 0x75, 0x89, 0x53, 0xfd, 0x03, 0xb7, 0x7b, 0xd9, 0xec, 0x6b, 0x7d, 0xd5, 0x8d, 0x77, 0x26,
	0x03, 0xb1, 0x3d, 0x7e, 0x08, 0xeb, 0x72, 0x8f, 0xb8, 0x4b, 0x16, 0xdd, 0xcd, 0xfc, 0x58, 0xed,
	0xa2, 0x9d, 0x4c, 0xfc, 0x19, 0x6c, 0x2b, 0x02, 0x49, 0x36, 0x11, 0xa3, 0xbd, 0xcc, 0x2d, 0x32,
	0x7a, 0x8d, 0x8b, 0xd9, 0x9c, 0xd6, 0x41, 0xaa, 0xdb, 0x5c, 0xb2, 0x17, 0x56, 0x43, 0x98, 0x6e,
	0x3d, 0x35, 0xe7, 0xd0, 0xef, 0xb2, 0x66, 0x90, 0xac, 0xae, 0x51, 0xd5, 0x39, 0x64, 0xac, 0x6b,
	0xce, 0x21, 0xab, 0x55, 0xd3, 0x9c, 0x43, 0x6d, 0xa8, 0x8b, 0xb3, 0xfa, 0x4c, 0x6b, 0x20, 0xa4,
	0xe8, 0xb3, 0x0f, 0xf4, 0xa8, 0x85, 0xb2, 0xb1, 0x3b, 0x1e, 0x80, 0x6d, 0xf0, 0x12, 0x56, 0xc5,
	0x92, 0xe8, 0xf7, 0xcb, 0xf3, 0x13, 0x71, 0xa3, 0x61, 0x0e, 0x5a, 0xa5, 0x5d, 0x90, 0x09, 0x05,
	0xa5, 0xdb, 0xe4, 0x50, 0xf6, 0x97, 0x4a, 0xd3, 0x56, 0xe3, 0xee, 0x04, 0x08, 0xa9, 0x42, 0xbd,
	0xfb, 0x4c, 0x53, 0x61, 0xaa, 0x23, 0x4e, 0x53, 0x61, 0xba, 0x6d, 0xcd, 0x9c, 0x43, 0x36, 0xcb,
	0x6b, 0xc6, 0x1d, 0x5d, 0x31, 0xbd, 0xa6, 0xd6, 0xee, 0x91, 0xd9, 0x66, 0xd6, 0xb8, 0x37, 0x11,
	0x46, 0xc8, 0x79, 0x3d, 0xd5, 0x31, 0xa5, 0x79, 0xfa, 0x64, 0x0b, 0x57, 0x31, 0x51, 0x68, 0x72,
	0x7e, 0x3c, 0xec, 0xf7, 0xb3, 0xe4, 0x9c, 0x6e, 0x9f, 0x4a, 0x22, 0xcf, 0x68, 0x65, 0x32, 0xe7,
	0xd0, 0x53, 0x58, 0x56, 0xfb, 0x32, 0x90, 0x9a, 0x27, 0x48, 0x34, 0x6c, 0x4c, 0x3e, 0x77, 0x3f,
	0x82, 0xf5, 0x54, 0xff, 0x82, 0x66, 0x6b, 0x59, 0x0d, 0x15, 0x9a, 0xad, 0x65, 0xb6, 0x3f, 0x98,
	0x73, 0xa8, 0x97, 0xa8, 0x1a, 0x8e, 0xba, 0xa3, 0xde, 0xd1, 0x88, 0xca, 0xe9, 0x69, 0x68, 0x7c,
	0xa7, 0x00, 0x14, 0xdb, 0xc8, 0x81, 0xcd, 0xcc, 0xaa, 0x76, 0x8e, 0x8f, 0xd5, 0x6b, 0xf1, 0x39,
	0x3e, 0x36, 0x51, 0x1c, 0x37, 0xe7, 0xd0, 0x20, 0x51, 0xcf, 0x57, 0x8a, 0xc8, 0xe8, 0xdd, 0x3c,
	0x1c, 0x7a, 0x1d, 0xbc, 0xf1, 0x5e, 0x21, 0x38, 0xb6, 0xdd, 0x11, 0xac, 0x68, 0x35, 0x5c, 0x3d,
	0xfc, 0x48, 0x54, 0x9c, 0x1b, 0x3b, 0xf9, 0x8b, 0x0c, 0xdb, 0x4f, 0xe0, 0x7a, 0x46, 0x95, 0x55,
	0xbb, 0x22, 0xb2, 0x2b, 0xbc, 0x0d, 0x73, 0x12, 0x08, 0xc3, 0x1f, 0xc0, 0xcd, 0xdc, 0xe2, 0x27,
	0x7a, 0x4f, 0x37, 0xea, 0xdc, 0xfa, 0x6b, 0x63, 0xaf, 0x18, 0xa0, 0xb0, 0x5b, 0x91, 0xdc, 0xd5,
	0xea, 0x9b, 0x9a, 0x94, 0x92, 0x95, 0x4f, 0x8d, 0x97, 0x9c, 0x3a, 0x20, 0x3f, 0x11, 0x7c, 0x51,
	0xa9, 0x57, 0x6a, 0x51, 0x40, 0xba, 0x96, 0x59, 0x10, 0xf3, 0xe7, 0xb0, 0x9e, 0xaa, 0x13, 0x6a,
	0x67, 0x2d, 0xab, 0x8a, 0x58, 0x10, 0xf7, 0x00, 0xea, 0x79, 0xf5, 0x30, 0xcd, 0x3c, 0xc7, 0x54,
	0xfa, 0x34, 0xf3, 0x1c, 0x57, 0x5c, 0x63, 0x7e, 0x73, 0x2d, 0x59, 0x72, 0xd2, 0xee, 0xd5, 0x8c,
	0x42, 0x57, 0xe3, 0xce, 0xd8, 0x75, 0x86, 0xf6, 0x15, 0x6c, 0xe5, 0x94, 0x7f, 0xd0, 0x77, 0x32,
	0xbf, 0x4e, 0x96, 0xa0, 0x1a, 0xef, 0x16, 0x01, 0x93, 0x3e, 0x3a, 0x5d, 0x82, 0x41, 0xbb, 0x59,
	0x27, 0x49, 0xad, 0x0a, 0x35, 0xee, 0x4e, 0x80, 0x90, 0x07, 0x2e, 0xa3, 0x3e, 0x92, 0x13, 0x93,
	0xa9, 0xe5, 0x9c, 0x7c, 0x75, 0x8f, 0x4a, 0x2c, 0xe6, 0x1c, 0xf2, 0x13, 0x9d, 0x3c, 0x6a, 0xc2,
	0x1b, 0xe5, 0xba, 0x99, 0x44, 0x5e, 0xbe, 0x51, 0x0c, 0x50, 0xd8, 0x2e, 0x4a, 0xe7, 0xad, 0xd3,
	0x91, 0x43, 0x32, 0x45, 0xde, 0x98, 0x00, 0xc1, 0x70, 0x7f, 0x0a, 0xd7, 0x12, 0x59, 0x62, 0xed,
	0xbc, 0xa5, 0x73, 0xd4, 0x8d, 0x71, 0xcb, 0x0c, 0x65, 0x13, 0x60, 0x94, 0xb6, 0x45, 0xf5, 0x34,
	0xb8, 0x78, 0x08, 0xe6, 0xac, 0x30, 0x1c, 0x2f, 0x60, 0x2d, 0x99, 0x53, 0xd5, 0x6c, 0x3c, 0x23,
	0xa5, 0xdb, 0x18, 0xbb, 0x1e, 0x0b, 0x32, 0x95, 0xdd, 0xd4, 0x05, 0x99, 0x95, 0x7b, 0x6d, 0x4c,
	0x80, 0x60, 0xb8, 0x5d, 0xd8, 0xca, 0x49, 0x0b, 0xea, 0xc7, 0x27, 0x37, 0x1d, 0xda, 0x28, 0x02,
	0x26, 0xb7, 0xca, 0x49, 0xc3, 0x69, 0x5b, 0xe5, 0xe7, 0x15, 0x1b, 0x45, 0xc0, 0xd8, 0x56, 0x5f,
	0xc0, 0x46, 0x56, 0xa6, 0x4c, 0x0b, 0x03, 0x73, 0xd2, 0x76, 0x8d, 0x89, 0x30, 0xc2, 0x79, 0x6e,
	0x8f, 0xe9, 0x9b, 0x47, 0xdf, 0x4d, 0xfb, 0x94, 0x9c, 0xfe, 0xfa, 0x62, 0xd1, 0xe1, 0xa7, 0xb0,
	0x7e, 0x70, 0x4c, 0xf4, 0x54, 0x56, 0x32, 0x56, 0xd6, 0x93, 0x74, 0x8d, 0x31, 0xab, 0x0c, 0xe5,
	0x27, 0xb0, 0xa6, 0xa3, 0x3c, 0xba, 0x4c, 0x86, 0xb1, 0x5a, 0x9a, 0xaa, 0x91, 0xbf, 0xc8, 0xf0,
	0x75, 0x61, 0x33, 0x33, 0x13, 0xa3, 0xc5, 0x54, 0x79, 0x69, 0xa4, 0xc6, 0x64, 0x20, 0xba, 0x49,
	0x73, 0xf9, 0xeb, 0x6f, 0x6e, 0x1b, 0xbf, 0xfc, 0xe6, 0xb6, 0xf1, 0x1f, 0xdf, 0xdc, 0x36, 0x3a,
	0x8b, 0xec, 0xbf, 0x38, 0xfa, 0xb5, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x8a, 0x70, 0x5d,
	0xaf, 0x49, 0x00, 0x00,
}
