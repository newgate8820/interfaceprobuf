// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: channelservice.proto

package groupinfo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChannelServerServiceClient is the client API for ChannelServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelServerServiceClient interface {
	//修改群的地理位置坐标
	UpdateChannelGeo(ctx context.Context, in *UpdateChannelGeoReq, opts ...grpc.CallOption) (*UpdateChannelGeoResp, error)
	//创建频道
	CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	//获取channel信息
	GetChannelUpdatesInfo(ctx context.Context, in *GetChannelUpdatesReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	//添加群成员
	AddChannelUser(ctx context.Context, in *AddChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	//删除群成员
	DelChannelUser(ctx context.Context, in *DelChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	//编辑about
	EditChannelAbout(ctx context.Context, in *UpdateChanAboutReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	//编辑title
	EditChannelTitle(ctx context.Context, in *UpdateChanTitleReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	//编辑photo
	EditChannelPhoto(ctx context.Context, in *UpdateChanPhotoReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	//编辑管理员权限
	EditChanAdminRights(ctx context.Context, in *UpdateChanAdminRightsReq, opts ...grpc.CallOption) (*UpdateChanAdminRightsResp, error)
	//编辑ban权限
	EditChanBanRights(ctx context.Context, in *UpdateChanBanRightsReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	//编辑歷史紀錄對新用戶可見或不可見
	EditChannelHiddenprehistory(ctx context.Context, in *UpdateChanHiddenprehistoryReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	//解散channel
	DismissChannel(ctx context.Context, in *DismissChannelReq, opts ...grpc.CallOption) (*DismissChannelResp, error)
	//根据偏移获取
	GetParticipantLimitReq(ctx context.Context, in *ParticipantLimitReq, opts ...grpc.CallOption) (*ParticipantLimitResp, error)
	//获取单个信息
	GetChanOneParticipantReq(ctx context.Context, in *GetChannelOnePartReq, opts ...grpc.CallOption) (*GetChannelOnePartResp, error)
	//获取所有用户Id
	GetChanUsersId(ctx context.Context, in *GetChannelUsersIdReq, opts ...grpc.CallOption) (*GetChannelUsersIdResp, error)
	//获取channel基本信息
	GetChannelBaseInfo(ctx context.Context, in *GetChannelBaseInfoReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error)
	//获取channel信息 不带user信息
	GetChannelInfo(ctx context.Context, in *GetChannelInfoReq, opts ...grpc.CallOption) (*GetChannelInfoResp, error)
	//批量获取channel基本信息
	GetBatchChanBaseInfo(ctx context.Context, in *BatchChannelBaseInfoReq, opts ...grpc.CallOption) (*BatchChannelBaseInfoResp, error)
	//根据link获取
	GetChanInfoByLink(ctx context.Context, in *GetChanByLinkReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error)
	//获取全部信息
	GetChannelFullInfo(ctx context.Context, in *GetFullChannelInfoReq, opts ...grpc.CallOption) (*GetFullChannelInfoResp, error)
	//切换邀请成员规则
	ToggleInvite(ctx context.Context, in *ToggleInviteReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	//生成群邀请链接
	CreateChannelLink(ctx context.Context, in *CreateChannelLinkReq, opts ...grpc.CallOption) (*CreateChannelLinkResp, error)
	//校验邀请链接合法
	CheckChannelInviteLink(ctx context.Context, in *CheckChannelInviteLinkReq, opts ...grpc.CallOption) (*CheckChannelInviteLinkResp, error)
	//更新channel userName
	UpdateChannelUserName(ctx context.Context, in *UpdateChannelUserNameReq, opts ...grpc.CallOption) (*UpdateChannelUserNameResp, error)
	//更新channel置顶消息
	UpdateChannelPinnedMsgId(ctx context.Context, in *UpdateChannelPinnedMsgIdReq, opts ...grpc.CallOption) (*UpdateChannelPinnedMsgIdResp, error)
	//检查userName是否可用
	CheckUserName(ctx context.Context, in *CheckUserNameReq, opts ...grpc.CallOption) (*CheckUserNameResp, error)
	//检查是否是加密群
	CheckChannelIsEncry(ctx context.Context, in *CheckChannelIsEncryReq, opts ...grpc.CallOption) (*CheckChannelIsEncryResp, error)
	//--------------------groupinfo 独立后新增接口--------------------------
	//根据userid获取所有的普通群信息
	GetAllChannelInfoByUserId(ctx context.Context, in *GetAllChannelInfoByUserIdReq, opts ...grpc.CallOption) (*GetAllChannelInfoByUserIdResp, error)
	//编辑全体禁言状态
	UpdateEveryoneQuiet(ctx context.Context, in *EveryoneQuietReq, opts ...grpc.CallOption) (*UpdateChannelCommonResp, error)
	//编辑禁止私聊状态
	UpdatePrivateChat(ctx context.Context, in *EditPrivateChatReq, opts ...grpc.CallOption) (*UpdateChannelCommonResp, error)
	//变更超级群创建者
	SetChannelCreator(ctx context.Context, in *SetChannelCreatorReq, opts ...grpc.CallOption) (*UpdateChannelCommonResp, error)
	//重置用户所有创建群的创建者
	ResetUserAllCreateGroups(ctx context.Context, in *ResetUserAllCreateGroupsReq, opts ...grpc.CallOption) (*ResetUserAllCreateGroupsResp, error)
	//获取机器人ID
	GetChannelBotIds(ctx context.Context, in *GetChannelBotIdsReq, opts ...grpc.CallOption) (*GetChannelBotIdsResp, error)
	//获取活跃用户ID
	GetChannelActiveUserIds(ctx context.Context, in *GetChannelActiveUserIdsReq, opts ...grpc.CallOption) (*GetChannelActiveUserIdsResp, error)
	//判断超级群成员是否存在
	CheckUserInChannel(ctx context.Context, in *CheckUserInChannelReq, opts ...grpc.CallOption) (*CheckUserInChannelResp, error)
	//超级群官方认证
	UpdateChannelVerify(ctx context.Context, in *UpdateChannelVerifyReq, opts ...grpc.CallOption) (*UpdateChannelVerifyResp, error)
	// @ bgn add for update channel's banned rights by qingsong at 2019-10-28
	UpdateChannelBannedRights(ctx context.Context, in *UpdateChannelBannedRightsReq, opts ...grpc.CallOption) (*UpdateChannelBannedRightsRsp, error)
	// @ bgn add by qingsong at 2019-11-04 for get channel base info , channel member info
	GetChnlAndMembInfo(ctx context.Context, in *GetChnlAndMembInfoReq, opts ...grpc.CallOption) (*GetChnlAndMembInfoRsp, error)
	// @ bgn add by qingsong at 2019-11-05 for set channel slow mode.
	SetChnlSlowMode(ctx context.Context, in *SetChnlSlowModeReq, opts ...grpc.CallOption) (*SetChnlSlowModeRsp, error)
	// @ add by qingsong at 2019-11-12 for set channel Geo
	SetChnlGeo(ctx context.Context, in *SetChnlGeoReq, opts ...grpc.CallOption) (*SetChnlGeoRsp, error)
	// @ add by qingsong at 2019-11-21 for channel toggle signatures
	ToggleSignatures(ctx context.Context, in *ToggleSignaturesReq, opts ...grpc.CallOption) (*ToggleSignaturesRsp, error)
	// @ add by qingsong at 2019-12-23 for channel set setParticipantBanMode
	GroupUpdateBanMode(ctx context.Context, in *GroupUpdateBanModeReq, opts ...grpc.CallOption) (*GroupUpdateBanModeRsp, error)
	// @ add by qingsong at 2019-12-27 for get user own channels.
	GroupGetUserOwnChannels(ctx context.Context, in *GroupGetUserOwnChannelsReq, opts ...grpc.CallOption) (*GroupGetUserOwnChannelsRsp, error)
	// @ bgn add by zcl at 2020-4-18 for update chat_channel restricted
	UpdateChannelRestricted(ctx context.Context, in *UpdateChannelRestrictedReq, opts ...grpc.CallOption) (*UpdateChannelRestrictedRsp, error)
	// @ bgn add by zcl at 2020-4-23 for delete channel_kicked_left where channel_id,user_id
	DelChannelKickedLeft(ctx context.Context, in *DelChannelKickedLeftReq, opts ...grpc.CallOption) (*DelChannelKickedLeftRsp, error)
	//根据link获取私有群，公有基本信息
	GetChanInfoByLinkOrUserName(ctx context.Context, in *GetChanInfoByLinkOrUserNameReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error)
	// @ add by qingsong 2020-06-03 for get hot groups.
	GMsGetHotGroupIDs(ctx context.Context, in *GetHotGroupIDsReq, opts ...grpc.CallOption) (*GetHotGroupIDsRsp, error)
	// @ add by qingsong 2020-07-06 for get hot group level.
	GMsGetHotGroupLv(ctx context.Context, in *GetHotGroupLvReq, opts ...grpc.CallOption) (*GetHotGroupLvRsp, error)
	// @ add by qingsong at 2020.10.20 for set discussion group.
	GMsSetDiscussionGroup(ctx context.Context, in *GMsSetDiscussionGroupReq, opts ...grpc.CallOption) (*GMsSetDiscussionGroupRsp, error)
}

type channelServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelServerServiceClient(cc grpc.ClientConnInterface) ChannelServerServiceClient {
	return &channelServerServiceClient{cc}
}

func (c *channelServerServiceClient) UpdateChannelGeo(ctx context.Context, in *UpdateChannelGeoReq, opts ...grpc.CallOption) (*UpdateChannelGeoResp, error) {
	out := new(UpdateChannelGeoResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdateChannelGeo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelUpdatesInfo(ctx context.Context, in *GetChannelUpdatesReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChannelUpdatesInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) AddChannelUser(ctx context.Context, in *AddChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/AddChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) DelChannelUser(ctx context.Context, in *DelChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/DelChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChannelAbout(ctx context.Context, in *UpdateChanAboutReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/EditChannelAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChannelTitle(ctx context.Context, in *UpdateChanTitleReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/EditChannelTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChannelPhoto(ctx context.Context, in *UpdateChanPhotoReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/EditChannelPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChanAdminRights(ctx context.Context, in *UpdateChanAdminRightsReq, opts ...grpc.CallOption) (*UpdateChanAdminRightsResp, error) {
	out := new(UpdateChanAdminRightsResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/EditChanAdminRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChanBanRights(ctx context.Context, in *UpdateChanBanRightsReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/EditChanBanRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChannelHiddenprehistory(ctx context.Context, in *UpdateChanHiddenprehistoryReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/EditChannelHiddenprehistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) DismissChannel(ctx context.Context, in *DismissChannelReq, opts ...grpc.CallOption) (*DismissChannelResp, error) {
	out := new(DismissChannelResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/DismissChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetParticipantLimitReq(ctx context.Context, in *ParticipantLimitReq, opts ...grpc.CallOption) (*ParticipantLimitResp, error) {
	out := new(ParticipantLimitResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GetParticipantLimitReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChanOneParticipantReq(ctx context.Context, in *GetChannelOnePartReq, opts ...grpc.CallOption) (*GetChannelOnePartResp, error) {
	out := new(GetChannelOnePartResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChanOneParticipantReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChanUsersId(ctx context.Context, in *GetChannelUsersIdReq, opts ...grpc.CallOption) (*GetChannelUsersIdResp, error) {
	out := new(GetChannelUsersIdResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChanUsersId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelBaseInfo(ctx context.Context, in *GetChannelBaseInfoReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error) {
	out := new(GetChannelBaseInfoResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChannelBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelInfo(ctx context.Context, in *GetChannelInfoReq, opts ...grpc.CallOption) (*GetChannelInfoResp, error) {
	out := new(GetChannelInfoResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChannelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetBatchChanBaseInfo(ctx context.Context, in *BatchChannelBaseInfoReq, opts ...grpc.CallOption) (*BatchChannelBaseInfoResp, error) {
	out := new(BatchChannelBaseInfoResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GetBatchChanBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChanInfoByLink(ctx context.Context, in *GetChanByLinkReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error) {
	out := new(GetChannelBaseInfoResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChanInfoByLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelFullInfo(ctx context.Context, in *GetFullChannelInfoReq, opts ...grpc.CallOption) (*GetFullChannelInfoResp, error) {
	out := new(GetFullChannelInfoResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChannelFullInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) ToggleInvite(ctx context.Context, in *ToggleInviteReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/ToggleInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CreateChannelLink(ctx context.Context, in *CreateChannelLinkReq, opts ...grpc.CallOption) (*CreateChannelLinkResp, error) {
	out := new(CreateChannelLinkResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/CreateChannelLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CheckChannelInviteLink(ctx context.Context, in *CheckChannelInviteLinkReq, opts ...grpc.CallOption) (*CheckChannelInviteLinkResp, error) {
	out := new(CheckChannelInviteLinkResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/CheckChannelInviteLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelUserName(ctx context.Context, in *UpdateChannelUserNameReq, opts ...grpc.CallOption) (*UpdateChannelUserNameResp, error) {
	out := new(UpdateChannelUserNameResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdateChannelUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelPinnedMsgId(ctx context.Context, in *UpdateChannelPinnedMsgIdReq, opts ...grpc.CallOption) (*UpdateChannelPinnedMsgIdResp, error) {
	out := new(UpdateChannelPinnedMsgIdResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdateChannelPinnedMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CheckUserName(ctx context.Context, in *CheckUserNameReq, opts ...grpc.CallOption) (*CheckUserNameResp, error) {
	out := new(CheckUserNameResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/CheckUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CheckChannelIsEncry(ctx context.Context, in *CheckChannelIsEncryReq, opts ...grpc.CallOption) (*CheckChannelIsEncryResp, error) {
	out := new(CheckChannelIsEncryResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/CheckChannelIsEncry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetAllChannelInfoByUserId(ctx context.Context, in *GetAllChannelInfoByUserIdReq, opts ...grpc.CallOption) (*GetAllChannelInfoByUserIdResp, error) {
	out := new(GetAllChannelInfoByUserIdResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GetAllChannelInfoByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateEveryoneQuiet(ctx context.Context, in *EveryoneQuietReq, opts ...grpc.CallOption) (*UpdateChannelCommonResp, error) {
	out := new(UpdateChannelCommonResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdateEveryoneQuiet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdatePrivateChat(ctx context.Context, in *EditPrivateChatReq, opts ...grpc.CallOption) (*UpdateChannelCommonResp, error) {
	out := new(UpdateChannelCommonResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdatePrivateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) SetChannelCreator(ctx context.Context, in *SetChannelCreatorReq, opts ...grpc.CallOption) (*UpdateChannelCommonResp, error) {
	out := new(UpdateChannelCommonResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/SetChannelCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) ResetUserAllCreateGroups(ctx context.Context, in *ResetUserAllCreateGroupsReq, opts ...grpc.CallOption) (*ResetUserAllCreateGroupsResp, error) {
	out := new(ResetUserAllCreateGroupsResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/ResetUserAllCreateGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelBotIds(ctx context.Context, in *GetChannelBotIdsReq, opts ...grpc.CallOption) (*GetChannelBotIdsResp, error) {
	out := new(GetChannelBotIdsResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChannelBotIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelActiveUserIds(ctx context.Context, in *GetChannelActiveUserIdsReq, opts ...grpc.CallOption) (*GetChannelActiveUserIdsResp, error) {
	out := new(GetChannelActiveUserIdsResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChannelActiveUserIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CheckUserInChannel(ctx context.Context, in *CheckUserInChannelReq, opts ...grpc.CallOption) (*CheckUserInChannelResp, error) {
	out := new(CheckUserInChannelResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/CheckUserInChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelVerify(ctx context.Context, in *UpdateChannelVerifyReq, opts ...grpc.CallOption) (*UpdateChannelVerifyResp, error) {
	out := new(UpdateChannelVerifyResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdateChannelVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelBannedRights(ctx context.Context, in *UpdateChannelBannedRightsReq, opts ...grpc.CallOption) (*UpdateChannelBannedRightsRsp, error) {
	out := new(UpdateChannelBannedRightsRsp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdateChannelBannedRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChnlAndMembInfo(ctx context.Context, in *GetChnlAndMembInfoReq, opts ...grpc.CallOption) (*GetChnlAndMembInfoRsp, error) {
	out := new(GetChnlAndMembInfoRsp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChnlAndMembInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) SetChnlSlowMode(ctx context.Context, in *SetChnlSlowModeReq, opts ...grpc.CallOption) (*SetChnlSlowModeRsp, error) {
	out := new(SetChnlSlowModeRsp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/SetChnlSlowMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) SetChnlGeo(ctx context.Context, in *SetChnlGeoReq, opts ...grpc.CallOption) (*SetChnlGeoRsp, error) {
	out := new(SetChnlGeoRsp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/SetChnlGeo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) ToggleSignatures(ctx context.Context, in *ToggleSignaturesReq, opts ...grpc.CallOption) (*ToggleSignaturesRsp, error) {
	out := new(ToggleSignaturesRsp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/ToggleSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GroupUpdateBanMode(ctx context.Context, in *GroupUpdateBanModeReq, opts ...grpc.CallOption) (*GroupUpdateBanModeRsp, error) {
	out := new(GroupUpdateBanModeRsp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GroupUpdateBanMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GroupGetUserOwnChannels(ctx context.Context, in *GroupGetUserOwnChannelsReq, opts ...grpc.CallOption) (*GroupGetUserOwnChannelsRsp, error) {
	out := new(GroupGetUserOwnChannelsRsp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GroupGetUserOwnChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelRestricted(ctx context.Context, in *UpdateChannelRestrictedReq, opts ...grpc.CallOption) (*UpdateChannelRestrictedRsp, error) {
	out := new(UpdateChannelRestrictedRsp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/UpdateChannelRestricted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) DelChannelKickedLeft(ctx context.Context, in *DelChannelKickedLeftReq, opts ...grpc.CallOption) (*DelChannelKickedLeftRsp, error) {
	out := new(DelChannelKickedLeftRsp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/DelChannelKickedLeft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChanInfoByLinkOrUserName(ctx context.Context, in *GetChanInfoByLinkOrUserNameReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error) {
	out := new(GetChannelBaseInfoResp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GetChanInfoByLinkOrUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GMsGetHotGroupIDs(ctx context.Context, in *GetHotGroupIDsReq, opts ...grpc.CallOption) (*GetHotGroupIDsRsp, error) {
	out := new(GetHotGroupIDsRsp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GMsGetHotGroupIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GMsGetHotGroupLv(ctx context.Context, in *GetHotGroupLvReq, opts ...grpc.CallOption) (*GetHotGroupLvRsp, error) {
	out := new(GetHotGroupLvRsp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GMsGetHotGroupLv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GMsSetDiscussionGroup(ctx context.Context, in *GMsSetDiscussionGroupReq, opts ...grpc.CallOption) (*GMsSetDiscussionGroupRsp, error) {
	out := new(GMsSetDiscussionGroupRsp)
	err := c.cc.Invoke(ctx, "/groupinfo.ChannelServerService/GMsSetDiscussionGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelServerServiceServer is the server API for ChannelServerService service.
// All implementations must embed UnimplementedChannelServerServiceServer
// for forward compatibility
type ChannelServerServiceServer interface {
	//修改群的地理位置坐标
	UpdateChannelGeo(context.Context, *UpdateChannelGeoReq) (*UpdateChannelGeoResp, error)
	//创建频道
	CreateChannel(context.Context, *CreateChannelReq) (*ChannelupdatesResp, error)
	//获取channel信息
	GetChannelUpdatesInfo(context.Context, *GetChannelUpdatesReq) (*ChannelupdatesResp, error)
	//添加群成员
	AddChannelUser(context.Context, *AddChannelUserReq) (*ChannelupdatesResp, error)
	//删除群成员
	DelChannelUser(context.Context, *DelChannelUserReq) (*ChannelupdatesResp, error)
	//编辑about
	EditChannelAbout(context.Context, *UpdateChanAboutReq) (*ChannelupdatesResp, error)
	//编辑title
	EditChannelTitle(context.Context, *UpdateChanTitleReq) (*ChannelupdatesResp, error)
	//编辑photo
	EditChannelPhoto(context.Context, *UpdateChanPhotoReq) (*ChannelupdatesResp, error)
	//编辑管理员权限
	EditChanAdminRights(context.Context, *UpdateChanAdminRightsReq) (*UpdateChanAdminRightsResp, error)
	//编辑ban权限
	EditChanBanRights(context.Context, *UpdateChanBanRightsReq) (*ChannelupdatesResp, error)
	//编辑歷史紀錄對新用戶可見或不可見
	EditChannelHiddenprehistory(context.Context, *UpdateChanHiddenprehistoryReq) (*ChannelupdatesResp, error)
	//解散channel
	DismissChannel(context.Context, *DismissChannelReq) (*DismissChannelResp, error)
	//根据偏移获取
	GetParticipantLimitReq(context.Context, *ParticipantLimitReq) (*ParticipantLimitResp, error)
	//获取单个信息
	GetChanOneParticipantReq(context.Context, *GetChannelOnePartReq) (*GetChannelOnePartResp, error)
	//获取所有用户Id
	GetChanUsersId(context.Context, *GetChannelUsersIdReq) (*GetChannelUsersIdResp, error)
	//获取channel基本信息
	GetChannelBaseInfo(context.Context, *GetChannelBaseInfoReq) (*GetChannelBaseInfoResp, error)
	//获取channel信息 不带user信息
	GetChannelInfo(context.Context, *GetChannelInfoReq) (*GetChannelInfoResp, error)
	//批量获取channel基本信息
	GetBatchChanBaseInfo(context.Context, *BatchChannelBaseInfoReq) (*BatchChannelBaseInfoResp, error)
	//根据link获取
	GetChanInfoByLink(context.Context, *GetChanByLinkReq) (*GetChannelBaseInfoResp, error)
	//获取全部信息
	GetChannelFullInfo(context.Context, *GetFullChannelInfoReq) (*GetFullChannelInfoResp, error)
	//切换邀请成员规则
	ToggleInvite(context.Context, *ToggleInviteReq) (*ChannelupdatesResp, error)
	//生成群邀请链接
	CreateChannelLink(context.Context, *CreateChannelLinkReq) (*CreateChannelLinkResp, error)
	//校验邀请链接合法
	CheckChannelInviteLink(context.Context, *CheckChannelInviteLinkReq) (*CheckChannelInviteLinkResp, error)
	//更新channel userName
	UpdateChannelUserName(context.Context, *UpdateChannelUserNameReq) (*UpdateChannelUserNameResp, error)
	//更新channel置顶消息
	UpdateChannelPinnedMsgId(context.Context, *UpdateChannelPinnedMsgIdReq) (*UpdateChannelPinnedMsgIdResp, error)
	//检查userName是否可用
	CheckUserName(context.Context, *CheckUserNameReq) (*CheckUserNameResp, error)
	//检查是否是加密群
	CheckChannelIsEncry(context.Context, *CheckChannelIsEncryReq) (*CheckChannelIsEncryResp, error)
	//--------------------groupinfo 独立后新增接口--------------------------
	//根据userid获取所有的普通群信息
	GetAllChannelInfoByUserId(context.Context, *GetAllChannelInfoByUserIdReq) (*GetAllChannelInfoByUserIdResp, error)
	//编辑全体禁言状态
	UpdateEveryoneQuiet(context.Context, *EveryoneQuietReq) (*UpdateChannelCommonResp, error)
	//编辑禁止私聊状态
	UpdatePrivateChat(context.Context, *EditPrivateChatReq) (*UpdateChannelCommonResp, error)
	//变更超级群创建者
	SetChannelCreator(context.Context, *SetChannelCreatorReq) (*UpdateChannelCommonResp, error)
	//重置用户所有创建群的创建者
	ResetUserAllCreateGroups(context.Context, *ResetUserAllCreateGroupsReq) (*ResetUserAllCreateGroupsResp, error)
	//获取机器人ID
	GetChannelBotIds(context.Context, *GetChannelBotIdsReq) (*GetChannelBotIdsResp, error)
	//获取活跃用户ID
	GetChannelActiveUserIds(context.Context, *GetChannelActiveUserIdsReq) (*GetChannelActiveUserIdsResp, error)
	//判断超级群成员是否存在
	CheckUserInChannel(context.Context, *CheckUserInChannelReq) (*CheckUserInChannelResp, error)
	//超级群官方认证
	UpdateChannelVerify(context.Context, *UpdateChannelVerifyReq) (*UpdateChannelVerifyResp, error)
	// @ bgn add for update channel's banned rights by qingsong at 2019-10-28
	UpdateChannelBannedRights(context.Context, *UpdateChannelBannedRightsReq) (*UpdateChannelBannedRightsRsp, error)
	// @ bgn add by qingsong at 2019-11-04 for get channel base info , channel member info
	GetChnlAndMembInfo(context.Context, *GetChnlAndMembInfoReq) (*GetChnlAndMembInfoRsp, error)
	// @ bgn add by qingsong at 2019-11-05 for set channel slow mode.
	SetChnlSlowMode(context.Context, *SetChnlSlowModeReq) (*SetChnlSlowModeRsp, error)
	// @ add by qingsong at 2019-11-12 for set channel Geo
	SetChnlGeo(context.Context, *SetChnlGeoReq) (*SetChnlGeoRsp, error)
	// @ add by qingsong at 2019-11-21 for channel toggle signatures
	ToggleSignatures(context.Context, *ToggleSignaturesReq) (*ToggleSignaturesRsp, error)
	// @ add by qingsong at 2019-12-23 for channel set setParticipantBanMode
	GroupUpdateBanMode(context.Context, *GroupUpdateBanModeReq) (*GroupUpdateBanModeRsp, error)
	// @ add by qingsong at 2019-12-27 for get user own channels.
	GroupGetUserOwnChannels(context.Context, *GroupGetUserOwnChannelsReq) (*GroupGetUserOwnChannelsRsp, error)
	// @ bgn add by zcl at 2020-4-18 for update chat_channel restricted
	UpdateChannelRestricted(context.Context, *UpdateChannelRestrictedReq) (*UpdateChannelRestrictedRsp, error)
	// @ bgn add by zcl at 2020-4-23 for delete channel_kicked_left where channel_id,user_id
	DelChannelKickedLeft(context.Context, *DelChannelKickedLeftReq) (*DelChannelKickedLeftRsp, error)
	//根据link获取私有群，公有基本信息
	GetChanInfoByLinkOrUserName(context.Context, *GetChanInfoByLinkOrUserNameReq) (*GetChannelBaseInfoResp, error)
	// @ add by qingsong 2020-06-03 for get hot groups.
	GMsGetHotGroupIDs(context.Context, *GetHotGroupIDsReq) (*GetHotGroupIDsRsp, error)
	// @ add by qingsong 2020-07-06 for get hot group level.
	GMsGetHotGroupLv(context.Context, *GetHotGroupLvReq) (*GetHotGroupLvRsp, error)
	// @ add by qingsong at 2020.10.20 for set discussion group.
	GMsSetDiscussionGroup(context.Context, *GMsSetDiscussionGroupReq) (*GMsSetDiscussionGroupRsp, error)
	mustEmbedUnimplementedChannelServerServiceServer()
}

// UnimplementedChannelServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChannelServerServiceServer struct {
}

func (UnimplementedChannelServerServiceServer) UpdateChannelGeo(context.Context, *UpdateChannelGeoReq) (*UpdateChannelGeoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelGeo not implemented")
}
func (UnimplementedChannelServerServiceServer) CreateChannel(context.Context, *CreateChannelReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelUpdatesInfo(context.Context, *GetChannelUpdatesReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelUpdatesInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) AddChannelUser(context.Context, *AddChannelUserReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChannelUser not implemented")
}
func (UnimplementedChannelServerServiceServer) DelChannelUser(context.Context, *DelChannelUserReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelChannelUser not implemented")
}
func (UnimplementedChannelServerServiceServer) EditChannelAbout(context.Context, *UpdateChanAboutReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelAbout not implemented")
}
func (UnimplementedChannelServerServiceServer) EditChannelTitle(context.Context, *UpdateChanTitleReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelTitle not implemented")
}
func (UnimplementedChannelServerServiceServer) EditChannelPhoto(context.Context, *UpdateChanPhotoReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelPhoto not implemented")
}
func (UnimplementedChannelServerServiceServer) EditChanAdminRights(context.Context, *UpdateChanAdminRightsReq) (*UpdateChanAdminRightsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChanAdminRights not implemented")
}
func (UnimplementedChannelServerServiceServer) EditChanBanRights(context.Context, *UpdateChanBanRightsReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChanBanRights not implemented")
}
func (UnimplementedChannelServerServiceServer) EditChannelHiddenprehistory(context.Context, *UpdateChanHiddenprehistoryReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelHiddenprehistory not implemented")
}
func (UnimplementedChannelServerServiceServer) DismissChannel(context.Context, *DismissChannelReq) (*DismissChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DismissChannel not implemented")
}
func (UnimplementedChannelServerServiceServer) GetParticipantLimitReq(context.Context, *ParticipantLimitReq) (*ParticipantLimitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantLimitReq not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChanOneParticipantReq(context.Context, *GetChannelOnePartReq) (*GetChannelOnePartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChanOneParticipantReq not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChanUsersId(context.Context, *GetChannelUsersIdReq) (*GetChannelUsersIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChanUsersId not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelBaseInfo(context.Context, *GetChannelBaseInfoReq) (*GetChannelBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelBaseInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelInfo(context.Context, *GetChannelInfoReq) (*GetChannelInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) GetBatchChanBaseInfo(context.Context, *BatchChannelBaseInfoReq) (*BatchChannelBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchChanBaseInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChanInfoByLink(context.Context, *GetChanByLinkReq) (*GetChannelBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChanInfoByLink not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelFullInfo(context.Context, *GetFullChannelInfoReq) (*GetFullChannelInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelFullInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) ToggleInvite(context.Context, *ToggleInviteReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleInvite not implemented")
}
func (UnimplementedChannelServerServiceServer) CreateChannelLink(context.Context, *CreateChannelLinkReq) (*CreateChannelLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannelLink not implemented")
}
func (UnimplementedChannelServerServiceServer) CheckChannelInviteLink(context.Context, *CheckChannelInviteLinkReq) (*CheckChannelInviteLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChannelInviteLink not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdateChannelUserName(context.Context, *UpdateChannelUserNameReq) (*UpdateChannelUserNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelUserName not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdateChannelPinnedMsgId(context.Context, *UpdateChannelPinnedMsgIdReq) (*UpdateChannelPinnedMsgIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelPinnedMsgId not implemented")
}
func (UnimplementedChannelServerServiceServer) CheckUserName(context.Context, *CheckUserNameReq) (*CheckUserNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserName not implemented")
}
func (UnimplementedChannelServerServiceServer) CheckChannelIsEncry(context.Context, *CheckChannelIsEncryReq) (*CheckChannelIsEncryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChannelIsEncry not implemented")
}
func (UnimplementedChannelServerServiceServer) GetAllChannelInfoByUserId(context.Context, *GetAllChannelInfoByUserIdReq) (*GetAllChannelInfoByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChannelInfoByUserId not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdateEveryoneQuiet(context.Context, *EveryoneQuietReq) (*UpdateChannelCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEveryoneQuiet not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdatePrivateChat(context.Context, *EditPrivateChatReq) (*UpdateChannelCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivateChat not implemented")
}
func (UnimplementedChannelServerServiceServer) SetChannelCreator(context.Context, *SetChannelCreatorReq) (*UpdateChannelCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChannelCreator not implemented")
}
func (UnimplementedChannelServerServiceServer) ResetUserAllCreateGroups(context.Context, *ResetUserAllCreateGroupsReq) (*ResetUserAllCreateGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserAllCreateGroups not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelBotIds(context.Context, *GetChannelBotIdsReq) (*GetChannelBotIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelBotIds not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelActiveUserIds(context.Context, *GetChannelActiveUserIdsReq) (*GetChannelActiveUserIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelActiveUserIds not implemented")
}
func (UnimplementedChannelServerServiceServer) CheckUserInChannel(context.Context, *CheckUserInChannelReq) (*CheckUserInChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserInChannel not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdateChannelVerify(context.Context, *UpdateChannelVerifyReq) (*UpdateChannelVerifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelVerify not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdateChannelBannedRights(context.Context, *UpdateChannelBannedRightsReq) (*UpdateChannelBannedRightsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelBannedRights not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChnlAndMembInfo(context.Context, *GetChnlAndMembInfoReq) (*GetChnlAndMembInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChnlAndMembInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) SetChnlSlowMode(context.Context, *SetChnlSlowModeReq) (*SetChnlSlowModeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChnlSlowMode not implemented")
}
func (UnimplementedChannelServerServiceServer) SetChnlGeo(context.Context, *SetChnlGeoReq) (*SetChnlGeoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChnlGeo not implemented")
}
func (UnimplementedChannelServerServiceServer) ToggleSignatures(context.Context, *ToggleSignaturesReq) (*ToggleSignaturesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleSignatures not implemented")
}
func (UnimplementedChannelServerServiceServer) GroupUpdateBanMode(context.Context, *GroupUpdateBanModeReq) (*GroupUpdateBanModeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUpdateBanMode not implemented")
}
func (UnimplementedChannelServerServiceServer) GroupGetUserOwnChannels(context.Context, *GroupGetUserOwnChannelsReq) (*GroupGetUserOwnChannelsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupGetUserOwnChannels not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdateChannelRestricted(context.Context, *UpdateChannelRestrictedReq) (*UpdateChannelRestrictedRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelRestricted not implemented")
}
func (UnimplementedChannelServerServiceServer) DelChannelKickedLeft(context.Context, *DelChannelKickedLeftReq) (*DelChannelKickedLeftRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelChannelKickedLeft not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChanInfoByLinkOrUserName(context.Context, *GetChanInfoByLinkOrUserNameReq) (*GetChannelBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChanInfoByLinkOrUserName not implemented")
}
func (UnimplementedChannelServerServiceServer) GMsGetHotGroupIDs(context.Context, *GetHotGroupIDsReq) (*GetHotGroupIDsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GMsGetHotGroupIDs not implemented")
}
func (UnimplementedChannelServerServiceServer) GMsGetHotGroupLv(context.Context, *GetHotGroupLvReq) (*GetHotGroupLvRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GMsGetHotGroupLv not implemented")
}
func (UnimplementedChannelServerServiceServer) GMsSetDiscussionGroup(context.Context, *GMsSetDiscussionGroupReq) (*GMsSetDiscussionGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GMsSetDiscussionGroup not implemented")
}
func (UnimplementedChannelServerServiceServer) mustEmbedUnimplementedChannelServerServiceServer() {}

// UnsafeChannelServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelServerServiceServer will
// result in compilation errors.
type UnsafeChannelServerServiceServer interface {
	mustEmbedUnimplementedChannelServerServiceServer()
}

func RegisterChannelServerServiceServer(s grpc.ServiceRegistrar, srv ChannelServerServiceServer) {
	s.RegisterService(&ChannelServerService_ServiceDesc, srv)
}

func _ChannelServerService_UpdateChannelGeo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelGeoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelGeo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdateChannelGeo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelGeo(ctx, req.(*UpdateChannelGeoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CreateChannel(ctx, req.(*CreateChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelUpdatesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelUpdatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelUpdatesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChannelUpdatesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelUpdatesInfo(ctx, req.(*GetChannelUpdatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_AddChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChannelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).AddChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/AddChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).AddChannelUser(ctx, req.(*AddChannelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_DelChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChannelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).DelChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/DelChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).DelChannelUser(ctx, req.(*DelChannelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChannelAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanAboutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChannelAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/EditChannelAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChannelAbout(ctx, req.(*UpdateChanAboutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChannelTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanTitleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChannelTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/EditChannelTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChannelTitle(ctx, req.(*UpdateChanTitleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChannelPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanPhotoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChannelPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/EditChannelPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChannelPhoto(ctx, req.(*UpdateChanPhotoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChanAdminRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanAdminRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChanAdminRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/EditChanAdminRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChanAdminRights(ctx, req.(*UpdateChanAdminRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChanBanRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanBanRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChanBanRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/EditChanBanRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChanBanRights(ctx, req.(*UpdateChanBanRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChannelHiddenprehistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanHiddenprehistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChannelHiddenprehistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/EditChannelHiddenprehistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChannelHiddenprehistory(ctx, req.(*UpdateChanHiddenprehistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_DismissChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DismissChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).DismissChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/DismissChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).DismissChannel(ctx, req.(*DismissChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetParticipantLimitReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipantLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetParticipantLimitReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetParticipantLimitReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetParticipantLimitReq(ctx, req.(*ParticipantLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChanOneParticipantReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelOnePartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChanOneParticipantReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChanOneParticipantReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChanOneParticipantReq(ctx, req.(*GetChannelOnePartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChanUsersId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelUsersIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChanUsersId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChanUsersId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChanUsersId(ctx, req.(*GetChannelUsersIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelBaseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChannelBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelBaseInfo(ctx, req.(*GetChannelBaseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelInfo(ctx, req.(*GetChannelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetBatchChanBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchChannelBaseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetBatchChanBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetBatchChanBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetBatchChanBaseInfo(ctx, req.(*BatchChannelBaseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChanInfoByLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChanByLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChanInfoByLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChanInfoByLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChanInfoByLink(ctx, req.(*GetChanByLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullChannelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChannelFullInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelFullInfo(ctx, req.(*GetFullChannelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_ToggleInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).ToggleInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/ToggleInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).ToggleInvite(ctx, req.(*ToggleInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CreateChannelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CreateChannelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/CreateChannelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CreateChannelLink(ctx, req.(*CreateChannelLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CheckChannelInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChannelInviteLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CheckChannelInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/CheckChannelInviteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CheckChannelInviteLink(ctx, req.(*CheckChannelInviteLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdateChannelUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelUserName(ctx, req.(*UpdateChannelUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelPinnedMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelPinnedMsgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelPinnedMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdateChannelPinnedMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelPinnedMsgId(ctx, req.(*UpdateChannelPinnedMsgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CheckUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CheckUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/CheckUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CheckUserName(ctx, req.(*CheckUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CheckChannelIsEncry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChannelIsEncryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CheckChannelIsEncry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/CheckChannelIsEncry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CheckChannelIsEncry(ctx, req.(*CheckChannelIsEncryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetAllChannelInfoByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChannelInfoByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetAllChannelInfoByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetAllChannelInfoByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetAllChannelInfoByUserId(ctx, req.(*GetAllChannelInfoByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateEveryoneQuiet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EveryoneQuietReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateEveryoneQuiet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdateEveryoneQuiet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateEveryoneQuiet(ctx, req.(*EveryoneQuietReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdatePrivateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPrivateChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdatePrivateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdatePrivateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdatePrivateChat(ctx, req.(*EditPrivateChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_SetChannelCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelCreatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).SetChannelCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/SetChannelCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).SetChannelCreator(ctx, req.(*SetChannelCreatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_ResetUserAllCreateGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserAllCreateGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).ResetUserAllCreateGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/ResetUserAllCreateGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).ResetUserAllCreateGroups(ctx, req.(*ResetUserAllCreateGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelBotIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelBotIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelBotIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChannelBotIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelBotIds(ctx, req.(*GetChannelBotIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelActiveUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelActiveUserIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelActiveUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChannelActiveUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelActiveUserIds(ctx, req.(*GetChannelActiveUserIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CheckUserInChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserInChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CheckUserInChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/CheckUserInChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CheckUserInChannel(ctx, req.(*CheckUserInChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelVerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdateChannelVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelVerify(ctx, req.(*UpdateChannelVerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelBannedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelBannedRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelBannedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdateChannelBannedRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelBannedRights(ctx, req.(*UpdateChannelBannedRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChnlAndMembInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChnlAndMembInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChnlAndMembInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChnlAndMembInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChnlAndMembInfo(ctx, req.(*GetChnlAndMembInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_SetChnlSlowMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChnlSlowModeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).SetChnlSlowMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/SetChnlSlowMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).SetChnlSlowMode(ctx, req.(*SetChnlSlowModeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_SetChnlGeo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChnlGeoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).SetChnlGeo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/SetChnlGeo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).SetChnlGeo(ctx, req.(*SetChnlGeoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_ToggleSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleSignaturesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).ToggleSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/ToggleSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).ToggleSignatures(ctx, req.(*ToggleSignaturesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GroupUpdateBanMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUpdateBanModeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GroupUpdateBanMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GroupUpdateBanMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GroupUpdateBanMode(ctx, req.(*GroupUpdateBanModeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GroupGetUserOwnChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupGetUserOwnChannelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GroupGetUserOwnChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GroupGetUserOwnChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GroupGetUserOwnChannels(ctx, req.(*GroupGetUserOwnChannelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelRestricted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelRestrictedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelRestricted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/UpdateChannelRestricted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelRestricted(ctx, req.(*UpdateChannelRestrictedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_DelChannelKickedLeft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChannelKickedLeftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).DelChannelKickedLeft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/DelChannelKickedLeft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).DelChannelKickedLeft(ctx, req.(*DelChannelKickedLeftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChanInfoByLinkOrUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChanInfoByLinkOrUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChanInfoByLinkOrUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GetChanInfoByLinkOrUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChanInfoByLinkOrUserName(ctx, req.(*GetChanInfoByLinkOrUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GMsGetHotGroupIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotGroupIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GMsGetHotGroupIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GMsGetHotGroupIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GMsGetHotGroupIDs(ctx, req.(*GetHotGroupIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GMsGetHotGroupLv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotGroupLvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GMsGetHotGroupLv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GMsGetHotGroupLv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GMsGetHotGroupLv(ctx, req.(*GetHotGroupLvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GMsSetDiscussionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GMsSetDiscussionGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GMsSetDiscussionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChannelServerService/GMsSetDiscussionGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GMsSetDiscussionGroup(ctx, req.(*GMsSetDiscussionGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelServerService_ServiceDesc is the grpc.ServiceDesc for ChannelServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "groupinfo.ChannelServerService",
	HandlerType: (*ChannelServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateChannelGeo",
			Handler:    _ChannelServerService_UpdateChannelGeo_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _ChannelServerService_CreateChannel_Handler,
		},
		{
			MethodName: "GetChannelUpdatesInfo",
			Handler:    _ChannelServerService_GetChannelUpdatesInfo_Handler,
		},
		{
			MethodName: "AddChannelUser",
			Handler:    _ChannelServerService_AddChannelUser_Handler,
		},
		{
			MethodName: "DelChannelUser",
			Handler:    _ChannelServerService_DelChannelUser_Handler,
		},
		{
			MethodName: "EditChannelAbout",
			Handler:    _ChannelServerService_EditChannelAbout_Handler,
		},
		{
			MethodName: "EditChannelTitle",
			Handler:    _ChannelServerService_EditChannelTitle_Handler,
		},
		{
			MethodName: "EditChannelPhoto",
			Handler:    _ChannelServerService_EditChannelPhoto_Handler,
		},
		{
			MethodName: "EditChanAdminRights",
			Handler:    _ChannelServerService_EditChanAdminRights_Handler,
		},
		{
			MethodName: "EditChanBanRights",
			Handler:    _ChannelServerService_EditChanBanRights_Handler,
		},
		{
			MethodName: "EditChannelHiddenprehistory",
			Handler:    _ChannelServerService_EditChannelHiddenprehistory_Handler,
		},
		{
			MethodName: "DismissChannel",
			Handler:    _ChannelServerService_DismissChannel_Handler,
		},
		{
			MethodName: "GetParticipantLimitReq",
			Handler:    _ChannelServerService_GetParticipantLimitReq_Handler,
		},
		{
			MethodName: "GetChanOneParticipantReq",
			Handler:    _ChannelServerService_GetChanOneParticipantReq_Handler,
		},
		{
			MethodName: "GetChanUsersId",
			Handler:    _ChannelServerService_GetChanUsersId_Handler,
		},
		{
			MethodName: "GetChannelBaseInfo",
			Handler:    _ChannelServerService_GetChannelBaseInfo_Handler,
		},
		{
			MethodName: "GetChannelInfo",
			Handler:    _ChannelServerService_GetChannelInfo_Handler,
		},
		{
			MethodName: "GetBatchChanBaseInfo",
			Handler:    _ChannelServerService_GetBatchChanBaseInfo_Handler,
		},
		{
			MethodName: "GetChanInfoByLink",
			Handler:    _ChannelServerService_GetChanInfoByLink_Handler,
		},
		{
			MethodName: "GetChannelFullInfo",
			Handler:    _ChannelServerService_GetChannelFullInfo_Handler,
		},
		{
			MethodName: "ToggleInvite",
			Handler:    _ChannelServerService_ToggleInvite_Handler,
		},
		{
			MethodName: "CreateChannelLink",
			Handler:    _ChannelServerService_CreateChannelLink_Handler,
		},
		{
			MethodName: "CheckChannelInviteLink",
			Handler:    _ChannelServerService_CheckChannelInviteLink_Handler,
		},
		{
			MethodName: "UpdateChannelUserName",
			Handler:    _ChannelServerService_UpdateChannelUserName_Handler,
		},
		{
			MethodName: "UpdateChannelPinnedMsgId",
			Handler:    _ChannelServerService_UpdateChannelPinnedMsgId_Handler,
		},
		{
			MethodName: "CheckUserName",
			Handler:    _ChannelServerService_CheckUserName_Handler,
		},
		{
			MethodName: "CheckChannelIsEncry",
			Handler:    _ChannelServerService_CheckChannelIsEncry_Handler,
		},
		{
			MethodName: "GetAllChannelInfoByUserId",
			Handler:    _ChannelServerService_GetAllChannelInfoByUserId_Handler,
		},
		{
			MethodName: "UpdateEveryoneQuiet",
			Handler:    _ChannelServerService_UpdateEveryoneQuiet_Handler,
		},
		{
			MethodName: "UpdatePrivateChat",
			Handler:    _ChannelServerService_UpdatePrivateChat_Handler,
		},
		{
			MethodName: "SetChannelCreator",
			Handler:    _ChannelServerService_SetChannelCreator_Handler,
		},
		{
			MethodName: "ResetUserAllCreateGroups",
			Handler:    _ChannelServerService_ResetUserAllCreateGroups_Handler,
		},
		{
			MethodName: "GetChannelBotIds",
			Handler:    _ChannelServerService_GetChannelBotIds_Handler,
		},
		{
			MethodName: "GetChannelActiveUserIds",
			Handler:    _ChannelServerService_GetChannelActiveUserIds_Handler,
		},
		{
			MethodName: "CheckUserInChannel",
			Handler:    _ChannelServerService_CheckUserInChannel_Handler,
		},
		{
			MethodName: "UpdateChannelVerify",
			Handler:    _ChannelServerService_UpdateChannelVerify_Handler,
		},
		{
			MethodName: "UpdateChannelBannedRights",
			Handler:    _ChannelServerService_UpdateChannelBannedRights_Handler,
		},
		{
			MethodName: "GetChnlAndMembInfo",
			Handler:    _ChannelServerService_GetChnlAndMembInfo_Handler,
		},
		{
			MethodName: "SetChnlSlowMode",
			Handler:    _ChannelServerService_SetChnlSlowMode_Handler,
		},
		{
			MethodName: "SetChnlGeo",
			Handler:    _ChannelServerService_SetChnlGeo_Handler,
		},
		{
			MethodName: "ToggleSignatures",
			Handler:    _ChannelServerService_ToggleSignatures_Handler,
		},
		{
			MethodName: "GroupUpdateBanMode",
			Handler:    _ChannelServerService_GroupUpdateBanMode_Handler,
		},
		{
			MethodName: "GroupGetUserOwnChannels",
			Handler:    _ChannelServerService_GroupGetUserOwnChannels_Handler,
		},
		{
			MethodName: "UpdateChannelRestricted",
			Handler:    _ChannelServerService_UpdateChannelRestricted_Handler,
		},
		{
			MethodName: "DelChannelKickedLeft",
			Handler:    _ChannelServerService_DelChannelKickedLeft_Handler,
		},
		{
			MethodName: "GetChanInfoByLinkOrUserName",
			Handler:    _ChannelServerService_GetChanInfoByLinkOrUserName_Handler,
		},
		{
			MethodName: "GMsGetHotGroupIDs",
			Handler:    _ChannelServerService_GMsGetHotGroupIDs_Handler,
		},
		{
			MethodName: "GMsGetHotGroupLv",
			Handler:    _ChannelServerService_GMsGetHotGroupLv_Handler,
		},
		{
			MethodName: "GMsSetDiscussionGroup",
			Handler:    _ChannelServerService_GMsSetDiscussionGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channelservice.proto",
}
