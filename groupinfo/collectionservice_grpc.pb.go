// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: collectionservice.proto

package groupinfo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupCollectionServiceClient is the client API for GroupCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupCollectionServiceClient interface {
	//添加删除收藏对话框
	SetCollectionDialog(ctx context.Context, in *SetCollectionDialogReq, opts ...grpc.CallOption) (*SetCollectionDialogResp, error)
	//老协议直接获取收藏列表
	GetCollectionDialogs(ctx context.Context, in *GetCollectionDialogsReq, opts ...grpc.CallOption) (*GetCollectionDialogsResp, error)
	//新协议 通过hash判断是否返回收藏列表
	GetGroupCollections(ctx context.Context, in *GetGroupCollectionsReq, opts ...grpc.CallOption) (*GetGroupCollectionsResp, error)
	//判断对话框是否被收藏
	GetDialogCollection(ctx context.Context, in *GetDialogCollectionReq, opts ...grpc.CallOption) (*GetDialogCollectionResp, error)
	//判断对话框是否被收藏
	UpdateCollectionDialog(ctx context.Context, in *UpdateCollectionDialogReq, opts ...grpc.CallOption) (*UpdateCollectionDialogResp, error)
}

type groupCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupCollectionServiceClient(cc grpc.ClientConnInterface) GroupCollectionServiceClient {
	return &groupCollectionServiceClient{cc}
}

func (c *groupCollectionServiceClient) SetCollectionDialog(ctx context.Context, in *SetCollectionDialogReq, opts ...grpc.CallOption) (*SetCollectionDialogResp, error) {
	out := new(SetCollectionDialogResp)
	err := c.cc.Invoke(ctx, "/groupinfo.GroupCollectionService/SetCollectionDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCollectionServiceClient) GetCollectionDialogs(ctx context.Context, in *GetCollectionDialogsReq, opts ...grpc.CallOption) (*GetCollectionDialogsResp, error) {
	out := new(GetCollectionDialogsResp)
	err := c.cc.Invoke(ctx, "/groupinfo.GroupCollectionService/GetCollectionDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCollectionServiceClient) GetGroupCollections(ctx context.Context, in *GetGroupCollectionsReq, opts ...grpc.CallOption) (*GetGroupCollectionsResp, error) {
	out := new(GetGroupCollectionsResp)
	err := c.cc.Invoke(ctx, "/groupinfo.GroupCollectionService/GetGroupCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCollectionServiceClient) GetDialogCollection(ctx context.Context, in *GetDialogCollectionReq, opts ...grpc.CallOption) (*GetDialogCollectionResp, error) {
	out := new(GetDialogCollectionResp)
	err := c.cc.Invoke(ctx, "/groupinfo.GroupCollectionService/GetDialogCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCollectionServiceClient) UpdateCollectionDialog(ctx context.Context, in *UpdateCollectionDialogReq, opts ...grpc.CallOption) (*UpdateCollectionDialogResp, error) {
	out := new(UpdateCollectionDialogResp)
	err := c.cc.Invoke(ctx, "/groupinfo.GroupCollectionService/UpdateCollectionDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupCollectionServiceServer is the server API for GroupCollectionService service.
// All implementations must embed UnimplementedGroupCollectionServiceServer
// for forward compatibility
type GroupCollectionServiceServer interface {
	//添加删除收藏对话框
	SetCollectionDialog(context.Context, *SetCollectionDialogReq) (*SetCollectionDialogResp, error)
	//老协议直接获取收藏列表
	GetCollectionDialogs(context.Context, *GetCollectionDialogsReq) (*GetCollectionDialogsResp, error)
	//新协议 通过hash判断是否返回收藏列表
	GetGroupCollections(context.Context, *GetGroupCollectionsReq) (*GetGroupCollectionsResp, error)
	//判断对话框是否被收藏
	GetDialogCollection(context.Context, *GetDialogCollectionReq) (*GetDialogCollectionResp, error)
	//判断对话框是否被收藏
	UpdateCollectionDialog(context.Context, *UpdateCollectionDialogReq) (*UpdateCollectionDialogResp, error)
	mustEmbedUnimplementedGroupCollectionServiceServer()
}

// UnimplementedGroupCollectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupCollectionServiceServer struct {
}

func (UnimplementedGroupCollectionServiceServer) SetCollectionDialog(context.Context, *SetCollectionDialogReq) (*SetCollectionDialogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCollectionDialog not implemented")
}
func (UnimplementedGroupCollectionServiceServer) GetCollectionDialogs(context.Context, *GetCollectionDialogsReq) (*GetCollectionDialogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionDialogs not implemented")
}
func (UnimplementedGroupCollectionServiceServer) GetGroupCollections(context.Context, *GetGroupCollectionsReq) (*GetGroupCollectionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupCollections not implemented")
}
func (UnimplementedGroupCollectionServiceServer) GetDialogCollection(context.Context, *GetDialogCollectionReq) (*GetDialogCollectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogCollection not implemented")
}
func (UnimplementedGroupCollectionServiceServer) UpdateCollectionDialog(context.Context, *UpdateCollectionDialogReq) (*UpdateCollectionDialogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionDialog not implemented")
}
func (UnimplementedGroupCollectionServiceServer) mustEmbedUnimplementedGroupCollectionServiceServer() {
}

// UnsafeGroupCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupCollectionServiceServer will
// result in compilation errors.
type UnsafeGroupCollectionServiceServer interface {
	mustEmbedUnimplementedGroupCollectionServiceServer()
}

func RegisterGroupCollectionServiceServer(s grpc.ServiceRegistrar, srv GroupCollectionServiceServer) {
	s.RegisterService(&GroupCollectionService_ServiceDesc, srv)
}

func _GroupCollectionService_SetCollectionDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCollectionDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCollectionServiceServer).SetCollectionDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.GroupCollectionService/SetCollectionDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCollectionServiceServer).SetCollectionDialog(ctx, req.(*SetCollectionDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCollectionService_GetCollectionDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionDialogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCollectionServiceServer).GetCollectionDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.GroupCollectionService/GetCollectionDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCollectionServiceServer).GetCollectionDialogs(ctx, req.(*GetCollectionDialogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCollectionService_GetGroupCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupCollectionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCollectionServiceServer).GetGroupCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.GroupCollectionService/GetGroupCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCollectionServiceServer).GetGroupCollections(ctx, req.(*GetGroupCollectionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCollectionService_GetDialogCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCollectionServiceServer).GetDialogCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.GroupCollectionService/GetDialogCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCollectionServiceServer).GetDialogCollection(ctx, req.(*GetDialogCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCollectionService_UpdateCollectionDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCollectionServiceServer).UpdateCollectionDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.GroupCollectionService/UpdateCollectionDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCollectionServiceServer).UpdateCollectionDialog(ctx, req.(*UpdateCollectionDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupCollectionService_ServiceDesc is the grpc.ServiceDesc for GroupCollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupCollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "groupinfo.GroupCollectionService",
	HandlerType: (*GroupCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetCollectionDialog",
			Handler:    _GroupCollectionService_SetCollectionDialog_Handler,
		},
		{
			MethodName: "GetCollectionDialogs",
			Handler:    _GroupCollectionService_GetCollectionDialogs_Handler,
		},
		{
			MethodName: "GetGroupCollections",
			Handler:    _GroupCollectionService_GetGroupCollections_Handler,
		},
		{
			MethodName: "GetDialogCollection",
			Handler:    _GroupCollectionService_GetDialogCollection_Handler,
		},
		{
			MethodName: "UpdateCollectionDialog",
			Handler:    _GroupCollectionService_UpdateCollectionDialog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collectionservice.proto",
}
