// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/groupinfo/chatservice.proto

package groupinfo

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/pbcomm"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// 创建群的请求数据
type CreateChatReq struct {
	Title     string        `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	CreatorId int32         `protobuf:"varint,2,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CreateChatReq) Reset()                    { *m = CreateChatReq{} }
func (m *CreateChatReq) String() string            { return proto.CompactTextString(m) }
func (*CreateChatReq) ProtoMessage()               {}
func (*CreateChatReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{0} }

func (m *CreateChatReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateChatReq) GetCreatorId() int32 {
	if m != nil {
		return m.CreatorId
	}
	return 0
}

func (m *CreateChatReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type CreateChatResp struct {
	ChatId     int32          `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CreateChatResp) Reset()                    { *m = CreateChatResp{} }
func (m *CreateChatResp) String() string            { return proto.CompactTextString(m) }
func (*CreateChatResp) ProtoMessage()               {}
func (*CreateChatResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{1} }

func (m *CreateChatResp) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *CreateChatResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 通过群Id获取群成员
type GetChatUsersIdReq struct {
	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChatUsersIdReq) Reset()                    { *m = GetChatUsersIdReq{} }
func (m *GetChatUsersIdReq) String() string            { return proto.CompactTextString(m) }
func (*GetChatUsersIdReq) ProtoMessage()               {}
func (*GetChatUsersIdReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{2} }

func (m *GetChatUsersIdReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatUsersIdReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GetChatUsersIdResp struct {
	UserId     []int32        `protobuf:"varint,1,rep,packed,name=user_id,json=userId" json:"user_id,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChatUsersIdResp) Reset()                    { *m = GetChatUsersIdResp{} }
func (m *GetChatUsersIdResp) String() string            { return proto.CompactTextString(m) }
func (*GetChatUsersIdResp) ProtoMessage()               {}
func (*GetChatUsersIdResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{3} }

func (m *GetChatUsersIdResp) GetUserId() []int32 {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *GetChatUsersIdResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 通过群Id 用户Id 获取群基本信息
type GetChatInfoReq struct {
	ChatId   int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId   int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RobotGet bool          `protobuf:"varint,3,opt,name=robot_get,json=robotGet,proto3" json:"robot_get,omitempty"`
	Dlog     *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChatInfoReq) Reset()                    { *m = GetChatInfoReq{} }
func (m *GetChatInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetChatInfoReq) ProtoMessage()               {}
func (*GetChatInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{4} }

func (m *GetChatInfoReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChatInfoReq) GetRobotGet() bool {
	if m != nil {
		return m.RobotGet
	}
	return false
}

func (m *GetChatInfoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 添加群成员
type AddChatMemberReq struct {
	ChatId    int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	InvitorId int32         `protobuf:"varint,2,opt,name=invitor_id,json=invitorId,proto3" json:"invitor_id,omitempty"`
	MemberId  []int32       `protobuf:"varint,3,rep,packed,name=member_id,json=memberId" json:"member_id,omitempty"`
	Date      int32         `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *AddChatMemberReq) Reset()                    { *m = AddChatMemberReq{} }
func (m *AddChatMemberReq) String() string            { return proto.CompactTextString(m) }
func (*AddChatMemberReq) ProtoMessage()               {}
func (*AddChatMemberReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{5} }

func (m *AddChatMemberReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *AddChatMemberReq) GetInvitorId() int32 {
	if m != nil {
		return m.InvitorId
	}
	return 0
}

func (m *AddChatMemberReq) GetMemberId() []int32 {
	if m != nil {
		return m.MemberId
	}
	return nil
}

func (m *AddChatMemberReq) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *AddChatMemberReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type AddChatMemberResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *AddChatMemberResp) Reset()                    { *m = AddChatMemberResp{} }
func (m *AddChatMemberResp) String() string            { return proto.CompactTextString(m) }
func (*AddChatMemberResp) ProtoMessage()               {}
func (*AddChatMemberResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{6} }

func (m *AddChatMemberResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 删除群成员
type DelChatMemberReq struct {
	ChatId     int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OperatorId int32         `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	MemberId   []int32       `protobuf:"varint,3,rep,packed,name=member_id,json=memberId" json:"member_id,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *DelChatMemberReq) Reset()                    { *m = DelChatMemberReq{} }
func (m *DelChatMemberReq) String() string            { return proto.CompactTextString(m) }
func (*DelChatMemberReq) ProtoMessage()               {}
func (*DelChatMemberReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{7} }

func (m *DelChatMemberReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *DelChatMemberReq) GetOperatorId() int32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *DelChatMemberReq) GetMemberId() []int32 {
	if m != nil {
		return m.MemberId
	}
	return nil
}

func (m *DelChatMemberReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type DelChatMemberResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *DelChatMemberResp) Reset()                    { *m = DelChatMemberResp{} }
func (m *DelChatMemberResp) String() string            { return proto.CompactTextString(m) }
func (*DelChatMemberResp) ProtoMessage()               {}
func (*DelChatMemberResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{8} }

func (m *DelChatMemberResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 编辑群头像
type EditChatPhotoReq struct {
	ChatId    int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Photo     []byte        `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Fullphoto []byte        `protobuf:"bytes,4,opt,name=fullphoto,proto3" json:"fullphoto,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *EditChatPhotoReq) Reset()                    { *m = EditChatPhotoReq{} }
func (m *EditChatPhotoReq) String() string            { return proto.CompactTextString(m) }
func (*EditChatPhotoReq) ProtoMessage()               {}
func (*EditChatPhotoReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{9} }

func (m *EditChatPhotoReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *EditChatPhotoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *EditChatPhotoReq) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *EditChatPhotoReq) GetFullphoto() []byte {
	if m != nil {
		return m.Fullphoto
	}
	return nil
}

func (m *EditChatPhotoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type EditChatPhotoResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *EditChatPhotoResp) Reset()                    { *m = EditChatPhotoResp{} }
func (m *EditChatPhotoResp) String() string            { return proto.CompactTextString(m) }
func (*EditChatPhotoResp) ProtoMessage()               {}
func (*EditChatPhotoResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{10} }

func (m *EditChatPhotoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 编辑群title
type EditChatTittleReq struct {
	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Tittle string        `protobuf:"bytes,3,opt,name=tittle,proto3" json:"tittle,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *EditChatTittleReq) Reset()                    { *m = EditChatTittleReq{} }
func (m *EditChatTittleReq) String() string            { return proto.CompactTextString(m) }
func (*EditChatTittleReq) ProtoMessage()               {}
func (*EditChatTittleReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{11} }

func (m *EditChatTittleReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *EditChatTittleReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *EditChatTittleReq) GetTittle() string {
	if m != nil {
		return m.Tittle
	}
	return ""
}

func (m *EditChatTittleReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type EditChatTittleResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *EditChatTittleResp) Reset()                    { *m = EditChatTittleResp{} }
func (m *EditChatTittleResp) String() string            { return proto.CompactTextString(m) }
func (*EditChatTittleResp) ProtoMessage()               {}
func (*EditChatTittleResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{12} }

func (m *EditChatTittleResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 设置管理员
type AddChatAdminReq struct {
	OperatorId int32         `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	MemberId   int32         `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *AddChatAdminReq) Reset()                    { *m = AddChatAdminReq{} }
func (m *AddChatAdminReq) String() string            { return proto.CompactTextString(m) }
func (*AddChatAdminReq) ProtoMessage()               {}
func (*AddChatAdminReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{13} }

func (m *AddChatAdminReq) GetOperatorId() int32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *AddChatAdminReq) GetMemberId() int32 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *AddChatAdminReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *AddChatAdminReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type AddChatAdminResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *AddChatAdminResp) Reset()                    { *m = AddChatAdminResp{} }
func (m *AddChatAdminResp) String() string            { return proto.CompactTextString(m) }
func (*AddChatAdminResp) ProtoMessage()               {}
func (*AddChatAdminResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{14} }

func (m *AddChatAdminResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 取消管理员
type DelChatAdminReq struct {
	OperatorId int32         `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	MemberId   int32         `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *DelChatAdminReq) Reset()                    { *m = DelChatAdminReq{} }
func (m *DelChatAdminReq) String() string            { return proto.CompactTextString(m) }
func (*DelChatAdminReq) ProtoMessage()               {}
func (*DelChatAdminReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{15} }

func (m *DelChatAdminReq) GetOperatorId() int32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *DelChatAdminReq) GetMemberId() int32 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *DelChatAdminReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *DelChatAdminReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type DelChatAdminResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *DelChatAdminResp) Reset()                    { *m = DelChatAdminResp{} }
func (m *DelChatAdminResp) String() string            { return proto.CompactTextString(m) }
func (*DelChatAdminResp) ProtoMessage()               {}
func (*DelChatAdminResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{16} }

func (m *DelChatAdminResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获取群成员角色
type GetChatUsersRoleReq struct {
	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChatUsersRoleReq) Reset()                    { *m = GetChatUsersRoleReq{} }
func (m *GetChatUsersRoleReq) String() string            { return proto.CompactTextString(m) }
func (*GetChatUsersRoleReq) ProtoMessage()               {}
func (*GetChatUsersRoleReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{17} }

func (m *GetChatUsersRoleReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatUsersRoleReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type ChatUserRole struct {
	InvitorId   int32 `protobuf:"varint,1,opt,name=invitor_id,json=invitorId,proto3" json:"invitor_id,omitempty"`
	UserId      int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InvitorDate int32 `protobuf:"varint,3,opt,name=invitor_date,json=invitorDate,proto3" json:"invitor_date,omitempty"`
	Role        int32 `protobuf:"varint,4,opt,name=role,proto3" json:"role,omitempty"`
}

func (m *ChatUserRole) Reset()                    { *m = ChatUserRole{} }
func (m *ChatUserRole) String() string            { return proto.CompactTextString(m) }
func (*ChatUserRole) ProtoMessage()               {}
func (*ChatUserRole) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{18} }

func (m *ChatUserRole) GetInvitorId() int32 {
	if m != nil {
		return m.InvitorId
	}
	return 0
}

func (m *ChatUserRole) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatUserRole) GetInvitorDate() int32 {
	if m != nil {
		return m.InvitorDate
	}
	return 0
}

func (m *ChatUserRole) GetRole() int32 {
	if m != nil {
		return m.Role
	}
	return 0
}

type GetChatUsersRoleResp struct {
	UsersRole  []*ChatUserRole `protobuf:"bytes,1,rep,name=users_role,json=usersRole" json:"users_role,omitempty"`
	Version    int32           `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Resultcode ChatResultCode  `protobuf:"varint,3,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChatUsersRoleResp) Reset()         { *m = GetChatUsersRoleResp{} }
func (m *GetChatUsersRoleResp) String() string { return proto.CompactTextString(m) }
func (*GetChatUsersRoleResp) ProtoMessage()    {}
func (*GetChatUsersRoleResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChatservice, []int{19}
}

func (m *GetChatUsersRoleResp) GetUsersRole() []*ChatUserRole {
	if m != nil {
		return m.UsersRole
	}
	return nil
}

func (m *GetChatUsersRoleResp) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetChatUsersRoleResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 批量获取用群、超级群信息的请求
type GetChatsChannelsReq struct {
	Userid int32 `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	// repeated int32 users     = 2; // 获取用户信息的用户id数组
	Chatid        []int32       `protobuf:"varint,2,rep,packed,name=chatid" json:"chatid,omitempty"`
	Channelid     []int32       `protobuf:"varint,3,rep,packed,name=channelid" json:"channelid,omitempty"`
	ProtocolLayer int32         `protobuf:"varint,4,opt,name=protocol_layer,json=protocolLayer,proto3" json:"protocol_layer,omitempty"`
	Dlog          *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChatsChannelsReq) Reset()                    { *m = GetChatsChannelsReq{} }
func (m *GetChatsChannelsReq) String() string            { return proto.CompactTextString(m) }
func (*GetChatsChannelsReq) ProtoMessage()               {}
func (*GetChatsChannelsReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{20} }

func (m *GetChatsChannelsReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *GetChatsChannelsReq) GetChatid() []int32 {
	if m != nil {
		return m.Chatid
	}
	return nil
}

func (m *GetChatsChannelsReq) GetChannelid() []int32 {
	if m != nil {
		return m.Channelid
	}
	return nil
}

func (m *GetChatsChannelsReq) GetProtocolLayer() int32 {
	if m != nil {
		return m.ProtocolLayer
	}
	return 0
}

func (m *GetChatsChannelsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 批量获取群、超级群信息的返回
type GetChatsChannelsResp struct {
	// repeated ChannelInfoBase channels = 1;
	// repeated GetChatInfoResp chats = 2;
	Channels [][]byte `protobuf:"bytes,1,rep,name=channels" json:"channels,omitempty"`
	// UserInfoArray users = 2;
	Chats      [][]byte       `protobuf:"bytes,2,rep,name=chats" json:"chats,omitempty"`
	NoChats    []int32        `protobuf:"varint,3,rep,packed,name=no_chats,json=noChats" json:"no_chats,omitempty"`
	NoChans    []int32        `protobuf:"varint,4,rep,packed,name=no_chans,json=noChans" json:"no_chans,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,5,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChatsChannelsResp) Reset()         { *m = GetChatsChannelsResp{} }
func (m *GetChatsChannelsResp) String() string { return proto.CompactTextString(m) }
func (*GetChatsChannelsResp) ProtoMessage()    {}
func (*GetChatsChannelsResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChatservice, []int{21}
}

func (m *GetChatsChannelsResp) GetChannels() [][]byte {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *GetChatsChannelsResp) GetChats() [][]byte {
	if m != nil {
		return m.Chats
	}
	return nil
}

func (m *GetChatsChannelsResp) GetNoChats() []int32 {
	if m != nil {
		return m.NoChats
	}
	return nil
}

func (m *GetChatsChannelsResp) GetNoChans() []int32 {
	if m != nil {
		return m.NoChans
	}
	return nil
}

func (m *GetChatsChannelsResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 批量获取用群、超级群信息的请求
type GetChatsChannelsMapReq struct {
	Userid        []int32       `protobuf:"varint,1,rep,packed,name=userid" json:"userid,omitempty"`
	Chatid        []int32       `protobuf:"varint,2,rep,packed,name=chatid" json:"chatid,omitempty"`
	Channelid     []int32       `protobuf:"varint,3,rep,packed,name=channelid" json:"channelid,omitempty"`
	ProtocolLayer int32         `protobuf:"varint,4,opt,name=protocol_layer,json=protocolLayer,proto3" json:"protocol_layer,omitempty"`
	Dlog          *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChatsChannelsMapReq) Reset()         { *m = GetChatsChannelsMapReq{} }
func (m *GetChatsChannelsMapReq) String() string { return proto.CompactTextString(m) }
func (*GetChatsChannelsMapReq) ProtoMessage()    {}
func (*GetChatsChannelsMapReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChatservice, []int{22}
}

func (m *GetChatsChannelsMapReq) GetUserid() []int32 {
	if m != nil {
		return m.Userid
	}
	return nil
}

func (m *GetChatsChannelsMapReq) GetChatid() []int32 {
	if m != nil {
		return m.Chatid
	}
	return nil
}

func (m *GetChatsChannelsMapReq) GetChannelid() []int32 {
	if m != nil {
		return m.Channelid
	}
	return nil
}

func (m *GetChatsChannelsMapReq) GetProtocolLayer() int32 {
	if m != nil {
		return m.ProtocolLayer
	}
	return 0
}

func (m *GetChatsChannelsMapReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GroupBytes struct {
	Groups [][]byte `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *GroupBytes) Reset()                    { *m = GroupBytes{} }
func (m *GroupBytes) String() string            { return proto.CompactTextString(m) }
func (*GroupBytes) ProtoMessage()               {}
func (*GroupBytes) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{23} }

func (m *GroupBytes) GetGroups() [][]byte {
	if m != nil {
		return m.Groups
	}
	return nil
}

// 批量获取群、超级群信息的返回
type GetChatsChannelsMapResp struct {
	Groups     map[int32]*GroupBytes `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	NoChats    []int32               `protobuf:"varint,2,rep,packed,name=no_chats,json=noChats" json:"no_chats,omitempty"`
	NoChans    []int32               `protobuf:"varint,3,rep,packed,name=no_chans,json=noChans" json:"no_chans,omitempty"`
	Resultcode ChatResultCode        `protobuf:"varint,4,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChatsChannelsMapResp) Reset()         { *m = GetChatsChannelsMapResp{} }
func (m *GetChatsChannelsMapResp) String() string { return proto.CompactTextString(m) }
func (*GetChatsChannelsMapResp) ProtoMessage()    {}
func (*GetChatsChannelsMapResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChatservice, []int{24}
}

func (m *GetChatsChannelsMapResp) GetGroups() map[int32]*GroupBytes {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *GetChatsChannelsMapResp) GetNoChats() []int32 {
	if m != nil {
		return m.NoChats
	}
	return nil
}

func (m *GetChatsChannelsMapResp) GetNoChans() []int32 {
	if m != nil {
		return m.NoChans
	}
	return nil
}

func (m *GetChatsChannelsMapResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获用户的共同群
type GetTwoUserChatsReq struct {
	UseridOne int32         `protobuf:"varint,1,opt,name=userid_one,json=useridOne,proto3" json:"userid_one,omitempty"`
	UseridTwo int32         `protobuf:"varint,2,opt,name=userid_two,json=useridTwo,proto3" json:"userid_two,omitempty"`
	MaxId     int32         `protobuf:"varint,3,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Limit     int32         `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetTwoUserChatsReq) Reset()                    { *m = GetTwoUserChatsReq{} }
func (m *GetTwoUserChatsReq) String() string            { return proto.CompactTextString(m) }
func (*GetTwoUserChatsReq) ProtoMessage()               {}
func (*GetTwoUserChatsReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{25} }

func (m *GetTwoUserChatsReq) GetUseridOne() int32 {
	if m != nil {
		return m.UseridOne
	}
	return 0
}

func (m *GetTwoUserChatsReq) GetUseridTwo() int32 {
	if m != nil {
		return m.UseridTwo
	}
	return 0
}

func (m *GetTwoUserChatsReq) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *GetTwoUserChatsReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetTwoUserChatsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 获取用户信息、群、超级群信息的返回
type GetTwoUserChatsResp struct {
	Count        int32          `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	ChatIds      []int32        `protobuf:"varint,2,rep,packed,name=chat_ids,json=chatIds" json:"chat_ids,omitempty"`
	SuperChatIds []int32        `protobuf:"varint,3,rep,packed,name=super_chat_ids,json=superChatIds" json:"super_chat_ids,omitempty"`
	Resultcode   ChatResultCode `protobuf:"varint,4,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetTwoUserChatsResp) Reset()                    { *m = GetTwoUserChatsResp{} }
func (m *GetTwoUserChatsResp) String() string            { return proto.CompactTextString(m) }
func (*GetTwoUserChatsResp) ProtoMessage()               {}
func (*GetTwoUserChatsResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{26} }

func (m *GetTwoUserChatsResp) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetTwoUserChatsResp) GetChatIds() []int32 {
	if m != nil {
		return m.ChatIds
	}
	return nil
}

func (m *GetTwoUserChatsResp) GetSuperChatIds() []int32 {
	if m != nil {
		return m.SuperChatIds
	}
	return nil
}

func (m *GetTwoUserChatsResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 升级超级群
type UpGradeChatReq struct {
	UserId        int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId        int32         `protobuf:"varint,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MigratedMaxId int32         `protobuf:"varint,3,opt,name=migrated_maxId,json=migratedMaxId,proto3" json:"migrated_maxId,omitempty"`
	Dlog          *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpGradeChatReq) Reset()                    { *m = UpGradeChatReq{} }
func (m *UpGradeChatReq) String() string            { return proto.CompactTextString(m) }
func (*UpGradeChatReq) ProtoMessage()               {}
func (*UpGradeChatReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{27} }

func (m *UpGradeChatReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpGradeChatReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *UpGradeChatReq) GetMigratedMaxId() int32 {
	if m != nil {
		return m.MigratedMaxId
	}
	return 0
}

func (m *UpGradeChatReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 升级超级群返回
type UpGradeChatResp struct {
	SuperchatId int32          `protobuf:"varint,1,opt,name=superchat_id,json=superchatId,proto3" json:"superchat_id,omitempty"`
	Title       string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Resultcode  ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *UpGradeChatResp) Reset()                    { *m = UpGradeChatResp{} }
func (m *UpGradeChatResp) String() string            { return proto.CompactTextString(m) }
func (*UpGradeChatResp) ProtoMessage()               {}
func (*UpGradeChatResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{28} }

func (m *UpGradeChatResp) GetSuperchatId() int32 {
	if m != nil {
		return m.SuperchatId
	}
	return 0
}

func (m *UpGradeChatResp) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpGradeChatResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 生成群群链接
type CreateChatLinkReq struct {
	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CreateChatLinkReq) Reset()                    { *m = CreateChatLinkReq{} }
func (m *CreateChatLinkReq) String() string            { return proto.CompactTextString(m) }
func (*CreateChatLinkReq) ProtoMessage()               {}
func (*CreateChatLinkReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{29} }

func (m *CreateChatLinkReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *CreateChatLinkReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateChatLinkReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 生成群链接
type CreateChatLinkResp struct {
	Link       string         `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CreateChatLinkResp) Reset()                    { *m = CreateChatLinkResp{} }
func (m *CreateChatLinkResp) String() string            { return proto.CompactTextString(m) }
func (*CreateChatLinkResp) ProtoMessage()               {}
func (*CreateChatLinkResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{30} }

func (m *CreateChatLinkResp) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CreateChatLinkResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 切换邀请规则
type SwitchInviteRuleReq struct {
	ChatId      int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AdminEnable bool          `protobuf:"varint,3,opt,name=admin_enable,json=adminEnable,proto3" json:"admin_enable,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *SwitchInviteRuleReq) Reset()                    { *m = SwitchInviteRuleReq{} }
func (m *SwitchInviteRuleReq) String() string            { return proto.CompactTextString(m) }
func (*SwitchInviteRuleReq) ProtoMessage()               {}
func (*SwitchInviteRuleReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{31} }

func (m *SwitchInviteRuleReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SwitchInviteRuleReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SwitchInviteRuleReq) GetAdminEnable() bool {
	if m != nil {
		return m.AdminEnable
	}
	return false
}

func (m *SwitchInviteRuleReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 生成群链接
type SwitchInviteRuleResp struct {
	IsModify   bool           `protobuf:"varint,1,opt,name=is_modify,json=isModify,proto3" json:"is_modify,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *SwitchInviteRuleResp) Reset()         { *m = SwitchInviteRuleResp{} }
func (m *SwitchInviteRuleResp) String() string { return proto.CompactTextString(m) }
func (*SwitchInviteRuleResp) ProtoMessage()    {}
func (*SwitchInviteRuleResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChatservice, []int{32}
}

func (m *SwitchInviteRuleResp) GetIsModify() bool {
	if m != nil {
		return m.IsModify
	}
	return false
}

func (m *SwitchInviteRuleResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 检查群是否是加密
type CheckChatIsEncryReq struct {
	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CheckChatIsEncryReq) Reset()                    { *m = CheckChatIsEncryReq{} }
func (m *CheckChatIsEncryReq) String() string            { return proto.CompactTextString(m) }
func (*CheckChatIsEncryReq) ProtoMessage()               {}
func (*CheckChatIsEncryReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{33} }

func (m *CheckChatIsEncryReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *CheckChatIsEncryReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 检查群是否是加密
type CheckChatIsEncryResp struct {
	Encry      bool           `protobuf:"varint,1,opt,name=encry,proto3" json:"encry,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CheckChatIsEncryResp) Reset()         { *m = CheckChatIsEncryResp{} }
func (m *CheckChatIsEncryResp) String() string { return proto.CompactTextString(m) }
func (*CheckChatIsEncryResp) ProtoMessage()    {}
func (*CheckChatIsEncryResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChatservice, []int{34}
}

func (m *CheckChatIsEncryResp) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *CheckChatIsEncryResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -------------groupinfo 独立后新增接口-----------------------
// 普通群信息
type ChatInfoBase struct {
	ChatId            int32          `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminsEnabled     bool           `protobuf:"varint,2,opt,name=admins_enabled,json=adminsEnabled,proto3" json:"admins_enabled,omitempty"`
	Deactivated       bool           `protobuf:"varint,3,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
	ExportedInvite    string         `protobuf:"bytes,4,opt,name=exported_invite,json=exportedInvite,proto3" json:"exported_invite,omitempty"`
	Encry             bool           `protobuf:"varint,5,opt,name=encry,proto3" json:"encry,omitempty"`
	Creator           int32          `protobuf:"varint,6,opt,name=creator,proto3" json:"creator,omitempty"`
	Title             string         `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Photo             []byte         `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`
	FullPhoto         []byte         `protobuf:"bytes,9,opt,name=full_photo,json=fullPhoto,proto3" json:"full_photo,omitempty"`
	Version           int32          `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	ParticipantsCount int32          `protobuf:"varint,11,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
	Date              int32          `protobuf:"varint,12,opt,name=date,proto3" json:"date,omitempty"`
	MigrateTo         string         `protobuf:"bytes,13,opt,name=migrate_to,json=migrateTo,proto3" json:"migrate_to,omitempty"`
	Resultcode        ChatResultCode `protobuf:"varint,14,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChatInfoBase) Reset()                    { *m = ChatInfoBase{} }
func (m *ChatInfoBase) String() string            { return proto.CompactTextString(m) }
func (*ChatInfoBase) ProtoMessage()               {}
func (*ChatInfoBase) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{35} }

func (m *ChatInfoBase) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatInfoBase) GetAdminsEnabled() bool {
	if m != nil {
		return m.AdminsEnabled
	}
	return false
}

func (m *ChatInfoBase) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

func (m *ChatInfoBase) GetExportedInvite() string {
	if m != nil {
		return m.ExportedInvite
	}
	return ""
}

func (m *ChatInfoBase) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *ChatInfoBase) GetCreator() int32 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *ChatInfoBase) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChatInfoBase) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *ChatInfoBase) GetFullPhoto() []byte {
	if m != nil {
		return m.FullPhoto
	}
	return nil
}

func (m *ChatInfoBase) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ChatInfoBase) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *ChatInfoBase) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ChatInfoBase) GetMigrateTo() string {
	if m != nil {
		return m.MigrateTo
	}
	return ""
}

func (m *ChatInfoBase) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 获取单个用户的所有普通群
type GetAllChatInfoByUserIdReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetAllChatInfoByUserIdReq) Reset()         { *m = GetAllChatInfoByUserIdReq{} }
func (m *GetAllChatInfoByUserIdReq) String() string { return proto.CompactTextString(m) }
func (*GetAllChatInfoByUserIdReq) ProtoMessage()    {}
func (*GetAllChatInfoByUserIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChatservice, []int{36}
}

func (m *GetAllChatInfoByUserIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetAllChatInfoByUserIdReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GetAllChatInfoByUserIdResp struct {
	ChatInfos  []*ChatInfoBase `protobuf:"bytes,1,rep,name=chat_infos,json=chatInfos" json:"chat_infos,omitempty"`
	Resultcode ChatResultCode  `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetAllChatInfoByUserIdResp) Reset()         { *m = GetAllChatInfoByUserIdResp{} }
func (m *GetAllChatInfoByUserIdResp) String() string { return proto.CompactTextString(m) }
func (*GetAllChatInfoByUserIdResp) ProtoMessage()    {}
func (*GetAllChatInfoByUserIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChatservice, []int{37}
}

func (m *GetAllChatInfoByUserIdResp) GetChatInfos() []*ChatInfoBase {
	if m != nil {
		return m.ChatInfos
	}
	return nil
}

func (m *GetAllChatInfoByUserIdResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

type ChatParticipant struct {
	ChatId     int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId     int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Invitor    int32 `protobuf:"varint,3,opt,name=invitor,proto3" json:"invitor,omitempty"`
	AdminLevel int32 `protobuf:"varint,4,opt,name=admin_level,json=adminLevel,proto3" json:"admin_level,omitempty"`
	LeaveFlg   int32 `protobuf:"varint,5,opt,name=leave_flg,json=leaveFlg,proto3" json:"leave_flg,omitempty"`
	Jointime   int32 `protobuf:"varint,6,opt,name=jointime,proto3" json:"jointime,omitempty"`
}

func (m *ChatParticipant) Reset()                    { *m = ChatParticipant{} }
func (m *ChatParticipant) String() string            { return proto.CompactTextString(m) }
func (*ChatParticipant) ProtoMessage()               {}
func (*ChatParticipant) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{38} }

func (m *ChatParticipant) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatParticipant) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatParticipant) GetInvitor() int32 {
	if m != nil {
		return m.Invitor
	}
	return 0
}

func (m *ChatParticipant) GetAdminLevel() int32 {
	if m != nil {
		return m.AdminLevel
	}
	return 0
}

func (m *ChatParticipant) GetLeaveFlg() int32 {
	if m != nil {
		return m.LeaveFlg
	}
	return 0
}

func (m *ChatParticipant) GetJointime() int32 {
	if m != nil {
		return m.Jointime
	}
	return 0
}

// 获取群成员信息请求
type GetChatUserInfoReq struct {
	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChatUserInfoReq) Reset()                    { *m = GetChatUserInfoReq{} }
func (m *GetChatUserInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetChatUserInfoReq) ProtoMessage()               {}
func (*GetChatUserInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{39} }

func (m *GetChatUserInfoReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatUserInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChatUserInfoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GetChatUserInfoResp struct {
	Chatuserinfo *ChatParticipant `protobuf:"bytes,1,opt,name=chatuserinfo" json:"chatuserinfo,omitempty"`
	Resultcode   ChatResultCode   `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChatUserInfoResp) Reset()                    { *m = GetChatUserInfoResp{} }
func (m *GetChatUserInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetChatUserInfoResp) ProtoMessage()               {}
func (*GetChatUserInfoResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{40} }

func (m *GetChatUserInfoResp) GetChatuserinfo() *ChatParticipant {
	if m != nil {
		return m.Chatuserinfo
	}
	return nil
}

func (m *GetChatUserInfoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 变更创建者请求
type SetGroupChatCreatorReq struct {
	ChatId   int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Operator int32         `protobuf:"varint,2,opt,name=operator,proto3" json:"operator,omitempty"`
	UserId   int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Remark   string        `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`
	IsAdd    bool          `protobuf:"varint,5,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	Dlog     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *SetGroupChatCreatorReq) Reset()         { *m = SetGroupChatCreatorReq{} }
func (m *SetGroupChatCreatorReq) String() string { return proto.CompactTextString(m) }
func (*SetGroupChatCreatorReq) ProtoMessage()    {}
func (*SetGroupChatCreatorReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChatservice, []int{41}
}

func (m *SetGroupChatCreatorReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SetGroupChatCreatorReq) GetOperator() int32 {
	if m != nil {
		return m.Operator
	}
	return 0
}

func (m *SetGroupChatCreatorReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetGroupChatCreatorReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *SetGroupChatCreatorReq) GetIsAdd() bool {
	if m != nil {
		return m.IsAdd
	}
	return false
}

func (m *SetGroupChatCreatorReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 通用的更新操作响应
type UpdateChatCommonResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *UpdateChatCommonResp) Reset()         { *m = UpdateChatCommonResp{} }
func (m *UpdateChatCommonResp) String() string { return proto.CompactTextString(m) }
func (*UpdateChatCommonResp) ProtoMessage()    {}
func (*UpdateChatCommonResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChatservice, []int{42}
}

func (m *UpdateChatCommonResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

type CheckUserInChatReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId int32         `protobuf:"varint,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CheckUserInChatReq) Reset()                    { *m = CheckUserInChatReq{} }
func (m *CheckUserInChatReq) String() string            { return proto.CompactTextString(m) }
func (*CheckUserInChatReq) ProtoMessage()               {}
func (*CheckUserInChatReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{43} }

func (m *CheckUserInChatReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckUserInChatReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *CheckUserInChatReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type CheckUserInChatResp struct {
	State bool `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *CheckUserInChatResp) Reset()                    { *m = CheckUserInChatResp{} }
func (m *CheckUserInChatResp) String() string            { return proto.CompactTextString(m) }
func (*CheckUserInChatResp) ProtoMessage()               {}
func (*CheckUserInChatResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{44} }

func (m *CheckUserInChatResp) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func init() {
	proto.RegisterType((*CreateChatReq)(nil), "groupinfo.CreateChatReq")
	proto.RegisterType((*CreateChatResp)(nil), "groupinfo.CreateChatResp")
	proto.RegisterType((*GetChatUsersIdReq)(nil), "groupinfo.GetChatUsersIdReq")
	proto.RegisterType((*GetChatUsersIdResp)(nil), "groupinfo.GetChatUsersIdResp")
	proto.RegisterType((*GetChatInfoReq)(nil), "groupinfo.GetChatInfoReq")
	proto.RegisterType((*AddChatMemberReq)(nil), "groupinfo.AddChatMemberReq")
	proto.RegisterType((*AddChatMemberResp)(nil), "groupinfo.AddChatMemberResp")
	proto.RegisterType((*DelChatMemberReq)(nil), "groupinfo.DelChatMemberReq")
	proto.RegisterType((*DelChatMemberResp)(nil), "groupinfo.DelChatMemberResp")
	proto.RegisterType((*EditChatPhotoReq)(nil), "groupinfo.EditChatPhotoReq")
	proto.RegisterType((*EditChatPhotoResp)(nil), "groupinfo.EditChatPhotoResp")
	proto.RegisterType((*EditChatTittleReq)(nil), "groupinfo.EditChatTittleReq")
	proto.RegisterType((*EditChatTittleResp)(nil), "groupinfo.EditChatTittleResp")
	proto.RegisterType((*AddChatAdminReq)(nil), "groupinfo.AddChatAdminReq")
	proto.RegisterType((*AddChatAdminResp)(nil), "groupinfo.AddChatAdminResp")
	proto.RegisterType((*DelChatAdminReq)(nil), "groupinfo.DelChatAdminReq")
	proto.RegisterType((*DelChatAdminResp)(nil), "groupinfo.DelChatAdminResp")
	proto.RegisterType((*GetChatUsersRoleReq)(nil), "groupinfo.GetChatUsersRoleReq")
	proto.RegisterType((*ChatUserRole)(nil), "groupinfo.ChatUserRole")
	proto.RegisterType((*GetChatUsersRoleResp)(nil), "groupinfo.GetChatUsersRoleResp")
	proto.RegisterType((*GetChatsChannelsReq)(nil), "groupinfo.GetChatsChannelsReq")
	proto.RegisterType((*GetChatsChannelsResp)(nil), "groupinfo.GetChatsChannelsResp")
	proto.RegisterType((*GetChatsChannelsMapReq)(nil), "groupinfo.GetChatsChannelsMapReq")
	proto.RegisterType((*GroupBytes)(nil), "groupinfo.GroupBytes")
	proto.RegisterType((*GetChatsChannelsMapResp)(nil), "groupinfo.GetChatsChannelsMapResp")
	proto.RegisterType((*GetTwoUserChatsReq)(nil), "groupinfo.GetTwoUserChatsReq")
	proto.RegisterType((*GetTwoUserChatsResp)(nil), "groupinfo.GetTwoUserChatsResp")
	proto.RegisterType((*UpGradeChatReq)(nil), "groupinfo.UpGradeChatReq")
	proto.RegisterType((*UpGradeChatResp)(nil), "groupinfo.UpGradeChatResp")
	proto.RegisterType((*CreateChatLinkReq)(nil), "groupinfo.CreateChatLinkReq")
	proto.RegisterType((*CreateChatLinkResp)(nil), "groupinfo.CreateChatLinkResp")
	proto.RegisterType((*SwitchInviteRuleReq)(nil), "groupinfo.SwitchInviteRuleReq")
	proto.RegisterType((*SwitchInviteRuleResp)(nil), "groupinfo.SwitchInviteRuleResp")
	proto.RegisterType((*CheckChatIsEncryReq)(nil), "groupinfo.CheckChatIsEncryReq")
	proto.RegisterType((*CheckChatIsEncryResp)(nil), "groupinfo.CheckChatIsEncryResp")
	proto.RegisterType((*ChatInfoBase)(nil), "groupinfo.ChatInfoBase")
	proto.RegisterType((*GetAllChatInfoByUserIdReq)(nil), "groupinfo.GetAllChatInfoByUserIdReq")
	proto.RegisterType((*GetAllChatInfoByUserIdResp)(nil), "groupinfo.GetAllChatInfoByUserIdResp")
	proto.RegisterType((*ChatParticipant)(nil), "groupinfo.ChatParticipant")
	proto.RegisterType((*GetChatUserInfoReq)(nil), "groupinfo.GetChatUserInfoReq")
	proto.RegisterType((*GetChatUserInfoResp)(nil), "groupinfo.GetChatUserInfoResp")
	proto.RegisterType((*SetGroupChatCreatorReq)(nil), "groupinfo.SetGroupChatCreatorReq")
	proto.RegisterType((*UpdateChatCommonResp)(nil), "groupinfo.UpdateChatCommonResp")
	proto.RegisterType((*CheckUserInChatReq)(nil), "groupinfo.CheckUserInChatReq")
	proto.RegisterType((*CheckUserInChatResp)(nil), "groupinfo.CheckUserInChatResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatServerService service

type ChatServerServiceClient interface {
	// 创建群
	CreateNewChat(ctx context.Context, in *CreateChatReq, opts ...grpc.CallOption) (*CreateChatResp, error)
	// 通过群Id获取群成员
	GetChatUsersIdById(ctx context.Context, in *GetChatUsersIdReq, opts ...grpc.CallOption) (*GetChatUsersIdResp, error)
	// 通过群Id 用户Id 获取群基本信息
	GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoResp, error)
	// 通过群Id 用户Id 获取群基本信息,用户可以不在群内
	GetChatInfo_User(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoResp, error)
	// 添加群成员
	AddChatUser(ctx context.Context, in *AddChatMemberReq, opts ...grpc.CallOption) (*AddChatMemberResp, error)
	// 删除群成员
	DelChatUser(ctx context.Context, in *DelChatMemberReq, opts ...grpc.CallOption) (*DelChatMemberResp, error)
	// 编辑群头像
	EditChatPhoto(ctx context.Context, in *EditChatPhotoReq, opts ...grpc.CallOption) (*EditChatPhotoResp, error)
	// 编辑群title
	EditChatTittle(ctx context.Context, in *EditChatTittleReq, opts ...grpc.CallOption) (*EditChatTittleResp, error)
	// 设置管理员
	AddChatAdmin(ctx context.Context, in *AddChatAdminReq, opts ...grpc.CallOption) (*AddChatAdminResp, error)
	// 取消管理员
	DelChatAdmin(ctx context.Context, in *DelChatAdminReq, opts ...grpc.CallOption) (*DelChatAdminResp, error)
	// 获取群成员角色
	GetChatUserRole(ctx context.Context, in *GetChatUsersRoleReq, opts ...grpc.CallOption) (*GetChatUsersRoleResp, error)
	// 获取共同群
	GetTwoUserChats(ctx context.Context, in *GetTwoUserChatsReq, opts ...grpc.CallOption) (*GetTwoUserChatsResp, error)
	// 升级超级群
	UpGradeChat(ctx context.Context, in *UpGradeChatReq, opts ...grpc.CallOption) (*UpGradeChatResp, error)
	// 生成群邀请链接
	CreateChatLink(ctx context.Context, in *CreateChatLinkReq, opts ...grpc.CallOption) (*CreateChatLinkResp, error)
	// 切换邀请规则  是否是管理员可以邀请  还是所有
	SwitchInviteRule(ctx context.Context, in *SwitchInviteRuleReq, opts ...grpc.CallOption) (*SwitchInviteRuleResp, error)
	// 检查是否是加密群
	CheckChatIsEncry(ctx context.Context, in *CheckChatIsEncryReq, opts ...grpc.CallOption) (*CheckChatIsEncryResp, error)
	// --------------------groupinfo 独立后新增接口--------------------------
	GetChatsChannels(ctx context.Context, in *GetChatsChannelsReq, opts ...grpc.CallOption) (*GetChatsChannelsResp, error)
	GetChatsChannelsMap(ctx context.Context, in *GetChatsChannelsMapReq, opts ...grpc.CallOption) (*GetChatsChannelsMapResp, error)
	// 根据userid获取所有的普通群信息
	GetAllChatInfoByUserId(ctx context.Context, in *GetAllChatInfoByUserIdReq, opts ...grpc.CallOption) (*GetAllChatInfoByUserIdResp, error)
	// 获取群成员信息
	GetChatUserInfo(ctx context.Context, in *GetChatUserInfoReq, opts ...grpc.CallOption) (*GetChatUserInfoResp, error)
	// 变更普通群创建者
	SetGroupChatCreator(ctx context.Context, in *SetGroupChatCreatorReq, opts ...grpc.CallOption) (*UpdateChatCommonResp, error)
	// 判断普通群成员是否存在
	CheckUserInChat(ctx context.Context, in *CheckUserInChatReq, opts ...grpc.CallOption) (*CheckUserInChatResp, error)
}

type chatServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServerServiceClient(cc *grpc.ClientConn) ChatServerServiceClient {
	return &chatServerServiceClient{cc}
}

func (c *chatServerServiceClient) CreateNewChat(ctx context.Context, in *CreateChatReq, opts ...grpc.CallOption) (*CreateChatResp, error) {
	out := new(CreateChatResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/CreateNewChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetChatUsersIdById(ctx context.Context, in *GetChatUsersIdReq, opts ...grpc.CallOption) (*GetChatUsersIdResp, error) {
	out := new(GetChatUsersIdResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/GetChatUsersIdById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoResp, error) {
	out := new(GetChatInfoResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/GetChatInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetChatInfo_User(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoResp, error) {
	out := new(GetChatInfoResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/GetChatInfo_User", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) AddChatUser(ctx context.Context, in *AddChatMemberReq, opts ...grpc.CallOption) (*AddChatMemberResp, error) {
	out := new(AddChatMemberResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/AddChatUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) DelChatUser(ctx context.Context, in *DelChatMemberReq, opts ...grpc.CallOption) (*DelChatMemberResp, error) {
	out := new(DelChatMemberResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/DelChatUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) EditChatPhoto(ctx context.Context, in *EditChatPhotoReq, opts ...grpc.CallOption) (*EditChatPhotoResp, error) {
	out := new(EditChatPhotoResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/EditChatPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) EditChatTittle(ctx context.Context, in *EditChatTittleReq, opts ...grpc.CallOption) (*EditChatTittleResp, error) {
	out := new(EditChatTittleResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/EditChatTittle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) AddChatAdmin(ctx context.Context, in *AddChatAdminReq, opts ...grpc.CallOption) (*AddChatAdminResp, error) {
	out := new(AddChatAdminResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/AddChatAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) DelChatAdmin(ctx context.Context, in *DelChatAdminReq, opts ...grpc.CallOption) (*DelChatAdminResp, error) {
	out := new(DelChatAdminResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/DelChatAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetChatUserRole(ctx context.Context, in *GetChatUsersRoleReq, opts ...grpc.CallOption) (*GetChatUsersRoleResp, error) {
	out := new(GetChatUsersRoleResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/GetChatUserRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetTwoUserChats(ctx context.Context, in *GetTwoUserChatsReq, opts ...grpc.CallOption) (*GetTwoUserChatsResp, error) {
	out := new(GetTwoUserChatsResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/GetTwoUserChats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) UpGradeChat(ctx context.Context, in *UpGradeChatReq, opts ...grpc.CallOption) (*UpGradeChatResp, error) {
	out := new(UpGradeChatResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/UpGradeChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) CreateChatLink(ctx context.Context, in *CreateChatLinkReq, opts ...grpc.CallOption) (*CreateChatLinkResp, error) {
	out := new(CreateChatLinkResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/CreateChatLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) SwitchInviteRule(ctx context.Context, in *SwitchInviteRuleReq, opts ...grpc.CallOption) (*SwitchInviteRuleResp, error) {
	out := new(SwitchInviteRuleResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/SwitchInviteRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) CheckChatIsEncry(ctx context.Context, in *CheckChatIsEncryReq, opts ...grpc.CallOption) (*CheckChatIsEncryResp, error) {
	out := new(CheckChatIsEncryResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/CheckChatIsEncry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetChatsChannels(ctx context.Context, in *GetChatsChannelsReq, opts ...grpc.CallOption) (*GetChatsChannelsResp, error) {
	out := new(GetChatsChannelsResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/GetChatsChannels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetChatsChannelsMap(ctx context.Context, in *GetChatsChannelsMapReq, opts ...grpc.CallOption) (*GetChatsChannelsMapResp, error) {
	out := new(GetChatsChannelsMapResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/GetChatsChannelsMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetAllChatInfoByUserId(ctx context.Context, in *GetAllChatInfoByUserIdReq, opts ...grpc.CallOption) (*GetAllChatInfoByUserIdResp, error) {
	out := new(GetAllChatInfoByUserIdResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/GetAllChatInfoByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetChatUserInfo(ctx context.Context, in *GetChatUserInfoReq, opts ...grpc.CallOption) (*GetChatUserInfoResp, error) {
	out := new(GetChatUserInfoResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/GetChatUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) SetGroupChatCreator(ctx context.Context, in *SetGroupChatCreatorReq, opts ...grpc.CallOption) (*UpdateChatCommonResp, error) {
	out := new(UpdateChatCommonResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/SetGroupChatCreator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) CheckUserInChat(ctx context.Context, in *CheckUserInChatReq, opts ...grpc.CallOption) (*CheckUserInChatResp, error) {
	out := new(CheckUserInChatResp)
	err := grpc.Invoke(ctx, "/groupinfo.ChatServerService/CheckUserInChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatServerService service

type ChatServerServiceServer interface {
	// 创建群
	CreateNewChat(context.Context, *CreateChatReq) (*CreateChatResp, error)
	// 通过群Id获取群成员
	GetChatUsersIdById(context.Context, *GetChatUsersIdReq) (*GetChatUsersIdResp, error)
	// 通过群Id 用户Id 获取群基本信息
	GetChatInfo(context.Context, *GetChatInfoReq) (*GetChatInfoResp, error)
	// 通过群Id 用户Id 获取群基本信息,用户可以不在群内
	GetChatInfo_User(context.Context, *GetChatInfoReq) (*GetChatInfoResp, error)
	// 添加群成员
	AddChatUser(context.Context, *AddChatMemberReq) (*AddChatMemberResp, error)
	// 删除群成员
	DelChatUser(context.Context, *DelChatMemberReq) (*DelChatMemberResp, error)
	// 编辑群头像
	EditChatPhoto(context.Context, *EditChatPhotoReq) (*EditChatPhotoResp, error)
	// 编辑群title
	EditChatTittle(context.Context, *EditChatTittleReq) (*EditChatTittleResp, error)
	// 设置管理员
	AddChatAdmin(context.Context, *AddChatAdminReq) (*AddChatAdminResp, error)
	// 取消管理员
	DelChatAdmin(context.Context, *DelChatAdminReq) (*DelChatAdminResp, error)
	// 获取群成员角色
	GetChatUserRole(context.Context, *GetChatUsersRoleReq) (*GetChatUsersRoleResp, error)
	// 获取共同群
	GetTwoUserChats(context.Context, *GetTwoUserChatsReq) (*GetTwoUserChatsResp, error)
	// 升级超级群
	UpGradeChat(context.Context, *UpGradeChatReq) (*UpGradeChatResp, error)
	// 生成群邀请链接
	CreateChatLink(context.Context, *CreateChatLinkReq) (*CreateChatLinkResp, error)
	// 切换邀请规则  是否是管理员可以邀请  还是所有
	SwitchInviteRule(context.Context, *SwitchInviteRuleReq) (*SwitchInviteRuleResp, error)
	// 检查是否是加密群
	CheckChatIsEncry(context.Context, *CheckChatIsEncryReq) (*CheckChatIsEncryResp, error)
	// --------------------groupinfo 独立后新增接口--------------------------
	GetChatsChannels(context.Context, *GetChatsChannelsReq) (*GetChatsChannelsResp, error)
	GetChatsChannelsMap(context.Context, *GetChatsChannelsMapReq) (*GetChatsChannelsMapResp, error)
	// 根据userid获取所有的普通群信息
	GetAllChatInfoByUserId(context.Context, *GetAllChatInfoByUserIdReq) (*GetAllChatInfoByUserIdResp, error)
	// 获取群成员信息
	GetChatUserInfo(context.Context, *GetChatUserInfoReq) (*GetChatUserInfoResp, error)
	// 变更普通群创建者
	SetGroupChatCreator(context.Context, *SetGroupChatCreatorReq) (*UpdateChatCommonResp, error)
	// 判断普通群成员是否存在
	CheckUserInChat(context.Context, *CheckUserInChatReq) (*CheckUserInChatResp, error)
}

func RegisterChatServerServiceServer(s *grpc.Server, srv ChatServerServiceServer) {
	s.RegisterService(&_ChatServerService_serviceDesc, srv)
}

func _ChatServerService_CreateNewChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).CreateNewChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/CreateNewChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).CreateNewChat(ctx, req.(*CreateChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetChatUsersIdById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatUsersIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetChatUsersIdById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/GetChatUsersIdById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetChatUsersIdById(ctx, req.(*GetChatUsersIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetChatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetChatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/GetChatInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetChatInfo(ctx, req.(*GetChatInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetChatInfo_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetChatInfo_User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/GetChatInfo_User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetChatInfo_User(ctx, req.(*GetChatInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_AddChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChatMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).AddChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/AddChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).AddChatUser(ctx, req.(*AddChatMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_DelChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChatMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).DelChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/DelChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).DelChatUser(ctx, req.(*DelChatMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_EditChatPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChatPhotoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).EditChatPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/EditChatPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).EditChatPhoto(ctx, req.(*EditChatPhotoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_EditChatTittle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChatTittleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).EditChatTittle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/EditChatTittle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).EditChatTittle(ctx, req.(*EditChatTittleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_AddChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChatAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).AddChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/AddChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).AddChatAdmin(ctx, req.(*AddChatAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_DelChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChatAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).DelChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/DelChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).DelChatAdmin(ctx, req.(*DelChatAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetChatUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatUsersRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetChatUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/GetChatUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetChatUserRole(ctx, req.(*GetChatUsersRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetTwoUserChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwoUserChatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetTwoUserChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/GetTwoUserChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetTwoUserChats(ctx, req.(*GetTwoUserChatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_UpGradeChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpGradeChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).UpGradeChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/UpGradeChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).UpGradeChat(ctx, req.(*UpGradeChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_CreateChatLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).CreateChatLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/CreateChatLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).CreateChatLink(ctx, req.(*CreateChatLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_SwitchInviteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchInviteRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).SwitchInviteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/SwitchInviteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).SwitchInviteRule(ctx, req.(*SwitchInviteRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_CheckChatIsEncry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChatIsEncryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).CheckChatIsEncry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/CheckChatIsEncry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).CheckChatIsEncry(ctx, req.(*CheckChatIsEncryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetChatsChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatsChannelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetChatsChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/GetChatsChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetChatsChannels(ctx, req.(*GetChatsChannelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetChatsChannelsMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatsChannelsMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetChatsChannelsMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/GetChatsChannelsMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetChatsChannelsMap(ctx, req.(*GetChatsChannelsMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetAllChatInfoByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChatInfoByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetAllChatInfoByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/GetAllChatInfoByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetAllChatInfoByUserId(ctx, req.(*GetAllChatInfoByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetChatUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetChatUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/GetChatUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetChatUserInfo(ctx, req.(*GetChatUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_SetGroupChatCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupChatCreatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).SetGroupChatCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/SetGroupChatCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).SetGroupChatCreator(ctx, req.(*SetGroupChatCreatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_CheckUserInChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserInChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).CheckUserInChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.ChatServerService/CheckUserInChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).CheckUserInChat(ctx, req.(*CheckUserInChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "groupinfo.ChatServerService",
	HandlerType: (*ChatServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewChat",
			Handler:    _ChatServerService_CreateNewChat_Handler,
		},
		{
			MethodName: "GetChatUsersIdById",
			Handler:    _ChatServerService_GetChatUsersIdById_Handler,
		},
		{
			MethodName: "GetChatInfo",
			Handler:    _ChatServerService_GetChatInfo_Handler,
		},
		{
			MethodName: "GetChatInfo_User",
			Handler:    _ChatServerService_GetChatInfo_User_Handler,
		},
		{
			MethodName: "AddChatUser",
			Handler:    _ChatServerService_AddChatUser_Handler,
		},
		{
			MethodName: "DelChatUser",
			Handler:    _ChatServerService_DelChatUser_Handler,
		},
		{
			MethodName: "EditChatPhoto",
			Handler:    _ChatServerService_EditChatPhoto_Handler,
		},
		{
			MethodName: "EditChatTittle",
			Handler:    _ChatServerService_EditChatTittle_Handler,
		},
		{
			MethodName: "AddChatAdmin",
			Handler:    _ChatServerService_AddChatAdmin_Handler,
		},
		{
			MethodName: "DelChatAdmin",
			Handler:    _ChatServerService_DelChatAdmin_Handler,
		},
		{
			MethodName: "GetChatUserRole",
			Handler:    _ChatServerService_GetChatUserRole_Handler,
		},
		{
			MethodName: "GetTwoUserChats",
			Handler:    _ChatServerService_GetTwoUserChats_Handler,
		},
		{
			MethodName: "UpGradeChat",
			Handler:    _ChatServerService_UpGradeChat_Handler,
		},
		{
			MethodName: "CreateChatLink",
			Handler:    _ChatServerService_CreateChatLink_Handler,
		},
		{
			MethodName: "SwitchInviteRule",
			Handler:    _ChatServerService_SwitchInviteRule_Handler,
		},
		{
			MethodName: "CheckChatIsEncry",
			Handler:    _ChatServerService_CheckChatIsEncry_Handler,
		},
		{
			MethodName: "GetChatsChannels",
			Handler:    _ChatServerService_GetChatsChannels_Handler,
		},
		{
			MethodName: "GetChatsChannelsMap",
			Handler:    _ChatServerService_GetChatsChannelsMap_Handler,
		},
		{
			MethodName: "GetAllChatInfoByUserId",
			Handler:    _ChatServerService_GetAllChatInfoByUserId_Handler,
		},
		{
			MethodName: "GetChatUserInfo",
			Handler:    _ChatServerService_GetChatUserInfo_Handler,
		},
		{
			MethodName: "SetGroupChatCreator",
			Handler:    _ChatServerService_SetGroupChatCreator_Handler,
		},
		{
			MethodName: "CheckUserInChat",
			Handler:    _ChatServerService_CheckUserInChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/groupinfo/chatservice.proto",
}

func (m *CreateChatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.CreatorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.CreatorId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n1, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CreateChatResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChatResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChatUsersIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatUsersIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n2, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GetChatUsersIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatUsersIdResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA4 := make([]byte, len(m.UserId)*10)
		var j3 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChatInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.RobotGet {
		dAtA[i] = 0x18
		i++
		if m.RobotGet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n5, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *AddChatMemberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddChatMemberReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.InvitorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.InvitorId))
	}
	if len(m.MemberId) > 0 {
		dAtA7 := make([]byte, len(m.MemberId)*10)
		var j6 int
		for _, num1 := range m.MemberId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Date))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n8, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *AddChatMemberResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddChatMemberResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *DelChatMemberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChatMemberReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.OperatorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.OperatorId))
	}
	if len(m.MemberId) > 0 {
		dAtA10 := make([]byte, len(m.MemberId)*10)
		var j9 int
		for _, num1 := range m.MemberId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n11, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *DelChatMemberResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChatMemberResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *EditChatPhotoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditChatPhotoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.Fullphoto) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Fullphoto)))
		i += copy(dAtA[i:], m.Fullphoto)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n12, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *EditChatPhotoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditChatPhotoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *EditChatTittleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditChatTittleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.Tittle) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Tittle)))
		i += copy(dAtA[i:], m.Tittle)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n13, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *EditChatTittleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditChatTittleResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *AddChatAdminReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddChatAdminReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OperatorId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.OperatorId))
	}
	if m.MemberId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.MemberId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n14, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *AddChatAdminResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddChatAdminResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *DelChatAdminReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChatAdminReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OperatorId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.OperatorId))
	}
	if m.MemberId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.MemberId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n15, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *DelChatAdminResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChatAdminResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChatUsersRoleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatUsersRoleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n16, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *ChatUserRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatUserRole) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvitorId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.InvitorId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.InvitorDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.InvitorDate))
	}
	if m.Role != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Role))
	}
	return i, nil
}

func (m *GetChatUsersRoleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatUsersRoleResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UsersRole) > 0 {
		for _, msg := range m.UsersRole {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChatservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Version))
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChatsChannelsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatsChannelsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Userid))
	}
	if len(m.Chatid) > 0 {
		dAtA18 := make([]byte, len(m.Chatid)*10)
		var j17 int
		for _, num1 := range m.Chatid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j17))
		i += copy(dAtA[i:], dAtA18[:j17])
	}
	if len(m.Channelid) > 0 {
		dAtA20 := make([]byte, len(m.Channelid)*10)
		var j19 int
		for _, num1 := range m.Channelid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j19))
		i += copy(dAtA[i:], dAtA20[:j19])
	}
	if m.ProtocolLayer != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ProtocolLayer))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n21, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *GetChatsChannelsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatsChannelsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, b := range m.Channels {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChatservice(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Chats) > 0 {
		for _, b := range m.Chats {
			dAtA[i] = 0x12
			i++
			i = encodeVarintChatservice(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.NoChats) > 0 {
		dAtA23 := make([]byte, len(m.NoChats)*10)
		var j22 int
		for _, num1 := range m.NoChats {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j22))
		i += copy(dAtA[i:], dAtA23[:j22])
	}
	if len(m.NoChans) > 0 {
		dAtA25 := make([]byte, len(m.NoChans)*10)
		var j24 int
		for _, num1 := range m.NoChans {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j24))
		i += copy(dAtA[i:], dAtA25[:j24])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChatsChannelsMapReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatsChannelsMapReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA27 := make([]byte, len(m.Userid)*10)
		var j26 int
		for _, num1 := range m.Userid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j26))
		i += copy(dAtA[i:], dAtA27[:j26])
	}
	if len(m.Chatid) > 0 {
		dAtA29 := make([]byte, len(m.Chatid)*10)
		var j28 int
		for _, num1 := range m.Chatid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA29[j28] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j28++
			}
			dAtA29[j28] = uint8(num)
			j28++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j28))
		i += copy(dAtA[i:], dAtA29[:j28])
	}
	if len(m.Channelid) > 0 {
		dAtA31 := make([]byte, len(m.Channelid)*10)
		var j30 int
		for _, num1 := range m.Channelid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j30))
		i += copy(dAtA[i:], dAtA31[:j30])
	}
	if m.ProtocolLayer != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ProtocolLayer))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n32, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *GroupBytes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupBytes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, b := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChatservice(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *GetChatsChannelsMapResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatsChannelsMapResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for k, _ := range m.Groups {
			dAtA[i] = 0xa
			i++
			v := m.Groups[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovChatservice(uint64(msgSize))
			}
			mapSize := 1 + sovChatservice(uint64(k)) + msgSize
			i = encodeVarintChatservice(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintChatservice(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintChatservice(dAtA, i, uint64(v.Size()))
				n33, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n33
			}
		}
	}
	if len(m.NoChats) > 0 {
		dAtA35 := make([]byte, len(m.NoChats)*10)
		var j34 int
		for _, num1 := range m.NoChats {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA35[j34] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j34++
			}
			dAtA35[j34] = uint8(num)
			j34++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j34))
		i += copy(dAtA[i:], dAtA35[:j34])
	}
	if len(m.NoChans) > 0 {
		dAtA37 := make([]byte, len(m.NoChans)*10)
		var j36 int
		for _, num1 := range m.NoChans {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA37[j36] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j36++
			}
			dAtA37[j36] = uint8(num)
			j36++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j36))
		i += copy(dAtA[i:], dAtA37[:j36])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetTwoUserChatsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwoUserChatsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UseridOne != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UseridOne))
	}
	if m.UseridTwo != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UseridTwo))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.MaxId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Limit))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n38, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}

func (m *GetTwoUserChatsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwoUserChatsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Count))
	}
	if len(m.ChatIds) > 0 {
		dAtA40 := make([]byte, len(m.ChatIds)*10)
		var j39 int
		for _, num1 := range m.ChatIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA40[j39] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j39++
			}
			dAtA40[j39] = uint8(num)
			j39++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j39))
		i += copy(dAtA[i:], dAtA40[:j39])
	}
	if len(m.SuperChatIds) > 0 {
		dAtA42 := make([]byte, len(m.SuperChatIds)*10)
		var j41 int
		for _, num1 := range m.SuperChatIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA42[j41] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j41++
			}
			dAtA42[j41] = uint8(num)
			j41++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j41))
		i += copy(dAtA[i:], dAtA42[:j41])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *UpGradeChatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpGradeChatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.MigratedMaxId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.MigratedMaxId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n43, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}

func (m *UpGradeChatResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpGradeChatResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SuperchatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.SuperchatId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *CreateChatLinkReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChatLinkReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n44, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}

func (m *CreateChatLinkResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChatLinkResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Link) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *SwitchInviteRuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwitchInviteRuleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.AdminEnable {
		dAtA[i] = 0x18
		i++
		if m.AdminEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n45, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}

func (m *SwitchInviteRuleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwitchInviteRuleResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsModify {
		dAtA[i] = 0x8
		i++
		if m.IsModify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *CheckChatIsEncryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChatIsEncryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n46, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}

func (m *CheckChatIsEncryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChatIsEncryResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Encry {
		dAtA[i] = 0x8
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ChatInfoBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatInfoBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.AdminsEnabled {
		dAtA[i] = 0x10
		i++
		if m.AdminsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Deactivated {
		dAtA[i] = 0x18
		i++
		if m.Deactivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ExportedInvite) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.ExportedInvite)))
		i += copy(dAtA[i:], m.ExportedInvite)
	}
	if m.Encry {
		dAtA[i] = 0x28
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Creator != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Creator))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.FullPhoto) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.FullPhoto)))
		i += copy(dAtA[i:], m.FullPhoto)
	}
	if m.Version != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Version))
	}
	if m.ParticipantsCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ParticipantsCount))
	}
	if m.Date != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Date))
	}
	if len(m.MigrateTo) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.MigrateTo)))
		i += copy(dAtA[i:], m.MigrateTo)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetAllChatInfoByUserIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllChatInfoByUserIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n47, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *GetAllChatInfoByUserIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllChatInfoByUserIdResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChatInfos) > 0 {
		for _, msg := range m.ChatInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChatservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ChatParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatParticipant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.Invitor != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Invitor))
	}
	if m.AdminLevel != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.AdminLevel))
	}
	if m.LeaveFlg != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.LeaveFlg))
	}
	if m.Jointime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Jointime))
	}
	return i, nil
}

func (m *GetChatUserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatUserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n48, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}

func (m *GetChatUserInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatUserInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Chatuserinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Chatuserinfo.Size()))
		n49, err := m.Chatuserinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *SetGroupChatCreatorReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetGroupChatCreatorReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Operator != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Operator))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.IsAdd {
		dAtA[i] = 0x28
		i++
		if m.IsAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n50, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}

func (m *UpdateChatCommonResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChatCommonResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *CheckUserInChatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserInChatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n51, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}

func (m *CheckUserInChatResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserInChatResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State {
		dAtA[i] = 0x8
		i++
		if m.State {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintChatservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateChatReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.CreatorId != 0 {
		n += 1 + sovChatservice(uint64(m.CreatorId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *CreateChatResp) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChatUsersIdReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *GetChatUsersIdResp) Size() (n int) {
	var l int
	_ = l
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChatInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.RobotGet {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *AddChatMemberReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.InvitorId != 0 {
		n += 1 + sovChatservice(uint64(m.InvitorId))
	}
	if len(m.MemberId) > 0 {
		l = 0
		for _, e := range m.MemberId {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.Date != 0 {
		n += 1 + sovChatservice(uint64(m.Date))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *AddChatMemberResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *DelChatMemberReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovChatservice(uint64(m.OperatorId))
	}
	if len(m.MemberId) > 0 {
		l = 0
		for _, e := range m.MemberId {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *DelChatMemberResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *EditChatPhotoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	l = len(m.Fullphoto)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *EditChatPhotoResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *EditChatTittleReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	l = len(m.Tittle)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *EditChatTittleResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *AddChatAdminReq) Size() (n int) {
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovChatservice(uint64(m.OperatorId))
	}
	if m.MemberId != 0 {
		n += 1 + sovChatservice(uint64(m.MemberId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *AddChatAdminResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *DelChatAdminReq) Size() (n int) {
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovChatservice(uint64(m.OperatorId))
	}
	if m.MemberId != 0 {
		n += 1 + sovChatservice(uint64(m.MemberId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *DelChatAdminResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChatUsersRoleReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *ChatUserRole) Size() (n int) {
	var l int
	_ = l
	if m.InvitorId != 0 {
		n += 1 + sovChatservice(uint64(m.InvitorId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.InvitorDate != 0 {
		n += 1 + sovChatservice(uint64(m.InvitorDate))
	}
	if m.Role != 0 {
		n += 1 + sovChatservice(uint64(m.Role))
	}
	return n
}

func (m *GetChatUsersRoleResp) Size() (n int) {
	var l int
	_ = l
	if len(m.UsersRole) > 0 {
		for _, e := range m.UsersRole {
			l = e.Size()
			n += 1 + l + sovChatservice(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 1 + sovChatservice(uint64(m.Version))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChatsChannelsReq) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovChatservice(uint64(m.Userid))
	}
	if len(m.Chatid) > 0 {
		l = 0
		for _, e := range m.Chatid {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if len(m.Channelid) > 0 {
		l = 0
		for _, e := range m.Channelid {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.ProtocolLayer != 0 {
		n += 1 + sovChatservice(uint64(m.ProtocolLayer))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *GetChatsChannelsResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, b := range m.Channels {
			l = len(b)
			n += 1 + l + sovChatservice(uint64(l))
		}
	}
	if len(m.Chats) > 0 {
		for _, b := range m.Chats {
			l = len(b)
			n += 1 + l + sovChatservice(uint64(l))
		}
	}
	if len(m.NoChats) > 0 {
		l = 0
		for _, e := range m.NoChats {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if len(m.NoChans) > 0 {
		l = 0
		for _, e := range m.NoChans {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChatsChannelsMapReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Userid) > 0 {
		l = 0
		for _, e := range m.Userid {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if len(m.Chatid) > 0 {
		l = 0
		for _, e := range m.Chatid {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if len(m.Channelid) > 0 {
		l = 0
		for _, e := range m.Channelid {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.ProtocolLayer != 0 {
		n += 1 + sovChatservice(uint64(m.ProtocolLayer))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *GroupBytes) Size() (n int) {
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, b := range m.Groups {
			l = len(b)
			n += 1 + l + sovChatservice(uint64(l))
		}
	}
	return n
}

func (m *GetChatsChannelsMapResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for k, v := range m.Groups {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovChatservice(uint64(l))
			}
			mapEntrySize := 1 + sovChatservice(uint64(k)) + l
			n += mapEntrySize + 1 + sovChatservice(uint64(mapEntrySize))
		}
	}
	if len(m.NoChats) > 0 {
		l = 0
		for _, e := range m.NoChats {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if len(m.NoChans) > 0 {
		l = 0
		for _, e := range m.NoChans {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetTwoUserChatsReq) Size() (n int) {
	var l int
	_ = l
	if m.UseridOne != 0 {
		n += 1 + sovChatservice(uint64(m.UseridOne))
	}
	if m.UseridTwo != 0 {
		n += 1 + sovChatservice(uint64(m.UseridTwo))
	}
	if m.MaxId != 0 {
		n += 1 + sovChatservice(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovChatservice(uint64(m.Limit))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *GetTwoUserChatsResp) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovChatservice(uint64(m.Count))
	}
	if len(m.ChatIds) > 0 {
		l = 0
		for _, e := range m.ChatIds {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if len(m.SuperChatIds) > 0 {
		l = 0
		for _, e := range m.SuperChatIds {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *UpGradeChatReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.MigratedMaxId != 0 {
		n += 1 + sovChatservice(uint64(m.MigratedMaxId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *UpGradeChatResp) Size() (n int) {
	var l int
	_ = l
	if m.SuperchatId != 0 {
		n += 1 + sovChatservice(uint64(m.SuperchatId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *CreateChatLinkReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *CreateChatLinkResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *SwitchInviteRuleReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.AdminEnable {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *SwitchInviteRuleResp) Size() (n int) {
	var l int
	_ = l
	if m.IsModify {
		n += 2
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *CheckChatIsEncryReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *CheckChatIsEncryResp) Size() (n int) {
	var l int
	_ = l
	if m.Encry {
		n += 2
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ChatInfoBase) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.AdminsEnabled {
		n += 2
	}
	if m.Deactivated {
		n += 2
	}
	l = len(m.ExportedInvite)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Encry {
		n += 2
	}
	if m.Creator != 0 {
		n += 1 + sovChatservice(uint64(m.Creator))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	l = len(m.FullPhoto)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovChatservice(uint64(m.Version))
	}
	if m.ParticipantsCount != 0 {
		n += 1 + sovChatservice(uint64(m.ParticipantsCount))
	}
	if m.Date != 0 {
		n += 1 + sovChatservice(uint64(m.Date))
	}
	l = len(m.MigrateTo)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetAllChatInfoByUserIdReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *GetAllChatInfoByUserIdResp) Size() (n int) {
	var l int
	_ = l
	if len(m.ChatInfos) > 0 {
		for _, e := range m.ChatInfos {
			l = e.Size()
			n += 1 + l + sovChatservice(uint64(l))
		}
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ChatParticipant) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.Invitor != 0 {
		n += 1 + sovChatservice(uint64(m.Invitor))
	}
	if m.AdminLevel != 0 {
		n += 1 + sovChatservice(uint64(m.AdminLevel))
	}
	if m.LeaveFlg != 0 {
		n += 1 + sovChatservice(uint64(m.LeaveFlg))
	}
	if m.Jointime != 0 {
		n += 1 + sovChatservice(uint64(m.Jointime))
	}
	return n
}

func (m *GetChatUserInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *GetChatUserInfoResp) Size() (n int) {
	var l int
	_ = l
	if m.Chatuserinfo != nil {
		l = m.Chatuserinfo.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *SetGroupChatCreatorReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Operator != 0 {
		n += 1 + sovChatservice(uint64(m.Operator))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.IsAdd {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *UpdateChatCommonResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *CheckUserInChatReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *CheckUserInChatResp) Size() (n int) {
	var l int
	_ = l
	if m.State {
		n += 2
	}
	return n
}

func sovChatservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChatservice(x uint64) (n int) {
	return sovChatservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateChatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorId", wireType)
			}
			m.CreatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChatResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChatResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChatResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatUsersIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatUsersIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatUsersIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatUsersIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatUsersIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatUsersIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotGet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RobotGet = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddChatMemberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddChatMemberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddChatMemberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitorId", wireType)
			}
			m.InvitorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvitorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemberId = append(m.MemberId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MemberId = append(m.MemberId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddChatMemberResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddChatMemberResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddChatMemberResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChatMemberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChatMemberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChatMemberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemberId = append(m.MemberId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MemberId = append(m.MemberId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChatMemberResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChatMemberResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChatMemberResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditChatPhotoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditChatPhotoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditChatPhotoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fullphoto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fullphoto = append(m.Fullphoto[:0], dAtA[iNdEx:postIndex]...)
			if m.Fullphoto == nil {
				m.Fullphoto = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditChatPhotoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditChatPhotoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditChatPhotoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditChatTittleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditChatTittleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditChatTittleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tittle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tittle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditChatTittleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditChatTittleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditChatTittleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddChatAdminReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddChatAdminReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddChatAdminReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			m.MemberId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddChatAdminResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddChatAdminResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddChatAdminResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChatAdminReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChatAdminReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChatAdminReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			m.MemberId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChatAdminResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChatAdminResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChatAdminResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatUsersRoleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatUsersRoleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatUsersRoleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatUserRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatUserRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatUserRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitorId", wireType)
			}
			m.InvitorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvitorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitorDate", wireType)
			}
			m.InvitorDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvitorDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatUsersRoleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatUsersRoleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatUsersRoleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsersRole = append(m.UsersRole, &ChatUserRole{})
			if err := m.UsersRole[len(m.UsersRole)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatsChannelsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatsChannelsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatsChannelsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chatid = append(m.Chatid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chatid = append(m.Chatid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channelid = append(m.Channelid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channelid = append(m.Channelid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolLayer", wireType)
			}
			m.ProtocolLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolLayer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatsChannelsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatsChannelsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatsChannelsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, make([]byte, postIndex-iNdEx))
			copy(m.Channels[len(m.Channels)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chats", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chats = append(m.Chats, make([]byte, postIndex-iNdEx))
			copy(m.Chats[len(m.Chats)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoChats = append(m.NoChats, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoChats = append(m.NoChats, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChats", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoChans = append(m.NoChans, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoChans = append(m.NoChans, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChans", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatsChannelsMapReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatsChannelsMapReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatsChannelsMapReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Userid = append(m.Userid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Userid = append(m.Userid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chatid = append(m.Chatid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chatid = append(m.Chatid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channelid = append(m.Channelid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channelid = append(m.Channelid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolLayer", wireType)
			}
			m.ProtocolLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolLayer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupBytes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupBytes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupBytes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, make([]byte, postIndex-iNdEx))
			copy(m.Groups[len(m.Groups)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatsChannelsMapResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatsChannelsMapResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatsChannelsMapResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Groups == nil {
				m.Groups = make(map[int32]*GroupBytes)
			}
			var mapkey int32
			var mapvalue *GroupBytes
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthChatservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthChatservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GroupBytes{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChatservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthChatservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Groups[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoChats = append(m.NoChats, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoChats = append(m.NoChats, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChats", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoChans = append(m.NoChans, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoChans = append(m.NoChans, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChans", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwoUserChatsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTwoUserChatsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTwoUserChatsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseridOne", wireType)
			}
			m.UseridOne = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseridOne |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseridTwo", wireType)
			}
			m.UseridTwo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseridTwo |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwoUserChatsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTwoUserChatsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTwoUserChatsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChatIds = append(m.ChatIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChatIds = append(m.ChatIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatIds", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SuperChatIds = append(m.SuperChatIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SuperChatIds = append(m.SuperChatIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperChatIds", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpGradeChatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpGradeChatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpGradeChatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedMaxId", wireType)
			}
			m.MigratedMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpGradeChatResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpGradeChatResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpGradeChatResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperchatId", wireType)
			}
			m.SuperchatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuperchatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChatLinkReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChatLinkReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChatLinkReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChatLinkResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChatLinkResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChatLinkResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwitchInviteRuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwitchInviteRuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwitchInviteRuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminEnable = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwitchInviteRuleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwitchInviteRuleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwitchInviteRuleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsModify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsModify = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChatIsEncryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChatIsEncryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChatIsEncryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChatIsEncryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChatIsEncryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChatIsEncryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatInfoBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatInfoBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatInfoBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminsEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deactivated = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInvite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInvite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullPhoto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullPhoto = append(m.FullPhoto[:0], dAtA[iNdEx:postIndex]...)
			if m.FullPhoto == nil {
				m.FullPhoto = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrateTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MigrateTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllChatInfoByUserIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllChatInfoByUserIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllChatInfoByUserIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllChatInfoByUserIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllChatInfoByUserIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllChatInfoByUserIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatInfos = append(m.ChatInfos, &ChatInfoBase{})
			if err := m.ChatInfos[len(m.ChatInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invitor", wireType)
			}
			m.Invitor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Invitor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminLevel", wireType)
			}
			m.AdminLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveFlg", wireType)
			}
			m.LeaveFlg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaveFlg |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jointime", wireType)
			}
			m.Jointime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jointime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatUserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatUserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatUserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatUserInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatUserInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatUserInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatuserinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chatuserinfo == nil {
				m.Chatuserinfo = &ChatParticipant{}
			}
			if err := m.Chatuserinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetGroupChatCreatorReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetGroupChatCreatorReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetGroupChatCreatorReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdd = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChatCommonResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChatCommonResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChatCommonResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserInChatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserInChatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserInChatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserInChatResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserInChatResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserInChatResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChatservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChatservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChatservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatservice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/groupinfo/chatservice.proto", fileDescriptorChatservice)
}

var fileDescriptorChatservice = []byte{
	// 2036 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x18, 0x5d, 0x6f, 0x1b, 0x4b,
	0x35, 0x1b, 0xc7, 0x89, 0x7d, 0xec, 0xb8, 0xc9, 0x34, 0xb7, 0x75, 0xb6, 0x4d, 0x6e, 0x6b, 0xb5,
	0xa2, 0xd2, 0x15, 0xa9, 0x14, 0x24, 0x74, 0xe1, 0x01, 0x68, 0xdd, 0x36, 0x0a, 0x34, 0xed, 0xed,
	0x26, 0x11, 0x0f, 0x48, 0x58, 0x1b, 0xef, 0xd8, 0x19, 0xb2, 0xde, 0xd9, 0xbb, 0x33, 0x4e, 0x9a,
	0x07, 0x24, 0x84, 0xc4, 0x13, 0x20, 0x78, 0x47, 0xe2, 0x01, 0x90, 0xe0, 0x05, 0x89, 0x37, 0xe0,
	0x1f, 0x20, 0xf1, 0xc2, 0x4f, 0x40, 0xfd, 0x25, 0x57, 0xf3, 0xb1, 0xeb, 0x99, 0xb5, 0xd7, 0x75,
	0xec, 0x97, 0xfb, 0x64, 0x9f, 0x73, 0x66, 0xcf, 0x9c, 0xaf, 0x39, 0x5f, 0xf0, 0x83, 0x3e, 0xe1,
	0xa1, 0x7f, 0xb6, 0xd7, 0x3d, 0xf7, 0x39, 0xc3, 0xc9, 0x25, 0x4e, 0xf6, 0xc8, 0xe0, 0x29, 0x89,
	0x38, 0x4e, 0x7a, 0x7e, 0x17, 0xc7, 0x09, 0x3d, 0x1b, 0xf6, 0x9e, 0xf6, 0x13, 0x3a, 0x8c, 0x49,
	0xd4, 0xa3, 0x4f, 0xd3, 0x73, 0xa4, 0x8b, 0xf7, 0xe2, 0x84, 0x72, 0x8a, 0xaa, 0x19, 0xd1, 0xfd,
	0x7c, 0x26, 0x66, 0xf1, 0x59, 0x97, 0x0e, 0x06, 0xfa, 0x47, 0x31, 0x71, 0xbf, 0x3f, 0x87, 0x18,
	0xe2, 0x73, 0x1a, 0x29, 0x06, 0xad, 0x3e, 0xac, 0xb7, 0x13, 0xec, 0x73, 0xdc, 0x3e, 0xf7, 0xb9,
	0x87, 0xbf, 0x44, 0x5b, 0x50, 0xe6, 0x84, 0x87, 0xb8, 0xe9, 0x3c, 0x70, 0x9e, 0x54, 0x3d, 0x05,
	0xa0, 0x1d, 0x80, 0xae, 0x38, 0x46, 0x93, 0x0e, 0x09, 0x9a, 0xcb, 0x0f, 0x9c, 0x27, 0x65, 0xaf,
	0xaa, 0x31, 0x87, 0x01, 0x7a, 0x08, 0x2b, 0x2f, 0x42, 0xda, 0x6f, 0x96, 0x1e, 0x38, 0x4f, 0x6a,
	0xfb, 0xeb, 0x7b, 0x5a, 0xc6, 0x17, 0xf8, 0x6c, 0xd8, 0xf7, 0x24, 0xa9, 0x15, 0x40, 0xc3, 0xbc,
	0x88, 0xc5, 0xe8, 0x2e, 0xac, 0x09, 0x71, 0x04, 0x43, 0x47, 0x32, 0x5c, 0x15, 0xe0, 0x61, 0x80,
	0xbe, 0x03, 0x90, 0x60, 0x36, 0x0c, 0x79, 0x97, 0x06, 0x58, 0x5e, 0xd6, 0xd8, 0xdf, 0xde, 0xcb,
	0x94, 0xd8, 0xd3, 0x1c, 0x86, 0x21, 0x6f, 0xd3, 0x00, 0x7b, 0xc6, 0xe1, 0xd6, 0x5b, 0xd8, 0x3c,
	0xc0, 0x5c, 0x1c, 0x38, 0x65, 0x38, 0x61, 0x87, 0x81, 0x50, 0xa9, 0xf0, 0xa2, 0x54, 0xec, 0xe5,
	0x62, 0xb1, 0xcf, 0x01, 0xe5, 0x19, 0x2a, 0xd1, 0x87, 0x0c, 0x27, 0x8a, 0x63, 0x49, 0x70, 0x14,
	0xe0, 0x62, 0xa2, 0xff, 0xd2, 0x81, 0x86, 0xbe, 0xea, 0x30, 0xea, 0xd1, 0xa9, 0x82, 0x1b, 0xf7,
	0x2b, 0x5f, 0xa4, 0xf7, 0xdf, 0x83, 0x6a, 0x42, 0xcf, 0x28, 0xef, 0xf4, 0x31, 0x97, 0xde, 0xa8,
	0x78, 0x15, 0x89, 0x38, 0xc0, 0x3c, 0x53, 0x77, 0xa5, 0x58, 0xdd, 0x3f, 0x3a, 0xb0, 0xf1, 0x2c,
	0x08, 0x84, 0x10, 0x47, 0x78, 0x70, 0x86, 0x93, 0xa9, 0x62, 0xec, 0x00, 0x90, 0xe8, 0x92, 0xd8,
	0x51, 0xa1, 0x31, 0x4a, 0x98, 0x81, 0x64, 0x22, 0xa8, 0x25, 0x69, 0xa7, 0x8a, 0x42, 0x1c, 0x06,
	0x08, 0xc1, 0x4a, 0xe0, 0x73, 0x2c, 0x85, 0x29, 0x7b, 0xf2, 0x7f, 0x26, 0x60, 0xb9, 0x58, 0xc0,
	0x37, 0xb0, 0x99, 0x93, 0x8f, 0xc5, 0x39, 0xab, 0x3b, 0x37, 0xb1, 0xfa, 0x6f, 0x1c, 0xd8, 0x78,
	0x81, 0xc3, 0x19, 0x15, 0xfe, 0x14, 0x6a, 0x34, 0xc6, 0x89, 0xfd, 0x0e, 0x20, 0x45, 0x7d, 0x4c,
	0xe5, 0x19, 0xec, 0xff, 0x06, 0x36, 0x73, 0xd2, 0x2c, 0xa6, 0xde, 0x1f, 0x1c, 0xd8, 0x78, 0x19,
	0x10, 0x19, 0x55, 0x5f, 0x9c, 0x53, 0x3e, 0x67, 0x58, 0x6d, 0x41, 0x39, 0x16, 0x5f, 0xcb, 0x90,
	0xaa, 0x7b, 0x0a, 0x40, 0xf7, 0xa1, 0xda, 0x1b, 0x86, 0xa1, 0xa2, 0xac, 0x48, 0xca, 0x08, 0x31,
	0xa3, 0x33, 0x73, 0xc2, 0x2d, 0xa6, 0xed, 0x2f, 0x9c, 0x11, 0xc3, 0x13, 0xc2, 0x79, 0x88, 0xe7,
	0x53, 0xf7, 0x0e, 0xac, 0x72, 0xf9, 0xb9, 0xd4, 0xb7, 0xea, 0x69, 0x68, 0x16, 0x07, 0xbe, 0x05,
	0x94, 0x97, 0x60, 0x31, 0x9d, 0x7e, 0xed, 0xc0, 0x2d, 0x1d, 0xf1, 0xcf, 0x82, 0x01, 0x89, 0x84,
	0x46, 0xb9, 0x30, 0x74, 0xa6, 0x87, 0xa1, 0xd2, 0x6d, 0x14, 0x86, 0x86, 0x3d, 0x4a, 0x13, 0xd3,
	0xe1, 0x14, 0xf5, 0x8e, 0xb2, 0xf4, 0xa0, 0x85, 0x59, 0x5c, 0x39, 0x1d, 0xef, 0x5f, 0x0f, 0xe5,
	0x6c, 0x61, 0x16, 0x53, 0xee, 0x1d, 0xdc, 0x36, 0x4b, 0x87, 0x47, 0x3f, 0x12, 0x8e, 0x33, 0x54,
	0xa3, 0x9f, 0x43, 0x3d, 0xe5, 0x27, 0xd8, 0xe5, 0x12, 0xb0, 0x93, 0x4f, 0xc0, 0x85, 0x01, 0xfe,
	0x10, 0xea, 0xe9, 0x77, 0x32, 0x09, 0x2b, 0x53, 0xd5, 0x34, 0xee, 0x85, 0xc8, 0xc5, 0x08, 0x56,
	0x12, 0x1a, 0x66, 0xf9, 0x59, 0xfc, 0x6f, 0xfd, 0xd9, 0x81, 0xad, 0x71, 0x95, 0x58, 0x8c, 0xbe,
	0x0d, 0x20, 0x38, 0xb3, 0x8e, 0xfc, 0x44, 0x94, 0xc4, 0xda, 0xfe, 0xdd, 0x9c, 0x95, 0x52, 0xa1,
	0xbd, 0xea, 0x30, 0xfd, 0x16, 0x35, 0x61, 0xed, 0x12, 0x27, 0x8c, 0xd0, 0x48, 0x0b, 0x98, 0x82,
	0x39, 0xbb, 0x97, 0x6e, 0x62, 0xf7, 0xbf, 0x3b, 0x99, 0xe1, 0x59, 0xfb, 0xdc, 0x8f, 0x22, 0x1c,
	0x32, 0x61, 0xf8, 0x3b, 0x20, 0xd5, 0x1f, 0xd9, 0x5d, 0x41, 0x02, 0x2f, 0x3c, 0x20, 0x8d, 0x54,
	0x4a, 0xfd, 0x41, 0x02, 0x91, 0xde, 0xba, 0xea, 0xf3, 0x2c, 0x97, 0x8f, 0x10, 0xe8, 0x31, 0x34,
	0x64, 0x07, 0xd5, 0xa5, 0x61, 0x27, 0xf4, 0xaf, 0x71, 0xa2, 0x2d, 0xb5, 0x9e, 0x62, 0x5f, 0x0b,
	0xe4, 0x2c, 0x59, 0xf0, 0xdf, 0x23, 0xab, 0x1a, 0xf2, 0xb2, 0x18, 0xb9, 0x50, 0xd1, 0xf7, 0x31,
	0x69, 0xd3, 0xba, 0x97, 0xc1, 0x22, 0x23, 0xcb, 0x9e, 0x4f, 0xca, 0x5c, 0xf7, 0x14, 0x80, 0xb6,
	0xa1, 0x12, 0xd1, 0x8e, 0x22, 0x28, 0x89, 0xd7, 0x22, 0xda, 0xb6, 0x49, 0x11, 0x6b, 0xae, 0x18,
	0xa4, 0x88, 0xe5, 0x6c, 0x5d, 0xbe, 0x89, 0xad, 0xff, 0xe1, 0xc0, 0x9d, 0xbc, 0xec, 0x47, 0x7e,
	0x9c, 0x37, 0x77, 0xe9, 0x6b, 0x64, 0xee, 0x47, 0x00, 0x07, 0x42, 0xb5, 0xe7, 0xd7, 0x1c, 0x33,
	0x21, 0x8d, 0x54, 0x34, 0xb5, 0xb0, 0x86, 0x5a, 0x7f, 0x59, 0x86, 0xbb, 0x13, 0x15, 0x63, 0x31,
	0x7a, 0x65, 0x7d, 0x53, 0xdb, 0xdf, 0x33, 0x6c, 0x55, 0xf0, 0xcd, 0x9e, 0xbc, 0x92, 0xbd, 0x8c,
	0x78, 0x72, 0x9d, 0xde, 0x61, 0x79, 0x6b, 0xb9, 0xd8, 0x5b, 0xa5, 0x69, 0xde, 0x5a, 0xb9, 0x81,
	0xb7, 0xdc, 0x2f, 0xa0, 0x66, 0xc8, 0x81, 0x36, 0xa0, 0x74, 0x81, 0xaf, 0xf5, 0x6b, 0x10, 0x7f,
	0xd1, 0x67, 0x50, 0xbe, 0xf4, 0xc3, 0x21, 0xd6, 0x39, 0xe8, 0x13, 0x53, 0xb1, 0xcc, 0x66, 0x9e,
	0x3a, 0xf3, 0xdd, 0xe5, 0xcf, 0x9d, 0xd6, 0x9f, 0x1c, 0xd9, 0x1f, 0x9f, 0x5c, 0x51, 0xf1, 0xbc,
	0xa5, 0xec, 0xc2, 0xf7, 0x3b, 0x2a, 0x1f, 0x90, 0xa0, 0x43, 0x23, 0x9c, 0xe6, 0x25, 0x85, 0x79,
	0x1b, 0x61, 0x83, 0xcc, 0xaf, 0x68, 0xda, 0x37, 0x2a, 0xcc, 0xc9, 0x15, 0x45, 0x9f, 0xc0, 0xea,
	0xc0, 0x7f, 0x3f, 0x4a, 0xe1, 0xe5, 0x81, 0xff, 0x5e, 0x35, 0x21, 0x21, 0x19, 0x10, 0xae, 0x3d,
	0xaf, 0x80, 0x59, 0x3c, 0xfe, 0x57, 0x95, 0x10, 0x6c, 0x21, 0x59, 0x2c, 0xdf, 0x10, 0x1d, 0x46,
	0x5c, 0x0b, 0xa8, 0x00, 0x61, 0x7a, 0x9d, 0x9f, 0x33, 0xaf, 0xa8, 0x04, 0xcd, 0xd0, 0x23, 0x68,
	0xb0, 0x61, 0x8c, 0x93, 0x4e, 0x76, 0x40, 0xf9, 0xa6, 0x2e, 0xb1, 0x6d, 0x7d, 0x6a, 0x7e, 0x07,
	0x89, 0x6e, 0xb4, 0x71, 0x1a, 0x1f, 0x24, 0x7e, 0x90, 0xcd, 0x63, 0xd6, 0xa8, 0x61, 0xe6, 0x70,
	0xa3, 0x8e, 0x2c, 0x5b, 0x75, 0xe4, 0x31, 0x34, 0x06, 0xa4, 0x9f, 0xf8, 0x1c, 0x07, 0x1d, 0x69,
	0x39, 0x6d, 0xc6, 0xf5, 0x14, 0x7b, 0x24, 0xcd, 0x39, 0x43, 0x41, 0xfc, 0x95, 0x03, 0xb7, 0x2c,
	0x71, 0x58, 0x2c, 0x4a, 0x87, 0xd4, 0xd6, 0xae, 0x61, 0xb5, 0x0c, 0xa7, 0x1c, 0xa5, 0x46, 0xc8,
	0x65, 0x73, 0x84, 0x5c, 0x20, 0xa3, 0x9f, 0xc3, 0xe6, 0x68, 0x76, 0x7c, 0x4d, 0xa2, 0x8b, 0xf9,
	0xda, 0xba, 0x19, 0xa6, 0xd4, 0x2e, 0xa0, 0xfc, 0x4d, 0x2c, 0x16, 0xb5, 0x30, 0x24, 0xd1, 0x85,
	0x1e, 0x89, 0xe5, 0xff, 0x45, 0x26, 0xbd, 0xdf, 0x3a, 0x70, 0xfb, 0xf8, 0x8a, 0xf0, 0xee, 0xf9,
	0xa1, 0x28, 0xb8, 0xd8, 0x1b, 0xce, 0xdb, 0xa8, 0x3e, 0x84, 0xba, 0x2f, 0x5a, 0x95, 0x0e, 0x8e,
	0xfc, 0x33, 0xdd, 0xae, 0x56, 0xbc, 0x9a, 0xc4, 0xbd, 0x94, 0xa8, 0x59, 0xdc, 0x1c, 0xc1, 0xd6,
	0xb8, 0x38, 0x2c, 0x16, 0x8d, 0x16, 0x61, 0x9d, 0x01, 0x0d, 0x48, 0x4f, 0x65, 0x89, 0x8a, 0x57,
	0x21, 0xec, 0x48, 0xc2, 0x8b, 0xe8, 0xff, 0x0e, 0x6e, 0xb7, 0xcf, 0x71, 0xf7, 0x42, 0x3e, 0x18,
	0xf6, 0x32, 0xea, 0x26, 0xd7, 0x8b, 0x36, 0x46, 0x7d, 0xd8, 0x1a, 0x67, 0xa9, 0x9e, 0x38, 0x16,
	0x80, 0x16, 0x5f, 0x01, 0x8b, 0xc8, 0xfe, 0xdf, 0x92, 0x6a, 0xc1, 0xc4, 0x88, 0xfe, 0xdc, 0x67,
	0xb8, 0x58, 0xea, 0xc7, 0xd0, 0x90, 0x7e, 0x60, 0xda, 0x39, 0xca, 0x77, 0x15, 0x6f, 0x5d, 0x61,
	0x95, 0x7b, 0x02, 0xf4, 0x00, 0x6a, 0x01, 0xf6, 0xbb, 0x9c, 0x5c, 0x8a, 0xa7, 0x99, 0x7a, 0xd0,
	0x40, 0xa1, 0x6f, 0xc0, 0x2d, 0xfc, 0x3e, 0xa6, 0x89, 0x78, 0xcf, 0xb2, 0x43, 0x53, 0x49, 0xa5,
	0xea, 0x35, 0x52, 0xb4, 0xf2, 0xdb, 0x48, 0xd9, 0xb2, 0xa9, 0x6c, 0x13, 0xd6, 0xf4, 0xa2, 0xa6,
	0xb9, 0xaa, 0x7a, 0x2c, 0x0d, 0x8e, 0xde, 0xe9, 0x9a, 0xf9, 0x4e, 0xb3, 0x59, 0xaf, 0x62, 0xce,
	0x7a, 0x3b, 0x00, 0x62, 0xb4, 0xeb, 0x28, 0x52, 0x75, 0x34, 0xec, 0xc9, 0xc1, 0xcd, 0x6c, 0xe4,
	0xc0, 0x6e, 0xe4, 0xbe, 0x09, 0x28, 0xf6, 0x13, 0x4e, 0xba, 0x24, 0xf6, 0x23, 0xce, 0x3a, 0x2a,
	0xe3, 0xd6, 0xe4, 0xa1, 0x4d, 0x93, 0xd2, 0x96, 0xd9, 0x37, 0x5d, 0x0b, 0xd4, 0x8d, 0xb5, 0xc0,
	0x0e, 0x80, 0x4e, 0x5d, 0x1d, 0x4e, 0x9b, 0xeb, 0x52, 0xd8, 0xaa, 0xc6, 0x9c, 0xd0, 0x9c, 0x37,
	0x1b, 0x37, 0xf1, 0xe6, 0x8f, 0x61, 0xfb, 0x00, 0xf3, 0x67, 0x61, 0x98, 0xb9, 0xf4, 0xfa, 0x54,
	0xbe, 0xac, 0xa9, 0x99, 0x77, 0x86, 0x78, 0xfc, 0x9d, 0x03, 0x6e, 0x11, 0x67, 0xd5, 0x2f, 0xab,
	0xa0, 0x89, 0x7a, 0x94, 0x15, 0xf4, 0xcb, 0x69, 0x84, 0xc9, 0x2e, 0x48, 0x42, 0x6c, 0x91, 0xc0,
	0xfd, 0xa7, 0x03, 0xb7, 0xe4, 0xa0, 0x3d, 0x32, 0xf9, 0x1c, 0x09, 0xa7, 0x09, 0x6b, 0x7a, 0x48,
	0xd0, 0x45, 0x25, 0x05, 0xc5, 0xd8, 0xa6, 0x52, 0x51, 0x88, 0x2f, 0x71, 0xa8, 0x6b, 0x34, 0x48,
	0xd4, 0x6b, 0x81, 0x11, 0xd9, 0x24, 0xc4, 0xfe, 0x25, 0xee, 0xf4, 0x42, 0x55, 0xad, 0xcb, 0x5e,
	0x45, 0x22, 0x5e, 0x85, 0x7d, 0xd1, 0xea, 0xfe, 0x8c, 0x92, 0x88, 0x93, 0x01, 0xd6, 0x51, 0x9a,
	0xc1, 0x2d, 0x62, 0xad, 0xe0, 0xe6, 0xdf, 0x8d, 0xcd, 0x90, 0xfe, 0x7f, 0xef, 0x58, 0x33, 0x9b,
	0xba, 0x8b, 0xc5, 0xe8, 0x7b, 0x50, 0x17, 0xdc, 0x65, 0x8b, 0x12, 0xf5, 0xa8, 0xbc, 0xb1, 0xb6,
	0xef, 0xe6, 0x2c, 0x6f, 0x98, 0xd6, 0xb3, 0xce, 0x2f, 0xe2, 0xb7, 0x7f, 0x39, 0x70, 0xe7, 0x18,
	0x73, 0xd9, 0x7e, 0x89, 0x63, 0x6d, 0xf5, 0x78, 0xa7, 0x9a, 0xc0, 0x85, 0x4a, 0x3a, 0x2f, 0xa7,
	0x03, 0x72, 0x0a, 0x9b, 0xe6, 0x29, 0xe5, 0x97, 0x1e, 0x09, 0x1e, 0xf8, 0xc9, 0x85, 0xce, 0x2e,
	0x1a, 0x12, 0xdd, 0x18, 0x61, 0x1d, 0x3f, 0x08, 0xd2, 0xb4, 0x42, 0xd8, 0xb3, 0x60, 0x64, 0xcd,
	0xd5, 0x62, 0x6b, 0xbe, 0x83, 0xad, 0xd3, 0x38, 0xd0, 0xc5, 0xb4, 0x2d, 0xb7, 0xce, 0x8b, 0xce,
	0xd4, 0x04, 0x90, 0xcc, 0xf3, 0xca, 0x3b, 0xf3, 0xf7, 0x48, 0x33, 0xc4, 0xc2, 0x67, 0xba, 0x4a,
	0x99, 0x57, 0xa9, 0x8a, 0xc2, 0xb8, 0xc8, 0x50, 0xba, 0xa2, 0x48, 0x60, 0xff, 0x6f, 0x0d, 0xd8,
	0x14, 0x47, 0x8e, 0xe5, 0x0e, 0xfe, 0x58, 0x2d, 0xfa, 0xd1, 0xab, 0x74, 0xb9, 0xfe, 0x06, 0x5f,
	0x09, 0x2a, 0x6a, 0x9a, 0x5a, 0x9a, 0x6b, 0x77, 0x77, 0xbb, 0x80, 0xc2, 0xe2, 0xd6, 0x12, 0x3a,
	0xce, 0x2f, 0xa1, 0x9f, 0x5f, 0x1f, 0x06, 0xe8, 0xfe, 0xf8, 0xd8, 0x31, 0x5a, 0x7a, 0xbb, 0x3b,
	0x53, 0xa8, 0x92, 0xe9, 0x2b, 0xa8, 0x19, 0xeb, 0x66, 0xb4, 0x3d, 0x7e, 0x5e, 0x3f, 0x35, 0xd7,
	0x2d, 0x22, 0x49, 0x3e, 0x3f, 0x82, 0x0d, 0x03, 0xd9, 0x11, 0x97, 0xcc, 0xcf, 0xec, 0x87, 0x50,
	0xd3, 0xfb, 0x25, 0xc9, 0xe7, 0x9e, 0x71, 0x38, 0xbf, 0x96, 0x76, 0xef, 0x17, 0x13, 0x53, 0x5e,
	0x7a, 0x9d, 0x33, 0xc6, 0x2b, 0xbf, 0xf1, 0xb5, 0x78, 0x8d, 0x2d, 0x60, 0x5b, 0x4b, 0xe8, 0x35,
	0xac, 0x5b, 0x9b, 0x4a, 0x8b, 0x5b, 0x7e, 0xc1, 0x6a, 0x71, 0x1b, 0x5b, 0x70, 0xb6, 0x96, 0xd0,
	0x5b, 0x68, 0xd8, 0x4b, 0x42, 0x34, 0xe9, 0x8b, 0x6c, 0x83, 0x69, 0xf9, 0x72, 0x7c, 0xbb, 0xd8,
	0x5a, 0x42, 0x87, 0x50, 0x37, 0xd7, 0x72, 0xc8, 0x1d, 0x37, 0x4d, 0xba, 0x5f, 0x73, 0xef, 0x15,
	0xd2, 0x52, 0x56, 0xe6, 0x12, 0xcc, 0x62, 0x95, 0x5b, 0xd5, 0xb9, 0xf7, 0x0a, 0x69, 0x92, 0xd5,
	0x09, 0xdc, 0x32, 0x22, 0x4f, 0x2e, 0x7c, 0x76, 0x0b, 0xa2, 0x52, 0x2f, 0xc7, 0xdc, 0x4f, 0xa7,
	0xd2, 0x25, 0x57, 0x4f, 0x72, 0x35, 0x87, 0x39, 0x94, 0x8b, 0xf5, 0xdc, 0x34, 0xea, 0xee, 0x4e,
	0x23, 0xa7, 0x6f, 0xc1, 0x98, 0x73, 0xac, 0xf0, 0xb5, 0xc7, 0x31, 0x2b, 0x7c, 0x73, 0xa3, 0x91,
	0x72, 0xac, 0x3d, 0x3e, 0x58, 0x8e, 0x1d, 0x9b, 0x61, 0x2c, 0xc7, 0x8e, 0xcf, 0x1d, 0xad, 0x25,
	0x74, 0x0a, 0x1b, 0xf9, 0xd6, 0xdc, 0xb2, 0xe1, 0x84, 0x31, 0xc2, 0xb2, 0xe1, 0xa4, 0xbe, 0x5e,
	0xb1, 0xcd, 0xb7, 0xcb, 0x16, 0xdb, 0x09, 0xed, 0xb9, 0xc5, 0x76, 0x52, 0xaf, 0xad, 0xd8, 0xe6,
	0xf7, 0x1f, 0x93, 0x3c, 0x6e, 0x6e, 0xe5, 0x26, 0x79, 0xdc, 0xda, 0x82, 0xb5, 0x96, 0xd0, 0x4f,
	0xc7, 0xf7, 0x79, 0x47, 0x7e, 0x8c, 0x1e, 0x7e, 0x6c, 0xed, 0xf2, 0xa5, 0xdb, 0xfa, 0xf8, 0x66,
	0xa6, 0xb5, 0x84, 0xfa, 0x72, 0x87, 0x35, 0xa1, 0x57, 0x43, 0x8f, 0xec, 0xef, 0x27, 0x37, 0x8a,
	0xee, 0xe3, 0x19, 0x4e, 0x19, 0xa1, 0x6b, 0x76, 0x17, 0xa8, 0x20, 0x4d, 0xa7, 0xd9, 0x72, 0x77,
	0x1a, 0x59, 0xf2, 0xfc, 0x09, 0xdc, 0x9e, 0xd0, 0x1e, 0x58, 0xc6, 0x99, 0xdc, 0x3e, 0x58, 0x96,
	0x9f, 0x54, 0xa7, 0x95, 0xc0, 0xb9, 0x1a, 0x68, 0x09, 0x3c, 0x5e, 0x8a, 0xdd, 0xdd, 0x69, 0x64,
	0xc1, 0xf3, 0x79, 0xfd, 0x3f, 0x1f, 0x76, 0x9d, 0xff, 0x7d, 0xd8, 0x75, 0xfe, 0xff, 0x61, 0xd7,
	0x39, 0x5b, 0x95, 0xfb, 0xbb, 0x6f, 0x7d, 0x15, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xd5, 0xca, 0x70,
	0x50, 0x1f, 0x00, 0x00,
}
