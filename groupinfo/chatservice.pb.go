//
//普通群接口定义
//作者：hujian
//日期：2017-12-05
//版本：1.0
//修改日期：
//修改日志：
//Date           Desc
//-----------------------------------------------------
//2017-12-04     新建文件,在原有基础上更改
//protoc --gogofast_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: chatservice.proto

package groupinfo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// 创建群的请求数据
type CreateChatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string        `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                           //群名称
	CreatorId int32         `protobuf:"varint,2,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"` //群创建者的id
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                             //日志
}

func (x *CreateChatReq) Reset() {
	*x = CreateChatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatReq) ProtoMessage() {}

func (x *CreateChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatReq.ProtoReflect.Descriptor instead.
func (*CreateChatReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{0}
}

func (x *CreateChatReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateChatReq) GetCreatorId() int32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *CreateChatReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type CreateChatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId     int32          `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                         //普通群的ID
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *CreateChatResp) Reset() {
	*x = CreateChatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatResp) ProtoMessage() {}

func (x *CreateChatResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatResp.ProtoReflect.Descriptor instead.
func (*CreateChatResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{1}
}

func (x *CreateChatResp) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *CreateChatResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 通过群Id获取群成员
type GetChatUsersIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"` //群id
	Dlog   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                    //日志
}

func (x *GetChatUsersIdReq) Reset() {
	*x = GetChatUsersIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatUsersIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatUsersIdReq) ProtoMessage() {}

func (x *GetChatUsersIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatUsersIdReq.ProtoReflect.Descriptor instead.
func (*GetChatUsersIdReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{2}
}

func (x *GetChatUsersIdReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *GetChatUsersIdReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type GetChatUsersIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     []int32        `protobuf:"varint,1,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户id
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *GetChatUsersIdResp) Reset() {
	*x = GetChatUsersIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatUsersIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatUsersIdResp) ProtoMessage() {}

func (x *GetChatUsersIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatUsersIdResp.ProtoReflect.Descriptor instead.
func (*GetChatUsersIdResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{3}
}

func (x *GetChatUsersIdResp) GetUserId() []int32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *GetChatUsersIdResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 通过群Id 用户Id 获取群基本信息
type GetChatInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId   int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`       //群id
	UserId   int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       //用户id
	RobotGet bool          `protobuf:"varint,3,opt,name=robot_get,json=robotGet,proto3" json:"robot_get,omitempty"` //是否是机器人获取
	Dlog     *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                          //日志
}

func (x *GetChatInfoReq) Reset() {
	*x = GetChatInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatInfoReq) ProtoMessage() {}

func (x *GetChatInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatInfoReq.ProtoReflect.Descriptor instead.
func (*GetChatInfoReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{4}
}

func (x *GetChatInfoReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *GetChatInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChatInfoReq) GetRobotGet() bool {
	if x != nil {
		return x.RobotGet
	}
	return false
}

func (x *GetChatInfoReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 添加群成员
type AddChatMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	InvitorId int32         `protobuf:"varint,2,opt,name=invitor_id,json=invitorId,proto3" json:"invitor_id,omitempty"`     //邀请者
	MemberId  []int32       `protobuf:"varint,3,rep,packed,name=member_id,json=memberId,proto3" json:"member_id,omitempty"` //被邀请者id
	Date      int32         `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`                                //群创建时间
	Dlog      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                 //日志
}

func (x *AddChatMemberReq) Reset() {
	*x = AddChatMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddChatMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChatMemberReq) ProtoMessage() {}

func (x *AddChatMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChatMemberReq.ProtoReflect.Descriptor instead.
func (*AddChatMemberReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{5}
}

func (x *AddChatMemberReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *AddChatMemberReq) GetInvitorId() int32 {
	if x != nil {
		return x.InvitorId
	}
	return 0
}

func (x *AddChatMemberReq) GetMemberId() []int32 {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *AddChatMemberReq) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *AddChatMemberReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type AddChatMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *AddChatMemberResp) Reset() {
	*x = AddChatMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddChatMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChatMemberResp) ProtoMessage() {}

func (x *AddChatMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChatMemberResp.ProtoReflect.Descriptor instead.
func (*AddChatMemberResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{6}
}

func (x *AddChatMemberResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 删除群成员
type DelChatMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId     int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OperatorId int32         `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`  //删除操作者
	MemberId   []int32       `protobuf:"varint,3,rep,packed,name=member_id,json=memberId,proto3" json:"member_id,omitempty"` //被删除者id
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                 //日志
}

func (x *DelChatMemberReq) Reset() {
	*x = DelChatMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChatMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChatMemberReq) ProtoMessage() {}

func (x *DelChatMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChatMemberReq.ProtoReflect.Descriptor instead.
func (*DelChatMemberReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{7}
}

func (x *DelChatMemberReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *DelChatMemberReq) GetOperatorId() int32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *DelChatMemberReq) GetMemberId() []int32 {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *DelChatMemberReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type DelChatMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *DelChatMemberResp) Reset() {
	*x = DelChatMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChatMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChatMemberResp) ProtoMessage() {}

func (x *DelChatMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChatMemberResp.ProtoReflect.Descriptor instead.
func (*DelChatMemberResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{8}
}

func (x *DelChatMemberResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 编辑群头像
type EditChatPhotoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Photo     []byte        `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Fullphoto []byte        `protobuf:"bytes,4,opt,name=fullphoto,proto3" json:"fullphoto,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *EditChatPhotoReq) Reset() {
	*x = EditChatPhotoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditChatPhotoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditChatPhotoReq) ProtoMessage() {}

func (x *EditChatPhotoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditChatPhotoReq.ProtoReflect.Descriptor instead.
func (*EditChatPhotoReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{9}
}

func (x *EditChatPhotoReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *EditChatPhotoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *EditChatPhotoReq) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *EditChatPhotoReq) GetFullphoto() []byte {
	if x != nil {
		return x.Fullphoto
	}
	return nil
}

func (x *EditChatPhotoReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type EditChatPhotoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *EditChatPhotoResp) Reset() {
	*x = EditChatPhotoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditChatPhotoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditChatPhotoResp) ProtoMessage() {}

func (x *EditChatPhotoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditChatPhotoResp.ProtoReflect.Descriptor instead.
func (*EditChatPhotoResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{10}
}

func (x *EditChatPhotoResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 编辑群title
type EditChatTittleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Tittle string        `protobuf:"bytes,3,opt,name=tittle,proto3" json:"tittle,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *EditChatTittleReq) Reset() {
	*x = EditChatTittleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditChatTittleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditChatTittleReq) ProtoMessage() {}

func (x *EditChatTittleReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditChatTittleReq.ProtoReflect.Descriptor instead.
func (*EditChatTittleReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{11}
}

func (x *EditChatTittleReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *EditChatTittleReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *EditChatTittleReq) GetTittle() string {
	if x != nil {
		return x.Tittle
	}
	return ""
}

func (x *EditChatTittleReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type EditChatTittleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *EditChatTittleResp) Reset() {
	*x = EditChatTittleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditChatTittleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditChatTittleResp) ProtoMessage() {}

func (x *EditChatTittleResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditChatTittleResp.ProtoReflect.Descriptor instead.
func (*EditChatTittleResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{12}
}

func (x *EditChatTittleResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 设置管理员
type AddChatAdminReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId int32         `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` //邀请者或者踢人的id
	MemberId   int32         `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`       //被设置
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *AddChatAdminReq) Reset() {
	*x = AddChatAdminReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddChatAdminReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChatAdminReq) ProtoMessage() {}

func (x *AddChatAdminReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChatAdminReq.ProtoReflect.Descriptor instead.
func (*AddChatAdminReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{13}
}

func (x *AddChatAdminReq) GetOperatorId() int32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *AddChatAdminReq) GetMemberId() int32 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *AddChatAdminReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *AddChatAdminReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type AddChatAdminResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *AddChatAdminResp) Reset() {
	*x = AddChatAdminResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddChatAdminResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChatAdminResp) ProtoMessage() {}

func (x *AddChatAdminResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChatAdminResp.ProtoReflect.Descriptor instead.
func (*AddChatAdminResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{14}
}

func (x *AddChatAdminResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 取消管理员
type DelChatAdminReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId int32         `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` //邀请者或者踢人的id
	MemberId   int32         `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`       //被取消
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *DelChatAdminReq) Reset() {
	*x = DelChatAdminReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChatAdminReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChatAdminReq) ProtoMessage() {}

func (x *DelChatAdminReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChatAdminReq.ProtoReflect.Descriptor instead.
func (*DelChatAdminReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{15}
}

func (x *DelChatAdminReq) GetOperatorId() int32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *DelChatAdminReq) GetMemberId() int32 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *DelChatAdminReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *DelChatAdminReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type DelChatAdminResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *DelChatAdminResp) Reset() {
	*x = DelChatAdminResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChatAdminResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChatAdminResp) ProtoMessage() {}

func (x *DelChatAdminResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChatAdminResp.ProtoReflect.Descriptor instead.
func (*DelChatAdminResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{16}
}

func (x *DelChatAdminResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获取群成员角色
type GetChatUsersRoleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *GetChatUsersRoleReq) Reset() {
	*x = GetChatUsersRoleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatUsersRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatUsersRoleReq) ProtoMessage() {}

func (x *GetChatUsersRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatUsersRoleReq.ProtoReflect.Descriptor instead.
func (*GetChatUsersRoleReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{17}
}

func (x *GetChatUsersRoleReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *GetChatUsersRoleReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type ChatUserRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitorId   int32 `protobuf:"varint,1,opt,name=invitor_id,json=invitorId,proto3" json:"invitor_id,omitempty"`       // 邀请人id
	UserId      int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                // 群成员id
	InvitorDate int32 `protobuf:"varint,3,opt,name=invitor_date,json=invitorDate,proto3" json:"invitor_date,omitempty"` // 邀请时间
	Role        int32 `protobuf:"varint,4,opt,name=role,proto3" json:"role,omitempty"`                                  // 1: 普通群成员  2: 管理员 3: 群主
}

func (x *ChatUserRole) Reset() {
	*x = ChatUserRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatUserRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatUserRole) ProtoMessage() {}

func (x *ChatUserRole) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatUserRole.ProtoReflect.Descriptor instead.
func (*ChatUserRole) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{18}
}

func (x *ChatUserRole) GetInvitorId() int32 {
	if x != nil {
		return x.InvitorId
	}
	return 0
}

func (x *ChatUserRole) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChatUserRole) GetInvitorDate() int32 {
	if x != nil {
		return x.InvitorDate
	}
	return 0
}

func (x *ChatUserRole) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

type GetChatUsersRoleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsersRole  []*ChatUserRole `protobuf:"bytes,1,rep,name=users_role,json=usersRole,proto3" json:"users_role,omitempty"`
	Version    int32           `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Resultcode ChatResultCode  `protobuf:"varint,3,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *GetChatUsersRoleResp) Reset() {
	*x = GetChatUsersRoleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatUsersRoleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatUsersRoleResp) ProtoMessage() {}

func (x *GetChatUsersRoleResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatUsersRoleResp.ProtoReflect.Descriptor instead.
func (*GetChatUsersRoleResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{19}
}

func (x *GetChatUsersRoleResp) GetUsersRole() []*ChatUserRole {
	if x != nil {
		return x.UsersRole
	}
	return nil
}

func (x *GetChatUsersRoleResp) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetChatUsersRoleResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 批量获取用群、超级群信息的请求
type GetChatsChannelsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32 `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` // 获取方id
	//repeated int32 users     = 2; // 获取用户信息的用户id数组
	Chatid        []int32       `protobuf:"varint,2,rep,packed,name=chatid,proto3" json:"chatid,omitempty"`                             //获取普通群信息的群id数组
	Channelid     []int32       `protobuf:"varint,3,rep,packed,name=channelid,proto3" json:"channelid,omitempty"`                       // 获取超级群用户信息的超级群id数组
	ProtocolLayer int32         `protobuf:"varint,4,opt,name=protocol_layer,json=protocolLayer,proto3" json:"protocol_layer,omitempty"` // 协议层数
	Dlog          *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                         //日志
}

func (x *GetChatsChannelsReq) Reset() {
	*x = GetChatsChannelsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatsChannelsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatsChannelsReq) ProtoMessage() {}

func (x *GetChatsChannelsReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatsChannelsReq.ProtoReflect.Descriptor instead.
func (*GetChatsChannelsReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{20}
}

func (x *GetChatsChannelsReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *GetChatsChannelsReq) GetChatid() []int32 {
	if x != nil {
		return x.Chatid
	}
	return nil
}

func (x *GetChatsChannelsReq) GetChannelid() []int32 {
	if x != nil {
		return x.Channelid
	}
	return nil
}

func (x *GetChatsChannelsReq) GetProtocolLayer() int32 {
	if x != nil {
		return x.ProtocolLayer
	}
	return 0
}

func (x *GetChatsChannelsReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 批量获取群、超级群信息的返回
type GetChatsChannelsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//repeated ChannelInfoBase channels = 1;
	//repeated GetChatInfoResp chats = 2;
	Channels [][]byte `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	//UserInfoArray users = 2;
	Chats      [][]byte       `protobuf:"bytes,2,rep,name=chats,proto3" json:"chats,omitempty"`
	NoChats    []int32        `protobuf:"varint,3,rep,packed,name=no_chats,json=noChats,proto3" json:"no_chats,omitempty"`
	NoChans    []int32        `protobuf:"varint,4,rep,packed,name=no_chans,json=noChans,proto3" json:"no_chans,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,5,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *GetChatsChannelsResp) Reset() {
	*x = GetChatsChannelsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatsChannelsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatsChannelsResp) ProtoMessage() {}

func (x *GetChatsChannelsResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatsChannelsResp.ProtoReflect.Descriptor instead.
func (*GetChatsChannelsResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{21}
}

func (x *GetChatsChannelsResp) GetChannels() [][]byte {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *GetChatsChannelsResp) GetChats() [][]byte {
	if x != nil {
		return x.Chats
	}
	return nil
}

func (x *GetChatsChannelsResp) GetNoChats() []int32 {
	if x != nil {
		return x.NoChats
	}
	return nil
}

func (x *GetChatsChannelsResp) GetNoChans() []int32 {
	if x != nil {
		return x.NoChans
	}
	return nil
}

func (x *GetChatsChannelsResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 批量获取用群、超级群信息的请求
type GetChatsChannelsMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid        []int32       `protobuf:"varint,1,rep,packed,name=userid,proto3" json:"userid,omitempty"`                             // 获取方id
	Chatid        []int32       `protobuf:"varint,2,rep,packed,name=chatid,proto3" json:"chatid,omitempty"`                             //获取普通群信息的群id数组
	Channelid     []int32       `protobuf:"varint,3,rep,packed,name=channelid,proto3" json:"channelid,omitempty"`                       // 获取超级群用户信息的超级群id数组
	ProtocolLayer int32         `protobuf:"varint,4,opt,name=protocol_layer,json=protocolLayer,proto3" json:"protocol_layer,omitempty"` // 协议层数
	Dlog          *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                         //日志
}

func (x *GetChatsChannelsMapReq) Reset() {
	*x = GetChatsChannelsMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatsChannelsMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatsChannelsMapReq) ProtoMessage() {}

func (x *GetChatsChannelsMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatsChannelsMapReq.ProtoReflect.Descriptor instead.
func (*GetChatsChannelsMapReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{22}
}

func (x *GetChatsChannelsMapReq) GetUserid() []int32 {
	if x != nil {
		return x.Userid
	}
	return nil
}

func (x *GetChatsChannelsMapReq) GetChatid() []int32 {
	if x != nil {
		return x.Chatid
	}
	return nil
}

func (x *GetChatsChannelsMapReq) GetChannelid() []int32 {
	if x != nil {
		return x.Channelid
	}
	return nil
}

func (x *GetChatsChannelsMapReq) GetProtocolLayer() int32 {
	if x != nil {
		return x.ProtocolLayer
	}
	return 0
}

func (x *GetChatsChannelsMapReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type GroupBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups [][]byte `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *GroupBytes) Reset() {
	*x = GroupBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupBytes) ProtoMessage() {}

func (x *GroupBytes) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupBytes.ProtoReflect.Descriptor instead.
func (*GroupBytes) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{23}
}

func (x *GroupBytes) GetGroups() [][]byte {
	if x != nil {
		return x.Groups
	}
	return nil
}

// 批量获取群、超级群信息的返回
type GetChatsChannelsMapResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups     map[int32]*GroupBytes `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NoChats    []int32               `protobuf:"varint,2,rep,packed,name=no_chats,json=noChats,proto3" json:"no_chats,omitempty"`
	NoChans    []int32               `protobuf:"varint,3,rep,packed,name=no_chans,json=noChans,proto3" json:"no_chans,omitempty"`
	Resultcode ChatResultCode        `protobuf:"varint,4,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *GetChatsChannelsMapResp) Reset() {
	*x = GetChatsChannelsMapResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatsChannelsMapResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatsChannelsMapResp) ProtoMessage() {}

func (x *GetChatsChannelsMapResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatsChannelsMapResp.ProtoReflect.Descriptor instead.
func (*GetChatsChannelsMapResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{24}
}

func (x *GetChatsChannelsMapResp) GetGroups() map[int32]*GroupBytes {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GetChatsChannelsMapResp) GetNoChats() []int32 {
	if x != nil {
		return x.NoChats
	}
	return nil
}

func (x *GetChatsChannelsMapResp) GetNoChans() []int32 {
	if x != nil {
		return x.NoChans
	}
	return nil
}

func (x *GetChatsChannelsMapResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获用户的共同群
type GetTwoUserChatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseridOne int32         `protobuf:"varint,1,opt,name=userid_one,json=useridOne,proto3" json:"userid_one,omitempty"` // 第一个user id
	UseridTwo int32         `protobuf:"varint,2,opt,name=userid_two,json=useridTwo,proto3" json:"userid_two,omitempty"` // 第二个user id
	MaxId     int32         `protobuf:"varint,3,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`             // 偏移
	Limit     int32         `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`                          // 总数限制
	Dlog      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                             //日志
}

func (x *GetTwoUserChatsReq) Reset() {
	*x = GetTwoUserChatsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTwoUserChatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTwoUserChatsReq) ProtoMessage() {}

func (x *GetTwoUserChatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTwoUserChatsReq.ProtoReflect.Descriptor instead.
func (*GetTwoUserChatsReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{25}
}

func (x *GetTwoUserChatsReq) GetUseridOne() int32 {
	if x != nil {
		return x.UseridOne
	}
	return 0
}

func (x *GetTwoUserChatsReq) GetUseridTwo() int32 {
	if x != nil {
		return x.UseridTwo
	}
	return 0
}

func (x *GetTwoUserChatsReq) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *GetTwoUserChatsReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTwoUserChatsReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 获取用户信息、群、超级群信息的返回
type GetTwoUserChatsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count        int32          `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`                                            //共同群的总数
	ChatIds      []int32        `protobuf:"varint,2,rep,packed,name=chat_ids,json=chatIds,proto3" json:"chat_ids,omitempty"`                  //普通群群信息
	SuperChatIds []int32        `protobuf:"varint,3,rep,packed,name=super_chat_ids,json=superChatIds,proto3" json:"super_chat_ids,omitempty"` //超级群信息
	Resultcode   ChatResultCode `protobuf:"varint,4,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`    //结果码
}

func (x *GetTwoUserChatsResp) Reset() {
	*x = GetTwoUserChatsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTwoUserChatsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTwoUserChatsResp) ProtoMessage() {}

func (x *GetTwoUserChatsResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTwoUserChatsResp.ProtoReflect.Descriptor instead.
func (*GetTwoUserChatsResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{26}
}

func (x *GetTwoUserChatsResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetTwoUserChatsResp) GetChatIds() []int32 {
	if x != nil {
		return x.ChatIds
	}
	return nil
}

func (x *GetTwoUserChatsResp) GetSuperChatIds() []int32 {
	if x != nil {
		return x.SuperChatIds
	}
	return nil
}

func (x *GetTwoUserChatsResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 升级超级群
type UpGradeChatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId        int32         `protobuf:"varint,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MigratedMaxId int32         `protobuf:"varint,3,opt,name=migrated_maxId,json=migratedMaxId,proto3" json:"migrated_maxId,omitempty"`
	Dlog          *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *UpGradeChatReq) Reset() {
	*x = UpGradeChatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpGradeChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpGradeChatReq) ProtoMessage() {}

func (x *UpGradeChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpGradeChatReq.ProtoReflect.Descriptor instead.
func (*UpGradeChatReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{27}
}

func (x *UpGradeChatReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpGradeChatReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *UpGradeChatReq) GetMigratedMaxId() int32 {
	if x != nil {
		return x.MigratedMaxId
	}
	return 0
}

func (x *UpGradeChatReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 升级超级群返回
type UpGradeChatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuperchatId int32          `protobuf:"varint,1,opt,name=superchat_id,json=superchatId,proto3" json:"superchat_id,omitempty"`          //共同群的总数
	Title       string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                          //群信息
	Resultcode  ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *UpGradeChatResp) Reset() {
	*x = UpGradeChatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpGradeChatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpGradeChatResp) ProtoMessage() {}

func (x *UpGradeChatResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpGradeChatResp.ProtoReflect.Descriptor instead.
func (*UpGradeChatResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{28}
}

func (x *UpGradeChatResp) GetSuperchatId() int32 {
	if x != nil {
		return x.SuperchatId
	}
	return 0
}

func (x *UpGradeChatResp) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpGradeChatResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 生成群群链接
type CreateChatLinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *CreateChatLinkReq) Reset() {
	*x = CreateChatLinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatLinkReq) ProtoMessage() {}

func (x *CreateChatLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatLinkReq.ProtoReflect.Descriptor instead.
func (*CreateChatLinkReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{29}
}

func (x *CreateChatLinkReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *CreateChatLinkReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateChatLinkReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 生成群链接
type CreateChatLinkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link       string         `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`                                            //群信息
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *CreateChatLinkResp) Reset() {
	*x = CreateChatLinkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatLinkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatLinkResp) ProtoMessage() {}

func (x *CreateChatLinkResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatLinkResp.ProtoReflect.Descriptor instead.
func (*CreateChatLinkResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{30}
}

func (x *CreateChatLinkResp) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *CreateChatLinkResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 切换邀请规则
type SwitchInviteRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId      int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AdminEnable bool          `protobuf:"varint,3,opt,name=admin_enable,json=adminEnable,proto3" json:"admin_enable,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *SwitchInviteRuleReq) Reset() {
	*x = SwitchInviteRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchInviteRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchInviteRuleReq) ProtoMessage() {}

func (x *SwitchInviteRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchInviteRuleReq.ProtoReflect.Descriptor instead.
func (*SwitchInviteRuleReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{31}
}

func (x *SwitchInviteRuleReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *SwitchInviteRuleReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SwitchInviteRuleReq) GetAdminEnable() bool {
	if x != nil {
		return x.AdminEnable
	}
	return false
}

func (x *SwitchInviteRuleReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 生成群链接
type SwitchInviteRuleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsModify   bool           `protobuf:"varint,1,opt,name=is_modify,json=isModify,proto3" json:"is_modify,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *SwitchInviteRuleResp) Reset() {
	*x = SwitchInviteRuleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchInviteRuleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchInviteRuleResp) ProtoMessage() {}

func (x *SwitchInviteRuleResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchInviteRuleResp.ProtoReflect.Descriptor instead.
func (*SwitchInviteRuleResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{32}
}

func (x *SwitchInviteRuleResp) GetIsModify() bool {
	if x != nil {
		return x.IsModify
	}
	return false
}

func (x *SwitchInviteRuleResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 检查群是否是加密
type CheckChatIsEncryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *CheckChatIsEncryReq) Reset() {
	*x = CheckChatIsEncryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChatIsEncryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChatIsEncryReq) ProtoMessage() {}

func (x *CheckChatIsEncryReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChatIsEncryReq.ProtoReflect.Descriptor instead.
func (*CheckChatIsEncryReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{33}
}

func (x *CheckChatIsEncryReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *CheckChatIsEncryReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 检查群是否是加密
type CheckChatIsEncryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encry      bool           `protobuf:"varint,1,opt,name=encry,proto3" json:"encry,omitempty"`                                         //是否加密
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *CheckChatIsEncryResp) Reset() {
	*x = CheckChatIsEncryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChatIsEncryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChatIsEncryResp) ProtoMessage() {}

func (x *CheckChatIsEncryResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChatIsEncryResp.ProtoReflect.Descriptor instead.
func (*CheckChatIsEncryResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{34}
}

func (x *CheckChatIsEncryResp) GetEncry() bool {
	if x != nil {
		return x.Encry
	}
	return false
}

func (x *CheckChatIsEncryResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -------------groupinfo 独立后新增接口-----------------------
// 普通群信息
type ChatInfoBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId            int32          `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminsEnabled     bool           `protobuf:"varint,2,opt,name=admins_enabled,json=adminsEnabled,proto3" json:"admins_enabled,omitempty"`
	Deactivated       bool           `protobuf:"varint,3,opt,name=deactivated,proto3" json:"deactivated,omitempty"` //群是否活跃
	ExportedInvite    string         `protobuf:"bytes,4,opt,name=exported_invite,json=exportedInvite,proto3" json:"exported_invite,omitempty"`
	Encry             bool           `protobuf:"varint,5,opt,name=encry,proto3" json:"encry,omitempty"`     //是否加密群
	Creator           int32          `protobuf:"varint,6,opt,name=creator,proto3" json:"creator,omitempty"` //创建者的id
	Title             string         `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Photo             []byte         `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`                                                    //群头像
	FullPhoto         []byte         `protobuf:"bytes,9,opt,name=full_photo,json=fullPhoto,proto3" json:"full_photo,omitempty"`                           //群头像
	Version           int32          `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`                                              //群version
	ParticipantsCount int32          `protobuf:"varint,11,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"` //	群成员个数 （邀请人和踢人都要相应变化）
	Date              int32          `protobuf:"varint,12,opt,name=date,proto3" json:"date,omitempty"`                                                    //群创建时间
	MigrateTo         string         `protobuf:"bytes,13,opt,name=migrate_to,json=migrateTo,proto3" json:"migrate_to,omitempty"`                          //升级为超级群的时候默认"" 格式为json格式
	Resultcode        ChatResultCode `protobuf:"varint,14,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`          //结果码
}

func (x *ChatInfoBase) Reset() {
	*x = ChatInfoBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatInfoBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatInfoBase) ProtoMessage() {}

func (x *ChatInfoBase) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatInfoBase.ProtoReflect.Descriptor instead.
func (*ChatInfoBase) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{35}
}

func (x *ChatInfoBase) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatInfoBase) GetAdminsEnabled() bool {
	if x != nil {
		return x.AdminsEnabled
	}
	return false
}

func (x *ChatInfoBase) GetDeactivated() bool {
	if x != nil {
		return x.Deactivated
	}
	return false
}

func (x *ChatInfoBase) GetExportedInvite() string {
	if x != nil {
		return x.ExportedInvite
	}
	return ""
}

func (x *ChatInfoBase) GetEncry() bool {
	if x != nil {
		return x.Encry
	}
	return false
}

func (x *ChatInfoBase) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *ChatInfoBase) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChatInfoBase) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *ChatInfoBase) GetFullPhoto() []byte {
	if x != nil {
		return x.FullPhoto
	}
	return nil
}

func (x *ChatInfoBase) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChatInfoBase) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *ChatInfoBase) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ChatInfoBase) GetMigrateTo() string {
	if x != nil {
		return x.MigrateTo
	}
	return ""
}

func (x *ChatInfoBase) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 获取单个用户的所有普通群
type GetAllChatInfoByUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *GetAllChatInfoByUserIdReq) Reset() {
	*x = GetAllChatInfoByUserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllChatInfoByUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllChatInfoByUserIdReq) ProtoMessage() {}

func (x *GetAllChatInfoByUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllChatInfoByUserIdReq.ProtoReflect.Descriptor instead.
func (*GetAllChatInfoByUserIdReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{36}
}

func (x *GetAllChatInfoByUserIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAllChatInfoByUserIdReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type GetAllChatInfoByUserIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatInfos  []*ChatInfoBase `protobuf:"bytes,1,rep,name=chat_infos,json=chatInfos,proto3" json:"chat_infos,omitempty"`
	Resultcode ChatResultCode  `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *GetAllChatInfoByUserIdResp) Reset() {
	*x = GetAllChatInfoByUserIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllChatInfoByUserIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllChatInfoByUserIdResp) ProtoMessage() {}

func (x *GetAllChatInfoByUserIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllChatInfoByUserIdResp.ProtoReflect.Descriptor instead.
func (*GetAllChatInfoByUserIdResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{37}
}

func (x *GetAllChatInfoByUserIdResp) GetChatInfos() []*ChatInfoBase {
	if x != nil {
		return x.ChatInfos
	}
	return nil
}

func (x *GetAllChatInfoByUserIdResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

type ChatParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId     int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId     int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Invitor    int32 `protobuf:"varint,3,opt,name=invitor,proto3" json:"invitor,omitempty"`
	AdminLevel int32 `protobuf:"varint,4,opt,name=admin_level,json=adminLevel,proto3" json:"admin_level,omitempty"`
	LeaveFlg   int32 `protobuf:"varint,5,opt,name=leave_flg,json=leaveFlg,proto3" json:"leave_flg,omitempty"` //0，正常，1 离开，2被踢
	Jointime   int32 `protobuf:"varint,6,opt,name=jointime,proto3" json:"jointime,omitempty"`
}

func (x *ChatParticipant) Reset() {
	*x = ChatParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatParticipant) ProtoMessage() {}

func (x *ChatParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatParticipant.ProtoReflect.Descriptor instead.
func (*ChatParticipant) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{38}
}

func (x *ChatParticipant) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatParticipant) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChatParticipant) GetInvitor() int32 {
	if x != nil {
		return x.Invitor
	}
	return 0
}

func (x *ChatParticipant) GetAdminLevel() int32 {
	if x != nil {
		return x.AdminLevel
	}
	return 0
}

func (x *ChatParticipant) GetLeaveFlg() int32 {
	if x != nil {
		return x.LeaveFlg
	}
	return 0
}

func (x *ChatParticipant) GetJointime() int32 {
	if x != nil {
		return x.Jointime
	}
	return 0
}

// 获取群成员信息请求
type GetChatUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *GetChatUserInfoReq) Reset() {
	*x = GetChatUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatUserInfoReq) ProtoMessage() {}

func (x *GetChatUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatUserInfoReq.ProtoReflect.Descriptor instead.
func (*GetChatUserInfoReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{39}
}

func (x *GetChatUserInfoReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *GetChatUserInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChatUserInfoReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type GetChatUserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatuserinfo *ChatParticipant `protobuf:"bytes,1,opt,name=chatuserinfo,proto3" json:"chatuserinfo,omitempty"`
	Resultcode   ChatResultCode   `protobuf:"varint,2,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *GetChatUserInfoResp) Reset() {
	*x = GetChatUserInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatUserInfoResp) ProtoMessage() {}

func (x *GetChatUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatUserInfoResp.ProtoReflect.Descriptor instead.
func (*GetChatUserInfoResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{40}
}

func (x *GetChatUserInfoResp) GetChatuserinfo() *ChatParticipant {
	if x != nil {
		return x.Chatuserinfo
	}
	return nil
}

func (x *GetChatUserInfoResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// 变更创建者请求
type SetGroupChatCreatorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId   int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Operator int32         `protobuf:"varint,2,opt,name=operator,proto3" json:"operator,omitempty"`           //操作者id
	UserId   int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //变更者id
	Remark   string        `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`
	IsAdd    bool          `protobuf:"varint,5,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"` //不在群是否添加进群
	Dlog     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog,proto3" json:"Dlog,omitempty"`
}

func (x *SetGroupChatCreatorReq) Reset() {
	*x = SetGroupChatCreatorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupChatCreatorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupChatCreatorReq) ProtoMessage() {}

func (x *SetGroupChatCreatorReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupChatCreatorReq.ProtoReflect.Descriptor instead.
func (*SetGroupChatCreatorReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{41}
}

func (x *SetGroupChatCreatorReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *SetGroupChatCreatorReq) GetOperator() int32 {
	if x != nil {
		return x.Operator
	}
	return 0
}

func (x *SetGroupChatCreatorReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetGroupChatCreatorReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SetGroupChatCreatorReq) GetIsAdd() bool {
	if x != nil {
		return x.IsAdd
	}
	return false
}

func (x *SetGroupChatCreatorReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 通用的更新操作响应
type UpdateChatCommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *UpdateChatCommonResp) Reset() {
	*x = UpdateChatCommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChatCommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChatCommonResp) ProtoMessage() {}

func (x *UpdateChatCommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChatCommonResp.ProtoReflect.Descriptor instead.
func (*UpdateChatCommonResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateChatCommonResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

type CheckUserInChatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId int32         `protobuf:"varint,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"`
}

func (x *CheckUserInChatReq) Reset() {
	*x = CheckUserInChatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserInChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserInChatReq) ProtoMessage() {}

func (x *CheckUserInChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserInChatReq.ProtoReflect.Descriptor instead.
func (*CheckUserInChatReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{43}
}

func (x *CheckUserInChatReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckUserInChatReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *CheckUserInChatReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type CheckUserInChatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State bool `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *CheckUserInChatResp) Reset() {
	*x = CheckUserInChatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserInChatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserInChatResp) ProtoMessage() {}

func (x *CheckUserInChatResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserInChatResp.ProtoReflect.Descriptor instead.
func (*CheckUserInChatResp) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{44}
}

func (x *CheckUserInChatResp) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

var File_chatservice_proto protoreflect.FileDescriptor

var file_chatservice_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x13,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44,
	0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x64,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x4f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x68, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x82, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x47, 0x65,
	0x74, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04,
	0x44, 0x6c, 0x6f, 0x67, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x4e, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04,
	0x44, 0x6c, 0x6f, 0x67, 0x22, 0x4e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c,
	0x6f, 0x67, 0x22, 0x4e, 0x0a, 0x11, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x4f, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04,
	0x44, 0x6c, 0x6f, 0x67, 0x22, 0x4d, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f,
	0x67, 0x22, 0x4d, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x51, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44,
	0x6c, 0x6f, 0x67, 0x22, 0x7d, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68,
	0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x6e, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x24, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xa4, 0x02,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x6e, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0x50, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x77, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x4f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x77, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x54, 0x77, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x54, 0x77, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c,
	0x6f, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x68, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04,
	0x44, 0x6c, 0x6f, 0x67, 0x22, 0x63, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x39,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x6e, 0x0a, 0x14, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x39,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x67, 0x0a, 0x14,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xcb, 0x03, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x8f, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb7,
	0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x66, 0x6c, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x46, 0x6c, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44,
	0x6c, 0x6f, 0x67, 0x22, 0x90, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x74, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x74, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x64,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x64, 0x64, 0x12, 0x21,
	0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f,
	0x67, 0x22, 0x51, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x69, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04,
	0x44, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22,
	0x2b, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x32, 0xa8, 0x0e, 0x0a,
	0x11, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x18, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x64, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x1c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d,
	0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x45, 0x64,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x41,
	0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x77,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x77, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x77, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x55,
	0x70, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x19, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x55, 0x70, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12,
	0x1e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x74, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x74, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4d, 0x61, 0x70,
	0x12, 0x21, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chatservice_proto_rawDescOnce sync.Once
	file_chatservice_proto_rawDescData = file_chatservice_proto_rawDesc
)

func file_chatservice_proto_rawDescGZIP() []byte {
	file_chatservice_proto_rawDescOnce.Do(func() {
		file_chatservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_chatservice_proto_rawDescData)
	})
	return file_chatservice_proto_rawDescData
}

var file_chatservice_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_chatservice_proto_goTypes = []interface{}{
	(*CreateChatReq)(nil),              // 0: groupinfo.CreateChatReq
	(*CreateChatResp)(nil),             // 1: groupinfo.CreateChatResp
	(*GetChatUsersIdReq)(nil),          // 2: groupinfo.GetChatUsersIdReq
	(*GetChatUsersIdResp)(nil),         // 3: groupinfo.GetChatUsersIdResp
	(*GetChatInfoReq)(nil),             // 4: groupinfo.GetChatInfoReq
	(*AddChatMemberReq)(nil),           // 5: groupinfo.AddChatMemberReq
	(*AddChatMemberResp)(nil),          // 6: groupinfo.AddChatMemberResp
	(*DelChatMemberReq)(nil),           // 7: groupinfo.DelChatMemberReq
	(*DelChatMemberResp)(nil),          // 8: groupinfo.DelChatMemberResp
	(*EditChatPhotoReq)(nil),           // 9: groupinfo.EditChatPhotoReq
	(*EditChatPhotoResp)(nil),          // 10: groupinfo.EditChatPhotoResp
	(*EditChatTittleReq)(nil),          // 11: groupinfo.EditChatTittleReq
	(*EditChatTittleResp)(nil),         // 12: groupinfo.EditChatTittleResp
	(*AddChatAdminReq)(nil),            // 13: groupinfo.AddChatAdminReq
	(*AddChatAdminResp)(nil),           // 14: groupinfo.AddChatAdminResp
	(*DelChatAdminReq)(nil),            // 15: groupinfo.DelChatAdminReq
	(*DelChatAdminResp)(nil),           // 16: groupinfo.DelChatAdminResp
	(*GetChatUsersRoleReq)(nil),        // 17: groupinfo.GetChatUsersRoleReq
	(*ChatUserRole)(nil),               // 18: groupinfo.ChatUserRole
	(*GetChatUsersRoleResp)(nil),       // 19: groupinfo.GetChatUsersRoleResp
	(*GetChatsChannelsReq)(nil),        // 20: groupinfo.GetChatsChannelsReq
	(*GetChatsChannelsResp)(nil),       // 21: groupinfo.GetChatsChannelsResp
	(*GetChatsChannelsMapReq)(nil),     // 22: groupinfo.GetChatsChannelsMapReq
	(*GroupBytes)(nil),                 // 23: groupinfo.GroupBytes
	(*GetChatsChannelsMapResp)(nil),    // 24: groupinfo.GetChatsChannelsMapResp
	(*GetTwoUserChatsReq)(nil),         // 25: groupinfo.GetTwoUserChatsReq
	(*GetTwoUserChatsResp)(nil),        // 26: groupinfo.GetTwoUserChatsResp
	(*UpGradeChatReq)(nil),             // 27: groupinfo.UpGradeChatReq
	(*UpGradeChatResp)(nil),            // 28: groupinfo.UpGradeChatResp
	(*CreateChatLinkReq)(nil),          // 29: groupinfo.CreateChatLinkReq
	(*CreateChatLinkResp)(nil),         // 30: groupinfo.CreateChatLinkResp
	(*SwitchInviteRuleReq)(nil),        // 31: groupinfo.SwitchInviteRuleReq
	(*SwitchInviteRuleResp)(nil),       // 32: groupinfo.SwitchInviteRuleResp
	(*CheckChatIsEncryReq)(nil),        // 33: groupinfo.CheckChatIsEncryReq
	(*CheckChatIsEncryResp)(nil),       // 34: groupinfo.CheckChatIsEncryResp
	(*ChatInfoBase)(nil),               // 35: groupinfo.ChatInfoBase
	(*GetAllChatInfoByUserIdReq)(nil),  // 36: groupinfo.GetAllChatInfoByUserIdReq
	(*GetAllChatInfoByUserIdResp)(nil), // 37: groupinfo.GetAllChatInfoByUserIdResp
	(*ChatParticipant)(nil),            // 38: groupinfo.ChatParticipant
	(*GetChatUserInfoReq)(nil),         // 39: groupinfo.GetChatUserInfoReq
	(*GetChatUserInfoResp)(nil),        // 40: groupinfo.GetChatUserInfoResp
	(*SetGroupChatCreatorReq)(nil),     // 41: groupinfo.SetGroupChatCreatorReq
	(*UpdateChatCommonResp)(nil),       // 42: groupinfo.UpdateChatCommonResp
	(*CheckUserInChatReq)(nil),         // 43: groupinfo.CheckUserInChatReq
	(*CheckUserInChatResp)(nil),        // 44: groupinfo.CheckUserInChatResp
	nil,                                // 45: groupinfo.GetChatsChannelsMapResp.GroupsEntry
	(*pbcomm.Debug)(nil),               // 46: pbcomm.Debug
	(ChatResultCode)(0),                // 47: groupinfo.ChatResultCode
	(*GetChatInfoResp)(nil),            // 48: groupinfo.GetChatInfoResp
}
var file_chatservice_proto_depIdxs = []int32{
	46, // 0: groupinfo.CreateChatReq.Dlog:type_name -> pbcomm.Debug
	47, // 1: groupinfo.CreateChatResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 2: groupinfo.GetChatUsersIdReq.Dlog:type_name -> pbcomm.Debug
	47, // 3: groupinfo.GetChatUsersIdResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 4: groupinfo.GetChatInfoReq.Dlog:type_name -> pbcomm.Debug
	46, // 5: groupinfo.AddChatMemberReq.Dlog:type_name -> pbcomm.Debug
	47, // 6: groupinfo.AddChatMemberResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 7: groupinfo.DelChatMemberReq.Dlog:type_name -> pbcomm.Debug
	47, // 8: groupinfo.DelChatMemberResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 9: groupinfo.EditChatPhotoReq.Dlog:type_name -> pbcomm.Debug
	47, // 10: groupinfo.EditChatPhotoResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 11: groupinfo.EditChatTittleReq.Dlog:type_name -> pbcomm.Debug
	47, // 12: groupinfo.EditChatTittleResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 13: groupinfo.AddChatAdminReq.Dlog:type_name -> pbcomm.Debug
	47, // 14: groupinfo.AddChatAdminResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 15: groupinfo.DelChatAdminReq.Dlog:type_name -> pbcomm.Debug
	47, // 16: groupinfo.DelChatAdminResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 17: groupinfo.GetChatUsersRoleReq.Dlog:type_name -> pbcomm.Debug
	18, // 18: groupinfo.GetChatUsersRoleResp.users_role:type_name -> groupinfo.ChatUserRole
	47, // 19: groupinfo.GetChatUsersRoleResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 20: groupinfo.GetChatsChannelsReq.Dlog:type_name -> pbcomm.Debug
	47, // 21: groupinfo.GetChatsChannelsResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 22: groupinfo.GetChatsChannelsMapReq.Dlog:type_name -> pbcomm.Debug
	45, // 23: groupinfo.GetChatsChannelsMapResp.groups:type_name -> groupinfo.GetChatsChannelsMapResp.GroupsEntry
	47, // 24: groupinfo.GetChatsChannelsMapResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 25: groupinfo.GetTwoUserChatsReq.Dlog:type_name -> pbcomm.Debug
	47, // 26: groupinfo.GetTwoUserChatsResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 27: groupinfo.UpGradeChatReq.Dlog:type_name -> pbcomm.Debug
	47, // 28: groupinfo.UpGradeChatResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 29: groupinfo.CreateChatLinkReq.Dlog:type_name -> pbcomm.Debug
	47, // 30: groupinfo.CreateChatLinkResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 31: groupinfo.SwitchInviteRuleReq.Dlog:type_name -> pbcomm.Debug
	47, // 32: groupinfo.SwitchInviteRuleResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 33: groupinfo.CheckChatIsEncryReq.Dlog:type_name -> pbcomm.Debug
	47, // 34: groupinfo.CheckChatIsEncryResp.resultcode:type_name -> groupinfo.ChatResultCode
	47, // 35: groupinfo.ChatInfoBase.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 36: groupinfo.GetAllChatInfoByUserIdReq.Dlog:type_name -> pbcomm.Debug
	35, // 37: groupinfo.GetAllChatInfoByUserIdResp.chat_infos:type_name -> groupinfo.ChatInfoBase
	47, // 38: groupinfo.GetAllChatInfoByUserIdResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 39: groupinfo.GetChatUserInfoReq.Dlog:type_name -> pbcomm.Debug
	38, // 40: groupinfo.GetChatUserInfoResp.chatuserinfo:type_name -> groupinfo.ChatParticipant
	47, // 41: groupinfo.GetChatUserInfoResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 42: groupinfo.SetGroupChatCreatorReq.Dlog:type_name -> pbcomm.Debug
	47, // 43: groupinfo.UpdateChatCommonResp.resultcode:type_name -> groupinfo.ChatResultCode
	46, // 44: groupinfo.CheckUserInChatReq.Dlog:type_name -> pbcomm.Debug
	23, // 45: groupinfo.GetChatsChannelsMapResp.GroupsEntry.value:type_name -> groupinfo.GroupBytes
	0,  // 46: groupinfo.ChatServerService.CreateNewChat:input_type -> groupinfo.CreateChatReq
	2,  // 47: groupinfo.ChatServerService.GetChatUsersIdById:input_type -> groupinfo.GetChatUsersIdReq
	4,  // 48: groupinfo.ChatServerService.GetChatInfo:input_type -> groupinfo.GetChatInfoReq
	4,  // 49: groupinfo.ChatServerService.GetChatInfo_User:input_type -> groupinfo.GetChatInfoReq
	5,  // 50: groupinfo.ChatServerService.AddChatUser:input_type -> groupinfo.AddChatMemberReq
	7,  // 51: groupinfo.ChatServerService.DelChatUser:input_type -> groupinfo.DelChatMemberReq
	9,  // 52: groupinfo.ChatServerService.EditChatPhoto:input_type -> groupinfo.EditChatPhotoReq
	11, // 53: groupinfo.ChatServerService.EditChatTittle:input_type -> groupinfo.EditChatTittleReq
	13, // 54: groupinfo.ChatServerService.AddChatAdmin:input_type -> groupinfo.AddChatAdminReq
	15, // 55: groupinfo.ChatServerService.DelChatAdmin:input_type -> groupinfo.DelChatAdminReq
	17, // 56: groupinfo.ChatServerService.GetChatUserRole:input_type -> groupinfo.GetChatUsersRoleReq
	25, // 57: groupinfo.ChatServerService.GetTwoUserChats:input_type -> groupinfo.GetTwoUserChatsReq
	27, // 58: groupinfo.ChatServerService.UpGradeChat:input_type -> groupinfo.UpGradeChatReq
	29, // 59: groupinfo.ChatServerService.CreateChatLink:input_type -> groupinfo.CreateChatLinkReq
	31, // 60: groupinfo.ChatServerService.SwitchInviteRule:input_type -> groupinfo.SwitchInviteRuleReq
	33, // 61: groupinfo.ChatServerService.CheckChatIsEncry:input_type -> groupinfo.CheckChatIsEncryReq
	20, // 62: groupinfo.ChatServerService.GetChatsChannels:input_type -> groupinfo.GetChatsChannelsReq
	22, // 63: groupinfo.ChatServerService.GetChatsChannelsMap:input_type -> groupinfo.GetChatsChannelsMapReq
	36, // 64: groupinfo.ChatServerService.GetAllChatInfoByUserId:input_type -> groupinfo.GetAllChatInfoByUserIdReq
	39, // 65: groupinfo.ChatServerService.GetChatUserInfo:input_type -> groupinfo.GetChatUserInfoReq
	41, // 66: groupinfo.ChatServerService.SetGroupChatCreator:input_type -> groupinfo.SetGroupChatCreatorReq
	43, // 67: groupinfo.ChatServerService.CheckUserInChat:input_type -> groupinfo.CheckUserInChatReq
	1,  // 68: groupinfo.ChatServerService.CreateNewChat:output_type -> groupinfo.CreateChatResp
	3,  // 69: groupinfo.ChatServerService.GetChatUsersIdById:output_type -> groupinfo.GetChatUsersIdResp
	48, // 70: groupinfo.ChatServerService.GetChatInfo:output_type -> groupinfo.GetChatInfoResp
	48, // 71: groupinfo.ChatServerService.GetChatInfo_User:output_type -> groupinfo.GetChatInfoResp
	6,  // 72: groupinfo.ChatServerService.AddChatUser:output_type -> groupinfo.AddChatMemberResp
	8,  // 73: groupinfo.ChatServerService.DelChatUser:output_type -> groupinfo.DelChatMemberResp
	10, // 74: groupinfo.ChatServerService.EditChatPhoto:output_type -> groupinfo.EditChatPhotoResp
	12, // 75: groupinfo.ChatServerService.EditChatTittle:output_type -> groupinfo.EditChatTittleResp
	14, // 76: groupinfo.ChatServerService.AddChatAdmin:output_type -> groupinfo.AddChatAdminResp
	16, // 77: groupinfo.ChatServerService.DelChatAdmin:output_type -> groupinfo.DelChatAdminResp
	19, // 78: groupinfo.ChatServerService.GetChatUserRole:output_type -> groupinfo.GetChatUsersRoleResp
	26, // 79: groupinfo.ChatServerService.GetTwoUserChats:output_type -> groupinfo.GetTwoUserChatsResp
	28, // 80: groupinfo.ChatServerService.UpGradeChat:output_type -> groupinfo.UpGradeChatResp
	30, // 81: groupinfo.ChatServerService.CreateChatLink:output_type -> groupinfo.CreateChatLinkResp
	32, // 82: groupinfo.ChatServerService.SwitchInviteRule:output_type -> groupinfo.SwitchInviteRuleResp
	34, // 83: groupinfo.ChatServerService.CheckChatIsEncry:output_type -> groupinfo.CheckChatIsEncryResp
	21, // 84: groupinfo.ChatServerService.GetChatsChannels:output_type -> groupinfo.GetChatsChannelsResp
	24, // 85: groupinfo.ChatServerService.GetChatsChannelsMap:output_type -> groupinfo.GetChatsChannelsMapResp
	37, // 86: groupinfo.ChatServerService.GetAllChatInfoByUserId:output_type -> groupinfo.GetAllChatInfoByUserIdResp
	40, // 87: groupinfo.ChatServerService.GetChatUserInfo:output_type -> groupinfo.GetChatUserInfoResp
	42, // 88: groupinfo.ChatServerService.SetGroupChatCreator:output_type -> groupinfo.UpdateChatCommonResp
	44, // 89: groupinfo.ChatServerService.CheckUserInChat:output_type -> groupinfo.CheckUserInChatResp
	68, // [68:90] is the sub-list for method output_type
	46, // [46:68] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_chatservice_proto_init() }
func file_chatservice_proto_init() {
	if File_chatservice_proto != nil {
		return
	}
	file_chatcommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chatservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatUsersIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatUsersIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddChatMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddChatMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChatMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChatMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditChatPhotoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditChatPhotoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditChatTittleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditChatTittleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddChatAdminReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddChatAdminResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChatAdminReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChatAdminResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatUsersRoleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatUserRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatUsersRoleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatsChannelsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatsChannelsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatsChannelsMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatsChannelsMapResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTwoUserChatsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTwoUserChatsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpGradeChatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpGradeChatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatLinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatLinkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchInviteRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchInviteRuleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChatIsEncryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChatIsEncryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatInfoBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllChatInfoByUserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllChatInfoByUserIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatUserInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupChatCreatorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChatCommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserInChatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserInChatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chatservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chatservice_proto_goTypes,
		DependencyIndexes: file_chatservice_proto_depIdxs,
		MessageInfos:      file_chatservice_proto_msgTypes,
	}.Build()
	File_chatservice_proto = out.File
	file_chatservice_proto_rawDesc = nil
	file_chatservice_proto_goTypes = nil
	file_chatservice_proto_depIdxs = nil
}
