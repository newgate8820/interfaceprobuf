// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/groupinfo/chatcommon.proto

/*
Package groupinfo is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/groupinfo/chatcommon.proto

It has these top-level messages:

	ChannelInfoBase
	GetChatInfoResp
*/
package groupinfo

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ChatResultCode int32

const (
	ChatResultCode_Chat_RPC_OK                     ChatResultCode = 0
	ChatResultCode_Chat_ADDUSER3549_EXP            ChatResultCode = 4000
	ChatResultCode_Chat_User_Priavcay              ChatResultCode = 4001
	ChatResultCode_Chat_To_User_Blocked            ChatResultCode = 4002
	ChatResultCode_Chat_User_Blocked               ChatResultCode = 4003
	ChatResultCode_Chat_REPEAT_CREAT               ChatResultCode = 4004
	ChatResultCode_Chat_REPEAT_ADD_USER            ChatResultCode = 4005
	ChatResultCode_Chat_EXCEED_CREATE_MAXNUM       ChatResultCode = 4006
	ChatResultCode_Chat_EXCEED_TODAY_CREATE_MAXNUM ChatResultCode = 4007
	ChatResultCode_Chat_EXCEED_ADD_USER_MAXNUM     ChatResultCode = 4008
	ChatResultCode_Chat_PROHIBIT_ADD_GROUP         ChatResultCode = 4009
	ChatResultCode_Chat_ADMINLEVEL_EXCEPTION       ChatResultCode = 4010
	ChatResultCode_Chat_ALREADYLEFT_EXCEPTION      ChatResultCode = 4011
	ChatResultCode_Chat_GROUP_DISBAND              ChatResultCode = 4012
	ChatResultCode_Chat_GROUP_KICKED               ChatResultCode = 4013
	ChatResultCode_Chat_HOURS_ADD_USER_MAXNUM      ChatResultCode = 4114
	ChatResultCode_Chat_ONCE_ADD_USER_MAXNUM       ChatResultCode = 4115
	//
	ChatResultCode_Chat_UNKNOWN               ChatResultCode = 4100
	ChatResultCode_Chat_PARAMETER_EXCEPTION   ChatResultCode = 4101
	ChatResultCode_Chat_LOGIC_EXCEPTION       ChatResultCode = 4102
	ChatResultCode_Chat_REDIS_EXCEPTION       ChatResultCode = 4103
	ChatResultCode_Chat_DB_EXCEPTION          ChatResultCode = 4104
	ChatResultCode_Chat_AllocId_EXCEPTION     ChatResultCode = 4105
	ChatResultCode_Chat_CallGetUser_EXCEPTION ChatResultCode = 4106
	ChatResultCode_Chat_DB_NORECORD           ChatResultCode = 4107
	ChatResultCode_Chat_Group_NORECORD        ChatResultCode = 4108
)

var ChatResultCode_name = map[int32]string{
	0:    "Chat_RPC_OK",
	4000: "Chat_ADDUSER3549_EXP",
	4001: "Chat_User_Priavcay",
	4002: "Chat_To_User_Blocked",
	4003: "Chat_User_Blocked",
	4004: "Chat_REPEAT_CREAT",
	4005: "Chat_REPEAT_ADD_USER",
	4006: "Chat_EXCEED_CREATE_MAXNUM",
	4007: "Chat_EXCEED_TODAY_CREATE_MAXNUM",
	4008: "Chat_EXCEED_ADD_USER_MAXNUM",
	4009: "Chat_PROHIBIT_ADD_GROUP",
	4010: "Chat_ADMINLEVEL_EXCEPTION",
	4011: "Chat_ALREADYLEFT_EXCEPTION",
	4012: "Chat_GROUP_DISBAND",
	4013: "Chat_GROUP_KICKED",
	4114: "Chat_HOURS_ADD_USER_MAXNUM",
	4115: "Chat_ONCE_ADD_USER_MAXNUM",
	4100: "Chat_UNKNOWN",
	4101: "Chat_PARAMETER_EXCEPTION",
	4102: "Chat_LOGIC_EXCEPTION",
	4103: "Chat_REDIS_EXCEPTION",
	4104: "Chat_DB_EXCEPTION",
	4105: "Chat_AllocId_EXCEPTION",
	4106: "Chat_CallGetUser_EXCEPTION",
	4107: "Chat_DB_NORECORD",
	4108: "Chat_Group_NORECORD",
}
var ChatResultCode_value = map[string]int32{
	"Chat_RPC_OK":                     0,
	"Chat_ADDUSER3549_EXP":            4000,
	"Chat_User_Priavcay":              4001,
	"Chat_To_User_Blocked":            4002,
	"Chat_User_Blocked":               4003,
	"Chat_REPEAT_CREAT":               4004,
	"Chat_REPEAT_ADD_USER":            4005,
	"Chat_EXCEED_CREATE_MAXNUM":       4006,
	"Chat_EXCEED_TODAY_CREATE_MAXNUM": 4007,
	"Chat_EXCEED_ADD_USER_MAXNUM":     4008,
	"Chat_PROHIBIT_ADD_GROUP":         4009,
	"Chat_ADMINLEVEL_EXCEPTION":       4010,
	"Chat_ALREADYLEFT_EXCEPTION":      4011,
	"Chat_GROUP_DISBAND":              4012,
	"Chat_GROUP_KICKED":               4013,
	"Chat_HOURS_ADD_USER_MAXNUM":      4114,
	"Chat_ONCE_ADD_USER_MAXNUM":       4115,
	"Chat_UNKNOWN":                    4100,
	"Chat_PARAMETER_EXCEPTION":        4101,
	"Chat_LOGIC_EXCEPTION":            4102,
	"Chat_REDIS_EXCEPTION":            4103,
	"Chat_DB_EXCEPTION":               4104,
	"Chat_AllocId_EXCEPTION":          4105,
	"Chat_CallGetUser_EXCEPTION":      4106,
	"Chat_DB_NORECORD":                4107,
	"Chat_Group_NORECORD":             4108,
}

func (x ChatResultCode) String() string {
	return proto.EnumName(ChatResultCode_name, int32(x))
}
func (ChatResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorChatcommon, []int{0} }

// 群基础信息
type ChannelInfoBase struct {
	ChannelId         int32  `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash        int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Encry             bool   `protobuf:"varint,3,opt,name=encry,proto3" json:"encry,omitempty"`
	Broadcast         bool   `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Verified          bool   `protobuf:"varint,5,opt,name=verified,proto3" json:"verified,omitempty"`
	Megagroup         bool   `protobuf:"varint,6,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	Restricted        bool   `protobuf:"varint,7,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Democracy         bool   `protobuf:"varint,8,opt,name=democracy,proto3" json:"democracy,omitempty"`
	Signatures        bool   `protobuf:"varint,9,opt,name=signatures,proto3" json:"signatures,omitempty"`
	Min               bool   `protobuf:"varint,10,opt,name=min,proto3" json:"min,omitempty"`
	Title             string `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`
	Username          string `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`
	Photo             string `protobuf:"bytes,13,opt,name=photo,proto3" json:"photo,omitempty"`
	Date              int32  `protobuf:"varint,14,opt,name=date,proto3" json:"date,omitempty"`
	Version           int32  `protobuf:"varint,15,opt,name=version,proto3" json:"version,omitempty"`
	RestrictionReason string `protobuf:"bytes,16,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
	Cluster           int32  `protobuf:"varint,17,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// bool moderator = 18; //是不是主持人
	IsCreator bool `protobuf:"varint,18,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"`
	// bool editor = 19; //是否是管理员
	IsAdmin            bool   `protobuf:"varint,19,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	Left               bool   `protobuf:"varint,20,opt,name=left,proto3" json:"left,omitempty"`
	Kicked             bool   `protobuf:"varint,21,opt,name=kicked,proto3" json:"kicked,omitempty"`
	MigratedFromChatId int32  `protobuf:"varint,22,opt,name=migrated_from_chat_id,json=migratedFromChatId,proto3" json:"migrated_from_chat_id,omitempty"`
	InviteRule         int32  `protobuf:"varint,23,opt,name=invite_rule,json=inviteRule,proto3" json:"invite_rule,omitempty"`
	AdminsCount        int32  `protobuf:"varint,24,opt,name=Admins_count,json=AdminsCount,proto3" json:"Admins_count,omitempty"`
	KickedCount        int32  `protobuf:"varint,25,opt,name=Kicked_count,json=KickedCount,proto3" json:"Kicked_count,omitempty"`
	BannedCount        int32  `protobuf:"varint,26,opt,name=Banned_count,json=BannedCount,proto3" json:"Banned_count,omitempty"`
	BotCount           int32  `protobuf:"varint,27,opt,name=Bot_count,json=BotCount,proto3" json:"Bot_count,omitempty"`
	ParticipantsCount  int32  `protobuf:"varint,28,opt,name=Participants_count,json=ParticipantsCount,proto3" json:"Participants_count,omitempty"`
	IsInChannel        bool   `protobuf:"varint,29,opt,name=IsInChannel,proto3" json:"IsInChannel,omitempty"`
	UtilDate           int32  `protobuf:"varint,30,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ExportedInviteLink string `protobuf:"bytes,31,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"`
	Creator            int32  `protobuf:"varint,32,opt,name=Creator,proto3" json:"Creator,omitempty"`
	About              string `protobuf:"bytes,33,opt,name=About,proto3" json:"About,omitempty"`
	EveryoneQuiet      bool   `protobuf:"varint,34,opt,name=EveryoneQuiet,proto3" json:"EveryoneQuiet,omitempty"`
	PrivateChat        bool   `protobuf:"varint,35,opt,name=PrivateChat,proto3" json:"PrivateChat,omitempty"`
	HiddenPrehistory   bool   `protobuf:"varint,36,opt,name=Hidden_prehistory,json=HiddenPrehistory,proto3" json:"Hidden_prehistory,omitempty"`
	// ----------------------------- 新增
	SlowMode             bool  `protobuf:"varint,37,opt,name=slow_mode,json=slowMode,proto3" json:"slow_mode,omitempty"`
	SlowmodeSeconds      int32 `protobuf:"varint,38,opt,name=slowmode_seconds,json=slowmodeSeconds,proto3" json:"slowmode_seconds,omitempty"`
	SlowmodeNextSendDate int32 `protobuf:"varint,39,opt,name=slowmode_next_send_date,json=slowmodeNextSendDate,proto3" json:"slowmode_next_send_date,omitempty"`
	HasGeo               bool  `protobuf:"varint,40,opt,name=has_geo,json=hasGeo,proto3" json:"has_geo,omitempty"`
	BannedRights         int32 `protobuf:"varint,41,opt,name=Banned_rights,json=BannedRights,proto3" json:"Banned_rights,omitempty"`
	BanAddContact        bool  `protobuf:"varint,42,opt,name=Ban_add_contact,json=BanAddContact,proto3" json:"Ban_add_contact,omitempty"`
	RdpGameMode          int32 `protobuf:"varint,43,opt,name=Rdp_game_mode,json=RdpGameMode,proto3" json:"Rdp_game_mode,omitempty"`
	ParticipantsVer      int32 `protobuf:"varint,44,opt,name=Participants_ver,json=ParticipantsVer,proto3" json:"Participants_ver,omitempty"`
	LinkedChatId         int32 `protobuf:"varint,45,opt,name=Linked_chat_id,json=LinkedChatId,proto3" json:"Linked_chat_id,omitempty"`
}

func (m *ChannelInfoBase) Reset()                    { *m = ChannelInfoBase{} }
func (m *ChannelInfoBase) String() string            { return proto.CompactTextString(m) }
func (*ChannelInfoBase) ProtoMessage()               {}
func (*ChannelInfoBase) Descriptor() ([]byte, []int) { return fileDescriptorChatcommon, []int{0} }

func (m *ChannelInfoBase) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelInfoBase) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ChannelInfoBase) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *ChannelInfoBase) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *ChannelInfoBase) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *ChannelInfoBase) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *ChannelInfoBase) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *ChannelInfoBase) GetDemocracy() bool {
	if m != nil {
		return m.Democracy
	}
	return false
}

func (m *ChannelInfoBase) GetSignatures() bool {
	if m != nil {
		return m.Signatures
	}
	return false
}

func (m *ChannelInfoBase) GetMin() bool {
	if m != nil {
		return m.Min
	}
	return false
}

func (m *ChannelInfoBase) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChannelInfoBase) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ChannelInfoBase) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *ChannelInfoBase) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ChannelInfoBase) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ChannelInfoBase) GetRestrictionReason() string {
	if m != nil {
		return m.RestrictionReason
	}
	return ""
}

func (m *ChannelInfoBase) GetCluster() int32 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *ChannelInfoBase) GetIsCreator() bool {
	if m != nil {
		return m.IsCreator
	}
	return false
}

func (m *ChannelInfoBase) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *ChannelInfoBase) GetLeft() bool {
	if m != nil {
		return m.Left
	}
	return false
}

func (m *ChannelInfoBase) GetKicked() bool {
	if m != nil {
		return m.Kicked
	}
	return false
}

func (m *ChannelInfoBase) GetMigratedFromChatId() int32 {
	if m != nil {
		return m.MigratedFromChatId
	}
	return 0
}

func (m *ChannelInfoBase) GetInviteRule() int32 {
	if m != nil {
		return m.InviteRule
	}
	return 0
}

func (m *ChannelInfoBase) GetAdminsCount() int32 {
	if m != nil {
		return m.AdminsCount
	}
	return 0
}

func (m *ChannelInfoBase) GetKickedCount() int32 {
	if m != nil {
		return m.KickedCount
	}
	return 0
}

func (m *ChannelInfoBase) GetBannedCount() int32 {
	if m != nil {
		return m.BannedCount
	}
	return 0
}

func (m *ChannelInfoBase) GetBotCount() int32 {
	if m != nil {
		return m.BotCount
	}
	return 0
}

func (m *ChannelInfoBase) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *ChannelInfoBase) GetIsInChannel() bool {
	if m != nil {
		return m.IsInChannel
	}
	return false
}

func (m *ChannelInfoBase) GetUtilDate() int32 {
	if m != nil {
		return m.UtilDate
	}
	return 0
}

func (m *ChannelInfoBase) GetExportedInviteLink() string {
	if m != nil {
		return m.ExportedInviteLink
	}
	return ""
}

func (m *ChannelInfoBase) GetCreator() int32 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *ChannelInfoBase) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ChannelInfoBase) GetEveryoneQuiet() bool {
	if m != nil {
		return m.EveryoneQuiet
	}
	return false
}

func (m *ChannelInfoBase) GetPrivateChat() bool {
	if m != nil {
		return m.PrivateChat
	}
	return false
}

func (m *ChannelInfoBase) GetHiddenPrehistory() bool {
	if m != nil {
		return m.HiddenPrehistory
	}
	return false
}

func (m *ChannelInfoBase) GetSlowMode() bool {
	if m != nil {
		return m.SlowMode
	}
	return false
}

func (m *ChannelInfoBase) GetSlowmodeSeconds() int32 {
	if m != nil {
		return m.SlowmodeSeconds
	}
	return 0
}

func (m *ChannelInfoBase) GetSlowmodeNextSendDate() int32 {
	if m != nil {
		return m.SlowmodeNextSendDate
	}
	return 0
}

func (m *ChannelInfoBase) GetHasGeo() bool {
	if m != nil {
		return m.HasGeo
	}
	return false
}

func (m *ChannelInfoBase) GetBannedRights() int32 {
	if m != nil {
		return m.BannedRights
	}
	return 0
}

func (m *ChannelInfoBase) GetBanAddContact() bool {
	if m != nil {
		return m.BanAddContact
	}
	return false
}

func (m *ChannelInfoBase) GetRdpGameMode() int32 {
	if m != nil {
		return m.RdpGameMode
	}
	return 0
}

func (m *ChannelInfoBase) GetParticipantsVer() int32 {
	if m != nil {
		return m.ParticipantsVer
	}
	return 0
}

func (m *ChannelInfoBase) GetLinkedChatId() int32 {
	if m != nil {
		return m.LinkedChatId
	}
	return 0
}

// 普通群的基础信息
type GetChatInfoResp struct {
	ChatId            int32          `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminsEnabled     bool           `protobuf:"varint,2,opt,name=admins_enabled,json=adminsEnabled,proto3" json:"admins_enabled,omitempty"`
	Deactivated       bool           `protobuf:"varint,3,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
	ExportedInvite    string         `protobuf:"bytes,4,opt,name=exported_invite,json=exportedInvite,proto3" json:"exported_invite,omitempty"`
	Encry             bool           `protobuf:"varint,5,opt,name=encry,proto3" json:"encry,omitempty"`
	Creator           int32          `protobuf:"varint,6,opt,name=creator,proto3" json:"creator,omitempty"`
	Title             string         `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Photo             []byte         `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`
	FullPhoto         []byte         `protobuf:"bytes,9,opt,name=full_photo,json=fullPhoto,proto3" json:"full_photo,omitempty"`
	Version           int32          `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	ParticipantsCount int32          `protobuf:"varint,11,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
	Date              int32          `protobuf:"varint,12,opt,name=date,proto3" json:"date,omitempty"`
	MigrateTo         string         `protobuf:"bytes,13,opt,name=migrate_to,json=migrateTo,proto3" json:"migrate_to,omitempty"`
	Resultcode        ChatResultCode `protobuf:"varint,14,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChatInfoResp) Reset()                    { *m = GetChatInfoResp{} }
func (m *GetChatInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetChatInfoResp) ProtoMessage()               {}
func (*GetChatInfoResp) Descriptor() ([]byte, []int) { return fileDescriptorChatcommon, []int{1} }

func (m *GetChatInfoResp) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatInfoResp) GetAdminsEnabled() bool {
	if m != nil {
		return m.AdminsEnabled
	}
	return false
}

func (m *GetChatInfoResp) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

func (m *GetChatInfoResp) GetExportedInvite() string {
	if m != nil {
		return m.ExportedInvite
	}
	return ""
}

func (m *GetChatInfoResp) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *GetChatInfoResp) GetCreator() int32 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *GetChatInfoResp) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GetChatInfoResp) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *GetChatInfoResp) GetFullPhoto() []byte {
	if m != nil {
		return m.FullPhoto
	}
	return nil
}

func (m *GetChatInfoResp) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetChatInfoResp) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *GetChatInfoResp) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *GetChatInfoResp) GetMigrateTo() string {
	if m != nil {
		return m.MigrateTo
	}
	return ""
}

func (m *GetChatInfoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

func init() {
	proto.RegisterType((*ChannelInfoBase)(nil), "groupinfo.ChannelInfoBase")
	proto.RegisterType((*GetChatInfoResp)(nil), "groupinfo.GetChatInfoResp")
	proto.RegisterEnum("groupinfo.ChatResultCode", ChatResultCode_name, ChatResultCode_value)
}
func (m *ChannelInfoBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelInfoBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.AccessHash))
	}
	if m.Encry {
		dAtA[i] = 0x18
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Broadcast {
		dAtA[i] = 0x20
		i++
		if m.Broadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Verified {
		dAtA[i] = 0x28
		i++
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Megagroup {
		dAtA[i] = 0x30
		i++
		if m.Megagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Restricted {
		dAtA[i] = 0x38
		i++
		if m.Restricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Democracy {
		dAtA[i] = 0x40
		i++
		if m.Democracy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Signatures {
		dAtA[i] = 0x48
		i++
		if m.Signatures {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Min {
		dAtA[i] = 0x50
		i++
		if m.Min {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Date != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.Date))
	}
	if m.Version != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.Version))
	}
	if len(m.RestrictionReason) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(len(m.RestrictionReason)))
		i += copy(dAtA[i:], m.RestrictionReason)
	}
	if m.Cluster != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.Cluster))
	}
	if m.IsCreator {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.IsCreator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAdmin {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Left {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.Left {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Kicked {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.Kicked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MigratedFromChatId != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.MigratedFromChatId))
	}
	if m.InviteRule != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.InviteRule))
	}
	if m.AdminsCount != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.BannedCount))
	}
	if m.BotCount != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.BotCount))
	}
	if m.ParticipantsCount != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.ParticipantsCount))
	}
	if m.IsInChannel {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if m.IsInChannel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UtilDate != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.UtilDate))
	}
	if len(m.ExportedInviteLink) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(len(m.ExportedInviteLink)))
		i += copy(dAtA[i:], m.ExportedInviteLink)
	}
	if m.Creator != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.Creator))
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.EveryoneQuiet {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		if m.EveryoneQuiet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PrivateChat {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		if m.PrivateChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HiddenPrehistory {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		if m.HiddenPrehistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SlowMode {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		if m.SlowMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SlowmodeSeconds != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.SlowmodeSeconds))
	}
	if m.SlowmodeNextSendDate != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.SlowmodeNextSendDate))
	}
	if m.HasGeo {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		if m.HasGeo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BannedRights != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.BannedRights))
	}
	if m.BanAddContact {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		if m.BanAddContact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RdpGameMode != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.RdpGameMode))
	}
	if m.ParticipantsVer != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.ParticipantsVer))
	}
	if m.LinkedChatId != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.LinkedChatId))
	}
	return i, nil
}

func (m *GetChatInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.ChatId))
	}
	if m.AdminsEnabled {
		dAtA[i] = 0x10
		i++
		if m.AdminsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Deactivated {
		dAtA[i] = 0x18
		i++
		if m.Deactivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ExportedInvite) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(len(m.ExportedInvite)))
		i += copy(dAtA[i:], m.ExportedInvite)
	}
	if m.Encry {
		dAtA[i] = 0x28
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Creator != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.Creator))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.FullPhoto) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(len(m.FullPhoto)))
		i += copy(dAtA[i:], m.FullPhoto)
	}
	if m.Version != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.Version))
	}
	if m.ParticipantsCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.ParticipantsCount))
	}
	if m.Date != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.Date))
	}
	if len(m.MigrateTo) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(len(m.MigrateTo)))
		i += copy(dAtA[i:], m.MigrateTo)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintChatcommon(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func encodeVarintChatcommon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChannelInfoBase) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChatcommon(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChatcommon(uint64(m.AccessHash))
	}
	if m.Encry {
		n += 2
	}
	if m.Broadcast {
		n += 2
	}
	if m.Verified {
		n += 2
	}
	if m.Megagroup {
		n += 2
	}
	if m.Restricted {
		n += 2
	}
	if m.Democracy {
		n += 2
	}
	if m.Signatures {
		n += 2
	}
	if m.Min {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatcommon(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovChatcommon(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovChatcommon(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovChatcommon(uint64(m.Date))
	}
	if m.Version != 0 {
		n += 1 + sovChatcommon(uint64(m.Version))
	}
	l = len(m.RestrictionReason)
	if l > 0 {
		n += 2 + l + sovChatcommon(uint64(l))
	}
	if m.Cluster != 0 {
		n += 2 + sovChatcommon(uint64(m.Cluster))
	}
	if m.IsCreator {
		n += 3
	}
	if m.IsAdmin {
		n += 3
	}
	if m.Left {
		n += 3
	}
	if m.Kicked {
		n += 3
	}
	if m.MigratedFromChatId != 0 {
		n += 2 + sovChatcommon(uint64(m.MigratedFromChatId))
	}
	if m.InviteRule != 0 {
		n += 2 + sovChatcommon(uint64(m.InviteRule))
	}
	if m.AdminsCount != 0 {
		n += 2 + sovChatcommon(uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		n += 2 + sovChatcommon(uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		n += 2 + sovChatcommon(uint64(m.BannedCount))
	}
	if m.BotCount != 0 {
		n += 2 + sovChatcommon(uint64(m.BotCount))
	}
	if m.ParticipantsCount != 0 {
		n += 2 + sovChatcommon(uint64(m.ParticipantsCount))
	}
	if m.IsInChannel {
		n += 3
	}
	if m.UtilDate != 0 {
		n += 2 + sovChatcommon(uint64(m.UtilDate))
	}
	l = len(m.ExportedInviteLink)
	if l > 0 {
		n += 2 + l + sovChatcommon(uint64(l))
	}
	if m.Creator != 0 {
		n += 2 + sovChatcommon(uint64(m.Creator))
	}
	l = len(m.About)
	if l > 0 {
		n += 2 + l + sovChatcommon(uint64(l))
	}
	if m.EveryoneQuiet {
		n += 3
	}
	if m.PrivateChat {
		n += 3
	}
	if m.HiddenPrehistory {
		n += 3
	}
	if m.SlowMode {
		n += 3
	}
	if m.SlowmodeSeconds != 0 {
		n += 2 + sovChatcommon(uint64(m.SlowmodeSeconds))
	}
	if m.SlowmodeNextSendDate != 0 {
		n += 2 + sovChatcommon(uint64(m.SlowmodeNextSendDate))
	}
	if m.HasGeo {
		n += 3
	}
	if m.BannedRights != 0 {
		n += 2 + sovChatcommon(uint64(m.BannedRights))
	}
	if m.BanAddContact {
		n += 3
	}
	if m.RdpGameMode != 0 {
		n += 2 + sovChatcommon(uint64(m.RdpGameMode))
	}
	if m.ParticipantsVer != 0 {
		n += 2 + sovChatcommon(uint64(m.ParticipantsVer))
	}
	if m.LinkedChatId != 0 {
		n += 2 + sovChatcommon(uint64(m.LinkedChatId))
	}
	return n
}

func (m *GetChatInfoResp) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatcommon(uint64(m.ChatId))
	}
	if m.AdminsEnabled {
		n += 2
	}
	if m.Deactivated {
		n += 2
	}
	l = len(m.ExportedInvite)
	if l > 0 {
		n += 1 + l + sovChatcommon(uint64(l))
	}
	if m.Encry {
		n += 2
	}
	if m.Creator != 0 {
		n += 1 + sovChatcommon(uint64(m.Creator))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatcommon(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovChatcommon(uint64(l))
	}
	l = len(m.FullPhoto)
	if l > 0 {
		n += 1 + l + sovChatcommon(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovChatcommon(uint64(m.Version))
	}
	if m.ParticipantsCount != 0 {
		n += 1 + sovChatcommon(uint64(m.ParticipantsCount))
	}
	if m.Date != 0 {
		n += 1 + sovChatcommon(uint64(m.Date))
	}
	l = len(m.MigrateTo)
	if l > 0 {
		n += 1 + l + sovChatcommon(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatcommon(uint64(m.Resultcode))
	}
	return n
}

func sovChatcommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChatcommon(x uint64) (n int) {
	return sovChatcommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChannelInfoBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelInfoBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelInfoBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Broadcast = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Megagroup = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Democracy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Democracy = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Signatures = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestrictionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCreator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCreator = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Left = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kicked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kicked = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedFromChatId", wireType)
			}
			m.MigratedFromChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedFromChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteRule", wireType)
			}
			m.InviteRule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteRule |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsCount", wireType)
			}
			m.AdminsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedCount", wireType)
			}
			m.KickedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedCount", wireType)
			}
			m.BannedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotCount", wireType)
			}
			m.BotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInChannel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInChannel = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilDate", wireType)
			}
			m.UtilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryoneQuiet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EveryoneQuiet = bool(v != 0)
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrivateChat = bool(v != 0)
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenPrehistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HiddenPrehistory = bool(v != 0)
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SlowMode = bool(v != 0)
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowmodeSeconds", wireType)
			}
			m.SlowmodeSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlowmodeSeconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowmodeNextSendDate", wireType)
			}
			m.SlowmodeNextSendDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlowmodeNextSendDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasGeo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasGeo = bool(v != 0)
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedRights", wireType)
			}
			m.BannedRights = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedRights |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanAddContact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BanAddContact = bool(v != 0)
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdpGameMode", wireType)
			}
			m.RdpGameMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdpGameMode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsVer", wireType)
			}
			m.ParticipantsVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsVer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkedChatId", wireType)
			}
			m.LinkedChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LinkedChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminsEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deactivated = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInvite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInvite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatcommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullPhoto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatcommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullPhoto = append(m.FullPhoto[:0], dAtA[iNdEx:postIndex]...)
			if m.FullPhoto == nil {
				m.FullPhoto = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrateTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MigrateTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatcommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatcommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatcommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChatcommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChatcommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChatcommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChatcommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatcommon   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/groupinfo/chatcommon.proto", fileDescriptorChatcommon)
}

var fileDescriptorChatcommon = []byte{
	// 1433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x56, 0xc9, 0x72, 0x1b, 0x37,
	0x1a, 0x1e, 0x8e, 0xac, 0x85, 0xd0, 0xd6, 0x82, 0x65, 0x09, 0xb2, 0x2c, 0xb1, 0x2d, 0xcb, 0xb6,
	0x6c, 0x8f, 0xe5, 0x99, 0xf1, 0xf8, 0xe0, 0xd3, 0x14, 0x97, 0xb6, 0xc4, 0x92, 0x44, 0x72, 0x5a,
	0x94, 0xc7, 0x3e, 0x75, 0x41, 0xdd, 0x20, 0x89, 0x52, 0x13, 0x60, 0x01, 0x20, 0x63, 0xdd, 0xb3,
	0x27, 0xa7, 0xe4, 0x05, 0xb2, 0xef, 0x79, 0x8f, 0x5c, 0x92, 0xca, 0x23, 0xa4, 0x9c, 0x17, 0x49,
	0x01, 0xe8, 0x6e, 0xb6, 0xac, 0x5b, 0xff, 0xdf, 0xf7, 0xfd, 0xe0, 0xbf, 0xe1, 0x07, 0xc1, 0x7f,
	0xbb, 0x54, 0xc5, 0xf8, 0x74, 0x37, 0xec, 0x61, 0x25, 0x89, 0x18, 0x11, 0xb1, 0x4b, 0xfb, 0x8f,
	0x28, 0x53, 0x44, 0x74, 0x70, 0x48, 0x06, 0x82, 0x9f, 0x0e, 0x3b, 0x8f, 0xba, 0x82, 0x0f, 0x07,
	0x94, 0x75, 0xf8, 0x23, 0xad, 0x0b, 0x79, 0xbf, 0xcf, 0xd9, 0xee, 0x40, 0x70, 0xc5, 0x61, 0x31,
	0xe3, 0xb6, 0x7e, 0x9d, 0x05, 0x8b, 0xd5, 0x1e, 0x66, 0x8c, 0xc4, 0x75, 0xd6, 0xe1, 0x15, 0x2c,
	0x09, 0xdc, 0x00, 0x20, 0xb4, 0x50, 0x40, 0x23, 0x54, 0x70, 0x0b, 0x3b, 0x93, 0x7e, 0x31, 0x41,
	0xea, 0x11, 0x2c, 0x81, 0x59, 0x1c, 0x86, 0x44, 0xca, 0xa0, 0x87, 0x65, 0x0f, 0xfd, 0xdd, 0x2d,
	0xec, 0x4c, 0xf8, 0xc0, 0x42, 0xfb, 0x58, 0xf6, 0xe0, 0x32, 0x98, 0x24, 0x2c, 0x14, 0xe7, 0x68,
	0xc2, 0x2d, 0xec, 0xcc, 0xf8, 0xd6, 0x80, 0x37, 0x40, 0xf1, 0x54, 0x70, 0x1c, 0x85, 0x58, 0x2a,
	0x74, 0xc5, 0x30, 0x63, 0x00, 0x5e, 0x07, 0x33, 0x23, 0x22, 0x68, 0x87, 0x92, 0x08, 0x4d, 0x1a,
	0x32, 0xb3, 0xb5, 0x67, 0x9f, 0x74, 0xb1, 0x09, 0x1a, 0x4d, 0x59, 0xcf, 0x0c, 0x80, 0x9b, 0x00,
	0x08, 0x22, 0x95, 0xa0, 0xa1, 0x22, 0x11, 0x9a, 0x36, 0x74, 0x0e, 0xd1, 0xde, 0x11, 0xe9, 0xf3,
	0x50, 0xe0, 0xf0, 0x1c, 0xcd, 0x58, 0xef, 0x0c, 0xd0, 0xde, 0x92, 0x76, 0x19, 0x56, 0x43, 0x41,
	0x24, 0x2a, 0x5a, 0xef, 0x31, 0x02, 0x1d, 0x30, 0xd1, 0xa7, 0x0c, 0x01, 0x43, 0xe8, 0x4f, 0x9d,
	0x9d, 0xa2, 0x2a, 0x26, 0x68, 0xd6, 0x2d, 0xec, 0x14, 0x7d, 0x6b, 0xe8, 0xf8, 0x87, 0x92, 0x08,
	0x86, 0xfb, 0x04, 0xcd, 0x19, 0x22, 0xb3, 0xb5, 0xc7, 0xa0, 0xc7, 0x15, 0x47, 0xf3, 0xd6, 0xc3,
	0x18, 0x10, 0x82, 0x2b, 0x11, 0x56, 0x04, 0x2d, 0x98, 0xfa, 0x9a, 0x6f, 0x88, 0xc0, 0xf4, 0x88,
	0x08, 0x49, 0x39, 0x43, 0x8b, 0x06, 0x4e, 0x4d, 0xf8, 0x10, 0xc0, 0x34, 0x27, 0xca, 0x59, 0x20,
	0x08, 0x96, 0x9c, 0x21, 0xc7, 0x1c, 0xb8, 0x94, 0x63, 0x7c, 0x43, 0xe8, 0x83, 0xc2, 0x78, 0x28,
	0x15, 0x11, 0x68, 0xc9, 0x1e, 0x94, 0x98, 0xba, 0xb9, 0x54, 0x06, 0xa1, 0x20, 0x58, 0x71, 0x81,
	0xa0, 0xad, 0x07, 0x95, 0x55, 0x0b, 0xc0, 0x35, 0x30, 0x43, 0x65, 0x80, 0x23, 0x9d, 0xf4, 0x55,
	0x43, 0x4e, 0x53, 0x59, 0xd6, 0xa6, 0x0e, 0x38, 0x26, 0x1d, 0x85, 0x96, 0x0d, 0x6c, 0xbe, 0xe1,
	0x0a, 0x98, 0x3a, 0xa3, 0xe1, 0x19, 0x89, 0xd0, 0x35, 0x83, 0x26, 0x16, 0xfc, 0x17, 0xb8, 0xd6,
	0xa7, 0x5d, 0x81, 0x15, 0x89, 0x82, 0x8e, 0xe0, 0xfd, 0x40, 0xcf, 0xa0, 0x9e, 0xa6, 0x15, 0x13,
	0x0d, 0x4c, 0xc9, 0x67, 0x82, 0xf7, 0xab, 0x3d, 0xac, 0xec, 0x58, 0x51, 0x36, 0xa2, 0x8a, 0x04,
	0x62, 0x18, 0x13, 0xb4, 0x6a, 0x84, 0xc0, 0x42, 0xfe, 0x30, 0x26, 0xf0, 0x26, 0x98, 0x33, 0x81,
	0xc8, 0x20, 0xe4, 0x43, 0xa6, 0x10, 0x32, 0x8a, 0x59, 0x8b, 0x55, 0x35, 0xa4, 0x25, 0x07, 0x26,
	0x80, 0x44, 0xb2, 0x66, 0x25, 0x16, 0xcb, 0x24, 0x15, 0x3d, 0xc9, 0xa9, 0xe4, 0xba, 0x95, 0x58,
	0xcc, 0x4a, 0xd6, 0x41, 0xb1, 0xc2, 0x55, 0xc2, 0xaf, 0x1b, 0x7e, 0xa6, 0xc2, 0x95, 0x25, 0x1f,
	0x02, 0xd8, 0xc2, 0x42, 0xd1, 0x90, 0x0e, 0x30, 0x53, 0x69, 0x2c, 0x37, 0x8c, 0x6a, 0x29, 0xcf,
	0x58, 0xb9, 0x0b, 0x66, 0xeb, 0xb2, 0xce, 0x92, 0x2b, 0x86, 0x36, 0x4c, 0x95, 0xf2, 0x90, 0xfe,
	0xb5, 0xa1, 0xa2, 0x71, 0x60, 0x86, 0x61, 0xd3, 0xfe, 0x9a, 0x06, 0x6a, 0x7a, 0x20, 0xfe, 0x09,
	0x96, 0xc9, 0xab, 0x01, 0x17, 0xba, 0x8e, 0x49, 0x75, 0x62, 0xca, 0xce, 0x50, 0xc9, 0x34, 0x1e,
	0xa6, 0x5c, 0xdd, 0x50, 0x87, 0x94, 0x9d, 0xe9, 0xce, 0x27, 0xbd, 0x44, 0xae, 0xed, 0x7c, 0xda,
	0xda, 0x65, 0x30, 0x59, 0x3e, 0xe5, 0x43, 0x85, 0x6e, 0xda, 0x31, 0x34, 0x06, 0xdc, 0x06, 0xf3,
	0xde, 0x88, 0x88, 0x73, 0xce, 0xc8, 0xff, 0x86, 0x94, 0x28, 0xb4, 0x65, 0x42, 0xbc, 0x08, 0xea,
	0x34, 0x5a, 0x82, 0x8e, 0xb0, 0x22, 0xba, 0x5b, 0xe8, 0x96, 0x4d, 0x23, 0x07, 0xc1, 0x07, 0x60,
	0x69, 0x9f, 0x46, 0x11, 0x61, 0xc1, 0x40, 0x90, 0x1e, 0x95, 0x8a, 0x8b, 0x73, 0xb4, 0x6d, 0x74,
	0x8e, 0x25, 0x5a, 0x19, 0xae, 0x73, 0x96, 0x31, 0x7f, 0x2b, 0xe8, 0xf3, 0x88, 0xa0, 0xdb, 0xf6,
	0xba, 0x6b, 0xe0, 0x88, 0x47, 0x04, 0xde, 0x03, 0x8e, 0xfe, 0xd6, 0x5c, 0x20, 0x49, 0xc8, 0x59,
	0x24, 0xd1, 0x1d, 0x93, 0xca, 0x62, 0x8a, 0x1f, 0x5b, 0x18, 0x3e, 0x01, 0xab, 0x99, 0x94, 0x91,
	0x57, 0x2a, 0x90, 0x84, 0x45, 0xb6, 0x92, 0x77, 0x8d, 0xc7, 0x72, 0x4a, 0x37, 0xc8, 0x2b, 0x75,
	0x4c, 0x58, 0x64, 0xaa, 0xba, 0x0a, 0xa6, 0x7b, 0x58, 0x06, 0x5d, 0xc2, 0xd1, 0x8e, 0x1d, 0xdb,
	0x1e, 0x96, 0x7b, 0x84, 0xc3, 0x5b, 0x60, 0x3e, 0x19, 0x0e, 0x41, 0xbb, 0x3d, 0x25, 0xd1, 0x3d,
	0x73, 0x4a, 0x32, 0x31, 0xbe, 0xc1, 0xe0, 0x1d, 0xb0, 0x58, 0xc1, 0x2c, 0xc0, 0x91, 0x1e, 0x21,
	0xa6, 0x70, 0xa8, 0xd0, 0x7d, 0x5b, 0xb3, 0x0a, 0x66, 0xe5, 0x28, 0xaa, 0x5a, 0x10, 0x6e, 0x81,
	0x79, 0x3f, 0x1a, 0x04, 0x5d, 0xdc, 0x27, 0x36, 0xd1, 0x07, 0x76, 0xd4, 0xfc, 0x68, 0xb0, 0x87,
	0xfb, 0x24, 0xcd, 0xf5, 0xc2, 0x34, 0x8d, 0x88, 0x40, 0xff, 0xb0, 0xb9, 0xe6, 0xf1, 0xe7, 0x44,
	0xc0, 0x6d, 0xb0, 0xa0, 0x1b, 0xac, 0x07, 0x37, 0xb9, 0x4b, 0x0f, 0x6d, 0x70, 0x16, 0xb5, 0xb7,
	0x68, 0xeb, 0xb7, 0x09, 0xb0, 0xb8, 0x47, 0x94, 0xb1, 0x58, 0x87, 0xfb, 0x44, 0x0e, 0x74, 0xba,
	0xa9, 0x8b, 0x5d, 0xe6, 0x53, 0xa1, 0xbd, 0x72, 0xb7, 0xc1, 0x02, 0xb6, 0x37, 0x8a, 0x30, 0x7c,
	0x1a, 0x93, 0xc8, 0x2c, 0xf3, 0x19, 0x7f, 0xde, 0xa2, 0x9e, 0x05, 0x75, 0xf3, 0x23, 0x82, 0x43,
	0x65, 0x9a, 0x1d, 0x25, 0x5b, 0x3d, 0x0f, 0xc1, 0xbb, 0x60, 0xf1, 0x8d, 0x31, 0x35, 0x1b, 0xbe,
	0xe8, 0x2f, 0x5c, 0x9c, 0xd0, 0xf1, 0xd3, 0x30, 0x99, 0x7f, 0x1a, 0xf4, 0xb6, 0x4a, 0x66, 0x76,
	0x2a, 0xd9, 0x56, 0xe3, 0x99, 0xb5, 0xcb, 0x76, 0x3a, 0xbf, 0x6c, 0xb3, 0x85, 0xaa, 0xd7, 0xf9,
	0x5c, 0xba, 0x50, 0x37, 0x00, 0xe8, 0x0c, 0xe3, 0x38, 0xb0, 0x54, 0xd1, 0x50, 0x45, 0x8d, 0xb4,
	0x0c, 0x9d, 0xdb, 0xad, 0xe0, 0xd2, 0x6e, 0x1d, 0x5c, 0xbe, 0xd2, 0xb3, 0xf6, 0x4a, 0x0f, 0x2e,
	0x5d, 0xe9, 0x74, 0x71, 0xcf, 0xe5, 0x16, 0xf7, 0x06, 0x00, 0xc9, 0x4a, 0x0b, 0xb2, 0x3d, 0x5f,
	0x4c, 0x90, 0x36, 0x87, 0x4f, 0xcd, 0x1b, 0x35, 0x8c, 0x55, 0xa8, 0xe7, 0x40, 0x6f, 0xfc, 0x85,
	0x7f, 0xaf, 0xed, 0x66, 0xaf, 0xf0, 0xae, 0x6e, 0x97, 0x6f, 0x04, 0x55, 0x1e, 0x11, 0x3f, 0x27,
	0xbe, 0xff, 0xe7, 0x24, 0x58, 0xb8, 0x48, 0xc3, 0x45, 0x30, 0xab, 0x91, 0xc0, 0x6f, 0x55, 0x83,
	0xe6, 0x81, 0xf3, 0x37, 0xb8, 0x06, 0x96, 0x0d, 0x50, 0xae, 0xd5, 0x4e, 0x8e, 0x3d, 0xff, 0xf1,
	0x93, 0xff, 0x3c, 0x0d, 0xbc, 0x17, 0x2d, 0xe7, 0xb3, 0x12, 0x5c, 0x05, 0xd0, 0x50, 0x27, 0x92,
	0x88, 0xa0, 0x25, 0x28, 0x1e, 0x85, 0xf8, 0xdc, 0xf9, 0xbc, 0x94, 0xf9, 0xb4, 0xb9, 0xe5, 0x2a,
	0x31, 0xd7, 0x4b, 0xd2, 0xf9, 0xa2, 0x04, 0x57, 0xc0, 0xd2, 0xd8, 0x27, 0xc5, 0xbf, 0x1c, 0xe3,
	0xbe, 0xd7, 0xf2, 0xca, 0xed, 0xa0, 0xea, 0x7b, 0xe5, 0xb6, 0xf3, 0xd5, 0xf8, 0xa8, 0x04, 0x2f,
	0xd7, 0x6a, 0x81, 0x0e, 0xc3, 0xf9, 0xba, 0x04, 0x37, 0xc1, 0x9a, 0xa1, 0xbc, 0x17, 0x55, 0xcf,
	0xab, 0x59, 0x17, 0x2f, 0x38, 0x2a, 0xbf, 0x68, 0x9c, 0x1c, 0x39, 0xdf, 0x94, 0xe0, 0x36, 0x28,
	0xe5, 0xf9, 0x76, 0xb3, 0x56, 0x7e, 0xf9, 0x86, 0xea, 0xdb, 0x12, 0x74, 0xc1, 0x7a, 0x5e, 0x95,
	0xfe, 0x40, 0xaa, 0xf8, 0xae, 0x04, 0x6f, 0x80, 0x55, 0xa3, 0x68, 0xf9, 0xcd, 0xfd, 0x7a, 0xa5,
	0x6e, 0x83, 0xd8, 0xf3, 0x9b, 0x27, 0x2d, 0xe7, 0xfb, 0x71, 0x14, 0xe5, 0xda, 0x51, 0xbd, 0x71,
	0xe8, 0x3d, 0xf7, 0x0e, 0xcd, 0x51, 0xad, 0x76, 0xbd, 0xd9, 0x70, 0x7e, 0x28, 0xc1, 0x12, 0xb8,
	0x6e, 0xf9, 0x43, 0xdf, 0x2b, 0xd7, 0x5e, 0x1e, 0x7a, 0xcf, 0xda, 0x39, 0xc1, 0x8f, 0xe3, 0x2a,
	0x9a, 0x13, 0x83, 0x5a, 0xfd, 0xb8, 0x52, 0x6e, 0xd4, 0x9c, 0x9f, 0xc6, 0x25, 0xb1, 0xc4, 0x41,
	0xbd, 0x7a, 0xe0, 0xd5, 0x9c, 0x9f, 0xc7, 0x27, 0xee, 0x37, 0x4f, 0xfc, 0xe3, 0x4b, 0x01, 0x7f,
	0xe2, 0x66, 0x21, 0x35, 0x1b, 0x55, 0xef, 0x12, 0xff, 0xa9, 0x0b, 0x97, 0xc0, 0x9c, 0xed, 0x41,
	0xe3, 0xa0, 0xd1, 0xfc, 0x7f, 0xc3, 0x79, 0xdb, 0x85, 0x1b, 0x00, 0xd9, 0x1c, 0xcb, 0x7e, 0xf9,
	0xc8, 0x6b, 0x7b, 0x7e, 0x2e, 0xc6, 0x77, 0xdc, 0xac, 0x0b, 0x87, 0xcd, 0xbd, 0x7a, 0x35, 0x47,
	0xbd, 0xeb, 0xe6, 0x1a, 0x54, 0xab, 0x1f, 0xe7, 0xa8, 0xf7, 0xdc, 0x2c, 0x81, 0x5a, 0x25, 0x87,
	0xbf, 0xef, 0xc2, 0x75, 0xb0, 0x62, 0x4b, 0x12, 0xc7, 0x3c, 0xac, 0x47, 0x39, 0xf2, 0x03, 0x37,
	0xcb, 0xae, 0x8a, 0xe3, 0x78, 0x8f, 0x28, 0x33, 0x27, 0x63, 0xc1, 0x87, 0x2e, 0xbc, 0x06, 0x9c,
	0xf4, 0xd4, 0x46, 0xd3, 0xf7, 0xaa, 0x4d, 0xbf, 0xe6, 0x7c, 0xe4, 0x42, 0x04, 0xae, 0xda, 0x6a,
	0xe9, 0xc1, 0x1f, 0x33, 0x1f, 0xbb, 0x95, 0xb9, 0x5f, 0x5e, 0x6f, 0x16, 0x7e, 0x7f, 0xbd, 0x59,
	0xf8, 0xe3, 0xf5, 0x66, 0xe1, 0x74, 0xca, 0xfc, 0x4d, 0x7d, 0xfc, 0x57, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x8f, 0x28, 0x1e, 0x61, 0xe9, 0x0a, 0x00, 0x00,
}
