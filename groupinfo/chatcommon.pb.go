// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: chatcommon.proto

package groupinfo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatResultCode int32

const (
	ChatResultCode_Chat_RPC_OK                     ChatResultCode = 0    //成功
	ChatResultCode_Chat_ADDUSER3549_EXP            ChatResultCode = 4000 //3549隐私选项
	ChatResultCode_Chat_User_Priavcay              ChatResultCode = 4001 //隐私选项 没有权限
	ChatResultCode_Chat_To_User_Blocked            ChatResultCode = 4002 //block你将用户拉入黑名单  隐私选项
	ChatResultCode_Chat_User_Blocked               ChatResultCode = 4003 //block用户将你拉入黑名单  隐私选项
	ChatResultCode_Chat_REPEAT_CREAT               ChatResultCode = 4004 //短时间重复创建群
	ChatResultCode_Chat_REPEAT_ADD_USER            ChatResultCode = 4005 //重复添加群成员
	ChatResultCode_Chat_EXCEED_CREATE_MAXNUM       ChatResultCode = 4006 //超过最大建群数量
	ChatResultCode_Chat_EXCEED_TODAY_CREATE_MAXNUM ChatResultCode = 4007 //超过当日最大建群数量
	ChatResultCode_Chat_EXCEED_ADD_USER_MAXNUM     ChatResultCode = 4008 //超过群最大添加人数
	ChatResultCode_Chat_PROHIBIT_ADD_GROUP         ChatResultCode = 4009 //禁止加入群组
	ChatResultCode_Chat_ADMINLEVEL_EXCEPTION       ChatResultCode = 4010 //没有邀请权限
	ChatResultCode_Chat_ALREADYLEFT_EXCEPTION      ChatResultCode = 4011 //用户不在群里
	ChatResultCode_Chat_GROUP_DISBAND              ChatResultCode = 4012 //该群已经解散
	ChatResultCode_Chat_GROUP_KICKED               ChatResultCode = 4013 //该群以将你拉黑
	ChatResultCode_Chat_HOURS_ADD_USER_MAXNUM      ChatResultCode = 4114 //超过每小时最多添加群成员数
	ChatResultCode_Chat_ONCE_ADD_USER_MAXNUM       ChatResultCode = 4115 //超过单次最多添加群成员数
	//
	ChatResultCode_Chat_UNKNOWN               ChatResultCode = 4100 //未知异常
	ChatResultCode_Chat_PARAMETER_EXCEPTION   ChatResultCode = 4101 //参数异常
	ChatResultCode_Chat_LOGIC_EXCEPTION       ChatResultCode = 4102 //逻辑异常
	ChatResultCode_Chat_REDIS_EXCEPTION       ChatResultCode = 4103 //redis异常
	ChatResultCode_Chat_DB_EXCEPTION          ChatResultCode = 4104 //数据库异常
	ChatResultCode_Chat_AllocId_EXCEPTION     ChatResultCode = 4105 //群id分配错误
	ChatResultCode_Chat_CallGetUser_EXCEPTION ChatResultCode = 4106 //获取user出错  刘鑫磊提供接口
	ChatResultCode_Chat_DB_NORECORD           ChatResultCode = 4107 //无记录
	ChatResultCode_Chat_Group_NORECORD        ChatResultCode = 4108 //无群记录
)

// Enum value maps for ChatResultCode.
var (
	ChatResultCode_name = map[int32]string{
		0:    "Chat_RPC_OK",
		4000: "Chat_ADDUSER3549_EXP",
		4001: "Chat_User_Priavcay",
		4002: "Chat_To_User_Blocked",
		4003: "Chat_User_Blocked",
		4004: "Chat_REPEAT_CREAT",
		4005: "Chat_REPEAT_ADD_USER",
		4006: "Chat_EXCEED_CREATE_MAXNUM",
		4007: "Chat_EXCEED_TODAY_CREATE_MAXNUM",
		4008: "Chat_EXCEED_ADD_USER_MAXNUM",
		4009: "Chat_PROHIBIT_ADD_GROUP",
		4010: "Chat_ADMINLEVEL_EXCEPTION",
		4011: "Chat_ALREADYLEFT_EXCEPTION",
		4012: "Chat_GROUP_DISBAND",
		4013: "Chat_GROUP_KICKED",
		4114: "Chat_HOURS_ADD_USER_MAXNUM",
		4115: "Chat_ONCE_ADD_USER_MAXNUM",
		4100: "Chat_UNKNOWN",
		4101: "Chat_PARAMETER_EXCEPTION",
		4102: "Chat_LOGIC_EXCEPTION",
		4103: "Chat_REDIS_EXCEPTION",
		4104: "Chat_DB_EXCEPTION",
		4105: "Chat_AllocId_EXCEPTION",
		4106: "Chat_CallGetUser_EXCEPTION",
		4107: "Chat_DB_NORECORD",
		4108: "Chat_Group_NORECORD",
	}
	ChatResultCode_value = map[string]int32{
		"Chat_RPC_OK":                     0,
		"Chat_ADDUSER3549_EXP":            4000,
		"Chat_User_Priavcay":              4001,
		"Chat_To_User_Blocked":            4002,
		"Chat_User_Blocked":               4003,
		"Chat_REPEAT_CREAT":               4004,
		"Chat_REPEAT_ADD_USER":            4005,
		"Chat_EXCEED_CREATE_MAXNUM":       4006,
		"Chat_EXCEED_TODAY_CREATE_MAXNUM": 4007,
		"Chat_EXCEED_ADD_USER_MAXNUM":     4008,
		"Chat_PROHIBIT_ADD_GROUP":         4009,
		"Chat_ADMINLEVEL_EXCEPTION":       4010,
		"Chat_ALREADYLEFT_EXCEPTION":      4011,
		"Chat_GROUP_DISBAND":              4012,
		"Chat_GROUP_KICKED":               4013,
		"Chat_HOURS_ADD_USER_MAXNUM":      4114,
		"Chat_ONCE_ADD_USER_MAXNUM":       4115,
		"Chat_UNKNOWN":                    4100,
		"Chat_PARAMETER_EXCEPTION":        4101,
		"Chat_LOGIC_EXCEPTION":            4102,
		"Chat_REDIS_EXCEPTION":            4103,
		"Chat_DB_EXCEPTION":               4104,
		"Chat_AllocId_EXCEPTION":          4105,
		"Chat_CallGetUser_EXCEPTION":      4106,
		"Chat_DB_NORECORD":                4107,
		"Chat_Group_NORECORD":             4108,
	}
)

func (x ChatResultCode) Enum() *ChatResultCode {
	p := new(ChatResultCode)
	*p = x
	return p
}

func (x ChatResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_chatcommon_proto_enumTypes[0].Descriptor()
}

func (ChatResultCode) Type() protoreflect.EnumType {
	return &file_chatcommon_proto_enumTypes[0]
}

func (x ChatResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatResultCode.Descriptor instead.
func (ChatResultCode) EnumDescriptor() ([]byte, []int) {
	return file_chatcommon_proto_rawDescGZIP(), []int{0}
}

// 群基础信息
type ChannelInfoBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId         int32  `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //超级群、频道ID
	AccessHash        int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Encry             bool   `protobuf:"varint,3,opt,name=encry,proto3" json:"encry,omitempty"`         //是否是加密群
	Broadcast         bool   `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty"` //是否是频道
	Verified          bool   `protobuf:"varint,5,opt,name=verified,proto3" json:"verified,omitempty"`
	Megagroup         bool   `protobuf:"varint,6,opt,name=megagroup,proto3" json:"megagroup,omitempty"`   //	是否是超级群的标识
	Restricted        bool   `protobuf:"varint,7,opt,name=restricted,proto3" json:"restricted,omitempty"` //是否被限制
	Democracy         bool   `protobuf:"varint,8,opt,name=democracy,proto3" json:"democracy,omitempty"`   //是否民主（设置管理员的时候需要用）
	Signatures        bool   `protobuf:"varint,9,opt,name=signatures,proto3" json:"signatures,omitempty"`
	Min               bool   `protobuf:"varint,10,opt,name=min,proto3" json:"min,omitempty"`
	Title             string `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`                                                  //群名称
	Username          string `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`                                            //超级群的唯一标识名称
	Photo             string `protobuf:"bytes,13,opt,name=photo,proto3" json:"photo,omitempty"`                                                  //用户头像 json格式
	Date              int32  `protobuf:"varint,14,opt,name=date,proto3" json:"date,omitempty"`                                                   //创建时间
	Version           int32  `protobuf:"varint,15,opt,name=version,proto3" json:"version,omitempty"`                                             //版本
	RestrictionReason string `protobuf:"bytes,16,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"` //被限制的原因
	Cluster           int32  `protobuf:"varint,17,opt,name=cluster,proto3" json:"cluster,omitempty"`                                             //超级群创建的cluster
	// bool moderator = 18; //是不是主持人
	IsCreator bool `protobuf:"varint,18,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"` //是不是创建者
	// bool editor = 19; //是否是管理员
	IsAdmin            bool   `protobuf:"varint,19,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"` //是否是管理员
	Left               bool   `protobuf:"varint,20,opt,name=left,proto3" json:"left,omitempty"`                      //是否是已经离开此超级群
	Kicked             bool   `protobuf:"varint,21,opt,name=kicked,proto3" json:"kicked,omitempty"`                  //是否是被踢人
	MigratedFromChatId int32  `protobuf:"varint,22,opt,name=migrated_from_chat_id,json=migratedFromChatId,proto3" json:"migrated_from_chat_id,omitempty"`
	InviteRule         int32  `protobuf:"varint,23,opt,name=invite_rule,json=inviteRule,proto3" json:"invite_rule,omitempty"` //0:所有人能邀请  1:仅管理员  其他：扩展用
	AdminsCount        int32  `protobuf:"varint,24,opt,name=Admins_count,json=AdminsCount,proto3" json:"Admins_count,omitempty"`
	KickedCount        int32  `protobuf:"varint,25,opt,name=Kicked_count,json=KickedCount,proto3" json:"Kicked_count,omitempty"`
	BannedCount        int32  `protobuf:"varint,26,opt,name=Banned_count,json=BannedCount,proto3" json:"Banned_count,omitempty"`
	BotCount           int32  `protobuf:"varint,27,opt,name=Bot_count,json=BotCount,proto3" json:"Bot_count,omitempty"`
	ParticipantsCount  int32  `protobuf:"varint,28,opt,name=Participants_count,json=ParticipantsCount,proto3" json:"Participants_count,omitempty"`
	IsInChannel        bool   `protobuf:"varint,29,opt,name=IsInChannel,proto3" json:"IsInChannel,omitempty"`
	UtilDate           int32  `protobuf:"varint,30,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ExportedInviteLink string `protobuf:"bytes,31,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"` //邀请链接
	Creator            int32  `protobuf:"varint,32,opt,name=Creator,proto3" json:"Creator,omitempty"`
	About              string `protobuf:"bytes,33,opt,name=About,proto3" json:"About,omitempty"`
	EveryoneQuiet      bool   `protobuf:"varint,34,opt,name=EveryoneQuiet,proto3" json:"EveryoneQuiet,omitempty"`
	PrivateChat        bool   `protobuf:"varint,35,opt,name=PrivateChat,proto3" json:"PrivateChat,omitempty"`
	HiddenPrehistory   bool   `protobuf:"varint,36,opt,name=Hidden_prehistory,json=HiddenPrehistory,proto3" json:"Hidden_prehistory,omitempty"`
	//----------------------------- 新增
	SlowMode             bool  `protobuf:"varint,37,opt,name=slow_mode,json=slowMode,proto3" json:"slow_mode,omitempty"` // 群慢速模式 TODO
	SlowmodeSeconds      int32 `protobuf:"varint,38,opt,name=slowmode_seconds,json=slowmodeSeconds,proto3" json:"slowmode_seconds,omitempty"`
	SlowmodeNextSendDate int32 `protobuf:"varint,39,opt,name=slowmode_next_send_date,json=slowmodeNextSendDate,proto3" json:"slowmode_next_send_date,omitempty"`
	HasGeo               bool  `protobuf:"varint,40,opt,name=has_geo,json=hasGeo,proto3" json:"has_geo,omitempty"` //是否含有地理位置坐标
	BannedRights         int32 `protobuf:"varint,41,opt,name=Banned_rights,json=BannedRights,proto3" json:"Banned_rights,omitempty"`
	BanAddContact        bool  `protobuf:"varint,42,opt,name=Ban_add_contact,json=BanAddContact,proto3" json:"Ban_add_contact,omitempty"`     // add by qingsong at 2019-12-25 for ban channel member add contact.
	RdpGameMode          int32 `protobuf:"varint,43,opt,name=Rdp_game_mode,json=RdpGameMode,proto3" json:"Rdp_game_mode,omitempty"`           // add by qingsong at 2020-05-11 for channel game RDP switcher
	ParticipantsVer      int32 `protobuf:"varint,44,opt,name=Participants_ver,json=ParticipantsVer,proto3" json:"Participants_ver,omitempty"` // add by qingsong at 2020-06-23 for record participants version.
	LinkedChatId         int32 `protobuf:"varint,45,opt,name=Linked_chat_id,json=LinkedChatId,proto3" json:"Linked_chat_id,omitempty"`        // add by qingsong at 2020.10.20 for set discussion group.
}

func (x *ChannelInfoBase) Reset() {
	*x = ChannelInfoBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatcommon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfoBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfoBase) ProtoMessage() {}

func (x *ChannelInfoBase) ProtoReflect() protoreflect.Message {
	mi := &file_chatcommon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfoBase.ProtoReflect.Descriptor instead.
func (*ChannelInfoBase) Descriptor() ([]byte, []int) {
	return file_chatcommon_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelInfoBase) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelInfoBase) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ChannelInfoBase) GetEncry() bool {
	if x != nil {
		return x.Encry
	}
	return false
}

func (x *ChannelInfoBase) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

func (x *ChannelInfoBase) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *ChannelInfoBase) GetMegagroup() bool {
	if x != nil {
		return x.Megagroup
	}
	return false
}

func (x *ChannelInfoBase) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *ChannelInfoBase) GetDemocracy() bool {
	if x != nil {
		return x.Democracy
	}
	return false
}

func (x *ChannelInfoBase) GetSignatures() bool {
	if x != nil {
		return x.Signatures
	}
	return false
}

func (x *ChannelInfoBase) GetMin() bool {
	if x != nil {
		return x.Min
	}
	return false
}

func (x *ChannelInfoBase) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChannelInfoBase) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChannelInfoBase) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *ChannelInfoBase) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ChannelInfoBase) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChannelInfoBase) GetRestrictionReason() string {
	if x != nil {
		return x.RestrictionReason
	}
	return ""
}

func (x *ChannelInfoBase) GetCluster() int32 {
	if x != nil {
		return x.Cluster
	}
	return 0
}

func (x *ChannelInfoBase) GetIsCreator() bool {
	if x != nil {
		return x.IsCreator
	}
	return false
}

func (x *ChannelInfoBase) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *ChannelInfoBase) GetLeft() bool {
	if x != nil {
		return x.Left
	}
	return false
}

func (x *ChannelInfoBase) GetKicked() bool {
	if x != nil {
		return x.Kicked
	}
	return false
}

func (x *ChannelInfoBase) GetMigratedFromChatId() int32 {
	if x != nil {
		return x.MigratedFromChatId
	}
	return 0
}

func (x *ChannelInfoBase) GetInviteRule() int32 {
	if x != nil {
		return x.InviteRule
	}
	return 0
}

func (x *ChannelInfoBase) GetAdminsCount() int32 {
	if x != nil {
		return x.AdminsCount
	}
	return 0
}

func (x *ChannelInfoBase) GetKickedCount() int32 {
	if x != nil {
		return x.KickedCount
	}
	return 0
}

func (x *ChannelInfoBase) GetBannedCount() int32 {
	if x != nil {
		return x.BannedCount
	}
	return 0
}

func (x *ChannelInfoBase) GetBotCount() int32 {
	if x != nil {
		return x.BotCount
	}
	return 0
}

func (x *ChannelInfoBase) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *ChannelInfoBase) GetIsInChannel() bool {
	if x != nil {
		return x.IsInChannel
	}
	return false
}

func (x *ChannelInfoBase) GetUtilDate() int32 {
	if x != nil {
		return x.UtilDate
	}
	return 0
}

func (x *ChannelInfoBase) GetExportedInviteLink() string {
	if x != nil {
		return x.ExportedInviteLink
	}
	return ""
}

func (x *ChannelInfoBase) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *ChannelInfoBase) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *ChannelInfoBase) GetEveryoneQuiet() bool {
	if x != nil {
		return x.EveryoneQuiet
	}
	return false
}

func (x *ChannelInfoBase) GetPrivateChat() bool {
	if x != nil {
		return x.PrivateChat
	}
	return false
}

func (x *ChannelInfoBase) GetHiddenPrehistory() bool {
	if x != nil {
		return x.HiddenPrehistory
	}
	return false
}

func (x *ChannelInfoBase) GetSlowMode() bool {
	if x != nil {
		return x.SlowMode
	}
	return false
}

func (x *ChannelInfoBase) GetSlowmodeSeconds() int32 {
	if x != nil {
		return x.SlowmodeSeconds
	}
	return 0
}

func (x *ChannelInfoBase) GetSlowmodeNextSendDate() int32 {
	if x != nil {
		return x.SlowmodeNextSendDate
	}
	return 0
}

func (x *ChannelInfoBase) GetHasGeo() bool {
	if x != nil {
		return x.HasGeo
	}
	return false
}

func (x *ChannelInfoBase) GetBannedRights() int32 {
	if x != nil {
		return x.BannedRights
	}
	return 0
}

func (x *ChannelInfoBase) GetBanAddContact() bool {
	if x != nil {
		return x.BanAddContact
	}
	return false
}

func (x *ChannelInfoBase) GetRdpGameMode() int32 {
	if x != nil {
		return x.RdpGameMode
	}
	return 0
}

func (x *ChannelInfoBase) GetParticipantsVer() int32 {
	if x != nil {
		return x.ParticipantsVer
	}
	return 0
}

func (x *ChannelInfoBase) GetLinkedChatId() int32 {
	if x != nil {
		return x.LinkedChatId
	}
	return 0
}

// 普通群的基础信息
type GetChatInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId            int32          `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminsEnabled     bool           `protobuf:"varint,2,opt,name=admins_enabled,json=adminsEnabled,proto3" json:"admins_enabled,omitempty"`
	Deactivated       bool           `protobuf:"varint,3,opt,name=deactivated,proto3" json:"deactivated,omitempty"` //群是否活跃
	ExportedInvite    string         `protobuf:"bytes,4,opt,name=exported_invite,json=exportedInvite,proto3" json:"exported_invite,omitempty"`
	Encry             bool           `protobuf:"varint,5,opt,name=encry,proto3" json:"encry,omitempty"`     //是否加密群
	Creator           int32          `protobuf:"varint,6,opt,name=creator,proto3" json:"creator,omitempty"` //创建者的id
	Title             string         `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Photo             []byte         `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`                                                    //群头像
	FullPhoto         []byte         `protobuf:"bytes,9,opt,name=full_photo,json=fullPhoto,proto3" json:"full_photo,omitempty"`                           //群头像
	Version           int32          `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`                                              //群version
	ParticipantsCount int32          `protobuf:"varint,11,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"` //群成员个数 （邀请人和踢人都要相应变化）
	Date              int32          `protobuf:"varint,12,opt,name=date,proto3" json:"date,omitempty"`                                                    //群创建时间
	MigrateTo         string         `protobuf:"bytes,13,opt,name=migrate_to,json=migrateTo,proto3" json:"migrate_to,omitempty"`                          //升级为超级群的时候默认"" 格式为json格式
	Resultcode        ChatResultCode `protobuf:"varint,14,opt,name=resultcode,proto3,enum=groupinfo.ChatResultCode" json:"resultcode,omitempty"`          //结果码
}

func (x *GetChatInfoResp) Reset() {
	*x = GetChatInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatcommon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatInfoResp) ProtoMessage() {}

func (x *GetChatInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chatcommon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatInfoResp.ProtoReflect.Descriptor instead.
func (*GetChatInfoResp) Descriptor() ([]byte, []int) {
	return file_chatcommon_proto_rawDescGZIP(), []int{1}
}

func (x *GetChatInfoResp) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *GetChatInfoResp) GetAdminsEnabled() bool {
	if x != nil {
		return x.AdminsEnabled
	}
	return false
}

func (x *GetChatInfoResp) GetDeactivated() bool {
	if x != nil {
		return x.Deactivated
	}
	return false
}

func (x *GetChatInfoResp) GetExportedInvite() string {
	if x != nil {
		return x.ExportedInvite
	}
	return ""
}

func (x *GetChatInfoResp) GetEncry() bool {
	if x != nil {
		return x.Encry
	}
	return false
}

func (x *GetChatInfoResp) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *GetChatInfoResp) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetChatInfoResp) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *GetChatInfoResp) GetFullPhoto() []byte {
	if x != nil {
		return x.FullPhoto
	}
	return nil
}

func (x *GetChatInfoResp) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetChatInfoResp) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *GetChatInfoResp) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *GetChatInfoResp) GetMigrateTo() string {
	if x != nil {
		return x.MigrateTo
	}
	return ""
}

func (x *GetChatInfoResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

var File_chatcommon_proto protoreflect.FileDescriptor

var file_chatcommon_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xcd, 0x0b,
	0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x4b,
	0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x42, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x49, 0x73, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x75, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x62, 0x6f, 0x75,
	0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x69, 0x65, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x51,
	0x75, 0x69, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x5f, 0x70, 0x72, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x6c, 0x6f, 0x77, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x6c, 0x6f, 0x77,
	0x6d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x73,
	0x6c, 0x6f, 0x77, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x6c,
	0x6f, 0x77, 0x6d, 0x6f, 0x64, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x65, 0x6f, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x47, 0x65, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x42, 0x61, 0x6e, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x52, 0x64, 0x70, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x52, 0x64, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x56, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0xce, 0x03,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2a, 0xe3,
	0x05, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x44, 0x44, 0x55, 0x53,
	0x45, 0x52, 0x33, 0x35, 0x34, 0x39, 0x5f, 0x45, 0x58, 0x50, 0x10, 0xa0, 0x1f, 0x12, 0x17, 0x0a,
	0x12, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x50, 0x72, 0x69, 0x61, 0x76,
	0x63, 0x61, 0x79, 0x10, 0xa1, 0x1f, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x54,
	0x6f, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0xa2,
	0x1f, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0xa3, 0x1f, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x10, 0xa4,
	0x1f, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54,
	0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xa5, 0x1f, 0x12, 0x1e, 0x0a, 0x19,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x10, 0xa6, 0x1f, 0x12, 0x24, 0x0a, 0x1f,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x44, 0x41,
	0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x10,
	0xa7, 0x1f, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x4e, 0x55,
	0x4d, 0x10, 0xa8, 0x1f, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x50, 0x52, 0x4f,
	0x48, 0x49, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0xa9, 0x1f, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xaa, 0x1f, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0xab, 0x1f, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x44, 0x49, 0x53, 0x42, 0x41, 0x4e, 0x44, 0x10, 0xac, 0x1f, 0x12, 0x16, 0x0a, 0x11,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0xad, 0x1f, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x48, 0x4f, 0x55,
	0x52, 0x53, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x4e,
	0x55, 0x4d, 0x10, 0x92, 0x20, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4f, 0x4e,
	0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x4e,
	0x55, 0x4d, 0x10, 0x93, 0x20, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x84, 0x20, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x85, 0x20, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x86, 0x20, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x87, 0x20, 0x12, 0x16, 0x0a,
	0x11, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x44, 0x42, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x88, 0x20, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x49, 0x64, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x89, 0x20, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x8a, 0x20, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x44, 0x42, 0x5f, 0x4e,
	0x4f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x8b, 0x20, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x4e, 0x4f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x10, 0x8c, 0x20, 0x42, 0x1b, 0x5a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chatcommon_proto_rawDescOnce sync.Once
	file_chatcommon_proto_rawDescData = file_chatcommon_proto_rawDesc
)

func file_chatcommon_proto_rawDescGZIP() []byte {
	file_chatcommon_proto_rawDescOnce.Do(func() {
		file_chatcommon_proto_rawDescData = protoimpl.X.CompressGZIP(file_chatcommon_proto_rawDescData)
	})
	return file_chatcommon_proto_rawDescData
}

var file_chatcommon_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chatcommon_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_chatcommon_proto_goTypes = []interface{}{
	(ChatResultCode)(0),     // 0: groupinfo.ChatResultCode
	(*ChannelInfoBase)(nil), // 1: groupinfo.ChannelInfoBase
	(*GetChatInfoResp)(nil), // 2: groupinfo.GetChatInfoResp
}
var file_chatcommon_proto_depIdxs = []int32{
	0, // 0: groupinfo.GetChatInfoResp.resultcode:type_name -> groupinfo.ChatResultCode
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_chatcommon_proto_init() }
func file_chatcommon_proto_init() {
	if File_chatcommon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chatcommon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfoBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatcommon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chatcommon_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chatcommon_proto_goTypes,
		DependencyIndexes: file_chatcommon_proto_depIdxs,
		EnumInfos:         file_chatcommon_proto_enumTypes,
		MessageInfos:      file_chatcommon_proto_msgTypes,
	}.Build()
	File_chatcommon_proto = out.File
	file_chatcommon_proto_rawDesc = nil
	file_chatcommon_proto_goTypes = nil
	file_chatcommon_proto_depIdxs = nil
}
