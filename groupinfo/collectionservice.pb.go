// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/groupinfo/collectionservice.proto

/*
Package groupinfo is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/groupinfo/collectionservice.proto

It has these top-level messages:

	GroupCollection
	SetCollectionDialogReq
	SetCollectionDialogResp
	GetCollectionDialogsReq
	GetCollectionDialogsResp
	GetGroupCollectionsReq
	GetGroupCollectionsResp
	GetDialogCollectionReq
	GetDialogCollectionResp
	UpdateCollectionDialogReq
	UpdateCollectionDialogResp
*/
package groupinfo

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/pbcomm"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GroupCollection struct {
	ChatId     int32 `protobuf:"varint,1,opt,name=Chat_id,json=ChatId,proto3" json:"Chat_id,omitempty"`
	UserId     int32 `protobuf:"varint,2,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	IsSuper    bool  `protobuf:"varint,3,opt,name=Is_super,json=IsSuper,proto3" json:"Is_super,omitempty"`
	IsChannel  bool  `protobuf:"varint,4,opt,name=Is_channel,json=IsChannel,proto3" json:"Is_channel,omitempty"`
	AccessHash int64 `protobuf:"varint,5,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
}

func (m *GroupCollection) Reset()         { *m = GroupCollection{} }
func (m *GroupCollection) String() string { return proto.CompactTextString(m) }
func (*GroupCollection) ProtoMessage()    {}
func (*GroupCollection) Descriptor() ([]byte, []int) {
	return fileDescriptorCollectionservice, []int{0}
}

func (m *GroupCollection) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GroupCollection) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupCollection) GetIsSuper() bool {
	if m != nil {
		return m.IsSuper
	}
	return false
}

func (m *GroupCollection) GetIsChannel() bool {
	if m != nil {
		return m.IsChannel
	}
	return false
}

func (m *GroupCollection) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

type SetCollectionDialogReq struct {
	Collection   *GroupCollection `protobuf:"bytes,1,opt,name=collection" json:"collection,omitempty"`
	IsCollection bool             `protobuf:"varint,2,opt,name=isCollection,proto3" json:"isCollection,omitempty"`
	Dlog         *pbcomm.Debug    `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *SetCollectionDialogReq) Reset()         { *m = SetCollectionDialogReq{} }
func (m *SetCollectionDialogReq) String() string { return proto.CompactTextString(m) }
func (*SetCollectionDialogReq) ProtoMessage()    {}
func (*SetCollectionDialogReq) Descriptor() ([]byte, []int) {
	return fileDescriptorCollectionservice, []int{1}
}

func (m *SetCollectionDialogReq) GetCollection() *GroupCollection {
	if m != nil {
		return m.Collection
	}
	return nil
}

func (m *SetCollectionDialogReq) GetIsCollection() bool {
	if m != nil {
		return m.IsCollection
	}
	return false
}

func (m *SetCollectionDialogReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type SetCollectionDialogResp struct {
	Result     []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Flags      int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Resultcode int32  `protobuf:"varint,3,opt,name=resultcode,proto3" json:"resultcode,omitempty"`
}

func (m *SetCollectionDialogResp) Reset()         { *m = SetCollectionDialogResp{} }
func (m *SetCollectionDialogResp) String() string { return proto.CompactTextString(m) }
func (*SetCollectionDialogResp) ProtoMessage()    {}
func (*SetCollectionDialogResp) Descriptor() ([]byte, []int) {
	return fileDescriptorCollectionservice, []int{2}
}

func (m *SetCollectionDialogResp) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SetCollectionDialogResp) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *SetCollectionDialogResp) GetResultcode() int32 {
	if m != nil {
		return m.Resultcode
	}
	return 0
}

type GetCollectionDialogsReq struct {
	IsChannel bool          `protobuf:"varint,1,opt,name=isChannel,proto3" json:"isChannel,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetCollectionDialogsReq) Reset()         { *m = GetCollectionDialogsReq{} }
func (m *GetCollectionDialogsReq) String() string { return proto.CompactTextString(m) }
func (*GetCollectionDialogsReq) ProtoMessage()    {}
func (*GetCollectionDialogsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorCollectionservice, []int{3}
}

func (m *GetCollectionDialogsReq) GetIsChannel() bool {
	if m != nil {
		return m.IsChannel
	}
	return false
}

func (m *GetCollectionDialogsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetCollectionDialogsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GetCollectionDialogsResp struct {
	Result     []*GroupCollection `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
	Resultcode int32              `protobuf:"varint,2,opt,name=resultcode,proto3" json:"resultcode,omitempty"`
}

func (m *GetCollectionDialogsResp) Reset()         { *m = GetCollectionDialogsResp{} }
func (m *GetCollectionDialogsResp) String() string { return proto.CompactTextString(m) }
func (*GetCollectionDialogsResp) ProtoMessage()    {}
func (*GetCollectionDialogsResp) Descriptor() ([]byte, []int) {
	return fileDescriptorCollectionservice, []int{4}
}

func (m *GetCollectionDialogsResp) GetResult() []*GroupCollection {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetCollectionDialogsResp) GetResultcode() int32 {
	if m != nil {
		return m.Resultcode
	}
	return 0
}

type GetGroupCollectionsReq struct {
	IsChannel bool          `protobuf:"varint,1,opt,name=isChannel,proto3" json:"isChannel,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Hash      string        `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetGroupCollectionsReq) Reset()         { *m = GetGroupCollectionsReq{} }
func (m *GetGroupCollectionsReq) String() string { return proto.CompactTextString(m) }
func (*GetGroupCollectionsReq) ProtoMessage()    {}
func (*GetGroupCollectionsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorCollectionservice, []int{5}
}

func (m *GetGroupCollectionsReq) GetIsChannel() bool {
	if m != nil {
		return m.IsChannel
	}
	return false
}

func (m *GetGroupCollectionsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetGroupCollectionsReq) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *GetGroupCollectionsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GetGroupCollectionsResp struct {
	Result     []*GroupCollection `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
	IsModified bool               `protobuf:"varint,2,opt,name=isModified,proto3" json:"isModified,omitempty"`
	Hash       string             `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Resultcode int32              `protobuf:"varint,4,opt,name=resultcode,proto3" json:"resultcode,omitempty"`
}

func (m *GetGroupCollectionsResp) Reset()         { *m = GetGroupCollectionsResp{} }
func (m *GetGroupCollectionsResp) String() string { return proto.CompactTextString(m) }
func (*GetGroupCollectionsResp) ProtoMessage()    {}
func (*GetGroupCollectionsResp) Descriptor() ([]byte, []int) {
	return fileDescriptorCollectionservice, []int{6}
}

func (m *GetGroupCollectionsResp) GetResult() []*GroupCollection {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetGroupCollectionsResp) GetIsModified() bool {
	if m != nil {
		return m.IsModified
	}
	return false
}

func (m *GetGroupCollectionsResp) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *GetGroupCollectionsResp) GetResultcode() int32 {
	if m != nil {
		return m.Resultcode
	}
	return 0
}

type GetDialogCollectionReq struct {
	Collection *GroupCollection `protobuf:"bytes,1,opt,name=collection" json:"collection,omitempty"`
	Dlog       *pbcomm.Debug    `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetDialogCollectionReq) Reset()         { *m = GetDialogCollectionReq{} }
func (m *GetDialogCollectionReq) String() string { return proto.CompactTextString(m) }
func (*GetDialogCollectionReq) ProtoMessage()    {}
func (*GetDialogCollectionReq) Descriptor() ([]byte, []int) {
	return fileDescriptorCollectionservice, []int{7}
}

func (m *GetDialogCollectionReq) GetCollection() *GroupCollection {
	if m != nil {
		return m.Collection
	}
	return nil
}

func (m *GetDialogCollectionReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GetDialogCollectionResp struct {
	Result     bool  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Resultcode int32 `protobuf:"varint,2,opt,name=resultcode,proto3" json:"resultcode,omitempty"`
}

func (m *GetDialogCollectionResp) Reset()         { *m = GetDialogCollectionResp{} }
func (m *GetDialogCollectionResp) String() string { return proto.CompactTextString(m) }
func (*GetDialogCollectionResp) ProtoMessage()    {}
func (*GetDialogCollectionResp) Descriptor() ([]byte, []int) {
	return fileDescriptorCollectionservice, []int{8}
}

func (m *GetDialogCollectionResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *GetDialogCollectionResp) GetResultcode() int32 {
	if m != nil {
		return m.Resultcode
	}
	return 0
}

type UpdateCollectionDialogReq struct {
	UserId    int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ChatId    int32         `protobuf:"varint,2,opt,name=chatId,proto3" json:"chatId,omitempty"`
	ChannelId int32         `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateCollectionDialogReq) Reset()         { *m = UpdateCollectionDialogReq{} }
func (m *UpdateCollectionDialogReq) String() string { return proto.CompactTextString(m) }
func (*UpdateCollectionDialogReq) ProtoMessage()    {}
func (*UpdateCollectionDialogReq) Descriptor() ([]byte, []int) {
	return fileDescriptorCollectionservice, []int{9}
}

func (m *UpdateCollectionDialogReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateCollectionDialogReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *UpdateCollectionDialogReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateCollectionDialogReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type UpdateCollectionDialogResp struct {
	Result     int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Resultcode int32 `protobuf:"varint,2,opt,name=resultcode,proto3" json:"resultcode,omitempty"`
}

func (m *UpdateCollectionDialogResp) Reset()         { *m = UpdateCollectionDialogResp{} }
func (m *UpdateCollectionDialogResp) String() string { return proto.CompactTextString(m) }
func (*UpdateCollectionDialogResp) ProtoMessage()    {}
func (*UpdateCollectionDialogResp) Descriptor() ([]byte, []int) {
	return fileDescriptorCollectionservice, []int{10}
}

func (m *UpdateCollectionDialogResp) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *UpdateCollectionDialogResp) GetResultcode() int32 {
	if m != nil {
		return m.Resultcode
	}
	return 0
}

func init() {
	proto.RegisterType((*GroupCollection)(nil), "groupinfo.GroupCollection")
	proto.RegisterType((*SetCollectionDialogReq)(nil), "groupinfo.SetCollectionDialogReq")
	proto.RegisterType((*SetCollectionDialogResp)(nil), "groupinfo.SetCollectionDialogResp")
	proto.RegisterType((*GetCollectionDialogsReq)(nil), "groupinfo.GetCollectionDialogsReq")
	proto.RegisterType((*GetCollectionDialogsResp)(nil), "groupinfo.GetCollectionDialogsResp")
	proto.RegisterType((*GetGroupCollectionsReq)(nil), "groupinfo.GetGroupCollectionsReq")
	proto.RegisterType((*GetGroupCollectionsResp)(nil), "groupinfo.GetGroupCollectionsResp")
	proto.RegisterType((*GetDialogCollectionReq)(nil), "groupinfo.GetDialogCollectionReq")
	proto.RegisterType((*GetDialogCollectionResp)(nil), "groupinfo.GetDialogCollectionResp")
	proto.RegisterType((*UpdateCollectionDialogReq)(nil), "groupinfo.UpdateCollectionDialogReq")
	proto.RegisterType((*UpdateCollectionDialogResp)(nil), "groupinfo.UpdateCollectionDialogResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GroupCollectionService service

type GroupCollectionServiceClient interface {
	// 添加删除收藏对话框
	SetCollectionDialog(ctx context.Context, in *SetCollectionDialogReq, opts ...grpc.CallOption) (*SetCollectionDialogResp, error)
	// 老协议直接获取收藏列表
	GetCollectionDialogs(ctx context.Context, in *GetCollectionDialogsReq, opts ...grpc.CallOption) (*GetCollectionDialogsResp, error)
	// 新协议 通过hash判断是否返回收藏列表
	GetGroupCollections(ctx context.Context, in *GetGroupCollectionsReq, opts ...grpc.CallOption) (*GetGroupCollectionsResp, error)
	// 判断对话框是否被收藏
	GetDialogCollection(ctx context.Context, in *GetDialogCollectionReq, opts ...grpc.CallOption) (*GetDialogCollectionResp, error)
	// 判断对话框是否被收藏
	UpdateCollectionDialog(ctx context.Context, in *UpdateCollectionDialogReq, opts ...grpc.CallOption) (*UpdateCollectionDialogResp, error)
}

type groupCollectionServiceClient struct {
	cc *grpc.ClientConn
}

func NewGroupCollectionServiceClient(cc *grpc.ClientConn) GroupCollectionServiceClient {
	return &groupCollectionServiceClient{cc}
}

func (c *groupCollectionServiceClient) SetCollectionDialog(ctx context.Context, in *SetCollectionDialogReq, opts ...grpc.CallOption) (*SetCollectionDialogResp, error) {
	out := new(SetCollectionDialogResp)
	err := grpc.Invoke(ctx, "/groupinfo.GroupCollectionService/SetCollectionDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCollectionServiceClient) GetCollectionDialogs(ctx context.Context, in *GetCollectionDialogsReq, opts ...grpc.CallOption) (*GetCollectionDialogsResp, error) {
	out := new(GetCollectionDialogsResp)
	err := grpc.Invoke(ctx, "/groupinfo.GroupCollectionService/GetCollectionDialogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCollectionServiceClient) GetGroupCollections(ctx context.Context, in *GetGroupCollectionsReq, opts ...grpc.CallOption) (*GetGroupCollectionsResp, error) {
	out := new(GetGroupCollectionsResp)
	err := grpc.Invoke(ctx, "/groupinfo.GroupCollectionService/GetGroupCollections", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCollectionServiceClient) GetDialogCollection(ctx context.Context, in *GetDialogCollectionReq, opts ...grpc.CallOption) (*GetDialogCollectionResp, error) {
	out := new(GetDialogCollectionResp)
	err := grpc.Invoke(ctx, "/groupinfo.GroupCollectionService/GetDialogCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCollectionServiceClient) UpdateCollectionDialog(ctx context.Context, in *UpdateCollectionDialogReq, opts ...grpc.CallOption) (*UpdateCollectionDialogResp, error) {
	out := new(UpdateCollectionDialogResp)
	err := grpc.Invoke(ctx, "/groupinfo.GroupCollectionService/UpdateCollectionDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupCollectionService service

type GroupCollectionServiceServer interface {
	// 添加删除收藏对话框
	SetCollectionDialog(context.Context, *SetCollectionDialogReq) (*SetCollectionDialogResp, error)
	// 老协议直接获取收藏列表
	GetCollectionDialogs(context.Context, *GetCollectionDialogsReq) (*GetCollectionDialogsResp, error)
	// 新协议 通过hash判断是否返回收藏列表
	GetGroupCollections(context.Context, *GetGroupCollectionsReq) (*GetGroupCollectionsResp, error)
	// 判断对话框是否被收藏
	GetDialogCollection(context.Context, *GetDialogCollectionReq) (*GetDialogCollectionResp, error)
	// 判断对话框是否被收藏
	UpdateCollectionDialog(context.Context, *UpdateCollectionDialogReq) (*UpdateCollectionDialogResp, error)
}

func RegisterGroupCollectionServiceServer(s *grpc.Server, srv GroupCollectionServiceServer) {
	s.RegisterService(&_GroupCollectionService_serviceDesc, srv)
}

func _GroupCollectionService_SetCollectionDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCollectionDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCollectionServiceServer).SetCollectionDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.GroupCollectionService/SetCollectionDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCollectionServiceServer).SetCollectionDialog(ctx, req.(*SetCollectionDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCollectionService_GetCollectionDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionDialogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCollectionServiceServer).GetCollectionDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.GroupCollectionService/GetCollectionDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCollectionServiceServer).GetCollectionDialogs(ctx, req.(*GetCollectionDialogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCollectionService_GetGroupCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupCollectionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCollectionServiceServer).GetGroupCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.GroupCollectionService/GetGroupCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCollectionServiceServer).GetGroupCollections(ctx, req.(*GetGroupCollectionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCollectionService_GetDialogCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCollectionServiceServer).GetDialogCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.GroupCollectionService/GetDialogCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCollectionServiceServer).GetDialogCollection(ctx, req.(*GetDialogCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCollectionService_UpdateCollectionDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionDialogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCollectionServiceServer).UpdateCollectionDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupinfo.GroupCollectionService/UpdateCollectionDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCollectionServiceServer).UpdateCollectionDialog(ctx, req.(*UpdateCollectionDialogReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupCollectionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "groupinfo.GroupCollectionService",
	HandlerType: (*GroupCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetCollectionDialog",
			Handler:    _GroupCollectionService_SetCollectionDialog_Handler,
		},
		{
			MethodName: "GetCollectionDialogs",
			Handler:    _GroupCollectionService_GetCollectionDialogs_Handler,
		},
		{
			MethodName: "GetGroupCollections",
			Handler:    _GroupCollectionService_GetGroupCollections_Handler,
		},
		{
			MethodName: "GetDialogCollection",
			Handler:    _GroupCollectionService_GetDialogCollection_Handler,
		},
		{
			MethodName: "UpdateCollectionDialog",
			Handler:    _GroupCollectionService_UpdateCollectionDialog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/groupinfo/collectionservice.proto",
}

func (m *GroupCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupCollection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.UserId))
	}
	if m.IsSuper {
		dAtA[i] = 0x18
		i++
		if m.IsSuper {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsChannel {
		dAtA[i] = 0x20
		i++
		if m.IsChannel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.AccessHash))
	}
	return i, nil
}

func (m *SetCollectionDialogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetCollectionDialogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Collection != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.Collection.Size()))
		n1, err := m.Collection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.IsCollection {
		dAtA[i] = 0x10
		i++
		if m.IsCollection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.Dlog.Size()))
		n2, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *SetCollectionDialogResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetCollectionDialogResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.Flags))
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetCollectionDialogsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCollectionDialogsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsChannel {
		dAtA[i] = 0x8
		i++
		if m.IsChannel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.UserId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.Dlog.Size()))
		n3, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *GetCollectionDialogsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCollectionDialogsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCollectionservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetGroupCollectionsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGroupCollectionsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsChannel {
		dAtA[i] = 0x8
		i++
		if m.IsChannel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.Dlog.Size()))
		n4, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GetGroupCollectionsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGroupCollectionsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCollectionservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsModified {
		dAtA[i] = 0x10
		i++
		if m.IsModified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetDialogCollectionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDialogCollectionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Collection != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.Collection.Size()))
		n5, err := m.Collection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.Dlog.Size()))
		n6, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *GetDialogCollectionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDialogCollectionResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *UpdateCollectionDialogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCollectionDialogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.UserId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.ChatId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.Dlog.Size()))
		n7, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *UpdateCollectionDialogResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCollectionDialogResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.Result))
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCollectionservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func encodeVarintCollectionservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GroupCollection) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovCollectionservice(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovCollectionservice(uint64(m.UserId))
	}
	if m.IsSuper {
		n += 2
	}
	if m.IsChannel {
		n += 2
	}
	if m.AccessHash != 0 {
		n += 1 + sovCollectionservice(uint64(m.AccessHash))
	}
	return n
}

func (m *SetCollectionDialogReq) Size() (n int) {
	var l int
	_ = l
	if m.Collection != nil {
		l = m.Collection.Size()
		n += 1 + l + sovCollectionservice(uint64(l))
	}
	if m.IsCollection {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovCollectionservice(uint64(l))
	}
	return n
}

func (m *SetCollectionDialogResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovCollectionservice(uint64(l))
	}
	if m.Flags != 0 {
		n += 1 + sovCollectionservice(uint64(m.Flags))
	}
	if m.Resultcode != 0 {
		n += 1 + sovCollectionservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetCollectionDialogsReq) Size() (n int) {
	var l int
	_ = l
	if m.IsChannel {
		n += 2
	}
	if m.UserId != 0 {
		n += 1 + sovCollectionservice(uint64(m.UserId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovCollectionservice(uint64(l))
	}
	return n
}

func (m *GetCollectionDialogsResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovCollectionservice(uint64(l))
		}
	}
	if m.Resultcode != 0 {
		n += 1 + sovCollectionservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetGroupCollectionsReq) Size() (n int) {
	var l int
	_ = l
	if m.IsChannel {
		n += 2
	}
	if m.UserId != 0 {
		n += 1 + sovCollectionservice(uint64(m.UserId))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovCollectionservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovCollectionservice(uint64(l))
	}
	return n
}

func (m *GetGroupCollectionsResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovCollectionservice(uint64(l))
		}
	}
	if m.IsModified {
		n += 2
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovCollectionservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovCollectionservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetDialogCollectionReq) Size() (n int) {
	var l int
	_ = l
	if m.Collection != nil {
		l = m.Collection.Size()
		n += 1 + l + sovCollectionservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovCollectionservice(uint64(l))
	}
	return n
}

func (m *GetDialogCollectionResp) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.Resultcode != 0 {
		n += 1 + sovCollectionservice(uint64(m.Resultcode))
	}
	return n
}

func (m *UpdateCollectionDialogReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovCollectionservice(uint64(m.UserId))
	}
	if m.ChatId != 0 {
		n += 1 + sovCollectionservice(uint64(m.ChatId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovCollectionservice(uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovCollectionservice(uint64(l))
	}
	return n
}

func (m *UpdateCollectionDialogResp) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovCollectionservice(uint64(m.Result))
	}
	if m.Resultcode != 0 {
		n += 1 + sovCollectionservice(uint64(m.Resultcode))
	}
	return n
}

func sovCollectionservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCollectionservice(x uint64) (n int) {
	return sovCollectionservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GroupCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuper", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuper = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChannel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChannel = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetCollectionDialogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCollectionDialogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCollectionDialogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collection == nil {
				m.Collection = &GroupCollection{}
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCollection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCollection = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetCollectionDialogResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCollectionDialogResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCollectionDialogResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCollectionservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCollectionDialogsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCollectionDialogsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCollectionDialogsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChannel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChannel = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCollectionDialogsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCollectionDialogsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCollectionDialogsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &GroupCollection{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGroupCollectionsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGroupCollectionsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGroupCollectionsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChannel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChannel = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGroupCollectionsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGroupCollectionsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGroupCollectionsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &GroupCollection{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsModified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsModified = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDialogCollectionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDialogCollectionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDialogCollectionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collection == nil {
				m.Collection = &GroupCollection{}
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDialogCollectionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDialogCollectionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDialogCollectionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCollectionDialogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCollectionDialogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCollectionDialogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCollectionDialogResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCollectionDialogResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCollectionDialogResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCollectionservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCollectionservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollectionservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCollectionservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCollectionservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCollectionservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCollectionservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCollectionservice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/groupinfo/collectionservice.proto", fileDescriptorCollectionservice)
}

var fileDescriptorCollectionservice = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0x36, 0x3f, 0x4d, 0xa6, 0x45, 0x48, 0xdb, 0xca, 0x4d, 0x2d, 0x08, 0xad, 0x01, 0xa9,
	0x27, 0x57, 0x0a, 0x17, 0xc4, 0x0d, 0x5a, 0x51, 0x7c, 0xe0, 0x80, 0x4b, 0xaf, 0x8d, 0x1c, 0x7b,
	0x63, 0xaf, 0xe4, 0x7a, 0x8d, 0xd7, 0x86, 0x17, 0x80, 0x1b, 0x6f, 0x80, 0x84, 0xc4, 0xdb, 0x70,
	0xe4, 0x11, 0x50, 0x9f, 0x04, 0xed, 0xda, 0x89, 0x1d, 0x7b, 0xa3, 0x58, 0xf4, 0x94, 0xcc, 0xcf,
	0xce, 0xcc, 0xf7, 0xcd, 0x8f, 0xe1, 0xad, 0x4f, 0xd3, 0xd0, 0x99, 0x99, 0x6e, 0xe0, 0xa4, 0x9c,
	0x24, 0x9f, 0x49, 0x62, 0xd2, 0xdb, 0x33, 0x1a, 0xa5, 0x24, 0x99, 0x3b, 0x2e, 0x89, 0x13, 0x36,
	0xcb, 0xe6, 0x67, 0x7e, 0xc2, 0xb2, 0x98, 0x46, 0x73, 0x76, 0xe6, 0xb2, 0x30, 0x24, 0x6e, 0x4a,
	0x59, 0x24, 0xbc, 0xa9, 0x4b, 0xcc, 0x38, 0x61, 0x29, 0xc3, 0xc3, 0xa5, 0x8b, 0xfe, 0xb2, 0x55,
	0xc8, 0x78, 0xe6, 0xb2, 0xdb, 0xdb, 0xe2, 0x27, 0x0f, 0x62, 0xfc, 0x44, 0xf0, 0xf0, 0x52, 0xc4,
	0x39, 0x5f, 0x66, 0xc1, 0x87, 0xb0, 0x73, 0x1e, 0x38, 0xe9, 0x94, 0x7a, 0x23, 0x74, 0x8c, 0x4e,
	0x7b, 0x76, 0x5f, 0x88, 0x96, 0x27, 0x0c, 0xd7, 0x9c, 0x24, 0xc2, 0xb0, 0x9d, 0x1b, 0x84, 0x68,
	0x79, 0xf8, 0x08, 0x06, 0x16, 0x9f, 0xf2, 0x2c, 0x26, 0xc9, 0xa8, 0x73, 0x8c, 0x4e, 0x07, 0xf6,
	0x8e, 0xc5, 0xaf, 0x84, 0x88, 0x1f, 0x03, 0x58, 0x7c, 0xea, 0x06, 0x4e, 0x14, 0x91, 0x70, 0xd4,
	0x95, 0xc6, 0xa1, 0xc5, 0xcf, 0x73, 0x05, 0x7e, 0x02, 0xbb, 0xaf, 0x5d, 0x97, 0x70, 0x3e, 0x0d,
	0x1c, 0x1e, 0x8c, 0x7a, 0xc7, 0xe8, 0xb4, 0x63, 0x43, 0xae, 0x7a, 0xe7, 0xf0, 0xc0, 0xf8, 0x81,
	0x40, 0xbb, 0x22, 0x69, 0x59, 0xde, 0x05, 0x75, 0x42, 0xe6, 0xdb, 0xe4, 0x13, 0x7e, 0x05, 0x50,
	0x72, 0x23, 0x4b, 0xdd, 0x9d, 0xe8, 0xe6, 0x92, 0x15, 0xb3, 0x86, 0xcb, 0xae, 0x78, 0x63, 0x03,
	0xf6, 0x28, 0x2f, 0x6d, 0x12, 0xcf, 0xc0, 0x5e, 0xd1, 0xe1, 0x13, 0xe8, 0x5e, 0x84, 0xcc, 0x97,
	0x88, 0x76, 0x27, 0x0f, 0xcc, 0x82, 0xb8, 0x0b, 0x32, 0xcb, 0x7c, 0x5b, 0x9a, 0x0c, 0x1f, 0x0e,
	0x95, 0xc5, 0xf1, 0x18, 0x6b, 0xd0, 0x4f, 0x08, 0xcf, 0xc2, 0x54, 0x56, 0xb6, 0x67, 0x17, 0x12,
	0x3e, 0x80, 0xde, 0x3c, 0x74, 0x7c, 0x5e, 0x50, 0x98, 0x0b, 0x78, 0x0c, 0x90, 0xdb, 0x5d, 0xe6,
	0x11, 0x99, 0xb1, 0x67, 0x57, 0x34, 0x46, 0x02, 0x87, 0x97, 0xcd, 0x44, 0x5c, 0xd0, 0xf0, 0x08,
	0x86, 0x74, 0xc1, 0xa7, 0xcc, 0x35, 0xb0, 0x4b, 0x85, 0x28, 0x23, 0x93, 0x4d, 0x5a, 0xb4, 0x2c,
	0x97, 0xda, 0x80, 0x8b, 0x60, 0xa4, 0xce, 0xc9, 0x63, 0x3c, 0xa9, 0xa0, 0xeb, 0x6c, 0xe0, 0x7d,
	0x81, 0x7c, 0x15, 0xe3, 0x76, 0x03, 0xe3, 0x37, 0x04, 0xda, 0x25, 0x49, 0x6b, 0xcf, 0xef, 0x81,
	0x11, 0x43, 0x57, 0x4e, 0x95, 0xc0, 0x38, 0xb4, 0xe5, 0xff, 0x25, 0xee, 0xee, 0x7a, 0xdc, 0xbf,
	0x90, 0x24, 0xbb, 0x59, 0xc7, 0xff, 0xe3, 0xa6, 0xfc, 0x3d, 0xf3, 0xe8, 0x9c, 0x12, 0xaf, 0x98,
	0xb4, 0x8a, 0x46, 0x59, 0xe6, 0x2a, 0x57, 0xdd, 0x06, 0x57, 0x5f, 0x24, 0x55, 0x79, 0x47, 0x2a,
	0x29, 0xef, 0xb9, 0x15, 0x0b, 0x72, 0xb6, 0xd7, 0x93, 0xf3, 0x41, 0x72, 0xd3, 0x4c, 0xdc, 0x98,
	0xf8, 0x41, 0xeb, 0xbe, 0x7f, 0x47, 0x70, 0x74, 0x1d, 0x7b, 0x4e, 0x4a, 0x54, 0x5b, 0x5e, 0x36,
	0x17, 0xad, 0x34, 0x57, 0x83, 0xbe, 0x2b, 0xcf, 0xd2, 0xa2, 0xe9, 0xb9, 0x24, 0x46, 0xa5, 0xb8,
	0x36, 0x96, 0x57, 0x2c, 0x52, 0xa9, 0x68, 0xd3, 0xfe, 0x8f, 0xa0, 0xaf, 0xab, 0xa6, 0x01, 0xb2,
	0xd3, 0x16, 0xe4, 0xe4, 0x6b, 0x17, 0xb4, 0x1a, 0xf5, 0x57, 0xf9, 0x39, 0xc7, 0x37, 0xb0, 0xaf,
	0x38, 0x22, 0xf8, 0xa4, 0xd2, 0x34, 0xf5, 0x05, 0xd4, 0x8d, 0x4d, 0x2e, 0x3c, 0x36, 0xb6, 0xb0,
	0x03, 0x07, 0xaa, 0x3d, 0xc6, 0xd5, 0xd7, 0x6b, 0x8e, 0x8b, 0xfe, 0x74, 0xa3, 0x8f, 0x4c, 0x71,
	0x03, 0xfb, 0x8a, 0x8d, 0x59, 0x81, 0xa0, 0xde, 0x6c, 0xdd, 0xd8, 0xe4, 0x52, 0x89, 0x5f, 0x9f,
	0xba, 0x7a, 0x7c, 0xc5, 0x3a, 0xd4, 0xe3, 0xab, 0x06, 0xd7, 0xd8, 0xc2, 0x3e, 0x68, 0xea, 0x9e,
	0xe3, 0x67, 0x95, 0xf7, 0x6b, 0x87, 0x54, 0x7f, 0xde, 0xc2, 0x4b, 0x24, 0x7a, 0xb3, 0xf7, 0xfb,
	0x6e, 0x8c, 0xfe, 0xdc, 0x8d, 0xd1, 0xdf, 0xbb, 0x31, 0x9a, 0xf5, 0xe5, 0x47, 0xf8, 0xc5, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x78, 0xe4, 0x65, 0x13, 0x08, 0x00, 0x00,
}
