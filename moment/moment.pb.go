// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/moment/moment.proto

/*
Package moment is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/moment/moment.proto

It has these top-level messages:

	Follow
*/
package moment

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Follow struct {
	// @inject_tag: db:"id"
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// @inject_tag: db:"follow_id"
	FollowID int64 `protobuf:"varint,2,opt,name=FollowID,proto3" json:"FollowID,omitempty"`
	// FollowUID 被关注人ID
	// @inject_tag: db:"follow_uid"
	FollowUID int32 `protobuf:"varint,3,opt,name=FollowUID,proto3" json:"FollowUID,omitempty"`
	// EachOther 是否互相关注
	// @inject_tag: db:"each_other" update:"force"
	EachOther int32 `protobuf:"varint,4,opt,name=EachOther,proto3" json:"EachOther,omitempty"`
	// CreateAt 关注时间
	// @inject_tag: db:"create_at"
	CreateAt int64 `protobuf:"varint,5,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	// UserID 用户ID
	// @inject_tag: db:"create_by"
	CreateBy int32 `protobuf:"varint,6,opt,name=CreateBy,proto3" json:"CreateBy,omitempty"`
}

func (m *Follow) Reset()                    { *m = Follow{} }
func (m *Follow) String() string            { return proto.CompactTextString(m) }
func (*Follow) ProtoMessage()               {}
func (*Follow) Descriptor() ([]byte, []int) { return fileDescriptorMoment, []int{0} }

func (m *Follow) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Follow) GetFollowID() int64 {
	if m != nil {
		return m.FollowID
	}
	return 0
}

func (m *Follow) GetFollowUID() int32 {
	if m != nil {
		return m.FollowUID
	}
	return 0
}

func (m *Follow) GetEachOther() int32 {
	if m != nil {
		return m.EachOther
	}
	return 0
}

func (m *Follow) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *Follow) GetCreateBy() int32 {
	if m != nil {
		return m.CreateBy
	}
	return 0
}

func init() {
	proto.RegisterType((*Follow)(nil), "moment.Follow")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FollowService service

type FollowServiceClient interface {
	Add(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Follow, error)
	Delete(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Follow, error)
}

type followServiceClient struct {
	cc *grpc.ClientConn
}

func NewFollowServiceClient(cc *grpc.ClientConn) FollowServiceClient {
	return &followServiceClient{cc}
}

func (c *followServiceClient) Add(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Follow, error) {
	out := new(Follow)
	err := grpc.Invoke(ctx, "/moment.FollowService/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) Delete(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Follow, error) {
	out := new(Follow)
	err := grpc.Invoke(ctx, "/moment.FollowService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FollowService service

type FollowServiceServer interface {
	Add(context.Context, *Follow) (*Follow, error)
	Delete(context.Context, *Follow) (*Follow, error)
}

func RegisterFollowServiceServer(s *grpc.Server, srv FollowServiceServer) {
	s.RegisterService(&_FollowService_serviceDesc, srv)
}

func _FollowService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Follow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.FollowService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).Add(ctx, req.(*Follow))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Follow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.FollowService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).Delete(ctx, req.(*Follow))
	}
	return interceptor(ctx, in, info, handler)
}

var _FollowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment.FollowService",
	HandlerType: (*FollowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _FollowService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FollowService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/moment/moment.proto",
}

func (m *Follow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Follow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMoment(dAtA, i, uint64(m.ID))
	}
	if m.FollowID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMoment(dAtA, i, uint64(m.FollowID))
	}
	if m.FollowUID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMoment(dAtA, i, uint64(m.FollowUID))
	}
	if m.EachOther != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMoment(dAtA, i, uint64(m.EachOther))
	}
	if m.CreateAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMoment(dAtA, i, uint64(m.CreateAt))
	}
	if m.CreateBy != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMoment(dAtA, i, uint64(m.CreateBy))
	}
	return i, nil
}

func encodeVarintMoment(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Follow) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMoment(uint64(m.ID))
	}
	if m.FollowID != 0 {
		n += 1 + sovMoment(uint64(m.FollowID))
	}
	if m.FollowUID != 0 {
		n += 1 + sovMoment(uint64(m.FollowUID))
	}
	if m.EachOther != 0 {
		n += 1 + sovMoment(uint64(m.EachOther))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMoment(uint64(m.CreateAt))
	}
	if m.CreateBy != 0 {
		n += 1 + sovMoment(uint64(m.CreateBy))
	}
	return n
}

func sovMoment(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMoment(x uint64) (n int) {
	return sovMoment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Follow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Follow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Follow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowID", wireType)
			}
			m.FollowID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowUID", wireType)
			}
			m.FollowUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowUID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EachOther", wireType)
			}
			m.EachOther = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EachOther |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			m.CreateBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMoment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMoment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMoment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMoment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMoment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMoment
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMoment
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMoment(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMoment = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMoment   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/moment/moment.proto", fileDescriptorMoment)
}

var fileDescriptorMoment = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x48, 0xcf, 0x2c, 0xc9,
	0x49, 0x4c, 0xd2, 0x4b, 0xce, 0x48, 0x2c, 0x29, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0xcb, 0xcc,
	0xd5, 0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0x4a, 0x4b, 0x4c, 0x4e, 0x2d, 0x28, 0xca, 0x4f, 0x2a, 0x4d,
	0xd3, 0xcf, 0xcd, 0xcf, 0x4d, 0xcd, 0x2b, 0x81, 0x52, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0x6c, 0x10, 0x9e, 0xd2, 0x0a, 0x46, 0x2e, 0x36, 0xb7, 0xfc, 0x9c, 0x9c, 0xfc, 0x72, 0x21, 0x3e,
	0x2e, 0x26, 0x4f, 0x17, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x26, 0x4f, 0x17, 0x21, 0x29,
	0x2e, 0x0e, 0x88, 0x8c, 0xa7, 0x8b, 0x04, 0x13, 0x58, 0x14, 0xce, 0x17, 0x92, 0xe1, 0xe2, 0x84,
	0xb0, 0x43, 0x3d, 0x5d, 0x24, 0x98, 0x15, 0x18, 0x35, 0x58, 0x83, 0x10, 0x02, 0x20, 0x59, 0xd7,
	0xc4, 0xe4, 0x0c, 0xff, 0x92, 0x8c, 0xd4, 0x22, 0x09, 0x16, 0x88, 0x2c, 0x5c, 0x00, 0x64, 0xae,
	0x73, 0x51, 0x6a, 0x62, 0x49, 0xaa, 0x63, 0x89, 0x04, 0x2b, 0xc4, 0x5c, 0x18, 0x1f, 0x21, 0xe7,
	0x54, 0x29, 0xc1, 0x06, 0xd6, 0x08, 0xe7, 0x1b, 0xa5, 0x70, 0xf1, 0x42, 0xac, 0x08, 0x4e, 0x2d,
	0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0x52, 0xe7, 0x62, 0x76, 0x4c, 0x49, 0x11, 0xe2, 0xd3, 0x83, 0xfa,
	0x0c, 0x22, 0x2b, 0x85, 0xc6, 0x57, 0x62, 0x10, 0xd2, 0xe2, 0x62, 0x73, 0x49, 0xcd, 0x49, 0x2d,
	0x49, 0x25, 0xac, 0xd6, 0x89, 0xe7, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c,
	0x92, 0x63, 0x4c, 0x62, 0x03, 0x87, 0x96, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xec, 0xf2,
	0xa7, 0x69, 0x01, 0x00, 0x00,
}
