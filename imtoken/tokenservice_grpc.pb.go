// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: tokenservice.proto

package tokenservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenserviceClient is the client API for Tokenservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenserviceClient interface {
	// 获取token
	GetToken(ctx context.Context, in *ReqGetTokenMsg, opts ...grpc.CallOption) (*GetTokenReply, error)
	// 验证tonken
	ValidateToken(ctx context.Context, in *ReqValidateToken, opts ...grpc.CallOption) (*ValidateTokenReply, error)
}

type tokenserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenserviceClient(cc grpc.ClientConnInterface) TokenserviceClient {
	return &tokenserviceClient{cc}
}

func (c *tokenserviceClient) GetToken(ctx context.Context, in *ReqGetTokenMsg, opts ...grpc.CallOption) (*GetTokenReply, error) {
	out := new(GetTokenReply)
	err := c.cc.Invoke(ctx, "/tokenservice.Tokenservice/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenserviceClient) ValidateToken(ctx context.Context, in *ReqValidateToken, opts ...grpc.CallOption) (*ValidateTokenReply, error) {
	out := new(ValidateTokenReply)
	err := c.cc.Invoke(ctx, "/tokenservice.Tokenservice/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenserviceServer is the server API for Tokenservice service.
// All implementations must embed UnimplementedTokenserviceServer
// for forward compatibility
type TokenserviceServer interface {
	// 获取token
	GetToken(context.Context, *ReqGetTokenMsg) (*GetTokenReply, error)
	// 验证tonken
	ValidateToken(context.Context, *ReqValidateToken) (*ValidateTokenReply, error)
	mustEmbedUnimplementedTokenserviceServer()
}

// UnimplementedTokenserviceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenserviceServer struct {
}

func (UnimplementedTokenserviceServer) GetToken(context.Context, *ReqGetTokenMsg) (*GetTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedTokenserviceServer) ValidateToken(context.Context, *ReqValidateToken) (*ValidateTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedTokenserviceServer) mustEmbedUnimplementedTokenserviceServer() {}

// UnsafeTokenserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenserviceServer will
// result in compilation errors.
type UnsafeTokenserviceServer interface {
	mustEmbedUnimplementedTokenserviceServer()
}

func RegisterTokenserviceServer(s grpc.ServiceRegistrar, srv TokenserviceServer) {
	s.RegisterService(&Tokenservice_ServiceDesc, srv)
}

func _Tokenservice_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenserviceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenservice.Tokenservice/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenserviceServer).GetToken(ctx, req.(*ReqGetTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokenservice_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqValidateToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenserviceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenservice.Tokenservice/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenserviceServer).ValidateToken(ctx, req.(*ReqValidateToken))
	}
	return interceptor(ctx, in, info, handler)
}

// Tokenservice_ServiceDesc is the grpc.ServiceDesc for Tokenservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tokenservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tokenservice.Tokenservice",
	HandlerType: (*TokenserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _Tokenservice_GetToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _Tokenservice_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokenservice.proto",
}
