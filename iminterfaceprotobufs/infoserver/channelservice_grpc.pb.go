// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: channelservice.proto

package infoserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChannelServerServiceClient is the client API for ChannelServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelServerServiceClient interface {
	// 创建频道
	CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 获取channel信息
	GetChannelUpdatesInfo(ctx context.Context, in *GetChannelUpdatesReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 添加群成员
	AddChannelUser(ctx context.Context, in *AddChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 删除群成员
	DelChannelUser(ctx context.Context, in *DelChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 编辑about
	EditChannelAbout(ctx context.Context, in *UpdateChanAboutReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 编辑title
	EditChannelTitle(ctx context.Context, in *UpdateChanTitleReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 编辑photo
	EditChannelPhoto(ctx context.Context, in *UpdateChanPhotoReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 编辑管理员权限
	EditChanAdminRights(ctx context.Context, in *UpdateChanAdminRightsReq, opts ...grpc.CallOption) (*UpdateChanAdminRightsResp, error)
	// 编辑ban权限
	EditChanBanRights(ctx context.Context, in *UpdateChanBanRightsReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 解散channel
	DismissChannel(ctx context.Context, in *DismissChannelReq, opts ...grpc.CallOption) (*DismissChannelResp, error)
	// 根据偏移获取
	GetParticipantLimitReq(ctx context.Context, in *ParticipantLimitReq, opts ...grpc.CallOption) (*ParticipantLimitResp, error)
	// 获取单个信息
	GetChanOneParticipantReq(ctx context.Context, in *GetChannelOnePartReq, opts ...grpc.CallOption) (*GetChannelOnePartResp, error)
	// 获取所有用户Id
	GetChanUsersId(ctx context.Context, in *GetChannelUsersIdReq, opts ...grpc.CallOption) (*GetChannelUsersIdResp, error)
	// 获取channel基本信息
	GetChannelBaseInfo(ctx context.Context, in *GetChannelBaseInfoReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error)
	// 获取channel信息 不带user信息
	GetChannelInfo(ctx context.Context, in *GetChannelInfoReq, opts ...grpc.CallOption) (*GetChannelInfoResp, error)
	// 批量获取channel基本信息
	GetBatchChanBaseInfo(ctx context.Context, in *BatchChannelBaseInfoReq, opts ...grpc.CallOption) (*BatchChannelBaseInfoResp, error)
	// 根据link获取
	GetChanInfoByLink(ctx context.Context, in *GetChanByLinkReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error)
	// 获取全部信息
	GetChannelFullInfo(ctx context.Context, in *GetFullChannelInfoReq, opts ...grpc.CallOption) (*GetFullChannelInfoResp, error)
	// 切换邀请成员规则
	ToggleInvite(ctx context.Context, in *ToggleInviteReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 生成群邀请链接
	CreateChannelLink(ctx context.Context, in *CreateChannelLinkReq, opts ...grpc.CallOption) (*CreateChannelLinkResp, error)
	// 校验邀请链接合法
	CheckChannelInviteLink(ctx context.Context, in *CheckChannelInviteLinkReq, opts ...grpc.CallOption) (*CheckChannelInviteLinkResp, error)
	// 更新channel userName
	UpdateChannelUserName(ctx context.Context, in *UpdateChannelUserNameReq, opts ...grpc.CallOption) (*UpdateChannelUserNameResp, error)
	// 更新channel置顶消息
	UpdateChannelPinnedMsgId(ctx context.Context, in *UpdateChannelPinnedMsgIdReq, opts ...grpc.CallOption) (*UpdateChannelPinnedMsgIdResp, error)
	// 检查userName是否可用
	CheckUserName(ctx context.Context, in *CheckUserNameReq, opts ...grpc.CallOption) (*CheckUserNameResp, error)
	// 检查是否是加密群
	CheckChannelIsEncry(ctx context.Context, in *CheckChannelIsEncryReq, opts ...grpc.CallOption) (*CheckChannelIsEncryResp, error)
}

type channelServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelServerServiceClient(cc grpc.ClientConnInterface) ChannelServerServiceClient {
	return &channelServerServiceClient{cc}
}

func (c *channelServerServiceClient) CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelUpdatesInfo(ctx context.Context, in *GetChannelUpdatesReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/GetChannelUpdatesInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) AddChannelUser(ctx context.Context, in *AddChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/AddChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) DelChannelUser(ctx context.Context, in *DelChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/DelChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChannelAbout(ctx context.Context, in *UpdateChanAboutReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/EditChannelAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChannelTitle(ctx context.Context, in *UpdateChanTitleReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/EditChannelTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChannelPhoto(ctx context.Context, in *UpdateChanPhotoReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/EditChannelPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChanAdminRights(ctx context.Context, in *UpdateChanAdminRightsReq, opts ...grpc.CallOption) (*UpdateChanAdminRightsResp, error) {
	out := new(UpdateChanAdminRightsResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/EditChanAdminRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChanBanRights(ctx context.Context, in *UpdateChanBanRightsReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/EditChanBanRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) DismissChannel(ctx context.Context, in *DismissChannelReq, opts ...grpc.CallOption) (*DismissChannelResp, error) {
	out := new(DismissChannelResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/DismissChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetParticipantLimitReq(ctx context.Context, in *ParticipantLimitReq, opts ...grpc.CallOption) (*ParticipantLimitResp, error) {
	out := new(ParticipantLimitResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/GetParticipantLimitReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChanOneParticipantReq(ctx context.Context, in *GetChannelOnePartReq, opts ...grpc.CallOption) (*GetChannelOnePartResp, error) {
	out := new(GetChannelOnePartResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/GetChanOneParticipantReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChanUsersId(ctx context.Context, in *GetChannelUsersIdReq, opts ...grpc.CallOption) (*GetChannelUsersIdResp, error) {
	out := new(GetChannelUsersIdResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/GetChanUsersId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelBaseInfo(ctx context.Context, in *GetChannelBaseInfoReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error) {
	out := new(GetChannelBaseInfoResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/GetChannelBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelInfo(ctx context.Context, in *GetChannelInfoReq, opts ...grpc.CallOption) (*GetChannelInfoResp, error) {
	out := new(GetChannelInfoResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/GetChannelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetBatchChanBaseInfo(ctx context.Context, in *BatchChannelBaseInfoReq, opts ...grpc.CallOption) (*BatchChannelBaseInfoResp, error) {
	out := new(BatchChannelBaseInfoResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/GetBatchChanBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChanInfoByLink(ctx context.Context, in *GetChanByLinkReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error) {
	out := new(GetChannelBaseInfoResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/GetChanInfoByLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelFullInfo(ctx context.Context, in *GetFullChannelInfoReq, opts ...grpc.CallOption) (*GetFullChannelInfoResp, error) {
	out := new(GetFullChannelInfoResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/GetChannelFullInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) ToggleInvite(ctx context.Context, in *ToggleInviteReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/ToggleInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CreateChannelLink(ctx context.Context, in *CreateChannelLinkReq, opts ...grpc.CallOption) (*CreateChannelLinkResp, error) {
	out := new(CreateChannelLinkResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/CreateChannelLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CheckChannelInviteLink(ctx context.Context, in *CheckChannelInviteLinkReq, opts ...grpc.CallOption) (*CheckChannelInviteLinkResp, error) {
	out := new(CheckChannelInviteLinkResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/CheckChannelInviteLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelUserName(ctx context.Context, in *UpdateChannelUserNameReq, opts ...grpc.CallOption) (*UpdateChannelUserNameResp, error) {
	out := new(UpdateChannelUserNameResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/UpdateChannelUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelPinnedMsgId(ctx context.Context, in *UpdateChannelPinnedMsgIdReq, opts ...grpc.CallOption) (*UpdateChannelPinnedMsgIdResp, error) {
	out := new(UpdateChannelPinnedMsgIdResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/UpdateChannelPinnedMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CheckUserName(ctx context.Context, in *CheckUserNameReq, opts ...grpc.CallOption) (*CheckUserNameResp, error) {
	out := new(CheckUserNameResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/CheckUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CheckChannelIsEncry(ctx context.Context, in *CheckChannelIsEncryReq, opts ...grpc.CallOption) (*CheckChannelIsEncryResp, error) {
	out := new(CheckChannelIsEncryResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChannelServerService/CheckChannelIsEncry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelServerServiceServer is the server API for ChannelServerService service.
// All implementations must embed UnimplementedChannelServerServiceServer
// for forward compatibility
type ChannelServerServiceServer interface {
	// 创建频道
	CreateChannel(context.Context, *CreateChannelReq) (*ChannelupdatesResp, error)
	// 获取channel信息
	GetChannelUpdatesInfo(context.Context, *GetChannelUpdatesReq) (*ChannelupdatesResp, error)
	// 添加群成员
	AddChannelUser(context.Context, *AddChannelUserReq) (*ChannelupdatesResp, error)
	// 删除群成员
	DelChannelUser(context.Context, *DelChannelUserReq) (*ChannelupdatesResp, error)
	// 编辑about
	EditChannelAbout(context.Context, *UpdateChanAboutReq) (*ChannelupdatesResp, error)
	// 编辑title
	EditChannelTitle(context.Context, *UpdateChanTitleReq) (*ChannelupdatesResp, error)
	// 编辑photo
	EditChannelPhoto(context.Context, *UpdateChanPhotoReq) (*ChannelupdatesResp, error)
	// 编辑管理员权限
	EditChanAdminRights(context.Context, *UpdateChanAdminRightsReq) (*UpdateChanAdminRightsResp, error)
	// 编辑ban权限
	EditChanBanRights(context.Context, *UpdateChanBanRightsReq) (*ChannelupdatesResp, error)
	// 解散channel
	DismissChannel(context.Context, *DismissChannelReq) (*DismissChannelResp, error)
	// 根据偏移获取
	GetParticipantLimitReq(context.Context, *ParticipantLimitReq) (*ParticipantLimitResp, error)
	// 获取单个信息
	GetChanOneParticipantReq(context.Context, *GetChannelOnePartReq) (*GetChannelOnePartResp, error)
	// 获取所有用户Id
	GetChanUsersId(context.Context, *GetChannelUsersIdReq) (*GetChannelUsersIdResp, error)
	// 获取channel基本信息
	GetChannelBaseInfo(context.Context, *GetChannelBaseInfoReq) (*GetChannelBaseInfoResp, error)
	// 获取channel信息 不带user信息
	GetChannelInfo(context.Context, *GetChannelInfoReq) (*GetChannelInfoResp, error)
	// 批量获取channel基本信息
	GetBatchChanBaseInfo(context.Context, *BatchChannelBaseInfoReq) (*BatchChannelBaseInfoResp, error)
	// 根据link获取
	GetChanInfoByLink(context.Context, *GetChanByLinkReq) (*GetChannelBaseInfoResp, error)
	// 获取全部信息
	GetChannelFullInfo(context.Context, *GetFullChannelInfoReq) (*GetFullChannelInfoResp, error)
	// 切换邀请成员规则
	ToggleInvite(context.Context, *ToggleInviteReq) (*ChannelupdatesResp, error)
	// 生成群邀请链接
	CreateChannelLink(context.Context, *CreateChannelLinkReq) (*CreateChannelLinkResp, error)
	// 校验邀请链接合法
	CheckChannelInviteLink(context.Context, *CheckChannelInviteLinkReq) (*CheckChannelInviteLinkResp, error)
	// 更新channel userName
	UpdateChannelUserName(context.Context, *UpdateChannelUserNameReq) (*UpdateChannelUserNameResp, error)
	// 更新channel置顶消息
	UpdateChannelPinnedMsgId(context.Context, *UpdateChannelPinnedMsgIdReq) (*UpdateChannelPinnedMsgIdResp, error)
	// 检查userName是否可用
	CheckUserName(context.Context, *CheckUserNameReq) (*CheckUserNameResp, error)
	// 检查是否是加密群
	CheckChannelIsEncry(context.Context, *CheckChannelIsEncryReq) (*CheckChannelIsEncryResp, error)
	mustEmbedUnimplementedChannelServerServiceServer()
}

// UnimplementedChannelServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChannelServerServiceServer struct {
}

func (UnimplementedChannelServerServiceServer) CreateChannel(context.Context, *CreateChannelReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelUpdatesInfo(context.Context, *GetChannelUpdatesReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelUpdatesInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) AddChannelUser(context.Context, *AddChannelUserReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChannelUser not implemented")
}
func (UnimplementedChannelServerServiceServer) DelChannelUser(context.Context, *DelChannelUserReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelChannelUser not implemented")
}
func (UnimplementedChannelServerServiceServer) EditChannelAbout(context.Context, *UpdateChanAboutReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelAbout not implemented")
}
func (UnimplementedChannelServerServiceServer) EditChannelTitle(context.Context, *UpdateChanTitleReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelTitle not implemented")
}
func (UnimplementedChannelServerServiceServer) EditChannelPhoto(context.Context, *UpdateChanPhotoReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelPhoto not implemented")
}
func (UnimplementedChannelServerServiceServer) EditChanAdminRights(context.Context, *UpdateChanAdminRightsReq) (*UpdateChanAdminRightsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChanAdminRights not implemented")
}
func (UnimplementedChannelServerServiceServer) EditChanBanRights(context.Context, *UpdateChanBanRightsReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChanBanRights not implemented")
}
func (UnimplementedChannelServerServiceServer) DismissChannel(context.Context, *DismissChannelReq) (*DismissChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DismissChannel not implemented")
}
func (UnimplementedChannelServerServiceServer) GetParticipantLimitReq(context.Context, *ParticipantLimitReq) (*ParticipantLimitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantLimitReq not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChanOneParticipantReq(context.Context, *GetChannelOnePartReq) (*GetChannelOnePartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChanOneParticipantReq not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChanUsersId(context.Context, *GetChannelUsersIdReq) (*GetChannelUsersIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChanUsersId not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelBaseInfo(context.Context, *GetChannelBaseInfoReq) (*GetChannelBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelBaseInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelInfo(context.Context, *GetChannelInfoReq) (*GetChannelInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) GetBatchChanBaseInfo(context.Context, *BatchChannelBaseInfoReq) (*BatchChannelBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchChanBaseInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChanInfoByLink(context.Context, *GetChanByLinkReq) (*GetChannelBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChanInfoByLink not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelFullInfo(context.Context, *GetFullChannelInfoReq) (*GetFullChannelInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelFullInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) ToggleInvite(context.Context, *ToggleInviteReq) (*ChannelupdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleInvite not implemented")
}
func (UnimplementedChannelServerServiceServer) CreateChannelLink(context.Context, *CreateChannelLinkReq) (*CreateChannelLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannelLink not implemented")
}
func (UnimplementedChannelServerServiceServer) CheckChannelInviteLink(context.Context, *CheckChannelInviteLinkReq) (*CheckChannelInviteLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChannelInviteLink not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdateChannelUserName(context.Context, *UpdateChannelUserNameReq) (*UpdateChannelUserNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelUserName not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdateChannelPinnedMsgId(context.Context, *UpdateChannelPinnedMsgIdReq) (*UpdateChannelPinnedMsgIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelPinnedMsgId not implemented")
}
func (UnimplementedChannelServerServiceServer) CheckUserName(context.Context, *CheckUserNameReq) (*CheckUserNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserName not implemented")
}
func (UnimplementedChannelServerServiceServer) CheckChannelIsEncry(context.Context, *CheckChannelIsEncryReq) (*CheckChannelIsEncryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChannelIsEncry not implemented")
}
func (UnimplementedChannelServerServiceServer) mustEmbedUnimplementedChannelServerServiceServer() {}

// UnsafeChannelServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelServerServiceServer will
// result in compilation errors.
type UnsafeChannelServerServiceServer interface {
	mustEmbedUnimplementedChannelServerServiceServer()
}

func RegisterChannelServerServiceServer(s grpc.ServiceRegistrar, srv ChannelServerServiceServer) {
	s.RegisterService(&ChannelServerService_ServiceDesc, srv)
}

func _ChannelServerService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CreateChannel(ctx, req.(*CreateChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelUpdatesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelUpdatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelUpdatesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetChannelUpdatesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelUpdatesInfo(ctx, req.(*GetChannelUpdatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_AddChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChannelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).AddChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/AddChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).AddChannelUser(ctx, req.(*AddChannelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_DelChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChannelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).DelChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/DelChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).DelChannelUser(ctx, req.(*DelChannelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChannelAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanAboutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChannelAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/EditChannelAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChannelAbout(ctx, req.(*UpdateChanAboutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChannelTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanTitleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChannelTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/EditChannelTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChannelTitle(ctx, req.(*UpdateChanTitleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChannelPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanPhotoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChannelPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/EditChannelPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChannelPhoto(ctx, req.(*UpdateChanPhotoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChanAdminRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanAdminRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChanAdminRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/EditChanAdminRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChanAdminRights(ctx, req.(*UpdateChanAdminRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChanBanRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanBanRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChanBanRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/EditChanBanRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChanBanRights(ctx, req.(*UpdateChanBanRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_DismissChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DismissChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).DismissChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/DismissChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).DismissChannel(ctx, req.(*DismissChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetParticipantLimitReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipantLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetParticipantLimitReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetParticipantLimitReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetParticipantLimitReq(ctx, req.(*ParticipantLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChanOneParticipantReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelOnePartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChanOneParticipantReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetChanOneParticipantReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChanOneParticipantReq(ctx, req.(*GetChannelOnePartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChanUsersId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelUsersIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChanUsersId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetChanUsersId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChanUsersId(ctx, req.(*GetChannelUsersIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelBaseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetChannelBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelBaseInfo(ctx, req.(*GetChannelBaseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelInfo(ctx, req.(*GetChannelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetBatchChanBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchChannelBaseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetBatchChanBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetBatchChanBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetBatchChanBaseInfo(ctx, req.(*BatchChannelBaseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChanInfoByLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChanByLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChanInfoByLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetChanInfoByLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChanInfoByLink(ctx, req.(*GetChanByLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullChannelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetChannelFullInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelFullInfo(ctx, req.(*GetFullChannelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_ToggleInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).ToggleInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/ToggleInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).ToggleInvite(ctx, req.(*ToggleInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CreateChannelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CreateChannelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/CreateChannelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CreateChannelLink(ctx, req.(*CreateChannelLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CheckChannelInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChannelInviteLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CheckChannelInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/CheckChannelInviteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CheckChannelInviteLink(ctx, req.(*CheckChannelInviteLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/UpdateChannelUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelUserName(ctx, req.(*UpdateChannelUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelPinnedMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelPinnedMsgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelPinnedMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/UpdateChannelPinnedMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelPinnedMsgId(ctx, req.(*UpdateChannelPinnedMsgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CheckUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CheckUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/CheckUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CheckUserName(ctx, req.(*CheckUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CheckChannelIsEncry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChannelIsEncryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CheckChannelIsEncry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/CheckChannelIsEncry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CheckChannelIsEncry(ctx, req.(*CheckChannelIsEncryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelServerService_ServiceDesc is the grpc.ServiceDesc for ChannelServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infoserver.ChannelServerService",
	HandlerType: (*ChannelServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _ChannelServerService_CreateChannel_Handler,
		},
		{
			MethodName: "GetChannelUpdatesInfo",
			Handler:    _ChannelServerService_GetChannelUpdatesInfo_Handler,
		},
		{
			MethodName: "AddChannelUser",
			Handler:    _ChannelServerService_AddChannelUser_Handler,
		},
		{
			MethodName: "DelChannelUser",
			Handler:    _ChannelServerService_DelChannelUser_Handler,
		},
		{
			MethodName: "EditChannelAbout",
			Handler:    _ChannelServerService_EditChannelAbout_Handler,
		},
		{
			MethodName: "EditChannelTitle",
			Handler:    _ChannelServerService_EditChannelTitle_Handler,
		},
		{
			MethodName: "EditChannelPhoto",
			Handler:    _ChannelServerService_EditChannelPhoto_Handler,
		},
		{
			MethodName: "EditChanAdminRights",
			Handler:    _ChannelServerService_EditChanAdminRights_Handler,
		},
		{
			MethodName: "EditChanBanRights",
			Handler:    _ChannelServerService_EditChanBanRights_Handler,
		},
		{
			MethodName: "DismissChannel",
			Handler:    _ChannelServerService_DismissChannel_Handler,
		},
		{
			MethodName: "GetParticipantLimitReq",
			Handler:    _ChannelServerService_GetParticipantLimitReq_Handler,
		},
		{
			MethodName: "GetChanOneParticipantReq",
			Handler:    _ChannelServerService_GetChanOneParticipantReq_Handler,
		},
		{
			MethodName: "GetChanUsersId",
			Handler:    _ChannelServerService_GetChanUsersId_Handler,
		},
		{
			MethodName: "GetChannelBaseInfo",
			Handler:    _ChannelServerService_GetChannelBaseInfo_Handler,
		},
		{
			MethodName: "GetChannelInfo",
			Handler:    _ChannelServerService_GetChannelInfo_Handler,
		},
		{
			MethodName: "GetBatchChanBaseInfo",
			Handler:    _ChannelServerService_GetBatchChanBaseInfo_Handler,
		},
		{
			MethodName: "GetChanInfoByLink",
			Handler:    _ChannelServerService_GetChanInfoByLink_Handler,
		},
		{
			MethodName: "GetChannelFullInfo",
			Handler:    _ChannelServerService_GetChannelFullInfo_Handler,
		},
		{
			MethodName: "ToggleInvite",
			Handler:    _ChannelServerService_ToggleInvite_Handler,
		},
		{
			MethodName: "CreateChannelLink",
			Handler:    _ChannelServerService_CreateChannelLink_Handler,
		},
		{
			MethodName: "CheckChannelInviteLink",
			Handler:    _ChannelServerService_CheckChannelInviteLink_Handler,
		},
		{
			MethodName: "UpdateChannelUserName",
			Handler:    _ChannelServerService_UpdateChannelUserName_Handler,
		},
		{
			MethodName: "UpdateChannelPinnedMsgId",
			Handler:    _ChannelServerService_UpdateChannelPinnedMsgId_Handler,
		},
		{
			MethodName: "CheckUserName",
			Handler:    _ChannelServerService_CheckUserName_Handler,
		},
		{
			MethodName: "CheckChannelIsEncry",
			Handler:    _ChannelServerService_CheckChannelIsEncry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channelservice.proto",
}
