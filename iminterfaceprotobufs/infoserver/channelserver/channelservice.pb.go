// Code generated by protoc-gen-gogo.
// source: channelserver/channelservice.proto
// DO NOT EDIT!

/*
Package channelserver is a generated protocol buffer package.

It is generated from these files:

	channelserver/channelservice.proto

It has these top-level messages:

	AdminRights
	BannerRights
	CreateChannelReq
	ChannelInfoBase
	MigrateCreateReq
	ChannelReq
	ChannelFull
	ChannelParticipant
	ChannleId
	ChannelLittleInfo
	ChannleUsersId
	GetChannelsReq
	ChannelBaseArr
	AddChannelUserReq
	BoolResult
	DelChannelUserReq
	AddChannelAdminReq
	AddAdminResult
	ParticipantReq
	ChannelParticipantArr
	ChannelUserName
	ChannelLink
	UpdateAbout
	UpdateTitle
	UpdatePhoto
	UpdateUserName
	UpdatePinMsgId
	UpdateChannelDemo
	InvitedUsers
*/
package channelserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import chatcommon "gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/chatcommon"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 管理员相关权限
type AdminRights struct {
	ChangeGroupInfo bool  `protobuf:"varint,1,opt,name=change_group_info,json=changeGroupInfo,proto3" json:"change_group_info,omitempty"`
	DeleteMessages  bool  `protobuf:"varint,2,opt,name=delete_messages,json=deleteMessages,proto3" json:"delete_messages,omitempty"`
	BanUsers        bool  `protobuf:"varint,3,opt,name=ban_users,json=banUsers,proto3" json:"ban_users,omitempty"`
	PinMessages     bool  `protobuf:"varint,4,opt,name=pin_messages,json=pinMessages,proto3" json:"pin_messages,omitempty"`
	AddNewAdmin     bool  `protobuf:"varint,5,opt,name=add_new_admin,json=addNewAdmin,proto3" json:"add_new_admin,omitempty"`
	PromotedBy      int32 `protobuf:"varint,6,opt,name=promoted_by,json=promotedBy,proto3" json:"promoted_by,omitempty"`
	PostMessages    bool  `protobuf:"varint,7,opt,name=post_messages,json=postMessages,proto3" json:"post_messages,omitempty"`
	EditMessages    bool  `protobuf:"varint,8,opt,name=edit_messages,json=editMessages,proto3" json:"edit_messages,omitempty"`
	InviteUsers     bool  `protobuf:"varint,9,opt,name=invite_users,json=inviteUsers,proto3" json:"invite_users,omitempty"`
	InviteLink      bool  `protobuf:"varint,10,opt,name=invite_link,json=inviteLink,proto3" json:"invite_link,omitempty"`
}

func (m *AdminRights) Reset()                    { *m = AdminRights{} }
func (m *AdminRights) String() string            { return proto.CompactTextString(m) }
func (*AdminRights) ProtoMessage()               {}
func (*AdminRights) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{0} }

func (m *AdminRights) GetChangeGroupInfo() bool {
	if m != nil {
		return m.ChangeGroupInfo
	}
	return false
}

func (m *AdminRights) GetDeleteMessages() bool {
	if m != nil {
		return m.DeleteMessages
	}
	return false
}

func (m *AdminRights) GetBanUsers() bool {
	if m != nil {
		return m.BanUsers
	}
	return false
}

func (m *AdminRights) GetPinMessages() bool {
	if m != nil {
		return m.PinMessages
	}
	return false
}

func (m *AdminRights) GetAddNewAdmin() bool {
	if m != nil {
		return m.AddNewAdmin
	}
	return false
}

func (m *AdminRights) GetPromotedBy() int32 {
	if m != nil {
		return m.PromotedBy
	}
	return 0
}

func (m *AdminRights) GetPostMessages() bool {
	if m != nil {
		return m.PostMessages
	}
	return false
}

func (m *AdminRights) GetEditMessages() bool {
	if m != nil {
		return m.EditMessages
	}
	return false
}

func (m *AdminRights) GetInviteUsers() bool {
	if m != nil {
		return m.InviteUsers
	}
	return false
}

func (m *AdminRights) GetInviteLink() bool {
	if m != nil {
		return m.InviteLink
	}
	return false
}

// Post_messages     bool //70
// Edit_messages     bool //70
// Invite_users      bool //70
// Invite_link       bool //70
// bannner用户的权限
type BannerRights struct {
	CanReadMessages bool  `protobuf:"varint,1,opt,name=can_read_messages,json=canReadMessages,proto3" json:"can_read_messages,omitempty"`
	CanSendMessge   bool  `protobuf:"varint,2,opt,name=can_send_messge,json=canSendMessge,proto3" json:"can_send_messge,omitempty"`
	CanSendMedia    bool  `protobuf:"varint,3,opt,name=can_send_media,json=canSendMedia,proto3" json:"can_send_media,omitempty"`
	CanSendSticker  bool  `protobuf:"varint,4,opt,name=can_send_sticker,json=canSendSticker,proto3" json:"can_send_sticker,omitempty"`
	CanEmbedLinks   bool  `protobuf:"varint,5,opt,name=can_embed_links,json=canEmbedLinks,proto3" json:"can_embed_links,omitempty"`
	KickedBy        int32 `protobuf:"varint,6,opt,name=kicked_by,json=kickedBy,proto3" json:"kicked_by,omitempty"`
	UntilDate       int32 `protobuf:"varint,7,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
	CanSendGifs     bool  `protobuf:"varint,8,opt,name=can_send_gifs,json=canSendGifs,proto3" json:"can_send_gifs,omitempty"`
	CanSendGames    bool  `protobuf:"varint,9,opt,name=can_send_games,json=canSendGames,proto3" json:"can_send_games,omitempty"`
	CanSendInline   bool  `protobuf:"varint,10,opt,name=can_send_inline,json=canSendInline,proto3" json:"can_send_inline,omitempty"`
}

func (m *BannerRights) Reset()                    { *m = BannerRights{} }
func (m *BannerRights) String() string            { return proto.CompactTextString(m) }
func (*BannerRights) ProtoMessage()               {}
func (*BannerRights) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{1} }

func (m *BannerRights) GetCanReadMessages() bool {
	if m != nil {
		return m.CanReadMessages
	}
	return false
}

func (m *BannerRights) GetCanSendMessge() bool {
	if m != nil {
		return m.CanSendMessge
	}
	return false
}

func (m *BannerRights) GetCanSendMedia() bool {
	if m != nil {
		return m.CanSendMedia
	}
	return false
}

func (m *BannerRights) GetCanSendSticker() bool {
	if m != nil {
		return m.CanSendSticker
	}
	return false
}

func (m *BannerRights) GetCanEmbedLinks() bool {
	if m != nil {
		return m.CanEmbedLinks
	}
	return false
}

func (m *BannerRights) GetKickedBy() int32 {
	if m != nil {
		return m.KickedBy
	}
	return 0
}

func (m *BannerRights) GetUntilDate() int32 {
	if m != nil {
		return m.UntilDate
	}
	return 0
}

func (m *BannerRights) GetCanSendGifs() bool {
	if m != nil {
		return m.CanSendGifs
	}
	return false
}

func (m *BannerRights) GetCanSendGames() bool {
	if m != nil {
		return m.CanSendGames
	}
	return false
}

func (m *BannerRights) GetCanSendInline() bool {
	if m != nil {
		return m.CanSendInline
	}
	return false
}

// *********************有关超级群、频道操作相关的接口 和结构体***********************
// -----------------------------------------------------------------------------111
// 创建频道的请求包
type CreateChannelReq struct {
	ChannelId  int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash int64                     `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	CreatorId  int32                     `protobuf:"varint,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Title      string                    `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	About      string                    `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	Broadcast  bool                      `protobuf:"varint,6,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Megagroup  bool                      `protobuf:"varint,7,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	Cluster    int32                     `protobuf:"varint,8,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Date       int32                     `protobuf:"varint,9,opt,name=date,proto3" json:"date,omitempty"`
	Dlog       *chatcommon.ChatLogPrefix `protobuf:"bytes,10,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *CreateChannelReq) Reset()                    { *m = CreateChannelReq{} }
func (m *CreateChannelReq) String() string            { return proto.CompactTextString(m) }
func (*CreateChannelReq) ProtoMessage()               {}
func (*CreateChannelReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{2} }

func (m *CreateChannelReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *CreateChannelReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *CreateChannelReq) GetCreatorId() int32 {
	if m != nil {
		return m.CreatorId
	}
	return 0
}

func (m *CreateChannelReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateChannelReq) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *CreateChannelReq) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *CreateChannelReq) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *CreateChannelReq) GetCluster() int32 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *CreateChannelReq) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *CreateChannelReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 响应 channel基础信息结构
type ChannelInfoBase struct {
	ChannelId          int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash         int64                     `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Encry              bool                      `protobuf:"varint,3,opt,name=encry,proto3" json:"encry,omitempty"`
	Broadcast          bool                      `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Verified           bool                      `protobuf:"varint,5,opt,name=verified,proto3" json:"verified,omitempty"`
	Megagroup          bool                      `protobuf:"varint,6,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	Restricted         bool                      `protobuf:"varint,7,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Democracy          bool                      `protobuf:"varint,8,opt,name=democracy,proto3" json:"democracy,omitempty"`
	Signatures         bool                      `protobuf:"varint,9,opt,name=signatures,proto3" json:"signatures,omitempty"`
	Min                bool                      `protobuf:"varint,10,opt,name=min,proto3" json:"min,omitempty"`
	Title              string                    `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`
	Username           string                    `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`
	Photo              string                    `protobuf:"bytes,13,opt,name=photo,proto3" json:"photo,omitempty"`
	Date               int32                     `protobuf:"varint,14,opt,name=date,proto3" json:"date,omitempty"`
	Version            int32                     `protobuf:"varint,15,opt,name=version,proto3" json:"version,omitempty"`
	RestrictionReason  string                    `protobuf:"bytes,16,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
	Cluster            int32                     `protobuf:"varint,17,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Moderator          bool                      `protobuf:"varint,18,opt,name=moderator,proto3" json:"moderator,omitempty"`
	Editor             bool                      `protobuf:"varint,19,opt,name=editor,proto3" json:"editor,omitempty"`
	Left               bool                      `protobuf:"varint,20,opt,name=left,proto3" json:"left,omitempty"`
	Kicked             bool                      `protobuf:"varint,21,opt,name=kicked,proto3" json:"kicked,omitempty"`
	MigratedFromChatId int32                     `protobuf:"varint,22,opt,name=migrated_from_chat_id,json=migratedFromChatId,proto3" json:"migrated_from_chat_id,omitempty"`
	Resultcode         chatcommon.ChatResultCode `protobuf:"varint,23,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChannelInfoBase) Reset()                    { *m = ChannelInfoBase{} }
func (m *ChannelInfoBase) String() string            { return proto.CompactTextString(m) }
func (*ChannelInfoBase) ProtoMessage()               {}
func (*ChannelInfoBase) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{3} }

func (m *ChannelInfoBase) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelInfoBase) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ChannelInfoBase) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *ChannelInfoBase) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *ChannelInfoBase) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *ChannelInfoBase) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *ChannelInfoBase) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *ChannelInfoBase) GetDemocracy() bool {
	if m != nil {
		return m.Democracy
	}
	return false
}

func (m *ChannelInfoBase) GetSignatures() bool {
	if m != nil {
		return m.Signatures
	}
	return false
}

func (m *ChannelInfoBase) GetMin() bool {
	if m != nil {
		return m.Min
	}
	return false
}

func (m *ChannelInfoBase) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChannelInfoBase) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ChannelInfoBase) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *ChannelInfoBase) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ChannelInfoBase) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ChannelInfoBase) GetRestrictionReason() string {
	if m != nil {
		return m.RestrictionReason
	}
	return ""
}

func (m *ChannelInfoBase) GetCluster() int32 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *ChannelInfoBase) GetModerator() bool {
	if m != nil {
		return m.Moderator
	}
	return false
}

func (m *ChannelInfoBase) GetEditor() bool {
	if m != nil {
		return m.Editor
	}
	return false
}

func (m *ChannelInfoBase) GetLeft() bool {
	if m != nil {
		return m.Left
	}
	return false
}

func (m *ChannelInfoBase) GetKicked() bool {
	if m != nil {
		return m.Kicked
	}
	return false
}

func (m *ChannelInfoBase) GetMigratedFromChatId() int32 {
	if m != nil {
		return m.MigratedFromChatId
	}
	return 0
}

func (m *ChannelInfoBase) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

// ------------------------------------------------------------------------------
// 升级为超级群的结构包
type MigrateCreateReq struct {
	ChannelId  int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash int64                     `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	CreatorId  int32                     `protobuf:"varint,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	ChatId     int32                     `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Cluster    int32                     `protobuf:"varint,5,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Date       int32                     `protobuf:"varint,6,opt,name=date,proto3" json:"date,omitempty"`
	Dlog       *chatcommon.ChatLogPrefix `protobuf:"bytes,7,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *MigrateCreateReq) Reset()                    { *m = MigrateCreateReq{} }
func (m *MigrateCreateReq) String() string            { return proto.CompactTextString(m) }
func (*MigrateCreateReq) ProtoMessage()               {}
func (*MigrateCreateReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{4} }

func (m *MigrateCreateReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *MigrateCreateReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *MigrateCreateReq) GetCreatorId() int32 {
	if m != nil {
		return m.CreatorId
	}
	return 0
}

func (m *MigrateCreateReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *MigrateCreateReq) GetCluster() int32 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *MigrateCreateReq) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *MigrateCreateReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// channel最基础的请求
type ChannelReq struct {
	ChannelId  int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     int32                     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash int64                     `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog       *chatcommon.ChatLogPrefix `protobuf:"bytes,4,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *ChannelReq) Reset()                    { *m = ChannelReq{} }
func (m *ChannelReq) String() string            { return proto.CompactTextString(m) }
func (*ChannelReq) ProtoMessage()               {}
func (*ChannelReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{5} }

func (m *ChannelReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ChannelReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// channelfull相关的基础数据
type ChannelFull struct {
	Channelinfo        *ChannelInfoBase          `protobuf:"bytes,1,opt,name=channelinfo" json:"channelinfo,omitempty"`
	ExportedInviteLink string                    `protobuf:"bytes,2,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"`
	ParticipantsCount  int32                     `protobuf:"varint,3,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
	AdminsCount        int32                     `protobuf:"varint,4,opt,name=admins_count,json=adminsCount,proto3" json:"admins_count,omitempty"`
	KickedCount        int32                     `protobuf:"varint,5,opt,name=kicked_count,json=kickedCount,proto3" json:"kicked_count,omitempty"`
	BannedCount        int32                     `protobuf:"varint,6,opt,name=banned_count,json=bannedCount,proto3" json:"banned_count,omitempty"`
	PinnedMsgId        int32                     `protobuf:"varint,7,opt,name=pinned_msg_id,json=pinnedMsgId,proto3" json:"pinned_msg_id,omitempty"`
	MigratedFromChatId int32                     `protobuf:"varint,8,opt,name=migrated_from_chat_id,json=migratedFromChatId,proto3" json:"migrated_from_chat_id,omitempty"`
	AdminRights        *AdminRights              `protobuf:"bytes,9,opt,name=admin_rights,json=adminRights" json:"admin_rights,omitempty"`
	BanRights          *BannerRights             `protobuf:"bytes,10,opt,name=ban_rights,json=banRights" json:"ban_rights,omitempty"`
	About              string                    `protobuf:"bytes,11,opt,name=about,proto3" json:"about,omitempty"`
	BotCount           int32                     `protobuf:"varint,12,opt,name=bot_count,json=botCount,proto3" json:"bot_count,omitempty"`
	BotId              []int32                   `protobuf:"varint,13,rep,packed,name=bot_id,json=botId" json:"bot_id,omitempty"`
	Resultcode         chatcommon.ChatResultCode `protobuf:"varint,14,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChannelFull) Reset()                    { *m = ChannelFull{} }
func (m *ChannelFull) String() string            { return proto.CompactTextString(m) }
func (*ChannelFull) ProtoMessage()               {}
func (*ChannelFull) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{6} }

func (m *ChannelFull) GetChannelinfo() *ChannelInfoBase {
	if m != nil {
		return m.Channelinfo
	}
	return nil
}

func (m *ChannelFull) GetExportedInviteLink() string {
	if m != nil {
		return m.ExportedInviteLink
	}
	return ""
}

func (m *ChannelFull) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *ChannelFull) GetAdminsCount() int32 {
	if m != nil {
		return m.AdminsCount
	}
	return 0
}

func (m *ChannelFull) GetKickedCount() int32 {
	if m != nil {
		return m.KickedCount
	}
	return 0
}

func (m *ChannelFull) GetBannedCount() int32 {
	if m != nil {
		return m.BannedCount
	}
	return 0
}

func (m *ChannelFull) GetPinnedMsgId() int32 {
	if m != nil {
		return m.PinnedMsgId
	}
	return 0
}

func (m *ChannelFull) GetMigratedFromChatId() int32 {
	if m != nil {
		return m.MigratedFromChatId
	}
	return 0
}

func (m *ChannelFull) GetAdminRights() *AdminRights {
	if m != nil {
		return m.AdminRights
	}
	return nil
}

func (m *ChannelFull) GetBanRights() *BannerRights {
	if m != nil {
		return m.BanRights
	}
	return nil
}

func (m *ChannelFull) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ChannelFull) GetBotCount() int32 {
	if m != nil {
		return m.BotCount
	}
	return 0
}

func (m *ChannelFull) GetBotId() []int32 {
	if m != nil {
		return m.BotId
	}
	return nil
}

func (m *ChannelFull) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

// 群成员的基础信息
type ChannelParticipant struct {
	UserId              int32                     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InviteId            int32                     `protobuf:"varint,2,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`
	CanSetUsername      bool                      `protobuf:"varint,3,opt,name=can_set_username,json=canSetUsername,proto3" json:"can_set_username,omitempty"`
	CanViewParticipants bool                      `protobuf:"varint,4,opt,name=can_view_participants,json=canViewParticipants,proto3" json:"can_view_participants,omitempty"`
	IsCreator           bool                      `protobuf:"varint,5,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"`
	IsAdmin             bool                      `protobuf:"varint,6,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	IsBan               bool                      `protobuf:"varint,7,opt,name=is_ban,json=isBan,proto3" json:"is_ban,omitempty"`
	JoinTime            int32                     `protobuf:"varint,8,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	AdRight             *AdminRights              `protobuf:"bytes,9,opt,name=ad_right,json=adRight" json:"ad_right,omitempty"`
	BanRight            *BannerRights             `protobuf:"bytes,10,opt,name=ban_right,json=banRight" json:"ban_right,omitempty"`
	Resultcode          chatcommon.ChatResultCode `protobuf:"varint,11,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChannelParticipant) Reset()         { *m = ChannelParticipant{} }
func (m *ChannelParticipant) String() string { return proto.CompactTextString(m) }
func (*ChannelParticipant) ProtoMessage()    {}
func (*ChannelParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{7}
}

func (m *ChannelParticipant) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelParticipant) GetInviteId() int32 {
	if m != nil {
		return m.InviteId
	}
	return 0
}

func (m *ChannelParticipant) GetCanSetUsername() bool {
	if m != nil {
		return m.CanSetUsername
	}
	return false
}

func (m *ChannelParticipant) GetCanViewParticipants() bool {
	if m != nil {
		return m.CanViewParticipants
	}
	return false
}

func (m *ChannelParticipant) GetIsCreator() bool {
	if m != nil {
		return m.IsCreator
	}
	return false
}

func (m *ChannelParticipant) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *ChannelParticipant) GetIsBan() bool {
	if m != nil {
		return m.IsBan
	}
	return false
}

func (m *ChannelParticipant) GetJoinTime() int32 {
	if m != nil {
		return m.JoinTime
	}
	return 0
}

func (m *ChannelParticipant) GetAdRight() *AdminRights {
	if m != nil {
		return m.AdRight
	}
	return nil
}

func (m *ChannelParticipant) GetBanRight() *BannerRights {
	if m != nil {
		return m.BanRight
	}
	return nil
}

func (m *ChannelParticipant) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

// ------------------------------------------------------------------------------
// 更新超级群/频道的 邀请链接
type ChannleId struct {
	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,2,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *ChannleId) Reset()                    { *m = ChannleId{} }
func (m *ChannleId) String() string            { return proto.CompactTextString(m) }
func (*ChannleId) ProtoMessage()               {}
func (*ChannleId) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{8} }

func (m *ChannleId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannleId) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type ChannelLittleInfo struct {
	ChannelId          int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Title              string                    `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ExportedInviteLink string                    `protobuf:"bytes,3,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"`
	Resultcode         chatcommon.ChatResultCode `protobuf:"varint,4,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChannelLittleInfo) Reset()                    { *m = ChannelLittleInfo{} }
func (m *ChannelLittleInfo) String() string            { return proto.CompactTextString(m) }
func (*ChannelLittleInfo) ProtoMessage()               {}
func (*ChannelLittleInfo) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{9} }

func (m *ChannelLittleInfo) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelLittleInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChannelLittleInfo) GetExportedInviteLink() string {
	if m != nil {
		return m.ExportedInviteLink
	}
	return ""
}

func (m *ChannelLittleInfo) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

type ChannleUsersId struct {
	ChannelId  int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     []int32                   `protobuf:"varint,2,rep,packed,name=user_id,json=userId" json:"user_id,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChannleUsersId) Reset()                    { *m = ChannleUsersId{} }
func (m *ChannleUsersId) String() string            { return proto.CompactTextString(m) }
func (*ChannleUsersId) ProtoMessage()               {}
func (*ChannleUsersId) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{10} }

func (m *ChannleUsersId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannleUsersId) GetUserId() []int32 {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *ChannleUsersId) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

// ------------------------------------------------------------------------------
// 批量获取channel基础信息的操作
type GetChannelsReq struct {
	UserId    int32                     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId []int32                   `protobuf:"varint,2,rep,packed,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *GetChannelsReq) Reset()                    { *m = GetChannelsReq{} }
func (m *GetChannelsReq) String() string            { return proto.CompactTextString(m) }
func (*GetChannelsReq) ProtoMessage()               {}
func (*GetChannelsReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{11} }

func (m *GetChannelsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChannelsReq) GetChannelId() []int32 {
	if m != nil {
		return m.ChannelId
	}
	return nil
}

func (m *GetChannelsReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// channel基础信息的数组
type ChannelBaseArr struct {
	Channel    []*ChannelInfoBase        `protobuf:"bytes,1,rep,name=channel" json:"channel,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChannelBaseArr) Reset()                    { *m = ChannelBaseArr{} }
func (m *ChannelBaseArr) String() string            { return proto.CompactTextString(m) }
func (*ChannelBaseArr) ProtoMessage()               {}
func (*ChannelBaseArr) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{12} }

func (m *ChannelBaseArr) GetChannel() []*ChannelInfoBase {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *ChannelBaseArr) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

// ------------------------------------------------------------------------------
// 添加(主动加入)超级群、频道的用户的请求
type AddChannelUserReq struct {
	ChannelId  int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	InvitorId  int32                     `protobuf:"varint,2,opt,name=invitor_id,json=invitorId,proto3" json:"invitor_id,omitempty"`
	AccessHash int64                     `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Users      []*InvitedUsers           `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	Dlog       *chatcommon.ChatLogPrefix `protobuf:"bytes,5,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *AddChannelUserReq) Reset()         { *m = AddChannelUserReq{} }
func (m *AddChannelUserReq) String() string { return proto.CompactTextString(m) }
func (*AddChannelUserReq) ProtoMessage()    {}
func (*AddChannelUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{13}
}

func (m *AddChannelUserReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *AddChannelUserReq) GetInvitorId() int32 {
	if m != nil {
		return m.InvitorId
	}
	return 0
}

func (m *AddChannelUserReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *AddChannelUserReq) GetUsers() []*InvitedUsers {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *AddChannelUserReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type BoolResult struct {
	B          bool                      `protobuf:"varint,1,opt,name=b,proto3" json:"b,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *BoolResult) Reset()                    { *m = BoolResult{} }
func (m *BoolResult) String() string            { return proto.CompactTextString(m) }
func (*BoolResult) ProtoMessage()               {}
func (*BoolResult) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{14} }

func (m *BoolResult) GetB() bool {
	if m != nil {
		return m.B
	}
	return false
}

func (m *BoolResult) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

// ------------------------------------------------------------------------------
// 踢人或者主动离开超级群、频道的的请求接口
type DelChannelUserReq struct {
	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32                     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsBotUser bool                      `protobuf:"varint,3,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"`
	IsKicked  bool                      `protobuf:"varint,4,opt,name=is_kicked,json=isKicked,proto3" json:"is_kicked,omitempty"`
	KickedId  int32                     `protobuf:"varint,5,opt,name=Kicked_id,json=kickedId,proto3" json:"Kicked_id,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,6,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *DelChannelUserReq) Reset()         { *m = DelChannelUserReq{} }
func (m *DelChannelUserReq) String() string { return proto.CompactTextString(m) }
func (*DelChannelUserReq) ProtoMessage()    {}
func (*DelChannelUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{15}
}

func (m *DelChannelUserReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *DelChannelUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelChannelUserReq) GetIsBotUser() bool {
	if m != nil {
		return m.IsBotUser
	}
	return false
}

func (m *DelChannelUserReq) GetIsKicked() bool {
	if m != nil {
		return m.IsKicked
	}
	return false
}

func (m *DelChannelUserReq) GetKickedId() int32 {
	if m != nil {
		return m.KickedId
	}
	return 0
}

func (m *DelChannelUserReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// ------------------------------------------------------------------------------
// 新增管理员的接口
type AddChannelAdminReq struct {
	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32                     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsBotUser bool                      `protobuf:"varint,3,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"`
	AdRight   *AdminRights              `protobuf:"bytes,4,opt,name=ad_right,json=adRight" json:"ad_right,omitempty"`
	InvitorId int32                     `protobuf:"varint,5,opt,name=invitor_id,json=invitorId,proto3" json:"invitor_id,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,6,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *AddChannelAdminReq) Reset()         { *m = AddChannelAdminReq{} }
func (m *AddChannelAdminReq) String() string { return proto.CompactTextString(m) }
func (*AddChannelAdminReq) ProtoMessage()    {}
func (*AddChannelAdminReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{16}
}

func (m *AddChannelAdminReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *AddChannelAdminReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AddChannelAdminReq) GetIsBotUser() bool {
	if m != nil {
		return m.IsBotUser
	}
	return false
}

func (m *AddChannelAdminReq) GetAdRight() *AdminRights {
	if m != nil {
		return m.AdRight
	}
	return nil
}

func (m *AddChannelAdminReq) GetInvitorId() int32 {
	if m != nil {
		return m.InvitorId
	}
	return 0
}

func (m *AddChannelAdminReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 添加管理结果
type AddAdminResult struct {
	Success    bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	IsAdd      bool                      `protobuf:"varint,2,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *AddAdminResult) Reset()                    { *m = AddAdminResult{} }
func (m *AddAdminResult) String() string            { return proto.CompactTextString(m) }
func (*AddAdminResult) ProtoMessage()               {}
func (*AddAdminResult) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{17} }

func (m *AddAdminResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AddAdminResult) GetIsAdd() bool {
	if m != nil {
		return m.IsAdd
	}
	return false
}

func (m *AddAdminResult) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

// ------------------------------------------------------------------------------
// 超级群/频道 的按类型的偏移获取
type ParticipantReq struct {
	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Offset    int32                     `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int32                     `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	PartType  int32                     `protobuf:"varint,4,opt,name=part_type,json=partType,proto3" json:"part_type,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,5,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *ParticipantReq) Reset()                    { *m = ParticipantReq{} }
func (m *ParticipantReq) String() string            { return proto.CompactTextString(m) }
func (*ParticipantReq) ProtoMessage()               {}
func (*ParticipantReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{18} }

func (m *ParticipantReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ParticipantReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ParticipantReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ParticipantReq) GetPartType() int32 {
	if m != nil {
		return m.PartType
	}
	return 0
}

func (m *ParticipantReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 群成员的列表
type ChannelParticipantArr struct {
	TotalCount int32                     `protobuf:"varint,1,opt,name=TotalCount,json=totalCount,proto3" json:"TotalCount,omitempty"`
	Part       []*ChannelParticipant     `protobuf:"bytes,2,rep,name=part" json:"part,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChannelParticipantArr) Reset()         { *m = ChannelParticipantArr{} }
func (m *ChannelParticipantArr) String() string { return proto.CompactTextString(m) }
func (*ChannelParticipantArr) ProtoMessage()    {}
func (*ChannelParticipantArr) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{19}
}

func (m *ChannelParticipantArr) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ChannelParticipantArr) GetPart() []*ChannelParticipant {
	if m != nil {
		return m.Part
	}
	return nil
}

func (m *ChannelParticipantArr) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

// ------------------------------------------------------------------------------
type ChannelUserName struct {
	UserName string                    `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Dlog     *chatcommon.ChatLogPrefix `protobuf:"bytes,2,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *ChannelUserName) Reset()                    { *m = ChannelUserName{} }
func (m *ChannelUserName) String() string            { return proto.CompactTextString(m) }
func (*ChannelUserName) ProtoMessage()               {}
func (*ChannelUserName) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{20} }

func (m *ChannelUserName) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ChannelUserName) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// ------------------------------------------------------------------------------
type ChannelLink struct {
	ExportLink string                    `protobuf:"bytes,1,opt,name=export_link,json=exportLink,proto3" json:"export_link,omitempty"`
	Dlog       *chatcommon.ChatLogPrefix `protobuf:"bytes,2,opt,name=dlog" json:"dlog,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChannelLink) Reset()                    { *m = ChannelLink{} }
func (m *ChannelLink) String() string            { return proto.CompactTextString(m) }
func (*ChannelLink) ProtoMessage()               {}
func (*ChannelLink) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{21} }

func (m *ChannelLink) GetExportLink() string {
	if m != nil {
		return m.ExportLink
	}
	return ""
}

func (m *ChannelLink) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

func (m *ChannelLink) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

// ------------------------------------------------------------------------------
// 更新群about请求
type UpdateAbout struct {
	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	About     string                    `protobuf:"bytes,2,opt,name=about,proto3" json:"about,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *UpdateAbout) Reset()                    { *m = UpdateAbout{} }
func (m *UpdateAbout) String() string            { return proto.CompactTextString(m) }
func (*UpdateAbout) ProtoMessage()               {}
func (*UpdateAbout) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{22} }

func (m *UpdateAbout) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateAbout) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *UpdateAbout) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// ------------------------------------------------------------------------------
// 更新群名称请求
type UpdateTitle struct {
	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Title     string                    `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *UpdateTitle) Reset()                    { *m = UpdateTitle{} }
func (m *UpdateTitle) String() string            { return proto.CompactTextString(m) }
func (*UpdateTitle) ProtoMessage()               {}
func (*UpdateTitle) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{23} }

func (m *UpdateTitle) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateTitle) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 更新群头像请求
type UpdatePhoto struct {
	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Photo     string                    `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *UpdatePhoto) Reset()                    { *m = UpdatePhoto{} }
func (m *UpdatePhoto) String() string            { return proto.CompactTextString(m) }
func (*UpdatePhoto) ProtoMessage()               {}
func (*UpdatePhoto) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{24} }

func (m *UpdatePhoto) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdatePhoto) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *UpdatePhoto) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 更新群名称UserName
type UpdateUserName struct {
	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Username  string                    `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *UpdateUserName) Reset()                    { *m = UpdateUserName{} }
func (m *UpdateUserName) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserName) ProtoMessage()               {}
func (*UpdateUserName) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{25} }

func (m *UpdateUserName) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateUserName) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UpdateUserName) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 更新pin msg id 的请求
type UpdatePinMsgId struct {
	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PinMsgid  int32                     `protobuf:"varint,2,opt,name=pin_msgid,json=pinMsgid,proto3" json:"pin_msgid,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *UpdatePinMsgId) Reset()                    { *m = UpdatePinMsgId{} }
func (m *UpdatePinMsgId) String() string            { return proto.CompactTextString(m) }
func (*UpdatePinMsgId) ProtoMessage()               {}
func (*UpdatePinMsgId) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{26} }

func (m *UpdatePinMsgId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdatePinMsgId) GetPinMsgid() int32 {
	if m != nil {
		return m.PinMsgid
	}
	return 0
}

func (m *UpdatePinMsgId) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// ------------------------------------------------------------------------------
// 更新超级群/频道的 邀请链接
type UpdateChannelDemo struct {
	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Democracy bool                      `protobuf:"varint,2,opt,name=democracy,proto3" json:"democracy,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *UpdateChannelDemo) Reset()         { *m = UpdateChannelDemo{} }
func (m *UpdateChannelDemo) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelDemo) ProtoMessage()    {}
func (*UpdateChannelDemo) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{27}
}

func (m *UpdateChannelDemo) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChannelDemo) GetDemocracy() bool {
	if m != nil {
		return m.Democracy
	}
	return false
}

func (m *UpdateChannelDemo) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
type InvitedUsers struct {
	UserId    int32                     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsBotUser bool                      `protobuf:"varint,2,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *InvitedUsers) Reset()                    { *m = InvitedUsers{} }
func (m *InvitedUsers) String() string            { return proto.CompactTextString(m) }
func (*InvitedUsers) ProtoMessage()               {}
func (*InvitedUsers) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{28} }

func (m *InvitedUsers) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *InvitedUsers) GetIsBotUser() bool {
	if m != nil {
		return m.IsBotUser
	}
	return false
}

func (m *InvitedUsers) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

func init() {
	proto.RegisterType((*AdminRights)(nil), "channelserver.AdminRights")
	proto.RegisterType((*BannerRights)(nil), "channelserver.BannerRights")
	proto.RegisterType((*CreateChannelReq)(nil), "channelserver.CreateChannelReq")
	proto.RegisterType((*ChannelInfoBase)(nil), "channelserver.ChannelInfoBase")
	proto.RegisterType((*MigrateCreateReq)(nil), "channelserver.MigrateCreateReq")
	proto.RegisterType((*ChannelReq)(nil), "channelserver.ChannelReq")
	proto.RegisterType((*ChannelFull)(nil), "channelserver.ChannelFull")
	proto.RegisterType((*ChannelParticipant)(nil), "channelserver.ChannelParticipant")
	proto.RegisterType((*ChannleId)(nil), "channelserver.ChannleId")
	proto.RegisterType((*ChannelLittleInfo)(nil), "channelserver.ChannelLittleInfo")
	proto.RegisterType((*ChannleUsersId)(nil), "channelserver.ChannleUsersId")
	proto.RegisterType((*GetChannelsReq)(nil), "channelserver.GetChannelsReq")
	proto.RegisterType((*ChannelBaseArr)(nil), "channelserver.ChannelBaseArr")
	proto.RegisterType((*AddChannelUserReq)(nil), "channelserver.AddChannelUserReq")
	proto.RegisterType((*BoolResult)(nil), "channelserver.BoolResult")
	proto.RegisterType((*DelChannelUserReq)(nil), "channelserver.DelChannelUserReq")
	proto.RegisterType((*AddChannelAdminReq)(nil), "channelserver.AddChannelAdminReq")
	proto.RegisterType((*AddAdminResult)(nil), "channelserver.AddAdminResult")
	proto.RegisterType((*ParticipantReq)(nil), "channelserver.ParticipantReq")
	proto.RegisterType((*ChannelParticipantArr)(nil), "channelserver.ChannelParticipantArr")
	proto.RegisterType((*ChannelUserName)(nil), "channelserver.ChannelUserName")
	proto.RegisterType((*ChannelLink)(nil), "channelserver.ChannelLink")
	proto.RegisterType((*UpdateAbout)(nil), "channelserver.UpdateAbout")
	proto.RegisterType((*UpdateTitle)(nil), "channelserver.UpdateTitle")
	proto.RegisterType((*UpdatePhoto)(nil), "channelserver.UpdatePhoto")
	proto.RegisterType((*UpdateUserName)(nil), "channelserver.UpdateUserName")
	proto.RegisterType((*UpdatePinMsgId)(nil), "channelserver.UpdatePinMsgId")
	proto.RegisterType((*UpdateChannelDemo)(nil), "channelserver.UpdateChannelDemo")
	proto.RegisterType((*InvitedUsers)(nil), "channelserver.InvitedUsers")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChannelServerService service

type ChannelServerServiceClient interface {
	// 创建频道
	CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*ChannelInfoBase, error)
	// 由普通群升级为超级群，将原来为加密的群就平移到加密，名称、成员依次同等级权限的移动
	MigrateCreate(ctx context.Context, in *MigrateCreateReq, opts ...grpc.CallOption) (*ChannelInfoBase, error)
	// 获取超级群/channel基础信息的完整信息
	GetFullChannel(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*ChannelFull, error)
	// 获取超级群基本信息的操作
	GetChannelInfo(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*ChannelInfoBase, error)
	GetChannelBaseInfo(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannelInfoBase, error)
	// 机器人获取基本信息
	GetChannelLittleInfo(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannelLittleInfo, error)
	// 批量获取channel的基础信息
	GetChannelInfoArr(ctx context.Context, in *GetChannelsReq, opts ...grpc.CallOption) (*ChannelBaseArr, error)
	// 加普通成员到超级群/频道
	AddChannelUser(ctx context.Context, in *AddChannelUserReq, opts ...grpc.CallOption) (*BoolResult, error)
	// 群成员减少的接口
	DelChannelUser(ctx context.Context, in *DelChannelUserReq, opts ...grpc.CallOption) (*BoolResult, error)
	// 设置管理员/新增成员直接是管理员
	AddChannelAdmin(ctx context.Context, in *AddChannelAdminReq, opts ...grpc.CallOption) (*AddAdminResult, error)
	// 撤销管理员权限
	RevokeChannelAdmin(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*BoolResult, error)
	// 解散超级群/频道的操作(需要判断userId 是不是创建者)
	DeleteChannel(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*BoolResult, error)
	// 偏移获取超级群/频道成员列表
	GetChannelParticipants(ctx context.Context, in *ParticipantReq, opts ...grpc.CallOption) (*ChannelParticipantArr, error)
	// 通过username来查找超级群
	GetChannelByUserName(ctx context.Context, in *ChannelUserName, opts ...grpc.CallOption) (*ChannelBaseArr, error)
	// 根据群链接来查询超级群/频道信息
	GetChannelByLink(ctx context.Context, in *ChannelLink, opts ...grpc.CallOption) (*ChannelInfoBase, error)
	// 编辑群about
	UpdateChannelAbout(ctx context.Context, in *UpdateAbout, opts ...grpc.CallOption) (*BoolResult, error)
	// 编辑群名称
	UpdateChannelTitle(ctx context.Context, in *UpdateTitle, opts ...grpc.CallOption) (*BoolResult, error)
	// 编辑群头像
	UpdateChannelPhoto(ctx context.Context, in *UpdatePhoto, opts ...grpc.CallOption) (*BoolResult, error)
	// 更新群的username
	// 编辑群头像
	UpdateChannelUserName(ctx context.Context, in *UpdateUserName, opts ...grpc.CallOption) (*BoolResult, error)
	// 更新群邀请链接
	UpdateChannelLink(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannelLink, error)
	// 更新群民主性
	// 更新群邀请链接
	UpdateChannelDemocracy(ctx context.Context, in *UpdateChannelDemo, opts ...grpc.CallOption) (*BoolResult, error)
	// 获取频道所有用户id
	GetChannelUsersid(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannleUsersId, error)
	// 获取成员信息
	GetChannelPaticipantInfo(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*ChannelParticipant, error)
}

type channelServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewChannelServerServiceClient(cc *grpc.ClientConn) ChannelServerServiceClient {
	return &channelServerServiceClient{cc}
}

func (c *channelServerServiceClient) CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*ChannelInfoBase, error) {
	out := new(ChannelInfoBase)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/CreateChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) MigrateCreate(ctx context.Context, in *MigrateCreateReq, opts ...grpc.CallOption) (*ChannelInfoBase, error) {
	out := new(ChannelInfoBase)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/MigrateCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetFullChannel(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*ChannelFull, error) {
	out := new(ChannelFull)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/GetFullChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelInfo(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*ChannelInfoBase, error) {
	out := new(ChannelInfoBase)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelBaseInfo(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannelInfoBase, error) {
	out := new(ChannelInfoBase)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelBaseInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelLittleInfo(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannelLittleInfo, error) {
	out := new(ChannelLittleInfo)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelLittleInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelInfoArr(ctx context.Context, in *GetChannelsReq, opts ...grpc.CallOption) (*ChannelBaseArr, error) {
	out := new(ChannelBaseArr)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelInfoArr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) AddChannelUser(ctx context.Context, in *AddChannelUserReq, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/AddChannelUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) DelChannelUser(ctx context.Context, in *DelChannelUserReq, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/DelChannelUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) AddChannelAdmin(ctx context.Context, in *AddChannelAdminReq, opts ...grpc.CallOption) (*AddAdminResult, error) {
	out := new(AddAdminResult)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/AddChannelAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) RevokeChannelAdmin(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/RevokeChannelAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) DeleteChannel(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/DeleteChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelParticipants(ctx context.Context, in *ParticipantReq, opts ...grpc.CallOption) (*ChannelParticipantArr, error) {
	out := new(ChannelParticipantArr)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelParticipants", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelByUserName(ctx context.Context, in *ChannelUserName, opts ...grpc.CallOption) (*ChannelBaseArr, error) {
	out := new(ChannelBaseArr)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelByUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelByLink(ctx context.Context, in *ChannelLink, opts ...grpc.CallOption) (*ChannelInfoBase, error) {
	out := new(ChannelInfoBase)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelByLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelAbout(ctx context.Context, in *UpdateAbout, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/UpdateChannelAbout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelTitle(ctx context.Context, in *UpdateTitle, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/UpdateChannelTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelPhoto(ctx context.Context, in *UpdatePhoto, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/UpdateChannelPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelUserName(ctx context.Context, in *UpdateUserName, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/UpdateChannelUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelLink(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannelLink, error) {
	out := new(ChannelLink)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/UpdateChannelLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelDemocracy(ctx context.Context, in *UpdateChannelDemo, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/UpdateChannelDemocracy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelUsersid(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannleUsersId, error) {
	out := new(ChannleUsersId)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelUsersid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelPaticipantInfo(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*ChannelParticipant, error) {
	out := new(ChannelParticipant)
	err := grpc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelPaticipantInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChannelServerService service

type ChannelServerServiceServer interface {
	// 创建频道
	CreateChannel(context.Context, *CreateChannelReq) (*ChannelInfoBase, error)
	// 由普通群升级为超级群，将原来为加密的群就平移到加密，名称、成员依次同等级权限的移动
	MigrateCreate(context.Context, *MigrateCreateReq) (*ChannelInfoBase, error)
	// 获取超级群/channel基础信息的完整信息
	GetFullChannel(context.Context, *ChannelReq) (*ChannelFull, error)
	// 获取超级群基本信息的操作
	GetChannelInfo(context.Context, *ChannelReq) (*ChannelInfoBase, error)
	GetChannelBaseInfo(context.Context, *ChannleId) (*ChannelInfoBase, error)
	// 机器人获取基本信息
	GetChannelLittleInfo(context.Context, *ChannleId) (*ChannelLittleInfo, error)
	// 批量获取channel的基础信息
	GetChannelInfoArr(context.Context, *GetChannelsReq) (*ChannelBaseArr, error)
	// 加普通成员到超级群/频道
	AddChannelUser(context.Context, *AddChannelUserReq) (*BoolResult, error)
	// 群成员减少的接口
	DelChannelUser(context.Context, *DelChannelUserReq) (*BoolResult, error)
	// 设置管理员/新增成员直接是管理员
	AddChannelAdmin(context.Context, *AddChannelAdminReq) (*AddAdminResult, error)
	// 撤销管理员权限
	RevokeChannelAdmin(context.Context, *ChannelReq) (*BoolResult, error)
	// 解散超级群/频道的操作(需要判断userId 是不是创建者)
	DeleteChannel(context.Context, *ChannelReq) (*BoolResult, error)
	// 偏移获取超级群/频道成员列表
	GetChannelParticipants(context.Context, *ParticipantReq) (*ChannelParticipantArr, error)
	// 通过username来查找超级群
	GetChannelByUserName(context.Context, *ChannelUserName) (*ChannelBaseArr, error)
	// 根据群链接来查询超级群/频道信息
	GetChannelByLink(context.Context, *ChannelLink) (*ChannelInfoBase, error)
	// 编辑群about
	UpdateChannelAbout(context.Context, *UpdateAbout) (*BoolResult, error)
	// 编辑群名称
	UpdateChannelTitle(context.Context, *UpdateTitle) (*BoolResult, error)
	// 编辑群头像
	UpdateChannelPhoto(context.Context, *UpdatePhoto) (*BoolResult, error)
	// 更新群的username
	// 编辑群头像
	UpdateChannelUserName(context.Context, *UpdateUserName) (*BoolResult, error)
	// 更新群邀请链接
	UpdateChannelLink(context.Context, *ChannleId) (*ChannelLink, error)
	// 更新群民主性
	// 更新群邀请链接
	UpdateChannelDemocracy(context.Context, *UpdateChannelDemo) (*BoolResult, error)
	// 获取频道所有用户id
	GetChannelUsersid(context.Context, *ChannleId) (*ChannleUsersId, error)
	// 获取成员信息
	GetChannelPaticipantInfo(context.Context, *ChannelReq) (*ChannelParticipant, error)
}

func RegisterChannelServerServiceServer(s *grpc.Server, srv ChannelServerServiceServer) {
	s.RegisterService(&_ChannelServerService_serviceDesc, srv)
}

func _ChannelServerService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CreateChannel(ctx, req.(*CreateChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_MigrateCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).MigrateCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/MigrateCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).MigrateCreate(ctx, req.(*MigrateCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetFullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetFullChannel(ctx, req.(*ChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelInfo(ctx, req.(*ChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelBaseInfo(ctx, req.(*ChannleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelLittleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelLittleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelLittleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelLittleInfo(ctx, req.(*ChannleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelInfoArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelInfoArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelInfoArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelInfoArr(ctx, req.(*GetChannelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_AddChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChannelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).AddChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/AddChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).AddChannelUser(ctx, req.(*AddChannelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_DelChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChannelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).DelChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/DelChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).DelChannelUser(ctx, req.(*DelChannelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_AddChannelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChannelAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).AddChannelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/AddChannelAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).AddChannelAdmin(ctx, req.(*AddChannelAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_RevokeChannelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).RevokeChannelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/RevokeChannelAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).RevokeChannelAdmin(ctx, req.(*ChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).DeleteChannel(ctx, req.(*ChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelParticipants(ctx, req.(*ParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelByUserName(ctx, req.(*ChannelUserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelByLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelByLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelByLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelByLink(ctx, req.(*ChannelLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/UpdateChannelAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelAbout(ctx, req.(*UpdateAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/UpdateChannelTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelTitle(ctx, req.(*UpdateTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/UpdateChannelPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelPhoto(ctx, req.(*UpdatePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/UpdateChannelUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelUserName(ctx, req.(*UpdateUserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/UpdateChannelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelLink(ctx, req.(*ChannleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelDemocracy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelDemo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelDemocracy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/UpdateChannelDemocracy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelDemocracy(ctx, req.(*UpdateChannelDemo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelUsersid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelUsersid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelUsersid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelUsersid(ctx, req.(*ChannleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelPaticipantInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelPaticipantInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelPaticipantInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelPaticipantInfo(ctx, req.(*ChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "channelserver.ChannelServerService",
	HandlerType: (*ChannelServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _ChannelServerService_CreateChannel_Handler,
		},
		{
			MethodName: "MigrateCreate",
			Handler:    _ChannelServerService_MigrateCreate_Handler,
		},
		{
			MethodName: "GetFullChannel",
			Handler:    _ChannelServerService_GetFullChannel_Handler,
		},
		{
			MethodName: "GetChannelInfo",
			Handler:    _ChannelServerService_GetChannelInfo_Handler,
		},
		{
			MethodName: "GetChannelBaseInfo",
			Handler:    _ChannelServerService_GetChannelBaseInfo_Handler,
		},
		{
			MethodName: "GetChannelLittleInfo",
			Handler:    _ChannelServerService_GetChannelLittleInfo_Handler,
		},
		{
			MethodName: "GetChannelInfoArr",
			Handler:    _ChannelServerService_GetChannelInfoArr_Handler,
		},
		{
			MethodName: "AddChannelUser",
			Handler:    _ChannelServerService_AddChannelUser_Handler,
		},
		{
			MethodName: "DelChannelUser",
			Handler:    _ChannelServerService_DelChannelUser_Handler,
		},
		{
			MethodName: "AddChannelAdmin",
			Handler:    _ChannelServerService_AddChannelAdmin_Handler,
		},
		{
			MethodName: "RevokeChannelAdmin",
			Handler:    _ChannelServerService_RevokeChannelAdmin_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _ChannelServerService_DeleteChannel_Handler,
		},
		{
			MethodName: "GetChannelParticipants",
			Handler:    _ChannelServerService_GetChannelParticipants_Handler,
		},
		{
			MethodName: "GetChannelByUserName",
			Handler:    _ChannelServerService_GetChannelByUserName_Handler,
		},
		{
			MethodName: "GetChannelByLink",
			Handler:    _ChannelServerService_GetChannelByLink_Handler,
		},
		{
			MethodName: "UpdateChannelAbout",
			Handler:    _ChannelServerService_UpdateChannelAbout_Handler,
		},
		{
			MethodName: "UpdateChannelTitle",
			Handler:    _ChannelServerService_UpdateChannelTitle_Handler,
		},
		{
			MethodName: "UpdateChannelPhoto",
			Handler:    _ChannelServerService_UpdateChannelPhoto_Handler,
		},
		{
			MethodName: "UpdateChannelUserName",
			Handler:    _ChannelServerService_UpdateChannelUserName_Handler,
		},
		{
			MethodName: "UpdateChannelLink",
			Handler:    _ChannelServerService_UpdateChannelLink_Handler,
		},
		{
			MethodName: "UpdateChannelDemocracy",
			Handler:    _ChannelServerService_UpdateChannelDemocracy_Handler,
		},
		{
			MethodName: "GetChannelUsersid",
			Handler:    _ChannelServerService_GetChannelUsersid_Handler,
		},
		{
			MethodName: "GetChannelPaticipantInfo",
			Handler:    _ChannelServerService_GetChannelPaticipantInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channelserver/channelservice.proto",
}

func (m *AdminRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRights) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChangeGroupInfo {
		dAtA[i] = 0x8
		i++
		if m.ChangeGroupInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DeleteMessages {
		dAtA[i] = 0x10
		i++
		if m.DeleteMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BanUsers {
		dAtA[i] = 0x18
		i++
		if m.BanUsers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PinMessages {
		dAtA[i] = 0x20
		i++
		if m.PinMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AddNewAdmin {
		dAtA[i] = 0x28
		i++
		if m.AddNewAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PromotedBy != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.PromotedBy))
	}
	if m.PostMessages {
		dAtA[i] = 0x38
		i++
		if m.PostMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EditMessages {
		dAtA[i] = 0x40
		i++
		if m.EditMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InviteUsers {
		dAtA[i] = 0x48
		i++
		if m.InviteUsers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InviteLink {
		dAtA[i] = 0x50
		i++
		if m.InviteLink {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *BannerRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannerRights) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CanReadMessages {
		dAtA[i] = 0x8
		i++
		if m.CanReadMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendMessge {
		dAtA[i] = 0x10
		i++
		if m.CanSendMessge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendMedia {
		dAtA[i] = 0x18
		i++
		if m.CanSendMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendSticker {
		dAtA[i] = 0x20
		i++
		if m.CanSendSticker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanEmbedLinks {
		dAtA[i] = 0x28
		i++
		if m.CanEmbedLinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickedBy != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.KickedBy))
	}
	if m.UntilDate != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UntilDate))
	}
	if m.CanSendGifs {
		dAtA[i] = 0x40
		i++
		if m.CanSendGifs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendGames {
		dAtA[i] = 0x48
		i++
		if m.CanSendGames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendInline {
		dAtA[i] = 0x50
		i++
		if m.CanSendInline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.CreatorId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.CreatorId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.Broadcast {
		dAtA[i] = 0x30
		i++
		if m.Broadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Megagroup {
		dAtA[i] = 0x38
		i++
		if m.Megagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Cluster != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Cluster))
	}
	if m.Date != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Date))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n1, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ChannelInfoBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelInfoBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.Encry {
		dAtA[i] = 0x18
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Broadcast {
		dAtA[i] = 0x20
		i++
		if m.Broadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Verified {
		dAtA[i] = 0x28
		i++
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Megagroup {
		dAtA[i] = 0x30
		i++
		if m.Megagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Restricted {
		dAtA[i] = 0x38
		i++
		if m.Restricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Democracy {
		dAtA[i] = 0x40
		i++
		if m.Democracy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Signatures {
		dAtA[i] = 0x48
		i++
		if m.Signatures {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Min {
		dAtA[i] = 0x50
		i++
		if m.Min {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Date != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Date))
	}
	if m.Version != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Version))
	}
	if len(m.RestrictionReason) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.RestrictionReason)))
		i += copy(dAtA[i:], m.RestrictionReason)
	}
	if m.Cluster != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Cluster))
	}
	if m.Moderator {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.Moderator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Editor {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.Editor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Left {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.Left {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Kicked {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.Kicked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MigratedFromChatId != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.MigratedFromChatId))
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *MigrateCreateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MigrateCreateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.CreatorId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.CreatorId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Cluster != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Cluster))
	}
	if m.Date != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Date))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n2, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n3, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ChannelFull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelFull) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channelinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Channelinfo.Size()))
		n4, err := m.Channelinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.ExportedInviteLink) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ExportedInviteLink)))
		i += copy(dAtA[i:], m.ExportedInviteLink)
	}
	if m.ParticipantsCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ParticipantsCount))
	}
	if m.AdminsCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BannedCount))
	}
	if m.PinnedMsgId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.PinnedMsgId))
	}
	if m.MigratedFromChatId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.MigratedFromChatId))
	}
	if m.AdminRights != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AdminRights.Size()))
		n5, err := m.AdminRights.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.BanRights != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BanRights.Size()))
		n6, err := m.BanRights.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.BotCount != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BotCount))
	}
	if len(m.BotId) > 0 {
		dAtA8 := make([]byte, len(m.BotId)*10)
		var j7 int
		for _, num1 := range m.BotId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x6a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ChannelParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelParticipant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.InviteId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.InviteId))
	}
	if m.CanSetUsername {
		dAtA[i] = 0x18
		i++
		if m.CanSetUsername {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanViewParticipants {
		dAtA[i] = 0x20
		i++
		if m.CanViewParticipants {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsCreator {
		dAtA[i] = 0x28
		i++
		if m.IsCreator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAdmin {
		dAtA[i] = 0x30
		i++
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBan {
		dAtA[i] = 0x38
		i++
		if m.IsBan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.JoinTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.JoinTime))
	}
	if m.AdRight != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AdRight.Size()))
		n9, err := m.AdRight.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.BanRight != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BanRight.Size()))
		n10, err := m.BanRight.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ChannleId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannleId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n11, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *ChannelLittleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelLittleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.ExportedInviteLink) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ExportedInviteLink)))
		i += copy(dAtA[i:], m.ExportedInviteLink)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ChannleUsersId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannleUsersId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.UserId) > 0 {
		dAtA13 := make([]byte, len(m.UserId)*10)
		var j12 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChannelsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.ChannelId) > 0 {
		dAtA15 := make([]byte, len(m.ChannelId)*10)
		var j14 int
		for _, num1 := range m.ChannelId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n16, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *ChannelBaseArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelBaseArr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		for _, msg := range m.Channel {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChannelservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *AddChannelUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddChannelUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.InvitorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.InvitorId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x22
			i++
			i = encodeVarintChannelservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n17, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *BoolResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoolResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.B {
		dAtA[i] = 0x8
		i++
		if m.B {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *DelChannelUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChannelUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.IsBotUser {
		dAtA[i] = 0x18
		i++
		if m.IsBotUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsKicked {
		dAtA[i] = 0x20
		i++
		if m.IsKicked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickedId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.KickedId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n18, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *AddChannelAdminReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddChannelAdminReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.IsBotUser {
		dAtA[i] = 0x18
		i++
		if m.IsBotUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AdRight != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AdRight.Size()))
		n19, err := m.AdRight.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.InvitorId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.InvitorId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n20, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *AddAdminResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAdminResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAdd {
		dAtA[i] = 0x10
		i++
		if m.IsAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Limit))
	}
	if m.PartType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.PartType))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n21, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *ChannelParticipantArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelParticipantArr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.TotalCount))
	}
	if len(m.Part) > 0 {
		for _, msg := range m.Part {
			dAtA[i] = 0x12
			i++
			i = encodeVarintChannelservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ChannelUserName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelUserName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n22, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *ChannelLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelLink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExportLink) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ExportLink)))
		i += copy(dAtA[i:], m.ExportLink)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n23, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *UpdateAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAbout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n24, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *UpdateTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n25, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *UpdatePhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePhoto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n26, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *UpdateUserName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n27, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *UpdatePinMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePinMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.PinMsgid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.PinMsgid))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n28, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *UpdateChannelDemo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelDemo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Democracy {
		dAtA[i] = 0x10
		i++
		if m.Democracy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n29, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *InvitedUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvitedUsers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.IsBotUser {
		dAtA[i] = 0x10
		i++
		if m.IsBotUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n30, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func encodeFixed64Channelservice(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Channelservice(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintChannelservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AdminRights) Size() (n int) {
	var l int
	_ = l
	if m.ChangeGroupInfo {
		n += 2
	}
	if m.DeleteMessages {
		n += 2
	}
	if m.BanUsers {
		n += 2
	}
	if m.PinMessages {
		n += 2
	}
	if m.AddNewAdmin {
		n += 2
	}
	if m.PromotedBy != 0 {
		n += 1 + sovChannelservice(uint64(m.PromotedBy))
	}
	if m.PostMessages {
		n += 2
	}
	if m.EditMessages {
		n += 2
	}
	if m.InviteUsers {
		n += 2
	}
	if m.InviteLink {
		n += 2
	}
	return n
}

func (m *BannerRights) Size() (n int) {
	var l int
	_ = l
	if m.CanReadMessages {
		n += 2
	}
	if m.CanSendMessge {
		n += 2
	}
	if m.CanSendMedia {
		n += 2
	}
	if m.CanSendSticker {
		n += 2
	}
	if m.CanEmbedLinks {
		n += 2
	}
	if m.KickedBy != 0 {
		n += 1 + sovChannelservice(uint64(m.KickedBy))
	}
	if m.UntilDate != 0 {
		n += 1 + sovChannelservice(uint64(m.UntilDate))
	}
	if m.CanSendGifs {
		n += 2
	}
	if m.CanSendGames {
		n += 2
	}
	if m.CanSendInline {
		n += 2
	}
	return n
}

func (m *CreateChannelReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.CreatorId != 0 {
		n += 1 + sovChannelservice(uint64(m.CreatorId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Broadcast {
		n += 2
	}
	if m.Megagroup {
		n += 2
	}
	if m.Cluster != 0 {
		n += 1 + sovChannelservice(uint64(m.Cluster))
	}
	if m.Date != 0 {
		n += 1 + sovChannelservice(uint64(m.Date))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ChannelInfoBase) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.Encry {
		n += 2
	}
	if m.Broadcast {
		n += 2
	}
	if m.Verified {
		n += 2
	}
	if m.Megagroup {
		n += 2
	}
	if m.Restricted {
		n += 2
	}
	if m.Democracy {
		n += 2
	}
	if m.Signatures {
		n += 2
	}
	if m.Min {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovChannelservice(uint64(m.Date))
	}
	if m.Version != 0 {
		n += 1 + sovChannelservice(uint64(m.Version))
	}
	l = len(m.RestrictionReason)
	if l > 0 {
		n += 2 + l + sovChannelservice(uint64(l))
	}
	if m.Cluster != 0 {
		n += 2 + sovChannelservice(uint64(m.Cluster))
	}
	if m.Moderator {
		n += 3
	}
	if m.Editor {
		n += 3
	}
	if m.Left {
		n += 3
	}
	if m.Kicked {
		n += 3
	}
	if m.MigratedFromChatId != 0 {
		n += 2 + sovChannelservice(uint64(m.MigratedFromChatId))
	}
	if m.Resultcode != 0 {
		n += 2 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *MigrateCreateReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.CreatorId != 0 {
		n += 1 + sovChannelservice(uint64(m.CreatorId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChatId))
	}
	if m.Cluster != 0 {
		n += 1 + sovChannelservice(uint64(m.Cluster))
	}
	if m.Date != 0 {
		n += 1 + sovChannelservice(uint64(m.Date))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ChannelReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ChannelFull) Size() (n int) {
	var l int
	_ = l
	if m.Channelinfo != nil {
		l = m.Channelinfo.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	l = len(m.ExportedInviteLink)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.ParticipantsCount != 0 {
		n += 1 + sovChannelservice(uint64(m.ParticipantsCount))
	}
	if m.AdminsCount != 0 {
		n += 1 + sovChannelservice(uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		n += 1 + sovChannelservice(uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		n += 1 + sovChannelservice(uint64(m.BannedCount))
	}
	if m.PinnedMsgId != 0 {
		n += 1 + sovChannelservice(uint64(m.PinnedMsgId))
	}
	if m.MigratedFromChatId != 0 {
		n += 1 + sovChannelservice(uint64(m.MigratedFromChatId))
	}
	if m.AdminRights != nil {
		l = m.AdminRights.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.BanRights != nil {
		l = m.BanRights.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.BotCount != 0 {
		n += 1 + sovChannelservice(uint64(m.BotCount))
	}
	if len(m.BotId) > 0 {
		l = 0
		for _, e := range m.BotId {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ChannelParticipant) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.InviteId != 0 {
		n += 1 + sovChannelservice(uint64(m.InviteId))
	}
	if m.CanSetUsername {
		n += 2
	}
	if m.CanViewParticipants {
		n += 2
	}
	if m.IsCreator {
		n += 2
	}
	if m.IsAdmin {
		n += 2
	}
	if m.IsBan {
		n += 2
	}
	if m.JoinTime != 0 {
		n += 1 + sovChannelservice(uint64(m.JoinTime))
	}
	if m.AdRight != nil {
		l = m.AdRight.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.BanRight != nil {
		l = m.BanRight.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ChannleId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ChannelLittleInfo) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	l = len(m.ExportedInviteLink)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ChannleUsersId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChannelsReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if len(m.ChannelId) > 0 {
		l = 0
		for _, e := range m.ChannelId {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ChannelBaseArr) Size() (n int) {
	var l int
	_ = l
	if len(m.Channel) > 0 {
		for _, e := range m.Channel {
			l = e.Size()
			n += 1 + l + sovChannelservice(uint64(l))
		}
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *AddChannelUserReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.InvitorId != 0 {
		n += 1 + sovChannelservice(uint64(m.InvitorId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovChannelservice(uint64(l))
		}
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *BoolResult) Size() (n int) {
	var l int
	_ = l
	if m.B {
		n += 2
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *DelChannelUserReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.IsBotUser {
		n += 2
	}
	if m.IsKicked {
		n += 2
	}
	if m.KickedId != 0 {
		n += 1 + sovChannelservice(uint64(m.KickedId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *AddChannelAdminReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.IsBotUser {
		n += 2
	}
	if m.AdRight != nil {
		l = m.AdRight.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.InvitorId != 0 {
		n += 1 + sovChannelservice(uint64(m.InvitorId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *AddAdminResult) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.IsAdd {
		n += 2
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Offset != 0 {
		n += 1 + sovChannelservice(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovChannelservice(uint64(m.Limit))
	}
	if m.PartType != 0 {
		n += 1 + sovChannelservice(uint64(m.PartType))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ChannelParticipantArr) Size() (n int) {
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovChannelservice(uint64(m.TotalCount))
	}
	if len(m.Part) > 0 {
		for _, e := range m.Part {
			l = e.Size()
			n += 1 + l + sovChannelservice(uint64(l))
		}
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ChannelUserName) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ChannelLink) Size() (n int) {
	var l int
	_ = l
	l = len(m.ExportLink)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *UpdateAbout) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateTitle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdatePhoto) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateUserName) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdatePinMsgId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.PinMsgid != 0 {
		n += 1 + sovChannelservice(uint64(m.PinMsgid))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChannelDemo) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Democracy {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *InvitedUsers) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.IsBotUser {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func sovChannelservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChannelservice(x uint64) (n int) {
	return sovChannelservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdminRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeGroupInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeGroupInfo = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteMessages = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanUsers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BanUsers = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PinMessages = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddNewAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddNewAdmin = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotedBy", wireType)
			}
			m.PromotedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromotedBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PostMessages = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EditMessages = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUsers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteUsers = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteLink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteLink = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BannerRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BannerRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BannerRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanReadMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanReadMessages = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMessge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMessge = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMedia = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendSticker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendSticker = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanEmbedLinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanEmbedLinks = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedBy", wireType)
			}
			m.KickedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UntilDate", wireType)
			}
			m.UntilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UntilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendGifs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendGifs = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendGames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendGames = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendInline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendInline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorId", wireType)
			}
			m.CreatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Broadcast = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Megagroup = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelInfoBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelInfoBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelInfoBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Broadcast = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Megagroup = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Democracy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Democracy = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Signatures = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestrictionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moderator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Moderator = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Editor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Editor = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Left = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kicked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kicked = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedFromChatId", wireType)
			}
			m.MigratedFromChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedFromChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MigrateCreateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MigrateCreateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MigrateCreateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorId", wireType)
			}
			m.CreatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelFull) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelFull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelFull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channelinfo == nil {
				m.Channelinfo = &ChannelInfoBase{}
			}
			if err := m.Channelinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsCount", wireType)
			}
			m.AdminsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedCount", wireType)
			}
			m.KickedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedCount", wireType)
			}
			m.BannedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedMsgId", wireType)
			}
			m.PinnedMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PinnedMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedFromChatId", wireType)
			}
			m.MigratedFromChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedFromChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminRights == nil {
				m.AdminRights = &AdminRights{}
			}
			if err := m.AdminRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BanRights == nil {
				m.BanRights = &BannerRights{}
			}
			if err := m.BanRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotCount", wireType)
			}
			m.BotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BotId = append(m.BotId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BotId = append(m.BotId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteId", wireType)
			}
			m.InviteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSetUsername", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSetUsername = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanViewParticipants", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanViewParticipants = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCreator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCreator = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBan = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
			}
			m.JoinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdRight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdRight == nil {
				m.AdRight = &AdminRights{}
			}
			if err := m.AdRight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanRight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BanRight == nil {
				m.BanRight = &BannerRights{}
			}
			if err := m.BanRight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannleId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannleId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannleId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelLittleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelLittleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelLittleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannleUsersId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannleUsersId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannleUsersId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelId = append(m.ChannelId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelId = append(m.ChannelId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelBaseArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelBaseArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelBaseArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = append(m.Channel, &ChannelInfoBase{})
			if err := m.Channel[len(m.Channel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddChannelUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddChannelUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddChannelUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitorId", wireType)
			}
			m.InvitorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvitorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &InvitedUsers{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoolResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoolResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoolResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.B = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChannelUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChannelUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChannelUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBotUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBotUser = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsKicked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsKicked = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedId", wireType)
			}
			m.KickedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddChannelAdminReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddChannelAdminReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddChannelAdminReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBotUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBotUser = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdRight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdRight == nil {
				m.AdRight = &AdminRights{}
			}
			if err := m.AdRight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitorId", wireType)
			}
			m.InvitorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvitorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddAdminResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAdminResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAdminResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdd = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartType", wireType)
			}
			m.PartType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelParticipantArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelParticipantArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelParticipantArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Part = append(m.Part, &ChannelParticipant{})
			if err := m.Part[len(m.Part)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelUserName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelUserName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelUserName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePinMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePinMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePinMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinMsgid", wireType)
			}
			m.PinMsgid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PinMsgid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelDemo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelDemo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelDemo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Democracy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Democracy = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvitedUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvitedUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvitedUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBotUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBotUser = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChannelservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChannelservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChannelservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChannelservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChannelservice   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("channelserver/channelservice.proto", fileDescriptorChannelservice) }

var fileDescriptorChannelservice = []byte{
	// 2309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5a, 0x4f, 0x6f, 0x1c, 0x49,
	0x15, 0x77, 0xcf, 0x1f, 0x7b, 0xe6, 0xf5, 0xcc, 0xd8, 0xae, 0xb5, 0xb3, 0x9d, 0x31, 0x71, 0x9c,
	0xd9, 0x15, 0x44, 0x48, 0x9b, 0x65, 0x8d, 0x56, 0x5a, 0xad, 0x84, 0x44, 0xec, 0x90, 0x60, 0x6d,
	0x12, 0xac, 0x76, 0xb2, 0x08, 0x24, 0xd4, 0xaa, 0x99, 0xae, 0x19, 0x17, 0xee, 0xe9, 0x9a, 0xed,
	0xee, 0x71, 0xd6, 0x20, 0xc4, 0x05, 0x10, 0x1f, 0x80, 0x0b, 0x1f, 0x01, 0x3e, 0xc0, 0x5e, 0x39,
	0x70, 0xe1, 0xc8, 0x81, 0x0f, 0x80, 0x72, 0xe1, 0xcc, 0x81, 0x3b, 0x7a, 0x55, 0xd5, 0x3d, 0xd5,
	0x3d, 0xff, 0xd7, 0x82, 0xdb, 0xd4, 0xab, 0x57, 0xaf, 0x5e, 0xbd, 0xf7, 0xab, 0xf7, 0x7e, 0xd5,
	0x36, 0x74, 0x7a, 0x97, 0x34, 0x0c, 0x59, 0x10, 0xb3, 0xe8, 0x9a, 0x45, 0x1f, 0x1a, 0x23, 0xde,
	0x63, 0x8f, 0x46, 0x91, 0x48, 0x04, 0x69, 0xe6, 0x74, 0xda, 0x07, 0xbd, 0x4b, 0x9a, 0xf4, 0xc4,
	0x70, 0x28, 0xc2, 0x0f, 0x27, 0x3f, 0x95, 0x6e, 0xe7, 0x3f, 0x25, 0xb0, 0x1f, 0xfb, 0x43, 0x1e,
	0xba, 0x7c, 0x70, 0x99, 0xc4, 0xe4, 0xdb, 0xb0, 0x8b, 0xab, 0x07, 0xcc, 0x1b, 0x44, 0x62, 0x3c,
	0xf2, 0x78, 0xd8, 0x17, 0x8e, 0x75, 0x64, 0x3d, 0xac, 0xb9, 0xdb, 0x6a, 0xe2, 0x19, 0xca, 0xcf,
	0xc2, 0xbe, 0x20, 0xdf, 0x82, 0x6d, 0x9f, 0x05, 0x2c, 0x61, 0xde, 0x90, 0xc5, 0x31, 0x1d, 0xb0,
	0xd8, 0x29, 0x49, 0xcd, 0x96, 0x12, 0xbf, 0xd0, 0x52, 0x72, 0x00, 0xf5, 0x2e, 0x0d, 0xbd, 0x71,
	0xcc, 0xa2, 0xd8, 0x29, 0x4b, 0x95, 0x5a, 0x97, 0x86, 0xaf, 0x71, 0x4c, 0x1e, 0x40, 0x63, 0xc4,
	0xc3, 0x89, 0x89, 0x8a, 0x9c, 0xb7, 0x47, 0x3c, 0xcc, 0xd6, 0x77, 0xa0, 0x49, 0x7d, 0xdf, 0x0b,
	0xd9, 0x1b, 0x8f, 0xa2, 0xaf, 0x4e, 0x55, 0xe9, 0x50, 0xdf, 0x7f, 0xc9, 0xde, 0x48, 0xf7, 0xc9,
	0x7d, 0xb0, 0x47, 0x91, 0x18, 0x8a, 0x84, 0xf9, 0x5e, 0xf7, 0xc6, 0xd9, 0x3c, 0xb2, 0x1e, 0x56,
	0x5d, 0x48, 0x45, 0x27, 0x37, 0xe4, 0x3d, 0x68, 0x8e, 0x44, 0x9c, 0x4c, 0x36, 0xda, 0x92, 0x46,
	0x1a, 0x28, 0xcc, 0x76, 0x7a, 0x0f, 0x9a, 0xcc, 0xe7, 0x86, 0x52, 0x4d, 0x29, 0xa1, 0x30, 0x53,
	0x7a, 0x00, 0x0d, 0x1e, 0x5e, 0xf3, 0x84, 0xe9, 0x13, 0xd5, 0x95, 0x37, 0x4a, 0xa6, 0x0e, 0x75,
	0x1f, 0xf4, 0xd0, 0x0b, 0x78, 0x78, 0xe5, 0x80, 0xd4, 0x00, 0x25, 0x7a, 0xce, 0xc3, 0xab, 0xce,
	0xef, 0xcb, 0xd0, 0x38, 0xc1, 0x2c, 0x45, 0x46, 0xe0, 0x69, 0xe8, 0x45, 0x8c, 0xfa, 0x93, 0xdd,
	0xd3, 0xc0, 0xd3, 0xd0, 0x65, 0xd4, 0xcf, 0x1c, 0xf8, 0x26, 0xa0, 0xc8, 0x8b, 0x59, 0xa8, 0x74,
	0x07, 0x4c, 0x07, 0xbe, 0xd9, 0xa3, 0xe1, 0x05, 0x0b, 0xa5, 0xe6, 0x80, 0x91, 0xf7, 0xa1, 0x65,
	0xe8, 0xf9, 0x9c, 0xea, 0xe0, 0x37, 0x32, 0x35, 0x9f, 0x53, 0xf2, 0x10, 0x76, 0x32, 0xad, 0x38,
	0xe1, 0xbd, 0x2b, 0x16, 0xe9, 0x24, 0xb4, 0xb4, 0xde, 0x85, 0x92, 0xa6, 0xfb, 0xb2, 0x61, 0x97,
	0xf9, 0xf2, 0x60, 0xb1, 0xce, 0x04, 0xee, 0xfb, 0x03, 0x94, 0xe2, 0xd9, 0x64, 0xbe, 0xaf, 0x70,
	0x85, 0x91, 0x89, 0x9a, 0x12, 0x9c, 0xdc, 0x90, 0x7b, 0x00, 0xe3, 0x30, 0xe1, 0x81, 0xe7, 0xd3,
	0x84, 0xc9, 0x24, 0x54, 0xdd, 0xba, 0x94, 0x3c, 0xa1, 0x09, 0xc3, 0x5c, 0x67, 0xde, 0x0c, 0x78,
	0x3f, 0xcd, 0x80, 0xad, 0x5d, 0x79, 0xc6, 0xfb, 0x71, 0xee, 0x5c, 0x03, 0x3a, 0x64, 0x69, 0x0a,
	0xd2, 0x73, 0x3d, 0x43, 0x59, 0x2e, 0x4a, 0x3c, 0x0c, 0x78, 0xc8, 0x74, 0x1e, 0xd2, 0x28, 0x9d,
	0x49, 0x61, 0xe7, 0xab, 0x12, 0xec, 0x9c, 0x46, 0x8c, 0x26, 0xec, 0x54, 0xdd, 0x1b, 0x97, 0x7d,
	0x81, 0x5e, 0xea, 0x5b, 0xe4, 0x71, 0x5f, 0xe6, 0xa1, 0xea, 0xd6, 0xb5, 0xe4, 0xcc, 0xc7, 0xfc,
	0xd2, 0x5e, 0x8f, 0xc5, 0xb1, 0x77, 0x49, 0xe3, 0x4b, 0x19, 0xfd, 0xb2, 0x0b, 0x4a, 0xf4, 0x43,
	0x1a, 0x5f, 0xca, 0xf5, 0x68, 0x53, 0x44, 0xb8, 0xbe, 0xac, 0xd7, 0x2b, 0xc9, 0x99, 0x4f, 0xf6,
	0xa0, 0x9a, 0xf0, 0x24, 0x60, 0x32, 0xd0, 0x75, 0x57, 0x0d, 0x50, 0x4a, 0xbb, 0x62, 0x9c, 0xc8,
	0xa8, 0xd6, 0x5d, 0x35, 0x20, 0xdf, 0x80, 0x7a, 0x37, 0x12, 0xd4, 0xef, 0xd1, 0x38, 0x91, 0xd1,
	0xac, 0xb9, 0x13, 0x01, 0xce, 0x0e, 0xd9, 0x80, 0xca, 0xdb, 0xaa, 0x21, 0x3d, 0x11, 0x10, 0x07,
	0xb6, 0x7a, 0xc1, 0x38, 0x4e, 0x58, 0x24, 0xe3, 0x58, 0x75, 0xd3, 0x21, 0x21, 0x50, 0x91, 0x09,
	0xa8, 0x4b, 0xb1, 0xfc, 0x4d, 0x3e, 0x80, 0x8a, 0x1f, 0x88, 0x81, 0x0c, 0x93, 0x7d, 0x7c, 0xf7,
	0x91, 0x51, 0x2d, 0x4e, 0x2f, 0x69, 0xf2, 0x5c, 0x0c, 0xce, 0x23, 0xd6, 0xe7, 0x5f, 0xba, 0x52,
	0xad, 0xf3, 0x97, 0x2a, 0x6c, 0xeb, 0x90, 0x61, 0x3d, 0x38, 0xa1, 0x31, 0xbb, 0x75, 0xdc, 0xf6,
	0xa0, 0xca, 0xc2, 0x5e, 0x74, 0xa3, 0x91, 0xaa, 0x06, 0xf9, 0x10, 0x54, 0x8a, 0x21, 0x68, 0x43,
	0xed, 0x9a, 0x45, 0xbc, 0xcf, 0x99, 0xaf, 0xf1, 0x98, 0x8d, 0xf3, 0xe1, 0xd9, 0x2c, 0x86, 0xe7,
	0x10, 0x20, 0x62, 0x71, 0x12, 0xf1, 0x5e, 0xc2, 0x7c, 0x1d, 0x3d, 0x43, 0x82, 0xab, 0x7d, 0x36,
	0x14, 0xbd, 0x88, 0xf6, 0x6e, 0x34, 0x10, 0x27, 0x02, 0x5c, 0x1d, 0xf3, 0x41, 0x48, 0x93, 0x71,
	0x94, 0x41, 0xd0, 0x90, 0x90, 0x1d, 0x28, 0x63, 0xb1, 0x52, 0xa0, 0xc3, 0x9f, 0x93, 0xb4, 0xdb,
	0x66, 0xda, 0xdb, 0x50, 0xc3, 0x42, 0x12, 0xd2, 0x21, 0x73, 0x1a, 0x72, 0x22, 0x1b, 0xe3, 0x8a,
	0xd1, 0xa5, 0x48, 0x84, 0xd3, 0x54, 0x2b, 0xe4, 0x20, 0x4b, 0x5e, 0xcb, 0x48, 0x9e, 0x03, 0x5b,
	0xd7, 0x2c, 0x8a, 0xb9, 0x08, 0x9d, 0x6d, 0x95, 0x6a, 0x3d, 0x24, 0x1f, 0x00, 0x49, 0xcf, 0xc4,
	0x85, 0x2c, 0x31, 0xb1, 0x08, 0x9d, 0x1d, 0x69, 0x70, 0xd7, 0x98, 0x71, 0xe5, 0x84, 0x89, 0x99,
	0xdd, 0x3c, 0x66, 0x30, 0x98, 0xc2, 0x67, 0x11, 0x82, 0xd8, 0x21, 0x3a, 0x98, 0xa9, 0x80, 0xdc,
	0x81, 0x4d, 0x2c, 0x93, 0x22, 0x72, 0xde, 0x91, 0x53, 0x7a, 0x84, 0xce, 0x06, 0xac, 0x9f, 0x38,
	0x7b, 0x52, 0x2a, 0x7f, 0xa3, 0xae, 0x2a, 0x08, 0xce, 0xbe, 0xd2, 0x55, 0x23, 0xf2, 0x11, 0xec,
	0x0f, 0xf9, 0x20, 0xa2, 0x58, 0xc5, 0xfb, 0x91, 0x18, 0x7a, 0x08, 0x41, 0x44, 0xd2, 0x1d, 0xe9,
	0x09, 0x49, 0x27, 0x9f, 0x46, 0x62, 0x88, 0x90, 0x3c, 0xf3, 0xc9, 0xa7, 0x32, 0x87, 0xe3, 0x20,
	0xe9, 0x09, 0x9f, 0x39, 0xef, 0x1e, 0x59, 0x0f, 0x5b, 0xc7, 0xed, 0x22, 0x74, 0x5d, 0xa9, 0x71,
	0x2a, 0x7c, 0xe6, 0x1a, 0xda, 0x9d, 0x7f, 0x59, 0xb0, 0xf3, 0x42, 0x99, 0x54, 0x15, 0xe0, 0xff,
	0x70, 0xf5, 0xdf, 0x85, 0xad, 0xf4, 0x50, 0x15, 0x39, 0xb7, 0xd9, 0x53, 0x07, 0x31, 0xe2, 0x5e,
	0x9d, 0x7d, 0x57, 0x37, 0x67, 0xdc, 0xd5, 0xad, 0xd5, 0xee, 0xea, 0x1f, 0x2c, 0x80, 0xd5, 0xcb,
	0xdb, 0xbb, 0xb0, 0x85, 0x08, 0xc4, 0xb9, 0x92, 0xf2, 0x11, 0x87, 0xd3, 0x87, 0x2f, 0x4f, 0x1d,
	0x3e, 0x75, 0xab, 0xb2, 0x9a, 0x5b, 0xff, 0xae, 0x80, 0xad, 0xdd, 0x7a, 0x3a, 0x0e, 0x02, 0xf2,
	0x7d, 0xb0, 0xb5, 0x17, 0x19, 0xf1, 0xb0, 0x8f, 0x0f, 0x1f, 0xe5, 0x08, 0xcd, 0xa3, 0x42, 0xcd,
	0x71, 0xcd, 0x25, 0xe4, 0x3b, 0xb0, 0xc7, 0xbe, 0x1c, 0x89, 0x08, 0x11, 0x64, 0xb6, 0xe0, 0x92,
	0x84, 0x3b, 0x49, 0xe7, 0xce, 0xb2, 0x56, 0x8c, 0xd7, 0x63, 0x44, 0xa3, 0x84, 0xf7, 0xf8, 0x88,
	0x86, 0x49, 0xec, 0xf5, 0xc4, 0x38, 0x4c, 0x74, 0xde, 0x76, 0xcd, 0x99, 0x53, 0x9c, 0xc0, 0xee,
	0x2f, 0x49, 0x48, 0xaa, 0xa8, 0x92, 0x68, 0x2b, 0x59, 0xa6, 0xa2, 0xfb, 0x9f, 0x52, 0x51, 0xe9,
	0xb4, 0x95, 0x2c, 0x53, 0xe9, 0xa2, 0xd3, 0xa9, 0x8a, 0x4a, 0xad, 0xad, 0x64, 0x4a, 0xa5, 0x03,
	0xcd, 0x11, 0x97, 0x2a, 0xc3, 0x78, 0x80, 0xa9, 0x50, 0xbd, 0xd2, 0x56, 0xc2, 0x17, 0xf1, 0xe0,
	0x6c, 0xc1, 0x7d, 0xa9, 0xcd, 0xbd, 0x2f, 0xdf, 0xd3, 0xfe, 0x7b, 0x91, 0x24, 0x1e, 0xb2, 0x6e,
	0xd9, 0xea, 0xc6, 0x18, 0x31, 0x36, 0x38, 0xa1, 0x3e, 0x9b, 0xe6, 0x29, 0x9f, 0x02, 0x20, 0x97,
	0xd3, 0x8b, 0x55, 0xa7, 0x38, 0x28, 0x2c, 0x36, 0x89, 0x8d, 0x8b, 0xd4, 0x4f, 0xaf, 0xcd, 0xfa,
	0x9b, 0x6d, 0xf6, 0x37, 0x64, 0x87, 0x22, 0xd1, 0x71, 0x68, 0x28, 0xb6, 0xd0, 0x15, 0x89, 0x0a,
	0xc2, 0x3e, 0x6c, 0xe2, 0x24, 0xf7, 0x9d, 0xe6, 0x51, 0xf9, 0x61, 0xd5, 0xad, 0x76, 0xc5, 0xf4,
	0xa5, 0x6f, 0xad, 0x75, 0xe9, 0xff, 0x5a, 0x06, 0xa2, 0x21, 0x74, 0x3e, 0xc9, 0xae, 0x89, 0x79,
	0x2b, 0x87, 0xf9, 0x03, 0xa8, 0x6b, 0x20, 0x65, 0xd7, 0xa1, 0xa6, 0x04, 0x67, 0xfe, 0x84, 0x3c,
	0x25, 0x5e, 0x56, 0xc3, 0xcb, 0x06, 0x79, 0x4a, 0x5e, 0xa7, 0x95, 0xfc, 0x18, 0xf6, 0x51, 0xf3,
	0x9a, 0xb3, 0x37, 0x9e, 0x89, 0x2a, 0xdd, 0xcf, 0xde, 0xe9, 0xd1, 0xf0, 0x73, 0xce, 0xde, 0x18,
	0x2e, 0xc5, 0x78, 0x4d, 0x79, 0xec, 0xe9, 0xda, 0xa1, 0x7b, 0x5b, 0x9d, 0xc7, 0xa7, 0x4a, 0x40,
	0xee, 0x42, 0x8d, 0xc7, 0x9a, 0x12, 0xab, 0xde, 0xb6, 0xc5, 0x63, 0x45, 0x87, 0xf7, 0x61, 0x93,
	0xc7, 0x5e, 0x97, 0x86, 0xba, 0xab, 0x55, 0x79, 0x7c, 0x42, 0x43, 0x3c, 0xcb, 0xcf, 0x05, 0x0f,
	0xbd, 0x84, 0x0f, 0x99, 0xc6, 0x48, 0x0d, 0x05, 0xaf, 0xf8, 0x90, 0x91, 0x8f, 0xa1, 0x46, 0x7d,
	0x95, 0xd9, 0x15, 0x50, 0xb1, 0x45, 0x7d, 0xf9, 0x8b, 0x7c, 0xa2, 0xd8, 0xbd, 0x5a, 0xb7, 0x02,
	0x20, 0x6a, 0x29, 0x20, 0x0a, 0x59, 0xb4, 0xd7, 0xca, 0xe2, 0x4f, 0xa0, 0x2e, 0x93, 0x18, 0x60,
	0x16, 0x96, 0x94, 0xb3, 0xb4, 0x28, 0x95, 0x56, 0x2b, 0x4a, 0x5f, 0x59, 0xb0, 0xab, 0x01, 0xf2,
	0x9c, 0x27, 0x49, 0xc0, 0xe4, 0x6b, 0x67, 0xc9, 0x1e, 0x59, 0x6b, 0x2f, 0x99, 0xad, 0x7d, 0x5e,
	0x35, 0x2a, 0xcf, 0xad, 0x46, 0xf9, 0x98, 0x54, 0xd6, 0x8a, 0xc9, 0x6f, 0x2c, 0x68, 0xe9, 0xa0,
	0xc8, 0x67, 0xc8, 0xf2, 0xc8, 0xe4, 0x0a, 0x7d, 0xd9, 0x00, 0x7d, 0xde, 0x8d, 0xf2, 0x5a, 0x6e,
	0xbc, 0x81, 0xd6, 0x33, 0x96, 0xe8, 0x08, 0xc6, 0xd8, 0x6e, 0xe6, 0xde, 0xad, 0xbc, 0x7b, 0xca,
	0x85, 0x19, 0x89, 0x2b, 0xaf, 0x96, 0xb8, 0xdf, 0xa5, 0xe7, 0x67, 0x01, 0x36, 0x86, 0xc7, 0x51,
	0x44, 0x3e, 0x91, 0xdd, 0x16, 0x25, 0x8e, 0x75, 0x54, 0x5e, 0xa1, 0x99, 0xa4, 0xea, 0x85, 0x08,
	0x94, 0xd6, 0x8a, 0xc0, 0x3f, 0x2c, 0xd8, 0x7d, 0xec, 0xfb, 0xda, 0x36, 0xe6, 0x62, 0x85, 0xa6,
	0x8b, 0x97, 0x1d, 0x71, 0x20, 0x8c, 0xbe, 0x5b, 0xd7, 0x92, 0x55, 0x5a, 0xef, 0x47, 0x50, 0x55,
	0xef, 0xd1, 0x8a, 0x3c, 0x68, 0xf1, 0x0e, 0x2a, 0x8c, 0xf9, 0x12, 0x18, 0xae, 0xd2, 0xcc, 0xe2,
	0x5b, 0x5d, 0x2d, 0xbe, 0x9f, 0x03, 0x9c, 0x08, 0x11, 0xa8, 0x43, 0x93, 0x06, 0x58, 0x5d, 0xfd,
	0x42, 0xb5, 0xba, 0xb7, 0x0e, 0xd7, 0x13, 0x16, 0xac, 0x17, 0xae, 0xb9, 0x1c, 0xe5, 0x10, 0x6c,
	0x2c, 0x7d, 0x42, 0x55, 0x64, 0x5d, 0x8d, 0xeb, 0x3c, 0x3e, 0x11, 0xb2, 0x18, 0xcb, 0x7a, 0x1e,
	0x7b, 0x9a, 0x7e, 0xaa, 0xe2, 0x5b, 0xe3, 0xf1, 0x67, 0x8a, 0x80, 0x1e, 0x40, 0x5d, 0xfd, 0x42,
	0xbb, 0x55, 0xf3, 0xe9, 0x6a, 0xc0, 0x71, 0x73, 0x45, 0x72, 0x63, 0x01, 0x99, 0xa0, 0x40, 0xd5,
	0xce, 0xff, 0xe1, 0xb9, 0xcc, 0xf2, 0x5d, 0x59, 0xbd, 0x7c, 0xe7, 0x61, 0x57, 0x2d, 0xc2, 0x6e,
	0xcd, 0x33, 0xff, 0x0a, 0x5a, 0x8f, 0x7d, 0x5f, 0x9f, 0x55, 0xc2, 0xc4, 0x81, 0xad, 0x78, 0x2c,
	0x51, 0xaa, 0xc1, 0x92, 0x0e, 0x75, 0x8f, 0xa2, 0xbe, 0xaf, 0xbf, 0x5e, 0x54, 0xb1, 0x79, 0xdd,
	0xae, 0xf4, 0xfc, 0xc9, 0x82, 0x96, 0xd1, 0x41, 0x57, 0x08, 0xf7, 0x1d, 0xd8, 0x14, 0xfd, 0x7e,
	0xcc, 0x92, 0x34, 0xda, 0x6a, 0x84, 0xf5, 0x3c, 0xe0, 0x43, 0x9e, 0x12, 0x41, 0x35, 0x40, 0x78,
	0x60, 0xef, 0xf6, 0x92, 0x9b, 0x11, 0xd3, 0xcc, 0xaf, 0x86, 0x82, 0x57, 0x37, 0x23, 0xb6, 0xee,
	0x6d, 0xfa, 0xb3, 0x05, 0xfb, 0xd3, 0x3c, 0x04, 0x8b, 0xd6, 0x21, 0xc0, 0x2b, 0x91, 0xd0, 0x40,
	0x52, 0x20, 0xed, 0x32, 0x24, 0x99, 0x84, 0x7c, 0x0c, 0x15, 0xdc, 0x54, 0xd6, 0x4b, 0xfb, 0xf8,
	0xc1, 0xec, 0x8a, 0x66, 0x86, 0x41, 0xaa, 0xdf, 0x2a, 0xb0, 0x3f, 0xcb, 0x9e, 0xfa, 0x88, 0xb5,
	0x97, 0x48, 0x68, 0x0e, 0xa0, 0x2e, 0x81, 0x2a, 0x39, 0x8f, 0x35, 0x79, 0xb7, 0xca, 0xc9, 0x35,
	0x5b, 0xee, 0x1f, 0xad, 0xec, 0x1d, 0x20, 0xbb, 0xe0, 0x7d, 0xb0, 0x55, 0x6f, 0x54, 0xed, 0x52,
	0x59, 0x07, 0x25, 0xd2, 0xa4, 0x7d, 0x1d, 0xfb, 0xb7, 0x3a, 0xfa, 0x17, 0x60, 0xbf, 0x1e, 0xe1,
	0x9b, 0xeb, 0xb1, 0xa4, 0xab, 0xcb, 0x79, 0x80, 0xe2, 0xb8, 0x25, 0x93, 0xe3, 0xae, 0xd9, 0xc8,
	0xb2, 0x2d, 0x5f, 0x49, 0x16, 0xf1, 0xb5, 0xa8, 0xc7, 0xd7, 0xdd, 0xf2, 0x5c, 0x7e, 0x61, 0x58,
	0xbe, 0xa5, 0xfa, 0x2c, 0x51, 0x32, 0x3f, 0x4b, 0xac, 0xb9, 0xe5, 0x2f, 0xa0, 0xa5, 0xb6, 0xcc,
	0x20, 0xb5, 0x64, 0x57, 0xf3, 0x43, 0x49, 0xa9, 0xf0, 0xa1, 0x64, 0xcd, 0xbd, 0x7f, 0x99, 0xee,
	0x7d, 0xce, 0x43, 0xf5, 0x94, 0x5a, 0xb2, 0x37, 0xde, 0x7c, 0x1e, 0xe2, 0x53, 0x6c, 0xf2, 0x0a,
	0x18, 0xc9, 0xb5, 0x7c, 0x6d, 0x9e, 0xf2, 0x6b, 0xd8, 0x55, 0x9b, 0x6b, 0xc8, 0x3f, 0x61, 0xc3,
	0xa5, 0x11, 0xcf, 0x7d, 0x8a, 0x2a, 0x15, 0x3f, 0x45, 0xad, 0xe9, 0xc0, 0x35, 0x34, 0x4c, 0x3a,
	0x30, 0x9f, 0x9f, 0x15, 0x7a, 0x4e, 0xa9, 0xd8, 0x73, 0xd6, 0xdb, 0xf7, 0xf8, 0xb7, 0xdb, 0xb0,
	0xa7, 0xcf, 0x7c, 0x21, 0x8b, 0xd5, 0x85, 0xfa, 0xc3, 0x05, 0x71, 0xa1, 0x99, 0xfb, 0x04, 0x4b,
	0xee, 0x17, 0x8b, 0x5a, 0xe1, 0x03, 0x6d, 0x7b, 0x09, 0x8f, 0xeb, 0x6c, 0xa0, 0xcd, 0xdc, 0xb7,
	0x9d, 0x29, 0x9b, 0xc5, 0x2f, 0x3f, 0x2b, 0xd8, 0x3c, 0x93, 0xd4, 0xf6, 0xe9, 0x38, 0x48, 0xc9,
	0x0a, 0xb9, 0x3b, 0x7b, 0x0d, 0x9a, 0x6b, 0xcf, 0x9e, 0xc2, 0xd5, 0x9d, 0x0d, 0xf2, 0xc2, 0x64,
	0xc9, 0xf2, 0x85, 0xb1, 0xc0, 0xd4, 0x72, 0xcf, 0xce, 0x81, 0x4c, 0xcc, 0xa1, 0x4c, 0x9a, 0x74,
	0x66, 0xad, 0xc3, 0x27, 0xd3, 0x0a, 0x16, 0x5f, 0xc1, 0xde, 0xc4, 0xa2, 0xf1, 0x10, 0x9a, 0x6f,
	0xf3, 0x68, 0xb6, 0xcd, 0xc9, 0xda, 0xce, 0x06, 0xb9, 0x80, 0xdd, 0xfc, 0xb1, 0xb1, 0xe1, 0xdd,
	0x2b, 0x2c, 0xcc, 0x3f, 0x1f, 0xda, 0xf7, 0x66, 0xdb, 0xd5, 0x1c, 0xbf, 0xb3, 0x41, 0x7e, 0x24,
	0x59, 0x87, 0xd1, 0xa0, 0xc8, 0xd1, 0x14, 0xf5, 0x29, 0xb0, 0xf1, 0x76, 0x31, 0xda, 0x13, 0x66,
	0xab, 0x0c, 0xe6, 0x09, 0xe9, 0x94, 0xc1, 0x29, 0xbe, 0xba, 0xd8, 0xe0, 0x6b, 0xd8, 0x2e, 0x50,
	0x41, 0xf2, 0x60, 0xae, 0x8b, 0x29, 0x55, 0x9c, 0x3a, 0x78, 0x9e, 0x5a, 0x75, 0x36, 0xc8, 0x73,
	0x20, 0x2e, 0xbb, 0x16, 0x57, 0x2c, 0x67, 0x79, 0x01, 0x90, 0x16, 0x3a, 0xf9, 0x0c, 0x9a, 0x4f,
	0xe4, 0x5f, 0xee, 0x56, 0x00, 0xf7, 0x42, 0x43, 0x1e, 0xdc, 0x99, 0xa4, 0x30, 0xff, 0x45, 0xa3,
	0xb0, 0x2c, 0x4f, 0xd6, 0xda, 0xef, 0x2f, 0xe5, 0x32, 0x2a, 0xe1, 0x3f, 0x36, 0xb1, 0x79, 0x72,
	0x93, 0x35, 0x90, 0x39, 0xa8, 0x4e, 0xe7, 0x97, 0x23, 0xe9, 0x1c, 0x76, 0x4c, 0xc3, 0x92, 0x6b,
	0xb4, 0xe7, 0xc1, 0x3a, 0xbc, 0x5a, 0xe1, 0x1a, 0xbd, 0x00, 0x92, 0x2b, 0xf6, 0x8a, 0x45, 0x14,
	0x6d, 0x1a, 0x0c, 0x63, 0x71, 0x68, 0x8b, 0xe6, 0x14, 0x43, 0x98, 0x6d, 0x4e, 0xce, 0xad, 0x67,
	0x4e, 0x75, 0xff, 0xd9, 0xe6, 0xe4, 0xdc, 0x62, 0x73, 0x17, 0xb0, 0x9f, 0x33, 0x37, 0xe9, 0xec,
	0x33, 0x2d, 0x66, 0x79, 0x59, 0x68, 0xf4, 0xb3, 0x42, 0xbb, 0x94, 0x49, 0x99, 0x5f, 0x85, 0x16,
	0xa4, 0x4b, 0x22, 0xe7, 0xce, 0x54, 0xef, 0x55, 0x3d, 0xf4, 0x68, 0xa6, 0x8b, 0x86, 0xda, 0x62,
	0x2f, 0x5f, 0x9a, 0x85, 0x4d, 0xb6, 0x55, 0xee, 0x2f, 0xf0, 0xf2, 0xde, 0xec, 0x19, 0xfd, 0xdd,
	0xa6, 0xb3, 0x41, 0x7e, 0x0a, 0x8e, 0x79, 0x87, 0x52, 0xfc, 0x2f, 0xeb, 0x14, 0xcb, 0x5f, 0x03,
	0x9d, 0x8d, 0x93, 0xc6, 0xdf, 0xde, 0x1e, 0x5a, 0x7f, 0x7f, 0x7b, 0x68, 0xfd, 0xf3, 0xed, 0xa1,
	0xd5, 0xdd, 0x94, 0xff, 0x0a, 0xf0, 0xdd, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x80, 0xc4, 0x85,
	0x56, 0x5c, 0x20, 0x00, 0x00,
}
