// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: channelservice.proto

package channelserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	chatcommon "interfaceprobuf/iminterfaceprotobufs/infoserver/chatcommon"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 管理员相关权限
type AdminRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeGroupInfo bool  `protobuf:"varint,1,opt,name=change_group_info,json=changeGroupInfo,proto3" json:"change_group_info,omitempty"` //如果是管理员的话，是否有修改群信息权限
	DeleteMessages  bool  `protobuf:"varint,2,opt,name=delete_messages,json=deleteMessages,proto3" json:"delete_messages,omitempty"`      //如果是管理员的话，是否有删除消息的权限
	BanUsers        bool  `protobuf:"varint,3,opt,name=ban_users,json=banUsers,proto3" json:"ban_users,omitempty"`                        //如果是管理员的话，是否有禁止成员的权限的权限
	PinMessages     bool  `protobuf:"varint,4,opt,name=pin_messages,json=pinMessages,proto3" json:"pin_messages,omitempty"`               //如果是管理员的话，是否有置顶消息的权限
	AddNewAdmin     bool  `protobuf:"varint,5,opt,name=add_new_admin,json=addNewAdmin,proto3" json:"add_new_admin,omitempty"`             //如果是管理员的话，是否有添加新管理员的权限
	PromotedBy      int32 `protobuf:"varint,6,opt,name=promoted_by,json=promotedBy,proto3" json:"promoted_by,omitempty"`                  //如果是管理员的话，被XX升级为管理员
	PostMessages    bool  `protobuf:"varint,7,opt,name=post_messages,json=postMessages,proto3" json:"post_messages,omitempty"`            //频道是否可以发消息
	EditMessages    bool  `protobuf:"varint,8,opt,name=edit_messages,json=editMessages,proto3" json:"edit_messages,omitempty"`            //编辑消息
	InviteUsers     bool  `protobuf:"varint,9,opt,name=invite_users,json=inviteUsers,proto3" json:"invite_users,omitempty"`               //邀请用户
	InviteLink      bool  `protobuf:"varint,10,opt,name=invite_link,json=inviteLink,proto3" json:"invite_link,omitempty"`                 //邀请链接
}

func (x *AdminRights) Reset() {
	*x = AdminRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRights) ProtoMessage() {}

func (x *AdminRights) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRights.ProtoReflect.Descriptor instead.
func (*AdminRights) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{0}
}

func (x *AdminRights) GetChangeGroupInfo() bool {
	if x != nil {
		return x.ChangeGroupInfo
	}
	return false
}

func (x *AdminRights) GetDeleteMessages() bool {
	if x != nil {
		return x.DeleteMessages
	}
	return false
}

func (x *AdminRights) GetBanUsers() bool {
	if x != nil {
		return x.BanUsers
	}
	return false
}

func (x *AdminRights) GetPinMessages() bool {
	if x != nil {
		return x.PinMessages
	}
	return false
}

func (x *AdminRights) GetAddNewAdmin() bool {
	if x != nil {
		return x.AddNewAdmin
	}
	return false
}

func (x *AdminRights) GetPromotedBy() int32 {
	if x != nil {
		return x.PromotedBy
	}
	return 0
}

func (x *AdminRights) GetPostMessages() bool {
	if x != nil {
		return x.PostMessages
	}
	return false
}

func (x *AdminRights) GetEditMessages() bool {
	if x != nil {
		return x.EditMessages
	}
	return false
}

func (x *AdminRights) GetInviteUsers() bool {
	if x != nil {
		return x.InviteUsers
	}
	return false
}

func (x *AdminRights) GetInviteLink() bool {
	if x != nil {
		return x.InviteLink
	}
	return false
}

// Post_messages     bool //70
// Edit_messages     bool //70
// Invite_users      bool //70
// Invite_link       bool //70
// bannner用户的权限
type BannerRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanReadMessages bool  `protobuf:"varint,1,opt,name=can_read_messages,json=canReadMessages,proto3" json:"can_read_messages,omitempty"` //如果是banner的话，是否有读取消息的权限
	CanSendMessge   bool  `protobuf:"varint,2,opt,name=can_send_messge,json=canSendMessge,proto3" json:"can_send_messge,omitempty"`       //如果是banner的话，是否发送文本消息的权限
	CanSendMedia    bool  `protobuf:"varint,3,opt,name=can_send_media,json=canSendMedia,proto3" json:"can_send_media,omitempty"`          //如果是banner的话，是否发送媒体消息的权限
	CanSendSticker  bool  `protobuf:"varint,4,opt,name=can_send_sticker,json=canSendSticker,proto3" json:"can_send_sticker,omitempty"`    //如果是banner的话，是否发送sticker和gif的权限
	CanEmbedLinks   bool  `protobuf:"varint,5,opt,name=can_embed_links,json=canEmbedLinks,proto3" json:"can_embed_links,omitempty"`       //如果是banner的话，是否有此权限
	KickedBy        int32 `protobuf:"varint,6,opt,name=kicked_by,json=kickedBy,proto3" json:"kicked_by,omitempty"`                        //如果是bannned用户的话，被谁禁止部分权限的
	UntilDate       int32 `protobuf:"varint,7,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`                     //如果是banner的话，什么时候解除此禁止权限
	CanSendGifs     bool  `protobuf:"varint,8,opt,name=can_send_gifs,json=canSendGifs,proto3" json:"can_send_gifs,omitempty"`
	CanSendGames    bool  `protobuf:"varint,9,opt,name=can_send_games,json=canSendGames,proto3" json:"can_send_games,omitempty"`
	CanSendInline   bool  `protobuf:"varint,10,opt,name=can_send_inline,json=canSendInline,proto3" json:"can_send_inline,omitempty"`
}

func (x *BannerRights) Reset() {
	*x = BannerRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerRights) ProtoMessage() {}

func (x *BannerRights) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerRights.ProtoReflect.Descriptor instead.
func (*BannerRights) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{1}
}

func (x *BannerRights) GetCanReadMessages() bool {
	if x != nil {
		return x.CanReadMessages
	}
	return false
}

func (x *BannerRights) GetCanSendMessge() bool {
	if x != nil {
		return x.CanSendMessge
	}
	return false
}

func (x *BannerRights) GetCanSendMedia() bool {
	if x != nil {
		return x.CanSendMedia
	}
	return false
}

func (x *BannerRights) GetCanSendSticker() bool {
	if x != nil {
		return x.CanSendSticker
	}
	return false
}

func (x *BannerRights) GetCanEmbedLinks() bool {
	if x != nil {
		return x.CanEmbedLinks
	}
	return false
}

func (x *BannerRights) GetKickedBy() int32 {
	if x != nil {
		return x.KickedBy
	}
	return 0
}

func (x *BannerRights) GetUntilDate() int32 {
	if x != nil {
		return x.UntilDate
	}
	return 0
}

func (x *BannerRights) GetCanSendGifs() bool {
	if x != nil {
		return x.CanSendGifs
	}
	return false
}

func (x *BannerRights) GetCanSendGames() bool {
	if x != nil {
		return x.CanSendGames
	}
	return false
}

func (x *BannerRights) GetCanSendInline() bool {
	if x != nil {
		return x.CanSendInline
	}
	return false
}

// *********************有关超级群、频道操作相关的接口 和结构体***********************
// -----------------------------------------------------------------------------111
// 创建频道的请求包
type CreateChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //超级群的ID
	AccessHash int64                     `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	CreatorId  int32                     `protobuf:"varint,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`    //创建者的ID
	Title      string                    `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                              //群名称
	About      string                    `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	Broadcast  bool                      `protobuf:"varint,6,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Megagroup  bool                      `protobuf:"varint,7,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	Cluster    int32                     `protobuf:"varint,8,opt,name=cluster,proto3" json:"cluster,omitempty"` //所在域
	Date       int32                     `protobuf:"varint,9,opt,name=date,proto3" json:"date,omitempty"`       //创建时间
	Dlog       *chatcommon.ChatLogPrefix `protobuf:"bytes,10,opt,name=dlog,proto3" json:"dlog,omitempty"`       //日志
}

func (x *CreateChannelReq) Reset() {
	*x = CreateChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelReq) ProtoMessage() {}

func (x *CreateChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelReq.ProtoReflect.Descriptor instead.
func (*CreateChannelReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{2}
}

func (x *CreateChannelReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *CreateChannelReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *CreateChannelReq) GetCreatorId() int32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *CreateChannelReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateChannelReq) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *CreateChannelReq) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

func (x *CreateChannelReq) GetMegagroup() bool {
	if x != nil {
		return x.Megagroup
	}
	return false
}

func (x *CreateChannelReq) GetCluster() int32 {
	if x != nil {
		return x.Cluster
	}
	return 0
}

func (x *CreateChannelReq) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *CreateChannelReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 响应 channel基础信息结构
type ChannelInfoBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId          int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //超级群、频道ID
	AccessHash         int64                     `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Encry              bool                      `protobuf:"varint,3,opt,name=encry,proto3" json:"encry,omitempty"`         //是否是加密群
	Broadcast          bool                      `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty"` //是否是频道
	Verified           bool                      `protobuf:"varint,5,opt,name=verified,proto3" json:"verified,omitempty"`
	Megagroup          bool                      `protobuf:"varint,6,opt,name=megagroup,proto3" json:"megagroup,omitempty"`   //	是否是超级群的标识
	Restricted         bool                      `protobuf:"varint,7,opt,name=restricted,proto3" json:"restricted,omitempty"` //是否被限制
	Democracy          bool                      `protobuf:"varint,8,opt,name=democracy,proto3" json:"democracy,omitempty"`   //是否民主（设置管理员的时候需要用）
	Signatures         bool                      `protobuf:"varint,9,opt,name=signatures,proto3" json:"signatures,omitempty"`
	Min                bool                      `protobuf:"varint,10,opt,name=min,proto3" json:"min,omitempty"`
	Title              string                    `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`                                                  //群名称
	Username           string                    `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`                                            //超级群的唯一标识名称
	Photo              string                    `protobuf:"bytes,13,opt,name=photo,proto3" json:"photo,omitempty"`                                                  //用户头像 json格式
	Date               int32                     `protobuf:"varint,14,opt,name=date,proto3" json:"date,omitempty"`                                                   //创建时间
	Version            int32                     `protobuf:"varint,15,opt,name=version,proto3" json:"version,omitempty"`                                             //版本
	RestrictionReason  string                    `protobuf:"bytes,16,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"` //被限制的原因
	Cluster            int32                     `protobuf:"varint,17,opt,name=cluster,proto3" json:"cluster,omitempty"`                                             //超级群创建的cluster
	Moderator          bool                      `protobuf:"varint,18,opt,name=moderator,proto3" json:"moderator,omitempty"`                                         //是不是主持人
	Editor             bool                      `protobuf:"varint,19,opt,name=editor,proto3" json:"editor,omitempty"`                                               //是否是管理员
	Left               bool                      `protobuf:"varint,20,opt,name=left,proto3" json:"left,omitempty"`                                                   //是否是已经离开此超级群
	Kicked             bool                      `protobuf:"varint,21,opt,name=kicked,proto3" json:"kicked,omitempty"`                                               //是否是被踢人
	MigratedFromChatId int32                     `protobuf:"varint,22,opt,name=migrated_from_chat_id,json=migratedFromChatId,proto3" json:"migrated_from_chat_id,omitempty"`
	Resultcode         chatcommon.ChatResultCode `protobuf:"varint,23,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *ChannelInfoBase) Reset() {
	*x = ChannelInfoBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfoBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfoBase) ProtoMessage() {}

func (x *ChannelInfoBase) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfoBase.ProtoReflect.Descriptor instead.
func (*ChannelInfoBase) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelInfoBase) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelInfoBase) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ChannelInfoBase) GetEncry() bool {
	if x != nil {
		return x.Encry
	}
	return false
}

func (x *ChannelInfoBase) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

func (x *ChannelInfoBase) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *ChannelInfoBase) GetMegagroup() bool {
	if x != nil {
		return x.Megagroup
	}
	return false
}

func (x *ChannelInfoBase) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *ChannelInfoBase) GetDemocracy() bool {
	if x != nil {
		return x.Democracy
	}
	return false
}

func (x *ChannelInfoBase) GetSignatures() bool {
	if x != nil {
		return x.Signatures
	}
	return false
}

func (x *ChannelInfoBase) GetMin() bool {
	if x != nil {
		return x.Min
	}
	return false
}

func (x *ChannelInfoBase) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChannelInfoBase) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChannelInfoBase) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *ChannelInfoBase) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ChannelInfoBase) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChannelInfoBase) GetRestrictionReason() string {
	if x != nil {
		return x.RestrictionReason
	}
	return ""
}

func (x *ChannelInfoBase) GetCluster() int32 {
	if x != nil {
		return x.Cluster
	}
	return 0
}

func (x *ChannelInfoBase) GetModerator() bool {
	if x != nil {
		return x.Moderator
	}
	return false
}

func (x *ChannelInfoBase) GetEditor() bool {
	if x != nil {
		return x.Editor
	}
	return false
}

func (x *ChannelInfoBase) GetLeft() bool {
	if x != nil {
		return x.Left
	}
	return false
}

func (x *ChannelInfoBase) GetKicked() bool {
	if x != nil {
		return x.Kicked
	}
	return false
}

func (x *ChannelInfoBase) GetMigratedFromChatId() int32 {
	if x != nil {
		return x.MigratedFromChatId
	}
	return 0
}

func (x *ChannelInfoBase) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

// ------------------------------------------------------------------------------
// 升级为超级群的结构包
type MigrateCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //超级群的ID
	AccessHash int64                     `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	CreatorId  int32                     `protobuf:"varint,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`    //创建者的ID
	ChatId     int32                     `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`             //升级为超级群的普通群的Id
	Cluster    int32                     `protobuf:"varint,5,opt,name=cluster,proto3" json:"cluster,omitempty"`                         //所在域
	Date       int32                     `protobuf:"varint,6,opt,name=date,proto3" json:"date,omitempty"`                               //创建时间
	Dlog       *chatcommon.ChatLogPrefix `protobuf:"bytes,7,opt,name=dlog,proto3" json:"dlog,omitempty"`                                //日志
}

func (x *MigrateCreateReq) Reset() {
	*x = MigrateCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateCreateReq) ProtoMessage() {}

func (x *MigrateCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateCreateReq.ProtoReflect.Descriptor instead.
func (*MigrateCreateReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{4}
}

func (x *MigrateCreateReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MigrateCreateReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *MigrateCreateReq) GetCreatorId() int32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *MigrateCreateReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *MigrateCreateReq) GetCluster() int32 {
	if x != nil {
		return x.Cluster
	}
	return 0
}

func (x *MigrateCreateReq) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *MigrateCreateReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// channel最基础的请求
type ChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //channle的Id
	UserId     int32                     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //请求者的用户Id
	AccessHash int64                     `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	Dlog       *chatcommon.ChatLogPrefix `protobuf:"bytes,4,opt,name=dlog,proto3" json:"dlog,omitempty"`                                //日志
}

func (x *ChannelReq) Reset() {
	*x = ChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelReq) ProtoMessage() {}

func (x *ChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelReq.ProtoReflect.Descriptor instead.
func (*ChannelReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{5}
}

func (x *ChannelReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ChannelReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// channelfull相关的基础数据
type ChannelFull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channelinfo        *ChannelInfoBase          `protobuf:"bytes,1,opt,name=channelinfo,proto3" json:"channelinfo,omitempty"`
	ExportedInviteLink string                    `protobuf:"bytes,2,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"`    //邀请链接
	ParticipantsCount  int32                     `protobuf:"varint,3,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`        //成员个数
	AdminsCount        int32                     `protobuf:"varint,4,opt,name=admins_count,json=adminsCount,proto3" json:"admins_count,omitempty"`                          //管理员个数
	KickedCount        int32                     `protobuf:"varint,5,opt,name=kicked_count,json=kickedCount,proto3" json:"kicked_count,omitempty"`                          //被踢个数
	BannedCount        int32                     `protobuf:"varint,6,opt,name=banned_count,json=bannedCount,proto3" json:"banned_count,omitempty"`                          //被禁止的个数（68层使用）
	PinnedMsgId        int32                     `protobuf:"varint,7,opt,name=pinned_msg_id,json=pinnedMsgId,proto3" json:"pinned_msg_id,omitempty"`                        //置顶的消息的ID
	MigratedFromChatId int32                     `protobuf:"varint,8,opt,name=migrated_from_chat_id,json=migratedFromChatId,proto3" json:"migrated_from_chat_id,omitempty"` //如果是超级群的话从这个普通群升级而来，默认为0
	AdminRights        *AdminRights              `protobuf:"bytes,9,opt,name=admin_rights,json=adminRights,proto3" json:"admin_rights,omitempty"`                           //是否可以设置username
	BanRights          *BannerRights             `protobuf:"bytes,10,opt,name=ban_rights,json=banRights,proto3" json:"ban_rights,omitempty"`                                //是否可以查看群成员列表
	About              string                    `protobuf:"bytes,11,opt,name=about,proto3" json:"about,omitempty"`                                                         //群简要
	BotCount           int32                     `protobuf:"varint,12,opt,name=bot_count,json=botCount,proto3" json:"bot_count,omitempty"`                                  //机器人个数，如果大于0，就从机器人服务那边去取
	BotId              []int32                   `protobuf:"varint,13,rep,packed,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`                                    //机器人id的数组
	Resultcode         chatcommon.ChatResultCode `protobuf:"varint,14,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`               //返回结果码
}

func (x *ChannelFull) Reset() {
	*x = ChannelFull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelFull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelFull) ProtoMessage() {}

func (x *ChannelFull) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelFull.ProtoReflect.Descriptor instead.
func (*ChannelFull) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{6}
}

func (x *ChannelFull) GetChannelinfo() *ChannelInfoBase {
	if x != nil {
		return x.Channelinfo
	}
	return nil
}

func (x *ChannelFull) GetExportedInviteLink() string {
	if x != nil {
		return x.ExportedInviteLink
	}
	return ""
}

func (x *ChannelFull) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *ChannelFull) GetAdminsCount() int32 {
	if x != nil {
		return x.AdminsCount
	}
	return 0
}

func (x *ChannelFull) GetKickedCount() int32 {
	if x != nil {
		return x.KickedCount
	}
	return 0
}

func (x *ChannelFull) GetBannedCount() int32 {
	if x != nil {
		return x.BannedCount
	}
	return 0
}

func (x *ChannelFull) GetPinnedMsgId() int32 {
	if x != nil {
		return x.PinnedMsgId
	}
	return 0
}

func (x *ChannelFull) GetMigratedFromChatId() int32 {
	if x != nil {
		return x.MigratedFromChatId
	}
	return 0
}

func (x *ChannelFull) GetAdminRights() *AdminRights {
	if x != nil {
		return x.AdminRights
	}
	return nil
}

func (x *ChannelFull) GetBanRights() *BannerRights {
	if x != nil {
		return x.BanRights
	}
	return nil
}

func (x *ChannelFull) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *ChannelFull) GetBotCount() int32 {
	if x != nil {
		return x.BotCount
	}
	return 0
}

func (x *ChannelFull) GetBotId() []int32 {
	if x != nil {
		return x.BotId
	}
	return nil
}

func (x *ChannelFull) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

// 群成员的基础信息
type ChannelParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              int32                     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                          //群成员的iD
	InviteId            int32                     `protobuf:"varint,2,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`                                    //邀请者的ID
	CanSetUsername      bool                      `protobuf:"varint,3,opt,name=can_set_username,json=canSetUsername,proto3" json:"can_set_username,omitempty"`                //是否可以更改超级群的username 默认为true
	CanViewParticipants bool                      `protobuf:"varint,4,opt,name=can_view_participants,json=canViewParticipants,proto3" json:"can_view_participants,omitempty"` //是否可以查看超级群的成员列表默认为true
	IsCreator           bool                      `protobuf:"varint,5,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"`                                 //是否是群的创建者
	IsAdmin             bool                      `protobuf:"varint,6,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`                                       //是否是超级群的管理员
	IsBan               bool                      `protobuf:"varint,7,opt,name=is_ban,json=isBan,proto3" json:"is_ban,omitempty"`                                             //是否是被禁权的成员
	JoinTime            int32                     `protobuf:"varint,8,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`                                    //进群时间
	AdRight             *AdminRights              `protobuf:"bytes,9,opt,name=ad_right,json=adRight,proto3" json:"ad_right,omitempty"`                                        //如果是管理员的话有此权限
	BanRight            *BannerRights             `protobuf:"bytes,10,opt,name=ban_right,json=banRight,proto3" json:"ban_right,omitempty"`                                    //bannner用户的权限
	Resultcode          chatcommon.ChatResultCode `protobuf:"varint,11,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`                //返回结果码
}

func (x *ChannelParticipant) Reset() {
	*x = ChannelParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelParticipant) ProtoMessage() {}

func (x *ChannelParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelParticipant.ProtoReflect.Descriptor instead.
func (*ChannelParticipant) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{7}
}

func (x *ChannelParticipant) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelParticipant) GetInviteId() int32 {
	if x != nil {
		return x.InviteId
	}
	return 0
}

func (x *ChannelParticipant) GetCanSetUsername() bool {
	if x != nil {
		return x.CanSetUsername
	}
	return false
}

func (x *ChannelParticipant) GetCanViewParticipants() bool {
	if x != nil {
		return x.CanViewParticipants
	}
	return false
}

func (x *ChannelParticipant) GetIsCreator() bool {
	if x != nil {
		return x.IsCreator
	}
	return false
}

func (x *ChannelParticipant) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *ChannelParticipant) GetIsBan() bool {
	if x != nil {
		return x.IsBan
	}
	return false
}

func (x *ChannelParticipant) GetJoinTime() int32 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *ChannelParticipant) GetAdRight() *AdminRights {
	if x != nil {
		return x.AdRight
	}
	return nil
}

func (x *ChannelParticipant) GetBanRight() *BannerRights {
	if x != nil {
		return x.BanRight
	}
	return nil
}

func (x *ChannelParticipant) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

// ------------------------------------------------------------------------------
// 更新超级群/频道的 邀请链接
type ChannleId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,2,opt,name=dlog,proto3" json:"dlog,omitempty"` //日志
}

func (x *ChannleId) Reset() {
	*x = ChannleId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannleId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannleId) ProtoMessage() {}

func (x *ChannleId) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannleId.ProtoReflect.Descriptor instead.
func (*ChannleId) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{8}
}

func (x *ChannleId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannleId) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type ChannelLittleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId          int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`                             //超级群、频道ID
	Title              string                    `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                       //群名称
	ExportedInviteLink string                    `protobuf:"bytes,3,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"` //邀请链接
	Resultcode         chatcommon.ChatResultCode `protobuf:"varint,4,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`             //返回结果码
}

func (x *ChannelLittleInfo) Reset() {
	*x = ChannelLittleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelLittleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelLittleInfo) ProtoMessage() {}

func (x *ChannelLittleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelLittleInfo.ProtoReflect.Descriptor instead.
func (*ChannelLittleInfo) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{9}
}

func (x *ChannelLittleInfo) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelLittleInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChannelLittleInfo) GetExportedInviteLink() string {
	if x != nil {
		return x.ExportedInviteLink
	}
	return ""
}

func (x *ChannelLittleInfo) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

type ChannleUsersId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     []int32                   `protobuf:"varint,2,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *ChannleUsersId) Reset() {
	*x = ChannleUsersId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannleUsersId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannleUsersId) ProtoMessage() {}

func (x *ChannleUsersId) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannleUsersId.ProtoReflect.Descriptor instead.
func (*ChannleUsersId) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{10}
}

func (x *ChannleUsersId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannleUsersId) GetUserId() []int32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *ChannleUsersId) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

// ------------------------------------------------------------------------------
// 批量获取channel基础信息的操作
type GetChannelsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32                     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                 //请求者的用户Id
	ChannelId []int32                   `protobuf:"varint,2,rep,packed,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //channle的Id
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog,proto3" json:"dlog,omitempty"`                                    //日志
}

func (x *GetChannelsReq) Reset() {
	*x = GetChannelsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelsReq) ProtoMessage() {}

func (x *GetChannelsReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelsReq.ProtoReflect.Descriptor instead.
func (*GetChannelsReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{11}
}

func (x *GetChannelsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChannelsReq) GetChannelId() []int32 {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

func (x *GetChannelsReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// channel基础信息的数组
type ChannelBaseArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel    []*ChannelInfoBase        `protobuf:"bytes,1,rep,name=channel,proto3" json:"channel,omitempty"`                                       //channel的基础信息
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *ChannelBaseArr) Reset() {
	*x = ChannelBaseArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelBaseArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelBaseArr) ProtoMessage() {}

func (x *ChannelBaseArr) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelBaseArr.ProtoReflect.Descriptor instead.
func (*ChannelBaseArr) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{12}
}

func (x *ChannelBaseArr) GetChannel() []*ChannelInfoBase {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *ChannelBaseArr) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

// ------------------------------------------------------------------------------
// 添加(主动加入)超级群、频道的用户的请求
type AddChannelUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //channle的Id
	InvitorId  int32                     `protobuf:"varint,2,opt,name=invitor_id,json=invitorId,proto3" json:"invitor_id,omitempty"` //邀请者的用户ID（如果是自己加入invitor_id 为自己的用户ID）
	AccessHash int64                     `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Users      []*InvitedUsers           `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	Dlog       *chatcommon.ChatLogPrefix `protobuf:"bytes,5,opt,name=dlog,proto3" json:"dlog,omitempty"` //日志
}

func (x *AddChannelUserReq) Reset() {
	*x = AddChannelUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddChannelUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChannelUserReq) ProtoMessage() {}

func (x *AddChannelUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChannelUserReq.ProtoReflect.Descriptor instead.
func (*AddChannelUserReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{13}
}

func (x *AddChannelUserReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *AddChannelUserReq) GetInvitorId() int32 {
	if x != nil {
		return x.InvitorId
	}
	return 0
}

func (x *AddChannelUserReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *AddChannelUserReq) GetUsers() []*InvitedUsers {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *AddChannelUserReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type BoolResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B          bool                      `protobuf:"varint,1,opt,name=b,proto3" json:"b,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *BoolResult) Reset() {
	*x = BoolResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolResult) ProtoMessage() {}

func (x *BoolResult) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolResult.ProtoReflect.Descriptor instead.
func (*BoolResult) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{14}
}

func (x *BoolResult) GetB() bool {
	if x != nil {
		return x.B
	}
	return false
}

func (x *BoolResult) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

// ------------------------------------------------------------------------------
// 踢人或者主动离开超级群、频道的的请求接口
type DelChannelUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`   //channle的Id
	UserId    int32                     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`            //要进离开/被踢 超级群/频道的成员的用户ID
	IsBotUser bool                      `protobuf:"varint,3,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"` //被邀请者是不是机器人
	IsKicked  bool                      `protobuf:"varint,4,opt,name=is_kicked,json=isKicked,proto3" json:"is_kicked,omitempty"`      // 是否是离开超级群\频道
	KickedId  int32                     `protobuf:"varint,5,opt,name=Kicked_id,json=KickedId,proto3" json:"Kicked_id,omitempty"`      //如果是超级群被踢的话将，此用户保存到被踢列表中
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,6,opt,name=dlog,proto3" json:"dlog,omitempty"`                               //日志
}

func (x *DelChannelUserReq) Reset() {
	*x = DelChannelUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChannelUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChannelUserReq) ProtoMessage() {}

func (x *DelChannelUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChannelUserReq.ProtoReflect.Descriptor instead.
func (*DelChannelUserReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{15}
}

func (x *DelChannelUserReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *DelChannelUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelChannelUserReq) GetIsBotUser() bool {
	if x != nil {
		return x.IsBotUser
	}
	return false
}

func (x *DelChannelUserReq) GetIsKicked() bool {
	if x != nil {
		return x.IsKicked
	}
	return false
}

func (x *DelChannelUserReq) GetKickedId() int32 {
	if x != nil {
		return x.KickedId
	}
	return 0
}

func (x *DelChannelUserReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// ------------------------------------------------------------------------------
// 新增管理员的接口
type AddChannelAdminReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`   //channle的Id
	UserId    int32                     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`            //要进离开/被踢 超级群/频道的成员的用户ID
	IsBotUser bool                      `protobuf:"varint,3,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"` //如果是新增用户的话被邀请者是不是机器人
	AdRight   *AdminRights              `protobuf:"bytes,4,opt,name=ad_right,json=adRight,proto3" json:"ad_right,omitempty"`          //该有的管理员权限们
	InvitorId int32                     `protobuf:"varint,5,opt,name=invitor_id,json=invitorId,proto3" json:"invitor_id,omitempty"`   //如果是直接添加新成员为管理员的话需要
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,6,opt,name=dlog,proto3" json:"dlog,omitempty"`
}

func (x *AddChannelAdminReq) Reset() {
	*x = AddChannelAdminReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddChannelAdminReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChannelAdminReq) ProtoMessage() {}

func (x *AddChannelAdminReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChannelAdminReq.ProtoReflect.Descriptor instead.
func (*AddChannelAdminReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{16}
}

func (x *AddChannelAdminReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *AddChannelAdminReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddChannelAdminReq) GetIsBotUser() bool {
	if x != nil {
		return x.IsBotUser
	}
	return false
}

func (x *AddChannelAdminReq) GetAdRight() *AdminRights {
	if x != nil {
		return x.AdRight
	}
	return nil
}

func (x *AddChannelAdminReq) GetInvitorId() int32 {
	if x != nil {
		return x.InvitorId
	}
	return 0
}

func (x *AddChannelAdminReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 添加管理结果
type AddAdminResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                                      //是否设置管理员成功
	IsAdd      bool                      `protobuf:"varint,2,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`                             //是否是新增成员操作（重要）
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *AddAdminResult) Reset() {
	*x = AddAdminResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAdminResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAdminResult) ProtoMessage() {}

func (x *AddAdminResult) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAdminResult.ProtoReflect.Descriptor instead.
func (*AddAdminResult) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{17}
}

func (x *AddAdminResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddAdminResult) GetIsAdd() bool {
	if x != nil {
		return x.IsAdd
	}
	return false
}

func (x *AddAdminResult) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

// ------------------------------------------------------------------------------
// 超级群/频道 的按类型的偏移获取
type ParticipantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //成员的ID
	Offset    int32                     `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`                        //偏移地址
	Limit     int32                     `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                          //每次能够取的最大个数
	PartType  int32                     `protobuf:"varint,4,opt,name=part_type,json=partType,proto3" json:"part_type,omitempty"`    //成员类型 1 代表 channelParticipantsRecent  2、代表 channelParticipantsAdmins 3代表channelParticipantsKicked 4代表channelParticipantsBots 5代表channelParticipantsBanned
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,5,opt,name=dlog,proto3" json:"dlog,omitempty"`
}

func (x *ParticipantReq) Reset() {
	*x = ParticipantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantReq) ProtoMessage() {}

func (x *ParticipantReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantReq.ProtoReflect.Descriptor instead.
func (*ParticipantReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{18}
}

func (x *ParticipantReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ParticipantReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ParticipantReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ParticipantReq) GetPartType() int32 {
	if x != nil {
		return x.PartType
	}
	return 0
}

func (x *ParticipantReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 群成员的列表
type ChannelParticipantArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32                     `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	Part       []*ChannelParticipant     `protobuf:"bytes,2,rep,name=part,proto3" json:"part,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *ChannelParticipantArr) Reset() {
	*x = ChannelParticipantArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelParticipantArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelParticipantArr) ProtoMessage() {}

func (x *ChannelParticipantArr) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelParticipantArr.ProtoReflect.Descriptor instead.
func (*ChannelParticipantArr) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{19}
}

func (x *ChannelParticipantArr) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ChannelParticipantArr) GetPart() []*ChannelParticipant {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *ChannelParticipantArr) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

// ------------------------------------------------------------------------------
type ChannelUserName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string                    `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"` //生成的邀请链接
	Dlog     *chatcommon.ChatLogPrefix `protobuf:"bytes,2,opt,name=dlog,proto3" json:"dlog,omitempty"`
}

func (x *ChannelUserName) Reset() {
	*x = ChannelUserName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelUserName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUserName) ProtoMessage() {}

func (x *ChannelUserName) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUserName.ProtoReflect.Descriptor instead.
func (*ChannelUserName) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{20}
}

func (x *ChannelUserName) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ChannelUserName) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// ------------------------------------------------------------------------------
type ChannelLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportLink string                    `protobuf:"bytes,1,opt,name=export_link,json=exportLink,proto3" json:"export_link,omitempty"` //生成的邀请链接
	Dlog       *chatcommon.ChatLogPrefix `protobuf:"bytes,2,opt,name=dlog,proto3" json:"dlog,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *ChannelLink) Reset() {
	*x = ChannelLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelLink) ProtoMessage() {}

func (x *ChannelLink) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelLink.ProtoReflect.Descriptor instead.
func (*ChannelLink) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{21}
}

func (x *ChannelLink) GetExportLink() string {
	if x != nil {
		return x.ExportLink
	}
	return ""
}

func (x *ChannelLink) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

func (x *ChannelLink) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

// ------------------------------------------------------------------------------
// 更新群about请求
type UpdateAbout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	About     string                    `protobuf:"bytes,2,opt,name=about,proto3" json:"about,omitempty"` //超级群/频道的简略说明
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog,proto3" json:"dlog,omitempty"`
}

func (x *UpdateAbout) Reset() {
	*x = UpdateAbout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAbout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAbout) ProtoMessage() {}

func (x *UpdateAbout) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAbout.ProtoReflect.Descriptor instead.
func (*UpdateAbout) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateAbout) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateAbout) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *UpdateAbout) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// ------------------------------------------------------------------------------
// 更新群名称请求
type UpdateTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Title     string                    `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"` //超级群/频道的简略说明
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog,proto3" json:"dlog,omitempty"`
}

func (x *UpdateTitle) Reset() {
	*x = UpdateTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTitle) ProtoMessage() {}

func (x *UpdateTitle) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTitle.ProtoReflect.Descriptor instead.
func (*UpdateTitle) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateTitle) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateTitle) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 更新群头像请求
type UpdatePhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Photo     string                    `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"` //超级群/频道的简略说明 json的格式
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog,proto3" json:"dlog,omitempty"`
}

func (x *UpdatePhoto) Reset() {
	*x = UpdatePhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePhoto) ProtoMessage() {}

func (x *UpdatePhoto) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePhoto.ProtoReflect.Descriptor instead.
func (*UpdatePhoto) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{24}
}

func (x *UpdatePhoto) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdatePhoto) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *UpdatePhoto) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 更新群名称UserName
type UpdateUserName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Username  string                    `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog,proto3" json:"dlog,omitempty"`
}

func (x *UpdateUserName) Reset() {
	*x = UpdateUserName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserName) ProtoMessage() {}

func (x *UpdateUserName) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserName.ProtoReflect.Descriptor instead.
func (*UpdateUserName) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateUserName) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateUserName) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateUserName) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 更新pin msg id 的请求
type UpdatePinMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PinMsgid  int32                     `protobuf:"varint,2,opt,name=pin_msgid,json=pinMsgid,proto3" json:"pin_msgid,omitempty"` //置顶的消息的ID
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog,proto3" json:"dlog,omitempty"`
}

func (x *UpdatePinMsgId) Reset() {
	*x = UpdatePinMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePinMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePinMsgId) ProtoMessage() {}

func (x *UpdatePinMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePinMsgId.ProtoReflect.Descriptor instead.
func (*UpdatePinMsgId) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{26}
}

func (x *UpdatePinMsgId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdatePinMsgId) GetPinMsgid() int32 {
	if x != nil {
		return x.PinMsgid
	}
	return 0
}

func (x *UpdatePinMsgId) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// ------------------------------------------------------------------------------
// 更新超级群/频道的 邀请链接
type UpdateChannelDemo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32                     `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Democracy bool                      `protobuf:"varint,2,opt,name=democracy,proto3" json:"democracy,omitempty"` //民主性
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog,proto3" json:"dlog,omitempty"`
}

func (x *UpdateChannelDemo) Reset() {
	*x = UpdateChannelDemo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelDemo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelDemo) ProtoMessage() {}

func (x *UpdateChannelDemo) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelDemo.ProtoReflect.Descriptor instead.
func (*UpdateChannelDemo) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateChannelDemo) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChannelDemo) GetDemocracy() bool {
	if x != nil {
		return x.Democracy
	}
	return false
}

func (x *UpdateChannelDemo) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
type InvitedUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32                     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`            //要进入此超级群/频道的ID
	IsBotUser bool                      `protobuf:"varint,2,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"` //被邀请者是不是机器人
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog,proto3" json:"dlog,omitempty"`
}

func (x *InvitedUsers) Reset() {
	*x = InvitedUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitedUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitedUsers) ProtoMessage() {}

func (x *InvitedUsers) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitedUsers.ProtoReflect.Descriptor instead.
func (*InvitedUsers) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{28}
}

func (x *InvitedUsers) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InvitedUsers) GetIsBotUser() bool {
	if x != nil {
		return x.IsBotUser
	}
	return false
}

func (x *InvitedUsers) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

var File_channelservice_proto protoreflect.FileDescriptor

var file_channelservice_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x3b, 0x69, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf5, 0x02, 0x0a, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x88, 0x03, 0x0a, 0x0c, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x67, 0x69, 0x66, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x53,
	0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c,
	0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0xbf,
	0x05, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x69, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xe7, 0x01, 0x0a, 0x10, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64,
	0x6c, 0x6f, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f,
	0x67, 0x22, 0xf1, 0x04, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x75, 0x6c,
	0x6c, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6b,
	0x69, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xc3, 0x03, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61,
	0x6e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x61, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x61, 0x6e,
	0x56, 0x69, 0x65, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x62, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x61,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x61, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x07, 0x61, 0x64,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x59, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x84, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x77, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22,
	0x86, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x41,
	0x72, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22,
	0x56, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0c, 0x0a,
	0x01, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x62, 0x12, 0x3a, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6f,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6b, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4b, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c,
	0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0xf1,
	0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x08, 0x61, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x07, 0x61, 0x64, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c,
	0x6f, 0x67, 0x22, 0x7d, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x41, 0x64, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f,
	0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0xaa, 0x01,
	0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x3a,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5d, 0x0a, 0x0f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c,
	0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c,
	0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x71, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x62, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0x71, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x64, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0x71, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c,
	0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0x7a,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64,
	0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0x7b, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0x7f, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0x76, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67,
	0x32, 0x85, 0x0f, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x0d, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1a,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x1e, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x6c, 0x65, 0x49, 0x64, 0x1a,
	0x20, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x12, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x61, 0x73, 0x65, 0x41, 0x72, 0x72, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x21, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x72,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x1a, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x12, 0x20, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6d, 0x6f, 0x1a,
	0x19, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x69,
	0x64, 0x12, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x1d, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x64, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x00, 0x42, 0x3f, 0x5a, 0x3d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73,
	0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_channelservice_proto_rawDescOnce sync.Once
	file_channelservice_proto_rawDescData = file_channelservice_proto_rawDesc
)

func file_channelservice_proto_rawDescGZIP() []byte {
	file_channelservice_proto_rawDescOnce.Do(func() {
		file_channelservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_channelservice_proto_rawDescData)
	})
	return file_channelservice_proto_rawDescData
}

var file_channelservice_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_channelservice_proto_goTypes = []interface{}{
	(*AdminRights)(nil),              // 0: channelserver.AdminRights
	(*BannerRights)(nil),             // 1: channelserver.BannerRights
	(*CreateChannelReq)(nil),         // 2: channelserver.CreateChannelReq
	(*ChannelInfoBase)(nil),          // 3: channelserver.ChannelInfoBase
	(*MigrateCreateReq)(nil),         // 4: channelserver.MigrateCreateReq
	(*ChannelReq)(nil),               // 5: channelserver.ChannelReq
	(*ChannelFull)(nil),              // 6: channelserver.ChannelFull
	(*ChannelParticipant)(nil),       // 7: channelserver.ChannelParticipant
	(*ChannleId)(nil),                // 8: channelserver.ChannleId
	(*ChannelLittleInfo)(nil),        // 9: channelserver.ChannelLittleInfo
	(*ChannleUsersId)(nil),           // 10: channelserver.ChannleUsersId
	(*GetChannelsReq)(nil),           // 11: channelserver.GetChannelsReq
	(*ChannelBaseArr)(nil),           // 12: channelserver.ChannelBaseArr
	(*AddChannelUserReq)(nil),        // 13: channelserver.AddChannelUserReq
	(*BoolResult)(nil),               // 14: channelserver.BoolResult
	(*DelChannelUserReq)(nil),        // 15: channelserver.DelChannelUserReq
	(*AddChannelAdminReq)(nil),       // 16: channelserver.AddChannelAdminReq
	(*AddAdminResult)(nil),           // 17: channelserver.AddAdminResult
	(*ParticipantReq)(nil),           // 18: channelserver.ParticipantReq
	(*ChannelParticipantArr)(nil),    // 19: channelserver.ChannelParticipantArr
	(*ChannelUserName)(nil),          // 20: channelserver.ChannelUserName
	(*ChannelLink)(nil),              // 21: channelserver.ChannelLink
	(*UpdateAbout)(nil),              // 22: channelserver.UpdateAbout
	(*UpdateTitle)(nil),              // 23: channelserver.UpdateTitle
	(*UpdatePhoto)(nil),              // 24: channelserver.UpdatePhoto
	(*UpdateUserName)(nil),           // 25: channelserver.UpdateUserName
	(*UpdatePinMsgId)(nil),           // 26: channelserver.UpdatePinMsgId
	(*UpdateChannelDemo)(nil),        // 27: channelserver.UpdateChannelDemo
	(*InvitedUsers)(nil),             // 28: channelserver.InvitedUsers
	(*chatcommon.ChatLogPrefix)(nil), // 29: chatcommon.ChatLogPrefix
	(chatcommon.ChatResultCode)(0),   // 30: chatcommon.ChatResultCode
}
var file_channelservice_proto_depIdxs = []int32{
	29, // 0: channelserver.CreateChannelReq.dlog:type_name -> chatcommon.ChatLogPrefix
	30, // 1: channelserver.ChannelInfoBase.resultcode:type_name -> chatcommon.ChatResultCode
	29, // 2: channelserver.MigrateCreateReq.dlog:type_name -> chatcommon.ChatLogPrefix
	29, // 3: channelserver.ChannelReq.dlog:type_name -> chatcommon.ChatLogPrefix
	3,  // 4: channelserver.ChannelFull.channelinfo:type_name -> channelserver.ChannelInfoBase
	0,  // 5: channelserver.ChannelFull.admin_rights:type_name -> channelserver.AdminRights
	1,  // 6: channelserver.ChannelFull.ban_rights:type_name -> channelserver.BannerRights
	30, // 7: channelserver.ChannelFull.resultcode:type_name -> chatcommon.ChatResultCode
	0,  // 8: channelserver.ChannelParticipant.ad_right:type_name -> channelserver.AdminRights
	1,  // 9: channelserver.ChannelParticipant.ban_right:type_name -> channelserver.BannerRights
	30, // 10: channelserver.ChannelParticipant.resultcode:type_name -> chatcommon.ChatResultCode
	29, // 11: channelserver.ChannleId.dlog:type_name -> chatcommon.ChatLogPrefix
	30, // 12: channelserver.ChannelLittleInfo.resultcode:type_name -> chatcommon.ChatResultCode
	30, // 13: channelserver.ChannleUsersId.resultcode:type_name -> chatcommon.ChatResultCode
	29, // 14: channelserver.GetChannelsReq.dlog:type_name -> chatcommon.ChatLogPrefix
	3,  // 15: channelserver.ChannelBaseArr.channel:type_name -> channelserver.ChannelInfoBase
	30, // 16: channelserver.ChannelBaseArr.resultcode:type_name -> chatcommon.ChatResultCode
	28, // 17: channelserver.AddChannelUserReq.users:type_name -> channelserver.InvitedUsers
	29, // 18: channelserver.AddChannelUserReq.dlog:type_name -> chatcommon.ChatLogPrefix
	30, // 19: channelserver.BoolResult.resultcode:type_name -> chatcommon.ChatResultCode
	29, // 20: channelserver.DelChannelUserReq.dlog:type_name -> chatcommon.ChatLogPrefix
	0,  // 21: channelserver.AddChannelAdminReq.ad_right:type_name -> channelserver.AdminRights
	29, // 22: channelserver.AddChannelAdminReq.dlog:type_name -> chatcommon.ChatLogPrefix
	30, // 23: channelserver.AddAdminResult.resultcode:type_name -> chatcommon.ChatResultCode
	29, // 24: channelserver.ParticipantReq.dlog:type_name -> chatcommon.ChatLogPrefix
	7,  // 25: channelserver.ChannelParticipantArr.part:type_name -> channelserver.ChannelParticipant
	30, // 26: channelserver.ChannelParticipantArr.resultcode:type_name -> chatcommon.ChatResultCode
	29, // 27: channelserver.ChannelUserName.dlog:type_name -> chatcommon.ChatLogPrefix
	29, // 28: channelserver.ChannelLink.dlog:type_name -> chatcommon.ChatLogPrefix
	30, // 29: channelserver.ChannelLink.resultcode:type_name -> chatcommon.ChatResultCode
	29, // 30: channelserver.UpdateAbout.dlog:type_name -> chatcommon.ChatLogPrefix
	29, // 31: channelserver.UpdateTitle.dlog:type_name -> chatcommon.ChatLogPrefix
	29, // 32: channelserver.UpdatePhoto.dlog:type_name -> chatcommon.ChatLogPrefix
	29, // 33: channelserver.UpdateUserName.dlog:type_name -> chatcommon.ChatLogPrefix
	29, // 34: channelserver.UpdatePinMsgId.dlog:type_name -> chatcommon.ChatLogPrefix
	29, // 35: channelserver.UpdateChannelDemo.dlog:type_name -> chatcommon.ChatLogPrefix
	29, // 36: channelserver.InvitedUsers.dlog:type_name -> chatcommon.ChatLogPrefix
	2,  // 37: channelserver.ChannelServerService.CreateChannel:input_type -> channelserver.CreateChannelReq
	4,  // 38: channelserver.ChannelServerService.MigrateCreate:input_type -> channelserver.MigrateCreateReq
	5,  // 39: channelserver.ChannelServerService.GetFullChannel:input_type -> channelserver.ChannelReq
	5,  // 40: channelserver.ChannelServerService.GetChannelInfo:input_type -> channelserver.ChannelReq
	8,  // 41: channelserver.ChannelServerService.GetChannelBaseInfo:input_type -> channelserver.ChannleId
	8,  // 42: channelserver.ChannelServerService.GetChannelLittleInfo:input_type -> channelserver.ChannleId
	11, // 43: channelserver.ChannelServerService.GetChannelInfoArr:input_type -> channelserver.GetChannelsReq
	13, // 44: channelserver.ChannelServerService.AddChannelUser:input_type -> channelserver.AddChannelUserReq
	15, // 45: channelserver.ChannelServerService.DelChannelUser:input_type -> channelserver.DelChannelUserReq
	16, // 46: channelserver.ChannelServerService.AddChannelAdmin:input_type -> channelserver.AddChannelAdminReq
	5,  // 47: channelserver.ChannelServerService.RevokeChannelAdmin:input_type -> channelserver.ChannelReq
	5,  // 48: channelserver.ChannelServerService.DeleteChannel:input_type -> channelserver.ChannelReq
	18, // 49: channelserver.ChannelServerService.GetChannelParticipants:input_type -> channelserver.ParticipantReq
	20, // 50: channelserver.ChannelServerService.GetChannelByUserName:input_type -> channelserver.ChannelUserName
	21, // 51: channelserver.ChannelServerService.GetChannelByLink:input_type -> channelserver.ChannelLink
	22, // 52: channelserver.ChannelServerService.UpdateChannelAbout:input_type -> channelserver.UpdateAbout
	23, // 53: channelserver.ChannelServerService.UpdateChannelTitle:input_type -> channelserver.UpdateTitle
	24, // 54: channelserver.ChannelServerService.UpdateChannelPhoto:input_type -> channelserver.UpdatePhoto
	25, // 55: channelserver.ChannelServerService.UpdateChannelUserName:input_type -> channelserver.UpdateUserName
	8,  // 56: channelserver.ChannelServerService.UpdateChannelLink:input_type -> channelserver.ChannleId
	27, // 57: channelserver.ChannelServerService.UpdateChannelDemocracy:input_type -> channelserver.UpdateChannelDemo
	8,  // 58: channelserver.ChannelServerService.GetChannelUsersid:input_type -> channelserver.ChannleId
	5,  // 59: channelserver.ChannelServerService.GetChannelPaticipantInfo:input_type -> channelserver.ChannelReq
	3,  // 60: channelserver.ChannelServerService.CreateChannel:output_type -> channelserver.ChannelInfoBase
	3,  // 61: channelserver.ChannelServerService.MigrateCreate:output_type -> channelserver.ChannelInfoBase
	6,  // 62: channelserver.ChannelServerService.GetFullChannel:output_type -> channelserver.ChannelFull
	3,  // 63: channelserver.ChannelServerService.GetChannelInfo:output_type -> channelserver.ChannelInfoBase
	3,  // 64: channelserver.ChannelServerService.GetChannelBaseInfo:output_type -> channelserver.ChannelInfoBase
	9,  // 65: channelserver.ChannelServerService.GetChannelLittleInfo:output_type -> channelserver.ChannelLittleInfo
	12, // 66: channelserver.ChannelServerService.GetChannelInfoArr:output_type -> channelserver.ChannelBaseArr
	14, // 67: channelserver.ChannelServerService.AddChannelUser:output_type -> channelserver.BoolResult
	14, // 68: channelserver.ChannelServerService.DelChannelUser:output_type -> channelserver.BoolResult
	17, // 69: channelserver.ChannelServerService.AddChannelAdmin:output_type -> channelserver.AddAdminResult
	14, // 70: channelserver.ChannelServerService.RevokeChannelAdmin:output_type -> channelserver.BoolResult
	14, // 71: channelserver.ChannelServerService.DeleteChannel:output_type -> channelserver.BoolResult
	19, // 72: channelserver.ChannelServerService.GetChannelParticipants:output_type -> channelserver.ChannelParticipantArr
	12, // 73: channelserver.ChannelServerService.GetChannelByUserName:output_type -> channelserver.ChannelBaseArr
	3,  // 74: channelserver.ChannelServerService.GetChannelByLink:output_type -> channelserver.ChannelInfoBase
	14, // 75: channelserver.ChannelServerService.UpdateChannelAbout:output_type -> channelserver.BoolResult
	14, // 76: channelserver.ChannelServerService.UpdateChannelTitle:output_type -> channelserver.BoolResult
	14, // 77: channelserver.ChannelServerService.UpdateChannelPhoto:output_type -> channelserver.BoolResult
	14, // 78: channelserver.ChannelServerService.UpdateChannelUserName:output_type -> channelserver.BoolResult
	21, // 79: channelserver.ChannelServerService.UpdateChannelLink:output_type -> channelserver.ChannelLink
	14, // 80: channelserver.ChannelServerService.UpdateChannelDemocracy:output_type -> channelserver.BoolResult
	10, // 81: channelserver.ChannelServerService.GetChannelUsersid:output_type -> channelserver.ChannleUsersId
	7,  // 82: channelserver.ChannelServerService.GetChannelPaticipantInfo:output_type -> channelserver.ChannelParticipant
	60, // [60:83] is the sub-list for method output_type
	37, // [37:60] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_channelservice_proto_init() }
func file_channelservice_proto_init() {
	if File_channelservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_channelservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfoBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelFull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannleId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelLittleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannleUsersId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelBaseArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddChannelUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChannelUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddChannelAdminReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAdminResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelParticipantArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelUserName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAbout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePinMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelDemo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitedUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_channelservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_channelservice_proto_goTypes,
		DependencyIndexes: file_channelservice_proto_depIdxs,
		MessageInfos:      file_channelservice_proto_msgTypes,
	}.Build()
	File_channelservice_proto = out.File
	file_channelservice_proto_rawDesc = nil
	file_channelservice_proto_goTypes = nil
	file_channelservice_proto_depIdxs = nil
}
