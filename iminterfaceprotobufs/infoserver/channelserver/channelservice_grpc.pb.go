// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: channelservice.proto

package channelserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChannelServerServiceClient is the client API for ChannelServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelServerServiceClient interface {
	// 创建频道
	CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*ChannelInfoBase, error)
	// 由普通群升级为超级群，将原来为加密的群就平移到加密，名称、成员依次同等级权限的移动
	MigrateCreate(ctx context.Context, in *MigrateCreateReq, opts ...grpc.CallOption) (*ChannelInfoBase, error)
	// 获取超级群/channel基础信息的完整信息
	GetFullChannel(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*ChannelFull, error)
	// 获取超级群基本信息的操作
	GetChannelInfo(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*ChannelInfoBase, error)
	GetChannelBaseInfo(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannelInfoBase, error)
	// 机器人获取基本信息
	GetChannelLittleInfo(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannelLittleInfo, error)
	// 批量获取channel的基础信息
	GetChannelInfoArr(ctx context.Context, in *GetChannelsReq, opts ...grpc.CallOption) (*ChannelBaseArr, error)
	// 加普通成员到超级群/频道
	AddChannelUser(ctx context.Context, in *AddChannelUserReq, opts ...grpc.CallOption) (*BoolResult, error)
	// 群成员减少的接口
	DelChannelUser(ctx context.Context, in *DelChannelUserReq, opts ...grpc.CallOption) (*BoolResult, error)
	// 设置管理员/新增成员直接是管理员
	AddChannelAdmin(ctx context.Context, in *AddChannelAdminReq, opts ...grpc.CallOption) (*AddAdminResult, error)
	// 撤销管理员权限
	RevokeChannelAdmin(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*BoolResult, error)
	// 解散超级群/频道的操作(需要判断userId 是不是创建者)
	DeleteChannel(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*BoolResult, error)
	// 偏移获取超级群/频道成员列表
	GetChannelParticipants(ctx context.Context, in *ParticipantReq, opts ...grpc.CallOption) (*ChannelParticipantArr, error)
	// 通过username来查找超级群
	GetChannelByUserName(ctx context.Context, in *ChannelUserName, opts ...grpc.CallOption) (*ChannelBaseArr, error)
	// 根据群链接来查询超级群/频道信息
	GetChannelByLink(ctx context.Context, in *ChannelLink, opts ...grpc.CallOption) (*ChannelInfoBase, error)
	// 编辑群about
	UpdateChannelAbout(ctx context.Context, in *UpdateAbout, opts ...grpc.CallOption) (*BoolResult, error)
	// 编辑群名称
	UpdateChannelTitle(ctx context.Context, in *UpdateTitle, opts ...grpc.CallOption) (*BoolResult, error)
	// 编辑群头像
	UpdateChannelPhoto(ctx context.Context, in *UpdatePhoto, opts ...grpc.CallOption) (*BoolResult, error)
	// 更新群的username
	// 编辑群头像
	UpdateChannelUserName(ctx context.Context, in *UpdateUserName, opts ...grpc.CallOption) (*BoolResult, error)
	// 更新群邀请链接
	UpdateChannelLink(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannelLink, error)
	// 更新群民主性
	// 更新群邀请链接
	UpdateChannelDemocracy(ctx context.Context, in *UpdateChannelDemo, opts ...grpc.CallOption) (*BoolResult, error)
	// 获取频道所有用户id
	GetChannelUsersid(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannleUsersId, error)
	// 获取成员信息
	GetChannelPaticipantInfo(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*ChannelParticipant, error)
}

type channelServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelServerServiceClient(cc grpc.ClientConnInterface) ChannelServerServiceClient {
	return &channelServerServiceClient{cc}
}

func (c *channelServerServiceClient) CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*ChannelInfoBase, error) {
	out := new(ChannelInfoBase)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) MigrateCreate(ctx context.Context, in *MigrateCreateReq, opts ...grpc.CallOption) (*ChannelInfoBase, error) {
	out := new(ChannelInfoBase)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/MigrateCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetFullChannel(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*ChannelFull, error) {
	out := new(ChannelFull)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/GetFullChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelInfo(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*ChannelInfoBase, error) {
	out := new(ChannelInfoBase)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelBaseInfo(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannelInfoBase, error) {
	out := new(ChannelInfoBase)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelLittleInfo(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannelLittleInfo, error) {
	out := new(ChannelLittleInfo)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelLittleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelInfoArr(ctx context.Context, in *GetChannelsReq, opts ...grpc.CallOption) (*ChannelBaseArr, error) {
	out := new(ChannelBaseArr)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelInfoArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) AddChannelUser(ctx context.Context, in *AddChannelUserReq, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/AddChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) DelChannelUser(ctx context.Context, in *DelChannelUserReq, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/DelChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) AddChannelAdmin(ctx context.Context, in *AddChannelAdminReq, opts ...grpc.CallOption) (*AddAdminResult, error) {
	out := new(AddAdminResult)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/AddChannelAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) RevokeChannelAdmin(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/RevokeChannelAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) DeleteChannel(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/DeleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelParticipants(ctx context.Context, in *ParticipantReq, opts ...grpc.CallOption) (*ChannelParticipantArr, error) {
	out := new(ChannelParticipantArr)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelByUserName(ctx context.Context, in *ChannelUserName, opts ...grpc.CallOption) (*ChannelBaseArr, error) {
	out := new(ChannelBaseArr)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelByUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelByLink(ctx context.Context, in *ChannelLink, opts ...grpc.CallOption) (*ChannelInfoBase, error) {
	out := new(ChannelInfoBase)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelByLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelAbout(ctx context.Context, in *UpdateAbout, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/UpdateChannelAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelTitle(ctx context.Context, in *UpdateTitle, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/UpdateChannelTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelPhoto(ctx context.Context, in *UpdatePhoto, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/UpdateChannelPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelUserName(ctx context.Context, in *UpdateUserName, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/UpdateChannelUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelLink(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannelLink, error) {
	out := new(ChannelLink)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/UpdateChannelLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelDemocracy(ctx context.Context, in *UpdateChannelDemo, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/UpdateChannelDemocracy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelUsersid(ctx context.Context, in *ChannleId, opts ...grpc.CallOption) (*ChannleUsersId, error) {
	out := new(ChannleUsersId)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelUsersid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelPaticipantInfo(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (*ChannelParticipant, error) {
	out := new(ChannelParticipant)
	err := c.cc.Invoke(ctx, "/channelserver.ChannelServerService/GetChannelPaticipantInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelServerServiceServer is the server API for ChannelServerService service.
// All implementations must embed UnimplementedChannelServerServiceServer
// for forward compatibility
type ChannelServerServiceServer interface {
	// 创建频道
	CreateChannel(context.Context, *CreateChannelReq) (*ChannelInfoBase, error)
	// 由普通群升级为超级群，将原来为加密的群就平移到加密，名称、成员依次同等级权限的移动
	MigrateCreate(context.Context, *MigrateCreateReq) (*ChannelInfoBase, error)
	// 获取超级群/channel基础信息的完整信息
	GetFullChannel(context.Context, *ChannelReq) (*ChannelFull, error)
	// 获取超级群基本信息的操作
	GetChannelInfo(context.Context, *ChannelReq) (*ChannelInfoBase, error)
	GetChannelBaseInfo(context.Context, *ChannleId) (*ChannelInfoBase, error)
	// 机器人获取基本信息
	GetChannelLittleInfo(context.Context, *ChannleId) (*ChannelLittleInfo, error)
	// 批量获取channel的基础信息
	GetChannelInfoArr(context.Context, *GetChannelsReq) (*ChannelBaseArr, error)
	// 加普通成员到超级群/频道
	AddChannelUser(context.Context, *AddChannelUserReq) (*BoolResult, error)
	// 群成员减少的接口
	DelChannelUser(context.Context, *DelChannelUserReq) (*BoolResult, error)
	// 设置管理员/新增成员直接是管理员
	AddChannelAdmin(context.Context, *AddChannelAdminReq) (*AddAdminResult, error)
	// 撤销管理员权限
	RevokeChannelAdmin(context.Context, *ChannelReq) (*BoolResult, error)
	// 解散超级群/频道的操作(需要判断userId 是不是创建者)
	DeleteChannel(context.Context, *ChannelReq) (*BoolResult, error)
	// 偏移获取超级群/频道成员列表
	GetChannelParticipants(context.Context, *ParticipantReq) (*ChannelParticipantArr, error)
	// 通过username来查找超级群
	GetChannelByUserName(context.Context, *ChannelUserName) (*ChannelBaseArr, error)
	// 根据群链接来查询超级群/频道信息
	GetChannelByLink(context.Context, *ChannelLink) (*ChannelInfoBase, error)
	// 编辑群about
	UpdateChannelAbout(context.Context, *UpdateAbout) (*BoolResult, error)
	// 编辑群名称
	UpdateChannelTitle(context.Context, *UpdateTitle) (*BoolResult, error)
	// 编辑群头像
	UpdateChannelPhoto(context.Context, *UpdatePhoto) (*BoolResult, error)
	// 更新群的username
	// 编辑群头像
	UpdateChannelUserName(context.Context, *UpdateUserName) (*BoolResult, error)
	// 更新群邀请链接
	UpdateChannelLink(context.Context, *ChannleId) (*ChannelLink, error)
	// 更新群民主性
	// 更新群邀请链接
	UpdateChannelDemocracy(context.Context, *UpdateChannelDemo) (*BoolResult, error)
	// 获取频道所有用户id
	GetChannelUsersid(context.Context, *ChannleId) (*ChannleUsersId, error)
	// 获取成员信息
	GetChannelPaticipantInfo(context.Context, *ChannelReq) (*ChannelParticipant, error)
	mustEmbedUnimplementedChannelServerServiceServer()
}

// UnimplementedChannelServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChannelServerServiceServer struct {
}

func (UnimplementedChannelServerServiceServer) CreateChannel(context.Context, *CreateChannelReq) (*ChannelInfoBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedChannelServerServiceServer) MigrateCreate(context.Context, *MigrateCreateReq) (*ChannelInfoBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateCreate not implemented")
}
func (UnimplementedChannelServerServiceServer) GetFullChannel(context.Context, *ChannelReq) (*ChannelFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullChannel not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelInfo(context.Context, *ChannelReq) (*ChannelInfoBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelBaseInfo(context.Context, *ChannleId) (*ChannelInfoBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelBaseInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelLittleInfo(context.Context, *ChannleId) (*ChannelLittleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelLittleInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelInfoArr(context.Context, *GetChannelsReq) (*ChannelBaseArr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInfoArr not implemented")
}
func (UnimplementedChannelServerServiceServer) AddChannelUser(context.Context, *AddChannelUserReq) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChannelUser not implemented")
}
func (UnimplementedChannelServerServiceServer) DelChannelUser(context.Context, *DelChannelUserReq) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelChannelUser not implemented")
}
func (UnimplementedChannelServerServiceServer) AddChannelAdmin(context.Context, *AddChannelAdminReq) (*AddAdminResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChannelAdmin not implemented")
}
func (UnimplementedChannelServerServiceServer) RevokeChannelAdmin(context.Context, *ChannelReq) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeChannelAdmin not implemented")
}
func (UnimplementedChannelServerServiceServer) DeleteChannel(context.Context, *ChannelReq) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelParticipants(context.Context, *ParticipantReq) (*ChannelParticipantArr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelParticipants not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelByUserName(context.Context, *ChannelUserName) (*ChannelBaseArr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelByUserName not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelByLink(context.Context, *ChannelLink) (*ChannelInfoBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelByLink not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdateChannelAbout(context.Context, *UpdateAbout) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelAbout not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdateChannelTitle(context.Context, *UpdateTitle) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelTitle not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdateChannelPhoto(context.Context, *UpdatePhoto) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelPhoto not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdateChannelUserName(context.Context, *UpdateUserName) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelUserName not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdateChannelLink(context.Context, *ChannleId) (*ChannelLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelLink not implemented")
}
func (UnimplementedChannelServerServiceServer) UpdateChannelDemocracy(context.Context, *UpdateChannelDemo) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelDemocracy not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelUsersid(context.Context, *ChannleId) (*ChannleUsersId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelUsersid not implemented")
}
func (UnimplementedChannelServerServiceServer) GetChannelPaticipantInfo(context.Context, *ChannelReq) (*ChannelParticipant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelPaticipantInfo not implemented")
}
func (UnimplementedChannelServerServiceServer) mustEmbedUnimplementedChannelServerServiceServer() {}

// UnsafeChannelServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelServerServiceServer will
// result in compilation errors.
type UnsafeChannelServerServiceServer interface {
	mustEmbedUnimplementedChannelServerServiceServer()
}

func RegisterChannelServerServiceServer(s grpc.ServiceRegistrar, srv ChannelServerServiceServer) {
	s.RegisterService(&ChannelServerService_ServiceDesc, srv)
}

func _ChannelServerService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CreateChannel(ctx, req.(*CreateChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_MigrateCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).MigrateCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/MigrateCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).MigrateCreate(ctx, req.(*MigrateCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetFullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetFullChannel(ctx, req.(*ChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelInfo(ctx, req.(*ChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelBaseInfo(ctx, req.(*ChannleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelLittleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelLittleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelLittleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelLittleInfo(ctx, req.(*ChannleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelInfoArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelInfoArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelInfoArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelInfoArr(ctx, req.(*GetChannelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_AddChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChannelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).AddChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/AddChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).AddChannelUser(ctx, req.(*AddChannelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_DelChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChannelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).DelChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/DelChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).DelChannelUser(ctx, req.(*DelChannelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_AddChannelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChannelAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).AddChannelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/AddChannelAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).AddChannelAdmin(ctx, req.(*AddChannelAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_RevokeChannelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).RevokeChannelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/RevokeChannelAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).RevokeChannelAdmin(ctx, req.(*ChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).DeleteChannel(ctx, req.(*ChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelParticipants(ctx, req.(*ParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelByUserName(ctx, req.(*ChannelUserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelByLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelByLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelByLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelByLink(ctx, req.(*ChannelLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/UpdateChannelAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelAbout(ctx, req.(*UpdateAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/UpdateChannelTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelTitle(ctx, req.(*UpdateTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/UpdateChannelPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelPhoto(ctx, req.(*UpdatePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/UpdateChannelUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelUserName(ctx, req.(*UpdateUserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/UpdateChannelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelLink(ctx, req.(*ChannleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelDemocracy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelDemo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelDemocracy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/UpdateChannelDemocracy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelDemocracy(ctx, req.(*UpdateChannelDemo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelUsersid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelUsersid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelUsersid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelUsersid(ctx, req.(*ChannleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelPaticipantInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelPaticipantInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channelserver.ChannelServerService/GetChannelPaticipantInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelPaticipantInfo(ctx, req.(*ChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelServerService_ServiceDesc is the grpc.ServiceDesc for ChannelServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "channelserver.ChannelServerService",
	HandlerType: (*ChannelServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _ChannelServerService_CreateChannel_Handler,
		},
		{
			MethodName: "MigrateCreate",
			Handler:    _ChannelServerService_MigrateCreate_Handler,
		},
		{
			MethodName: "GetFullChannel",
			Handler:    _ChannelServerService_GetFullChannel_Handler,
		},
		{
			MethodName: "GetChannelInfo",
			Handler:    _ChannelServerService_GetChannelInfo_Handler,
		},
		{
			MethodName: "GetChannelBaseInfo",
			Handler:    _ChannelServerService_GetChannelBaseInfo_Handler,
		},
		{
			MethodName: "GetChannelLittleInfo",
			Handler:    _ChannelServerService_GetChannelLittleInfo_Handler,
		},
		{
			MethodName: "GetChannelInfoArr",
			Handler:    _ChannelServerService_GetChannelInfoArr_Handler,
		},
		{
			MethodName: "AddChannelUser",
			Handler:    _ChannelServerService_AddChannelUser_Handler,
		},
		{
			MethodName: "DelChannelUser",
			Handler:    _ChannelServerService_DelChannelUser_Handler,
		},
		{
			MethodName: "AddChannelAdmin",
			Handler:    _ChannelServerService_AddChannelAdmin_Handler,
		},
		{
			MethodName: "RevokeChannelAdmin",
			Handler:    _ChannelServerService_RevokeChannelAdmin_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _ChannelServerService_DeleteChannel_Handler,
		},
		{
			MethodName: "GetChannelParticipants",
			Handler:    _ChannelServerService_GetChannelParticipants_Handler,
		},
		{
			MethodName: "GetChannelByUserName",
			Handler:    _ChannelServerService_GetChannelByUserName_Handler,
		},
		{
			MethodName: "GetChannelByLink",
			Handler:    _ChannelServerService_GetChannelByLink_Handler,
		},
		{
			MethodName: "UpdateChannelAbout",
			Handler:    _ChannelServerService_UpdateChannelAbout_Handler,
		},
		{
			MethodName: "UpdateChannelTitle",
			Handler:    _ChannelServerService_UpdateChannelTitle_Handler,
		},
		{
			MethodName: "UpdateChannelPhoto",
			Handler:    _ChannelServerService_UpdateChannelPhoto_Handler,
		},
		{
			MethodName: "UpdateChannelUserName",
			Handler:    _ChannelServerService_UpdateChannelUserName_Handler,
		},
		{
			MethodName: "UpdateChannelLink",
			Handler:    _ChannelServerService_UpdateChannelLink_Handler,
		},
		{
			MethodName: "UpdateChannelDemocracy",
			Handler:    _ChannelServerService_UpdateChannelDemocracy_Handler,
		},
		{
			MethodName: "GetChannelUsersid",
			Handler:    _ChannelServerService_GetChannelUsersid_Handler,
		},
		{
			MethodName: "GetChannelPaticipantInfo",
			Handler:    _ChannelServerService_GetChannelPaticipantInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channelservice.proto",
}
