// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: account.proto

package infoserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/iminterfaceprotobufs/infoserver/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SessionUpdateOnHandshakeDoneResult_FailCode int32

const (
	SessionUpdateOnHandshakeDoneResult_Internal       SessionUpdateOnHandshakeDoneResult_FailCode = 0
	SessionUpdateOnHandshakeDoneResult_DuplicateKeyid SessionUpdateOnHandshakeDoneResult_FailCode = 1
)

// Enum value maps for SessionUpdateOnHandshakeDoneResult_FailCode.
var (
	SessionUpdateOnHandshakeDoneResult_FailCode_name = map[int32]string{
		0: "Internal",
		1: "DuplicateKeyid",
	}
	SessionUpdateOnHandshakeDoneResult_FailCode_value = map[string]int32{
		"Internal":       0,
		"DuplicateKeyid": 1,
	}
)

func (x SessionUpdateOnHandshakeDoneResult_FailCode) Enum() *SessionUpdateOnHandshakeDoneResult_FailCode {
	p := new(SessionUpdateOnHandshakeDoneResult_FailCode)
	*p = x
	return p
}

func (x SessionUpdateOnHandshakeDoneResult_FailCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionUpdateOnHandshakeDoneResult_FailCode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[0].Descriptor()
}

func (SessionUpdateOnHandshakeDoneResult_FailCode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[0]
}

func (x SessionUpdateOnHandshakeDoneResult_FailCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionUpdateOnHandshakeDoneResult_FailCode.Descriptor instead.
func (SessionUpdateOnHandshakeDoneResult_FailCode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{7, 0}
}

type SessionQueryByKeyidResult_ResultCode int32

const (
	SessionQueryByKeyidResult_Success       SessionQueryByKeyidResult_ResultCode = 0
	SessionQueryByKeyidResult_InternalError SessionQueryByKeyidResult_ResultCode = 1
)

// Enum value maps for SessionQueryByKeyidResult_ResultCode.
var (
	SessionQueryByKeyidResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	SessionQueryByKeyidResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x SessionQueryByKeyidResult_ResultCode) Enum() *SessionQueryByKeyidResult_ResultCode {
	p := new(SessionQueryByKeyidResult_ResultCode)
	*p = x
	return p
}

func (x SessionQueryByKeyidResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionQueryByKeyidResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[1].Descriptor()
}

func (SessionQueryByKeyidResult_ResultCode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[1]
}

func (x SessionQueryByKeyidResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionQueryByKeyidResult_ResultCode.Descriptor instead.
func (SessionQueryByKeyidResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{14, 0}
}

type SessionQueryByPhoneResult_ResultCode int32

const (
	SessionQueryByPhoneResult_Success       SessionQueryByPhoneResult_ResultCode = 0
	SessionQueryByPhoneResult_InternalError SessionQueryByPhoneResult_ResultCode = 1
)

// Enum value maps for SessionQueryByPhoneResult_ResultCode.
var (
	SessionQueryByPhoneResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	SessionQueryByPhoneResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x SessionQueryByPhoneResult_ResultCode) Enum() *SessionQueryByPhoneResult_ResultCode {
	p := new(SessionQueryByPhoneResult_ResultCode)
	*p = x
	return p
}

func (x SessionQueryByPhoneResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionQueryByPhoneResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[2].Descriptor()
}

func (SessionQueryByPhoneResult_ResultCode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[2]
}

func (x SessionQueryByPhoneResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionQueryByPhoneResult_ResultCode.Descriptor instead.
func (SessionQueryByPhoneResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{16, 0}
}

type SessionIncQtsResult_ResultCode int32

const (
	SessionIncQtsResult_Success       SessionIncQtsResult_ResultCode = 0
	SessionIncQtsResult_InternalError SessionIncQtsResult_ResultCode = 1
)

// Enum value maps for SessionIncQtsResult_ResultCode.
var (
	SessionIncQtsResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	SessionIncQtsResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x SessionIncQtsResult_ResultCode) Enum() *SessionIncQtsResult_ResultCode {
	p := new(SessionIncQtsResult_ResultCode)
	*p = x
	return p
}

func (x SessionIncQtsResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionIncQtsResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[3].Descriptor()
}

func (SessionIncQtsResult_ResultCode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[3]
}

func (x SessionIncQtsResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionIncQtsResult_ResultCode.Descriptor instead.
func (SessionIncQtsResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{18, 0}
}

type SessionUpdateInitConnectionResult_ResultCode int32

const (
	SessionUpdateInitConnectionResult_Success       SessionUpdateInitConnectionResult_ResultCode = 0
	SessionUpdateInitConnectionResult_InternalError SessionUpdateInitConnectionResult_ResultCode = 1
)

// Enum value maps for SessionUpdateInitConnectionResult_ResultCode.
var (
	SessionUpdateInitConnectionResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	SessionUpdateInitConnectionResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x SessionUpdateInitConnectionResult_ResultCode) Enum() *SessionUpdateInitConnectionResult_ResultCode {
	p := new(SessionUpdateInitConnectionResult_ResultCode)
	*p = x
	return p
}

func (x SessionUpdateInitConnectionResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionUpdateInitConnectionResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[4].Descriptor()
}

func (SessionUpdateInitConnectionResult_ResultCode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[4]
}

func (x SessionUpdateInitConnectionResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionUpdateInitConnectionResult_ResultCode.Descriptor instead.
func (SessionUpdateInitConnectionResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{20, 0}
}

type SessionUpdateRegisterDeviceResult_ResultCode int32

const (
	SessionUpdateRegisterDeviceResult_Success       SessionUpdateRegisterDeviceResult_ResultCode = 0
	SessionUpdateRegisterDeviceResult_InternalError SessionUpdateRegisterDeviceResult_ResultCode = 1
)

// Enum value maps for SessionUpdateRegisterDeviceResult_ResultCode.
var (
	SessionUpdateRegisterDeviceResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	SessionUpdateRegisterDeviceResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x SessionUpdateRegisterDeviceResult_ResultCode) Enum() *SessionUpdateRegisterDeviceResult_ResultCode {
	p := new(SessionUpdateRegisterDeviceResult_ResultCode)
	*p = x
	return p
}

func (x SessionUpdateRegisterDeviceResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionUpdateRegisterDeviceResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[5].Descriptor()
}

func (SessionUpdateRegisterDeviceResult_ResultCode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[5]
}

func (x SessionUpdateRegisterDeviceResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionUpdateRegisterDeviceResult_ResultCode.Descriptor instead.
func (SessionUpdateRegisterDeviceResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{22, 0}
}

type SessionUpdateSignInResult_ResultCode int32

const (
	SessionUpdateSignInResult_Success       SessionUpdateSignInResult_ResultCode = 0
	SessionUpdateSignInResult_InternalError SessionUpdateSignInResult_ResultCode = 1
)

// Enum value maps for SessionUpdateSignInResult_ResultCode.
var (
	SessionUpdateSignInResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	SessionUpdateSignInResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x SessionUpdateSignInResult_ResultCode) Enum() *SessionUpdateSignInResult_ResultCode {
	p := new(SessionUpdateSignInResult_ResultCode)
	*p = x
	return p
}

func (x SessionUpdateSignInResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionUpdateSignInResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[6].Descriptor()
}

func (SessionUpdateSignInResult_ResultCode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[6]
}

func (x SessionUpdateSignInResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionUpdateSignInResult_ResultCode.Descriptor instead.
func (SessionUpdateSignInResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{24, 0}
}

type SessionUpdatePingResult_ResultCode int32

const (
	SessionUpdatePingResult_Success             SessionUpdatePingResult_ResultCode = 0
	SessionUpdatePingResult_InternalError       SessionUpdatePingResult_ResultCode = 1
	SessionUpdatePingResult_AuthkeyUnregistered SessionUpdatePingResult_ResultCode = 2 // session被踢
)

// Enum value maps for SessionUpdatePingResult_ResultCode.
var (
	SessionUpdatePingResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "AuthkeyUnregistered",
	}
	SessionUpdatePingResult_ResultCode_value = map[string]int32{
		"Success":             0,
		"InternalError":       1,
		"AuthkeyUnregistered": 2,
	}
)

func (x SessionUpdatePingResult_ResultCode) Enum() *SessionUpdatePingResult_ResultCode {
	p := new(SessionUpdatePingResult_ResultCode)
	*p = x
	return p
}

func (x SessionUpdatePingResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionUpdatePingResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[7].Descriptor()
}

func (SessionUpdatePingResult_ResultCode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[7]
}

func (x SessionUpdatePingResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionUpdatePingResult_ResultCode.Descriptor instead.
func (SessionUpdatePingResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{26, 0}
}

type SessionUpdateLogoutResult_ResultCode int32

const (
	SessionUpdateLogoutResult_Success       SessionUpdateLogoutResult_ResultCode = 0
	SessionUpdateLogoutResult_InternalError SessionUpdateLogoutResult_ResultCode = 1
)

// Enum value maps for SessionUpdateLogoutResult_ResultCode.
var (
	SessionUpdateLogoutResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	SessionUpdateLogoutResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x SessionUpdateLogoutResult_ResultCode) Enum() *SessionUpdateLogoutResult_ResultCode {
	p := new(SessionUpdateLogoutResult_ResultCode)
	*p = x
	return p
}

func (x SessionUpdateLogoutResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionUpdateLogoutResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[8].Descriptor()
}

func (SessionUpdateLogoutResult_ResultCode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[8]
}

func (x SessionUpdateLogoutResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionUpdateLogoutResult_ResultCode.Descriptor instead.
func (SessionUpdateLogoutResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{28, 0}
}

type SessionTerminateByKeyidResult_ResultCode int32

const (
	SessionTerminateByKeyidResult_Success       SessionTerminateByKeyidResult_ResultCode = 0
	SessionTerminateByKeyidResult_InternalError SessionTerminateByKeyidResult_ResultCode = 1
)

// Enum value maps for SessionTerminateByKeyidResult_ResultCode.
var (
	SessionTerminateByKeyidResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	SessionTerminateByKeyidResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x SessionTerminateByKeyidResult_ResultCode) Enum() *SessionTerminateByKeyidResult_ResultCode {
	p := new(SessionTerminateByKeyidResult_ResultCode)
	*p = x
	return p
}

func (x SessionTerminateByKeyidResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionTerminateByKeyidResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[9].Descriptor()
}

func (SessionTerminateByKeyidResult_ResultCode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[9]
}

func (x SessionTerminateByKeyidResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionTerminateByKeyidResult_ResultCode.Descriptor instead.
func (SessionTerminateByKeyidResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{30, 0}
}

type SessionTerminateExceptKeyidResult_ResultCode int32

const (
	SessionTerminateExceptKeyidResult_Success       SessionTerminateExceptKeyidResult_ResultCode = 0
	SessionTerminateExceptKeyidResult_InternalError SessionTerminateExceptKeyidResult_ResultCode = 1
)

// Enum value maps for SessionTerminateExceptKeyidResult_ResultCode.
var (
	SessionTerminateExceptKeyidResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	SessionTerminateExceptKeyidResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x SessionTerminateExceptKeyidResult_ResultCode) Enum() *SessionTerminateExceptKeyidResult_ResultCode {
	p := new(SessionTerminateExceptKeyidResult_ResultCode)
	*p = x
	return p
}

func (x SessionTerminateExceptKeyidResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionTerminateExceptKeyidResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[10].Descriptor()
}

func (SessionTerminateExceptKeyidResult_ResultCode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[10]
}

func (x SessionTerminateExceptKeyidResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionTerminateExceptKeyidResult_ResultCode.Descriptor instead.
func (SessionTerminateExceptKeyidResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{32, 0}
}

type BoolResult_ErrorCode int32

const (
	BoolResult_Internal         BoolResult_ErrorCode = 0
	BoolResult_InvalidPassword  BoolResult_ErrorCode = 1
	BoolResult_EmailUnconfirmed BoolResult_ErrorCode = 2
	BoolResult_CheckFlood       BoolResult_ErrorCode = 3
	BoolResult_PhoneCodeExpired BoolResult_ErrorCode = 4
	BoolResult_CodeInvalid      BoolResult_ErrorCode = 5
)

// Enum value maps for BoolResult_ErrorCode.
var (
	BoolResult_ErrorCode_name = map[int32]string{
		0: "Internal",
		1: "InvalidPassword",
		2: "EmailUnconfirmed",
		3: "CheckFlood",
		4: "PhoneCodeExpired",
		5: "CodeInvalid",
	}
	BoolResult_ErrorCode_value = map[string]int32{
		"Internal":         0,
		"InvalidPassword":  1,
		"EmailUnconfirmed": 2,
		"CheckFlood":       3,
		"PhoneCodeExpired": 4,
		"CodeInvalid":      5,
	}
)

func (x BoolResult_ErrorCode) Enum() *BoolResult_ErrorCode {
	p := new(BoolResult_ErrorCode)
	*p = x
	return p
}

func (x BoolResult_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoolResult_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[11].Descriptor()
}

func (BoolResult_ErrorCode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[11]
}

func (x BoolResult_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoolResult_ErrorCode.Descriptor instead.
func (BoolResult_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{38, 0}
}

type SessionUpdate_UpdateType int32

const (
	SessionUpdate_Type0NoUse          SessionUpdate_UpdateType = 0 // 无用，占位
	SessionUpdate_Type1Logout         SessionUpdate_UpdateType = 1
	SessionUpdate_Type2InitConnection SessionUpdate_UpdateType = 2
	SessionUpdate_Type3PushToken      SessionUpdate_UpdateType = 3
	SessionUpdate_Type4CurrentStatus  SessionUpdate_UpdateType = 4
	SessionUpdate_Type5SignIn         SessionUpdate_UpdateType = 5
	SessionUpdate_Type6Ping           SessionUpdate_UpdateType = 6
)

// Enum value maps for SessionUpdate_UpdateType.
var (
	SessionUpdate_UpdateType_name = map[int32]string{
		0: "Type0NoUse",
		1: "Type1Logout",
		2: "Type2InitConnection",
		3: "Type3PushToken",
		4: "Type4CurrentStatus",
		5: "Type5SignIn",
		6: "Type6Ping",
	}
	SessionUpdate_UpdateType_value = map[string]int32{
		"Type0NoUse":          0,
		"Type1Logout":         1,
		"Type2InitConnection": 2,
		"Type3PushToken":      3,
		"Type4CurrentStatus":  4,
		"Type5SignIn":         5,
		"Type6Ping":           6,
	}
)

func (x SessionUpdate_UpdateType) Enum() *SessionUpdate_UpdateType {
	p := new(SessionUpdate_UpdateType)
	*p = x
	return p
}

func (x SessionUpdate_UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionUpdate_UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[12].Descriptor()
}

func (SessionUpdate_UpdateType) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[12]
}

func (x SessionUpdate_UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionUpdate_UpdateType.Descriptor instead.
func (SessionUpdate_UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{48, 0}
}

type SessionTerminateReq_Type int32

const (
	SessionTerminateReq_SELF   SessionTerminateReq_Type = 0
	SessionTerminateReq_OTHERS SessionTerminateReq_Type = 1
)

// Enum value maps for SessionTerminateReq_Type.
var (
	SessionTerminateReq_Type_name = map[int32]string{
		0: "SELF",
		1: "OTHERS",
	}
	SessionTerminateReq_Type_value = map[string]int32{
		"SELF":   0,
		"OTHERS": 1,
	}
)

func (x SessionTerminateReq_Type) Enum() *SessionTerminateReq_Type {
	p := new(SessionTerminateReq_Type)
	*p = x
	return p
}

func (x SessionTerminateReq_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionTerminateReq_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[13].Descriptor()
}

func (SessionTerminateReq_Type) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[13]
}

func (x SessionTerminateReq_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionTerminateReq_Type.Descriptor instead.
func (SessionTerminateReq_Type) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{52, 0}
}

type GetUniqueNumberByKeyIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId int64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *GetUniqueNumberByKeyIdReq) Reset() {
	*x = GetUniqueNumberByKeyIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUniqueNumberByKeyIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniqueNumberByKeyIdReq) ProtoMessage() {}

func (x *GetUniqueNumberByKeyIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniqueNumberByKeyIdReq.ProtoReflect.Descriptor instead.
func (*GetUniqueNumberByKeyIdReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{0}
}

func (x *GetUniqueNumberByKeyIdReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

type GetUniqueNumberByKeyIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueNumber string `protobuf:"bytes,1,opt,name=unique_number,json=uniqueNumber,proto3" json:"unique_number,omitempty"`
}

func (x *GetUniqueNumberByKeyIdResult) Reset() {
	*x = GetUniqueNumberByKeyIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUniqueNumberByKeyIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniqueNumberByKeyIdResult) ProtoMessage() {}

func (x *GetUniqueNumberByKeyIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniqueNumberByKeyIdResult.ProtoReflect.Descriptor instead.
func (*GetUniqueNumberByKeyIdResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{1}
}

func (x *GetUniqueNumberByKeyIdResult) GetUniqueNumber() string {
	if x != nil {
		return x.UniqueNumber
	}
	return ""
}

type SessionDisconnectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId       uint64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                  // 端标识
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` // 电话号码
	Disconnect  bool   `protobuf:"varint,3,opt,name=disconnect,proto3" json:"disconnect,omitempty"`                     // true断开连接，false新连接
	ClientIp    string `protobuf:"bytes,4,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`          // 新连接ip
	Country     string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`                            // ip地区
}

func (x *SessionDisconnectReq) Reset() {
	*x = SessionDisconnectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDisconnectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDisconnectReq) ProtoMessage() {}

func (x *SessionDisconnectReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDisconnectReq.ProtoReflect.Descriptor instead.
func (*SessionDisconnectReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{2}
}

func (x *SessionDisconnectReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SessionDisconnectReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SessionDisconnectReq) GetDisconnect() bool {
	if x != nil {
		return x.Disconnect
	}
	return false
}

func (x *SessionDisconnectReq) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *SessionDisconnectReq) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type SessionDisconnectResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionDisconnectResult) Reset() {
	*x = SessionDisconnectResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDisconnectResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDisconnectResult) ProtoMessage() {}

func (x *SessionDisconnectResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDisconnectResult.ProtoReflect.Descriptor instead.
func (*SessionDisconnectResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{3}
}

type SessionQueryApiIDbyKeyidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId uint64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // 客户端id
}

func (x *SessionQueryApiIDbyKeyidReq) Reset() {
	*x = SessionQueryApiIDbyKeyidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionQueryApiIDbyKeyidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionQueryApiIDbyKeyidReq) ProtoMessage() {}

func (x *SessionQueryApiIDbyKeyidReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionQueryApiIDbyKeyidReq.ProtoReflect.Descriptor instead.
func (*SessionQueryApiIDbyKeyidReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{4}
}

func (x *SessionQueryApiIDbyKeyidReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

type SessionQueryApiIDbyKeyidResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId         int32 `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`                         // 客户端类型标识
	InternalError bool  `protobuf:"varint,2,opt,name=internal_error,json=internalError,proto3" json:"internal_error,omitempty"` //是否发生了错误
}

func (x *SessionQueryApiIDbyKeyidResult) Reset() {
	*x = SessionQueryApiIDbyKeyidResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionQueryApiIDbyKeyidResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionQueryApiIDbyKeyidResult) ProtoMessage() {}

func (x *SessionQueryApiIDbyKeyidResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionQueryApiIDbyKeyidResult.ProtoReflect.Descriptor instead.
func (*SessionQueryApiIDbyKeyidResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{5}
}

func (x *SessionQueryApiIDbyKeyidResult) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *SessionQueryApiIDbyKeyidResult) GetInternalError() bool {
	if x != nil {
		return x.InternalError
	}
	return false
}

type SessionUpdateOnHandshakeDoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId   uint64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	AuthKey []byte `protobuf:"bytes,2,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
}

func (x *SessionUpdateOnHandshakeDoneReq) Reset() {
	*x = SessionUpdateOnHandshakeDoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdateOnHandshakeDoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdateOnHandshakeDoneReq) ProtoMessage() {}

func (x *SessionUpdateOnHandshakeDoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdateOnHandshakeDoneReq.ProtoReflect.Descriptor instead.
func (*SessionUpdateOnHandshakeDoneReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{6}
}

func (x *SessionUpdateOnHandshakeDoneReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SessionUpdateOnHandshakeDoneReq) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

type SessionUpdateOnHandshakeDoneResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                        `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否保存成功，保存失败infoserver查看失败信息
	Code    SessionUpdateOnHandshakeDoneResult_FailCode `protobuf:"varint,2,opt,name=code,proto3,enum=infoserver.SessionUpdateOnHandshakeDoneResult_FailCode" json:"code,omitempty"`
}

func (x *SessionUpdateOnHandshakeDoneResult) Reset() {
	*x = SessionUpdateOnHandshakeDoneResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdateOnHandshakeDoneResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdateOnHandshakeDoneResult) ProtoMessage() {}

func (x *SessionUpdateOnHandshakeDoneResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdateOnHandshakeDoneResult.ProtoReflect.Descriptor instead.
func (*SessionUpdateOnHandshakeDoneResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{7}
}

func (x *SessionUpdateOnHandshakeDoneResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SessionUpdateOnHandshakeDoneResult) GetCode() SessionUpdateOnHandshakeDoneResult_FailCode {
	if x != nil {
		return x.Code
	}
	return SessionUpdateOnHandshakeDoneResult_Internal
}

type SessionQueryByUseridReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionQueryByUseridReq) Reset() {
	*x = SessionQueryByUseridReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionQueryByUseridReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionQueryByUseridReq) ProtoMessage() {}

func (x *SessionQueryByUseridReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionQueryByUseridReq.ProtoReflect.Descriptor instead.
func (*SessionQueryByUseridReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{8}
}

type SessionQueryByUseridResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionQueryByUseridResult) Reset() {
	*x = SessionQueryByUseridResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionQueryByUseridResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionQueryByUseridResult) ProtoMessage() {}

func (x *SessionQueryByUseridResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionQueryByUseridResult.ProtoReflect.Descriptor instead.
func (*SessionQueryByUseridResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{9}
}

type SessionQueryUseridByKeyidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId uint64        `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SessionQueryUseridByKeyidReq) Reset() {
	*x = SessionQueryUseridByKeyidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionQueryUseridByKeyidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionQueryUseridByKeyidReq) ProtoMessage() {}

func (x *SessionQueryUseridByKeyidReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionQueryUseridByKeyidReq.ProtoReflect.Descriptor instead.
func (*SessionQueryUseridByKeyidReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{10}
}

func (x *SessionQueryUseridByKeyidReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SessionQueryUseridByKeyidReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SessionQueryUseridByKeyidResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalError bool  `protobuf:"varint,1,opt,name=internal_error,json=internalError,proto3" json:"internal_error,omitempty"`
	UserId        int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SessionQueryUseridByKeyidResult) Reset() {
	*x = SessionQueryUseridByKeyidResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionQueryUseridByKeyidResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionQueryUseridByKeyidResult) ProtoMessage() {}

func (x *SessionQueryUseridByKeyidResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionQueryUseridByKeyidResult.ProtoReflect.Descriptor instead.
func (*SessionQueryUseridByKeyidResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{11}
}

func (x *SessionQueryUseridByKeyidResult) GetInternalError() bool {
	if x != nil {
		return x.InternalError
	}
	return false
}

func (x *SessionQueryUseridByKeyidResult) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SessionInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId         int32  `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	DeviceModel   string `protobuf:"bytes,2,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	SystemVersion string `protobuf:"bytes,3,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	AppVersion    string `protobuf:"bytes,4,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	LangCode      string `protobuf:"bytes,5,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Ip            string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	Country       string `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	Layer         int32  `protobuf:"varint,8,opt,name=layer,proto3" json:"layer,omitempty"`
	AuthKey       []byte `protobuf:"bytes,9,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	Qts           int32  `protobuf:"varint,10,opt,name=qts,proto3" json:"qts,omitempty"`
	PushTokenType int32  `protobuf:"varint,11,opt,name=push_token_type,json=pushTokenType,proto3" json:"push_token_type,omitempty"`
	PushToken     string `protobuf:"bytes,12,opt,name=push_token,json=pushToken,proto3" json:"push_token,omitempty"`
	CallTokenType int32  `protobuf:"varint,13,opt,name=call_token_type,json=callTokenType,proto3" json:"call_token_type,omitempty"`
	CallToken     string `protobuf:"bytes,14,opt,name=call_token,json=callToken,proto3" json:"call_token,omitempty"`
	PingTime      int64  `protobuf:"varint,15,opt,name=ping_time,json=pingTime,proto3" json:"ping_time,omitempty"`
	PhoneNumber   string `protobuf:"bytes,16,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	UserId        int32  `protobuf:"varint,17,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash    int64  `protobuf:"varint,18,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Seq           int32  `protobuf:"varint,19,opt,name=seq,proto3" json:"seq,omitempty"`
	KeyId         uint64 `protobuf:"varint,20,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	AppName       string `protobuf:"bytes,21,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	Disconnect    bool   `protobuf:"varint,22,opt,name=disconnect,proto3" json:"disconnect,omitempty"` // 客户端是否已断开连接
}

func (x *SessionInformation) Reset() {
	*x = SessionInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInformation) ProtoMessage() {}

func (x *SessionInformation) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInformation.ProtoReflect.Descriptor instead.
func (*SessionInformation) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{12}
}

func (x *SessionInformation) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *SessionInformation) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *SessionInformation) GetSystemVersion() string {
	if x != nil {
		return x.SystemVersion
	}
	return ""
}

func (x *SessionInformation) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *SessionInformation) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *SessionInformation) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SessionInformation) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *SessionInformation) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *SessionInformation) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *SessionInformation) GetQts() int32 {
	if x != nil {
		return x.Qts
	}
	return 0
}

func (x *SessionInformation) GetPushTokenType() int32 {
	if x != nil {
		return x.PushTokenType
	}
	return 0
}

func (x *SessionInformation) GetPushToken() string {
	if x != nil {
		return x.PushToken
	}
	return ""
}

func (x *SessionInformation) GetCallTokenType() int32 {
	if x != nil {
		return x.CallTokenType
	}
	return 0
}

func (x *SessionInformation) GetCallToken() string {
	if x != nil {
		return x.CallToken
	}
	return ""
}

func (x *SessionInformation) GetPingTime() int64 {
	if x != nil {
		return x.PingTime
	}
	return 0
}

func (x *SessionInformation) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SessionInformation) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionInformation) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *SessionInformation) GetSeq() int32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *SessionInformation) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SessionInformation) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *SessionInformation) GetDisconnect() bool {
	if x != nil {
		return x.Disconnect
	}
	return false
}

type SessionQueryByKeyidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId uint64        `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SessionQueryByKeyidReq) Reset() {
	*x = SessionQueryByKeyidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionQueryByKeyidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionQueryByKeyidReq) ProtoMessage() {}

func (x *SessionQueryByKeyidReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionQueryByKeyidReq.ProtoReflect.Descriptor instead.
func (*SessionQueryByKeyidReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{13}
}

func (x *SessionQueryByKeyidReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SessionQueryByKeyidReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SessionQueryByKeyidResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SessionQueryByKeyidResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.SessionQueryByKeyidResult_ResultCode" json:"code,omitempty"`
	Info *SessionInformation                  `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *SessionQueryByKeyidResult) Reset() {
	*x = SessionQueryByKeyidResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionQueryByKeyidResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionQueryByKeyidResult) ProtoMessage() {}

func (x *SessionQueryByKeyidResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionQueryByKeyidResult.ProtoReflect.Descriptor instead.
func (*SessionQueryByKeyidResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{14}
}

func (x *SessionQueryByKeyidResult) GetCode() SessionQueryByKeyidResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return SessionQueryByKeyidResult_Success
}

func (x *SessionQueryByKeyidResult) GetInfo() *SessionInformation {
	if x != nil {
		return x.Info
	}
	return nil
}

type SessionQueryByPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string        `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SessionQueryByPhoneReq) Reset() {
	*x = SessionQueryByPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionQueryByPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionQueryByPhoneReq) ProtoMessage() {}

func (x *SessionQueryByPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionQueryByPhoneReq.ProtoReflect.Descriptor instead.
func (*SessionQueryByPhoneReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{15}
}

func (x *SessionQueryByPhoneReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SessionQueryByPhoneReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SessionQueryByPhoneResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  SessionQueryByPhoneResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.SessionQueryByPhoneResult_ResultCode" json:"code,omitempty"`
	Infos []*SessionInformation                `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *SessionQueryByPhoneResult) Reset() {
	*x = SessionQueryByPhoneResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionQueryByPhoneResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionQueryByPhoneResult) ProtoMessage() {}

func (x *SessionQueryByPhoneResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionQueryByPhoneResult.ProtoReflect.Descriptor instead.
func (*SessionQueryByPhoneResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{16}
}

func (x *SessionQueryByPhoneResult) GetCode() SessionQueryByPhoneResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return SessionQueryByPhoneResult_Success
}

func (x *SessionQueryByPhoneResult) GetInfos() []*SessionInformation {
	if x != nil {
		return x.Infos
	}
	return nil
}

type SessionIncQtsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId uint64        `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SessionIncQtsReq) Reset() {
	*x = SessionIncQtsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionIncQtsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionIncQtsReq) ProtoMessage() {}

func (x *SessionIncQtsReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionIncQtsReq.ProtoReflect.Descriptor instead.
func (*SessionIncQtsReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{17}
}

func (x *SessionIncQtsReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SessionIncQtsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SessionIncQtsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SessionIncQtsResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.SessionIncQtsResult_ResultCode" json:"code,omitempty"`
	Qts  int32                          `protobuf:"varint,2,opt,name=qts,proto3" json:"qts,omitempty"`
}

func (x *SessionIncQtsResult) Reset() {
	*x = SessionIncQtsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionIncQtsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionIncQtsResult) ProtoMessage() {}

func (x *SessionIncQtsResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionIncQtsResult.ProtoReflect.Descriptor instead.
func (*SessionIncQtsResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{18}
}

func (x *SessionIncQtsResult) GetCode() SessionIncQtsResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return SessionIncQtsResult_Success
}

func (x *SessionIncQtsResult) GetQts() int32 {
	if x != nil {
		return x.Qts
	}
	return 0
}

type SessionUpdateInitConnectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId         int32         `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	DeviceModel   string        `protobuf:"bytes,2,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	SystemVersion string        `protobuf:"bytes,3,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	AppVersion    string        `protobuf:"bytes,4,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	LangCode      string        `protobuf:"bytes,5,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Ip            string        `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	Country       string        `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	Layer         int32         `protobuf:"varint,8,opt,name=layer,proto3" json:"layer,omitempty"`
	KeyId         uint64        `protobuf:"varint,9,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // must set
	Debug         *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
	AppName       string        `protobuf:"bytes,11,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *SessionUpdateInitConnectionReq) Reset() {
	*x = SessionUpdateInitConnectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdateInitConnectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdateInitConnectionReq) ProtoMessage() {}

func (x *SessionUpdateInitConnectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdateInitConnectionReq.ProtoReflect.Descriptor instead.
func (*SessionUpdateInitConnectionReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{19}
}

func (x *SessionUpdateInitConnectionReq) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *SessionUpdateInitConnectionReq) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *SessionUpdateInitConnectionReq) GetSystemVersion() string {
	if x != nil {
		return x.SystemVersion
	}
	return ""
}

func (x *SessionUpdateInitConnectionReq) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *SessionUpdateInitConnectionReq) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *SessionUpdateInitConnectionReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SessionUpdateInitConnectionReq) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *SessionUpdateInitConnectionReq) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *SessionUpdateInitConnectionReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SessionUpdateInitConnectionReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SessionUpdateInitConnectionReq) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type SessionUpdateInitConnectionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SessionUpdateInitConnectionResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.SessionUpdateInitConnectionResult_ResultCode" json:"code,omitempty"`
}

func (x *SessionUpdateInitConnectionResult) Reset() {
	*x = SessionUpdateInitConnectionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdateInitConnectionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdateInitConnectionResult) ProtoMessage() {}

func (x *SessionUpdateInitConnectionResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdateInitConnectionResult.ProtoReflect.Descriptor instead.
func (*SessionUpdateInitConnectionResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{20}
}

func (x *SessionUpdateInitConnectionResult) GetCode() SessionUpdateInitConnectionResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return SessionUpdateInitConnectionResult_Success
}

type SessionUpdateRegisterDeviceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PushTokenType int32         `protobuf:"varint,1,opt,name=push_token_type,json=pushTokenType,proto3" json:"push_token_type,omitempty"`
	PushToken     string        `protobuf:"bytes,2,opt,name=push_token,json=pushToken,proto3" json:"push_token,omitempty"`
	KeyId         uint64        `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	CallTokenType int32         `protobuf:"varint,5,opt,name=call_token_type,json=callTokenType,proto3" json:"call_token_type,omitempty"`
	CallToken     string        `protobuf:"bytes,6,opt,name=call_token,json=callToken,proto3" json:"call_token,omitempty"`
}

func (x *SessionUpdateRegisterDeviceReq) Reset() {
	*x = SessionUpdateRegisterDeviceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdateRegisterDeviceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdateRegisterDeviceReq) ProtoMessage() {}

func (x *SessionUpdateRegisterDeviceReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdateRegisterDeviceReq.ProtoReflect.Descriptor instead.
func (*SessionUpdateRegisterDeviceReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{21}
}

func (x *SessionUpdateRegisterDeviceReq) GetPushTokenType() int32 {
	if x != nil {
		return x.PushTokenType
	}
	return 0
}

func (x *SessionUpdateRegisterDeviceReq) GetPushToken() string {
	if x != nil {
		return x.PushToken
	}
	return ""
}

func (x *SessionUpdateRegisterDeviceReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SessionUpdateRegisterDeviceReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SessionUpdateRegisterDeviceReq) GetCallTokenType() int32 {
	if x != nil {
		return x.CallTokenType
	}
	return 0
}

func (x *SessionUpdateRegisterDeviceReq) GetCallToken() string {
	if x != nil {
		return x.CallToken
	}
	return ""
}

type SessionUpdateRegisterDeviceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SessionUpdateRegisterDeviceResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.SessionUpdateRegisterDeviceResult_ResultCode" json:"code,omitempty"`
}

func (x *SessionUpdateRegisterDeviceResult) Reset() {
	*x = SessionUpdateRegisterDeviceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdateRegisterDeviceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdateRegisterDeviceResult) ProtoMessage() {}

func (x *SessionUpdateRegisterDeviceResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdateRegisterDeviceResult.ProtoReflect.Descriptor instead.
func (*SessionUpdateRegisterDeviceResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{22}
}

func (x *SessionUpdateRegisterDeviceResult) GetCode() SessionUpdateRegisterDeviceResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return SessionUpdateRegisterDeviceResult_Success
}

type SessionUpdateSignInReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string        `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	KeyId       uint64        `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId      int32         `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash  int64         `protobuf:"varint,5,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (x *SessionUpdateSignInReq) Reset() {
	*x = SessionUpdateSignInReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdateSignInReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdateSignInReq) ProtoMessage() {}

func (x *SessionUpdateSignInReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdateSignInReq.ProtoReflect.Descriptor instead.
func (*SessionUpdateSignInReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{23}
}

func (x *SessionUpdateSignInReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SessionUpdateSignInReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SessionUpdateSignInReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SessionUpdateSignInReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionUpdateSignInReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

type SessionUpdateSignInResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SessionUpdateSignInResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.SessionUpdateSignInResult_ResultCode" json:"code,omitempty"`
}

func (x *SessionUpdateSignInResult) Reset() {
	*x = SessionUpdateSignInResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdateSignInResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdateSignInResult) ProtoMessage() {}

func (x *SessionUpdateSignInResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdateSignInResult.ProtoReflect.Descriptor instead.
func (*SessionUpdateSignInResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{24}
}

func (x *SessionUpdateSignInResult) GetCode() SessionUpdateSignInResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return SessionUpdateSignInResult_Success
}

type SessionUpdatePingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId       uint64        `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	PingTime    int64         `protobuf:"varint,2,opt,name=ping_time,json=pingTime,proto3" json:"ping_time,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	PhoneNumber string        `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	UpdateTime  bool          `protobuf:"varint,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *SessionUpdatePingReq) Reset() {
	*x = SessionUpdatePingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdatePingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdatePingReq) ProtoMessage() {}

func (x *SessionUpdatePingReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdatePingReq.ProtoReflect.Descriptor instead.
func (*SessionUpdatePingReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{25}
}

func (x *SessionUpdatePingReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SessionUpdatePingReq) GetPingTime() int64 {
	if x != nil {
		return x.PingTime
	}
	return 0
}

func (x *SessionUpdatePingReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SessionUpdatePingReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SessionUpdatePingReq) GetUpdateTime() bool {
	if x != nil {
		return x.UpdateTime
	}
	return false
}

type SessionUpdatePingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   SessionUpdatePingResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.SessionUpdatePingResult_ResultCode" json:"code,omitempty"`
	UserId int32                              `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Phone  string                             `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *SessionUpdatePingResult) Reset() {
	*x = SessionUpdatePingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdatePingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdatePingResult) ProtoMessage() {}

func (x *SessionUpdatePingResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdatePingResult.ProtoReflect.Descriptor instead.
func (*SessionUpdatePingResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{26}
}

func (x *SessionUpdatePingResult) GetCode() SessionUpdatePingResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return SessionUpdatePingResult_Success
}

func (x *SessionUpdatePingResult) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionUpdatePingResult) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type SessionUpdateLogoutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId       uint64        `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
	PhoneNumber string        `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (x *SessionUpdateLogoutReq) Reset() {
	*x = SessionUpdateLogoutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdateLogoutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdateLogoutReq) ProtoMessage() {}

func (x *SessionUpdateLogoutReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdateLogoutReq.ProtoReflect.Descriptor instead.
func (*SessionUpdateLogoutReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{27}
}

func (x *SessionUpdateLogoutReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SessionUpdateLogoutReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SessionUpdateLogoutReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type SessionUpdateLogoutResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SessionUpdateLogoutResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.SessionUpdateLogoutResult_ResultCode" json:"code,omitempty"`
}

func (x *SessionUpdateLogoutResult) Reset() {
	*x = SessionUpdateLogoutResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdateLogoutResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdateLogoutResult) ProtoMessage() {}

func (x *SessionUpdateLogoutResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdateLogoutResult.ProtoReflect.Descriptor instead.
func (*SessionUpdateLogoutResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{28}
}

func (x *SessionUpdateLogoutResult) GetCode() SessionUpdateLogoutResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return SessionUpdateLogoutResult_Success
}

type SessionTerminateByKeyidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId        uint64        `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // 要剔除的keyid
	Debug        *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
	PhoneNumber  string        `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	UserId       int32         `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CurrentKeyId uint64        `protobuf:"varint,5,opt,name=current_key_id,json=currentKeyId,proto3" json:"current_key_id,omitempty"` //踢人端的keyid
}

func (x *SessionTerminateByKeyidReq) Reset() {
	*x = SessionTerminateByKeyidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionTerminateByKeyidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTerminateByKeyidReq) ProtoMessage() {}

func (x *SessionTerminateByKeyidReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTerminateByKeyidReq.ProtoReflect.Descriptor instead.
func (*SessionTerminateByKeyidReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{29}
}

func (x *SessionTerminateByKeyidReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SessionTerminateByKeyidReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SessionTerminateByKeyidReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SessionTerminateByKeyidReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionTerminateByKeyidReq) GetCurrentKeyId() uint64 {
	if x != nil {
		return x.CurrentKeyId
	}
	return 0
}

type SessionTerminateByKeyidResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SessionTerminateByKeyidResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.SessionTerminateByKeyidResult_ResultCode" json:"code,omitempty"`
}

func (x *SessionTerminateByKeyidResult) Reset() {
	*x = SessionTerminateByKeyidResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionTerminateByKeyidResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTerminateByKeyidResult) ProtoMessage() {}

func (x *SessionTerminateByKeyidResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTerminateByKeyidResult.ProtoReflect.Descriptor instead.
func (*SessionTerminateByKeyidResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{30}
}

func (x *SessionTerminateByKeyidResult) GetCode() SessionTerminateByKeyidResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return SessionTerminateByKeyidResult_Success
}

type SessionTerminateExceptKeyidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId       uint64        `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // 要保留的keyid
	Debug       *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
	PhoneNumber string        `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	UserId      int32         `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SessionTerminateExceptKeyidReq) Reset() {
	*x = SessionTerminateExceptKeyidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionTerminateExceptKeyidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTerminateExceptKeyidReq) ProtoMessage() {}

func (x *SessionTerminateExceptKeyidReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTerminateExceptKeyidReq.ProtoReflect.Descriptor instead.
func (*SessionTerminateExceptKeyidReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{31}
}

func (x *SessionTerminateExceptKeyidReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SessionTerminateExceptKeyidReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SessionTerminateExceptKeyidReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SessionTerminateExceptKeyidReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SessionTerminateExceptKeyidResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SessionTerminateExceptKeyidResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.SessionTerminateExceptKeyidResult_ResultCode" json:"code,omitempty"`
}

func (x *SessionTerminateExceptKeyidResult) Reset() {
	*x = SessionTerminateExceptKeyidResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionTerminateExceptKeyidResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTerminateExceptKeyidResult) ProtoMessage() {}

func (x *SessionTerminateExceptKeyidResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTerminateExceptKeyidResult.ProtoReflect.Descriptor instead.
func (*SessionTerminateExceptKeyidResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{32}
}

func (x *SessionTerminateExceptKeyidResult) GetCode() SessionTerminateExceptKeyidResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return SessionTerminateExceptKeyidResult_Success
}

type CheckUserIdAndAccessHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CheckUserIdAndAccessHashReq) Reset() {
	*x = CheckUserIdAndAccessHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserIdAndAccessHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserIdAndAccessHashReq) ProtoMessage() {}

func (x *CheckUserIdAndAccessHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserIdAndAccessHashReq.ProtoReflect.Descriptor instead.
func (*CheckUserIdAndAccessHashReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{33}
}

func (x *CheckUserIdAndAccessHashReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckUserIdAndAccessHashReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *CheckUserIdAndAccessHashReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type CheckUserIdAndAccessHashResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match         bool `protobuf:"varint,1,opt,name=match,proto3" json:"match,omitempty"`                                      // 为true时userid和access hash匹配
	InternalError bool `protobuf:"varint,2,opt,name=internal_error,json=internalError,proto3" json:"internal_error,omitempty"` // 当为true时，match的值不可用
}

func (x *CheckUserIdAndAccessHashResult) Reset() {
	*x = CheckUserIdAndAccessHashResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserIdAndAccessHashResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserIdAndAccessHashResult) ProtoMessage() {}

func (x *CheckUserIdAndAccessHashResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserIdAndAccessHashResult.ProtoReflect.Descriptor instead.
func (*CheckUserIdAndAccessHashResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{34}
}

func (x *CheckUserIdAndAccessHashResult) GetMatch() bool {
	if x != nil {
		return x.Match
	}
	return false
}

func (x *CheckUserIdAndAccessHashResult) GetInternalError() bool {
	if x != nil {
		return x.InternalError
	}
	return false
}

type PasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId       int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Flags       int32         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	CurrPwdHash []byte        `protobuf:"bytes,4,opt,name=curr_pwd_hash,json=currPwdHash,proto3" json:"curr_pwd_hash,omitempty"`
	NewPwdHash  []byte        `protobuf:"bytes,5,opt,name=new_pwd_hash,json=newPwdHash,proto3" json:"new_pwd_hash,omitempty"`
	Salt        []byte        `protobuf:"bytes,6,opt,name=salt,proto3" json:"salt,omitempty"`
	Hint        string        `protobuf:"bytes,7,opt,name=hint,proto3" json:"hint,omitempty"`
	Email       string        `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	ReqType     int32         `protobuf:"varint,9,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *PasswordReq) Reset() {
	*x = PasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordReq) ProtoMessage() {}

func (x *PasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordReq.ProtoReflect.Descriptor instead.
func (*PasswordReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{35}
}

func (x *PasswordReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PasswordReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *PasswordReq) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *PasswordReq) GetCurrPwdHash() []byte {
	if x != nil {
		return x.CurrPwdHash
	}
	return nil
}

func (x *PasswordReq) GetNewPwdHash() []byte {
	if x != nil {
		return x.NewPwdHash
	}
	return nil
}

func (x *PasswordReq) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *PasswordReq) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *PasswordReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PasswordReq) GetReqType() int32 {
	if x != nil {
		return x.ReqType
	}
	return 0
}

func (x *PasswordReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type PtPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId         int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Flags         int32         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	CurrPwdHash   []byte        `protobuf:"bytes,4,opt,name=curr_pwd_hash,json=currPwdHash,proto3" json:"curr_pwd_hash,omitempty"`
	NewPwdHash    []byte        `protobuf:"bytes,5,opt,name=new_pwd_hash,json=newPwdHash,proto3" json:"new_pwd_hash,omitempty"`
	Salt          []byte        `protobuf:"bytes,6,opt,name=salt,proto3" json:"salt,omitempty"`
	Hint          string        `protobuf:"bytes,7,opt,name=hint,proto3" json:"hint,omitempty"`
	Email         string        `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	ReqType       int32         `protobuf:"varint,9,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
	CodeCheckOnly bool          `protobuf:"varint,11,opt,name=code_check_only,json=codeCheckOnly,proto3" json:"code_check_only,omitempty"`
	PhoneCode     string        `protobuf:"bytes,12,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
	PhoneCodeHash string        `protobuf:"bytes,13,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
}

func (x *PtPasswordReq) Reset() {
	*x = PtPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PtPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PtPasswordReq) ProtoMessage() {}

func (x *PtPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PtPasswordReq.ProtoReflect.Descriptor instead.
func (*PtPasswordReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{36}
}

func (x *PtPasswordReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PtPasswordReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *PtPasswordReq) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *PtPasswordReq) GetCurrPwdHash() []byte {
	if x != nil {
		return x.CurrPwdHash
	}
	return nil
}

func (x *PtPasswordReq) GetNewPwdHash() []byte {
	if x != nil {
		return x.NewPwdHash
	}
	return nil
}

func (x *PtPasswordReq) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *PtPasswordReq) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *PtPasswordReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PtPasswordReq) GetReqType() int32 {
	if x != nil {
		return x.ReqType
	}
	return 0
}

func (x *PtPasswordReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *PtPasswordReq) GetCodeCheckOnly() bool {
	if x != nil {
		return x.CodeCheckOnly
	}
	return false
}

func (x *PtPasswordReq) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

func (x *PtPasswordReq) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

type PasswordRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PwdHash          []byte `protobuf:"bytes,1,opt,name=pwd_hash,json=pwdHash,proto3" json:"pwd_hash,omitempty"`
	Email            string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Hint             string `protobuf:"bytes,3,opt,name=hint,proto3" json:"hint,omitempty"`
	Salt             []byte `protobuf:"bytes,4,opt,name=salt,proto3" json:"salt,omitempty"`
	InternalError    bool   `protobuf:"varint,5,opt,name=internal_error,json=internalError,proto3" json:"internal_error,omitempty"`
	EmailUnconfirmed bool   `protobuf:"varint,6,opt,name=email_unconfirmed,json=emailUnconfirmed,proto3" json:"email_unconfirmed,omitempty"`
}

func (x *PasswordRsp) Reset() {
	*x = PasswordRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRsp) ProtoMessage() {}

func (x *PasswordRsp) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRsp.ProtoReflect.Descriptor instead.
func (*PasswordRsp) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{37}
}

func (x *PasswordRsp) GetPwdHash() []byte {
	if x != nil {
		return x.PwdHash
	}
	return nil
}

func (x *PasswordRsp) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PasswordRsp) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *PasswordRsp) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *PasswordRsp) GetInternalError() bool {
	if x != nil {
		return x.InternalError
	}
	return false
}

func (x *PasswordRsp) GetEmailUnconfirmed() bool {
	if x != nil {
		return x.EmailUnconfirmed
	}
	return false
}

type BoolResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret           bool                 `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	InternalError bool                 `protobuf:"varint,2,opt,name=internal_error,json=internalError,proto3" json:"internal_error,omitempty"`
	ECode         BoolResult_ErrorCode `protobuf:"varint,6,opt,name=e_code,json=eCode,proto3,enum=infoserver.BoolResult_ErrorCode" json:"e_code,omitempty"`
}

func (x *BoolResult) Reset() {
	*x = BoolResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolResult) ProtoMessage() {}

func (x *BoolResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolResult.ProtoReflect.Descriptor instead.
func (*BoolResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{38}
}

func (x *BoolResult) GetRet() bool {
	if x != nil {
		return x.Ret
	}
	return false
}

func (x *BoolResult) GetInternalError() bool {
	if x != nil {
		return x.InternalError
	}
	return false
}

func (x *BoolResult) GetECode() BoolResult_ErrorCode {
	if x != nil {
		return x.ECode
	}
	return BoolResult_Internal
}

type IntResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32 `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *IntResult) Reset() {
	*x = IntResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntResult) ProtoMessage() {}

func (x *IntResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntResult.ProtoReflect.Descriptor instead.
func (*IntResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{39}
}

func (x *IntResult) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

type UserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName string        `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string        `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Phone     string        `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	UserId    int32         `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UserInfoReq) Reset() {
	*x = UserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoReq) ProtoMessage() {}

func (x *UserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoReq.ProtoReflect.Descriptor instead.
func (*UserInfoReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{40}
}

func (x *UserInfoReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserInfoReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserInfoReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInfoReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UserInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *UserInfoRsp) Reset() {
	*x = UserInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoRsp) ProtoMessage() {}

func (x *UserInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoRsp.ProtoReflect.Descriptor instead.
func (*UserInfoRsp) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{41}
}

func (x *UserInfoRsp) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInfoRsp) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *UserInfoRsp) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GroupIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type   int32         `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GroupIdReq) Reset() {
	*x = GroupIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupIdReq) ProtoMessage() {}

func (x *GroupIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupIdReq.ProtoReflect.Descriptor instead.
func (*GroupIdReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{42}
}

func (x *GroupIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GroupIdReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GroupIdReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GroupIdRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    int32         `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GroupIdRsp) Reset() {
	*x = GroupIdRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupIdRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupIdRsp) ProtoMessage() {}

func (x *GroupIdRsp) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupIdRsp.ProtoReflect.Descriptor instead.
func (*GroupIdRsp) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{43}
}

func (x *GroupIdRsp) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupIdRsp) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GroupIdRsp) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GroupIdRsp) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type IdAssiginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type   int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *IdAssiginReq) Reset() {
	*x = IdAssiginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdAssiginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdAssiginReq) ProtoMessage() {}

func (x *IdAssiginReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdAssiginReq.ProtoReflect.Descriptor instead.
func (*IdAssiginReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{44}
}

func (x *IdAssiginReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IdAssiginReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type IdAssiginRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	UserId     int32 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *IdAssiginRsp) Reset() {
	*x = IdAssiginRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdAssiginRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdAssiginRsp) ProtoMessage() {}

func (x *IdAssiginRsp) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdAssiginRsp.ProtoReflect.Descriptor instead.
func (*IdAssiginRsp) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{45}
}

func (x *IdAssiginRsp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IdAssiginRsp) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *IdAssiginRsp) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId         int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	SessionId     int64         `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AuthKey       []byte        `protobuf:"bytes,4,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	AccessHash    int64         `protobuf:"varint,5,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Status        int32         `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Layer         int32         `protobuf:"varint,7,opt,name=layer,proto3" json:"layer,omitempty"`
	Seq           int32         `protobuf:"varint,8,opt,name=seq,proto3" json:"seq,omitempty"`
	Qts           int32         `protobuf:"varint,9,opt,name=qts,proto3" json:"qts,omitempty"`
	LogoutTime    int64         `protobuf:"varint,10,opt,name=logout_time,json=logoutTime,proto3" json:"logout_time,omitempty"`
	CurrentStatus int32         `protobuf:"varint,11,opt,name=current_status,json=currentStatus,proto3" json:"current_status,omitempty"`
	Ip            string        `protobuf:"bytes,12,opt,name=ip,proto3" json:"ip,omitempty"`
	DeviceModel   string        `protobuf:"bytes,13,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	DeviceTp      int32         `protobuf:"varint,14,opt,name=device_tp,json=deviceTp,proto3" json:"device_tp,omitempty"`
	SystemVer     string        `protobuf:"bytes,15,opt,name=system_ver,json=systemVer,proto3" json:"system_ver,omitempty"`
	AppVer        string        `protobuf:"bytes,16,opt,name=app_ver,json=appVer,proto3" json:"app_ver,omitempty"`
	LangCode      string        `protobuf:"bytes,17,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	ApiId         int32         `protobuf:"varint,18,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	AppName       string        `protobuf:"bytes,19,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	Phone         string        `protobuf:"bytes,20,opt,name=phone,proto3" json:"phone,omitempty"`
	LoginCountry  string        `protobuf:"bytes,21,opt,name=login_country,json=loginCountry,proto3" json:"login_country,omitempty"`
	LoginRegion   string        `protobuf:"bytes,22,opt,name=login_region,json=loginRegion,proto3" json:"login_region,omitempty"`
	PushToken     string        `protobuf:"bytes,23,opt,name=push_token,json=pushToken,proto3" json:"push_token,omitempty"`
	PushTokenTp   int32         `protobuf:"varint,24,opt,name=push_token_tp,json=pushTokenTp,proto3" json:"push_token_tp,omitempty"`
	CallToken     string        `protobuf:"bytes,25,opt,name=call_token,json=callToken,proto3" json:"call_token,omitempty"`
	CallTokenTp   int32         `protobuf:"varint,26,opt,name=call_token_tp,json=callTokenTp,proto3" json:"call_token_tp,omitempty"`
	CreateTime    int64         `protobuf:"varint,27,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	LastTime      int64         `protobuf:"varint,28,opt,name=last_time,json=lastTime,proto3" json:"last_time,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,29,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{46}
}

func (x *Session) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Session) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *Session) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Session) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *Session) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *Session) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Session) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *Session) GetSeq() int32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Session) GetQts() int32 {
	if x != nil {
		return x.Qts
	}
	return 0
}

func (x *Session) GetLogoutTime() int64 {
	if x != nil {
		return x.LogoutTime
	}
	return 0
}

func (x *Session) GetCurrentStatus() int32 {
	if x != nil {
		return x.CurrentStatus
	}
	return 0
}

func (x *Session) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Session) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *Session) GetDeviceTp() int32 {
	if x != nil {
		return x.DeviceTp
	}
	return 0
}

func (x *Session) GetSystemVer() string {
	if x != nil {
		return x.SystemVer
	}
	return ""
}

func (x *Session) GetAppVer() string {
	if x != nil {
		return x.AppVer
	}
	return ""
}

func (x *Session) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *Session) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *Session) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Session) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Session) GetLoginCountry() string {
	if x != nil {
		return x.LoginCountry
	}
	return ""
}

func (x *Session) GetLoginRegion() string {
	if x != nil {
		return x.LoginRegion
	}
	return ""
}

func (x *Session) GetPushToken() string {
	if x != nil {
		return x.PushToken
	}
	return ""
}

func (x *Session) GetPushTokenTp() int32 {
	if x != nil {
		return x.PushTokenTp
	}
	return 0
}

func (x *Session) GetCallToken() string {
	if x != nil {
		return x.CallToken
	}
	return ""
}

func (x *Session) GetCallTokenTp() int32 {
	if x != nil {
		return x.CallTokenTp
	}
	return 0
}

func (x *Session) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Session) GetLastTime() int64 {
	if x != nil {
		return x.LastTime
	}
	return 0
}

func (x *Session) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SessionArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*Session `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *SessionArray) Reset() {
	*x = SessionArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionArray) ProtoMessage() {}

func (x *SessionArray) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionArray.ProtoReflect.Descriptor instead.
func (*SessionArray) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{47}
}

func (x *SessionArray) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type SessionUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// int32   type = 2;
	Type  SessionUpdate_UpdateType `protobuf:"varint,2,opt,name=type,proto3,enum=infoserver.SessionUpdate_UpdateType" json:"type,omitempty"`
	Debug *pbcomm.Debug            `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SessionUpdate) Reset() {
	*x = SessionUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdate) ProtoMessage() {}

func (x *SessionUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdate.ProtoReflect.Descriptor instead.
func (*SessionUpdate) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{48}
}

func (x *SessionUpdate) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *SessionUpdate) GetType() SessionUpdate_UpdateType {
	if x != nil {
		return x.Type
	}
	return SessionUpdate_Type0NoUse
}

func (x *SessionUpdate) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SessionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids  []int32       `protobuf:"varint,1,rep,packed,name=uids,proto3" json:"uids,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SessionsReq) Reset() {
	*x = SessionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionsReq) ProtoMessage() {}

func (x *SessionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionsReq.ProtoReflect.Descriptor instead.
func (*SessionsReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{49}
}

func (x *SessionsReq) GetUids() []int32 {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *SessionsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SessionsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId         int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	CurrentStatus int32 `protobuf:"varint,3,opt,name=current_status,json=currentStatus,proto3" json:"current_status,omitempty"`
}

func (x *SessionsStatus) Reset() {
	*x = SessionsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionsStatus) ProtoMessage() {}

func (x *SessionsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionsStatus.ProtoReflect.Descriptor instead.
func (*SessionsStatus) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{50}
}

func (x *SessionsStatus) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionsStatus) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SessionsStatus) GetCurrentStatus() int32 {
	if x != nil {
		return x.CurrentStatus
	}
	return 0
}

type SessionsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ss []*SessionsStatus `protobuf:"bytes,1,rep,name=ss,proto3" json:"ss,omitempty"`
}

func (x *SessionsRsp) Reset() {
	*x = SessionsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionsRsp) ProtoMessage() {}

func (x *SessionsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionsRsp.ProtoReflect.Descriptor instead.
func (*SessionsRsp) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{51}
}

func (x *SessionsRsp) GetSs() []*SessionsStatus {
	if x != nil {
		return x.Ss
	}
	return nil
}

type SessionTerminateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session                 `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Type    SessionTerminateReq_Type `protobuf:"varint,2,opt,name=type,proto3,enum=infoserver.SessionTerminateReq_Type" json:"type,omitempty"`
	Debug   *pbcomm.Debug            `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SessionTerminateReq) Reset() {
	*x = SessionTerminateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionTerminateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTerminateReq) ProtoMessage() {}

func (x *SessionTerminateReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTerminateReq.ProtoReflect.Descriptor instead.
func (*SessionTerminateReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{52}
}

func (x *SessionTerminateReq) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *SessionTerminateReq) GetType() SessionTerminateReq_Type {
	if x != nil {
		return x.Type
	}
	return SessionTerminateReq_SELF
}

func (x *SessionTerminateReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SessionTerminateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  bool    `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Desc string  `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Keys []int64 `protobuf:"varint,3,rep,packed,name=keys,proto3" json:"keys,omitempty"`
}

func (x *SessionTerminateRsp) Reset() {
	*x = SessionTerminateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionTerminateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTerminateRsp) ProtoMessage() {}

func (x *SessionTerminateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTerminateRsp.ProtoReflect.Descriptor instead.
func (*SessionTerminateRsp) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{53}
}

func (x *SessionTerminateRsp) GetRet() bool {
	if x != nil {
		return x.Ret
	}
	return false
}

func (x *SessionTerminateRsp) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SessionTerminateRsp) GetKeys() []int64 {
	if x != nil {
		return x.Keys
	}
	return nil
}

type Authorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId  int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	AuthId int32         `protobuf:"varint,3,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	Data   []byte        `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	DcId   int32         `protobuf:"varint,5,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *Authorization) Reset() {
	*x = Authorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorization) ProtoMessage() {}

func (x *Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorization.ProtoReflect.Descriptor instead.
func (*Authorization) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{54}
}

func (x *Authorization) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Authorization) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *Authorization) GetAuthId() int32 {
	if x != nil {
		return x.AuthId
	}
	return 0
}

func (x *Authorization) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Authorization) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

func (x *Authorization) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type CheckCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendType     int32  `protobuf:"varint,1,opt,name=send_type,json=sendType,proto3" json:"send_type,omitempty"` //发送类型， 0：短信 1：email 2：App
	BusinessType int32  `protobuf:"varint,2,opt,name=business_type,json=businessType,proto3" json:"business_type,omitempty"`
	Email        string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phone        string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	UserId       int32  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Code         string `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	CodeLen      int32  `protobuf:"varint,7,opt,name=code_len,json=codeLen,proto3" json:"code_len,omitempty"`
	CodeHash     string `protobuf:"bytes,8,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	ResendFlag   bool   `protobuf:"varint,9,opt,name=resend_flag,json=resendFlag,proto3" json:"resend_flag,omitempty"`
	KeyId        int64  `protobuf:"varint,10,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *CheckCodeReq) Reset() {
	*x = CheckCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCodeReq) ProtoMessage() {}

func (x *CheckCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCodeReq.ProtoReflect.Descriptor instead.
func (*CheckCodeReq) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{55}
}

func (x *CheckCodeReq) GetSendType() int32 {
	if x != nil {
		return x.SendType
	}
	return 0
}

func (x *CheckCodeReq) GetBusinessType() int32 {
	if x != nil {
		return x.BusinessType
	}
	return 0
}

func (x *CheckCodeReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CheckCodeReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CheckCodeReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CheckCodeReq) GetCodeLen() int32 {
	if x != nil {
		return x.CodeLen
	}
	return 0
}

func (x *CheckCodeReq) GetCodeHash() string {
	if x != nil {
		return x.CodeHash
	}
	return ""
}

func (x *CheckCodeReq) GetResendFlag() bool {
	if x != nil {
		return x.ResendFlag
	}
	return false
}

func (x *CheckCodeReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

type CheckCodeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Right    bool   `protobuf:"varint,1,opt,name=right,proto3" json:"right,omitempty"` //发送类型， 0：短信 1：email 2：App
	Code     string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	CodeHash string `protobuf:"bytes,3,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	Desc     string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *CheckCodeRsp) Reset() {
	*x = CheckCodeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCodeRsp) ProtoMessage() {}

func (x *CheckCodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCodeRsp.ProtoReflect.Descriptor instead.
func (*CheckCodeRsp) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{56}
}

func (x *CheckCodeRsp) GetRight() bool {
	if x != nil {
		return x.Right
	}
	return false
}

func (x *CheckCodeRsp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CheckCodeRsp) GetCodeHash() string {
	if x != nil {
		return x.CodeHash
	}
	return ""
}

func (x *CheckCodeRsp) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type SetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret bool   `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Str string `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
	Num int32  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *SetResult) Reset() {
	*x = SetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResult) ProtoMessage() {}

func (x *SetResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResult.ProtoReflect.Descriptor instead.
func (*SetResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{57}
}

func (x *SetResult) GetRet() bool {
	if x != nil {
		return x.Ret
	}
	return false
}

func (x *SetResult) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *SetResult) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

var File_account_proto protoreflect.FileDescriptor

var file_account_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x28, 0x69, 0x6d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x73, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa7,
	0x01, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x34, 0x0a, 0x1b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x70, 0x69, 0x49, 0x44, 0x62, 0x79, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x69, 0x49, 0x44, 0x62, 0x79,
	0x4b, 0x65, 0x79, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x69,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x53, 0x0a, 0x1f, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x22, 0xb9,
	0x01, 0x0a, 0x22, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x4b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x08,
	0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x10, 0x01, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x5a, 0x0a, 0x1c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x61, 0x0a, 0x1f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x8c, 0x05, 0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x69,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x71, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x71, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x22, 0x54, 0x0a, 0x16, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc3, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x60, 0x0a,
	0x16, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0xc5, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x4e, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x51, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x95, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x51, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x51, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x71, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x71, 0x74,
	0x73, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22,
	0xd6, 0x02, 0x0a, 0x1e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x1e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61,
	0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x16, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x8f, 0x01,
	0x0a, 0x19, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22,
	0xb3, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x22, 0x45, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x6b, 0x65, 0x79, 0x55, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x10, 0x02, 0x22, 0x77, 0x0a, 0x16, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x98, 0x01,
	0x0a, 0x1e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x4b, 0x65, 0x79, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x7c, 0x0a, 0x1b, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5d, 0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x97, 0x02, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x70, 0x77, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x50, 0x77, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x77, 0x64, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x77, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x88, 0x03, 0x0a, 0x0d, 0x50, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x5f, 0x70, 0x77, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x50, 0x77, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a,
	0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x77, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x77, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73,
	0x61, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0xba, 0x01, 0x0a,
	0x0b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x77, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x77, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x55, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x22, 0xfb, 0x01, 0x0a, 0x0a, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x37, 0x0a, 0x06, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7b, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x05, 0x22, 0x1d, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6c, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x5e, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3b, 0x0a,
	0x0c, 0x49, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x0c, 0x49, 0x64,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xcc, 0x06, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x71,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x71, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x56, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x69, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x70, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x3f, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x30, 0x4e, 0x6f, 0x55, 0x73,
	0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x31, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x32, 0x49, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x79, 0x70, 0x65, 0x33, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x79, 0x70, 0x65, 0x34, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70,
	0x65, 0x35, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79,
	0x70, 0x65, 0x36, 0x50, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x22, 0x46, 0x0a, 0x0b, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x67, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x39, 0x0a, 0x0b, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x02, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x02, 0x73, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x1c, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x01, 0x22, 0x4f, 0x0a, 0x13, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x0d, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x63, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x99, 0x02, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22,
	0x69, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x41, 0x0a, 0x09, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x32, 0xd2, 0x14,
	0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x10, 0x55, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x1a, 0x16,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x55, 0x6e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x73,
	0x70, 0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1b, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1b, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x17, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x69, 0x64, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x69,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1b, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x22, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x69,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x51, 0x74, 0x73, 0x12, 0x1c,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x51, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x63, 0x51, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x74, 0x0a, 0x19, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x28, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x42, 0x79, 0x4b, 0x65,
	0x79, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x23, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x1c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x18, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x69, 0x49, 0x44,
	0x62, 0x79, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x70, 0x69, 0x49, 0x44, 0x62, 0x79, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x69, 0x49, 0x44, 0x62,
	0x79, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x15,
	0x53, 0x61, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x16, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x17,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x18, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e,
	0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x2a,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x79, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x10, 0x50, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x42, 0x31, 0x5a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_account_proto_rawDescOnce sync.Once
	file_account_proto_rawDescData = file_account_proto_rawDesc
)

func file_account_proto_rawDescGZIP() []byte {
	file_account_proto_rawDescOnce.Do(func() {
		file_account_proto_rawDescData = protoimpl.X.CompressGZIP(file_account_proto_rawDescData)
	})
	return file_account_proto_rawDescData
}

var file_account_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_account_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_account_proto_goTypes = []interface{}{
	(SessionUpdateOnHandshakeDoneResult_FailCode)(0),  // 0: infoserver.SessionUpdateOnHandshakeDoneResult.FailCode
	(SessionQueryByKeyidResult_ResultCode)(0),         // 1: infoserver.SessionQueryByKeyidResult.ResultCode
	(SessionQueryByPhoneResult_ResultCode)(0),         // 2: infoserver.SessionQueryByPhoneResult.ResultCode
	(SessionIncQtsResult_ResultCode)(0),               // 3: infoserver.SessionIncQtsResult.ResultCode
	(SessionUpdateInitConnectionResult_ResultCode)(0), // 4: infoserver.SessionUpdateInitConnectionResult.ResultCode
	(SessionUpdateRegisterDeviceResult_ResultCode)(0), // 5: infoserver.SessionUpdateRegisterDeviceResult.ResultCode
	(SessionUpdateSignInResult_ResultCode)(0),         // 6: infoserver.SessionUpdateSignInResult.ResultCode
	(SessionUpdatePingResult_ResultCode)(0),           // 7: infoserver.SessionUpdatePingResult.ResultCode
	(SessionUpdateLogoutResult_ResultCode)(0),         // 8: infoserver.SessionUpdateLogoutResult.ResultCode
	(SessionTerminateByKeyidResult_ResultCode)(0),     // 9: infoserver.SessionTerminateByKeyidResult.ResultCode
	(SessionTerminateExceptKeyidResult_ResultCode)(0), // 10: infoserver.SessionTerminateExceptKeyidResult.ResultCode
	(BoolResult_ErrorCode)(0),                         // 11: infoserver.BoolResult.ErrorCode
	(SessionUpdate_UpdateType)(0),                     // 12: infoserver.SessionUpdate.UpdateType
	(SessionTerminateReq_Type)(0),                     // 13: infoserver.SessionTerminateReq.Type
	(*GetUniqueNumberByKeyIdReq)(nil),                 // 14: infoserver.GetUniqueNumberByKeyIdReq
	(*GetUniqueNumberByKeyIdResult)(nil),              // 15: infoserver.GetUniqueNumberByKeyIdResult
	(*SessionDisconnectReq)(nil),                      // 16: infoserver.SessionDisconnectReq
	(*SessionDisconnectResult)(nil),                   // 17: infoserver.SessionDisconnectResult
	(*SessionQueryApiIDbyKeyidReq)(nil),               // 18: infoserver.SessionQueryApiIDbyKeyidReq
	(*SessionQueryApiIDbyKeyidResult)(nil),            // 19: infoserver.SessionQueryApiIDbyKeyidResult
	(*SessionUpdateOnHandshakeDoneReq)(nil),           // 20: infoserver.SessionUpdateOnHandshakeDoneReq
	(*SessionUpdateOnHandshakeDoneResult)(nil),        // 21: infoserver.SessionUpdateOnHandshakeDoneResult
	(*SessionQueryByUseridReq)(nil),                   // 22: infoserver.SessionQueryByUseridReq
	(*SessionQueryByUseridResult)(nil),                // 23: infoserver.SessionQueryByUseridResult
	(*SessionQueryUseridByKeyidReq)(nil),              // 24: infoserver.SessionQueryUseridByKeyidReq
	(*SessionQueryUseridByKeyidResult)(nil),           // 25: infoserver.SessionQueryUseridByKeyidResult
	(*SessionInformation)(nil),                        // 26: infoserver.SessionInformation
	(*SessionQueryByKeyidReq)(nil),                    // 27: infoserver.SessionQueryByKeyidReq
	(*SessionQueryByKeyidResult)(nil),                 // 28: infoserver.SessionQueryByKeyidResult
	(*SessionQueryByPhoneReq)(nil),                    // 29: infoserver.SessionQueryByPhoneReq
	(*SessionQueryByPhoneResult)(nil),                 // 30: infoserver.SessionQueryByPhoneResult
	(*SessionIncQtsReq)(nil),                          // 31: infoserver.SessionIncQtsReq
	(*SessionIncQtsResult)(nil),                       // 32: infoserver.SessionIncQtsResult
	(*SessionUpdateInitConnectionReq)(nil),            // 33: infoserver.SessionUpdateInitConnectionReq
	(*SessionUpdateInitConnectionResult)(nil),         // 34: infoserver.SessionUpdateInitConnectionResult
	(*SessionUpdateRegisterDeviceReq)(nil),            // 35: infoserver.SessionUpdateRegisterDeviceReq
	(*SessionUpdateRegisterDeviceResult)(nil),         // 36: infoserver.SessionUpdateRegisterDeviceResult
	(*SessionUpdateSignInReq)(nil),                    // 37: infoserver.SessionUpdateSignInReq
	(*SessionUpdateSignInResult)(nil),                 // 38: infoserver.SessionUpdateSignInResult
	(*SessionUpdatePingReq)(nil),                      // 39: infoserver.SessionUpdatePingReq
	(*SessionUpdatePingResult)(nil),                   // 40: infoserver.SessionUpdatePingResult
	(*SessionUpdateLogoutReq)(nil),                    // 41: infoserver.SessionUpdateLogoutReq
	(*SessionUpdateLogoutResult)(nil),                 // 42: infoserver.SessionUpdateLogoutResult
	(*SessionTerminateByKeyidReq)(nil),                // 43: infoserver.SessionTerminateByKeyidReq
	(*SessionTerminateByKeyidResult)(nil),             // 44: infoserver.SessionTerminateByKeyidResult
	(*SessionTerminateExceptKeyidReq)(nil),            // 45: infoserver.SessionTerminateExceptKeyidReq
	(*SessionTerminateExceptKeyidResult)(nil),         // 46: infoserver.SessionTerminateExceptKeyidResult
	(*CheckUserIdAndAccessHashReq)(nil),               // 47: infoserver.CheckUserIdAndAccessHashReq
	(*CheckUserIdAndAccessHashResult)(nil),            // 48: infoserver.CheckUserIdAndAccessHashResult
	(*PasswordReq)(nil),                               // 49: infoserver.PasswordReq
	(*PtPasswordReq)(nil),                             // 50: infoserver.PtPasswordReq
	(*PasswordRsp)(nil),                               // 51: infoserver.PasswordRsp
	(*BoolResult)(nil),                                // 52: infoserver.BoolResult
	(*IntResult)(nil),                                 // 53: infoserver.IntResult
	(*UserInfoReq)(nil),                               // 54: infoserver.UserInfoReq
	(*UserInfoRsp)(nil),                               // 55: infoserver.UserInfoRsp
	(*GroupIdReq)(nil),                                // 56: infoserver.GroupIdReq
	(*GroupIdRsp)(nil),                                // 57: infoserver.GroupIdRsp
	(*IdAssiginReq)(nil),                              // 58: infoserver.IdAssiginReq
	(*IdAssiginRsp)(nil),                              // 59: infoserver.IdAssiginRsp
	(*Session)(nil),                                   // 60: infoserver.Session
	(*SessionArray)(nil),                              // 61: infoserver.SessionArray
	(*SessionUpdate)(nil),                             // 62: infoserver.SessionUpdate
	(*SessionsReq)(nil),                               // 63: infoserver.SessionsReq
	(*SessionsStatus)(nil),                            // 64: infoserver.SessionsStatus
	(*SessionsRsp)(nil),                               // 65: infoserver.SessionsRsp
	(*SessionTerminateReq)(nil),                       // 66: infoserver.SessionTerminateReq
	(*SessionTerminateRsp)(nil),                       // 67: infoserver.SessionTerminateRsp
	(*Authorization)(nil),                             // 68: infoserver.Authorization
	(*CheckCodeReq)(nil),                              // 69: infoserver.CheckCodeReq
	(*CheckCodeRsp)(nil),                              // 70: infoserver.CheckCodeRsp
	(*SetResult)(nil),                                 // 71: infoserver.SetResult
	(*pbcomm.Debug)(nil),                              // 72: pbcomm.Debug
}
var file_account_proto_depIdxs = []int32{
	0,  // 0: infoserver.SessionUpdateOnHandshakeDoneResult.code:type_name -> infoserver.SessionUpdateOnHandshakeDoneResult.FailCode
	72, // 1: infoserver.SessionQueryUseridByKeyidReq.debug:type_name -> pbcomm.Debug
	72, // 2: infoserver.SessionQueryByKeyidReq.debug:type_name -> pbcomm.Debug
	1,  // 3: infoserver.SessionQueryByKeyidResult.code:type_name -> infoserver.SessionQueryByKeyidResult.ResultCode
	26, // 4: infoserver.SessionQueryByKeyidResult.info:type_name -> infoserver.SessionInformation
	72, // 5: infoserver.SessionQueryByPhoneReq.debug:type_name -> pbcomm.Debug
	2,  // 6: infoserver.SessionQueryByPhoneResult.code:type_name -> infoserver.SessionQueryByPhoneResult.ResultCode
	26, // 7: infoserver.SessionQueryByPhoneResult.infos:type_name -> infoserver.SessionInformation
	72, // 8: infoserver.SessionIncQtsReq.debug:type_name -> pbcomm.Debug
	3,  // 9: infoserver.SessionIncQtsResult.code:type_name -> infoserver.SessionIncQtsResult.ResultCode
	72, // 10: infoserver.SessionUpdateInitConnectionReq.debug:type_name -> pbcomm.Debug
	4,  // 11: infoserver.SessionUpdateInitConnectionResult.code:type_name -> infoserver.SessionUpdateInitConnectionResult.ResultCode
	72, // 12: infoserver.SessionUpdateRegisterDeviceReq.debug:type_name -> pbcomm.Debug
	5,  // 13: infoserver.SessionUpdateRegisterDeviceResult.code:type_name -> infoserver.SessionUpdateRegisterDeviceResult.ResultCode
	72, // 14: infoserver.SessionUpdateSignInReq.debug:type_name -> pbcomm.Debug
	6,  // 15: infoserver.SessionUpdateSignInResult.code:type_name -> infoserver.SessionUpdateSignInResult.ResultCode
	72, // 16: infoserver.SessionUpdatePingReq.debug:type_name -> pbcomm.Debug
	7,  // 17: infoserver.SessionUpdatePingResult.code:type_name -> infoserver.SessionUpdatePingResult.ResultCode
	72, // 18: infoserver.SessionUpdateLogoutReq.debug:type_name -> pbcomm.Debug
	8,  // 19: infoserver.SessionUpdateLogoutResult.code:type_name -> infoserver.SessionUpdateLogoutResult.ResultCode
	72, // 20: infoserver.SessionTerminateByKeyidReq.debug:type_name -> pbcomm.Debug
	9,  // 21: infoserver.SessionTerminateByKeyidResult.code:type_name -> infoserver.SessionTerminateByKeyidResult.ResultCode
	72, // 22: infoserver.SessionTerminateExceptKeyidReq.debug:type_name -> pbcomm.Debug
	10, // 23: infoserver.SessionTerminateExceptKeyidResult.code:type_name -> infoserver.SessionTerminateExceptKeyidResult.ResultCode
	72, // 24: infoserver.CheckUserIdAndAccessHashReq.debug:type_name -> pbcomm.Debug
	72, // 25: infoserver.PasswordReq.debug:type_name -> pbcomm.Debug
	72, // 26: infoserver.PtPasswordReq.debug:type_name -> pbcomm.Debug
	11, // 27: infoserver.BoolResult.e_code:type_name -> infoserver.BoolResult.ErrorCode
	72, // 28: infoserver.UserInfoReq.debug:type_name -> pbcomm.Debug
	72, // 29: infoserver.UserInfoRsp.debug:type_name -> pbcomm.Debug
	72, // 30: infoserver.GroupIdReq.debug:type_name -> pbcomm.Debug
	72, // 31: infoserver.GroupIdRsp.debug:type_name -> pbcomm.Debug
	72, // 32: infoserver.Session.debug:type_name -> pbcomm.Debug
	60, // 33: infoserver.SessionArray.sessions:type_name -> infoserver.Session
	60, // 34: infoserver.SessionUpdate.session:type_name -> infoserver.Session
	12, // 35: infoserver.SessionUpdate.type:type_name -> infoserver.SessionUpdate.UpdateType
	72, // 36: infoserver.SessionUpdate.debug:type_name -> pbcomm.Debug
	72, // 37: infoserver.SessionsReq.debug:type_name -> pbcomm.Debug
	64, // 38: infoserver.SessionsRsp.ss:type_name -> infoserver.SessionsStatus
	60, // 39: infoserver.SessionTerminateReq.session:type_name -> infoserver.Session
	13, // 40: infoserver.SessionTerminateReq.type:type_name -> infoserver.SessionTerminateReq.Type
	72, // 41: infoserver.SessionTerminateReq.debug:type_name -> pbcomm.Debug
	72, // 42: infoserver.Authorization.debug:type_name -> pbcomm.Debug
	54, // 43: infoserver.Accounter.AssignUserInfo:input_type -> infoserver.UserInfoReq
	55, // 44: infoserver.Accounter.UnAssignUserInfo:input_type -> infoserver.UserInfoRsp
	54, // 45: infoserver.Accounter.CheckPhoneRegistered:input_type -> infoserver.UserInfoReq
	56, // 46: infoserver.Accounter.AssignGroupId:input_type -> infoserver.GroupIdReq
	57, // 47: infoserver.Accounter.UnAssignGroupId:input_type -> infoserver.GroupIdRsp
	33, // 48: infoserver.Accounter.SessionUpdateInitConnection:input_type -> infoserver.SessionUpdateInitConnectionReq
	35, // 49: infoserver.Accounter.SessionUpdateRegisterDevice:input_type -> infoserver.SessionUpdateRegisterDeviceReq
	37, // 50: infoserver.Accounter.SessionUpdateSignIn:input_type -> infoserver.SessionUpdateSignInReq
	39, // 51: infoserver.Accounter.SessionUpdatePing:input_type -> infoserver.SessionUpdatePingReq
	41, // 52: infoserver.Accounter.SessionUpdateLogout:input_type -> infoserver.SessionUpdateLogoutReq
	43, // 53: infoserver.Accounter.SessionTerminateByKeyid:input_type -> infoserver.SessionTerminateByKeyidReq
	45, // 54: infoserver.Accounter.SessionTerminateExceptKeyid:input_type -> infoserver.SessionTerminateExceptKeyidReq
	27, // 55: infoserver.Accounter.SessionQueryByKeyid:input_type -> infoserver.SessionQueryByKeyidReq
	29, // 56: infoserver.Accounter.SessionQueryByPhone:input_type -> infoserver.SessionQueryByPhoneReq
	31, // 57: infoserver.Accounter.SessionIncQts:input_type -> infoserver.SessionIncQtsReq
	24, // 58: infoserver.Accounter.SessionQueryUseridByKeyid:input_type -> infoserver.SessionQueryUseridByKeyidReq
	22, // 59: infoserver.Accounter.SessionQueryByUserid:input_type -> infoserver.SessionQueryByUseridReq
	20, // 60: infoserver.Accounter.SessionUpdateOnHandshakeDone:input_type -> infoserver.SessionUpdateOnHandshakeDoneReq
	18, // 61: infoserver.Accounter.SessionQueryApiIDbyKeyid:input_type -> infoserver.SessionQueryApiIDbyKeyidReq
	16, // 62: infoserver.Accounter.SessionDisconnect:input_type -> infoserver.SessionDisconnectReq
	68, // 63: infoserver.Accounter.SaveAuthorizationInfo:input_type -> infoserver.Authorization
	68, // 64: infoserver.Accounter.QueryAuthorizationInfo:input_type -> infoserver.Authorization
	49, // 65: infoserver.Accounter.UpdatePassword:input_type -> infoserver.PasswordReq
	49, // 66: infoserver.Accounter.GetPassword:input_type -> infoserver.PasswordReq
	49, // 67: infoserver.Accounter.DeletePassword:input_type -> infoserver.PasswordReq
	47, // 68: infoserver.Accounter.CheckUserIdAndAccessHash:input_type -> infoserver.CheckUserIdAndAccessHashReq
	14, // 69: infoserver.Accounter.GetUniqueNumberByKeyId:input_type -> infoserver.GetUniqueNumberByKeyIdReq
	50, // 70: infoserver.Accounter.PtUpdatePassword:input_type -> infoserver.PtPasswordReq
	55, // 71: infoserver.Accounter.AssignUserInfo:output_type -> infoserver.UserInfoRsp
	52, // 72: infoserver.Accounter.UnAssignUserInfo:output_type -> infoserver.BoolResult
	52, // 73: infoserver.Accounter.CheckPhoneRegistered:output_type -> infoserver.BoolResult
	57, // 74: infoserver.Accounter.AssignGroupId:output_type -> infoserver.GroupIdRsp
	52, // 75: infoserver.Accounter.UnAssignGroupId:output_type -> infoserver.BoolResult
	34, // 76: infoserver.Accounter.SessionUpdateInitConnection:output_type -> infoserver.SessionUpdateInitConnectionResult
	36, // 77: infoserver.Accounter.SessionUpdateRegisterDevice:output_type -> infoserver.SessionUpdateRegisterDeviceResult
	38, // 78: infoserver.Accounter.SessionUpdateSignIn:output_type -> infoserver.SessionUpdateSignInResult
	40, // 79: infoserver.Accounter.SessionUpdatePing:output_type -> infoserver.SessionUpdatePingResult
	42, // 80: infoserver.Accounter.SessionUpdateLogout:output_type -> infoserver.SessionUpdateLogoutResult
	44, // 81: infoserver.Accounter.SessionTerminateByKeyid:output_type -> infoserver.SessionTerminateByKeyidResult
	46, // 82: infoserver.Accounter.SessionTerminateExceptKeyid:output_type -> infoserver.SessionTerminateExceptKeyidResult
	28, // 83: infoserver.Accounter.SessionQueryByKeyid:output_type -> infoserver.SessionQueryByKeyidResult
	30, // 84: infoserver.Accounter.SessionQueryByPhone:output_type -> infoserver.SessionQueryByPhoneResult
	32, // 85: infoserver.Accounter.SessionIncQts:output_type -> infoserver.SessionIncQtsResult
	25, // 86: infoserver.Accounter.SessionQueryUseridByKeyid:output_type -> infoserver.SessionQueryUseridByKeyidResult
	23, // 87: infoserver.Accounter.SessionQueryByUserid:output_type -> infoserver.SessionQueryByUseridResult
	21, // 88: infoserver.Accounter.SessionUpdateOnHandshakeDone:output_type -> infoserver.SessionUpdateOnHandshakeDoneResult
	19, // 89: infoserver.Accounter.SessionQueryApiIDbyKeyid:output_type -> infoserver.SessionQueryApiIDbyKeyidResult
	17, // 90: infoserver.Accounter.SessionDisconnect:output_type -> infoserver.SessionDisconnectResult
	52, // 91: infoserver.Accounter.SaveAuthorizationInfo:output_type -> infoserver.BoolResult
	68, // 92: infoserver.Accounter.QueryAuthorizationInfo:output_type -> infoserver.Authorization
	52, // 93: infoserver.Accounter.UpdatePassword:output_type -> infoserver.BoolResult
	51, // 94: infoserver.Accounter.GetPassword:output_type -> infoserver.PasswordRsp
	52, // 95: infoserver.Accounter.DeletePassword:output_type -> infoserver.BoolResult
	48, // 96: infoserver.Accounter.CheckUserIdAndAccessHash:output_type -> infoserver.CheckUserIdAndAccessHashResult
	15, // 97: infoserver.Accounter.GetUniqueNumberByKeyId:output_type -> infoserver.GetUniqueNumberByKeyIdResult
	52, // 98: infoserver.Accounter.PtUpdatePassword:output_type -> infoserver.BoolResult
	71, // [71:99] is the sub-list for method output_type
	43, // [43:71] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_account_proto_init() }
func file_account_proto_init() {
	if File_account_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_account_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUniqueNumberByKeyIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUniqueNumberByKeyIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDisconnectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDisconnectResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionQueryApiIDbyKeyidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionQueryApiIDbyKeyidResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdateOnHandshakeDoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdateOnHandshakeDoneResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionQueryByUseridReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionQueryByUseridResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionQueryUseridByKeyidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionQueryUseridByKeyidResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionQueryByKeyidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionQueryByKeyidResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionQueryByPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionQueryByPhoneResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionIncQtsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionIncQtsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdateInitConnectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdateInitConnectionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdateRegisterDeviceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdateRegisterDeviceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdateSignInReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdateSignInResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdatePingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdatePingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdateLogoutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdateLogoutResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionTerminateByKeyidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionTerminateByKeyidResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionTerminateExceptKeyidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionTerminateExceptKeyidResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserIdAndAccessHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserIdAndAccessHashResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PtPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupIdRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdAssiginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdAssiginRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionTerminateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionTerminateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCodeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_account_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_account_proto_goTypes,
		DependencyIndexes: file_account_proto_depIdxs,
		EnumInfos:         file_account_proto_enumTypes,
		MessageInfos:      file_account_proto_msgTypes,
	}.Build()
	File_account_proto = out.File
	file_account_proto_rawDesc = nil
	file_account_proto_goTypes = nil
	file_account_proto_depIdxs = nil
}
