// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/phonecall.proto

package infoserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/pbcomm"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PhoneAcceptCallResult_ResultCode int32

const (
	PhoneAcceptCallResult_Success       PhoneAcceptCallResult_ResultCode = 0
	PhoneAcceptCallResult_InternalError PhoneAcceptCallResult_ResultCode = 1
)

var PhoneAcceptCallResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var PhoneAcceptCallResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x PhoneAcceptCallResult_ResultCode) String() string {
	return proto.EnumName(PhoneAcceptCallResult_ResultCode_name, int32(x))
}
func (PhoneAcceptCallResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPhonecall, []int{3, 0}
}

type PhoneConfirmCallResult_ResultCode int32

const (
	PhoneConfirmCallResult_Success       PhoneConfirmCallResult_ResultCode = 0
	PhoneConfirmCallResult_InternalError PhoneConfirmCallResult_ResultCode = 1
)

var PhoneConfirmCallResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var PhoneConfirmCallResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x PhoneConfirmCallResult_ResultCode) String() string {
	return proto.EnumName(PhoneConfirmCallResult_ResultCode_name, int32(x))
}
func (PhoneConfirmCallResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPhonecall, []int{5, 0}
}

type PhoneDiscardCallResult_ResultCode int32

const (
	PhoneDiscardCallResult_Success          PhoneDiscardCallResult_ResultCode = 0
	PhoneDiscardCallResult_InternalError    PhoneDiscardCallResult_ResultCode = 1
	PhoneDiscardCallResult_UnauthorizedUser PhoneDiscardCallResult_ResultCode = 2
)

var PhoneDiscardCallResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "UnauthorizedUser",
}
var PhoneDiscardCallResult_ResultCode_value = map[string]int32{
	"Success":          0,
	"InternalError":    1,
	"UnauthorizedUser": 2,
}

func (x PhoneDiscardCallResult_ResultCode) String() string {
	return proto.EnumName(PhoneDiscardCallResult_ResultCode_name, int32(x))
}
func (PhoneDiscardCallResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPhonecall, []int{7, 0}
}

type PhoneGetCallConfigResult_ResultCode int32

const (
	PhoneGetCallConfigResult_Success       PhoneGetCallConfigResult_ResultCode = 0
	PhoneGetCallConfigResult_InternalError PhoneGetCallConfigResult_ResultCode = 1
)

var PhoneGetCallConfigResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var PhoneGetCallConfigResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x PhoneGetCallConfigResult_ResultCode) String() string {
	return proto.EnumName(PhoneGetCallConfigResult_ResultCode_name, int32(x))
}
func (PhoneGetCallConfigResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPhonecall, []int{9, 0}
}

type PhoneReceivedCallResult_ResultCode int32

const (
	PhoneReceivedCallResult_Success       PhoneReceivedCallResult_ResultCode = 0
	PhoneReceivedCallResult_InternalError PhoneReceivedCallResult_ResultCode = 1
)

var PhoneReceivedCallResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var PhoneReceivedCallResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x PhoneReceivedCallResult_ResultCode) String() string {
	return proto.EnumName(PhoneReceivedCallResult_ResultCode_name, int32(x))
}
func (PhoneReceivedCallResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPhonecall, []int{11, 0}
}

type PhoneRequestCallResult_ResultCode int32

const (
	PhoneRequestCallResult_Success               PhoneRequestCallResult_ResultCode = 0
	PhoneRequestCallResult_InternalError         PhoneRequestCallResult_ResultCode = 1
	PhoneRequestCallResult_UserPrivacyRestricted PhoneRequestCallResult_ResultCode = 2
)

var PhoneRequestCallResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "UserPrivacyRestricted",
}
var PhoneRequestCallResult_ResultCode_value = map[string]int32{
	"Success":               0,
	"InternalError":         1,
	"UserPrivacyRestricted": 2,
}

func (x PhoneRequestCallResult_ResultCode) String() string {
	return proto.EnumName(PhoneRequestCallResult_ResultCode_name, int32(x))
}
func (PhoneRequestCallResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPhonecall, []int{13, 0}
}

type PhoneSaveCallDebugResult_ResultCode int32

const (
	PhoneSaveCallDebugResult_Success       PhoneSaveCallDebugResult_ResultCode = 0
	PhoneSaveCallDebugResult_InternalError PhoneSaveCallDebugResult_ResultCode = 1
)

var PhoneSaveCallDebugResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var PhoneSaveCallDebugResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x PhoneSaveCallDebugResult_ResultCode) String() string {
	return proto.EnumName(PhoneSaveCallDebugResult_ResultCode_name, int32(x))
}
func (PhoneSaveCallDebugResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPhonecall, []int{15, 0}
}

type PhoneSetCallRatingResult_ResultCode int32

const (
	PhoneSetCallRatingResult_Success       PhoneSetCallRatingResult_ResultCode = 0
	PhoneSetCallRatingResult_InternalError PhoneSetCallRatingResult_ResultCode = 1
)

var PhoneSetCallRatingResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var PhoneSetCallRatingResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x PhoneSetCallRatingResult_ResultCode) String() string {
	return proto.EnumName(PhoneSetCallRatingResult_ResultCode_name, int32(x))
}
func (PhoneSetCallRatingResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPhonecall, []int{17, 0}
}

type PhoneCheckUpdatesReq struct {
	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
	KeyId     uint64        `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Timestamp int64         `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *PhoneCheckUpdatesReq) Reset()                    { *m = PhoneCheckUpdatesReq{} }
func (m *PhoneCheckUpdatesReq) String() string            { return proto.CompactTextString(m) }
func (*PhoneCheckUpdatesReq) ProtoMessage()               {}
func (*PhoneCheckUpdatesReq) Descriptor() ([]byte, []int) { return fileDescriptorPhonecall, []int{0} }

func (m *PhoneCheckUpdatesReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PhoneCheckUpdatesReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *PhoneCheckUpdatesReq) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *PhoneCheckUpdatesReq) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type PhoneCheckUpdatesResult struct {
	Updates [][]byte `protobuf:"bytes,1,rep,name=updates" json:"updates,omitempty"`
}

func (m *PhoneCheckUpdatesResult) Reset()         { *m = PhoneCheckUpdatesResult{} }
func (m *PhoneCheckUpdatesResult) String() string { return proto.CompactTextString(m) }
func (*PhoneCheckUpdatesResult) ProtoMessage()    {}
func (*PhoneCheckUpdatesResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPhonecall, []int{1}
}

func (m *PhoneCheckUpdatesResult) GetUpdates() [][]byte {
	if m != nil {
		return m.Updates
	}
	return nil
}

// phone.acceptCall
type PhoneAcceptCallReq struct {
	TlPhoneAcceptCall []byte        `protobuf:"bytes,1,opt,name=tl_phone_acceptCall,json=tlPhoneAcceptCall,proto3" json:"tl_phone_acceptCall,omitempty"`
	Debug             *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
	UserId            int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserKeyid         uint64        `protobuf:"varint,4,opt,name=user_keyid,json=userKeyid,proto3" json:"user_keyid,omitempty"`
	UserLayer         int32         `protobuf:"varint,5,opt,name=user_layer,json=userLayer,proto3" json:"user_layer,omitempty"`
	DcId              uint64        `protobuf:"varint,6,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
}

func (m *PhoneAcceptCallReq) Reset()                    { *m = PhoneAcceptCallReq{} }
func (m *PhoneAcceptCallReq) String() string            { return proto.CompactTextString(m) }
func (*PhoneAcceptCallReq) ProtoMessage()               {}
func (*PhoneAcceptCallReq) Descriptor() ([]byte, []int) { return fileDescriptorPhonecall, []int{2} }

func (m *PhoneAcceptCallReq) GetTlPhoneAcceptCall() []byte {
	if m != nil {
		return m.TlPhoneAcceptCall
	}
	return nil
}

func (m *PhoneAcceptCallReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *PhoneAcceptCallReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PhoneAcceptCallReq) GetUserKeyid() uint64 {
	if m != nil {
		return m.UserKeyid
	}
	return 0
}

func (m *PhoneAcceptCallReq) GetUserLayer() int32 {
	if m != nil {
		return m.UserLayer
	}
	return 0
}

func (m *PhoneAcceptCallReq) GetDcId() uint64 {
	if m != nil {
		return m.DcId
	}
	return 0
}

type PhoneAcceptCallResult struct {
	Code             PhoneAcceptCallResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhoneAcceptCallResult_ResultCode" json:"code,omitempty"`
	TlPhonePhoneCall []byte                           `protobuf:"bytes,2,opt,name=tl_phone_phoneCall,json=tlPhonePhoneCall,proto3" json:"tl_phone_phoneCall,omitempty"`
}

func (m *PhoneAcceptCallResult) Reset()                    { *m = PhoneAcceptCallResult{} }
func (m *PhoneAcceptCallResult) String() string            { return proto.CompactTextString(m) }
func (*PhoneAcceptCallResult) ProtoMessage()               {}
func (*PhoneAcceptCallResult) Descriptor() ([]byte, []int) { return fileDescriptorPhonecall, []int{3} }

func (m *PhoneAcceptCallResult) GetCode() PhoneAcceptCallResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return PhoneAcceptCallResult_Success
}

func (m *PhoneAcceptCallResult) GetTlPhonePhoneCall() []byte {
	if m != nil {
		return m.TlPhonePhoneCall
	}
	return nil
}

// phone.confirmCall
type PhoneConfirmCallReq struct {
	TlPhoneConfirmCall []byte        `protobuf:"bytes,1,opt,name=tl_phone_confirmCall,json=tlPhoneConfirmCall,proto3" json:"tl_phone_confirmCall,omitempty"`
	Debug              *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
	UserId             int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserKeyid          uint64        `protobuf:"varint,4,opt,name=user_keyid,json=userKeyid,proto3" json:"user_keyid,omitempty"`
	UserLayer          int32         `protobuf:"varint,5,opt,name=user_layer,json=userLayer,proto3" json:"user_layer,omitempty"`
	DcId               uint64        `protobuf:"varint,6,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
}

func (m *PhoneConfirmCallReq) Reset()                    { *m = PhoneConfirmCallReq{} }
func (m *PhoneConfirmCallReq) String() string            { return proto.CompactTextString(m) }
func (*PhoneConfirmCallReq) ProtoMessage()               {}
func (*PhoneConfirmCallReq) Descriptor() ([]byte, []int) { return fileDescriptorPhonecall, []int{4} }

func (m *PhoneConfirmCallReq) GetTlPhoneConfirmCall() []byte {
	if m != nil {
		return m.TlPhoneConfirmCall
	}
	return nil
}

func (m *PhoneConfirmCallReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *PhoneConfirmCallReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PhoneConfirmCallReq) GetUserKeyid() uint64 {
	if m != nil {
		return m.UserKeyid
	}
	return 0
}

func (m *PhoneConfirmCallReq) GetUserLayer() int32 {
	if m != nil {
		return m.UserLayer
	}
	return 0
}

func (m *PhoneConfirmCallReq) GetDcId() uint64 {
	if m != nil {
		return m.DcId
	}
	return 0
}

type PhoneConfirmCallResult struct {
	Code             PhoneConfirmCallResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhoneConfirmCallResult_ResultCode" json:"code,omitempty"`
	TlPhonePhoneCall []byte                            `protobuf:"bytes,2,opt,name=tl_phone_phoneCall,json=tlPhonePhoneCall,proto3" json:"tl_phone_phoneCall,omitempty"`
}

func (m *PhoneConfirmCallResult) Reset()                    { *m = PhoneConfirmCallResult{} }
func (m *PhoneConfirmCallResult) String() string            { return proto.CompactTextString(m) }
func (*PhoneConfirmCallResult) ProtoMessage()               {}
func (*PhoneConfirmCallResult) Descriptor() ([]byte, []int) { return fileDescriptorPhonecall, []int{5} }

func (m *PhoneConfirmCallResult) GetCode() PhoneConfirmCallResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return PhoneConfirmCallResult_Success
}

func (m *PhoneConfirmCallResult) GetTlPhonePhoneCall() []byte {
	if m != nil {
		return m.TlPhonePhoneCall
	}
	return nil
}

// phone.discardCall
type PhoneDiscardCallReq struct {
	TlPhoneDiscardCall []byte        `protobuf:"bytes,1,opt,name=tl_phone_discardCall,json=tlPhoneDiscardCall,proto3" json:"tl_phone_discardCall,omitempty"`
	Debug              *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
	UserId             int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserKeyid          uint64        `protobuf:"varint,4,opt,name=user_keyid,json=userKeyid,proto3" json:"user_keyid,omitempty"`
	UserLayer          int32         `protobuf:"varint,5,opt,name=user_layer,json=userLayer,proto3" json:"user_layer,omitempty"`
	DcId               uint64        `protobuf:"varint,6,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
}

func (m *PhoneDiscardCallReq) Reset()                    { *m = PhoneDiscardCallReq{} }
func (m *PhoneDiscardCallReq) String() string            { return proto.CompactTextString(m) }
func (*PhoneDiscardCallReq) ProtoMessage()               {}
func (*PhoneDiscardCallReq) Descriptor() ([]byte, []int) { return fileDescriptorPhonecall, []int{6} }

func (m *PhoneDiscardCallReq) GetTlPhoneDiscardCall() []byte {
	if m != nil {
		return m.TlPhoneDiscardCall
	}
	return nil
}

func (m *PhoneDiscardCallReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *PhoneDiscardCallReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PhoneDiscardCallReq) GetUserKeyid() uint64 {
	if m != nil {
		return m.UserKeyid
	}
	return 0
}

func (m *PhoneDiscardCallReq) GetUserLayer() int32 {
	if m != nil {
		return m.UserLayer
	}
	return 0
}

func (m *PhoneDiscardCallReq) GetDcId() uint64 {
	if m != nil {
		return m.DcId
	}
	return 0
}

type PhoneDiscardCallResult struct {
	Code      PhoneDiscardCallResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhoneDiscardCallResult_ResultCode" json:"code,omitempty"`
	TlUpdates []byte                            `protobuf:"bytes,2,opt,name=tl_updates,json=tlUpdates,proto3" json:"tl_updates,omitempty"`
}

func (m *PhoneDiscardCallResult) Reset()                    { *m = PhoneDiscardCallResult{} }
func (m *PhoneDiscardCallResult) String() string            { return proto.CompactTextString(m) }
func (*PhoneDiscardCallResult) ProtoMessage()               {}
func (*PhoneDiscardCallResult) Descriptor() ([]byte, []int) { return fileDescriptorPhonecall, []int{7} }

func (m *PhoneDiscardCallResult) GetCode() PhoneDiscardCallResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return PhoneDiscardCallResult_Success
}

func (m *PhoneDiscardCallResult) GetTlUpdates() []byte {
	if m != nil {
		return m.TlUpdates
	}
	return nil
}

// phone.getCallConfig
type PhoneGetCallConfigReq struct {
	TlPhoneGetCallConfig []byte        `protobuf:"bytes,1,opt,name=tl_phone_getCallConfig,json=tlPhoneGetCallConfig,proto3" json:"tl_phone_getCallConfig,omitempty"`
	Debug                *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *PhoneGetCallConfigReq) Reset()                    { *m = PhoneGetCallConfigReq{} }
func (m *PhoneGetCallConfigReq) String() string            { return proto.CompactTextString(m) }
func (*PhoneGetCallConfigReq) ProtoMessage()               {}
func (*PhoneGetCallConfigReq) Descriptor() ([]byte, []int) { return fileDescriptorPhonecall, []int{8} }

func (m *PhoneGetCallConfigReq) GetTlPhoneGetCallConfig() []byte {
	if m != nil {
		return m.TlPhoneGetCallConfig
	}
	return nil
}

func (m *PhoneGetCallConfigReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type PhoneGetCallConfigResult struct {
	Code       PhoneGetCallConfigResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhoneGetCallConfigResult_ResultCode" json:"code,omitempty"`
	TlDataJson []byte                              `protobuf:"bytes,2,opt,name=tl_data_json,json=tlDataJson,proto3" json:"tl_data_json,omitempty"`
}

func (m *PhoneGetCallConfigResult) Reset()         { *m = PhoneGetCallConfigResult{} }
func (m *PhoneGetCallConfigResult) String() string { return proto.CompactTextString(m) }
func (*PhoneGetCallConfigResult) ProtoMessage()    {}
func (*PhoneGetCallConfigResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPhonecall, []int{9}
}

func (m *PhoneGetCallConfigResult) GetCode() PhoneGetCallConfigResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return PhoneGetCallConfigResult_Success
}

func (m *PhoneGetCallConfigResult) GetTlDataJson() []byte {
	if m != nil {
		return m.TlDataJson
	}
	return nil
}

// phone.receivedCall
type PhoneReceivedCallReq struct {
	TlPhoneReceivedCall []byte        `protobuf:"bytes,1,opt,name=tl_phone_receivedCall,json=tlPhoneReceivedCall,proto3" json:"tl_phone_receivedCall,omitempty"`
	Debug               *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
	KeyId               uint64        `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (m *PhoneReceivedCallReq) Reset()                    { *m = PhoneReceivedCallReq{} }
func (m *PhoneReceivedCallReq) String() string            { return proto.CompactTextString(m) }
func (*PhoneReceivedCallReq) ProtoMessage()               {}
func (*PhoneReceivedCallReq) Descriptor() ([]byte, []int) { return fileDescriptorPhonecall, []int{10} }

func (m *PhoneReceivedCallReq) GetTlPhoneReceivedCall() []byte {
	if m != nil {
		return m.TlPhoneReceivedCall
	}
	return nil
}

func (m *PhoneReceivedCallReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *PhoneReceivedCallReq) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

type PhoneReceivedCallResult struct {
	Code            PhoneReceivedCallResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhoneReceivedCallResult_ResultCode" json:"code,omitempty"`
	TlBoolTrueFalse []byte                             `protobuf:"bytes,2,opt,name=tl_bool_true_false,json=tlBoolTrueFalse,proto3" json:"tl_bool_true_false,omitempty"`
}

func (m *PhoneReceivedCallResult) Reset()         { *m = PhoneReceivedCallResult{} }
func (m *PhoneReceivedCallResult) String() string { return proto.CompactTextString(m) }
func (*PhoneReceivedCallResult) ProtoMessage()    {}
func (*PhoneReceivedCallResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPhonecall, []int{11}
}

func (m *PhoneReceivedCallResult) GetCode() PhoneReceivedCallResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return PhoneReceivedCallResult_Success
}

func (m *PhoneReceivedCallResult) GetTlBoolTrueFalse() []byte {
	if m != nil {
		return m.TlBoolTrueFalse
	}
	return nil
}

// phone.requestCall
type PhoneRequestCallReq struct {
	TlPhoneRequestCall []byte        `protobuf:"bytes,1,opt,name=tl_phone_requestCall,json=tlPhoneRequestCall,proto3" json:"tl_phone_requestCall,omitempty"`
	Debug              *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
	UserId             int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserKeyid          uint64        `protobuf:"varint,4,opt,name=user_keyid,json=userKeyid,proto3" json:"user_keyid,omitempty"`
	UserLayer          int32         `protobuf:"varint,5,opt,name=user_layer,json=userLayer,proto3" json:"user_layer,omitempty"`
	DcId               uint64        `protobuf:"varint,6,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
}

func (m *PhoneRequestCallReq) Reset()                    { *m = PhoneRequestCallReq{} }
func (m *PhoneRequestCallReq) String() string            { return proto.CompactTextString(m) }
func (*PhoneRequestCallReq) ProtoMessage()               {}
func (*PhoneRequestCallReq) Descriptor() ([]byte, []int) { return fileDescriptorPhonecall, []int{12} }

func (m *PhoneRequestCallReq) GetTlPhoneRequestCall() []byte {
	if m != nil {
		return m.TlPhoneRequestCall
	}
	return nil
}

func (m *PhoneRequestCallReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *PhoneRequestCallReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PhoneRequestCallReq) GetUserKeyid() uint64 {
	if m != nil {
		return m.UserKeyid
	}
	return 0
}

func (m *PhoneRequestCallReq) GetUserLayer() int32 {
	if m != nil {
		return m.UserLayer
	}
	return 0
}

func (m *PhoneRequestCallReq) GetDcId() uint64 {
	if m != nil {
		return m.DcId
	}
	return 0
}

type PhoneRequestCallResult struct {
	Code             PhoneRequestCallResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhoneRequestCallResult_ResultCode" json:"code,omitempty"`
	TlPhonePhoneCall []byte                            `protobuf:"bytes,2,opt,name=tl_phone_phoneCall,json=tlPhonePhoneCall,proto3" json:"tl_phone_phoneCall,omitempty"`
}

func (m *PhoneRequestCallResult) Reset()         { *m = PhoneRequestCallResult{} }
func (m *PhoneRequestCallResult) String() string { return proto.CompactTextString(m) }
func (*PhoneRequestCallResult) ProtoMessage()    {}
func (*PhoneRequestCallResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPhonecall, []int{13}
}

func (m *PhoneRequestCallResult) GetCode() PhoneRequestCallResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return PhoneRequestCallResult_Success
}

func (m *PhoneRequestCallResult) GetTlPhonePhoneCall() []byte {
	if m != nil {
		return m.TlPhonePhoneCall
	}
	return nil
}

// phone.saveCallDebug
type PhoneSaveCallDebugReq struct {
	TlPhoneSaveCallDebug []byte        `protobuf:"bytes,1,opt,name=tl_phone_saveCallDebug,json=tlPhoneSaveCallDebug,proto3" json:"tl_phone_saveCallDebug,omitempty"`
	Debug                *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *PhoneSaveCallDebugReq) Reset()                    { *m = PhoneSaveCallDebugReq{} }
func (m *PhoneSaveCallDebugReq) String() string            { return proto.CompactTextString(m) }
func (*PhoneSaveCallDebugReq) ProtoMessage()               {}
func (*PhoneSaveCallDebugReq) Descriptor() ([]byte, []int) { return fileDescriptorPhonecall, []int{14} }

func (m *PhoneSaveCallDebugReq) GetTlPhoneSaveCallDebug() []byte {
	if m != nil {
		return m.TlPhoneSaveCallDebug
	}
	return nil
}

func (m *PhoneSaveCallDebugReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type PhoneSaveCallDebugResult struct {
	Code   PhoneSaveCallDebugResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhoneSaveCallDebugResult_ResultCode" json:"code,omitempty"`
	TlBool bool                                `protobuf:"varint,2,opt,name=tl_bool,json=tlBool,proto3" json:"tl_bool,omitempty"`
}

func (m *PhoneSaveCallDebugResult) Reset()         { *m = PhoneSaveCallDebugResult{} }
func (m *PhoneSaveCallDebugResult) String() string { return proto.CompactTextString(m) }
func (*PhoneSaveCallDebugResult) ProtoMessage()    {}
func (*PhoneSaveCallDebugResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPhonecall, []int{15}
}

func (m *PhoneSaveCallDebugResult) GetCode() PhoneSaveCallDebugResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return PhoneSaveCallDebugResult_Success
}

func (m *PhoneSaveCallDebugResult) GetTlBool() bool {
	if m != nil {
		return m.TlBool
	}
	return false
}

// phone.setCallRating
type PhoneSetCallRatingReq struct {
	TlPhoneSetCallRating []byte        `protobuf:"bytes,1,opt,name=tl_phone_setCallRating,json=tlPhoneSetCallRating,proto3" json:"tl_phone_setCallRating,omitempty"`
	Debug                *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *PhoneSetCallRatingReq) Reset()                    { *m = PhoneSetCallRatingReq{} }
func (m *PhoneSetCallRatingReq) String() string            { return proto.CompactTextString(m) }
func (*PhoneSetCallRatingReq) ProtoMessage()               {}
func (*PhoneSetCallRatingReq) Descriptor() ([]byte, []int) { return fileDescriptorPhonecall, []int{16} }

func (m *PhoneSetCallRatingReq) GetTlPhoneSetCallRating() []byte {
	if m != nil {
		return m.TlPhoneSetCallRating
	}
	return nil
}

func (m *PhoneSetCallRatingReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type PhoneSetCallRatingResult struct {
	Code      PhoneSetCallRatingResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhoneSetCallRatingResult_ResultCode" json:"code,omitempty"`
	TlUpdates []byte                              `protobuf:"bytes,2,opt,name=tl_updates,json=tlUpdates,proto3" json:"tl_updates,omitempty"`
}

func (m *PhoneSetCallRatingResult) Reset()         { *m = PhoneSetCallRatingResult{} }
func (m *PhoneSetCallRatingResult) String() string { return proto.CompactTextString(m) }
func (*PhoneSetCallRatingResult) ProtoMessage()    {}
func (*PhoneSetCallRatingResult) Descriptor() ([]byte, []int) {
	return fileDescriptorPhonecall, []int{17}
}

func (m *PhoneSetCallRatingResult) GetCode() PhoneSetCallRatingResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return PhoneSetCallRatingResult_Success
}

func (m *PhoneSetCallRatingResult) GetTlUpdates() []byte {
	if m != nil {
		return m.TlUpdates
	}
	return nil
}

func init() {
	proto.RegisterType((*PhoneCheckUpdatesReq)(nil), "infoserver.PhoneCheckUpdatesReq")
	proto.RegisterType((*PhoneCheckUpdatesResult)(nil), "infoserver.PhoneCheckUpdatesResult")
	proto.RegisterType((*PhoneAcceptCallReq)(nil), "infoserver.PhoneAcceptCallReq")
	proto.RegisterType((*PhoneAcceptCallResult)(nil), "infoserver.PhoneAcceptCallResult")
	proto.RegisterType((*PhoneConfirmCallReq)(nil), "infoserver.PhoneConfirmCallReq")
	proto.RegisterType((*PhoneConfirmCallResult)(nil), "infoserver.PhoneConfirmCallResult")
	proto.RegisterType((*PhoneDiscardCallReq)(nil), "infoserver.PhoneDiscardCallReq")
	proto.RegisterType((*PhoneDiscardCallResult)(nil), "infoserver.PhoneDiscardCallResult")
	proto.RegisterType((*PhoneGetCallConfigReq)(nil), "infoserver.PhoneGetCallConfigReq")
	proto.RegisterType((*PhoneGetCallConfigResult)(nil), "infoserver.PhoneGetCallConfigResult")
	proto.RegisterType((*PhoneReceivedCallReq)(nil), "infoserver.PhoneReceivedCallReq")
	proto.RegisterType((*PhoneReceivedCallResult)(nil), "infoserver.PhoneReceivedCallResult")
	proto.RegisterType((*PhoneRequestCallReq)(nil), "infoserver.PhoneRequestCallReq")
	proto.RegisterType((*PhoneRequestCallResult)(nil), "infoserver.PhoneRequestCallResult")
	proto.RegisterType((*PhoneSaveCallDebugReq)(nil), "infoserver.PhoneSaveCallDebugReq")
	proto.RegisterType((*PhoneSaveCallDebugResult)(nil), "infoserver.PhoneSaveCallDebugResult")
	proto.RegisterType((*PhoneSetCallRatingReq)(nil), "infoserver.PhoneSetCallRatingReq")
	proto.RegisterType((*PhoneSetCallRatingResult)(nil), "infoserver.PhoneSetCallRatingResult")
	proto.RegisterEnum("infoserver.PhoneAcceptCallResult_ResultCode", PhoneAcceptCallResult_ResultCode_name, PhoneAcceptCallResult_ResultCode_value)
	proto.RegisterEnum("infoserver.PhoneConfirmCallResult_ResultCode", PhoneConfirmCallResult_ResultCode_name, PhoneConfirmCallResult_ResultCode_value)
	proto.RegisterEnum("infoserver.PhoneDiscardCallResult_ResultCode", PhoneDiscardCallResult_ResultCode_name, PhoneDiscardCallResult_ResultCode_value)
	proto.RegisterEnum("infoserver.PhoneGetCallConfigResult_ResultCode", PhoneGetCallConfigResult_ResultCode_name, PhoneGetCallConfigResult_ResultCode_value)
	proto.RegisterEnum("infoserver.PhoneReceivedCallResult_ResultCode", PhoneReceivedCallResult_ResultCode_name, PhoneReceivedCallResult_ResultCode_value)
	proto.RegisterEnum("infoserver.PhoneRequestCallResult_ResultCode", PhoneRequestCallResult_ResultCode_name, PhoneRequestCallResult_ResultCode_value)
	proto.RegisterEnum("infoserver.PhoneSaveCallDebugResult_ResultCode", PhoneSaveCallDebugResult_ResultCode_name, PhoneSaveCallDebugResult_ResultCode_value)
	proto.RegisterEnum("infoserver.PhoneSetCallRatingResult_ResultCode", PhoneSetCallRatingResult_ResultCode_name, PhoneSetCallRatingResult_ResultCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PhoneCall service

type PhoneCallClient interface {
	// 电话功能重做
	// phone.acceptCall
	PhoneAcceptCall(ctx context.Context, in *PhoneAcceptCallReq, opts ...grpc.CallOption) (*PhoneAcceptCallResult, error)
	// phone.confirmCall
	PhoneConfirmCall(ctx context.Context, in *PhoneConfirmCallReq, opts ...grpc.CallOption) (*PhoneConfirmCallResult, error)
	// phone.discardCall
	PhoneDiscardCall(ctx context.Context, in *PhoneDiscardCallReq, opts ...grpc.CallOption) (*PhoneDiscardCallResult, error)
	// phone.getCallConfig
	PhoneGetCallConfig(ctx context.Context, in *PhoneGetCallConfigReq, opts ...grpc.CallOption) (*PhoneGetCallConfigResult, error)
	// phone.receivedCall
	PhoneReceivedCall(ctx context.Context, in *PhoneReceivedCallReq, opts ...grpc.CallOption) (*PhoneReceivedCallResult, error)
	// phone.requestCall
	PhoneRequestCall(ctx context.Context, in *PhoneRequestCallReq, opts ...grpc.CallOption) (*PhoneRequestCallResult, error)
	// phone.saveCallDebug
	PhoneSaveCallDebug(ctx context.Context, in *PhoneSaveCallDebugReq, opts ...grpc.CallOption) (*PhoneSaveCallDebugResult, error)
	// phone.setCallRating
	PhoneSetCallRating(ctx context.Context, in *PhoneSetCallRatingReq, opts ...grpc.CallOption) (*PhoneSetCallRatingResult, error)
	// 用户重连或触发getdifference时做检查
	PhoneCheckUpdates(ctx context.Context, in *PhoneCheckUpdatesReq, opts ...grpc.CallOption) (*PhoneCheckUpdatesResult, error)
}

type phoneCallClient struct {
	cc *grpc.ClientConn
}

func NewPhoneCallClient(cc *grpc.ClientConn) PhoneCallClient {
	return &phoneCallClient{cc}
}

func (c *phoneCallClient) PhoneAcceptCall(ctx context.Context, in *PhoneAcceptCallReq, opts ...grpc.CallOption) (*PhoneAcceptCallResult, error) {
	out := new(PhoneAcceptCallResult)
	err := grpc.Invoke(ctx, "/infoserver.PhoneCall/PhoneAcceptCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneCallClient) PhoneConfirmCall(ctx context.Context, in *PhoneConfirmCallReq, opts ...grpc.CallOption) (*PhoneConfirmCallResult, error) {
	out := new(PhoneConfirmCallResult)
	err := grpc.Invoke(ctx, "/infoserver.PhoneCall/PhoneConfirmCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneCallClient) PhoneDiscardCall(ctx context.Context, in *PhoneDiscardCallReq, opts ...grpc.CallOption) (*PhoneDiscardCallResult, error) {
	out := new(PhoneDiscardCallResult)
	err := grpc.Invoke(ctx, "/infoserver.PhoneCall/PhoneDiscardCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneCallClient) PhoneGetCallConfig(ctx context.Context, in *PhoneGetCallConfigReq, opts ...grpc.CallOption) (*PhoneGetCallConfigResult, error) {
	out := new(PhoneGetCallConfigResult)
	err := grpc.Invoke(ctx, "/infoserver.PhoneCall/PhoneGetCallConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneCallClient) PhoneReceivedCall(ctx context.Context, in *PhoneReceivedCallReq, opts ...grpc.CallOption) (*PhoneReceivedCallResult, error) {
	out := new(PhoneReceivedCallResult)
	err := grpc.Invoke(ctx, "/infoserver.PhoneCall/PhoneReceivedCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneCallClient) PhoneRequestCall(ctx context.Context, in *PhoneRequestCallReq, opts ...grpc.CallOption) (*PhoneRequestCallResult, error) {
	out := new(PhoneRequestCallResult)
	err := grpc.Invoke(ctx, "/infoserver.PhoneCall/PhoneRequestCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneCallClient) PhoneSaveCallDebug(ctx context.Context, in *PhoneSaveCallDebugReq, opts ...grpc.CallOption) (*PhoneSaveCallDebugResult, error) {
	out := new(PhoneSaveCallDebugResult)
	err := grpc.Invoke(ctx, "/infoserver.PhoneCall/PhoneSaveCallDebug", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneCallClient) PhoneSetCallRating(ctx context.Context, in *PhoneSetCallRatingReq, opts ...grpc.CallOption) (*PhoneSetCallRatingResult, error) {
	out := new(PhoneSetCallRatingResult)
	err := grpc.Invoke(ctx, "/infoserver.PhoneCall/PhoneSetCallRating", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneCallClient) PhoneCheckUpdates(ctx context.Context, in *PhoneCheckUpdatesReq, opts ...grpc.CallOption) (*PhoneCheckUpdatesResult, error) {
	out := new(PhoneCheckUpdatesResult)
	err := grpc.Invoke(ctx, "/infoserver.PhoneCall/PhoneCheckUpdates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PhoneCall service

type PhoneCallServer interface {
	// 电话功能重做
	// phone.acceptCall
	PhoneAcceptCall(context.Context, *PhoneAcceptCallReq) (*PhoneAcceptCallResult, error)
	// phone.confirmCall
	PhoneConfirmCall(context.Context, *PhoneConfirmCallReq) (*PhoneConfirmCallResult, error)
	// phone.discardCall
	PhoneDiscardCall(context.Context, *PhoneDiscardCallReq) (*PhoneDiscardCallResult, error)
	// phone.getCallConfig
	PhoneGetCallConfig(context.Context, *PhoneGetCallConfigReq) (*PhoneGetCallConfigResult, error)
	// phone.receivedCall
	PhoneReceivedCall(context.Context, *PhoneReceivedCallReq) (*PhoneReceivedCallResult, error)
	// phone.requestCall
	PhoneRequestCall(context.Context, *PhoneRequestCallReq) (*PhoneRequestCallResult, error)
	// phone.saveCallDebug
	PhoneSaveCallDebug(context.Context, *PhoneSaveCallDebugReq) (*PhoneSaveCallDebugResult, error)
	// phone.setCallRating
	PhoneSetCallRating(context.Context, *PhoneSetCallRatingReq) (*PhoneSetCallRatingResult, error)
	// 用户重连或触发getdifference时做检查
	PhoneCheckUpdates(context.Context, *PhoneCheckUpdatesReq) (*PhoneCheckUpdatesResult, error)
}

func RegisterPhoneCallServer(s *grpc.Server, srv PhoneCallServer) {
	s.RegisterService(&_PhoneCall_serviceDesc, srv)
}

func _PhoneCall_PhoneAcceptCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneAcceptCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneCallServer).PhoneAcceptCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.PhoneCall/PhoneAcceptCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneCallServer).PhoneAcceptCall(ctx, req.(*PhoneAcceptCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneCall_PhoneConfirmCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneConfirmCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneCallServer).PhoneConfirmCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.PhoneCall/PhoneConfirmCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneCallServer).PhoneConfirmCall(ctx, req.(*PhoneConfirmCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneCall_PhoneDiscardCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneDiscardCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneCallServer).PhoneDiscardCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.PhoneCall/PhoneDiscardCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneCallServer).PhoneDiscardCall(ctx, req.(*PhoneDiscardCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneCall_PhoneGetCallConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneGetCallConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneCallServer).PhoneGetCallConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.PhoneCall/PhoneGetCallConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneCallServer).PhoneGetCallConfig(ctx, req.(*PhoneGetCallConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneCall_PhoneReceivedCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneReceivedCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneCallServer).PhoneReceivedCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.PhoneCall/PhoneReceivedCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneCallServer).PhoneReceivedCall(ctx, req.(*PhoneReceivedCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneCall_PhoneRequestCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneRequestCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneCallServer).PhoneRequestCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.PhoneCall/PhoneRequestCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneCallServer).PhoneRequestCall(ctx, req.(*PhoneRequestCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneCall_PhoneSaveCallDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneSaveCallDebugReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneCallServer).PhoneSaveCallDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.PhoneCall/PhoneSaveCallDebug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneCallServer).PhoneSaveCallDebug(ctx, req.(*PhoneSaveCallDebugReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneCall_PhoneSetCallRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneSetCallRatingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneCallServer).PhoneSetCallRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.PhoneCall/PhoneSetCallRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneCallServer).PhoneSetCallRating(ctx, req.(*PhoneSetCallRatingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneCall_PhoneCheckUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneCheckUpdatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneCallServer).PhoneCheckUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.PhoneCall/PhoneCheckUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneCallServer).PhoneCheckUpdates(ctx, req.(*PhoneCheckUpdatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PhoneCall_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infoserver.PhoneCall",
	HandlerType: (*PhoneCallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PhoneAcceptCall",
			Handler:    _PhoneCall_PhoneAcceptCall_Handler,
		},
		{
			MethodName: "PhoneConfirmCall",
			Handler:    _PhoneCall_PhoneConfirmCall_Handler,
		},
		{
			MethodName: "PhoneDiscardCall",
			Handler:    _PhoneCall_PhoneDiscardCall_Handler,
		},
		{
			MethodName: "PhoneGetCallConfig",
			Handler:    _PhoneCall_PhoneGetCallConfig_Handler,
		},
		{
			MethodName: "PhoneReceivedCall",
			Handler:    _PhoneCall_PhoneReceivedCall_Handler,
		},
		{
			MethodName: "PhoneRequestCall",
			Handler:    _PhoneCall_PhoneRequestCall_Handler,
		},
		{
			MethodName: "PhoneSaveCallDebug",
			Handler:    _PhoneCall_PhoneSaveCallDebug_Handler,
		},
		{
			MethodName: "PhoneSetCallRating",
			Handler:    _PhoneCall_PhoneSetCallRating_Handler,
		},
		{
			MethodName: "PhoneCheckUpdates",
			Handler:    _PhoneCall_PhoneCheckUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/phonecall.proto",
}

func (m *PhoneCheckUpdatesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneCheckUpdatesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Debug.Size()))
		n1, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.KeyId))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *PhoneCheckUpdatesResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneCheckUpdatesResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for _, b := range m.Updates {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPhonecall(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *PhoneAcceptCallReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneAcceptCallReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TlPhoneAcceptCall) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlPhoneAcceptCall)))
		i += copy(dAtA[i:], m.TlPhoneAcceptCall)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Debug.Size()))
		n2, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.UserId))
	}
	if m.UserKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.UserKeyid))
	}
	if m.UserLayer != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.UserLayer))
	}
	if m.DcId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.DcId))
	}
	return i, nil
}

func (m *PhoneAcceptCallResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneAcceptCallResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Code))
	}
	if len(m.TlPhonePhoneCall) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlPhonePhoneCall)))
		i += copy(dAtA[i:], m.TlPhonePhoneCall)
	}
	return i, nil
}

func (m *PhoneConfirmCallReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneConfirmCallReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TlPhoneConfirmCall) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlPhoneConfirmCall)))
		i += copy(dAtA[i:], m.TlPhoneConfirmCall)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Debug.Size()))
		n3, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.UserId))
	}
	if m.UserKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.UserKeyid))
	}
	if m.UserLayer != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.UserLayer))
	}
	if m.DcId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.DcId))
	}
	return i, nil
}

func (m *PhoneConfirmCallResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneConfirmCallResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Code))
	}
	if len(m.TlPhonePhoneCall) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlPhonePhoneCall)))
		i += copy(dAtA[i:], m.TlPhonePhoneCall)
	}
	return i, nil
}

func (m *PhoneDiscardCallReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneDiscardCallReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TlPhoneDiscardCall) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlPhoneDiscardCall)))
		i += copy(dAtA[i:], m.TlPhoneDiscardCall)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Debug.Size()))
		n4, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.UserId))
	}
	if m.UserKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.UserKeyid))
	}
	if m.UserLayer != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.UserLayer))
	}
	if m.DcId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.DcId))
	}
	return i, nil
}

func (m *PhoneDiscardCallResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneDiscardCallResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Code))
	}
	if len(m.TlUpdates) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlUpdates)))
		i += copy(dAtA[i:], m.TlUpdates)
	}
	return i, nil
}

func (m *PhoneGetCallConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneGetCallConfigReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TlPhoneGetCallConfig) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlPhoneGetCallConfig)))
		i += copy(dAtA[i:], m.TlPhoneGetCallConfig)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Debug.Size()))
		n5, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *PhoneGetCallConfigResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneGetCallConfigResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Code))
	}
	if len(m.TlDataJson) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlDataJson)))
		i += copy(dAtA[i:], m.TlDataJson)
	}
	return i, nil
}

func (m *PhoneReceivedCallReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneReceivedCallReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TlPhoneReceivedCall) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlPhoneReceivedCall)))
		i += copy(dAtA[i:], m.TlPhoneReceivedCall)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Debug.Size()))
		n6, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.KeyId))
	}
	return i, nil
}

func (m *PhoneReceivedCallResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneReceivedCallResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Code))
	}
	if len(m.TlBoolTrueFalse) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlBoolTrueFalse)))
		i += copy(dAtA[i:], m.TlBoolTrueFalse)
	}
	return i, nil
}

func (m *PhoneRequestCallReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneRequestCallReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TlPhoneRequestCall) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlPhoneRequestCall)))
		i += copy(dAtA[i:], m.TlPhoneRequestCall)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Debug.Size()))
		n7, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.UserId))
	}
	if m.UserKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.UserKeyid))
	}
	if m.UserLayer != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.UserLayer))
	}
	if m.DcId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.DcId))
	}
	return i, nil
}

func (m *PhoneRequestCallResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneRequestCallResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Code))
	}
	if len(m.TlPhonePhoneCall) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlPhonePhoneCall)))
		i += copy(dAtA[i:], m.TlPhonePhoneCall)
	}
	return i, nil
}

func (m *PhoneSaveCallDebugReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneSaveCallDebugReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TlPhoneSaveCallDebug) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlPhoneSaveCallDebug)))
		i += copy(dAtA[i:], m.TlPhoneSaveCallDebug)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Debug.Size()))
		n8, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *PhoneSaveCallDebugResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneSaveCallDebugResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Code))
	}
	if m.TlBool {
		dAtA[i] = 0x10
		i++
		if m.TlBool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PhoneSetCallRatingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneSetCallRatingReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TlPhoneSetCallRating) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlPhoneSetCallRating)))
		i += copy(dAtA[i:], m.TlPhoneSetCallRating)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Debug.Size()))
		n9, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *PhoneSetCallRatingResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneSetCallRatingResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(m.Code))
	}
	if len(m.TlUpdates) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhonecall(dAtA, i, uint64(len(m.TlUpdates)))
		i += copy(dAtA[i:], m.TlUpdates)
	}
	return i, nil
}

func encodeVarintPhonecall(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PhoneCheckUpdatesReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPhonecall(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPhonecall(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovPhonecall(uint64(m.KeyId))
	}
	if m.Timestamp != 0 {
		n += 1 + sovPhonecall(uint64(m.Timestamp))
	}
	return n
}

func (m *PhoneCheckUpdatesResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for _, b := range m.Updates {
			l = len(b)
			n += 1 + l + sovPhonecall(uint64(l))
		}
	}
	return n
}

func (m *PhoneAcceptCallReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.TlPhoneAcceptCall)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPhonecall(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPhonecall(uint64(m.UserId))
	}
	if m.UserKeyid != 0 {
		n += 1 + sovPhonecall(uint64(m.UserKeyid))
	}
	if m.UserLayer != 0 {
		n += 1 + sovPhonecall(uint64(m.UserLayer))
	}
	if m.DcId != 0 {
		n += 1 + sovPhonecall(uint64(m.DcId))
	}
	return n
}

func (m *PhoneAcceptCallResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhonecall(uint64(m.Code))
	}
	l = len(m.TlPhonePhoneCall)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	return n
}

func (m *PhoneConfirmCallReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.TlPhoneConfirmCall)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPhonecall(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPhonecall(uint64(m.UserId))
	}
	if m.UserKeyid != 0 {
		n += 1 + sovPhonecall(uint64(m.UserKeyid))
	}
	if m.UserLayer != 0 {
		n += 1 + sovPhonecall(uint64(m.UserLayer))
	}
	if m.DcId != 0 {
		n += 1 + sovPhonecall(uint64(m.DcId))
	}
	return n
}

func (m *PhoneConfirmCallResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhonecall(uint64(m.Code))
	}
	l = len(m.TlPhonePhoneCall)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	return n
}

func (m *PhoneDiscardCallReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.TlPhoneDiscardCall)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPhonecall(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPhonecall(uint64(m.UserId))
	}
	if m.UserKeyid != 0 {
		n += 1 + sovPhonecall(uint64(m.UserKeyid))
	}
	if m.UserLayer != 0 {
		n += 1 + sovPhonecall(uint64(m.UserLayer))
	}
	if m.DcId != 0 {
		n += 1 + sovPhonecall(uint64(m.DcId))
	}
	return n
}

func (m *PhoneDiscardCallResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhonecall(uint64(m.Code))
	}
	l = len(m.TlUpdates)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	return n
}

func (m *PhoneGetCallConfigReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.TlPhoneGetCallConfig)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPhonecall(uint64(l))
	}
	return n
}

func (m *PhoneGetCallConfigResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhonecall(uint64(m.Code))
	}
	l = len(m.TlDataJson)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	return n
}

func (m *PhoneReceivedCallReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.TlPhoneReceivedCall)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPhonecall(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovPhonecall(uint64(m.KeyId))
	}
	return n
}

func (m *PhoneReceivedCallResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhonecall(uint64(m.Code))
	}
	l = len(m.TlBoolTrueFalse)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	return n
}

func (m *PhoneRequestCallReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.TlPhoneRequestCall)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPhonecall(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPhonecall(uint64(m.UserId))
	}
	if m.UserKeyid != 0 {
		n += 1 + sovPhonecall(uint64(m.UserKeyid))
	}
	if m.UserLayer != 0 {
		n += 1 + sovPhonecall(uint64(m.UserLayer))
	}
	if m.DcId != 0 {
		n += 1 + sovPhonecall(uint64(m.DcId))
	}
	return n
}

func (m *PhoneRequestCallResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhonecall(uint64(m.Code))
	}
	l = len(m.TlPhonePhoneCall)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	return n
}

func (m *PhoneSaveCallDebugReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.TlPhoneSaveCallDebug)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPhonecall(uint64(l))
	}
	return n
}

func (m *PhoneSaveCallDebugResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhonecall(uint64(m.Code))
	}
	if m.TlBool {
		n += 2
	}
	return n
}

func (m *PhoneSetCallRatingReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.TlPhoneSetCallRating)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPhonecall(uint64(l))
	}
	return n
}

func (m *PhoneSetCallRatingResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhonecall(uint64(m.Code))
	}
	l = len(m.TlUpdates)
	if l > 0 {
		n += 1 + l + sovPhonecall(uint64(l))
	}
	return n
}

func sovPhonecall(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPhonecall(x uint64) (n int) {
	return sovPhonecall(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PhoneCheckUpdatesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneCheckUpdatesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneCheckUpdatesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneCheckUpdatesResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneCheckUpdatesResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneCheckUpdatesResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, make([]byte, postIndex-iNdEx))
			copy(m.Updates[len(m.Updates)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneAcceptCallReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneAcceptCallReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneAcceptCallReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlPhoneAcceptCall", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlPhoneAcceptCall = append(m.TlPhoneAcceptCall[:0], dAtA[iNdEx:postIndex]...)
			if m.TlPhoneAcceptCall == nil {
				m.TlPhoneAcceptCall = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserKeyid", wireType)
			}
			m.UserKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLayer", wireType)
			}
			m.UserLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserLayer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneAcceptCallResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneAcceptCallResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneAcceptCallResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (PhoneAcceptCallResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlPhonePhoneCall", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlPhonePhoneCall = append(m.TlPhonePhoneCall[:0], dAtA[iNdEx:postIndex]...)
			if m.TlPhonePhoneCall == nil {
				m.TlPhonePhoneCall = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneConfirmCallReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneConfirmCallReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneConfirmCallReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlPhoneConfirmCall", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlPhoneConfirmCall = append(m.TlPhoneConfirmCall[:0], dAtA[iNdEx:postIndex]...)
			if m.TlPhoneConfirmCall == nil {
				m.TlPhoneConfirmCall = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserKeyid", wireType)
			}
			m.UserKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLayer", wireType)
			}
			m.UserLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserLayer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneConfirmCallResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneConfirmCallResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneConfirmCallResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (PhoneConfirmCallResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlPhonePhoneCall", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlPhonePhoneCall = append(m.TlPhonePhoneCall[:0], dAtA[iNdEx:postIndex]...)
			if m.TlPhonePhoneCall == nil {
				m.TlPhonePhoneCall = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneDiscardCallReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneDiscardCallReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneDiscardCallReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlPhoneDiscardCall", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlPhoneDiscardCall = append(m.TlPhoneDiscardCall[:0], dAtA[iNdEx:postIndex]...)
			if m.TlPhoneDiscardCall == nil {
				m.TlPhoneDiscardCall = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserKeyid", wireType)
			}
			m.UserKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLayer", wireType)
			}
			m.UserLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserLayer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneDiscardCallResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneDiscardCallResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneDiscardCallResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (PhoneDiscardCallResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlUpdates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlUpdates = append(m.TlUpdates[:0], dAtA[iNdEx:postIndex]...)
			if m.TlUpdates == nil {
				m.TlUpdates = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneGetCallConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneGetCallConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneGetCallConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlPhoneGetCallConfig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlPhoneGetCallConfig = append(m.TlPhoneGetCallConfig[:0], dAtA[iNdEx:postIndex]...)
			if m.TlPhoneGetCallConfig == nil {
				m.TlPhoneGetCallConfig = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneGetCallConfigResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneGetCallConfigResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneGetCallConfigResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (PhoneGetCallConfigResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlDataJson", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlDataJson = append(m.TlDataJson[:0], dAtA[iNdEx:postIndex]...)
			if m.TlDataJson == nil {
				m.TlDataJson = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneReceivedCallReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneReceivedCallReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneReceivedCallReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlPhoneReceivedCall", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlPhoneReceivedCall = append(m.TlPhoneReceivedCall[:0], dAtA[iNdEx:postIndex]...)
			if m.TlPhoneReceivedCall == nil {
				m.TlPhoneReceivedCall = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneReceivedCallResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneReceivedCallResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneReceivedCallResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (PhoneReceivedCallResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlBoolTrueFalse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlBoolTrueFalse = append(m.TlBoolTrueFalse[:0], dAtA[iNdEx:postIndex]...)
			if m.TlBoolTrueFalse == nil {
				m.TlBoolTrueFalse = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneRequestCallReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneRequestCallReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneRequestCallReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlPhoneRequestCall", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlPhoneRequestCall = append(m.TlPhoneRequestCall[:0], dAtA[iNdEx:postIndex]...)
			if m.TlPhoneRequestCall == nil {
				m.TlPhoneRequestCall = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserKeyid", wireType)
			}
			m.UserKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLayer", wireType)
			}
			m.UserLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserLayer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneRequestCallResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneRequestCallResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneRequestCallResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (PhoneRequestCallResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlPhonePhoneCall", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlPhonePhoneCall = append(m.TlPhonePhoneCall[:0], dAtA[iNdEx:postIndex]...)
			if m.TlPhonePhoneCall == nil {
				m.TlPhonePhoneCall = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneSaveCallDebugReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneSaveCallDebugReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneSaveCallDebugReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlPhoneSaveCallDebug", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlPhoneSaveCallDebug = append(m.TlPhoneSaveCallDebug[:0], dAtA[iNdEx:postIndex]...)
			if m.TlPhoneSaveCallDebug == nil {
				m.TlPhoneSaveCallDebug = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneSaveCallDebugResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneSaveCallDebugResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneSaveCallDebugResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (PhoneSaveCallDebugResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlBool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TlBool = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneSetCallRatingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneSetCallRatingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneSetCallRatingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlPhoneSetCallRating", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlPhoneSetCallRating = append(m.TlPhoneSetCallRating[:0], dAtA[iNdEx:postIndex]...)
			if m.TlPhoneSetCallRating == nil {
				m.TlPhoneSetCallRating = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneSetCallRatingResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneSetCallRatingResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneSetCallRatingResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (PhoneSetCallRatingResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlUpdates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhonecall
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlUpdates = append(m.TlUpdates[:0], dAtA[iNdEx:postIndex]...)
			if m.TlUpdates == nil {
				m.TlUpdates = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhonecall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhonecall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhonecall(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhonecall
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhonecall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPhonecall
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPhonecall
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPhonecall(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPhonecall = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhonecall   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/phonecall.proto", fileDescriptorPhonecall)
}

var fileDescriptorPhonecall = []byte{
	// 1015 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x97, 0x41, 0x6f, 0xe3, 0x44,
	0x1b, 0xc7, 0xe3, 0x36, 0x49, 0xdf, 0x3e, 0xdb, 0x7d, 0x37, 0x9d, 0xb6, 0xdb, 0x10, 0xb1, 0x6d,
	0xea, 0xe5, 0x10, 0x89, 0xe2, 0xa0, 0x2e, 0x1f, 0x80, 0x6d, 0x0b, 0x4b, 0x01, 0x89, 0xca, 0x4b,
	0x91, 0x90, 0x90, 0xac, 0x89, 0x3d, 0x69, 0x4d, 0x27, 0x9e, 0x64, 0x3c, 0xae, 0x14, 0x3e, 0x00,
	0x12, 0x5f, 0x84, 0x13, 0x12, 0x27, 0x04, 0x27, 0xce, 0x1c, 0x11, 0x08, 0x89, 0x23, 0xea, 0x27,
	0x41, 0x1e, 0x3b, 0xce, 0xd8, 0x63, 0x35, 0xce, 0xee, 0x81, 0x5e, 0x1a, 0x79, 0x9e, 0xfe, 0x67,
	0x3c, 0xbf, 0xe7, 0x99, 0xff, 0x33, 0x86, 0xcf, 0x2e, 0x7d, 0x41, 0xf1, 0xc0, 0x72, 0xaf, 0xb0,
	0x08, 0x09, 0xbf, 0x21, 0xdc, 0xf2, 0x47, 0x7d, 0x3f, 0x10, 0x84, 0x0f, 0xb1, 0x4b, 0xc6, 0x9c,
	0x0d, 0xa2, 0x61, 0x7f, 0xcc, 0x04, 0x16, 0x6c, 0xcc, 0x99, 0x88, 0x1f, 0xc3, 0xbe, 0x1f, 0x0c,
	0x59, 0xf2, 0xdf, 0xfd, 0xf1, 0x15, 0x0b, 0x88, 0x8b, 0x29, 0xb5, 0x64, 0x18, 0xc1, 0x3c, 0xd6,
	0xf9, 0xe8, 0x95, 0x26, 0x1f, 0x0f, 0x5c, 0x36, 0x1a, 0xa5, 0x3f, 0xc9, 0xac, 0xe6, 0x77, 0x06,
	0x6c, 0x9f, 0xc7, 0x2b, 0x9d, 0x5c, 0x11, 0xf7, 0xfa, 0x62, 0xec, 0x61, 0x41, 0x42, 0x9b, 0x4c,
	0xd0, 0x2e, 0xac, 0x45, 0x21, 0xe1, 0x8e, 0xef, 0xb5, 0x8d, 0xae, 0xd1, 0x6b, 0xd8, 0xcd, 0xf8,
	0xf1, 0xcc, 0x43, 0x4f, 0xa1, 0xe1, 0x91, 0x41, 0x74, 0xd9, 0x5e, 0xe9, 0x1a, 0xbd, 0x07, 0x47,
	0x0f, 0xad, 0x74, 0xbe, 0xd3, 0x78, 0xd0, 0x4e, 0x62, 0x68, 0x07, 0x9a, 0xd7, 0x64, 0x1a, 0x8b,
	0x57, 0xbb, 0x46, 0xaf, 0x6e, 0x37, 0xae, 0xc9, 0xf4, 0xcc, 0x43, 0x6f, 0xc2, 0xba, 0xf0, 0x47,
	0x24, 0x14, 0x78, 0x34, 0x6e, 0xd7, 0xbb, 0x46, 0x6f, 0xd5, 0x9e, 0x0f, 0x98, 0xcf, 0x60, 0xb7,
	0xe4, 0x55, 0xc2, 0x88, 0x0a, 0xd4, 0x86, 0xb5, 0x28, 0x19, 0x68, 0x1b, 0xdd, 0xd5, 0xde, 0x86,
	0x3d, 0x7b, 0x34, 0xff, 0x32, 0x00, 0x49, 0xd5, 0x73, 0xd7, 0x25, 0x63, 0x71, 0x82, 0x29, 0x8d,
	0x5f, 0xdf, 0x82, 0x2d, 0x41, 0x1d, 0xc9, 0xd0, 0xc1, 0x59, 0x44, 0x6e, 0x65, 0xc3, 0xde, 0x14,
	0xb4, 0x20, 0xa9, 0xb6, 0x2b, 0x85, 0xc9, 0x6a, 0x8e, 0xc9, 0x13, 0x00, 0x19, 0xb8, 0x26, 0x53,
	0xdf, 0x93, 0x1b, 0xab, 0xdb, 0xeb, 0xf1, 0xc8, 0x27, 0xf1, 0x40, 0x16, 0xa6, 0x78, 0x4a, 0x78,
	0xbb, 0x21, 0xa5, 0x32, 0xfc, 0x69, 0x3c, 0x80, 0xb6, 0xa0, 0xe1, 0xb9, 0xf1, 0xa4, 0x4d, 0x29,
	0xac, 0x7b, 0xee, 0x99, 0x67, 0xfe, 0x64, 0xc0, 0x8e, 0xb6, 0x2f, 0xc9, 0xe2, 0x7d, 0xa8, 0xbb,
	0xcc, 0x23, 0x72, 0x2f, 0xff, 0x3f, 0x3a, 0xb4, 0xe6, 0x75, 0x61, 0x95, 0x0a, 0xac, 0xe4, 0xe7,
	0x84, 0x79, 0xc4, 0x96, 0x4a, 0x74, 0x08, 0x28, 0x83, 0x23, 0xff, 0x4a, 0x36, 0x2b, 0x92, 0x4d,
	0x2b, 0x65, 0x73, 0x3e, 0x1b, 0x37, 0x0f, 0x01, 0xe6, 0x33, 0xa0, 0x07, 0xb0, 0xf6, 0x32, 0x72,
	0x5d, 0x12, 0x86, 0xad, 0x1a, 0xda, 0x84, 0x87, 0x67, 0x71, 0xd1, 0x05, 0x98, 0x7e, 0xc0, 0x39,
	0xe3, 0x2d, 0xc3, 0xfc, 0xdb, 0x80, 0xad, 0x44, 0xcb, 0x82, 0xa1, 0xcf, 0x47, 0xb3, 0x84, 0xbc,
	0x0b, 0xdb, 0xd9, 0x9a, 0xee, 0x3c, 0x94, 0x66, 0x04, 0xa5, 0xab, 0x2a, 0xa2, 0xfb, 0x97, 0x92,
	0x9f, 0x0d, 0x78, 0xac, 0x6f, 0x4d, 0xe6, 0xe4, 0x79, 0x2e, 0x27, 0xef, 0x68, 0x39, 0xd1, 0x14,
	0xff, 0x51, 0x52, 0x4e, 0xfd, 0xd0, 0xc5, 0xdc, 0x2b, 0x4b, 0x8a, 0x37, 0x0f, 0x15, 0x92, 0xa2,
	0x88, 0xee, 0x5f, 0x52, 0x7e, 0x9d, 0x25, 0x25, 0xb7, 0xb5, 0x4a, 0x49, 0xd1, 0x14, 0x7a, 0x52,
	0x9e, 0x00, 0x08, 0xea, 0xcc, 0xac, 0x27, 0x49, 0xc6, 0xba, 0xa0, 0xa9, 0x39, 0x99, 0xc7, 0xcb,
	0x64, 0x01, 0x6d, 0x43, 0xeb, 0x22, 0xc0, 0x91, 0xb8, 0x62, 0xdc, 0xff, 0x86, 0x78, 0x17, 0x21,
	0xe1, 0xad, 0x15, 0x93, 0xa7, 0xe7, 0xfc, 0x05, 0x91, 0x67, 0x56, 0x56, 0xca, 0x65, 0x9c, 0x9c,
	0xf7, 0xe0, 0x71, 0x96, 0x9c, 0x4b, 0x35, 0x98, 0xa6, 0x67, 0x3b, 0x4d, 0x4f, 0x4e, 0x58, 0x29,
	0x41, 0xe6, 0x8f, 0x06, 0xb4, 0xcb, 0x16, 0x95, 0xd8, 0x4e, 0x72, 0xd8, 0xfa, 0x1a, 0xb6, 0x12,
	0x8d, 0x0e, 0xae, 0x0b, 0x1b, 0x82, 0x3a, 0x1e, 0x16, 0xd8, 0xf9, 0x3a, 0x64, 0x41, 0x8a, 0x0e,
	0x04, 0x3d, 0xc5, 0x02, 0x7f, 0x1c, 0xb2, 0x60, 0xc9, 0x0a, 0xfe, 0x76, 0xd6, 0xa7, 0x6c, 0xe2,
	0x12, 0xff, 0x86, 0x64, 0x25, 0x7c, 0x04, 0x3b, 0x19, 0x25, 0xae, 0xc4, 0x52, 0x48, 0x5b, 0x29,
	0x24, 0x55, 0xf6, 0x3a, 0x2d, 0xcc, 0xfc, 0xc5, 0x48, 0xbb, 0x54, 0xfe, 0x45, 0x24, 0xb9, 0xe3,
	0x1c, 0x39, 0x4b, 0x23, 0xa7, 0x4b, 0x74, 0x70, 0x6f, 0x4b, 0x1b, 0x18, 0x30, 0x46, 0x1d, 0xc1,
	0x23, 0xe2, 0x0c, 0x31, 0x0d, 0x49, 0x8a, 0xef, 0x91, 0xa0, 0xc7, 0x8c, 0xd1, 0xcf, 0x79, 0x44,
	0x3e, 0x8c, 0x87, 0x5f, 0xd5, 0x05, 0x6c, 0x32, 0x89, 0x48, 0x28, 0xca, 0x5c, 0x80, 0xcf, 0x43,
	0x05, 0x17, 0x50, 0x44, 0xf7, 0xcf, 0x05, 0xfe, 0x98, 0xb9, 0x40, 0x6e, 0x6b, 0x95, 0x5c, 0x40,
	0x53, 0xbc, 0xae, 0x35, 0xbf, 0x58, 0xca, 0x14, 0xde, 0x80, 0x9d, 0xd8, 0x08, 0xce, 0xb9, 0x7f,
	0x83, 0xdd, 0xa9, 0x4d, 0x42, 0xc1, 0x7d, 0x57, 0x10, 0x4f, 0x71, 0x86, 0x97, 0xf8, 0x46, 0xce,
	0x9c, 0xd0, 0x2d, 0x38, 0x43, 0xa8, 0x06, 0x0b, 0xce, 0x90, 0x13, 0x56, 0x73, 0x86, 0xef, 0x67,
	0xce, 0x50, 0x58, 0xb4, 0x92, 0x33, 0x94, 0x68, 0x74, 0x98, 0xbb, 0xb0, 0x96, 0x16, 0xb8, 0x7c,
	0x91, 0xff, 0xd9, 0xcd, 0xa4, 0xaa, 0x97, 0x2c, 0xe6, 0x0c, 0x4e, 0xe2, 0x46, 0x36, 0x16, 0x7e,
	0xa0, 0xc3, 0x51, 0x83, 0x45, 0x38, 0x6a, 0xac, 0x1a, 0x9c, 0x1f, 0x32, 0x38, 0xf9, 0x45, 0xab,
	0xc1, 0xd1, 0x35, 0x4b, 0xf7, 0x9b, 0xa5, 0x10, 0x1d, 0xfd, 0xd9, 0x84, 0xf5, 0xac, 0x2c, 0xd1,
	0x17, 0xf0, 0xa8, 0x78, 0xe9, 0xdd, 0xbb, 0xf3, 0xee, 0x38, 0xe9, 0x1c, 0x2c, 0xbc, 0x5b, 0x9a,
	0x35, 0xf4, 0x25, 0xb4, 0xb4, 0xab, 0xdb, 0xfe, 0xdd, 0x17, 0xa0, 0x49, 0xc7, 0x5c, 0x7c, 0x43,
	0x52, 0xa6, 0x56, 0x2f, 0x20, 0xfb, 0x77, 0xb7, 0xf1, 0xb2, 0xa9, 0xb5, 0x3e, 0x6f, 0xd6, 0x90,
	0x93, 0x7e, 0x35, 0xe4, 0x9b, 0xe7, 0xc1, 0xa2, 0x66, 0x37, 0xe9, 0xbc, 0x55, 0xa5, 0x1f, 0x9a,
	0x35, 0xf4, 0x15, 0x6c, 0xea, 0x8d, 0xa7, 0xbb, 0xa0, 0x25, 0x4c, 0x3a, 0x4f, 0x2b, 0x34, 0x0d,
	0x85, 0x8c, 0x6a, 0xca, 0xfb, 0x77, 0x5b, 0x5b, 0x19, 0x19, 0xcd, 0xfb, 0x14, 0x32, 0x79, 0xf3,
	0x38, 0x58, 0x74, 0xd8, 0xcb, 0xc8, 0x94, 0xf8, 0x81, 0xba, 0x40, 0xee, 0x00, 0x1e, 0x2c, 0x3a,
	0x30, 0xa5, 0x0b, 0xe8, 0x67, 0x4a, 0x41, 0xaf, 0x7e, 0x47, 0x96, 0xa0, 0x2f, 0x7c, 0xf1, 0x96,
	0xa0, 0xd7, 0x3f, 0x44, 0xcd, 0xda, 0xf1, 0xc6, 0x6f, 0xb7, 0x7b, 0xc6, 0xef, 0xb7, 0x7b, 0xc6,
	0x3f, 0xb7, 0x7b, 0xc6, 0xa0, 0x29, 0x3f, 0xa3, 0x9f, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xb0,
	0xe5, 0x6b, 0x27, 0xef, 0x0f, 0x00, 0x00,
}
