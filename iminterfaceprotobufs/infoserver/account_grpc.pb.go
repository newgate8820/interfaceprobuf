// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: account.proto

package infoserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccounterClient is the client API for Accounter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccounterClient interface {
	// 获取用户id和用户hash id
	AssignUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoRsp, error)
	UnAssignUserInfo(ctx context.Context, in *UserInfoRsp, opts ...grpc.CallOption) (*BoolResult, error)
	CheckPhoneRegistered(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*BoolResult, error)
	// group
	AssignGroupId(ctx context.Context, in *GroupIdReq, opts ...grpc.CallOption) (*GroupIdRsp, error)
	UnAssignGroupId(ctx context.Context, in *GroupIdRsp, opts ...grpc.CallOption) (*BoolResult, error)
	// session
	//
	//	rpc NewKeyIdSession(Session) returns (BoolResult) {}
	//	rpc QueryUserSessions(Session) returns (SessionArray) {}
	//	rpc UpdateUserSessions(SessionUpdate) returns (BoolResult) {}
	//	rpc QueryKeyIdSession(Session) returns (Session) {}
	//	rpc UpdateSessionQts(SessionUpdate) returns (Session) {}
	//	rpc QueryUsersSessionStatus(SessionsReq) returns (SessionsRsp) {}
	//	rpc TerminateSessions(SessionTerminateReq) returns (SessionTerminateRsp) {}
	//
	// init connetion 调用
	SessionUpdateInitConnection(ctx context.Context, in *SessionUpdateInitConnectionReq, opts ...grpc.CallOption) (*SessionUpdateInitConnectionResult, error)
	// register device 调用
	SessionUpdateRegisterDevice(ctx context.Context, in *SessionUpdateRegisterDeviceReq, opts ...grpc.CallOption) (*SessionUpdateRegisterDeviceResult, error)
	// 登陆时调用
	SessionUpdateSignIn(ctx context.Context, in *SessionUpdateSignInReq, opts ...grpc.CallOption) (*SessionUpdateSignInResult, error)
	// ping 或者ping delay等有活动时调用
	SessionUpdatePing(ctx context.Context, in *SessionUpdatePingReq, opts ...grpc.CallOption) (*SessionUpdatePingResult, error)
	// logout 调用
	SessionUpdateLogout(ctx context.Context, in *SessionUpdateLogoutReq, opts ...grpc.CallOption) (*SessionUpdateLogoutResult, error)
	// 剔除单个
	SessionTerminateByKeyid(ctx context.Context, in *SessionTerminateByKeyidReq, opts ...grpc.CallOption) (*SessionTerminateByKeyidResult, error)
	// 剔除多个
	SessionTerminateExceptKeyid(ctx context.Context, in *SessionTerminateExceptKeyidReq, opts ...grpc.CallOption) (*SessionTerminateExceptKeyidResult, error)
	// 查询单个session
	SessionQueryByKeyid(ctx context.Context, in *SessionQueryByKeyidReq, opts ...grpc.CallOption) (*SessionQueryByKeyidResult, error)
	// 查询所有
	SessionQueryByPhone(ctx context.Context, in *SessionQueryByPhoneReq, opts ...grpc.CallOption) (*SessionQueryByPhoneResult, error)
	// 更新qts
	SessionIncQts(ctx context.Context, in *SessionIncQtsReq, opts ...grpc.CallOption) (*SessionIncQtsResult, error)
	// 檢查session是否被踢
	SessionQueryUseridByKeyid(ctx context.Context, in *SessionQueryUseridByKeyidReq, opts ...grpc.CallOption) (*SessionQueryUseridByKeyidResult, error)
	// 根据userid查所有session
	SessionQueryByUserid(ctx context.Context, in *SessionQueryByUseridReq, opts ...grpc.CallOption) (*SessionQueryByUseridResult, error)
	// 客户端握手完成时保存auth key
	SessionUpdateOnHandshakeDone(ctx context.Context, in *SessionUpdateOnHandshakeDoneReq, opts ...grpc.CallOption) (*SessionUpdateOnHandshakeDoneResult, error)
	// 根据keyid获取apiid
	SessionQueryApiIDbyKeyid(ctx context.Context, in *SessionQueryApiIDbyKeyidReq, opts ...grpc.CallOption) (*SessionQueryApiIDbyKeyidResult, error)
	// 客户端连接断开
	SessionDisconnect(ctx context.Context, in *SessionDisconnectReq, opts ...grpc.CallOption) (*SessionDisconnectResult, error)
	// authorization
	SaveAuthorizationInfo(ctx context.Context, in *Authorization, opts ...grpc.CallOption) (*BoolResult, error)
	QueryAuthorizationInfo(ctx context.Context, in *Authorization, opts ...grpc.CallOption) (*Authorization, error)
	// password
	UpdatePassword(ctx context.Context, in *PasswordReq, opts ...grpc.CallOption) (*BoolResult, error)
	GetPassword(ctx context.Context, in *PasswordReq, opts ...grpc.CallOption) (*PasswordRsp, error)
	DeletePassword(ctx context.Context, in *PasswordReq, opts ...grpc.CallOption) (*BoolResult, error)
	// 检查userid和access hash是否匹配
	CheckUserIdAndAccessHash(ctx context.Context, in *CheckUserIdAndAccessHashReq, opts ...grpc.CallOption) (*CheckUserIdAndAccessHashResult, error)
	// get unique number by key id
	GetUniqueNumberByKeyId(ctx context.Context, in *GetUniqueNumberByKeyIdReq, opts ...grpc.CallOption) (*GetUniqueNumberByKeyIdResult, error)
	PtUpdatePassword(ctx context.Context, in *PtPasswordReq, opts ...grpc.CallOption) (*BoolResult, error)
}

type accounterClient struct {
	cc grpc.ClientConnInterface
}

func NewAccounterClient(cc grpc.ClientConnInterface) AccounterClient {
	return &accounterClient{cc}
}

func (c *accounterClient) AssignUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoRsp, error) {
	out := new(UserInfoRsp)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/AssignUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) UnAssignUserInfo(ctx context.Context, in *UserInfoRsp, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/UnAssignUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) CheckPhoneRegistered(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/CheckPhoneRegistered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) AssignGroupId(ctx context.Context, in *GroupIdReq, opts ...grpc.CallOption) (*GroupIdRsp, error) {
	out := new(GroupIdRsp)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/AssignGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) UnAssignGroupId(ctx context.Context, in *GroupIdRsp, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/UnAssignGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionUpdateInitConnection(ctx context.Context, in *SessionUpdateInitConnectionReq, opts ...grpc.CallOption) (*SessionUpdateInitConnectionResult, error) {
	out := new(SessionUpdateInitConnectionResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionUpdateInitConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionUpdateRegisterDevice(ctx context.Context, in *SessionUpdateRegisterDeviceReq, opts ...grpc.CallOption) (*SessionUpdateRegisterDeviceResult, error) {
	out := new(SessionUpdateRegisterDeviceResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionUpdateRegisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionUpdateSignIn(ctx context.Context, in *SessionUpdateSignInReq, opts ...grpc.CallOption) (*SessionUpdateSignInResult, error) {
	out := new(SessionUpdateSignInResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionUpdateSignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionUpdatePing(ctx context.Context, in *SessionUpdatePingReq, opts ...grpc.CallOption) (*SessionUpdatePingResult, error) {
	out := new(SessionUpdatePingResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionUpdatePing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionUpdateLogout(ctx context.Context, in *SessionUpdateLogoutReq, opts ...grpc.CallOption) (*SessionUpdateLogoutResult, error) {
	out := new(SessionUpdateLogoutResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionUpdateLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionTerminateByKeyid(ctx context.Context, in *SessionTerminateByKeyidReq, opts ...grpc.CallOption) (*SessionTerminateByKeyidResult, error) {
	out := new(SessionTerminateByKeyidResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionTerminateByKeyid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionTerminateExceptKeyid(ctx context.Context, in *SessionTerminateExceptKeyidReq, opts ...grpc.CallOption) (*SessionTerminateExceptKeyidResult, error) {
	out := new(SessionTerminateExceptKeyidResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionTerminateExceptKeyid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionQueryByKeyid(ctx context.Context, in *SessionQueryByKeyidReq, opts ...grpc.CallOption) (*SessionQueryByKeyidResult, error) {
	out := new(SessionQueryByKeyidResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionQueryByKeyid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionQueryByPhone(ctx context.Context, in *SessionQueryByPhoneReq, opts ...grpc.CallOption) (*SessionQueryByPhoneResult, error) {
	out := new(SessionQueryByPhoneResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionQueryByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionIncQts(ctx context.Context, in *SessionIncQtsReq, opts ...grpc.CallOption) (*SessionIncQtsResult, error) {
	out := new(SessionIncQtsResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionIncQts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionQueryUseridByKeyid(ctx context.Context, in *SessionQueryUseridByKeyidReq, opts ...grpc.CallOption) (*SessionQueryUseridByKeyidResult, error) {
	out := new(SessionQueryUseridByKeyidResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionQueryUseridByKeyid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionQueryByUserid(ctx context.Context, in *SessionQueryByUseridReq, opts ...grpc.CallOption) (*SessionQueryByUseridResult, error) {
	out := new(SessionQueryByUseridResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionQueryByUserid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionUpdateOnHandshakeDone(ctx context.Context, in *SessionUpdateOnHandshakeDoneReq, opts ...grpc.CallOption) (*SessionUpdateOnHandshakeDoneResult, error) {
	out := new(SessionUpdateOnHandshakeDoneResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionUpdateOnHandshakeDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionQueryApiIDbyKeyid(ctx context.Context, in *SessionQueryApiIDbyKeyidReq, opts ...grpc.CallOption) (*SessionQueryApiIDbyKeyidResult, error) {
	out := new(SessionQueryApiIDbyKeyidResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionQueryApiIDbyKeyid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SessionDisconnect(ctx context.Context, in *SessionDisconnectReq, opts ...grpc.CallOption) (*SessionDisconnectResult, error) {
	out := new(SessionDisconnectResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SessionDisconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) SaveAuthorizationInfo(ctx context.Context, in *Authorization, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/SaveAuthorizationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) QueryAuthorizationInfo(ctx context.Context, in *Authorization, opts ...grpc.CallOption) (*Authorization, error) {
	out := new(Authorization)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/QueryAuthorizationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) UpdatePassword(ctx context.Context, in *PasswordReq, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) GetPassword(ctx context.Context, in *PasswordReq, opts ...grpc.CallOption) (*PasswordRsp, error) {
	out := new(PasswordRsp)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/GetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) DeletePassword(ctx context.Context, in *PasswordReq, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/DeletePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) CheckUserIdAndAccessHash(ctx context.Context, in *CheckUserIdAndAccessHashReq, opts ...grpc.CallOption) (*CheckUserIdAndAccessHashResult, error) {
	out := new(CheckUserIdAndAccessHashResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/CheckUserIdAndAccessHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) GetUniqueNumberByKeyId(ctx context.Context, in *GetUniqueNumberByKeyIdReq, opts ...grpc.CallOption) (*GetUniqueNumberByKeyIdResult, error) {
	out := new(GetUniqueNumberByKeyIdResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/GetUniqueNumberByKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accounterClient) PtUpdatePassword(ctx context.Context, in *PtPasswordReq, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := c.cc.Invoke(ctx, "/infoserver.Accounter/PtUpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccounterServer is the server API for Accounter service.
// All implementations must embed UnimplementedAccounterServer
// for forward compatibility
type AccounterServer interface {
	// 获取用户id和用户hash id
	AssignUserInfo(context.Context, *UserInfoReq) (*UserInfoRsp, error)
	UnAssignUserInfo(context.Context, *UserInfoRsp) (*BoolResult, error)
	CheckPhoneRegistered(context.Context, *UserInfoReq) (*BoolResult, error)
	// group
	AssignGroupId(context.Context, *GroupIdReq) (*GroupIdRsp, error)
	UnAssignGroupId(context.Context, *GroupIdRsp) (*BoolResult, error)
	// session
	//
	//	rpc NewKeyIdSession(Session) returns (BoolResult) {}
	//	rpc QueryUserSessions(Session) returns (SessionArray) {}
	//	rpc UpdateUserSessions(SessionUpdate) returns (BoolResult) {}
	//	rpc QueryKeyIdSession(Session) returns (Session) {}
	//	rpc UpdateSessionQts(SessionUpdate) returns (Session) {}
	//	rpc QueryUsersSessionStatus(SessionsReq) returns (SessionsRsp) {}
	//	rpc TerminateSessions(SessionTerminateReq) returns (SessionTerminateRsp) {}
	//
	// init connetion 调用
	SessionUpdateInitConnection(context.Context, *SessionUpdateInitConnectionReq) (*SessionUpdateInitConnectionResult, error)
	// register device 调用
	SessionUpdateRegisterDevice(context.Context, *SessionUpdateRegisterDeviceReq) (*SessionUpdateRegisterDeviceResult, error)
	// 登陆时调用
	SessionUpdateSignIn(context.Context, *SessionUpdateSignInReq) (*SessionUpdateSignInResult, error)
	// ping 或者ping delay等有活动时调用
	SessionUpdatePing(context.Context, *SessionUpdatePingReq) (*SessionUpdatePingResult, error)
	// logout 调用
	SessionUpdateLogout(context.Context, *SessionUpdateLogoutReq) (*SessionUpdateLogoutResult, error)
	// 剔除单个
	SessionTerminateByKeyid(context.Context, *SessionTerminateByKeyidReq) (*SessionTerminateByKeyidResult, error)
	// 剔除多个
	SessionTerminateExceptKeyid(context.Context, *SessionTerminateExceptKeyidReq) (*SessionTerminateExceptKeyidResult, error)
	// 查询单个session
	SessionQueryByKeyid(context.Context, *SessionQueryByKeyidReq) (*SessionQueryByKeyidResult, error)
	// 查询所有
	SessionQueryByPhone(context.Context, *SessionQueryByPhoneReq) (*SessionQueryByPhoneResult, error)
	// 更新qts
	SessionIncQts(context.Context, *SessionIncQtsReq) (*SessionIncQtsResult, error)
	// 檢查session是否被踢
	SessionQueryUseridByKeyid(context.Context, *SessionQueryUseridByKeyidReq) (*SessionQueryUseridByKeyidResult, error)
	// 根据userid查所有session
	SessionQueryByUserid(context.Context, *SessionQueryByUseridReq) (*SessionQueryByUseridResult, error)
	// 客户端握手完成时保存auth key
	SessionUpdateOnHandshakeDone(context.Context, *SessionUpdateOnHandshakeDoneReq) (*SessionUpdateOnHandshakeDoneResult, error)
	// 根据keyid获取apiid
	SessionQueryApiIDbyKeyid(context.Context, *SessionQueryApiIDbyKeyidReq) (*SessionQueryApiIDbyKeyidResult, error)
	// 客户端连接断开
	SessionDisconnect(context.Context, *SessionDisconnectReq) (*SessionDisconnectResult, error)
	// authorization
	SaveAuthorizationInfo(context.Context, *Authorization) (*BoolResult, error)
	QueryAuthorizationInfo(context.Context, *Authorization) (*Authorization, error)
	// password
	UpdatePassword(context.Context, *PasswordReq) (*BoolResult, error)
	GetPassword(context.Context, *PasswordReq) (*PasswordRsp, error)
	DeletePassword(context.Context, *PasswordReq) (*BoolResult, error)
	// 检查userid和access hash是否匹配
	CheckUserIdAndAccessHash(context.Context, *CheckUserIdAndAccessHashReq) (*CheckUserIdAndAccessHashResult, error)
	// get unique number by key id
	GetUniqueNumberByKeyId(context.Context, *GetUniqueNumberByKeyIdReq) (*GetUniqueNumberByKeyIdResult, error)
	PtUpdatePassword(context.Context, *PtPasswordReq) (*BoolResult, error)
	mustEmbedUnimplementedAccounterServer()
}

// UnimplementedAccounterServer must be embedded to have forward compatible implementations.
type UnimplementedAccounterServer struct {
}

func (UnimplementedAccounterServer) AssignUserInfo(context.Context, *UserInfoReq) (*UserInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUserInfo not implemented")
}
func (UnimplementedAccounterServer) UnAssignUserInfo(context.Context, *UserInfoRsp) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnAssignUserInfo not implemented")
}
func (UnimplementedAccounterServer) CheckPhoneRegistered(context.Context, *UserInfoReq) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPhoneRegistered not implemented")
}
func (UnimplementedAccounterServer) AssignGroupId(context.Context, *GroupIdReq) (*GroupIdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignGroupId not implemented")
}
func (UnimplementedAccounterServer) UnAssignGroupId(context.Context, *GroupIdRsp) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnAssignGroupId not implemented")
}
func (UnimplementedAccounterServer) SessionUpdateInitConnection(context.Context, *SessionUpdateInitConnectionReq) (*SessionUpdateInitConnectionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdateInitConnection not implemented")
}
func (UnimplementedAccounterServer) SessionUpdateRegisterDevice(context.Context, *SessionUpdateRegisterDeviceReq) (*SessionUpdateRegisterDeviceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdateRegisterDevice not implemented")
}
func (UnimplementedAccounterServer) SessionUpdateSignIn(context.Context, *SessionUpdateSignInReq) (*SessionUpdateSignInResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdateSignIn not implemented")
}
func (UnimplementedAccounterServer) SessionUpdatePing(context.Context, *SessionUpdatePingReq) (*SessionUpdatePingResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdatePing not implemented")
}
func (UnimplementedAccounterServer) SessionUpdateLogout(context.Context, *SessionUpdateLogoutReq) (*SessionUpdateLogoutResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdateLogout not implemented")
}
func (UnimplementedAccounterServer) SessionTerminateByKeyid(context.Context, *SessionTerminateByKeyidReq) (*SessionTerminateByKeyidResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionTerminateByKeyid not implemented")
}
func (UnimplementedAccounterServer) SessionTerminateExceptKeyid(context.Context, *SessionTerminateExceptKeyidReq) (*SessionTerminateExceptKeyidResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionTerminateExceptKeyid not implemented")
}
func (UnimplementedAccounterServer) SessionQueryByKeyid(context.Context, *SessionQueryByKeyidReq) (*SessionQueryByKeyidResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionQueryByKeyid not implemented")
}
func (UnimplementedAccounterServer) SessionQueryByPhone(context.Context, *SessionQueryByPhoneReq) (*SessionQueryByPhoneResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionQueryByPhone not implemented")
}
func (UnimplementedAccounterServer) SessionIncQts(context.Context, *SessionIncQtsReq) (*SessionIncQtsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionIncQts not implemented")
}
func (UnimplementedAccounterServer) SessionQueryUseridByKeyid(context.Context, *SessionQueryUseridByKeyidReq) (*SessionQueryUseridByKeyidResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionQueryUseridByKeyid not implemented")
}
func (UnimplementedAccounterServer) SessionQueryByUserid(context.Context, *SessionQueryByUseridReq) (*SessionQueryByUseridResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionQueryByUserid not implemented")
}
func (UnimplementedAccounterServer) SessionUpdateOnHandshakeDone(context.Context, *SessionUpdateOnHandshakeDoneReq) (*SessionUpdateOnHandshakeDoneResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionUpdateOnHandshakeDone not implemented")
}
func (UnimplementedAccounterServer) SessionQueryApiIDbyKeyid(context.Context, *SessionQueryApiIDbyKeyidReq) (*SessionQueryApiIDbyKeyidResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionQueryApiIDbyKeyid not implemented")
}
func (UnimplementedAccounterServer) SessionDisconnect(context.Context, *SessionDisconnectReq) (*SessionDisconnectResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionDisconnect not implemented")
}
func (UnimplementedAccounterServer) SaveAuthorizationInfo(context.Context, *Authorization) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAuthorizationInfo not implemented")
}
func (UnimplementedAccounterServer) QueryAuthorizationInfo(context.Context, *Authorization) (*Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAuthorizationInfo not implemented")
}
func (UnimplementedAccounterServer) UpdatePassword(context.Context, *PasswordReq) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedAccounterServer) GetPassword(context.Context, *PasswordReq) (*PasswordRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedAccounterServer) DeletePassword(context.Context, *PasswordReq) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassword not implemented")
}
func (UnimplementedAccounterServer) CheckUserIdAndAccessHash(context.Context, *CheckUserIdAndAccessHashReq) (*CheckUserIdAndAccessHashResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserIdAndAccessHash not implemented")
}
func (UnimplementedAccounterServer) GetUniqueNumberByKeyId(context.Context, *GetUniqueNumberByKeyIdReq) (*GetUniqueNumberByKeyIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniqueNumberByKeyId not implemented")
}
func (UnimplementedAccounterServer) PtUpdatePassword(context.Context, *PtPasswordReq) (*BoolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PtUpdatePassword not implemented")
}
func (UnimplementedAccounterServer) mustEmbedUnimplementedAccounterServer() {}

// UnsafeAccounterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccounterServer will
// result in compilation errors.
type UnsafeAccounterServer interface {
	mustEmbedUnimplementedAccounterServer()
}

func RegisterAccounterServer(s grpc.ServiceRegistrar, srv AccounterServer) {
	s.RegisterService(&Accounter_ServiceDesc, srv)
}

func _Accounter_AssignUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).AssignUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/AssignUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).AssignUserInfo(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_UnAssignUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRsp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).UnAssignUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/UnAssignUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).UnAssignUserInfo(ctx, req.(*UserInfoRsp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_CheckPhoneRegistered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).CheckPhoneRegistered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/CheckPhoneRegistered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).CheckPhoneRegistered(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_AssignGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).AssignGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/AssignGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).AssignGroupId(ctx, req.(*GroupIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_UnAssignGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupIdRsp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).UnAssignGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/UnAssignGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).UnAssignGroupId(ctx, req.(*GroupIdRsp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionUpdateInitConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionUpdateInitConnectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionUpdateInitConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionUpdateInitConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionUpdateInitConnection(ctx, req.(*SessionUpdateInitConnectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionUpdateRegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionUpdateRegisterDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionUpdateRegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionUpdateRegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionUpdateRegisterDevice(ctx, req.(*SessionUpdateRegisterDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionUpdateSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionUpdateSignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionUpdateSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionUpdateSignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionUpdateSignIn(ctx, req.(*SessionUpdateSignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionUpdatePing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionUpdatePingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionUpdatePing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionUpdatePing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionUpdatePing(ctx, req.(*SessionUpdatePingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionUpdateLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionUpdateLogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionUpdateLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionUpdateLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionUpdateLogout(ctx, req.(*SessionUpdateLogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionTerminateByKeyid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionTerminateByKeyidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionTerminateByKeyid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionTerminateByKeyid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionTerminateByKeyid(ctx, req.(*SessionTerminateByKeyidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionTerminateExceptKeyid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionTerminateExceptKeyidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionTerminateExceptKeyid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionTerminateExceptKeyid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionTerminateExceptKeyid(ctx, req.(*SessionTerminateExceptKeyidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionQueryByKeyid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionQueryByKeyidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionQueryByKeyid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionQueryByKeyid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionQueryByKeyid(ctx, req.(*SessionQueryByKeyidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionQueryByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionQueryByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionQueryByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionQueryByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionQueryByPhone(ctx, req.(*SessionQueryByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionIncQts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionIncQtsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionIncQts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionIncQts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionIncQts(ctx, req.(*SessionIncQtsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionQueryUseridByKeyid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionQueryUseridByKeyidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionQueryUseridByKeyid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionQueryUseridByKeyid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionQueryUseridByKeyid(ctx, req.(*SessionQueryUseridByKeyidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionQueryByUserid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionQueryByUseridReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionQueryByUserid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionQueryByUserid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionQueryByUserid(ctx, req.(*SessionQueryByUseridReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionUpdateOnHandshakeDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionUpdateOnHandshakeDoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionUpdateOnHandshakeDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionUpdateOnHandshakeDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionUpdateOnHandshakeDone(ctx, req.(*SessionUpdateOnHandshakeDoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionQueryApiIDbyKeyid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionQueryApiIDbyKeyidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionQueryApiIDbyKeyid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionQueryApiIDbyKeyid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionQueryApiIDbyKeyid(ctx, req.(*SessionQueryApiIDbyKeyidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SessionDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDisconnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SessionDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SessionDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SessionDisconnect(ctx, req.(*SessionDisconnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_SaveAuthorizationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Authorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).SaveAuthorizationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/SaveAuthorizationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).SaveAuthorizationInfo(ctx, req.(*Authorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_QueryAuthorizationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Authorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).QueryAuthorizationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/QueryAuthorizationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).QueryAuthorizationInfo(ctx, req.(*Authorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).UpdatePassword(ctx, req.(*PasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/GetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).GetPassword(ctx, req.(*PasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_DeletePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).DeletePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/DeletePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).DeletePassword(ctx, req.(*PasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_CheckUserIdAndAccessHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserIdAndAccessHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).CheckUserIdAndAccessHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/CheckUserIdAndAccessHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).CheckUserIdAndAccessHash(ctx, req.(*CheckUserIdAndAccessHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_GetUniqueNumberByKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUniqueNumberByKeyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).GetUniqueNumberByKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/GetUniqueNumberByKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).GetUniqueNumberByKeyId(ctx, req.(*GetUniqueNumberByKeyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounter_PtUpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PtPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccounterServer).PtUpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.Accounter/PtUpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccounterServer).PtUpdatePassword(ctx, req.(*PtPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Accounter_ServiceDesc is the grpc.ServiceDesc for Accounter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Accounter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infoserver.Accounter",
	HandlerType: (*AccounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignUserInfo",
			Handler:    _Accounter_AssignUserInfo_Handler,
		},
		{
			MethodName: "UnAssignUserInfo",
			Handler:    _Accounter_UnAssignUserInfo_Handler,
		},
		{
			MethodName: "CheckPhoneRegistered",
			Handler:    _Accounter_CheckPhoneRegistered_Handler,
		},
		{
			MethodName: "AssignGroupId",
			Handler:    _Accounter_AssignGroupId_Handler,
		},
		{
			MethodName: "UnAssignGroupId",
			Handler:    _Accounter_UnAssignGroupId_Handler,
		},
		{
			MethodName: "SessionUpdateInitConnection",
			Handler:    _Accounter_SessionUpdateInitConnection_Handler,
		},
		{
			MethodName: "SessionUpdateRegisterDevice",
			Handler:    _Accounter_SessionUpdateRegisterDevice_Handler,
		},
		{
			MethodName: "SessionUpdateSignIn",
			Handler:    _Accounter_SessionUpdateSignIn_Handler,
		},
		{
			MethodName: "SessionUpdatePing",
			Handler:    _Accounter_SessionUpdatePing_Handler,
		},
		{
			MethodName: "SessionUpdateLogout",
			Handler:    _Accounter_SessionUpdateLogout_Handler,
		},
		{
			MethodName: "SessionTerminateByKeyid",
			Handler:    _Accounter_SessionTerminateByKeyid_Handler,
		},
		{
			MethodName: "SessionTerminateExceptKeyid",
			Handler:    _Accounter_SessionTerminateExceptKeyid_Handler,
		},
		{
			MethodName: "SessionQueryByKeyid",
			Handler:    _Accounter_SessionQueryByKeyid_Handler,
		},
		{
			MethodName: "SessionQueryByPhone",
			Handler:    _Accounter_SessionQueryByPhone_Handler,
		},
		{
			MethodName: "SessionIncQts",
			Handler:    _Accounter_SessionIncQts_Handler,
		},
		{
			MethodName: "SessionQueryUseridByKeyid",
			Handler:    _Accounter_SessionQueryUseridByKeyid_Handler,
		},
		{
			MethodName: "SessionQueryByUserid",
			Handler:    _Accounter_SessionQueryByUserid_Handler,
		},
		{
			MethodName: "SessionUpdateOnHandshakeDone",
			Handler:    _Accounter_SessionUpdateOnHandshakeDone_Handler,
		},
		{
			MethodName: "SessionQueryApiIDbyKeyid",
			Handler:    _Accounter_SessionQueryApiIDbyKeyid_Handler,
		},
		{
			MethodName: "SessionDisconnect",
			Handler:    _Accounter_SessionDisconnect_Handler,
		},
		{
			MethodName: "SaveAuthorizationInfo",
			Handler:    _Accounter_SaveAuthorizationInfo_Handler,
		},
		{
			MethodName: "QueryAuthorizationInfo",
			Handler:    _Accounter_QueryAuthorizationInfo_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Accounter_UpdatePassword_Handler,
		},
		{
			MethodName: "GetPassword",
			Handler:    _Accounter_GetPassword_Handler,
		},
		{
			MethodName: "DeletePassword",
			Handler:    _Accounter_DeletePassword_Handler,
		},
		{
			MethodName: "CheckUserIdAndAccessHash",
			Handler:    _Accounter_CheckUserIdAndAccessHash_Handler,
		},
		{
			MethodName: "GetUniqueNumberByKeyId",
			Handler:    _Accounter_GetUniqueNumberByKeyId_Handler,
		},
		{
			MethodName: "PtUpdatePassword",
			Handler:    _Accounter_PtUpdatePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
