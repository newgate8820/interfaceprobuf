// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/chatservice.proto

package infoserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/pbcomm"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// 创建群的请求数据
type CreateChatReq struct {
	Title     string        `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	CreatorId int32         `protobuf:"varint,2,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CreateChatReq) Reset()                    { *m = CreateChatReq{} }
func (m *CreateChatReq) String() string            { return proto.CompactTextString(m) }
func (*CreateChatReq) ProtoMessage()               {}
func (*CreateChatReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{0} }

func (m *CreateChatReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateChatReq) GetCreatorId() int32 {
	if m != nil {
		return m.CreatorId
	}
	return 0
}

func (m *CreateChatReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type CreateChatResp struct {
	ChatId     int32          `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CreateChatResp) Reset()                    { *m = CreateChatResp{} }
func (m *CreateChatResp) String() string            { return proto.CompactTextString(m) }
func (*CreateChatResp) ProtoMessage()               {}
func (*CreateChatResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{1} }

func (m *CreateChatResp) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *CreateChatResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 通过群Id获取群成员
type GetChatUsersIdReq struct {
	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChatUsersIdReq) Reset()                    { *m = GetChatUsersIdReq{} }
func (m *GetChatUsersIdReq) String() string            { return proto.CompactTextString(m) }
func (*GetChatUsersIdReq) ProtoMessage()               {}
func (*GetChatUsersIdReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{2} }

func (m *GetChatUsersIdReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatUsersIdReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GetChatUsersIdResp struct {
	UserId     []int32        `protobuf:"varint,1,rep,packed,name=user_id,json=userId" json:"user_id,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChatUsersIdResp) Reset()                    { *m = GetChatUsersIdResp{} }
func (m *GetChatUsersIdResp) String() string            { return proto.CompactTextString(m) }
func (*GetChatUsersIdResp) ProtoMessage()               {}
func (*GetChatUsersIdResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{3} }

func (m *GetChatUsersIdResp) GetUserId() []int32 {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *GetChatUsersIdResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 通过群Id 用户Id 获取群基本信息
type GetChatInfoReq struct {
	ChatId   int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId   int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RobotGet bool          `protobuf:"varint,3,opt,name=robot_get,json=robotGet,proto3" json:"robot_get,omitempty"`
	Dlog     *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChatInfoReq) Reset()                    { *m = GetChatInfoReq{} }
func (m *GetChatInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetChatInfoReq) ProtoMessage()               {}
func (*GetChatInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{4} }

func (m *GetChatInfoReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChatInfoReq) GetRobotGet() bool {
	if m != nil {
		return m.RobotGet
	}
	return false
}

func (m *GetChatInfoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 普通群的基础信息
type GetChatInfoResp struct {
	ChatId            int32          `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminsEnabled     bool           `protobuf:"varint,2,opt,name=admins_enabled,json=adminsEnabled,proto3" json:"admins_enabled,omitempty"`
	Deactivated       bool           `protobuf:"varint,3,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
	ExportedInvite    string         `protobuf:"bytes,4,opt,name=exported_invite,json=exportedInvite,proto3" json:"exported_invite,omitempty"`
	Encry             bool           `protobuf:"varint,5,opt,name=encry,proto3" json:"encry,omitempty"`
	Creator           int32          `protobuf:"varint,6,opt,name=creator,proto3" json:"creator,omitempty"`
	Title             string         `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Photo             []byte         `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`
	FullPhoto         []byte         `protobuf:"bytes,9,opt,name=full_photo,json=fullPhoto,proto3" json:"full_photo,omitempty"`
	Version           int32          `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	ParticipantsCount int32          `protobuf:"varint,11,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
	Date              int32          `protobuf:"varint,12,opt,name=date,proto3" json:"date,omitempty"`
	MigrateTo         string         `protobuf:"bytes,13,opt,name=migrate_to,json=migrateTo,proto3" json:"migrate_to,omitempty"`
	Resultcode        ChatResultCode `protobuf:"varint,14,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChatInfoResp) Reset()                    { *m = GetChatInfoResp{} }
func (m *GetChatInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetChatInfoResp) ProtoMessage()               {}
func (*GetChatInfoResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{5} }

func (m *GetChatInfoResp) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatInfoResp) GetAdminsEnabled() bool {
	if m != nil {
		return m.AdminsEnabled
	}
	return false
}

func (m *GetChatInfoResp) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

func (m *GetChatInfoResp) GetExportedInvite() string {
	if m != nil {
		return m.ExportedInvite
	}
	return ""
}

func (m *GetChatInfoResp) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *GetChatInfoResp) GetCreator() int32 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *GetChatInfoResp) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GetChatInfoResp) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *GetChatInfoResp) GetFullPhoto() []byte {
	if m != nil {
		return m.FullPhoto
	}
	return nil
}

func (m *GetChatInfoResp) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetChatInfoResp) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *GetChatInfoResp) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *GetChatInfoResp) GetMigrateTo() string {
	if m != nil {
		return m.MigrateTo
	}
	return ""
}

func (m *GetChatInfoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 添加群成员
type AddChatMemberReq struct {
	ChatId    int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	InvitorId int32         `protobuf:"varint,2,opt,name=invitor_id,json=invitorId,proto3" json:"invitor_id,omitempty"`
	MemberId  []int32       `protobuf:"varint,3,rep,packed,name=member_id,json=memberId" json:"member_id,omitempty"`
	Date      int32         `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *AddChatMemberReq) Reset()                    { *m = AddChatMemberReq{} }
func (m *AddChatMemberReq) String() string            { return proto.CompactTextString(m) }
func (*AddChatMemberReq) ProtoMessage()               {}
func (*AddChatMemberReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{6} }

func (m *AddChatMemberReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *AddChatMemberReq) GetInvitorId() int32 {
	if m != nil {
		return m.InvitorId
	}
	return 0
}

func (m *AddChatMemberReq) GetMemberId() []int32 {
	if m != nil {
		return m.MemberId
	}
	return nil
}

func (m *AddChatMemberReq) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *AddChatMemberReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type AddChatMemberResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *AddChatMemberResp) Reset()                    { *m = AddChatMemberResp{} }
func (m *AddChatMemberResp) String() string            { return proto.CompactTextString(m) }
func (*AddChatMemberResp) ProtoMessage()               {}
func (*AddChatMemberResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{7} }

func (m *AddChatMemberResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 删除群成员
type DelChatMemberReq struct {
	ChatId     int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OperatorId int32         `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	MemberId   []int32       `protobuf:"varint,3,rep,packed,name=member_id,json=memberId" json:"member_id,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *DelChatMemberReq) Reset()                    { *m = DelChatMemberReq{} }
func (m *DelChatMemberReq) String() string            { return proto.CompactTextString(m) }
func (*DelChatMemberReq) ProtoMessage()               {}
func (*DelChatMemberReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{8} }

func (m *DelChatMemberReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *DelChatMemberReq) GetOperatorId() int32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *DelChatMemberReq) GetMemberId() []int32 {
	if m != nil {
		return m.MemberId
	}
	return nil
}

func (m *DelChatMemberReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type DelChatMemberResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *DelChatMemberResp) Reset()                    { *m = DelChatMemberResp{} }
func (m *DelChatMemberResp) String() string            { return proto.CompactTextString(m) }
func (*DelChatMemberResp) ProtoMessage()               {}
func (*DelChatMemberResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{9} }

func (m *DelChatMemberResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 编辑群头像
type EditChatPhotoReq struct {
	ChatId    int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Photo     []byte        `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Fullphoto []byte        `protobuf:"bytes,4,opt,name=fullphoto,proto3" json:"fullphoto,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *EditChatPhotoReq) Reset()                    { *m = EditChatPhotoReq{} }
func (m *EditChatPhotoReq) String() string            { return proto.CompactTextString(m) }
func (*EditChatPhotoReq) ProtoMessage()               {}
func (*EditChatPhotoReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{10} }

func (m *EditChatPhotoReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *EditChatPhotoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *EditChatPhotoReq) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *EditChatPhotoReq) GetFullphoto() []byte {
	if m != nil {
		return m.Fullphoto
	}
	return nil
}

func (m *EditChatPhotoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type EditChatPhotoResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *EditChatPhotoResp) Reset()                    { *m = EditChatPhotoResp{} }
func (m *EditChatPhotoResp) String() string            { return proto.CompactTextString(m) }
func (*EditChatPhotoResp) ProtoMessage()               {}
func (*EditChatPhotoResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{11} }

func (m *EditChatPhotoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 编辑群title
type EditChatTittleReq struct {
	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Tittle string        `protobuf:"bytes,3,opt,name=tittle,proto3" json:"tittle,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *EditChatTittleReq) Reset()                    { *m = EditChatTittleReq{} }
func (m *EditChatTittleReq) String() string            { return proto.CompactTextString(m) }
func (*EditChatTittleReq) ProtoMessage()               {}
func (*EditChatTittleReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{12} }

func (m *EditChatTittleReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *EditChatTittleReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *EditChatTittleReq) GetTittle() string {
	if m != nil {
		return m.Tittle
	}
	return ""
}

func (m *EditChatTittleReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type EditChatTittleResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *EditChatTittleResp) Reset()                    { *m = EditChatTittleResp{} }
func (m *EditChatTittleResp) String() string            { return proto.CompactTextString(m) }
func (*EditChatTittleResp) ProtoMessage()               {}
func (*EditChatTittleResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{13} }

func (m *EditChatTittleResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 设置管理员
type AddChatAdminReq struct {
	OperatorId int32         `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	MemberId   int32         `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *AddChatAdminReq) Reset()                    { *m = AddChatAdminReq{} }
func (m *AddChatAdminReq) String() string            { return proto.CompactTextString(m) }
func (*AddChatAdminReq) ProtoMessage()               {}
func (*AddChatAdminReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{14} }

func (m *AddChatAdminReq) GetOperatorId() int32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *AddChatAdminReq) GetMemberId() int32 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *AddChatAdminReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *AddChatAdminReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type AddChatAdminResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *AddChatAdminResp) Reset()                    { *m = AddChatAdminResp{} }
func (m *AddChatAdminResp) String() string            { return proto.CompactTextString(m) }
func (*AddChatAdminResp) ProtoMessage()               {}
func (*AddChatAdminResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{15} }

func (m *AddChatAdminResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 取消管理员
type DelChatAdminReq struct {
	OperatorId int32         `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	MemberId   int32         `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *DelChatAdminReq) Reset()                    { *m = DelChatAdminReq{} }
func (m *DelChatAdminReq) String() string            { return proto.CompactTextString(m) }
func (*DelChatAdminReq) ProtoMessage()               {}
func (*DelChatAdminReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{16} }

func (m *DelChatAdminReq) GetOperatorId() int32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *DelChatAdminReq) GetMemberId() int32 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *DelChatAdminReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *DelChatAdminReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type DelChatAdminResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *DelChatAdminResp) Reset()                    { *m = DelChatAdminResp{} }
func (m *DelChatAdminResp) String() string            { return proto.CompactTextString(m) }
func (*DelChatAdminResp) ProtoMessage()               {}
func (*DelChatAdminResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{17} }

func (m *DelChatAdminResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获取群成员角色
type GetChatUsersRoleReq struct {
	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChatUsersRoleReq) Reset()                    { *m = GetChatUsersRoleReq{} }
func (m *GetChatUsersRoleReq) String() string            { return proto.CompactTextString(m) }
func (*GetChatUsersRoleReq) ProtoMessage()               {}
func (*GetChatUsersRoleReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{18} }

func (m *GetChatUsersRoleReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *GetChatUsersRoleReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type ChatUserRole struct {
	InvitorId   int32 `protobuf:"varint,1,opt,name=invitor_id,json=invitorId,proto3" json:"invitor_id,omitempty"`
	UserId      int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InvitorDate int32 `protobuf:"varint,3,opt,name=invitor_date,json=invitorDate,proto3" json:"invitor_date,omitempty"`
	Role        int32 `protobuf:"varint,4,opt,name=role,proto3" json:"role,omitempty"`
}

func (m *ChatUserRole) Reset()                    { *m = ChatUserRole{} }
func (m *ChatUserRole) String() string            { return proto.CompactTextString(m) }
func (*ChatUserRole) ProtoMessage()               {}
func (*ChatUserRole) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{19} }

func (m *ChatUserRole) GetInvitorId() int32 {
	if m != nil {
		return m.InvitorId
	}
	return 0
}

func (m *ChatUserRole) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatUserRole) GetInvitorDate() int32 {
	if m != nil {
		return m.InvitorDate
	}
	return 0
}

func (m *ChatUserRole) GetRole() int32 {
	if m != nil {
		return m.Role
	}
	return 0
}

type GetChatUsersRoleResp struct {
	UsersRole  []*ChatUserRole `protobuf:"bytes,1,rep,name=users_role,json=usersRole" json:"users_role,omitempty"`
	Version    int32           `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Resultcode ChatResultCode  `protobuf:"varint,3,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChatUsersRoleResp) Reset()         { *m = GetChatUsersRoleResp{} }
func (m *GetChatUsersRoleResp) String() string { return proto.CompactTextString(m) }
func (*GetChatUsersRoleResp) ProtoMessage()    {}
func (*GetChatUsersRoleResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChatservice, []int{20}
}

func (m *GetChatUsersRoleResp) GetUsersRole() []*ChatUserRole {
	if m != nil {
		return m.UsersRole
	}
	return nil
}

func (m *GetChatUsersRoleResp) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetChatUsersRoleResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获取用户信息、群、超级群信息的请求
type GetUsersChatsReq struct {
	Userid        int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Users         []int32       `protobuf:"varint,2,rep,packed,name=users" json:"users,omitempty"`
	Chatid        []int32       `protobuf:"varint,3,rep,packed,name=chatid" json:"chatid,omitempty"`
	Channelid     []int32       `protobuf:"varint,4,rep,packed,name=channelid" json:"channelid,omitempty"`
	ProtocolLayer int32         `protobuf:"varint,5,opt,name=protocol_layer,json=protocolLayer,proto3" json:"protocol_layer,omitempty"`
	Dlog          *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetUsersChatsReq) Reset()                    { *m = GetUsersChatsReq{} }
func (m *GetUsersChatsReq) String() string            { return proto.CompactTextString(m) }
func (*GetUsersChatsReq) ProtoMessage()               {}
func (*GetUsersChatsReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{21} }

func (m *GetUsersChatsReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *GetUsersChatsReq) GetUsers() []int32 {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetUsersChatsReq) GetChatid() []int32 {
	if m != nil {
		return m.Chatid
	}
	return nil
}

func (m *GetUsersChatsReq) GetChannelid() []int32 {
	if m != nil {
		return m.Channelid
	}
	return nil
}

func (m *GetUsersChatsReq) GetProtocolLayer() int32 {
	if m != nil {
		return m.ProtocolLayer
	}
	return 0
}

func (m *GetUsersChatsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 获取用户信息、群、超级群信息的返回
type GetUsersChatsResult struct {
	// repeated ChannelInfoBase channels = 1;
	// repeated GetChatInfoResp chats = 3;
	Channels   [][]byte       `protobuf:"bytes,1,rep,name=channels" json:"channels,omitempty"`
	Users      *UserInfoArray `protobuf:"bytes,2,opt,name=users" json:"users,omitempty"`
	Chats      [][]byte       `protobuf:"bytes,3,rep,name=chats" json:"chats,omitempty"`
	NoChats    []int32        `protobuf:"varint,4,rep,packed,name=no_chats,json=noChats" json:"no_chats,omitempty"`
	NoChans    []int32        `protobuf:"varint,5,rep,packed,name=no_chans,json=noChans" json:"no_chans,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,6,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetUsersChatsResult) Reset()                    { *m = GetUsersChatsResult{} }
func (m *GetUsersChatsResult) String() string            { return proto.CompactTextString(m) }
func (*GetUsersChatsResult) ProtoMessage()               {}
func (*GetUsersChatsResult) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{22} }

func (m *GetUsersChatsResult) GetChannels() [][]byte {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *GetUsersChatsResult) GetUsers() *UserInfoArray {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetUsersChatsResult) GetChats() [][]byte {
	if m != nil {
		return m.Chats
	}
	return nil
}

func (m *GetUsersChatsResult) GetNoChats() []int32 {
	if m != nil {
		return m.NoChats
	}
	return nil
}

func (m *GetUsersChatsResult) GetNoChans() []int32 {
	if m != nil {
		return m.NoChans
	}
	return nil
}

func (m *GetUsersChatsResult) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获用户的共同群
type GetTwoUserChatsReq struct {
	UseridOne int32         `protobuf:"varint,1,opt,name=userid_one,json=useridOne,proto3" json:"userid_one,omitempty"`
	UseridTwo int32         `protobuf:"varint,2,opt,name=userid_two,json=useridTwo,proto3" json:"userid_two,omitempty"`
	MaxId     int32         `protobuf:"varint,3,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Limit     int32         `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetTwoUserChatsReq) Reset()                    { *m = GetTwoUserChatsReq{} }
func (m *GetTwoUserChatsReq) String() string            { return proto.CompactTextString(m) }
func (*GetTwoUserChatsReq) ProtoMessage()               {}
func (*GetTwoUserChatsReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{23} }

func (m *GetTwoUserChatsReq) GetUseridOne() int32 {
	if m != nil {
		return m.UseridOne
	}
	return 0
}

func (m *GetTwoUserChatsReq) GetUseridTwo() int32 {
	if m != nil {
		return m.UseridTwo
	}
	return 0
}

func (m *GetTwoUserChatsReq) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *GetTwoUserChatsReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetTwoUserChatsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 获取用户信息、群、超级群信息的返回
type GetTwoUserChatsResp struct {
	Count        int32          `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	ChatIds      []int32        `protobuf:"varint,2,rep,packed,name=chat_ids,json=chatIds" json:"chat_ids,omitempty"`
	SuperChatIds []int32        `protobuf:"varint,3,rep,packed,name=super_chat_ids,json=superChatIds" json:"super_chat_ids,omitempty"`
	Resultcode   ChatResultCode `protobuf:"varint,4,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetTwoUserChatsResp) Reset()                    { *m = GetTwoUserChatsResp{} }
func (m *GetTwoUserChatsResp) String() string            { return proto.CompactTextString(m) }
func (*GetTwoUserChatsResp) ProtoMessage()               {}
func (*GetTwoUserChatsResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{24} }

func (m *GetTwoUserChatsResp) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetTwoUserChatsResp) GetChatIds() []int32 {
	if m != nil {
		return m.ChatIds
	}
	return nil
}

func (m *GetTwoUserChatsResp) GetSuperChatIds() []int32 {
	if m != nil {
		return m.SuperChatIds
	}
	return nil
}

func (m *GetTwoUserChatsResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 升级超级群
type UpGradeChatReq struct {
	UserId        int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId        int32         `protobuf:"varint,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MigratedMaxId int32         `protobuf:"varint,3,opt,name=migrated_maxId,json=migratedMaxId,proto3" json:"migrated_maxId,omitempty"`
	Dlog          *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpGradeChatReq) Reset()                    { *m = UpGradeChatReq{} }
func (m *UpGradeChatReq) String() string            { return proto.CompactTextString(m) }
func (*UpGradeChatReq) ProtoMessage()               {}
func (*UpGradeChatReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{25} }

func (m *UpGradeChatReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpGradeChatReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *UpGradeChatReq) GetMigratedMaxId() int32 {
	if m != nil {
		return m.MigratedMaxId
	}
	return 0
}

func (m *UpGradeChatReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 升级超级群返回
type UpGradeChatResp struct {
	SuperchatId int32          `protobuf:"varint,1,opt,name=superchat_id,json=superchatId,proto3" json:"superchat_id,omitempty"`
	Title       string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Resultcode  ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *UpGradeChatResp) Reset()                    { *m = UpGradeChatResp{} }
func (m *UpGradeChatResp) String() string            { return proto.CompactTextString(m) }
func (*UpGradeChatResp) ProtoMessage()               {}
func (*UpGradeChatResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{26} }

func (m *UpGradeChatResp) GetSuperchatId() int32 {
	if m != nil {
		return m.SuperchatId
	}
	return 0
}

func (m *UpGradeChatResp) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpGradeChatResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 生成群群链接
type CreateChatLinkReq struct {
	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CreateChatLinkReq) Reset()                    { *m = CreateChatLinkReq{} }
func (m *CreateChatLinkReq) String() string            { return proto.CompactTextString(m) }
func (*CreateChatLinkReq) ProtoMessage()               {}
func (*CreateChatLinkReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{27} }

func (m *CreateChatLinkReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *CreateChatLinkReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateChatLinkReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 生成群链接
type CreateChatLinkResp struct {
	Link       string         `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CreateChatLinkResp) Reset()                    { *m = CreateChatLinkResp{} }
func (m *CreateChatLinkResp) String() string            { return proto.CompactTextString(m) }
func (*CreateChatLinkResp) ProtoMessage()               {}
func (*CreateChatLinkResp) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{28} }

func (m *CreateChatLinkResp) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CreateChatLinkResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 切换邀请规则
type SwitchInviteRuleReq struct {
	ChatId      int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AdminEnable bool          `protobuf:"varint,3,opt,name=admin_enable,json=adminEnable,proto3" json:"admin_enable,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *SwitchInviteRuleReq) Reset()                    { *m = SwitchInviteRuleReq{} }
func (m *SwitchInviteRuleReq) String() string            { return proto.CompactTextString(m) }
func (*SwitchInviteRuleReq) ProtoMessage()               {}
func (*SwitchInviteRuleReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{29} }

func (m *SwitchInviteRuleReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SwitchInviteRuleReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SwitchInviteRuleReq) GetAdminEnable() bool {
	if m != nil {
		return m.AdminEnable
	}
	return false
}

func (m *SwitchInviteRuleReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 生成群链接
type SwitchInviteRuleResp struct {
	IsModify   bool           `protobuf:"varint,1,opt,name=is_modify,json=isModify,proto3" json:"is_modify,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *SwitchInviteRuleResp) Reset()         { *m = SwitchInviteRuleResp{} }
func (m *SwitchInviteRuleResp) String() string { return proto.CompactTextString(m) }
func (*SwitchInviteRuleResp) ProtoMessage()    {}
func (*SwitchInviteRuleResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChatservice, []int{30}
}

func (m *SwitchInviteRuleResp) GetIsModify() bool {
	if m != nil {
		return m.IsModify
	}
	return false
}

func (m *SwitchInviteRuleResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 检查群是否是加密
type CheckChatIsEncryReq struct {
	ChatId int32         `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CheckChatIsEncryReq) Reset()                    { *m = CheckChatIsEncryReq{} }
func (m *CheckChatIsEncryReq) String() string            { return proto.CompactTextString(m) }
func (*CheckChatIsEncryReq) ProtoMessage()               {}
func (*CheckChatIsEncryReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{31} }

func (m *CheckChatIsEncryReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *CheckChatIsEncryReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 检查群是否是加密
type CheckChatIsEncryResp struct {
	Encry      bool           `protobuf:"varint,1,opt,name=encry,proto3" json:"encry,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CheckChatIsEncryResp) Reset()         { *m = CheckChatIsEncryResp{} }
func (m *CheckChatIsEncryResp) String() string { return proto.CompactTextString(m) }
func (*CheckChatIsEncryResp) ProtoMessage()    {}
func (*CheckChatIsEncryResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChatservice, []int{32}
}

func (m *CheckChatIsEncryResp) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *CheckChatIsEncryResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

func init() {
	proto.RegisterType((*CreateChatReq)(nil), "infoserver.CreateChatReq")
	proto.RegisterType((*CreateChatResp)(nil), "infoserver.CreateChatResp")
	proto.RegisterType((*GetChatUsersIdReq)(nil), "infoserver.GetChatUsersIdReq")
	proto.RegisterType((*GetChatUsersIdResp)(nil), "infoserver.GetChatUsersIdResp")
	proto.RegisterType((*GetChatInfoReq)(nil), "infoserver.GetChatInfoReq")
	proto.RegisterType((*GetChatInfoResp)(nil), "infoserver.GetChatInfoResp")
	proto.RegisterType((*AddChatMemberReq)(nil), "infoserver.AddChatMemberReq")
	proto.RegisterType((*AddChatMemberResp)(nil), "infoserver.AddChatMemberResp")
	proto.RegisterType((*DelChatMemberReq)(nil), "infoserver.DelChatMemberReq")
	proto.RegisterType((*DelChatMemberResp)(nil), "infoserver.DelChatMemberResp")
	proto.RegisterType((*EditChatPhotoReq)(nil), "infoserver.EditChatPhotoReq")
	proto.RegisterType((*EditChatPhotoResp)(nil), "infoserver.EditChatPhotoResp")
	proto.RegisterType((*EditChatTittleReq)(nil), "infoserver.EditChatTittleReq")
	proto.RegisterType((*EditChatTittleResp)(nil), "infoserver.EditChatTittleResp")
	proto.RegisterType((*AddChatAdminReq)(nil), "infoserver.AddChatAdminReq")
	proto.RegisterType((*AddChatAdminResp)(nil), "infoserver.AddChatAdminResp")
	proto.RegisterType((*DelChatAdminReq)(nil), "infoserver.DelChatAdminReq")
	proto.RegisterType((*DelChatAdminResp)(nil), "infoserver.DelChatAdminResp")
	proto.RegisterType((*GetChatUsersRoleReq)(nil), "infoserver.GetChatUsersRoleReq")
	proto.RegisterType((*ChatUserRole)(nil), "infoserver.ChatUserRole")
	proto.RegisterType((*GetChatUsersRoleResp)(nil), "infoserver.GetChatUsersRoleResp")
	proto.RegisterType((*GetUsersChatsReq)(nil), "infoserver.GetUsersChatsReq")
	proto.RegisterType((*GetUsersChatsResult)(nil), "infoserver.GetUsersChatsResult")
	proto.RegisterType((*GetTwoUserChatsReq)(nil), "infoserver.GetTwoUserChatsReq")
	proto.RegisterType((*GetTwoUserChatsResp)(nil), "infoserver.GetTwoUserChatsResp")
	proto.RegisterType((*UpGradeChatReq)(nil), "infoserver.UpGradeChatReq")
	proto.RegisterType((*UpGradeChatResp)(nil), "infoserver.UpGradeChatResp")
	proto.RegisterType((*CreateChatLinkReq)(nil), "infoserver.CreateChatLinkReq")
	proto.RegisterType((*CreateChatLinkResp)(nil), "infoserver.CreateChatLinkResp")
	proto.RegisterType((*SwitchInviteRuleReq)(nil), "infoserver.SwitchInviteRuleReq")
	proto.RegisterType((*SwitchInviteRuleResp)(nil), "infoserver.SwitchInviteRuleResp")
	proto.RegisterType((*CheckChatIsEncryReq)(nil), "infoserver.CheckChatIsEncryReq")
	proto.RegisterType((*CheckChatIsEncryResp)(nil), "infoserver.CheckChatIsEncryResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatServerService service

type ChatServerServiceClient interface {
	// 创建群
	CreateNewChat(ctx context.Context, in *CreateChatReq, opts ...grpc.CallOption) (*CreateChatResp, error)
	// 通过群Id获取群成员
	GetChatUsersIdById(ctx context.Context, in *GetChatUsersIdReq, opts ...grpc.CallOption) (*GetChatUsersIdResp, error)
	// 通过群Id 用户Id 获取群基本信息
	GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoResp, error)
	// 添加群成员
	AddChatUser(ctx context.Context, in *AddChatMemberReq, opts ...grpc.CallOption) (*AddChatMemberResp, error)
	// 删除群成员
	DelChatUser(ctx context.Context, in *DelChatMemberReq, opts ...grpc.CallOption) (*DelChatMemberResp, error)
	// 编辑群头像
	EditChatPhoto(ctx context.Context, in *EditChatPhotoReq, opts ...grpc.CallOption) (*EditChatPhotoResp, error)
	// 编辑群title
	EditChatTittle(ctx context.Context, in *EditChatTittleReq, opts ...grpc.CallOption) (*EditChatTittleResp, error)
	// 设置管理员
	AddChatAdmin(ctx context.Context, in *AddChatAdminReq, opts ...grpc.CallOption) (*AddChatAdminResp, error)
	// 取消管理员
	DelChatAdmin(ctx context.Context, in *DelChatAdminReq, opts ...grpc.CallOption) (*DelChatAdminResp, error)
	// 获取群成员角色
	GetChatUserRole(ctx context.Context, in *GetChatUsersRoleReq, opts ...grpc.CallOption) (*GetChatUsersRoleResp, error)
	// 获取共同群
	GetTwoUserChats(ctx context.Context, in *GetTwoUserChatsReq, opts ...grpc.CallOption) (*GetTwoUserChatsResp, error)
	// 升级超级群
	UpGradeChat(ctx context.Context, in *UpGradeChatReq, opts ...grpc.CallOption) (*UpGradeChatResp, error)
	// 生成群邀请链接
	CreateChatLink(ctx context.Context, in *CreateChatLinkReq, opts ...grpc.CallOption) (*CreateChatLinkResp, error)
	// 切换邀请规则  是否是管理员可以邀请  还是所有
	SwitchInviteRule(ctx context.Context, in *SwitchInviteRuleReq, opts ...grpc.CallOption) (*SwitchInviteRuleResp, error)
	// 检查是否是加密群
	CheckChatIsEncry(ctx context.Context, in *CheckChatIsEncryReq, opts ...grpc.CallOption) (*CheckChatIsEncryResp, error)
	// *******************为消息服务********************
	GetUsersChats(ctx context.Context, in *GetUsersChatsReq, opts ...grpc.CallOption) (*GetUsersChatsResult, error)
}

type chatServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServerServiceClient(cc *grpc.ClientConn) ChatServerServiceClient {
	return &chatServerServiceClient{cc}
}

func (c *chatServerServiceClient) CreateNewChat(ctx context.Context, in *CreateChatReq, opts ...grpc.CallOption) (*CreateChatResp, error) {
	out := new(CreateChatResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/CreateNewChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetChatUsersIdById(ctx context.Context, in *GetChatUsersIdReq, opts ...grpc.CallOption) (*GetChatUsersIdResp, error) {
	out := new(GetChatUsersIdResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/GetChatUsersIdById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoResp, error) {
	out := new(GetChatInfoResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/GetChatInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) AddChatUser(ctx context.Context, in *AddChatMemberReq, opts ...grpc.CallOption) (*AddChatMemberResp, error) {
	out := new(AddChatMemberResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/AddChatUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) DelChatUser(ctx context.Context, in *DelChatMemberReq, opts ...grpc.CallOption) (*DelChatMemberResp, error) {
	out := new(DelChatMemberResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/DelChatUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) EditChatPhoto(ctx context.Context, in *EditChatPhotoReq, opts ...grpc.CallOption) (*EditChatPhotoResp, error) {
	out := new(EditChatPhotoResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/EditChatPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) EditChatTittle(ctx context.Context, in *EditChatTittleReq, opts ...grpc.CallOption) (*EditChatTittleResp, error) {
	out := new(EditChatTittleResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/EditChatTittle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) AddChatAdmin(ctx context.Context, in *AddChatAdminReq, opts ...grpc.CallOption) (*AddChatAdminResp, error) {
	out := new(AddChatAdminResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/AddChatAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) DelChatAdmin(ctx context.Context, in *DelChatAdminReq, opts ...grpc.CallOption) (*DelChatAdminResp, error) {
	out := new(DelChatAdminResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/DelChatAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetChatUserRole(ctx context.Context, in *GetChatUsersRoleReq, opts ...grpc.CallOption) (*GetChatUsersRoleResp, error) {
	out := new(GetChatUsersRoleResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/GetChatUserRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetTwoUserChats(ctx context.Context, in *GetTwoUserChatsReq, opts ...grpc.CallOption) (*GetTwoUserChatsResp, error) {
	out := new(GetTwoUserChatsResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/GetTwoUserChats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) UpGradeChat(ctx context.Context, in *UpGradeChatReq, opts ...grpc.CallOption) (*UpGradeChatResp, error) {
	out := new(UpGradeChatResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/UpGradeChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) CreateChatLink(ctx context.Context, in *CreateChatLinkReq, opts ...grpc.CallOption) (*CreateChatLinkResp, error) {
	out := new(CreateChatLinkResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/CreateChatLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) SwitchInviteRule(ctx context.Context, in *SwitchInviteRuleReq, opts ...grpc.CallOption) (*SwitchInviteRuleResp, error) {
	out := new(SwitchInviteRuleResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/SwitchInviteRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) CheckChatIsEncry(ctx context.Context, in *CheckChatIsEncryReq, opts ...grpc.CallOption) (*CheckChatIsEncryResp, error) {
	out := new(CheckChatIsEncryResp)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/CheckChatIsEncry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetUsersChats(ctx context.Context, in *GetUsersChatsReq, opts ...grpc.CallOption) (*GetUsersChatsResult, error) {
	out := new(GetUsersChatsResult)
	err := grpc.Invoke(ctx, "/infoserver.ChatServerService/GetUsersChats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatServerService service

type ChatServerServiceServer interface {
	// 创建群
	CreateNewChat(context.Context, *CreateChatReq) (*CreateChatResp, error)
	// 通过群Id获取群成员
	GetChatUsersIdById(context.Context, *GetChatUsersIdReq) (*GetChatUsersIdResp, error)
	// 通过群Id 用户Id 获取群基本信息
	GetChatInfo(context.Context, *GetChatInfoReq) (*GetChatInfoResp, error)
	// 添加群成员
	AddChatUser(context.Context, *AddChatMemberReq) (*AddChatMemberResp, error)
	// 删除群成员
	DelChatUser(context.Context, *DelChatMemberReq) (*DelChatMemberResp, error)
	// 编辑群头像
	EditChatPhoto(context.Context, *EditChatPhotoReq) (*EditChatPhotoResp, error)
	// 编辑群title
	EditChatTittle(context.Context, *EditChatTittleReq) (*EditChatTittleResp, error)
	// 设置管理员
	AddChatAdmin(context.Context, *AddChatAdminReq) (*AddChatAdminResp, error)
	// 取消管理员
	DelChatAdmin(context.Context, *DelChatAdminReq) (*DelChatAdminResp, error)
	// 获取群成员角色
	GetChatUserRole(context.Context, *GetChatUsersRoleReq) (*GetChatUsersRoleResp, error)
	// 获取共同群
	GetTwoUserChats(context.Context, *GetTwoUserChatsReq) (*GetTwoUserChatsResp, error)
	// 升级超级群
	UpGradeChat(context.Context, *UpGradeChatReq) (*UpGradeChatResp, error)
	// 生成群邀请链接
	CreateChatLink(context.Context, *CreateChatLinkReq) (*CreateChatLinkResp, error)
	// 切换邀请规则  是否是管理员可以邀请  还是所有
	SwitchInviteRule(context.Context, *SwitchInviteRuleReq) (*SwitchInviteRuleResp, error)
	// 检查是否是加密群
	CheckChatIsEncry(context.Context, *CheckChatIsEncryReq) (*CheckChatIsEncryResp, error)
	// *******************为消息服务********************
	GetUsersChats(context.Context, *GetUsersChatsReq) (*GetUsersChatsResult, error)
}

func RegisterChatServerServiceServer(s *grpc.Server, srv ChatServerServiceServer) {
	s.RegisterService(&_ChatServerService_serviceDesc, srv)
}

func _ChatServerService_CreateNewChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).CreateNewChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/CreateNewChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).CreateNewChat(ctx, req.(*CreateChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetChatUsersIdById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatUsersIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetChatUsersIdById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/GetChatUsersIdById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetChatUsersIdById(ctx, req.(*GetChatUsersIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetChatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetChatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/GetChatInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetChatInfo(ctx, req.(*GetChatInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_AddChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChatMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).AddChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/AddChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).AddChatUser(ctx, req.(*AddChatMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_DelChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChatMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).DelChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/DelChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).DelChatUser(ctx, req.(*DelChatMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_EditChatPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChatPhotoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).EditChatPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/EditChatPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).EditChatPhoto(ctx, req.(*EditChatPhotoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_EditChatTittle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChatTittleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).EditChatTittle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/EditChatTittle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).EditChatTittle(ctx, req.(*EditChatTittleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_AddChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChatAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).AddChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/AddChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).AddChatAdmin(ctx, req.(*AddChatAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_DelChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChatAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).DelChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/DelChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).DelChatAdmin(ctx, req.(*DelChatAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetChatUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatUsersRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetChatUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/GetChatUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetChatUserRole(ctx, req.(*GetChatUsersRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetTwoUserChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwoUserChatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetTwoUserChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/GetTwoUserChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetTwoUserChats(ctx, req.(*GetTwoUserChatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_UpGradeChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpGradeChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).UpGradeChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/UpGradeChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).UpGradeChat(ctx, req.(*UpGradeChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_CreateChatLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).CreateChatLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/CreateChatLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).CreateChatLink(ctx, req.(*CreateChatLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_SwitchInviteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchInviteRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).SwitchInviteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/SwitchInviteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).SwitchInviteRule(ctx, req.(*SwitchInviteRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_CheckChatIsEncry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChatIsEncryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).CheckChatIsEncry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/CheckChatIsEncry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).CheckChatIsEncry(ctx, req.(*CheckChatIsEncryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetUsersChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersChatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetUsersChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/GetUsersChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetUsersChats(ctx, req.(*GetUsersChatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infoserver.ChatServerService",
	HandlerType: (*ChatServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewChat",
			Handler:    _ChatServerService_CreateNewChat_Handler,
		},
		{
			MethodName: "GetChatUsersIdById",
			Handler:    _ChatServerService_GetChatUsersIdById_Handler,
		},
		{
			MethodName: "GetChatInfo",
			Handler:    _ChatServerService_GetChatInfo_Handler,
		},
		{
			MethodName: "AddChatUser",
			Handler:    _ChatServerService_AddChatUser_Handler,
		},
		{
			MethodName: "DelChatUser",
			Handler:    _ChatServerService_DelChatUser_Handler,
		},
		{
			MethodName: "EditChatPhoto",
			Handler:    _ChatServerService_EditChatPhoto_Handler,
		},
		{
			MethodName: "EditChatTittle",
			Handler:    _ChatServerService_EditChatTittle_Handler,
		},
		{
			MethodName: "AddChatAdmin",
			Handler:    _ChatServerService_AddChatAdmin_Handler,
		},
		{
			MethodName: "DelChatAdmin",
			Handler:    _ChatServerService_DelChatAdmin_Handler,
		},
		{
			MethodName: "GetChatUserRole",
			Handler:    _ChatServerService_GetChatUserRole_Handler,
		},
		{
			MethodName: "GetTwoUserChats",
			Handler:    _ChatServerService_GetTwoUserChats_Handler,
		},
		{
			MethodName: "UpGradeChat",
			Handler:    _ChatServerService_UpGradeChat_Handler,
		},
		{
			MethodName: "CreateChatLink",
			Handler:    _ChatServerService_CreateChatLink_Handler,
		},
		{
			MethodName: "SwitchInviteRule",
			Handler:    _ChatServerService_SwitchInviteRule_Handler,
		},
		{
			MethodName: "CheckChatIsEncry",
			Handler:    _ChatServerService_CheckChatIsEncry_Handler,
		},
		{
			MethodName: "GetUsersChats",
			Handler:    _ChatServerService_GetUsersChats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/chatservice.proto",
}

func (m *CreateChatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.CreatorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.CreatorId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n1, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CreateChatResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChatResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChatUsersIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatUsersIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n2, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GetChatUsersIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatUsersIdResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA4 := make([]byte, len(m.UserId)*10)
		var j3 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChatInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.RobotGet {
		dAtA[i] = 0x18
		i++
		if m.RobotGet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n5, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *GetChatInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.AdminsEnabled {
		dAtA[i] = 0x10
		i++
		if m.AdminsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Deactivated {
		dAtA[i] = 0x18
		i++
		if m.Deactivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ExportedInvite) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.ExportedInvite)))
		i += copy(dAtA[i:], m.ExportedInvite)
	}
	if m.Encry {
		dAtA[i] = 0x28
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Creator != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Creator))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.FullPhoto) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.FullPhoto)))
		i += copy(dAtA[i:], m.FullPhoto)
	}
	if m.Version != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Version))
	}
	if m.ParticipantsCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ParticipantsCount))
	}
	if m.Date != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Date))
	}
	if len(m.MigrateTo) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.MigrateTo)))
		i += copy(dAtA[i:], m.MigrateTo)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *AddChatMemberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddChatMemberReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.InvitorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.InvitorId))
	}
	if len(m.MemberId) > 0 {
		dAtA7 := make([]byte, len(m.MemberId)*10)
		var j6 int
		for _, num1 := range m.MemberId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Date))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n8, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *AddChatMemberResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddChatMemberResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *DelChatMemberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChatMemberReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.OperatorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.OperatorId))
	}
	if len(m.MemberId) > 0 {
		dAtA10 := make([]byte, len(m.MemberId)*10)
		var j9 int
		for _, num1 := range m.MemberId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n11, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *DelChatMemberResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChatMemberResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *EditChatPhotoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditChatPhotoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.Fullphoto) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Fullphoto)))
		i += copy(dAtA[i:], m.Fullphoto)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n12, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *EditChatPhotoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditChatPhotoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *EditChatTittleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditChatTittleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.Tittle) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Tittle)))
		i += copy(dAtA[i:], m.Tittle)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n13, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *EditChatTittleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditChatTittleResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *AddChatAdminReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddChatAdminReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OperatorId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.OperatorId))
	}
	if m.MemberId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.MemberId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n14, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *AddChatAdminResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddChatAdminResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *DelChatAdminReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChatAdminReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OperatorId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.OperatorId))
	}
	if m.MemberId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.MemberId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n15, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *DelChatAdminResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChatAdminResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChatUsersRoleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatUsersRoleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n16, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *ChatUserRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatUserRole) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvitorId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.InvitorId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.InvitorDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.InvitorDate))
	}
	if m.Role != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Role))
	}
	return i, nil
}

func (m *GetChatUsersRoleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChatUsersRoleResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UsersRole) > 0 {
		for _, msg := range m.UsersRole {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChatservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Version))
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetUsersChatsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersChatsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Userid))
	}
	if len(m.Users) > 0 {
		dAtA18 := make([]byte, len(m.Users)*10)
		var j17 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j17))
		i += copy(dAtA[i:], dAtA18[:j17])
	}
	if len(m.Chatid) > 0 {
		dAtA20 := make([]byte, len(m.Chatid)*10)
		var j19 int
		for _, num1 := range m.Chatid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j19))
		i += copy(dAtA[i:], dAtA20[:j19])
	}
	if len(m.Channelid) > 0 {
		dAtA22 := make([]byte, len(m.Channelid)*10)
		var j21 int
		for _, num1 := range m.Channelid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j21))
		i += copy(dAtA[i:], dAtA22[:j21])
	}
	if m.ProtocolLayer != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ProtocolLayer))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n23, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *GetUsersChatsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersChatsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, b := range m.Channels {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChatservice(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Users != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Users.Size()))
		n24, err := m.Users.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if len(m.Chats) > 0 {
		for _, b := range m.Chats {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintChatservice(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.NoChats) > 0 {
		dAtA26 := make([]byte, len(m.NoChats)*10)
		var j25 int
		for _, num1 := range m.NoChats {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j25))
		i += copy(dAtA[i:], dAtA26[:j25])
	}
	if len(m.NoChans) > 0 {
		dAtA28 := make([]byte, len(m.NoChans)*10)
		var j27 int
		for _, num1 := range m.NoChans {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j27))
		i += copy(dAtA[i:], dAtA28[:j27])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetTwoUserChatsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwoUserChatsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UseridOne != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UseridOne))
	}
	if m.UseridTwo != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UseridTwo))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.MaxId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Limit))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n29, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *GetTwoUserChatsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwoUserChatsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Count))
	}
	if len(m.ChatIds) > 0 {
		dAtA31 := make([]byte, len(m.ChatIds)*10)
		var j30 int
		for _, num1 := range m.ChatIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j30))
		i += copy(dAtA[i:], dAtA31[:j30])
	}
	if len(m.SuperChatIds) > 0 {
		dAtA33 := make([]byte, len(m.SuperChatIds)*10)
		var j32 int
		for _, num1 := range m.SuperChatIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA33[j32] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j32++
			}
			dAtA33[j32] = uint8(num)
			j32++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j32))
		i += copy(dAtA[i:], dAtA33[:j32])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *UpGradeChatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpGradeChatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.MigratedMaxId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.MigratedMaxId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n34, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *UpGradeChatResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpGradeChatResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SuperchatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.SuperchatId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *CreateChatLinkReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChatLinkReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n35, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *CreateChatLinkResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChatLinkResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Link) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *SwitchInviteRuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwitchInviteRuleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.AdminEnable {
		dAtA[i] = 0x18
		i++
		if m.AdminEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n36, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *SwitchInviteRuleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwitchInviteRuleResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsModify {
		dAtA[i] = 0x8
		i++
		if m.IsModify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *CheckChatIsEncryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChatIsEncryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n37, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}

func (m *CheckChatIsEncryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChatIsEncryResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Encry {
		dAtA[i] = 0x8
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func encodeVarintChatservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateChatReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.CreatorId != 0 {
		n += 1 + sovChatservice(uint64(m.CreatorId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *CreateChatResp) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChatUsersIdReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *GetChatUsersIdResp) Size() (n int) {
	var l int
	_ = l
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChatInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.RobotGet {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *GetChatInfoResp) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.AdminsEnabled {
		n += 2
	}
	if m.Deactivated {
		n += 2
	}
	l = len(m.ExportedInvite)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Encry {
		n += 2
	}
	if m.Creator != 0 {
		n += 1 + sovChatservice(uint64(m.Creator))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	l = len(m.FullPhoto)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovChatservice(uint64(m.Version))
	}
	if m.ParticipantsCount != 0 {
		n += 1 + sovChatservice(uint64(m.ParticipantsCount))
	}
	if m.Date != 0 {
		n += 1 + sovChatservice(uint64(m.Date))
	}
	l = len(m.MigrateTo)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *AddChatMemberReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.InvitorId != 0 {
		n += 1 + sovChatservice(uint64(m.InvitorId))
	}
	if len(m.MemberId) > 0 {
		l = 0
		for _, e := range m.MemberId {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.Date != 0 {
		n += 1 + sovChatservice(uint64(m.Date))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *AddChatMemberResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *DelChatMemberReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovChatservice(uint64(m.OperatorId))
	}
	if len(m.MemberId) > 0 {
		l = 0
		for _, e := range m.MemberId {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *DelChatMemberResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *EditChatPhotoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	l = len(m.Fullphoto)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *EditChatPhotoResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *EditChatTittleReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	l = len(m.Tittle)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *EditChatTittleResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *AddChatAdminReq) Size() (n int) {
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovChatservice(uint64(m.OperatorId))
	}
	if m.MemberId != 0 {
		n += 1 + sovChatservice(uint64(m.MemberId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *AddChatAdminResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *DelChatAdminReq) Size() (n int) {
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovChatservice(uint64(m.OperatorId))
	}
	if m.MemberId != 0 {
		n += 1 + sovChatservice(uint64(m.MemberId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *DelChatAdminResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChatUsersRoleReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *ChatUserRole) Size() (n int) {
	var l int
	_ = l
	if m.InvitorId != 0 {
		n += 1 + sovChatservice(uint64(m.InvitorId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.InvitorDate != 0 {
		n += 1 + sovChatservice(uint64(m.InvitorDate))
	}
	if m.Role != 0 {
		n += 1 + sovChatservice(uint64(m.Role))
	}
	return n
}

func (m *GetChatUsersRoleResp) Size() (n int) {
	var l int
	_ = l
	if len(m.UsersRole) > 0 {
		for _, e := range m.UsersRole {
			l = e.Size()
			n += 1 + l + sovChatservice(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 1 + sovChatservice(uint64(m.Version))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetUsersChatsReq) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovChatservice(uint64(m.Userid))
	}
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if len(m.Chatid) > 0 {
		l = 0
		for _, e := range m.Chatid {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if len(m.Channelid) > 0 {
		l = 0
		for _, e := range m.Channelid {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.ProtocolLayer != 0 {
		n += 1 + sovChatservice(uint64(m.ProtocolLayer))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *GetUsersChatsResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, b := range m.Channels {
			l = len(b)
			n += 1 + l + sovChatservice(uint64(l))
		}
	}
	if m.Users != nil {
		l = m.Users.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	if len(m.Chats) > 0 {
		for _, b := range m.Chats {
			l = len(b)
			n += 1 + l + sovChatservice(uint64(l))
		}
	}
	if len(m.NoChats) > 0 {
		l = 0
		for _, e := range m.NoChats {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if len(m.NoChans) > 0 {
		l = 0
		for _, e := range m.NoChans {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetTwoUserChatsReq) Size() (n int) {
	var l int
	_ = l
	if m.UseridOne != 0 {
		n += 1 + sovChatservice(uint64(m.UseridOne))
	}
	if m.UseridTwo != 0 {
		n += 1 + sovChatservice(uint64(m.UseridTwo))
	}
	if m.MaxId != 0 {
		n += 1 + sovChatservice(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovChatservice(uint64(m.Limit))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *GetTwoUserChatsResp) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovChatservice(uint64(m.Count))
	}
	if len(m.ChatIds) > 0 {
		l = 0
		for _, e := range m.ChatIds {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if len(m.SuperChatIds) > 0 {
		l = 0
		for _, e := range m.SuperChatIds {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *UpGradeChatReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.MigratedMaxId != 0 {
		n += 1 + sovChatservice(uint64(m.MigratedMaxId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *UpGradeChatResp) Size() (n int) {
	var l int
	_ = l
	if m.SuperchatId != 0 {
		n += 1 + sovChatservice(uint64(m.SuperchatId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *CreateChatLinkReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *CreateChatLinkResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *SwitchInviteRuleReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.AdminEnable {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *SwitchInviteRuleResp) Size() (n int) {
	var l int
	_ = l
	if m.IsModify {
		n += 2
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *CheckChatIsEncryReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *CheckChatIsEncryResp) Size() (n int) {
	var l int
	_ = l
	if m.Encry {
		n += 2
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func sovChatservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChatservice(x uint64) (n int) {
	return sovChatservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateChatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorId", wireType)
			}
			m.CreatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChatResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChatResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChatResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatUsersIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatUsersIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatUsersIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatUsersIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatUsersIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatUsersIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotGet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RobotGet = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminsEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deactivated = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInvite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInvite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullPhoto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullPhoto = append(m.FullPhoto[:0], dAtA[iNdEx:postIndex]...)
			if m.FullPhoto == nil {
				m.FullPhoto = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrateTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MigrateTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddChatMemberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddChatMemberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddChatMemberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitorId", wireType)
			}
			m.InvitorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvitorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemberId = append(m.MemberId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MemberId = append(m.MemberId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddChatMemberResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddChatMemberResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddChatMemberResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChatMemberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChatMemberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChatMemberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemberId = append(m.MemberId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MemberId = append(m.MemberId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChatMemberResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChatMemberResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChatMemberResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditChatPhotoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditChatPhotoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditChatPhotoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fullphoto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fullphoto = append(m.Fullphoto[:0], dAtA[iNdEx:postIndex]...)
			if m.Fullphoto == nil {
				m.Fullphoto = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditChatPhotoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditChatPhotoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditChatPhotoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditChatTittleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditChatTittleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditChatTittleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tittle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tittle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditChatTittleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditChatTittleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditChatTittleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddChatAdminReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddChatAdminReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddChatAdminReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			m.MemberId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddChatAdminResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddChatAdminResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddChatAdminResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChatAdminReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChatAdminReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChatAdminReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			m.MemberId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChatAdminResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChatAdminResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChatAdminResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatUsersRoleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatUsersRoleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatUsersRoleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatUserRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatUserRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatUserRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitorId", wireType)
			}
			m.InvitorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvitorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitorDate", wireType)
			}
			m.InvitorDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvitorDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChatUsersRoleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChatUsersRoleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChatUsersRoleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsersRole = append(m.UsersRole, &ChatUserRole{})
			if err := m.UsersRole[len(m.UsersRole)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersChatsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersChatsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersChatsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chatid = append(m.Chatid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chatid = append(m.Chatid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatid", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channelid = append(m.Channelid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channelid = append(m.Channelid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolLayer", wireType)
			}
			m.ProtocolLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolLayer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersChatsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersChatsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersChatsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, make([]byte, postIndex-iNdEx))
			copy(m.Channels[len(m.Channels)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Users == nil {
				m.Users = &UserInfoArray{}
			}
			if err := m.Users.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chats", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chats = append(m.Chats, make([]byte, postIndex-iNdEx))
			copy(m.Chats[len(m.Chats)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoChats = append(m.NoChats, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoChats = append(m.NoChats, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChats", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoChans = append(m.NoChans, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoChans = append(m.NoChans, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChans", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwoUserChatsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTwoUserChatsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTwoUserChatsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseridOne", wireType)
			}
			m.UseridOne = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseridOne |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseridTwo", wireType)
			}
			m.UseridTwo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseridTwo |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwoUserChatsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTwoUserChatsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTwoUserChatsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChatIds = append(m.ChatIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChatIds = append(m.ChatIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatIds", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SuperChatIds = append(m.SuperChatIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SuperChatIds = append(m.SuperChatIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperChatIds", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpGradeChatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpGradeChatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpGradeChatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedMaxId", wireType)
			}
			m.MigratedMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpGradeChatResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpGradeChatResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpGradeChatResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperchatId", wireType)
			}
			m.SuperchatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuperchatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChatLinkReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChatLinkReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChatLinkReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChatLinkResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChatLinkResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChatLinkResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwitchInviteRuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwitchInviteRuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwitchInviteRuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminEnable = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwitchInviteRuleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwitchInviteRuleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwitchInviteRuleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsModify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsModify = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChatIsEncryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChatIsEncryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChatIsEncryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChatIsEncryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChatIsEncryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChatIsEncryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChatservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChatservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChatservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatservice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/chatservice.proto", fileDescriptorChatservice)
}

var fileDescriptorChatservice = []byte{
	// 1623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcf, 0x6e, 0xdb, 0x46,
	0x13, 0x37, 0x6d, 0xc9, 0x96, 0x46, 0x7f, 0x6c, 0x6f, 0xfc, 0xe5, 0x63, 0x14, 0xdb, 0x71, 0x84,
	0xef, 0x43, 0x7d, 0xa9, 0x0d, 0xb8, 0x87, 0x02, 0xbd, 0x25, 0x76, 0xe0, 0x18, 0x4d, 0x62, 0x9b,
	0x71, 0xda, 0xa3, 0x40, 0x89, 0x6b, 0x6b, 0x11, 0x8a, 0xcb, 0x92, 0x2b, 0x3b, 0x3e, 0x14, 0x28,
	0x7a, 0xe8, 0xa5, 0xed, 0x13, 0x14, 0xe8, 0xa1, 0x40, 0x8b, 0x3e, 0x46, 0x8f, 0xbd, 0xb5, 0x8f,
	0x50, 0xe4, 0xd8, 0xa7, 0x28, 0x76, 0x76, 0x49, 0x71, 0xa9, 0x3f, 0x91, 0xad, 0x1c, 0x7a, 0x92,
	0x66, 0x66, 0xf7, 0xb7, 0xf3, 0x6f, 0x67, 0x67, 0x08, 0xa7, 0x17, 0x4c, 0xf8, 0x6e, 0x7b, 0xa7,
	0xd3, 0x75, 0x45, 0x4c, 0xa3, 0x4b, 0x1a, 0xed, 0xb0, 0xde, 0x2e, 0x0b, 0x04, 0x8d, 0xce, 0xdd,
	0x0e, 0x0d, 0x23, 0xde, 0xee, 0x9f, 0xef, 0x86, 0x5c, 0xb8, 0x82, 0x87, 0x11, 0x17, 0x92, 0x8c,
	0x77, 0x59, 0x70, 0xce, 0xd5, 0xea, 0xdd, 0x64, 0x23, 0xeb, 0xd0, 0x1d, 0x5c, 0x40, 0x60, 0x20,
	0x6d, 0x3c, 0xbd, 0x15, 0x7c, 0xd8, 0xee, 0xf0, 0x5e, 0x4f, 0xff, 0x28, 0xd4, 0xc6, 0xc9, 0xac,
	0x8a, 0xf6, 0x63, 0x1a, 0xe9, 0x8d, 0xef, 0x09, 0x51, 0x6e, 0x94, 0x1a, 0xf2, 0x40, 0x21, 0x36,
	0x2f, 0xa0, 0xb6, 0x1f, 0x51, 0x57, 0xd0, 0xfd, 0xae, 0x2b, 0x1c, 0xfa, 0x05, 0x59, 0x83, 0xa2,
	0x60, 0xc2, 0xa7, 0xb6, 0xb5, 0x65, 0x6d, 0x97, 0x1d, 0x45, 0x90, 0x0d, 0x80, 0x8e, 0x5c, 0xc6,
	0xa3, 0x16, 0xf3, 0xec, 0xf9, 0x2d, 0x6b, 0xbb, 0xe8, 0x94, 0x35, 0xe7, 0xc8, 0x23, 0x0f, 0xa1,
	0x70, 0xe0, 0xf3, 0x0b, 0x7b, 0x61, 0xcb, 0xda, 0xae, 0xec, 0xd5, 0x76, 0xb4, 0x1b, 0x0e, 0x68,
	0xbb, 0x7f, 0xe1, 0xa0, 0xa8, 0x49, 0xa1, 0x9e, 0x3d, 0x28, 0x0e, 0xc9, 0x7f, 0x61, 0x49, 0xaa,
	0x23, 0x01, 0x2d, 0x04, 0x5c, 0x94, 0xe4, 0x91, 0x47, 0x3e, 0x01, 0x88, 0x68, 0xdc, 0xf7, 0x45,
	0x87, 0x7b, 0x14, 0x0f, 0xab, 0xef, 0x35, 0x76, 0x06, 0x56, 0xec, 0x68, 0x88, 0xbe, 0x2f, 0xf6,
	0xb9, 0x47, 0x9d, 0xcc, 0xea, 0xe6, 0x31, 0xac, 0x1e, 0x52, 0x21, 0x17, 0xbc, 0x92, 0xce, 0x3b,
	0xf2, 0xa4, 0x4d, 0x63, 0x4f, 0x4a, 0xf4, 0x9e, 0x1f, 0xaf, 0x37, 0x03, 0x92, 0x07, 0x54, 0xba,
	0xcb, 0xe0, 0x28, 0xc4, 0x05, 0x89, 0x28, 0xc9, 0x19, 0x75, 0xff, 0xda, 0x82, 0xba, 0x3e, 0xeb,
	0x28, 0x38, 0xe7, 0x13, 0x35, 0xcf, 0x28, 0xa0, 0xa2, 0x91, 0x28, 0x70, 0x1f, 0xca, 0x11, 0x6f,
	0x73, 0xd1, 0xba, 0xa0, 0x02, 0xe3, 0x51, 0x72, 0x4a, 0xc8, 0x38, 0xa4, 0x22, 0xb5, 0xb7, 0x30,
	0xde, 0xde, 0x3f, 0x16, 0x60, 0xd9, 0x50, 0x62, 0x52, 0xa4, 0xfe, 0x0f, 0x75, 0xd7, 0xeb, 0xb1,
	0x20, 0x6e, 0xd1, 0xc0, 0x6d, 0xfb, 0x54, 0x29, 0x53, 0x72, 0x6a, 0x8a, 0xfb, 0x44, 0x31, 0xc9,
	0x16, 0x54, 0x3c, 0xea, 0x76, 0x04, 0xbb, 0x74, 0x05, 0xf5, 0xb4, 0x56, 0x59, 0x16, 0xf9, 0x00,
	0x96, 0xe9, 0x9b, 0x90, 0x47, 0x82, 0x7a, 0x2d, 0x16, 0x5c, 0x32, 0x41, 0x51, 0xc7, 0xb2, 0x53,
	0x4f, 0xd8, 0x47, 0xc8, 0x95, 0xe9, 0x49, 0x83, 0x4e, 0x74, 0x6d, 0x17, 0x11, 0x44, 0x11, 0xc4,
	0x86, 0x25, 0x9d, 0x8c, 0xf6, 0x22, 0x2a, 0x98, 0x90, 0x83, 0x74, 0x5e, 0xca, 0xa6, 0xf3, 0x1a,
	0x14, 0xc3, 0x2e, 0x17, 0xdc, 0x2e, 0x6d, 0x59, 0xdb, 0x55, 0x47, 0x11, 0x32, 0xc9, 0xcf, 0xfb,
	0xbe, 0xdf, 0x52, 0xa2, 0x32, 0x8a, 0xca, 0x92, 0x73, 0x82, 0x62, 0x1b, 0x96, 0x2e, 0x69, 0x14,
	0x33, 0x1e, 0xd8, 0xa0, 0x0e, 0xd1, 0x24, 0xf9, 0x10, 0x48, 0xe8, 0x46, 0x82, 0x75, 0x58, 0xe8,
	0x06, 0x22, 0x6e, 0x75, 0x78, 0x3f, 0x10, 0x76, 0x05, 0x17, 0xad, 0x66, 0x25, 0xfb, 0x52, 0x40,
	0x08, 0x14, 0x3c, 0x57, 0x50, 0xbb, 0x8a, 0x0b, 0xf0, 0xbf, 0x3c, 0xbb, 0xc7, 0x2e, 0x22, 0x57,
	0xd0, 0x96, 0xe0, 0x76, 0x0d, 0x95, 0x2d, 0x6b, 0xce, 0x19, 0xcf, 0xa5, 0x55, 0xfd, 0x46, 0x69,
	0xf5, 0xa3, 0x05, 0x2b, 0x8f, 0x3c, 0x4f, 0xae, 0x78, 0x4e, 0x7b, 0x6d, 0x1a, 0x4d, 0x4c, 0xac,
	0x0d, 0x00, 0x0c, 0x80, 0x71, 0xd3, 0x35, 0x47, 0xa5, 0x57, 0x0f, 0x41, 0xa4, 0x74, 0x01, 0x53,
	0xbf, 0xa4, 0x18, 0x47, 0x5e, 0x6a, 0x58, 0x21, 0x63, 0x58, 0x92, 0x72, 0xc5, 0xf1, 0x29, 0x77,
	0x0c, 0xab, 0x39, 0xfd, 0xe2, 0x30, 0x67, 0xb1, 0x75, 0x23, 0x8b, 0xbf, 0xb3, 0x60, 0xe5, 0x80,
	0xfa, 0x53, 0x5a, 0xfc, 0x00, 0x2a, 0x3c, 0xa4, 0x91, 0x59, 0xdc, 0x20, 0x61, 0xbd, 0xcb, 0xe6,
	0x29, 0xae, 0xd4, 0x31, 0xac, 0xe6, 0xb4, 0x99, 0xd1, 0xbe, 0x1f, 0x2c, 0x58, 0x79, 0xe2, 0x31,
	0xbc, 0xa4, 0x98, 0x9b, 0xb7, 0x2b, 0x15, 0xe9, 0x2d, 0x58, 0xc8, 0xde, 0x82, 0x75, 0xc0, 0x9c,
	0x57, 0x92, 0xc2, 0xe0, 0x12, 0x28, 0xe9, 0x74, 0xe1, 0xcc, 0x29, 0x37, 0xa3, 0xb9, 0x5f, 0x59,
	0x03, 0xc4, 0x33, 0x26, 0x84, 0x4f, 0x6f, 0x67, 0xef, 0x5d, 0x58, 0x14, 0xb8, 0x1d, 0x0d, 0x2e,
	0x3b, 0x9a, 0x9a, 0x26, 0x84, 0x27, 0x40, 0xf2, 0x1a, 0xcc, 0x68, 0xd4, 0xb7, 0x16, 0x2c, 0xeb,
	0xac, 0x7f, 0x24, 0x8b, 0xa5, 0x34, 0x29, 0x97, 0x89, 0xd6, 0xe4, 0x4c, 0x54, 0xc6, 0x0d, 0x32,
	0x31, 0xe3, 0x90, 0x85, 0x91, 0xaf, 0xdc, 0x04, 0xfb, 0x5e, 0xa4, 0x25, 0x42, 0x2b, 0xf3, 0x1e,
	0xac, 0xd3, 0x39, 0xff, 0xef, 0xb0, 0xce, 0x54, 0x66, 0x46, 0xeb, 0x4e, 0xe1, 0x4e, 0xb6, 0x27,
	0x70, 0xf8, 0x3b, 0x32, 0x72, 0x8a, 0x36, 0xe3, 0x4b, 0xa8, 0x26, 0x78, 0x12, 0x2e, 0x57, 0x86,
	0xad, 0x7c, 0x19, 0x1e, 0x9b, 0xe3, 0x0f, 0xa1, 0x9a, 0xec, 0xc3, 0x52, 0xac, 0x7c, 0x55, 0xd1,
	0xbc, 0x03, 0x59, 0x91, 0x09, 0x14, 0x22, 0xee, 0xa7, 0x55, 0x5a, 0xfe, 0x6f, 0xfe, 0x6c, 0xc1,
	0xda, 0xb0, 0x49, 0x71, 0x48, 0x3e, 0x06, 0xc0, 0x2e, 0xb4, 0x85, 0x5b, 0x64, 0xaf, 0x53, 0xd9,
	0xb3, 0xf3, 0x6e, 0x4a, 0xb4, 0x76, 0xca, 0xfd, 0x64, 0x73, 0xf6, 0xb5, 0x9c, 0x37, 0x5f, 0x4b,
	0xd3, 0xf3, 0x0b, 0x37, 0xf2, 0xfc, 0x6f, 0x16, 0xac, 0x1c, 0x52, 0xa5, 0xa3, 0x5c, 0x16, 0x4b,
	0xbf, 0xdf, 0x05, 0xb4, 0x7e, 0xe0, 0x76, 0x45, 0xc9, 0xfa, 0x86, 0xfa, 0xd8, 0xf3, 0x58, 0xb3,
	0x15, 0x21, 0x57, 0xcb, 0xb0, 0xa4, 0xa5, 0x5c, 0x53, 0xb2, 0xee, 0x75, 0xba, 0x6e, 0x10, 0x50,
	0x9f, 0x79, 0x76, 0x01, 0x45, 0x03, 0x86, 0xec, 0x74, 0xb0, 0x61, 0xee, 0x70, 0xbf, 0xe5, 0xbb,
	0xd7, 0x34, 0xc2, 0x0a, 0x58, 0x74, 0x6a, 0x09, 0xf7, 0x99, 0x64, 0xa6, 0x91, 0x5e, 0x1c, 0x1f,
	0xe9, 0xbf, 0x2d, 0xcc, 0x9e, 0xac, 0x09, 0xd2, 0x3c, 0xd2, 0x80, 0x92, 0x3e, 0x2e, 0x46, 0x3f,
	0x57, 0x9d, 0x94, 0x26, 0xbb, 0x03, 0x4b, 0x24, 0xee, 0xbd, 0xac, 0xb7, 0x24, 0x90, 0xec, 0xd4,
	0x1e, 0x45, 0x91, 0x7b, 0x9d, 0x18, 0xb9, 0x06, 0x45, 0x9c, 0x11, 0xd0, 0xc6, 0xaa, 0xa3, 0x08,
	0x72, 0x0f, 0x4a, 0x01, 0x6f, 0x29, 0x81, 0xb2, 0x70, 0x29, 0xe0, 0xfb, 0xa6, 0x28, 0x88, 0xed,
	0x62, 0x46, 0x14, 0xc4, 0xb9, 0x78, 0x2d, 0xde, 0x28, 0x5e, 0x3f, 0x59, 0xd8, 0x3e, 0x9f, 0x5d,
	0x71, 0xa9, 0x66, 0x1a, 0xb1, 0x0d, 0x95, 0x55, 0xcc, 0x6b, 0xf1, 0x80, 0x26, 0xd9, 0xad, 0x38,
	0xc7, 0x01, 0xcd, 0x88, 0xc5, 0x15, 0x4f, 0x7a, 0x10, 0xc5, 0x39, 0xbb, 0xe2, 0xe4, 0x3f, 0xb0,
	0xd8, 0x73, 0xdf, 0x0c, 0x2a, 0x41, 0xb1, 0xe7, 0xbe, 0x51, 0xcf, 0x99, 0xcf, 0x7a, 0x4c, 0xe8,
	0xc4, 0x56, 0xc4, 0x34, 0x0f, 0xd6, 0xaf, 0x2a, 0x22, 0xa6, 0x92, 0x71, 0x88, 0x4e, 0xc4, 0x4e,
	0x4e, 0x29, 0xa8, 0x08, 0xe9, 0x29, 0x7d, 0xcb, 0x93, 0xc4, 0x5a, 0x52, 0xd7, 0x3c, 0x26, 0xff,
	0x83, 0x7a, 0xdc, 0x0f, 0x69, 0xd4, 0x4a, 0x17, 0xa8, 0x14, 0xab, 0x22, 0x77, 0x5f, 0xaf, 0x32,
	0xfd, 0x59, 0xb8, 0x69, 0x67, 0x53, 0x7f, 0x15, 0x1e, 0x46, 0xae, 0x97, 0x0e, 0x6c, 0xc6, 0x28,
	0x92, 0x2d, 0x05, 0x99, 0x72, 0x34, 0x9f, 0xef, 0xda, 0x75, 0x67, 0xe9, 0xb5, 0xd0, 0x75, 0xda,
	0x8f, 0xb5, 0x84, 0xfb, 0x1c, 0xfd, 0x39, 0x45, 0x61, 0xfd, 0xc6, 0x82, 0x65, 0x43, 0x9d, 0x38,
	0x94, 0x15, 0x08, 0xcd, 0x35, 0x4b, 0x61, 0x25, 0xe5, 0xa9, 0x48, 0xa9, 0xa6, 0x7c, 0x3e, 0xdb,
	0x94, 0xcf, 0x52, 0x17, 0xba, 0xb0, 0x3a, 0x98, 0x2e, 0x9f, 0xb1, 0xe0, 0xf5, 0xed, 0x3a, 0x84,
	0x29, 0xe6, 0x58, 0x0f, 0x48, 0xfe, 0xa4, 0x38, 0x94, 0x35, 0xd5, 0x67, 0xc1, 0x6b, 0x3d, 0x34,
	0xe3, 0xff, 0x99, 0x46, 0xc1, 0xef, 0x2d, 0xb8, 0xf3, 0xf2, 0x8a, 0x89, 0x4e, 0x57, 0xcd, 0x3d,
	0x4e, 0xff, 0xb6, 0x4d, 0xcf, 0x43, 0xa8, 0xe2, 0x30, 0xa6, 0x27, 0xb4, 0x64, 0xf8, 0x42, 0x9e,
	0x9a, 0xcf, 0xa6, 0x09, 0x34, 0x87, 0xb5, 0x61, 0x75, 0xe2, 0x50, 0x3e, 0xd9, 0x2c, 0x6e, 0xf5,
	0xb8, 0xc7, 0xce, 0xaf, 0x51, 0xa3, 0x92, 0x53, 0x62, 0xf1, 0x73, 0xa4, 0x67, 0x72, 0xc0, 0x29,
	0xdc, 0xd9, 0xef, 0xd2, 0xce, 0x6b, 0xbc, 0x34, 0xf1, 0x13, 0x39, 0xe5, 0xcd, 0xfa, 0xc4, 0x76,
	0x61, 0x6d, 0x18, 0x52, 0x5d, 0x73, 0x35, 0x52, 0x5a, 0xd9, 0x91, 0x72, 0x06, 0xe5, 0xf7, 0x7e,
	0x01, 0x58, 0x95, 0xe2, 0x97, 0xb8, 0xf2, 0xa5, 0xfa, 0xd4, 0x44, 0x9e, 0x26, 0x9f, 0x5a, 0x5e,
	0xd0, 0x2b, 0x29, 0x25, 0x46, 0x19, 0x37, 0xbe, 0xc2, 0x34, 0x1a, 0xe3, 0x44, 0x71, 0xd8, 0x9c,
	0x23, 0xaf, 0xf2, 0xdf, 0x24, 0x1e, 0x5f, 0xcb, 0xc9, 0x2d, 0xbb, 0x67, 0xe8, 0x23, 0x48, 0x63,
	0x73, 0x92, 0x18, 0x61, 0x9f, 0x42, 0x25, 0x33, 0xf9, 0x93, 0xc6, 0x88, 0x0d, 0xfa, 0xbb, 0x44,
	0xe3, 0xfe, 0x58, 0x19, 0x22, 0x3d, 0x83, 0x8a, 0x6e, 0x27, 0xe5, 0x09, 0x64, 0x3d, 0xbb, 0x3a,
	0x3f, 0x8a, 0x36, 0x36, 0x26, 0x48, 0x13, 0x34, 0xdd, 0xbe, 0x0d, 0xa3, 0xe5, 0xc7, 0x3c, 0x13,
	0x6d, 0x68, 0xec, 0x6a, 0xce, 0x91, 0x17, 0x50, 0x33, 0xc6, 0x13, 0x13, 0x2f, 0x3f, 0x56, 0x99,
	0x78, 0x43, 0x73, 0x4d, 0x73, 0x8e, 0x9c, 0x42, 0xdd, 0x1c, 0x0d, 0xc8, 0xc8, 0x2d, 0xe9, 0xe0,
	0x62, 0x06, 0x62, 0x78, 0xaa, 0x68, 0xce, 0x91, 0x4f, 0xa1, 0x9a, 0xed, 0xc6, 0xc9, 0xfd, 0x11,
	0x1e, 0x4a, 0xda, 0xea, 0xc6, 0xfa, 0x78, 0x61, 0x02, 0x96, 0x6d, 0x7e, 0x4d, 0xb0, 0x5c, 0x8f,
	0xde, 0x58, 0x1f, 0x2f, 0x44, 0xb0, 0xcf, 0xd2, 0x8f, 0x43, 0x69, 0xa7, 0xfa, 0x60, 0x5c, 0x5e,
	0xe9, 0xb6, 0xb8, 0xb1, 0x35, 0x79, 0x01, 0xe2, 0x9e, 0x21, 0x6e, 0xf6, 0x05, 0x26, 0xf9, 0x7c,
	0xcd, 0xf5, 0x10, 0x8d, 0x07, 0x13, 0xe5, 0x49, 0x42, 0x67, 0x5e, 0x27, 0x33, 0xa1, 0xcd, 0x57,
	0xd4, 0x4c, 0xe8, 0xdc, 0x93, 0xa6, 0x82, 0x6c, 0x56, 0x7d, 0x33, 0xc8, 0x43, 0x6f, 0x8f, 0x19,
	0xe4, 0xe1, 0x07, 0xa3, 0x39, 0x47, 0x3e, 0x87, 0x95, 0x7c, 0x49, 0x35, 0x7d, 0x39, 0xa2, 0xfe,
	0x9b, 0xbe, 0x1c, 0x55, 0x91, 0x15, 0x70, 0xbe, 0xce, 0x99, 0xc0, 0x23, 0x0a, 0xab, 0x09, 0x3c,
	0xaa, 0x4c, 0x36, 0xe7, 0xc8, 0x09, 0xd4, 0x8c, 0xc6, 0xd5, 0xbc, 0x39, 0xf9, 0xb6, 0x7c, 0x28,
	0x40, 0xf9, 0x8e, 0xb7, 0x39, 0xf7, 0xb8, 0xfa, 0xfb, 0xdb, 0x4d, 0xeb, 0xcf, 0xb7, 0x9b, 0xd6,
	0x5f, 0x6f, 0x37, 0xad, 0xf6, 0x22, 0xf6, 0xd2, 0x1f, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0xde,
	0x94, 0xee, 0x13, 0xe1, 0x17, 0x00, 0x00,
}
