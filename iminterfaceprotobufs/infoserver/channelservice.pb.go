//
//Channel操作相关接口定义
//作者：hujian
//日期：2017-12-04
//版本：1.0
//修改日期：
//修改日志：
//Date           Desc
//-----------------------------------------------------
//2017-12-04     新建文件,在原有基础上更改
//protoc --gogofast_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: channelservice.proto

package infoserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/iminterfaceprotobufs/infoserver/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ---基础结构体-----------------------------------------------------------------------
// 群基础信息
type ChannelInfoBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId         int32  `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //超级群、频道ID
	AccessHash        int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Encry             bool   `protobuf:"varint,3,opt,name=encry,proto3" json:"encry,omitempty"`         //是否是加密群
	Broadcast         bool   `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty"` //是否是频道
	Verified          bool   `protobuf:"varint,5,opt,name=verified,proto3" json:"verified,omitempty"`
	Megagroup         bool   `protobuf:"varint,6,opt,name=megagroup,proto3" json:"megagroup,omitempty"`   //	是否是超级群的标识
	Restricted        bool   `protobuf:"varint,7,opt,name=restricted,proto3" json:"restricted,omitempty"` //是否被限制
	Democracy         bool   `protobuf:"varint,8,opt,name=democracy,proto3" json:"democracy,omitempty"`   //是否民主（设置管理员的时候需要用）
	Signatures        bool   `protobuf:"varint,9,opt,name=signatures,proto3" json:"signatures,omitempty"`
	Min               bool   `protobuf:"varint,10,opt,name=min,proto3" json:"min,omitempty"`
	Title             string `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`                                                  //群名称
	Username          string `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`                                            //超级群的唯一标识名称
	Photo             string `protobuf:"bytes,13,opt,name=photo,proto3" json:"photo,omitempty"`                                                  //用户头像 json格式
	Date              int32  `protobuf:"varint,14,opt,name=date,proto3" json:"date,omitempty"`                                                   //创建时间
	Version           int32  `protobuf:"varint,15,opt,name=version,proto3" json:"version,omitempty"`                                             //版本
	RestrictionReason string `protobuf:"bytes,16,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"` //被限制的原因
	Cluster           int32  `protobuf:"varint,17,opt,name=cluster,proto3" json:"cluster,omitempty"`                                             //超级群创建的cluster
	// bool moderator = 18; //是不是主持人
	IsCreator bool `protobuf:"varint,18,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"` //是不是创建者
	// bool editor = 19; //是否是管理员
	IsAdmin            bool   `protobuf:"varint,19,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"` //是否是管理员
	Left               bool   `protobuf:"varint,20,opt,name=left,proto3" json:"left,omitempty"`                      //是否是已经离开此超级群
	Kicked             bool   `protobuf:"varint,21,opt,name=kicked,proto3" json:"kicked,omitempty"`                  //是否是被踢人
	MigratedFromChatId int32  `protobuf:"varint,22,opt,name=migrated_from_chat_id,json=migratedFromChatId,proto3" json:"migrated_from_chat_id,omitempty"`
	InviteRule         int32  `protobuf:"varint,23,opt,name=invite_rule,json=inviteRule,proto3" json:"invite_rule,omitempty"` //0:所有人能邀请  1:仅管理员  其他：扩展用
	AdminsCount        int32  `protobuf:"varint,24,opt,name=Admins_count,json=AdminsCount,proto3" json:"Admins_count,omitempty"`
	KickedCount        int32  `protobuf:"varint,25,opt,name=Kicked_count,json=KickedCount,proto3" json:"Kicked_count,omitempty"`
	BannedCount        int32  `protobuf:"varint,26,opt,name=Banned_count,json=BannedCount,proto3" json:"Banned_count,omitempty"`
	BotCount           int32  `protobuf:"varint,27,opt,name=Bot_count,json=BotCount,proto3" json:"Bot_count,omitempty"`
	ParticipantsCount  int32  `protobuf:"varint,28,opt,name=Participants_count,json=ParticipantsCount,proto3" json:"Participants_count,omitempty"`
	IsInChannel        bool   `protobuf:"varint,29,opt,name=IsInChannel,proto3" json:"IsInChannel,omitempty"`
	UtilDate           int32  `protobuf:"varint,30,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ExportedInviteLink string `protobuf:"bytes,31,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"` //邀请链接
	Creator            int32  `protobuf:"varint,32,opt,name=Creator,proto3" json:"Creator,omitempty"`
	About              string `protobuf:"bytes,33,opt,name=About,proto3" json:"About,omitempty"`
	EveryoneQuiet      bool   `protobuf:"varint,34,opt,name=EveryoneQuiet,proto3" json:"EveryoneQuiet,omitempty"`
	PrivateChat        bool   `protobuf:"varint,35,opt,name=PrivateChat,proto3" json:"PrivateChat,omitempty"`
}

func (x *ChannelInfoBase) Reset() {
	*x = ChannelInfoBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfoBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfoBase) ProtoMessage() {}

func (x *ChannelInfoBase) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfoBase.ProtoReflect.Descriptor instead.
func (*ChannelInfoBase) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelInfoBase) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelInfoBase) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ChannelInfoBase) GetEncry() bool {
	if x != nil {
		return x.Encry
	}
	return false
}

func (x *ChannelInfoBase) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

func (x *ChannelInfoBase) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *ChannelInfoBase) GetMegagroup() bool {
	if x != nil {
		return x.Megagroup
	}
	return false
}

func (x *ChannelInfoBase) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *ChannelInfoBase) GetDemocracy() bool {
	if x != nil {
		return x.Democracy
	}
	return false
}

func (x *ChannelInfoBase) GetSignatures() bool {
	if x != nil {
		return x.Signatures
	}
	return false
}

func (x *ChannelInfoBase) GetMin() bool {
	if x != nil {
		return x.Min
	}
	return false
}

func (x *ChannelInfoBase) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChannelInfoBase) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChannelInfoBase) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *ChannelInfoBase) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ChannelInfoBase) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChannelInfoBase) GetRestrictionReason() string {
	if x != nil {
		return x.RestrictionReason
	}
	return ""
}

func (x *ChannelInfoBase) GetCluster() int32 {
	if x != nil {
		return x.Cluster
	}
	return 0
}

func (x *ChannelInfoBase) GetIsCreator() bool {
	if x != nil {
		return x.IsCreator
	}
	return false
}

func (x *ChannelInfoBase) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *ChannelInfoBase) GetLeft() bool {
	if x != nil {
		return x.Left
	}
	return false
}

func (x *ChannelInfoBase) GetKicked() bool {
	if x != nil {
		return x.Kicked
	}
	return false
}

func (x *ChannelInfoBase) GetMigratedFromChatId() int32 {
	if x != nil {
		return x.MigratedFromChatId
	}
	return 0
}

func (x *ChannelInfoBase) GetInviteRule() int32 {
	if x != nil {
		return x.InviteRule
	}
	return 0
}

func (x *ChannelInfoBase) GetAdminsCount() int32 {
	if x != nil {
		return x.AdminsCount
	}
	return 0
}

func (x *ChannelInfoBase) GetKickedCount() int32 {
	if x != nil {
		return x.KickedCount
	}
	return 0
}

func (x *ChannelInfoBase) GetBannedCount() int32 {
	if x != nil {
		return x.BannedCount
	}
	return 0
}

func (x *ChannelInfoBase) GetBotCount() int32 {
	if x != nil {
		return x.BotCount
	}
	return 0
}

func (x *ChannelInfoBase) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *ChannelInfoBase) GetIsInChannel() bool {
	if x != nil {
		return x.IsInChannel
	}
	return false
}

func (x *ChannelInfoBase) GetUtilDate() int32 {
	if x != nil {
		return x.UtilDate
	}
	return 0
}

func (x *ChannelInfoBase) GetExportedInviteLink() string {
	if x != nil {
		return x.ExportedInviteLink
	}
	return ""
}

func (x *ChannelInfoBase) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *ChannelInfoBase) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *ChannelInfoBase) GetEveryoneQuiet() bool {
	if x != nil {
		return x.EveryoneQuiet
	}
	return false
}

func (x *ChannelInfoBase) GetPrivateChat() bool {
	if x != nil {
		return x.PrivateChat
	}
	return false
}

// 群成员的基础信息
type ChannelParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              int32          `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                          //群成员的iD
	InviteId            int32          `protobuf:"varint,2,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`                                    //邀请者的ID
	CanSetUsername      bool           `protobuf:"varint,3,opt,name=can_set_username,json=canSetUsername,proto3" json:"can_set_username,omitempty"`                //是否可以更改超级群的username 默认为true
	CanViewParticipants bool           `protobuf:"varint,4,opt,name=can_view_participants,json=canViewParticipants,proto3" json:"can_view_participants,omitempty"` //是否可以查看超级群的成员列表默认为true
	IsCreator           bool           `protobuf:"varint,5,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"`                                 //是否是群的创建者
	IsAdmin             bool           `protobuf:"varint,6,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`                                       //是否是超级群的管理员
	IsBan               bool           `protobuf:"varint,7,opt,name=is_ban,json=isBan,proto3" json:"is_ban,omitempty"`                                             //是否是被禁权的成员
	JoinTime            int32          `protobuf:"varint,8,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`                                    //进群时间
	AdRight             *AdminRights   `protobuf:"bytes,9,opt,name=ad_right,json=adRight,proto3" json:"ad_right,omitempty"`                                        //如果是管理员的话有此权限
	BanRight            *BannerRights  `protobuf:"bytes,10,opt,name=ban_right,json=banRight,proto3" json:"ban_right,omitempty"`                                    //bannner用户的权限
	Resultcode          ChatResultCode `protobuf:"varint,11,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`                //返回结果码
	ExportedInviteLink  string         `protobuf:"bytes,12,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"`    //邀请链接
}

func (x *ChannelParticipant) Reset() {
	*x = ChannelParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelParticipant) ProtoMessage() {}

func (x *ChannelParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelParticipant.ProtoReflect.Descriptor instead.
func (*ChannelParticipant) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelParticipant) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelParticipant) GetInviteId() int32 {
	if x != nil {
		return x.InviteId
	}
	return 0
}

func (x *ChannelParticipant) GetCanSetUsername() bool {
	if x != nil {
		return x.CanSetUsername
	}
	return false
}

func (x *ChannelParticipant) GetCanViewParticipants() bool {
	if x != nil {
		return x.CanViewParticipants
	}
	return false
}

func (x *ChannelParticipant) GetIsCreator() bool {
	if x != nil {
		return x.IsCreator
	}
	return false
}

func (x *ChannelParticipant) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *ChannelParticipant) GetIsBan() bool {
	if x != nil {
		return x.IsBan
	}
	return false
}

func (x *ChannelParticipant) GetJoinTime() int32 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *ChannelParticipant) GetAdRight() *AdminRights {
	if x != nil {
		return x.AdRight
	}
	return nil
}

func (x *ChannelParticipant) GetBanRight() *BannerRights {
	if x != nil {
		return x.BanRight
	}
	return nil
}

func (x *ChannelParticipant) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

func (x *ChannelParticipant) GetExportedInviteLink() string {
	if x != nil {
		return x.ExportedInviteLink
	}
	return ""
}

// 群成员的列表
type ChannelParticipantArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32                 `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	Part       []*ChannelParticipant `protobuf:"bytes,2,rep,name=part,proto3" json:"part,omitempty"`
}

func (x *ChannelParticipantArr) Reset() {
	*x = ChannelParticipantArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelParticipantArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelParticipantArr) ProtoMessage() {}

func (x *ChannelParticipantArr) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelParticipantArr.ProtoReflect.Descriptor instead.
func (*ChannelParticipantArr) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{2}
}

func (x *ChannelParticipantArr) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ChannelParticipantArr) GetPart() []*ChannelParticipant {
	if x != nil {
		return x.Part
	}
	return nil
}

// 邀请用户
type InvitedUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`            //要进入此超级群/频道的ID
	IsBotUser bool  `protobuf:"varint,2,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"` //被邀请者是不是机器人
}

func (x *InvitedUsers) Reset() {
	*x = InvitedUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitedUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitedUsers) ProtoMessage() {}

func (x *InvitedUsers) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitedUsers.ProtoReflect.Descriptor instead.
func (*InvitedUsers) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{3}
}

func (x *InvitedUsers) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InvitedUsers) GetIsBotUser() bool {
	if x != nil {
		return x.IsBotUser
	}
	return false
}

// 管理员相关权限
type AdminRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeGroupInfo bool  `protobuf:"varint,1,opt,name=change_group_info,json=changeGroupInfo,proto3" json:"change_group_info,omitempty"` //如果是管理员的话，是否有修改群信息权限
	DeleteMessages  bool  `protobuf:"varint,2,opt,name=delete_messages,json=deleteMessages,proto3" json:"delete_messages,omitempty"`      //如果是管理员的话，是否有删除消息的权限
	BanUsers        bool  `protobuf:"varint,3,opt,name=ban_users,json=banUsers,proto3" json:"ban_users,omitempty"`                        //如果是管理员的话，是否有禁止成员的权限的权限
	PinMessages     bool  `protobuf:"varint,4,opt,name=pin_messages,json=pinMessages,proto3" json:"pin_messages,omitempty"`               //如果是管理员的话，是否有置顶消息的权限
	AddNewAdmin     bool  `protobuf:"varint,5,opt,name=add_new_admin,json=addNewAdmin,proto3" json:"add_new_admin,omitempty"`             //如果是管理员的话，是否有添加新管理员的权限
	PromotedBy      int32 `protobuf:"varint,6,opt,name=promoted_by,json=promotedBy,proto3" json:"promoted_by,omitempty"`                  //如果是管理员的话，被XX升级为管理员
	PostMessages    bool  `protobuf:"varint,7,opt,name=post_messages,json=postMessages,proto3" json:"post_messages,omitempty"`            //频道是否可以发消息
	EditMessages    bool  `protobuf:"varint,8,opt,name=edit_messages,json=editMessages,proto3" json:"edit_messages,omitempty"`            //编辑消息
	InviteUsers     bool  `protobuf:"varint,9,opt,name=invite_users,json=inviteUsers,proto3" json:"invite_users,omitempty"`               //邀请用户
	InviteLink      bool  `protobuf:"varint,10,opt,name=invite_link,json=inviteLink,proto3" json:"invite_link,omitempty"`                 //邀请链接
}

func (x *AdminRights) Reset() {
	*x = AdminRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRights) ProtoMessage() {}

func (x *AdminRights) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRights.ProtoReflect.Descriptor instead.
func (*AdminRights) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{4}
}

func (x *AdminRights) GetChangeGroupInfo() bool {
	if x != nil {
		return x.ChangeGroupInfo
	}
	return false
}

func (x *AdminRights) GetDeleteMessages() bool {
	if x != nil {
		return x.DeleteMessages
	}
	return false
}

func (x *AdminRights) GetBanUsers() bool {
	if x != nil {
		return x.BanUsers
	}
	return false
}

func (x *AdminRights) GetPinMessages() bool {
	if x != nil {
		return x.PinMessages
	}
	return false
}

func (x *AdminRights) GetAddNewAdmin() bool {
	if x != nil {
		return x.AddNewAdmin
	}
	return false
}

func (x *AdminRights) GetPromotedBy() int32 {
	if x != nil {
		return x.PromotedBy
	}
	return 0
}

func (x *AdminRights) GetPostMessages() bool {
	if x != nil {
		return x.PostMessages
	}
	return false
}

func (x *AdminRights) GetEditMessages() bool {
	if x != nil {
		return x.EditMessages
	}
	return false
}

func (x *AdminRights) GetInviteUsers() bool {
	if x != nil {
		return x.InviteUsers
	}
	return false
}

func (x *AdminRights) GetInviteLink() bool {
	if x != nil {
		return x.InviteLink
	}
	return false
}

// bannner用户的权限
type BannerRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanReadMessages bool  `protobuf:"varint,1,opt,name=can_read_messages,json=canReadMessages,proto3" json:"can_read_messages,omitempty"` //如果是banner的话，是否有读取消息的权限
	CanSendMessge   bool  `protobuf:"varint,2,opt,name=can_send_messge,json=canSendMessge,proto3" json:"can_send_messge,omitempty"`       //如果是banner的话，是否发送文本消息的权限
	CanSendMedia    bool  `protobuf:"varint,3,opt,name=can_send_media,json=canSendMedia,proto3" json:"can_send_media,omitempty"`          //如果是banner的话，是否发送媒体消息的权限
	CanSendSticker  bool  `protobuf:"varint,4,opt,name=can_send_sticker,json=canSendSticker,proto3" json:"can_send_sticker,omitempty"`    //如果是banner的话，是否发送sticker和gif的权限
	CanEmbedLinks   bool  `protobuf:"varint,5,opt,name=can_embed_links,json=canEmbedLinks,proto3" json:"can_embed_links,omitempty"`       //如果是banner的话，是否有此权限
	KickedBy        int32 `protobuf:"varint,6,opt,name=kicked_by,json=kickedBy,proto3" json:"kicked_by,omitempty"`                        //如果是bannned用户的话，被谁禁止部分权限的
	UntilDate       int32 `protobuf:"varint,7,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`                     //如果是banner的话，什么时候解除此禁止权限
	CanSendGifs     bool  `protobuf:"varint,8,opt,name=can_send_gifs,json=canSendGifs,proto3" json:"can_send_gifs,omitempty"`
	CanSendGames    bool  `protobuf:"varint,9,opt,name=can_send_games,json=canSendGames,proto3" json:"can_send_games,omitempty"`
	CanSendInline   bool  `protobuf:"varint,10,opt,name=can_send_inline,json=canSendInline,proto3" json:"can_send_inline,omitempty"`
}

func (x *BannerRights) Reset() {
	*x = BannerRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerRights) ProtoMessage() {}

func (x *BannerRights) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerRights.ProtoReflect.Descriptor instead.
func (*BannerRights) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{5}
}

func (x *BannerRights) GetCanReadMessages() bool {
	if x != nil {
		return x.CanReadMessages
	}
	return false
}

func (x *BannerRights) GetCanSendMessge() bool {
	if x != nil {
		return x.CanSendMessge
	}
	return false
}

func (x *BannerRights) GetCanSendMedia() bool {
	if x != nil {
		return x.CanSendMedia
	}
	return false
}

func (x *BannerRights) GetCanSendSticker() bool {
	if x != nil {
		return x.CanSendSticker
	}
	return false
}

func (x *BannerRights) GetCanEmbedLinks() bool {
	if x != nil {
		return x.CanEmbedLinks
	}
	return false
}

func (x *BannerRights) GetKickedBy() int32 {
	if x != nil {
		return x.KickedBy
	}
	return 0
}

func (x *BannerRights) GetUntilDate() int32 {
	if x != nil {
		return x.UntilDate
	}
	return 0
}

func (x *BannerRights) GetCanSendGifs() bool {
	if x != nil {
		return x.CanSendGifs
	}
	return false
}

func (x *BannerRights) GetCanSendGames() bool {
	if x != nil {
		return x.CanSendGames
	}
	return false
}

func (x *BannerRights) GetCanSendInline() bool {
	if x != nil {
		return x.CanSendInline
	}
	return false
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// 创建频道的请求包
type CreateChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //超级群的ID
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	CreatorId  int32         `protobuf:"varint,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`    //创建者的ID
	Title      string        `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                              //群名称
	About      string        `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`                              //信息
	Broadcast  bool          `protobuf:"varint,6,opt,name=broadcast,proto3" json:"broadcast,omitempty"`                     //频道
	Megagroup  bool          `protobuf:"varint,7,opt,name=megagroup,proto3" json:"megagroup,omitempty"`                     //超级群
	Cluster    int32         `protobuf:"varint,8,opt,name=cluster,proto3" json:"cluster,omitempty"`                         //所在域
	Date       int32         `protobuf:"varint,9,opt,name=date,proto3" json:"date,omitempty"`                               //创建时间
	Dlog       *pbcomm.Debug `protobuf:"bytes,10,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                               //日志
}

func (x *CreateChannelReq) Reset() {
	*x = CreateChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelReq) ProtoMessage() {}

func (x *CreateChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelReq.ProtoReflect.Descriptor instead.
func (*CreateChannelReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{6}
}

func (x *CreateChannelReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *CreateChannelReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *CreateChannelReq) GetCreatorId() int32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *CreateChannelReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateChannelReq) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *CreateChannelReq) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

func (x *CreateChannelReq) GetMegagroup() bool {
	if x != nil {
		return x.Megagroup
	}
	return false
}

func (x *CreateChannelReq) GetCluster() int32 {
	if x != nil {
		return x.Cluster
	}
	return 0
}

func (x *CreateChannelReq) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *CreateChannelReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type ChannelupdatesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel      *ChannelInfoBase       `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`                                       //channel基本信息
	Users        *UserInfoArray         `protobuf:"bytes,2,opt,name=users,proto3" json:"users,omitempty"`                                           //在线用户信息
	Participants *ChannelParticipantArr `protobuf:"bytes,3,opt,name=participants,proto3" json:"participants,omitempty"`                             //在线用户权限
	Resultcode   ChatResultCode         `protobuf:"varint,4,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *ChannelupdatesResp) Reset() {
	*x = ChannelupdatesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelupdatesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelupdatesResp) ProtoMessage() {}

func (x *ChannelupdatesResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelupdatesResp.ProtoReflect.Descriptor instead.
func (*ChannelupdatesResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{7}
}

func (x *ChannelupdatesResp) GetChannel() *ChannelInfoBase {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *ChannelupdatesResp) GetUsers() *UserInfoArray {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ChannelupdatesResp) GetParticipants() *ChannelParticipantArr {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ChannelupdatesResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获取channel信息
type GetChannelUpdatesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //超级群的ID
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //超级群的ID
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                             //日志
}

func (x *GetChannelUpdatesReq) Reset() {
	*x = GetChannelUpdatesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelUpdatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelUpdatesReq) ProtoMessage() {}

func (x *GetChannelUpdatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelUpdatesReq.ProtoReflect.Descriptor instead.
func (*GetChannelUpdatesReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{8}
}

func (x *GetChannelUpdatesReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelUpdatesReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChannelUpdatesReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 添加(主动加入)超级群、频道的用户的请求
type AddChannelUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32           `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //channle的Id
	InvitorId  int32           `protobuf:"varint,2,opt,name=invitor_id,json=invitorId,proto3" json:"invitor_id,omitempty"` //邀请者的用户ID（如果是自己加入invitor_id 为自己的用户ID）
	AccessHash int64           `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Users      []*InvitedUsers `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	Dlog       *pbcomm.Debug   `protobuf:"bytes,5,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *AddChannelUserReq) Reset() {
	*x = AddChannelUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddChannelUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChannelUserReq) ProtoMessage() {}

func (x *AddChannelUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChannelUserReq.ProtoReflect.Descriptor instead.
func (*AddChannelUserReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{9}
}

func (x *AddChannelUserReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *AddChannelUserReq) GetInvitorId() int32 {
	if x != nil {
		return x.InvitorId
	}
	return 0
}

func (x *AddChannelUserReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *AddChannelUserReq) GetUsers() []*InvitedUsers {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *AddChannelUserReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 踢人或者主动离开超级群、频道的的请求接口
type DelChannelUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`   //channle的Id
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`            //要进离开/被踢 超级群/频道的成员的用户ID
	IsBotUser bool          `protobuf:"varint,3,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"` //被邀请者是不是机器人
	IsKicked  bool          `protobuf:"varint,4,opt,name=is_kicked,json=isKicked,proto3" json:"is_kicked,omitempty"`      // 是否是离开超级群\频道
	KickedId  int32         `protobuf:"varint,5,opt,name=Kicked_id,json=KickedId,proto3" json:"Kicked_id,omitempty"`      //如果是超级群被踢的话将，此用户保存到被踢列表中
	Dlog      *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                               //日志
}

func (x *DelChannelUserReq) Reset() {
	*x = DelChannelUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChannelUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChannelUserReq) ProtoMessage() {}

func (x *DelChannelUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChannelUserReq.ProtoReflect.Descriptor instead.
func (*DelChannelUserReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{10}
}

func (x *DelChannelUserReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *DelChannelUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelChannelUserReq) GetIsBotUser() bool {
	if x != nil {
		return x.IsBotUser
	}
	return false
}

func (x *DelChannelUserReq) GetIsKicked() bool {
	if x != nil {
		return x.IsKicked
	}
	return false
}

func (x *DelChannelUserReq) GetKickedId() int32 {
	if x != nil {
		return x.KickedId
	}
	return 0
}

func (x *DelChannelUserReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 更新群about请求
type UpdateChanAboutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	About     string        `protobuf:"bytes,3,opt,name=about,proto3" json:"about,omitempty"` //超级群/频道的简略说明
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`   //日志
}

func (x *UpdateChanAboutReq) Reset() {
	*x = UpdateChanAboutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChanAboutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChanAboutReq) ProtoMessage() {}

func (x *UpdateChanAboutReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChanAboutReq.ProtoReflect.Descriptor instead.
func (*UpdateChanAboutReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateChanAboutReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChanAboutReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChanAboutReq) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *UpdateChanAboutReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 更新群名称请求
type UpdateChanTitleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title     string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"` //超级群/频道的简略说明
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`   //日志
}

func (x *UpdateChanTitleReq) Reset() {
	*x = UpdateChanTitleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChanTitleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChanTitleReq) ProtoMessage() {}

func (x *UpdateChanTitleReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChanTitleReq.ProtoReflect.Descriptor instead.
func (*UpdateChanTitleReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateChanTitleReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChanTitleReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChanTitleReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateChanTitleReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 更新群头像请求
type UpdateChanPhotoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Photo     string        `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"` //超级群/频道的简略说明 json的格式
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`   //日志
}

func (x *UpdateChanPhotoReq) Reset() {
	*x = UpdateChanPhotoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChanPhotoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChanPhotoReq) ProtoMessage() {}

func (x *UpdateChanPhotoReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChanPhotoReq.ProtoReflect.Descriptor instead.
func (*UpdateChanPhotoReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateChanPhotoReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChanPhotoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChanPhotoReq) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *UpdateChanPhotoReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
type UpdateChanAdminRightsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	FromId      int32         `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"` //修改人
	UserId      int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //被修改人
	KeepAdmin   bool          `protobuf:"varint,4,opt,name=keep_admin,json=keepAdmin,proto3" json:"keep_admin,omitempty"`
	AdminRights *AdminRights  `protobuf:"bytes,5,opt,name=admin_rights,json=adminRights,proto3" json:"admin_rights,omitempty"` //权限
	Dlog        *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                  //日志
}

func (x *UpdateChanAdminRightsReq) Reset() {
	*x = UpdateChanAdminRightsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChanAdminRightsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChanAdminRightsReq) ProtoMessage() {}

func (x *UpdateChanAdminRightsReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChanAdminRightsReq.ProtoReflect.Descriptor instead.
func (*UpdateChanAdminRightsReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateChanAdminRightsReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChanAdminRightsReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UpdateChanAdminRightsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChanAdminRightsReq) GetKeepAdmin() bool {
	if x != nil {
		return x.KeepAdmin
	}
	return false
}

func (x *UpdateChanAdminRightsReq) GetAdminRights() *AdminRights {
	if x != nil {
		return x.AdminRights
	}
	return nil
}

func (x *UpdateChanAdminRightsReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type UpdateChanAdminRightsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates    *ChannelupdatesResp `protobuf:"bytes,1,opt,name=updates,proto3" json:"updates,omitempty"`
	IsAdd      bool                `protobuf:"varint,2,opt,name=isAdd,proto3" json:"isAdd,omitempty"`                                          //新增成员，并赋予权限
	Ispromote  bool                `protobuf:"varint,3,opt,name=ispromote,proto3" json:"ispromote,omitempty"`                                  //权限的增减，true,增加权限，false,降低权限
	Resultcode ChatResultCode      `protobuf:"varint,4,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *UpdateChanAdminRightsResp) Reset() {
	*x = UpdateChanAdminRightsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChanAdminRightsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChanAdminRightsResp) ProtoMessage() {}

func (x *UpdateChanAdminRightsResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChanAdminRightsResp.ProtoReflect.Descriptor instead.
func (*UpdateChanAdminRightsResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateChanAdminRightsResp) GetUpdates() *ChannelupdatesResp {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *UpdateChanAdminRightsResp) GetIsAdd() bool {
	if x != nil {
		return x.IsAdd
	}
	return false
}

func (x *UpdateChanAdminRightsResp) GetIspromote() bool {
	if x != nil {
		return x.Ispromote
	}
	return false
}

func (x *UpdateChanAdminRightsResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
type UpdateChanBanRightsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`         //修改人
	UserId    int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`         //被修改人
	IsKick    bool          `protobuf:"varint,4,opt,name=isKick,proto3" json:"isKick,omitempty"`                       //被踢
	BanRights *BannerRights `protobuf:"bytes,5,opt,name=ban_rights,json=banRights,proto3" json:"ban_rights,omitempty"` //权限
	BanDate   int32         `protobuf:"varint,6,opt,name=ban_date,json=banDate,proto3" json:"ban_date,omitempty"`      //ban的期限
	Dlog      *pbcomm.Debug `protobuf:"bytes,7,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                            //日志
}

func (x *UpdateChanBanRightsReq) Reset() {
	*x = UpdateChanBanRightsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChanBanRightsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChanBanRightsReq) ProtoMessage() {}

func (x *UpdateChanBanRightsReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChanBanRightsReq.ProtoReflect.Descriptor instead.
func (*UpdateChanBanRightsReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateChanBanRightsReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChanBanRightsReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UpdateChanBanRightsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChanBanRightsReq) GetIsKick() bool {
	if x != nil {
		return x.IsKick
	}
	return false
}

func (x *UpdateChanBanRightsReq) GetBanRights() *BannerRights {
	if x != nil {
		return x.BanRights
	}
	return nil
}

func (x *UpdateChanBanRightsReq) GetBanDate() int32 {
	if x != nil {
		return x.BanDate
	}
	return 0
}

func (x *UpdateChanBanRightsReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// channel最基础的请求
type DismissChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //channle的Id
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //请求者的用户Id
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	CmdOption  bool          `protobuf:"varint,4,opt,name=CmdOption,proto3" json:"CmdOption,omitempty"`                     //是否是管理员命令操作
	Dlog       *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                //日志
}

func (x *DismissChannelReq) Reset() {
	*x = DismissChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DismissChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DismissChannelReq) ProtoMessage() {}

func (x *DismissChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DismissChannelReq.ProtoReflect.Descriptor instead.
func (*DismissChannelReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{17}
}

func (x *DismissChannelReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *DismissChannelReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DismissChannelReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *DismissChannelReq) GetCmdOption() bool {
	if x != nil {
		return x.CmdOption
	}
	return false
}

func (x *DismissChannelReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type DismissChannelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B          bool           `protobuf:"varint,1,opt,name=b,proto3" json:"b,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *DismissChannelResp) Reset() {
	*x = DismissChannelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DismissChannelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DismissChannelResp) ProtoMessage() {}

func (x *DismissChannelResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DismissChannelResp.ProtoReflect.Descriptor instead.
func (*DismissChannelResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{18}
}

func (x *DismissChannelResp) GetB() bool {
	if x != nil {
		return x.B
	}
	return false
}

func (x *DismissChannelResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 超级群/频道 的按类型的偏移获取
type ParticipantLimitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //成员的ID
	Offset    int32         `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`                        //偏移地址
	Limit     int32         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                          //每次能够取的最大个数
	PartType  int32         `protobuf:"varint,4,opt,name=part_type,json=partType,proto3" json:"part_type,omitempty"`    //成员类型 1 代表 channelParticipantsRecent  2、代表 channelParticipantsAdmins 3代表channelParticipantsKicked 4代表channelParticipantsBots 5代表channelParticipantsBanned
	Userid    int32         `protobuf:"varint,5,opt,name=userid,proto3" json:"userid,omitempty"`
	Q         string        `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`       //根据用户名匹配
	Dlog      *pbcomm.Debug `protobuf:"bytes,7,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *ParticipantLimitReq) Reset() {
	*x = ParticipantLimitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantLimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantLimitReq) ProtoMessage() {}

func (x *ParticipantLimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantLimitReq.ProtoReflect.Descriptor instead.
func (*ParticipantLimitReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{19}
}

func (x *ParticipantLimitReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ParticipantLimitReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ParticipantLimitReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ParticipantLimitReq) GetPartType() int32 {
	if x != nil {
		return x.PartType
	}
	return 0
}

func (x *ParticipantLimitReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ParticipantLimitReq) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ParticipantLimitReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 群成员的列表
type ParticipantLimitResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32                 `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	Part       []*ChannelParticipant `protobuf:"bytes,2,rep,name=part,proto3" json:"part,omitempty"`
	Users      *UserInfoArray        `protobuf:"bytes,3,opt,name=users,proto3" json:"users,omitempty"`                                           //在线用户信息
	Resultcode ChatResultCode        `protobuf:"varint,4,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *ParticipantLimitResp) Reset() {
	*x = ParticipantLimitResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantLimitResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantLimitResp) ProtoMessage() {}

func (x *ParticipantLimitResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantLimitResp.ProtoReflect.Descriptor instead.
func (*ParticipantLimitResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{20}
}

func (x *ParticipantLimitResp) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ParticipantLimitResp) GetPart() []*ChannelParticipant {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *ParticipantLimitResp) GetUsers() *UserInfoArray {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ParticipantLimitResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// channel最基础的请求
type GetChannelOnePartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //channle的Id
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //请求者的用户Id
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                //日志
}

func (x *GetChannelOnePartReq) Reset() {
	*x = GetChannelOnePartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelOnePartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelOnePartReq) ProtoMessage() {}

func (x *GetChannelOnePartReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelOnePartReq.ProtoReflect.Descriptor instead.
func (*GetChannelOnePartReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{21}
}

func (x *GetChannelOnePartReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelOnePartReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChannelOnePartReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetChannelOnePartReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 群成员的基础信息
type GetChannelOnePartResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OneParticipant *ChannelParticipant `protobuf:"bytes,1,opt,name=one_participant,json=oneParticipant,proto3" json:"one_participant,omitempty"`
	UserInfo       *UserInfo           `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Resultcode     ChatResultCode      `protobuf:"varint,3,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *GetChannelOnePartResp) Reset() {
	*x = GetChannelOnePartResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelOnePartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelOnePartResp) ProtoMessage() {}

func (x *GetChannelOnePartResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelOnePartResp.ProtoReflect.Descriptor instead.
func (*GetChannelOnePartResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{22}
}

func (x *GetChannelOnePartResp) GetOneParticipant() *ChannelParticipant {
	if x != nil {
		return x.OneParticipant
	}
	return nil
}

func (x *GetChannelOnePartResp) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *GetChannelOnePartResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获取channel userids信息
type GetChannelUsersIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //超级群的ID
	Dlog      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                             //日志
}

func (x *GetChannelUsersIdReq) Reset() {
	*x = GetChannelUsersIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelUsersIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelUsersIdReq) ProtoMessage() {}

func (x *GetChannelUsersIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelUsersIdReq.ProtoReflect.Descriptor instead.
func (*GetChannelUsersIdReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{23}
}

func (x *GetChannelUsersIdReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelUsersIdReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type GetChannelUsersIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32          `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     []int32        `protobuf:"varint,2,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *GetChannelUsersIdResp) Reset() {
	*x = GetChannelUsersIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelUsersIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelUsersIdResp) ProtoMessage() {}

func (x *GetChannelUsersIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelUsersIdResp.ProtoReflect.Descriptor instead.
func (*GetChannelUsersIdResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{24}
}

func (x *GetChannelUsersIdResp) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelUsersIdResp) GetUserId() []int32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *GetChannelUsersIdResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// channel最基础的请求
type GetChannelBaseInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //channle的Id
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //请求者的用户Id
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                //日志
}

func (x *GetChannelBaseInfoReq) Reset() {
	*x = GetChannelBaseInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelBaseInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelBaseInfoReq) ProtoMessage() {}

func (x *GetChannelBaseInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelBaseInfoReq.ProtoReflect.Descriptor instead.
func (*GetChannelBaseInfoReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{25}
}

func (x *GetChannelBaseInfoReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelBaseInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChannelBaseInfoReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetChannelBaseInfoReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 群基础信息
type GetChannelBaseInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseInfo   *ChannelInfoBase `protobuf:"bytes,1,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`
	Resultcode ChatResultCode   `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *GetChannelBaseInfoResp) Reset() {
	*x = GetChannelBaseInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelBaseInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelBaseInfoResp) ProtoMessage() {}

func (x *GetChannelBaseInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelBaseInfoResp.ProtoReflect.Descriptor instead.
func (*GetChannelBaseInfoResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{26}
}

func (x *GetChannelBaseInfoResp) GetBaseInfo() *ChannelInfoBase {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *GetChannelBaseInfoResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// 获取channel信息  不带user信息
type GetChannelInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //channle的Id
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	Dlog       *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                //日志
}

func (x *GetChannelInfoReq) Reset() {
	*x = GetChannelInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInfoReq) ProtoMessage() {}

func (x *GetChannelInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInfoReq.ProtoReflect.Descriptor instead.
func (*GetChannelInfoReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{27}
}

func (x *GetChannelInfoReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelInfoReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetChannelInfoReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 群基础信息
type GetChannelInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseInfo   *ChannelInfoBase `protobuf:"bytes,1,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`                                     //基础信息  不带user信息
	Resultcode ChatResultCode   `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *GetChannelInfoResp) Reset() {
	*x = GetChannelInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInfoResp) ProtoMessage() {}

func (x *GetChannelInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInfoResp.ProtoReflect.Descriptor instead.
func (*GetChannelInfoResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{28}
}

func (x *GetChannelInfoResp) GetBaseInfo() *ChannelInfoBase {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *GetChannelInfoResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 批量获取
// channel最基础的请求
type BatchChannelBaseInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` //channle的Id
	UserId    []int32       `protobuf:"varint,2,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`   //请求者的用户Id
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                             //日志
}

func (x *BatchChannelBaseInfoReq) Reset() {
	*x = BatchChannelBaseInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchChannelBaseInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchChannelBaseInfoReq) ProtoMessage() {}

func (x *BatchChannelBaseInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchChannelBaseInfoReq.ProtoReflect.Descriptor instead.
func (*BatchChannelBaseInfoReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{29}
}

func (x *BatchChannelBaseInfoReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *BatchChannelBaseInfoReq) GetUserId() []int32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *BatchChannelBaseInfoReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type BatchChannelBaseInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel    []*ChannelInfoBase `protobuf:"bytes,1,rep,name=channel,proto3" json:"channel,omitempty"`                                       //channel的基础信息
	Resultcode ChatResultCode     `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *BatchChannelBaseInfoResp) Reset() {
	*x = BatchChannelBaseInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchChannelBaseInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchChannelBaseInfoResp) ProtoMessage() {}

func (x *BatchChannelBaseInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchChannelBaseInfoResp.ProtoReflect.Descriptor instead.
func (*BatchChannelBaseInfoResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{30}
}

func (x *BatchChannelBaseInfoResp) GetChannel() []*ChannelInfoBase {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *BatchChannelBaseInfoResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// ChannelLink
type GetChanByLinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelLink string        `protobuf:"bytes,1,opt,name=channel_link,json=channelLink,proto3" json:"channel_link,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //请求者的用户Id
	Dlog        *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                    //日志
}

func (x *GetChanByLinkReq) Reset() {
	*x = GetChanByLinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChanByLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChanByLinkReq) ProtoMessage() {}

func (x *GetChanByLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChanByLinkReq.ProtoReflect.Descriptor instead.
func (*GetChanByLinkReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{31}
}

func (x *GetChanByLinkReq) GetChannelLink() string {
	if x != nil {
		return x.ChannelLink
	}
	return ""
}

func (x *GetChanByLinkReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChanByLinkReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 返回为 ChannelInfoBaseResp
// -----------------------------------------------------------------------------
// GetFullChannelInfo
type GetFullChannelInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`    //channle的Id
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //请求者的用户Id
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	Dlog       *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                                //日志
}

func (x *GetFullChannelInfoReq) Reset() {
	*x = GetFullChannelInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullChannelInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullChannelInfoReq) ProtoMessage() {}

func (x *GetFullChannelInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullChannelInfoReq.ProtoReflect.Descriptor instead.
func (*GetFullChannelInfoReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{32}
}

func (x *GetFullChannelInfoReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetFullChannelInfoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFullChannelInfoReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetFullChannelInfoReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type GetFullChannelInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channelinfo         *ChannelInfoBase `protobuf:"bytes,1,opt,name=channelinfo,proto3" json:"channelinfo,omitempty"`
	ExportedInviteLink  string           `protobuf:"bytes,2,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"`    //邀请链接
	ParticipantsCount   int32            `protobuf:"varint,3,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`        //成员个数
	AdminsCount         int32            `protobuf:"varint,4,opt,name=admins_count,json=adminsCount,proto3" json:"admins_count,omitempty"`                          //管理员个数
	KickedCount         int32            `protobuf:"varint,5,opt,name=kicked_count,json=kickedCount,proto3" json:"kicked_count,omitempty"`                          //被踢个数
	BannedCount         int32            `protobuf:"varint,6,opt,name=banned_count,json=bannedCount,proto3" json:"banned_count,omitempty"`                          //被禁止的个数（68层使用）
	PinnedMsgId         int32            `protobuf:"varint,7,opt,name=pinned_msg_id,json=pinnedMsgId,proto3" json:"pinned_msg_id,omitempty"`                        //置顶的消息的ID
	MigratedFromMaxId   int32            `protobuf:"varint,8,opt,name=migrated_from_max_id,json=migratedFromMaxId,proto3" json:"migrated_from_max_id,omitempty"`    //如果是超级群的话从这个普通群升级而来，默认为0
	MigratedFromChatId  int32            `protobuf:"varint,9,opt,name=migrated_from_chat_id,json=migratedFromChatId,proto3" json:"migrated_from_chat_id,omitempty"` //如果是超级群的话从这个普通群升级而来，默认为0
	AdminRights         *AdminRights     `protobuf:"bytes,10,opt,name=admin_rights,json=adminRights,proto3" json:"admin_rights,omitempty"`                          //是否可以设置username
	BanRights           *BannerRights    `protobuf:"bytes,11,opt,name=ban_rights,json=banRights,proto3" json:"ban_rights,omitempty"`                                //是否可以查看群成员列表
	About               string           `protobuf:"bytes,12,opt,name=about,proto3" json:"about,omitempty"`                                                         //群简要
	BotCount            int32            `protobuf:"varint,13,opt,name=bot_count,json=botCount,proto3" json:"bot_count,omitempty"`                                  //机器人个数，如果大于0，就从机器人服务那边去取
	BotId               []int32          `protobuf:"varint,14,rep,packed,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`                                    //机器人id的数组
	Users               *UserInfoArray   `protobuf:"bytes,15,opt,name=users,proto3" json:"users,omitempty"`                                                         //用户信息
	CanSetUsername      bool             `protobuf:"varint,16,opt,name=Can_set_username,json=CanSetUsername,proto3" json:"Can_set_username,omitempty"`
	CanViewParticipants bool             `protobuf:"varint,17,opt,name=Can_view_participants,json=CanViewParticipants,proto3" json:"Can_view_participants,omitempty"`
	Resultcode          ChatResultCode   `protobuf:"varint,18,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *GetFullChannelInfoResp) Reset() {
	*x = GetFullChannelInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullChannelInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullChannelInfoResp) ProtoMessage() {}

func (x *GetFullChannelInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullChannelInfoResp.ProtoReflect.Descriptor instead.
func (*GetFullChannelInfoResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{33}
}

func (x *GetFullChannelInfoResp) GetChannelinfo() *ChannelInfoBase {
	if x != nil {
		return x.Channelinfo
	}
	return nil
}

func (x *GetFullChannelInfoResp) GetExportedInviteLink() string {
	if x != nil {
		return x.ExportedInviteLink
	}
	return ""
}

func (x *GetFullChannelInfoResp) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetAdminsCount() int32 {
	if x != nil {
		return x.AdminsCount
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetKickedCount() int32 {
	if x != nil {
		return x.KickedCount
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetBannedCount() int32 {
	if x != nil {
		return x.BannedCount
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetPinnedMsgId() int32 {
	if x != nil {
		return x.PinnedMsgId
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetMigratedFromMaxId() int32 {
	if x != nil {
		return x.MigratedFromMaxId
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetMigratedFromChatId() int32 {
	if x != nil {
		return x.MigratedFromChatId
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetAdminRights() *AdminRights {
	if x != nil {
		return x.AdminRights
	}
	return nil
}

func (x *GetFullChannelInfoResp) GetBanRights() *BannerRights {
	if x != nil {
		return x.BanRights
	}
	return nil
}

func (x *GetFullChannelInfoResp) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *GetFullChannelInfoResp) GetBotCount() int32 {
	if x != nil {
		return x.BotCount
	}
	return 0
}

func (x *GetFullChannelInfoResp) GetBotId() []int32 {
	if x != nil {
		return x.BotId
	}
	return nil
}

func (x *GetFullChannelInfoResp) GetUsers() *UserInfoArray {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetFullChannelInfoResp) GetCanSetUsername() bool {
	if x != nil {
		return x.CanSetUsername
	}
	return false
}

func (x *GetFullChannelInfoResp) GetCanViewParticipants() bool {
	if x != nil {
		return x.CanViewParticipants
	}
	return false
}

func (x *GetFullChannelInfoResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 切换邀请规则
type ToggleInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash  int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //哈希值
	AdminEnable bool          `protobuf:"varint,4,opt,name=admin_enable,json=adminEnable,proto3" json:"admin_enable,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *ToggleInviteReq) Reset() {
	*x = ToggleInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleInviteReq) ProtoMessage() {}

func (x *ToggleInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleInviteReq.ProtoReflect.Descriptor instead.
func (*ToggleInviteReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{34}
}

func (x *ToggleInviteReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ToggleInviteReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ToggleInviteReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ToggleInviteReq) GetAdminEnable() bool {
	if x != nil {
		return x.AdminEnable
	}
	return false
}

func (x *ToggleInviteReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 返回为ChannelupdatesResp  user可以为空
// -----------------------------------------------------------------------------
// 生成群群链接
type CreateChannelLinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *CreateChannelLinkReq) Reset() {
	*x = CreateChannelLinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelLinkReq) ProtoMessage() {}

func (x *CreateChannelLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelLinkReq.ProtoReflect.Descriptor instead.
func (*CreateChannelLinkReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{35}
}

func (x *CreateChannelLinkReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *CreateChannelLinkReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateChannelLinkReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 生成群链接
type CreateChannelLinkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link       string         `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`                                             //群信息
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *CreateChannelLinkResp) Reset() {
	*x = CreateChannelLinkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelLinkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelLinkResp) ProtoMessage() {}

func (x *CreateChannelLinkResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelLinkResp.ProtoReflect.Descriptor instead.
func (*CreateChannelLinkResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{36}
}

func (x *CreateChannelLinkResp) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *CreateChannelLinkResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 校验邀请链接合法
type CheckChannelInviteLinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash string        `protobuf:"bytes,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *CheckChannelInviteLinkReq) Reset() {
	*x = CheckChannelInviteLinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChannelInviteLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChannelInviteLinkReq) ProtoMessage() {}

func (x *CheckChannelInviteLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChannelInviteLinkReq.ProtoReflect.Descriptor instead.
func (*CheckChannelInviteLinkReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{37}
}

func (x *CheckChannelInviteLinkReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *CheckChannelInviteLinkReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckChannelInviteLinkReq) GetAccessHash() string {
	if x != nil {
		return x.AccessHash
	}
	return ""
}

func (x *CheckChannelInviteLinkReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 生成群链接
type CheckChannelInviteLinkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link        string           `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`    //link
	Gtype       int32            `protobuf:"varint,2,opt,name=gtype,proto3" json:"gtype,omitempty"` //0:不存在  1：普通群  2：超级群
	ChanInfo    *ChannelInfoBase `protobuf:"bytes,3,opt,name=chanInfo,proto3" json:"chanInfo,omitempty"`
	Chatinfo    *GetChatInfoResp `protobuf:"bytes,4,opt,name=chatinfo,proto3" json:"chatinfo,omitempty"`
	LinkCreator int32            `protobuf:"varint,5,opt,name=linkCreator,proto3" json:"linkCreator,omitempty"`
	Resultcode  ChatResultCode   `protobuf:"varint,6,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *CheckChannelInviteLinkResp) Reset() {
	*x = CheckChannelInviteLinkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChannelInviteLinkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChannelInviteLinkResp) ProtoMessage() {}

func (x *CheckChannelInviteLinkResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChannelInviteLinkResp.ProtoReflect.Descriptor instead.
func (*CheckChannelInviteLinkResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{38}
}

func (x *CheckChannelInviteLinkResp) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *CheckChannelInviteLinkResp) GetGtype() int32 {
	if x != nil {
		return x.Gtype
	}
	return 0
}

func (x *CheckChannelInviteLinkResp) GetChanInfo() *ChannelInfoBase {
	if x != nil {
		return x.ChanInfo
	}
	return nil
}

func (x *CheckChannelInviteLinkResp) GetChatinfo() *GetChatInfoResp {
	if x != nil {
		return x.Chatinfo
	}
	return nil
}

func (x *CheckChannelInviteLinkResp) GetLinkCreator() int32 {
	if x != nil {
		return x.LinkCreator
	}
	return 0
}

func (x *CheckChannelInviteLinkResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 更改username
type UpdateChannelUserNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName  string        `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *UpdateChannelUserNameReq) Reset() {
	*x = UpdateChannelUserNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelUserNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelUserNameReq) ProtoMessage() {}

func (x *UpdateChannelUserNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelUserNameReq.ProtoReflect.Descriptor instead.
func (*UpdateChannelUserNameReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateChannelUserNameReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChannelUserNameReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChannelUserNameReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UpdateChannelUserNameReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type UpdateChannelUserNameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *UpdateChannelUserNameResp) Reset() {
	*x = UpdateChannelUserNameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelUserNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelUserNameResp) ProtoMessage() {}

func (x *UpdateChannelUserNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelUserNameResp.ProtoReflect.Descriptor instead.
func (*UpdateChannelUserNameResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateChannelUserNameResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 更改username
type UpdateChannelPinnedMsgIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PinnedMsgId int32         `protobuf:"varint,3,opt,name=pinned_msg_id,json=pinnedMsgId,proto3" json:"pinned_msg_id,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *UpdateChannelPinnedMsgIdReq) Reset() {
	*x = UpdateChannelPinnedMsgIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelPinnedMsgIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelPinnedMsgIdReq) ProtoMessage() {}

func (x *UpdateChannelPinnedMsgIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelPinnedMsgIdReq.ProtoReflect.Descriptor instead.
func (*UpdateChannelPinnedMsgIdReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateChannelPinnedMsgIdReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChannelPinnedMsgIdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChannelPinnedMsgIdReq) GetPinnedMsgId() int32 {
	if x != nil {
		return x.PinnedMsgId
	}
	return 0
}

func (x *UpdateChannelPinnedMsgIdReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type UpdateChannelPinnedMsgIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *UpdateChannelPinnedMsgIdResp) Reset() {
	*x = UpdateChannelPinnedMsgIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelPinnedMsgIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelPinnedMsgIdResp) ProtoMessage() {}

func (x *UpdateChannelPinnedMsgIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelPinnedMsgIdResp.ProtoReflect.Descriptor instead.
func (*UpdateChannelPinnedMsgIdResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateChannelPinnedMsgIdResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 检查userName是否可用
type CheckUserNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	UserName   string        `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"` //创建时输入的username
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog,proto3" json:"Dlog,omitempty"`                         //日志
}

func (x *CheckUserNameReq) Reset() {
	*x = CheckUserNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserNameReq) ProtoMessage() {}

func (x *CheckUserNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserNameReq.ProtoReflect.Descriptor instead.
func (*CheckUserNameReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{43}
}

func (x *CheckUserNameReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *CheckUserNameReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *CheckUserNameReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CheckUserNameReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type CheckUserNameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *CheckUserNameResp) Reset() {
	*x = CheckUserNameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserNameResp) ProtoMessage() {}

func (x *CheckUserNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserNameResp.ProtoReflect.Descriptor instead.
func (*CheckUserNameResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{44}
}

func (x *CheckUserNameResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 检查群是否是加密
type CheckChannelIsEncryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog,proto3" json:"Dlog,omitempty"` //日志
}

func (x *CheckChannelIsEncryReq) Reset() {
	*x = CheckChannelIsEncryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChannelIsEncryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChannelIsEncryReq) ProtoMessage() {}

func (x *CheckChannelIsEncryReq) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChannelIsEncryReq.ProtoReflect.Descriptor instead.
func (*CheckChannelIsEncryReq) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{45}
}

func (x *CheckChannelIsEncryReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *CheckChannelIsEncryReq) GetDlog() *pbcomm.Debug {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 检查群是否是加密
type CheckChannelIsEncryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encry      bool           `protobuf:"varint,1,opt,name=encry,proto3" json:"encry,omitempty"`                                          //是否加密
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"` //结果码
}

func (x *CheckChannelIsEncryResp) Reset() {
	*x = CheckChannelIsEncryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channelservice_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChannelIsEncryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChannelIsEncryResp) ProtoMessage() {}

func (x *CheckChannelIsEncryResp) ProtoReflect() protoreflect.Message {
	mi := &file_channelservice_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChannelIsEncryResp.ProtoReflect.Descriptor instead.
func (*CheckChannelIsEncryResp) Descriptor() ([]byte, []int) {
	return file_channelservice_proto_rawDescGZIP(), []int{46}
}

func (x *CheckChannelIsEncryResp) GetEncry() bool {
	if x != nil {
		return x.Encry
	}
	return false
}

func (x *CheckChannelIsEncryResp) GetResultcode() ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

var File_channelservice_proto protoreflect.FileDescriptor

var file_channelservice_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x1a, 0x28, 0x69, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2f,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x69, 0x6d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x68,
	0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31,
	0x69, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x30, 0x69, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x08, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x65, 0x67, 0x61,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61,
	0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72,
	0x61, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x42, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x6f, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x49, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x74, 0x69, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x62, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65,
	0x51, 0x75, 0x69, 0x65, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x45, 0x76, 0x65,
	0x72, 0x79, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x69, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0xef, 0x03, 0x0a,
	0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x61, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x63, 0x61, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6a, 0x6f, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x52, 0x07, 0x61, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x62, 0x61, 0x6e,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x6b,
	0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x22, 0x47, 0x0a, 0x0c, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6f, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x22, 0xf5, 0x02, 0x0a, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x61,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x69,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x64, 0x64,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x64, 0x69, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x88, 0x03, 0x0a,
	0x0c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x67, 0x69, 0x66, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61,
	0x6e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04,
	0x44, 0x6c, 0x6f, 0x67, 0x22, 0xff, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x71, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x41, 0x64,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x21,
	0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f,
	0x67, 0x22, 0xc8, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x85, 0x01, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x41, 0x62, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04,
	0x44, 0x6c, 0x6f, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x85, 0x01, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04,
	0x44, 0x6c, 0x6f, 0x67, 0x22, 0xe9, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67,
	0x22, 0xc5, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x41, 0x64,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x64, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x61, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x0a,
	0x62, 0x61, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44,
	0x6c, 0x6f, 0x67, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6d, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x6d, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44,
	0x6c, 0x6f, 0x67, 0x22, 0x5e, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x62, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x0c, 0x0a,
	0x01, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x21, 0x0a, 0x04, 0x44,
	0x6c, 0x6f, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xd7,
	0x01, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c,
	0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0xcf, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x58, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c,
	0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x8d, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x76, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x74, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x71, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x42, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a,
	0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67,
	0x22, 0xb3, 0x06, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2d, 0x0a, 0x12,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0c,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x5f,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6f, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x43, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x43, 0x61, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x71, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x67, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x04,
	0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22,
	0x96, 0x02, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69,
	0x6e, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c,
	0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x57, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x5a, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x22, 0x4f, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5a, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x04, 0x44, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x44,
	0x6c, 0x6f, 0x67, 0x22, 0x6b, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x8b, 0x12, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x10, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62, 0x6f, 0x75,
	0x74, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x45, 0x64, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x13, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x11, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x42, 0x61, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x42, 0x61, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x4f, 0x6e, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x64, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x63, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x42,
	0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x75, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x0c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1b, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x13,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x73, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x73, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x31,
	0x5a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x69, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_channelservice_proto_rawDescOnce sync.Once
	file_channelservice_proto_rawDescData = file_channelservice_proto_rawDesc
)

func file_channelservice_proto_rawDescGZIP() []byte {
	file_channelservice_proto_rawDescOnce.Do(func() {
		file_channelservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_channelservice_proto_rawDescData)
	})
	return file_channelservice_proto_rawDescData
}

var file_channelservice_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_channelservice_proto_goTypes = []interface{}{
	(*ChannelInfoBase)(nil),              // 0: infoserver.ChannelInfoBase
	(*ChannelParticipant)(nil),           // 1: infoserver.ChannelParticipant
	(*ChannelParticipantArr)(nil),        // 2: infoserver.ChannelParticipantArr
	(*InvitedUsers)(nil),                 // 3: infoserver.InvitedUsers
	(*AdminRights)(nil),                  // 4: infoserver.AdminRights
	(*BannerRights)(nil),                 // 5: infoserver.BannerRights
	(*CreateChannelReq)(nil),             // 6: infoserver.CreateChannelReq
	(*ChannelupdatesResp)(nil),           // 7: infoserver.ChannelupdatesResp
	(*GetChannelUpdatesReq)(nil),         // 8: infoserver.GetChannelUpdatesReq
	(*AddChannelUserReq)(nil),            // 9: infoserver.AddChannelUserReq
	(*DelChannelUserReq)(nil),            // 10: infoserver.DelChannelUserReq
	(*UpdateChanAboutReq)(nil),           // 11: infoserver.UpdateChanAboutReq
	(*UpdateChanTitleReq)(nil),           // 12: infoserver.UpdateChanTitleReq
	(*UpdateChanPhotoReq)(nil),           // 13: infoserver.UpdateChanPhotoReq
	(*UpdateChanAdminRightsReq)(nil),     // 14: infoserver.UpdateChanAdminRightsReq
	(*UpdateChanAdminRightsResp)(nil),    // 15: infoserver.UpdateChanAdminRightsResp
	(*UpdateChanBanRightsReq)(nil),       // 16: infoserver.UpdateChanBanRightsReq
	(*DismissChannelReq)(nil),            // 17: infoserver.DismissChannelReq
	(*DismissChannelResp)(nil),           // 18: infoserver.DismissChannelResp
	(*ParticipantLimitReq)(nil),          // 19: infoserver.ParticipantLimitReq
	(*ParticipantLimitResp)(nil),         // 20: infoserver.ParticipantLimitResp
	(*GetChannelOnePartReq)(nil),         // 21: infoserver.GetChannelOnePartReq
	(*GetChannelOnePartResp)(nil),        // 22: infoserver.GetChannelOnePartResp
	(*GetChannelUsersIdReq)(nil),         // 23: infoserver.GetChannelUsersIdReq
	(*GetChannelUsersIdResp)(nil),        // 24: infoserver.GetChannelUsersIdResp
	(*GetChannelBaseInfoReq)(nil),        // 25: infoserver.GetChannelBaseInfoReq
	(*GetChannelBaseInfoResp)(nil),       // 26: infoserver.GetChannelBaseInfoResp
	(*GetChannelInfoReq)(nil),            // 27: infoserver.GetChannelInfoReq
	(*GetChannelInfoResp)(nil),           // 28: infoserver.GetChannelInfoResp
	(*BatchChannelBaseInfoReq)(nil),      // 29: infoserver.BatchChannelBaseInfoReq
	(*BatchChannelBaseInfoResp)(nil),     // 30: infoserver.BatchChannelBaseInfoResp
	(*GetChanByLinkReq)(nil),             // 31: infoserver.GetChanByLinkReq
	(*GetFullChannelInfoReq)(nil),        // 32: infoserver.GetFullChannelInfoReq
	(*GetFullChannelInfoResp)(nil),       // 33: infoserver.GetFullChannelInfoResp
	(*ToggleInviteReq)(nil),              // 34: infoserver.ToggleInviteReq
	(*CreateChannelLinkReq)(nil),         // 35: infoserver.CreateChannelLinkReq
	(*CreateChannelLinkResp)(nil),        // 36: infoserver.CreateChannelLinkResp
	(*CheckChannelInviteLinkReq)(nil),    // 37: infoserver.CheckChannelInviteLinkReq
	(*CheckChannelInviteLinkResp)(nil),   // 38: infoserver.CheckChannelInviteLinkResp
	(*UpdateChannelUserNameReq)(nil),     // 39: infoserver.UpdateChannelUserNameReq
	(*UpdateChannelUserNameResp)(nil),    // 40: infoserver.UpdateChannelUserNameResp
	(*UpdateChannelPinnedMsgIdReq)(nil),  // 41: infoserver.UpdateChannelPinnedMsgIdReq
	(*UpdateChannelPinnedMsgIdResp)(nil), // 42: infoserver.UpdateChannelPinnedMsgIdResp
	(*CheckUserNameReq)(nil),             // 43: infoserver.CheckUserNameReq
	(*CheckUserNameResp)(nil),            // 44: infoserver.CheckUserNameResp
	(*CheckChannelIsEncryReq)(nil),       // 45: infoserver.CheckChannelIsEncryReq
	(*CheckChannelIsEncryResp)(nil),      // 46: infoserver.CheckChannelIsEncryResp
	(ChatResultCode)(0),                  // 47: infoserver.ChatResultCode
	(*pbcomm.Debug)(nil),                 // 48: pbcomm.Debug
	(*UserInfoArray)(nil),                // 49: infoserver.UserInfoArray
	(*UserInfo)(nil),                     // 50: infoserver.userInfo
	(*GetChatInfoResp)(nil),              // 51: infoserver.GetChatInfoResp
}
var file_channelservice_proto_depIdxs = []int32{
	4,  // 0: infoserver.ChannelParticipant.ad_right:type_name -> infoserver.AdminRights
	5,  // 1: infoserver.ChannelParticipant.ban_right:type_name -> infoserver.BannerRights
	47, // 2: infoserver.ChannelParticipant.resultcode:type_name -> infoserver.ChatResultCode
	1,  // 3: infoserver.ChannelParticipantArr.part:type_name -> infoserver.ChannelParticipant
	48, // 4: infoserver.CreateChannelReq.Dlog:type_name -> pbcomm.Debug
	0,  // 5: infoserver.ChannelupdatesResp.channel:type_name -> infoserver.ChannelInfoBase
	49, // 6: infoserver.ChannelupdatesResp.users:type_name -> infoserver.UserInfoArray
	2,  // 7: infoserver.ChannelupdatesResp.participants:type_name -> infoserver.ChannelParticipantArr
	47, // 8: infoserver.ChannelupdatesResp.resultcode:type_name -> infoserver.ChatResultCode
	48, // 9: infoserver.GetChannelUpdatesReq.Dlog:type_name -> pbcomm.Debug
	3,  // 10: infoserver.AddChannelUserReq.users:type_name -> infoserver.InvitedUsers
	48, // 11: infoserver.AddChannelUserReq.Dlog:type_name -> pbcomm.Debug
	48, // 12: infoserver.DelChannelUserReq.Dlog:type_name -> pbcomm.Debug
	48, // 13: infoserver.UpdateChanAboutReq.Dlog:type_name -> pbcomm.Debug
	48, // 14: infoserver.UpdateChanTitleReq.Dlog:type_name -> pbcomm.Debug
	48, // 15: infoserver.UpdateChanPhotoReq.Dlog:type_name -> pbcomm.Debug
	4,  // 16: infoserver.UpdateChanAdminRightsReq.admin_rights:type_name -> infoserver.AdminRights
	48, // 17: infoserver.UpdateChanAdminRightsReq.Dlog:type_name -> pbcomm.Debug
	7,  // 18: infoserver.UpdateChanAdminRightsResp.updates:type_name -> infoserver.ChannelupdatesResp
	47, // 19: infoserver.UpdateChanAdminRightsResp.resultcode:type_name -> infoserver.ChatResultCode
	5,  // 20: infoserver.UpdateChanBanRightsReq.ban_rights:type_name -> infoserver.BannerRights
	48, // 21: infoserver.UpdateChanBanRightsReq.Dlog:type_name -> pbcomm.Debug
	48, // 22: infoserver.DismissChannelReq.Dlog:type_name -> pbcomm.Debug
	47, // 23: infoserver.DismissChannelResp.resultcode:type_name -> infoserver.ChatResultCode
	48, // 24: infoserver.ParticipantLimitReq.Dlog:type_name -> pbcomm.Debug
	1,  // 25: infoserver.ParticipantLimitResp.part:type_name -> infoserver.ChannelParticipant
	49, // 26: infoserver.ParticipantLimitResp.users:type_name -> infoserver.UserInfoArray
	47, // 27: infoserver.ParticipantLimitResp.resultcode:type_name -> infoserver.ChatResultCode
	48, // 28: infoserver.GetChannelOnePartReq.Dlog:type_name -> pbcomm.Debug
	1,  // 29: infoserver.GetChannelOnePartResp.one_participant:type_name -> infoserver.ChannelParticipant
	50, // 30: infoserver.GetChannelOnePartResp.user_info:type_name -> infoserver.userInfo
	47, // 31: infoserver.GetChannelOnePartResp.resultcode:type_name -> infoserver.ChatResultCode
	48, // 32: infoserver.GetChannelUsersIdReq.Dlog:type_name -> pbcomm.Debug
	47, // 33: infoserver.GetChannelUsersIdResp.resultcode:type_name -> infoserver.ChatResultCode
	48, // 34: infoserver.GetChannelBaseInfoReq.Dlog:type_name -> pbcomm.Debug
	0,  // 35: infoserver.GetChannelBaseInfoResp.baseInfo:type_name -> infoserver.ChannelInfoBase
	47, // 36: infoserver.GetChannelBaseInfoResp.resultcode:type_name -> infoserver.ChatResultCode
	48, // 37: infoserver.GetChannelInfoReq.Dlog:type_name -> pbcomm.Debug
	0,  // 38: infoserver.GetChannelInfoResp.baseInfo:type_name -> infoserver.ChannelInfoBase
	47, // 39: infoserver.GetChannelInfoResp.resultcode:type_name -> infoserver.ChatResultCode
	48, // 40: infoserver.BatchChannelBaseInfoReq.Dlog:type_name -> pbcomm.Debug
	0,  // 41: infoserver.BatchChannelBaseInfoResp.channel:type_name -> infoserver.ChannelInfoBase
	47, // 42: infoserver.BatchChannelBaseInfoResp.resultcode:type_name -> infoserver.ChatResultCode
	48, // 43: infoserver.GetChanByLinkReq.Dlog:type_name -> pbcomm.Debug
	48, // 44: infoserver.GetFullChannelInfoReq.Dlog:type_name -> pbcomm.Debug
	0,  // 45: infoserver.GetFullChannelInfoResp.channelinfo:type_name -> infoserver.ChannelInfoBase
	4,  // 46: infoserver.GetFullChannelInfoResp.admin_rights:type_name -> infoserver.AdminRights
	5,  // 47: infoserver.GetFullChannelInfoResp.ban_rights:type_name -> infoserver.BannerRights
	49, // 48: infoserver.GetFullChannelInfoResp.users:type_name -> infoserver.UserInfoArray
	47, // 49: infoserver.GetFullChannelInfoResp.resultcode:type_name -> infoserver.ChatResultCode
	48, // 50: infoserver.ToggleInviteReq.Dlog:type_name -> pbcomm.Debug
	48, // 51: infoserver.CreateChannelLinkReq.Dlog:type_name -> pbcomm.Debug
	47, // 52: infoserver.CreateChannelLinkResp.resultcode:type_name -> infoserver.ChatResultCode
	48, // 53: infoserver.CheckChannelInviteLinkReq.Dlog:type_name -> pbcomm.Debug
	0,  // 54: infoserver.CheckChannelInviteLinkResp.chanInfo:type_name -> infoserver.ChannelInfoBase
	51, // 55: infoserver.CheckChannelInviteLinkResp.chatinfo:type_name -> infoserver.GetChatInfoResp
	47, // 56: infoserver.CheckChannelInviteLinkResp.resultcode:type_name -> infoserver.ChatResultCode
	48, // 57: infoserver.UpdateChannelUserNameReq.Dlog:type_name -> pbcomm.Debug
	47, // 58: infoserver.UpdateChannelUserNameResp.resultcode:type_name -> infoserver.ChatResultCode
	48, // 59: infoserver.UpdateChannelPinnedMsgIdReq.Dlog:type_name -> pbcomm.Debug
	47, // 60: infoserver.UpdateChannelPinnedMsgIdResp.resultcode:type_name -> infoserver.ChatResultCode
	48, // 61: infoserver.CheckUserNameReq.Dlog:type_name -> pbcomm.Debug
	47, // 62: infoserver.CheckUserNameResp.resultcode:type_name -> infoserver.ChatResultCode
	48, // 63: infoserver.CheckChannelIsEncryReq.Dlog:type_name -> pbcomm.Debug
	47, // 64: infoserver.CheckChannelIsEncryResp.resultcode:type_name -> infoserver.ChatResultCode
	6,  // 65: infoserver.ChannelServerService.CreateChannel:input_type -> infoserver.CreateChannelReq
	8,  // 66: infoserver.ChannelServerService.GetChannelUpdatesInfo:input_type -> infoserver.GetChannelUpdatesReq
	9,  // 67: infoserver.ChannelServerService.AddChannelUser:input_type -> infoserver.AddChannelUserReq
	10, // 68: infoserver.ChannelServerService.DelChannelUser:input_type -> infoserver.DelChannelUserReq
	11, // 69: infoserver.ChannelServerService.EditChannelAbout:input_type -> infoserver.UpdateChanAboutReq
	12, // 70: infoserver.ChannelServerService.EditChannelTitle:input_type -> infoserver.UpdateChanTitleReq
	13, // 71: infoserver.ChannelServerService.EditChannelPhoto:input_type -> infoserver.UpdateChanPhotoReq
	14, // 72: infoserver.ChannelServerService.EditChanAdminRights:input_type -> infoserver.UpdateChanAdminRightsReq
	16, // 73: infoserver.ChannelServerService.EditChanBanRights:input_type -> infoserver.UpdateChanBanRightsReq
	17, // 74: infoserver.ChannelServerService.DismissChannel:input_type -> infoserver.DismissChannelReq
	19, // 75: infoserver.ChannelServerService.GetParticipantLimitReq:input_type -> infoserver.ParticipantLimitReq
	21, // 76: infoserver.ChannelServerService.GetChanOneParticipantReq:input_type -> infoserver.GetChannelOnePartReq
	23, // 77: infoserver.ChannelServerService.GetChanUsersId:input_type -> infoserver.GetChannelUsersIdReq
	25, // 78: infoserver.ChannelServerService.GetChannelBaseInfo:input_type -> infoserver.GetChannelBaseInfoReq
	27, // 79: infoserver.ChannelServerService.GetChannelInfo:input_type -> infoserver.GetChannelInfoReq
	29, // 80: infoserver.ChannelServerService.GetBatchChanBaseInfo:input_type -> infoserver.BatchChannelBaseInfoReq
	31, // 81: infoserver.ChannelServerService.GetChanInfoByLink:input_type -> infoserver.GetChanByLinkReq
	32, // 82: infoserver.ChannelServerService.GetChannelFullInfo:input_type -> infoserver.GetFullChannelInfoReq
	34, // 83: infoserver.ChannelServerService.ToggleInvite:input_type -> infoserver.ToggleInviteReq
	35, // 84: infoserver.ChannelServerService.CreateChannelLink:input_type -> infoserver.CreateChannelLinkReq
	37, // 85: infoserver.ChannelServerService.CheckChannelInviteLink:input_type -> infoserver.CheckChannelInviteLinkReq
	39, // 86: infoserver.ChannelServerService.UpdateChannelUserName:input_type -> infoserver.UpdateChannelUserNameReq
	41, // 87: infoserver.ChannelServerService.UpdateChannelPinnedMsgId:input_type -> infoserver.UpdateChannelPinnedMsgIdReq
	43, // 88: infoserver.ChannelServerService.CheckUserName:input_type -> infoserver.CheckUserNameReq
	45, // 89: infoserver.ChannelServerService.CheckChannelIsEncry:input_type -> infoserver.CheckChannelIsEncryReq
	7,  // 90: infoserver.ChannelServerService.CreateChannel:output_type -> infoserver.ChannelupdatesResp
	7,  // 91: infoserver.ChannelServerService.GetChannelUpdatesInfo:output_type -> infoserver.ChannelupdatesResp
	7,  // 92: infoserver.ChannelServerService.AddChannelUser:output_type -> infoserver.ChannelupdatesResp
	7,  // 93: infoserver.ChannelServerService.DelChannelUser:output_type -> infoserver.ChannelupdatesResp
	7,  // 94: infoserver.ChannelServerService.EditChannelAbout:output_type -> infoserver.ChannelupdatesResp
	7,  // 95: infoserver.ChannelServerService.EditChannelTitle:output_type -> infoserver.ChannelupdatesResp
	7,  // 96: infoserver.ChannelServerService.EditChannelPhoto:output_type -> infoserver.ChannelupdatesResp
	15, // 97: infoserver.ChannelServerService.EditChanAdminRights:output_type -> infoserver.UpdateChanAdminRightsResp
	7,  // 98: infoserver.ChannelServerService.EditChanBanRights:output_type -> infoserver.ChannelupdatesResp
	18, // 99: infoserver.ChannelServerService.DismissChannel:output_type -> infoserver.DismissChannelResp
	20, // 100: infoserver.ChannelServerService.GetParticipantLimitReq:output_type -> infoserver.ParticipantLimitResp
	22, // 101: infoserver.ChannelServerService.GetChanOneParticipantReq:output_type -> infoserver.GetChannelOnePartResp
	24, // 102: infoserver.ChannelServerService.GetChanUsersId:output_type -> infoserver.GetChannelUsersIdResp
	26, // 103: infoserver.ChannelServerService.GetChannelBaseInfo:output_type -> infoserver.GetChannelBaseInfoResp
	28, // 104: infoserver.ChannelServerService.GetChannelInfo:output_type -> infoserver.GetChannelInfoResp
	30, // 105: infoserver.ChannelServerService.GetBatchChanBaseInfo:output_type -> infoserver.BatchChannelBaseInfoResp
	26, // 106: infoserver.ChannelServerService.GetChanInfoByLink:output_type -> infoserver.GetChannelBaseInfoResp
	33, // 107: infoserver.ChannelServerService.GetChannelFullInfo:output_type -> infoserver.GetFullChannelInfoResp
	7,  // 108: infoserver.ChannelServerService.ToggleInvite:output_type -> infoserver.ChannelupdatesResp
	36, // 109: infoserver.ChannelServerService.CreateChannelLink:output_type -> infoserver.CreateChannelLinkResp
	38, // 110: infoserver.ChannelServerService.CheckChannelInviteLink:output_type -> infoserver.CheckChannelInviteLinkResp
	40, // 111: infoserver.ChannelServerService.UpdateChannelUserName:output_type -> infoserver.UpdateChannelUserNameResp
	42, // 112: infoserver.ChannelServerService.UpdateChannelPinnedMsgId:output_type -> infoserver.UpdateChannelPinnedMsgIdResp
	44, // 113: infoserver.ChannelServerService.CheckUserName:output_type -> infoserver.CheckUserNameResp
	46, // 114: infoserver.ChannelServerService.CheckChannelIsEncry:output_type -> infoserver.CheckChannelIsEncryResp
	90, // [90:115] is the sub-list for method output_type
	65, // [65:90] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_channelservice_proto_init() }
func file_channelservice_proto_init() {
	if File_channelservice_proto != nil {
		return
	}
	file_iminterfaceprotobufs_infoserver_chatcommon_proto_init()
	file_iminterfaceprotobufs_infoserver_chatservice_proto_init()
	file_iminterfaceprotobufs_infoserver_userserver_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_channelservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfoBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelParticipantArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitedUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelupdatesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelUpdatesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddChannelUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChannelUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChanAboutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChanTitleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChanPhotoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChanAdminRightsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChanAdminRightsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChanBanRightsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DismissChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DismissChannelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantLimitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantLimitResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelOnePartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelOnePartResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelUsersIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelUsersIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelBaseInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelBaseInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchChannelBaseInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchChannelBaseInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChanByLinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullChannelInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullChannelInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelLinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelLinkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChannelInviteLinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChannelInviteLinkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelUserNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelUserNameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelPinnedMsgIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelPinnedMsgIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserNameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChannelIsEncryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channelservice_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChannelIsEncryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_channelservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_channelservice_proto_goTypes,
		DependencyIndexes: file_channelservice_proto_depIdxs,
		MessageInfos:      file_channelservice_proto_msgTypes,
	}.Build()
	File_channelservice_proto = out.File
	file_channelservice_proto_rawDesc = nil
	file_channelservice_proto_goTypes = nil
	file_channelservice_proto_depIdxs = nil
}
