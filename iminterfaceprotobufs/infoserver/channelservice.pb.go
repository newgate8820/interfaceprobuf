// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/channelservice.proto

package infoserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/pbcomm"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ---基础结构体-----------------------------------------------------------------------
// 群基础信息
type ChannelInfoBase struct {
	ChannelId         int32  `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash        int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Encry             bool   `protobuf:"varint,3,opt,name=encry,proto3" json:"encry,omitempty"`
	Broadcast         bool   `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Verified          bool   `protobuf:"varint,5,opt,name=verified,proto3" json:"verified,omitempty"`
	Megagroup         bool   `protobuf:"varint,6,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	Restricted        bool   `protobuf:"varint,7,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Democracy         bool   `protobuf:"varint,8,opt,name=democracy,proto3" json:"democracy,omitempty"`
	Signatures        bool   `protobuf:"varint,9,opt,name=signatures,proto3" json:"signatures,omitempty"`
	Min               bool   `protobuf:"varint,10,opt,name=min,proto3" json:"min,omitempty"`
	Title             string `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`
	Username          string `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`
	Photo             string `protobuf:"bytes,13,opt,name=photo,proto3" json:"photo,omitempty"`
	Date              int32  `protobuf:"varint,14,opt,name=date,proto3" json:"date,omitempty"`
	Version           int32  `protobuf:"varint,15,opt,name=version,proto3" json:"version,omitempty"`
	RestrictionReason string `protobuf:"bytes,16,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
	Cluster           int32  `protobuf:"varint,17,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// bool moderator = 18; //是不是主持人
	IsCreator bool `protobuf:"varint,18,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"`
	// bool editor = 19; //是否是管理员
	IsAdmin            bool   `protobuf:"varint,19,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	Left               bool   `protobuf:"varint,20,opt,name=left,proto3" json:"left,omitempty"`
	Kicked             bool   `protobuf:"varint,21,opt,name=kicked,proto3" json:"kicked,omitempty"`
	MigratedFromChatId int32  `protobuf:"varint,22,opt,name=migrated_from_chat_id,json=migratedFromChatId,proto3" json:"migrated_from_chat_id,omitempty"`
	InviteRule         int32  `protobuf:"varint,23,opt,name=invite_rule,json=inviteRule,proto3" json:"invite_rule,omitempty"`
	AdminsCount        int32  `protobuf:"varint,24,opt,name=Admins_count,json=AdminsCount,proto3" json:"Admins_count,omitempty"`
	KickedCount        int32  `protobuf:"varint,25,opt,name=Kicked_count,json=KickedCount,proto3" json:"Kicked_count,omitempty"`
	BannedCount        int32  `protobuf:"varint,26,opt,name=Banned_count,json=BannedCount,proto3" json:"Banned_count,omitempty"`
	BotCount           int32  `protobuf:"varint,27,opt,name=Bot_count,json=BotCount,proto3" json:"Bot_count,omitempty"`
	ParticipantsCount  int32  `protobuf:"varint,28,opt,name=Participants_count,json=ParticipantsCount,proto3" json:"Participants_count,omitempty"`
	IsInChannel        bool   `protobuf:"varint,29,opt,name=IsInChannel,proto3" json:"IsInChannel,omitempty"`
	UtilDate           int32  `protobuf:"varint,30,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ExportedInviteLink string `protobuf:"bytes,31,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"`
	Creator            int32  `protobuf:"varint,32,opt,name=Creator,proto3" json:"Creator,omitempty"`
	About              string `protobuf:"bytes,33,opt,name=About,proto3" json:"About,omitempty"`
	EveryoneQuiet      bool   `protobuf:"varint,34,opt,name=EveryoneQuiet,proto3" json:"EveryoneQuiet,omitempty"`
	PrivateChat        bool   `protobuf:"varint,35,opt,name=PrivateChat,proto3" json:"PrivateChat,omitempty"`
}

func (m *ChannelInfoBase) Reset()                    { *m = ChannelInfoBase{} }
func (m *ChannelInfoBase) String() string            { return proto.CompactTextString(m) }
func (*ChannelInfoBase) ProtoMessage()               {}
func (*ChannelInfoBase) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{0} }

func (m *ChannelInfoBase) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelInfoBase) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ChannelInfoBase) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *ChannelInfoBase) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *ChannelInfoBase) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *ChannelInfoBase) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *ChannelInfoBase) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *ChannelInfoBase) GetDemocracy() bool {
	if m != nil {
		return m.Democracy
	}
	return false
}

func (m *ChannelInfoBase) GetSignatures() bool {
	if m != nil {
		return m.Signatures
	}
	return false
}

func (m *ChannelInfoBase) GetMin() bool {
	if m != nil {
		return m.Min
	}
	return false
}

func (m *ChannelInfoBase) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChannelInfoBase) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ChannelInfoBase) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *ChannelInfoBase) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ChannelInfoBase) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ChannelInfoBase) GetRestrictionReason() string {
	if m != nil {
		return m.RestrictionReason
	}
	return ""
}

func (m *ChannelInfoBase) GetCluster() int32 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *ChannelInfoBase) GetIsCreator() bool {
	if m != nil {
		return m.IsCreator
	}
	return false
}

func (m *ChannelInfoBase) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *ChannelInfoBase) GetLeft() bool {
	if m != nil {
		return m.Left
	}
	return false
}

func (m *ChannelInfoBase) GetKicked() bool {
	if m != nil {
		return m.Kicked
	}
	return false
}

func (m *ChannelInfoBase) GetMigratedFromChatId() int32 {
	if m != nil {
		return m.MigratedFromChatId
	}
	return 0
}

func (m *ChannelInfoBase) GetInviteRule() int32 {
	if m != nil {
		return m.InviteRule
	}
	return 0
}

func (m *ChannelInfoBase) GetAdminsCount() int32 {
	if m != nil {
		return m.AdminsCount
	}
	return 0
}

func (m *ChannelInfoBase) GetKickedCount() int32 {
	if m != nil {
		return m.KickedCount
	}
	return 0
}

func (m *ChannelInfoBase) GetBannedCount() int32 {
	if m != nil {
		return m.BannedCount
	}
	return 0
}

func (m *ChannelInfoBase) GetBotCount() int32 {
	if m != nil {
		return m.BotCount
	}
	return 0
}

func (m *ChannelInfoBase) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *ChannelInfoBase) GetIsInChannel() bool {
	if m != nil {
		return m.IsInChannel
	}
	return false
}

func (m *ChannelInfoBase) GetUtilDate() int32 {
	if m != nil {
		return m.UtilDate
	}
	return 0
}

func (m *ChannelInfoBase) GetExportedInviteLink() string {
	if m != nil {
		return m.ExportedInviteLink
	}
	return ""
}

func (m *ChannelInfoBase) GetCreator() int32 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *ChannelInfoBase) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ChannelInfoBase) GetEveryoneQuiet() bool {
	if m != nil {
		return m.EveryoneQuiet
	}
	return false
}

func (m *ChannelInfoBase) GetPrivateChat() bool {
	if m != nil {
		return m.PrivateChat
	}
	return false
}

// 群成员的基础信息
type ChannelParticipant struct {
	UserId              int32          `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InviteId            int32          `protobuf:"varint,2,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`
	CanSetUsername      bool           `protobuf:"varint,3,opt,name=can_set_username,json=canSetUsername,proto3" json:"can_set_username,omitempty"`
	CanViewParticipants bool           `protobuf:"varint,4,opt,name=can_view_participants,json=canViewParticipants,proto3" json:"can_view_participants,omitempty"`
	IsCreator           bool           `protobuf:"varint,5,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"`
	IsAdmin             bool           `protobuf:"varint,6,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	IsBan               bool           `protobuf:"varint,7,opt,name=is_ban,json=isBan,proto3" json:"is_ban,omitempty"`
	JoinTime            int32          `protobuf:"varint,8,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	AdRight             *AdminRights   `protobuf:"bytes,9,opt,name=ad_right,json=adRight" json:"ad_right,omitempty"`
	BanRight            *BannerRights  `protobuf:"bytes,10,opt,name=ban_right,json=banRight" json:"ban_right,omitempty"`
	Resultcode          ChatResultCode `protobuf:"varint,11,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
	ExportedInviteLink  string         `protobuf:"bytes,12,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"`
}

func (m *ChannelParticipant) Reset()         { *m = ChannelParticipant{} }
func (m *ChannelParticipant) String() string { return proto.CompactTextString(m) }
func (*ChannelParticipant) ProtoMessage()    {}
func (*ChannelParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{1}
}

func (m *ChannelParticipant) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelParticipant) GetInviteId() int32 {
	if m != nil {
		return m.InviteId
	}
	return 0
}

func (m *ChannelParticipant) GetCanSetUsername() bool {
	if m != nil {
		return m.CanSetUsername
	}
	return false
}

func (m *ChannelParticipant) GetCanViewParticipants() bool {
	if m != nil {
		return m.CanViewParticipants
	}
	return false
}

func (m *ChannelParticipant) GetIsCreator() bool {
	if m != nil {
		return m.IsCreator
	}
	return false
}

func (m *ChannelParticipant) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *ChannelParticipant) GetIsBan() bool {
	if m != nil {
		return m.IsBan
	}
	return false
}

func (m *ChannelParticipant) GetJoinTime() int32 {
	if m != nil {
		return m.JoinTime
	}
	return 0
}

func (m *ChannelParticipant) GetAdRight() *AdminRights {
	if m != nil {
		return m.AdRight
	}
	return nil
}

func (m *ChannelParticipant) GetBanRight() *BannerRights {
	if m != nil {
		return m.BanRight
	}
	return nil
}

func (m *ChannelParticipant) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

func (m *ChannelParticipant) GetExportedInviteLink() string {
	if m != nil {
		return m.ExportedInviteLink
	}
	return ""
}

// 群成员的列表
type ChannelParticipantArr struct {
	TotalCount int32                 `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	Part       []*ChannelParticipant `protobuf:"bytes,2,rep,name=part" json:"part,omitempty"`
}

func (m *ChannelParticipantArr) Reset()         { *m = ChannelParticipantArr{} }
func (m *ChannelParticipantArr) String() string { return proto.CompactTextString(m) }
func (*ChannelParticipantArr) ProtoMessage()    {}
func (*ChannelParticipantArr) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{2}
}

func (m *ChannelParticipantArr) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ChannelParticipantArr) GetPart() []*ChannelParticipant {
	if m != nil {
		return m.Part
	}
	return nil
}

// 邀请用户
type InvitedUsers struct {
	UserId    int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsBotUser bool  `protobuf:"varint,2,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"`
}

func (m *InvitedUsers) Reset()                    { *m = InvitedUsers{} }
func (m *InvitedUsers) String() string            { return proto.CompactTextString(m) }
func (*InvitedUsers) ProtoMessage()               {}
func (*InvitedUsers) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{3} }

func (m *InvitedUsers) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *InvitedUsers) GetIsBotUser() bool {
	if m != nil {
		return m.IsBotUser
	}
	return false
}

// 管理员相关权限
type AdminRights struct {
	ChangeGroupInfo bool  `protobuf:"varint,1,opt,name=change_group_info,json=changeGroupInfo,proto3" json:"change_group_info,omitempty"`
	DeleteMessages  bool  `protobuf:"varint,2,opt,name=delete_messages,json=deleteMessages,proto3" json:"delete_messages,omitempty"`
	BanUsers        bool  `protobuf:"varint,3,opt,name=ban_users,json=banUsers,proto3" json:"ban_users,omitempty"`
	PinMessages     bool  `protobuf:"varint,4,opt,name=pin_messages,json=pinMessages,proto3" json:"pin_messages,omitempty"`
	AddNewAdmin     bool  `protobuf:"varint,5,opt,name=add_new_admin,json=addNewAdmin,proto3" json:"add_new_admin,omitempty"`
	PromotedBy      int32 `protobuf:"varint,6,opt,name=promoted_by,json=promotedBy,proto3" json:"promoted_by,omitempty"`
	PostMessages    bool  `protobuf:"varint,7,opt,name=post_messages,json=postMessages,proto3" json:"post_messages,omitempty"`
	EditMessages    bool  `protobuf:"varint,8,opt,name=edit_messages,json=editMessages,proto3" json:"edit_messages,omitempty"`
	InviteUsers     bool  `protobuf:"varint,9,opt,name=invite_users,json=inviteUsers,proto3" json:"invite_users,omitempty"`
	InviteLink      bool  `protobuf:"varint,10,opt,name=invite_link,json=inviteLink,proto3" json:"invite_link,omitempty"`
}

func (m *AdminRights) Reset()                    { *m = AdminRights{} }
func (m *AdminRights) String() string            { return proto.CompactTextString(m) }
func (*AdminRights) ProtoMessage()               {}
func (*AdminRights) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{4} }

func (m *AdminRights) GetChangeGroupInfo() bool {
	if m != nil {
		return m.ChangeGroupInfo
	}
	return false
}

func (m *AdminRights) GetDeleteMessages() bool {
	if m != nil {
		return m.DeleteMessages
	}
	return false
}

func (m *AdminRights) GetBanUsers() bool {
	if m != nil {
		return m.BanUsers
	}
	return false
}

func (m *AdminRights) GetPinMessages() bool {
	if m != nil {
		return m.PinMessages
	}
	return false
}

func (m *AdminRights) GetAddNewAdmin() bool {
	if m != nil {
		return m.AddNewAdmin
	}
	return false
}

func (m *AdminRights) GetPromotedBy() int32 {
	if m != nil {
		return m.PromotedBy
	}
	return 0
}

func (m *AdminRights) GetPostMessages() bool {
	if m != nil {
		return m.PostMessages
	}
	return false
}

func (m *AdminRights) GetEditMessages() bool {
	if m != nil {
		return m.EditMessages
	}
	return false
}

func (m *AdminRights) GetInviteUsers() bool {
	if m != nil {
		return m.InviteUsers
	}
	return false
}

func (m *AdminRights) GetInviteLink() bool {
	if m != nil {
		return m.InviteLink
	}
	return false
}

// bannner用户的权限
type BannerRights struct {
	CanReadMessages bool  `protobuf:"varint,1,opt,name=can_read_messages,json=canReadMessages,proto3" json:"can_read_messages,omitempty"`
	CanSendMessge   bool  `protobuf:"varint,2,opt,name=can_send_messge,json=canSendMessge,proto3" json:"can_send_messge,omitempty"`
	CanSendMedia    bool  `protobuf:"varint,3,opt,name=can_send_media,json=canSendMedia,proto3" json:"can_send_media,omitempty"`
	CanSendSticker  bool  `protobuf:"varint,4,opt,name=can_send_sticker,json=canSendSticker,proto3" json:"can_send_sticker,omitempty"`
	CanEmbedLinks   bool  `protobuf:"varint,5,opt,name=can_embed_links,json=canEmbedLinks,proto3" json:"can_embed_links,omitempty"`
	KickedBy        int32 `protobuf:"varint,6,opt,name=kicked_by,json=kickedBy,proto3" json:"kicked_by,omitempty"`
	UntilDate       int32 `protobuf:"varint,7,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
	CanSendGifs     bool  `protobuf:"varint,8,opt,name=can_send_gifs,json=canSendGifs,proto3" json:"can_send_gifs,omitempty"`
	CanSendGames    bool  `protobuf:"varint,9,opt,name=can_send_games,json=canSendGames,proto3" json:"can_send_games,omitempty"`
	CanSendInline   bool  `protobuf:"varint,10,opt,name=can_send_inline,json=canSendInline,proto3" json:"can_send_inline,omitempty"`
}

func (m *BannerRights) Reset()                    { *m = BannerRights{} }
func (m *BannerRights) String() string            { return proto.CompactTextString(m) }
func (*BannerRights) ProtoMessage()               {}
func (*BannerRights) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{5} }

func (m *BannerRights) GetCanReadMessages() bool {
	if m != nil {
		return m.CanReadMessages
	}
	return false
}

func (m *BannerRights) GetCanSendMessge() bool {
	if m != nil {
		return m.CanSendMessge
	}
	return false
}

func (m *BannerRights) GetCanSendMedia() bool {
	if m != nil {
		return m.CanSendMedia
	}
	return false
}

func (m *BannerRights) GetCanSendSticker() bool {
	if m != nil {
		return m.CanSendSticker
	}
	return false
}

func (m *BannerRights) GetCanEmbedLinks() bool {
	if m != nil {
		return m.CanEmbedLinks
	}
	return false
}

func (m *BannerRights) GetKickedBy() int32 {
	if m != nil {
		return m.KickedBy
	}
	return 0
}

func (m *BannerRights) GetUntilDate() int32 {
	if m != nil {
		return m.UntilDate
	}
	return 0
}

func (m *BannerRights) GetCanSendGifs() bool {
	if m != nil {
		return m.CanSendGifs
	}
	return false
}

func (m *BannerRights) GetCanSendGames() bool {
	if m != nil {
		return m.CanSendGames
	}
	return false
}

func (m *BannerRights) GetCanSendInline() bool {
	if m != nil {
		return m.CanSendInline
	}
	return false
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// 创建频道的请求包
type CreateChannelReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	CreatorId  int32         `protobuf:"varint,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Title      string        `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	About      string        `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	Broadcast  bool          `protobuf:"varint,6,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Megagroup  bool          `protobuf:"varint,7,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	Cluster    int32         `protobuf:"varint,8,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Date       int32         `protobuf:"varint,9,opt,name=date,proto3" json:"date,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,10,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CreateChannelReq) Reset()                    { *m = CreateChannelReq{} }
func (m *CreateChannelReq) String() string            { return proto.CompactTextString(m) }
func (*CreateChannelReq) ProtoMessage()               {}
func (*CreateChannelReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{6} }

func (m *CreateChannelReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *CreateChannelReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *CreateChannelReq) GetCreatorId() int32 {
	if m != nil {
		return m.CreatorId
	}
	return 0
}

func (m *CreateChannelReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateChannelReq) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *CreateChannelReq) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *CreateChannelReq) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *CreateChannelReq) GetCluster() int32 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *CreateChannelReq) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *CreateChannelReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type ChannelupdatesResp struct {
	Channel      *ChannelInfoBase       `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Users        *UserInfoArray         `protobuf:"bytes,2,opt,name=users" json:"users,omitempty"`
	Participants *ChannelParticipantArr `protobuf:"bytes,3,opt,name=participants" json:"participants,omitempty"`
	Resultcode   ChatResultCode         `protobuf:"varint,4,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChannelupdatesResp) Reset()         { *m = ChannelupdatesResp{} }
func (m *ChannelupdatesResp) String() string { return proto.CompactTextString(m) }
func (*ChannelupdatesResp) ProtoMessage()    {}
func (*ChannelupdatesResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{7}
}

func (m *ChannelupdatesResp) GetChannel() *ChannelInfoBase {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *ChannelupdatesResp) GetUsers() *UserInfoArray {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ChannelupdatesResp) GetParticipants() *ChannelParticipantArr {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *ChannelupdatesResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获取channel信息
type GetChannelUpdatesReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChannelUpdatesReq) Reset()         { *m = GetChannelUpdatesReq{} }
func (m *GetChannelUpdatesReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelUpdatesReq) ProtoMessage()    {}
func (*GetChannelUpdatesReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{8}
}

func (m *GetChannelUpdatesReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelUpdatesReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChannelUpdatesReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 添加(主动加入)超级群、频道的用户的请求
type AddChannelUserReq struct {
	ChannelId  int32           `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	InvitorId  int32           `protobuf:"varint,2,opt,name=invitor_id,json=invitorId,proto3" json:"invitor_id,omitempty"`
	AccessHash int64           `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Users      []*InvitedUsers `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	Dlog       *pbcomm.Debug   `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *AddChannelUserReq) Reset()                    { *m = AddChannelUserReq{} }
func (m *AddChannelUserReq) String() string            { return proto.CompactTextString(m) }
func (*AddChannelUserReq) ProtoMessage()               {}
func (*AddChannelUserReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{9} }

func (m *AddChannelUserReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *AddChannelUserReq) GetInvitorId() int32 {
	if m != nil {
		return m.InvitorId
	}
	return 0
}

func (m *AddChannelUserReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *AddChannelUserReq) GetUsers() []*InvitedUsers {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *AddChannelUserReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 踢人或者主动离开超级群、频道的的请求接口
type DelChannelUserReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsBotUser bool          `protobuf:"varint,3,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"`
	IsKicked  bool          `protobuf:"varint,4,opt,name=is_kicked,json=isKicked,proto3" json:"is_kicked,omitempty"`
	KickedId  int32         `protobuf:"varint,5,opt,name=Kicked_id,json=KickedId,proto3" json:"Kicked_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *DelChannelUserReq) Reset()         { *m = DelChannelUserReq{} }
func (m *DelChannelUserReq) String() string { return proto.CompactTextString(m) }
func (*DelChannelUserReq) ProtoMessage()    {}
func (*DelChannelUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{10}
}

func (m *DelChannelUserReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *DelChannelUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelChannelUserReq) GetIsBotUser() bool {
	if m != nil {
		return m.IsBotUser
	}
	return false
}

func (m *DelChannelUserReq) GetIsKicked() bool {
	if m != nil {
		return m.IsKicked
	}
	return false
}

func (m *DelChannelUserReq) GetKickedId() int32 {
	if m != nil {
		return m.KickedId
	}
	return 0
}

func (m *DelChannelUserReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 更新群about请求
type UpdateChanAboutReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	About     string        `protobuf:"bytes,3,opt,name=about,proto3" json:"about,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChanAboutReq) Reset()         { *m = UpdateChanAboutReq{} }
func (m *UpdateChanAboutReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChanAboutReq) ProtoMessage()    {}
func (*UpdateChanAboutReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{11}
}

func (m *UpdateChanAboutReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChanAboutReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChanAboutReq) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *UpdateChanAboutReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 更新群名称请求
type UpdateChanTitleReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title     string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChanTitleReq) Reset()         { *m = UpdateChanTitleReq{} }
func (m *UpdateChanTitleReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChanTitleReq) ProtoMessage()    {}
func (*UpdateChanTitleReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{12}
}

func (m *UpdateChanTitleReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChanTitleReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChanTitleReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateChanTitleReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// 更新群头像请求
type UpdateChanPhotoReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Photo     string        `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChanPhotoReq) Reset()         { *m = UpdateChanPhotoReq{} }
func (m *UpdateChanPhotoReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChanPhotoReq) ProtoMessage()    {}
func (*UpdateChanPhotoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{13}
}

func (m *UpdateChanPhotoReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChanPhotoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChanPhotoReq) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *UpdateChanPhotoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
type UpdateChanAdminRightsReq struct {
	ChannelId   int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	FromId      int32         `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	UserId      int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeepAdmin   bool          `protobuf:"varint,4,opt,name=keep_admin,json=keepAdmin,proto3" json:"keep_admin,omitempty"`
	AdminRights *AdminRights  `protobuf:"bytes,5,opt,name=admin_rights,json=adminRights" json:"admin_rights,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChanAdminRightsReq) Reset()         { *m = UpdateChanAdminRightsReq{} }
func (m *UpdateChanAdminRightsReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChanAdminRightsReq) ProtoMessage()    {}
func (*UpdateChanAdminRightsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{14}
}

func (m *UpdateChanAdminRightsReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChanAdminRightsReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UpdateChanAdminRightsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChanAdminRightsReq) GetKeepAdmin() bool {
	if m != nil {
		return m.KeepAdmin
	}
	return false
}

func (m *UpdateChanAdminRightsReq) GetAdminRights() *AdminRights {
	if m != nil {
		return m.AdminRights
	}
	return nil
}

func (m *UpdateChanAdminRightsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type UpdateChanAdminRightsResp struct {
	Updates    *ChannelupdatesResp `protobuf:"bytes,1,opt,name=updates" json:"updates,omitempty"`
	IsAdd      bool                `protobuf:"varint,2,opt,name=isAdd,proto3" json:"isAdd,omitempty"`
	Ispromote  bool                `protobuf:"varint,3,opt,name=ispromote,proto3" json:"ispromote,omitempty"`
	Resultcode ChatResultCode      `protobuf:"varint,4,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *UpdateChanAdminRightsResp) Reset()         { *m = UpdateChanAdminRightsResp{} }
func (m *UpdateChanAdminRightsResp) String() string { return proto.CompactTextString(m) }
func (*UpdateChanAdminRightsResp) ProtoMessage()    {}
func (*UpdateChanAdminRightsResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{15}
}

func (m *UpdateChanAdminRightsResp) GetUpdates() *ChannelupdatesResp {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *UpdateChanAdminRightsResp) GetIsAdd() bool {
	if m != nil {
		return m.IsAdd
	}
	return false
}

func (m *UpdateChanAdminRightsResp) GetIspromote() bool {
	if m != nil {
		return m.Ispromote
	}
	return false
}

func (m *UpdateChanAdminRightsResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
type UpdateChanBanRightsReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	UserId    int32         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsKick    bool          `protobuf:"varint,4,opt,name=isKick,proto3" json:"isKick,omitempty"`
	BanRights *BannerRights `protobuf:"bytes,5,opt,name=ban_rights,json=banRights" json:"ban_rights,omitempty"`
	BanDate   int32         `protobuf:"varint,6,opt,name=ban_date,json=banDate,proto3" json:"ban_date,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,7,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChanBanRightsReq) Reset()         { *m = UpdateChanBanRightsReq{} }
func (m *UpdateChanBanRightsReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChanBanRightsReq) ProtoMessage()    {}
func (*UpdateChanBanRightsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{16}
}

func (m *UpdateChanBanRightsReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChanBanRightsReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UpdateChanBanRightsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChanBanRightsReq) GetIsKick() bool {
	if m != nil {
		return m.IsKick
	}
	return false
}

func (m *UpdateChanBanRightsReq) GetBanRights() *BannerRights {
	if m != nil {
		return m.BanRights
	}
	return nil
}

func (m *UpdateChanBanRightsReq) GetBanDate() int32 {
	if m != nil {
		return m.BanDate
	}
	return 0
}

func (m *UpdateChanBanRightsReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// -----------------------------------------------------------------------------
// channel最基础的请求
type DismissChannelReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	CmdOption  bool          `protobuf:"varint,4,opt,name=CmdOption,proto3" json:"CmdOption,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *DismissChannelReq) Reset()         { *m = DismissChannelReq{} }
func (m *DismissChannelReq) String() string { return proto.CompactTextString(m) }
func (*DismissChannelReq) ProtoMessage()    {}
func (*DismissChannelReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{17}
}

func (m *DismissChannelReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *DismissChannelReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DismissChannelReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *DismissChannelReq) GetCmdOption() bool {
	if m != nil {
		return m.CmdOption
	}
	return false
}

func (m *DismissChannelReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type DismissChannelResp struct {
	B          bool           `protobuf:"varint,1,opt,name=b,proto3" json:"b,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *DismissChannelResp) Reset()         { *m = DismissChannelResp{} }
func (m *DismissChannelResp) String() string { return proto.CompactTextString(m) }
func (*DismissChannelResp) ProtoMessage()    {}
func (*DismissChannelResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{18}
}

func (m *DismissChannelResp) GetB() bool {
	if m != nil {
		return m.B
	}
	return false
}

func (m *DismissChannelResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 超级群/频道 的按类型的偏移获取
type ParticipantLimitReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Offset    int32         `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int32         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	PartType  int32         `protobuf:"varint,4,opt,name=part_type,json=partType,proto3" json:"part_type,omitempty"`
	Userid    int32         `protobuf:"varint,5,opt,name=userid,proto3" json:"userid,omitempty"`
	Q         string        `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,7,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *ParticipantLimitReq) Reset()         { *m = ParticipantLimitReq{} }
func (m *ParticipantLimitReq) String() string { return proto.CompactTextString(m) }
func (*ParticipantLimitReq) ProtoMessage()    {}
func (*ParticipantLimitReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{19}
}

func (m *ParticipantLimitReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ParticipantLimitReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ParticipantLimitReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ParticipantLimitReq) GetPartType() int32 {
	if m != nil {
		return m.PartType
	}
	return 0
}

func (m *ParticipantLimitReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ParticipantLimitReq) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *ParticipantLimitReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 群成员的列表
type ParticipantLimitResp struct {
	TotalCount int32                 `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	Part       []*ChannelParticipant `protobuf:"bytes,2,rep,name=part" json:"part,omitempty"`
	Users      *UserInfoArray        `protobuf:"bytes,3,opt,name=users" json:"users,omitempty"`
	Resultcode ChatResultCode        `protobuf:"varint,4,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ParticipantLimitResp) Reset()         { *m = ParticipantLimitResp{} }
func (m *ParticipantLimitResp) String() string { return proto.CompactTextString(m) }
func (*ParticipantLimitResp) ProtoMessage()    {}
func (*ParticipantLimitResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{20}
}

func (m *ParticipantLimitResp) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ParticipantLimitResp) GetPart() []*ChannelParticipant {
	if m != nil {
		return m.Part
	}
	return nil
}

func (m *ParticipantLimitResp) GetUsers() *UserInfoArray {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ParticipantLimitResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// channel最基础的请求
type GetChannelOnePartReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChannelOnePartReq) Reset()         { *m = GetChannelOnePartReq{} }
func (m *GetChannelOnePartReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelOnePartReq) ProtoMessage()    {}
func (*GetChannelOnePartReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{21}
}

func (m *GetChannelOnePartReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelOnePartReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChannelOnePartReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetChannelOnePartReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 群成员的基础信息
type GetChannelOnePartResp struct {
	OneParticipant *ChannelParticipant `protobuf:"bytes,1,opt,name=one_participant,json=oneParticipant" json:"one_participant,omitempty"`
	UserInfo       *UserInfo           `protobuf:"bytes,2,opt,name=user_info,json=userInfo" json:"user_info,omitempty"`
	Resultcode     ChatResultCode      `protobuf:"varint,3,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChannelOnePartResp) Reset()         { *m = GetChannelOnePartResp{} }
func (m *GetChannelOnePartResp) String() string { return proto.CompactTextString(m) }
func (*GetChannelOnePartResp) ProtoMessage()    {}
func (*GetChannelOnePartResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{22}
}

func (m *GetChannelOnePartResp) GetOneParticipant() *ChannelParticipant {
	if m != nil {
		return m.OneParticipant
	}
	return nil
}

func (m *GetChannelOnePartResp) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *GetChannelOnePartResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 获取channel userids信息
type GetChannelUsersIdReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChannelUsersIdReq) Reset()         { *m = GetChannelUsersIdReq{} }
func (m *GetChannelUsersIdReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelUsersIdReq) ProtoMessage()    {}
func (*GetChannelUsersIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{23}
}

func (m *GetChannelUsersIdReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelUsersIdReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GetChannelUsersIdResp struct {
	ChannelId  int32          `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     []int32        `protobuf:"varint,2,rep,packed,name=user_id,json=userId" json:"user_id,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChannelUsersIdResp) Reset()         { *m = GetChannelUsersIdResp{} }
func (m *GetChannelUsersIdResp) String() string { return proto.CompactTextString(m) }
func (*GetChannelUsersIdResp) ProtoMessage()    {}
func (*GetChannelUsersIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{24}
}

func (m *GetChannelUsersIdResp) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelUsersIdResp) GetUserId() []int32 {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *GetChannelUsersIdResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// channel最基础的请求
type GetChannelBaseInfoReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChannelBaseInfoReq) Reset()         { *m = GetChannelBaseInfoReq{} }
func (m *GetChannelBaseInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelBaseInfoReq) ProtoMessage()    {}
func (*GetChannelBaseInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{25}
}

func (m *GetChannelBaseInfoReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelBaseInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChannelBaseInfoReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetChannelBaseInfoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 群基础信息
type GetChannelBaseInfoResp struct {
	BaseInfo   *ChannelInfoBase `protobuf:"bytes,1,opt,name=baseInfo" json:"baseInfo,omitempty"`
	Resultcode ChatResultCode   `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChannelBaseInfoResp) Reset()         { *m = GetChannelBaseInfoResp{} }
func (m *GetChannelBaseInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetChannelBaseInfoResp) ProtoMessage()    {}
func (*GetChannelBaseInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{26}
}

func (m *GetChannelBaseInfoResp) GetBaseInfo() *ChannelInfoBase {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *GetChannelBaseInfoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// 获取channel信息  不带user信息
type GetChannelInfoReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChannelInfoReq) Reset()         { *m = GetChannelInfoReq{} }
func (m *GetChannelInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelInfoReq) ProtoMessage()    {}
func (*GetChannelInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{27}
}

func (m *GetChannelInfoReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelInfoReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetChannelInfoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 群基础信息
type GetChannelInfoResp struct {
	BaseInfo   *ChannelInfoBase `protobuf:"bytes,1,opt,name=baseInfo" json:"baseInfo,omitempty"`
	Resultcode ChatResultCode   `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetChannelInfoResp) Reset()         { *m = GetChannelInfoResp{} }
func (m *GetChannelInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetChannelInfoResp) ProtoMessage()    {}
func (*GetChannelInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{28}
}

func (m *GetChannelInfoResp) GetBaseInfo() *ChannelInfoBase {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *GetChannelInfoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 批量获取
// channel最基础的请求
type BatchChannelBaseInfoReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    []int32       `protobuf:"varint,2,rep,packed,name=user_id,json=userId" json:"user_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *BatchChannelBaseInfoReq) Reset()         { *m = BatchChannelBaseInfoReq{} }
func (m *BatchChannelBaseInfoReq) String() string { return proto.CompactTextString(m) }
func (*BatchChannelBaseInfoReq) ProtoMessage()    {}
func (*BatchChannelBaseInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{29}
}

func (m *BatchChannelBaseInfoReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *BatchChannelBaseInfoReq) GetUserId() []int32 {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *BatchChannelBaseInfoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type BatchChannelBaseInfoResp struct {
	Channel    []*ChannelInfoBase `protobuf:"bytes,1,rep,name=channel" json:"channel,omitempty"`
	Resultcode ChatResultCode     `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *BatchChannelBaseInfoResp) Reset()         { *m = BatchChannelBaseInfoResp{} }
func (m *BatchChannelBaseInfoResp) String() string { return proto.CompactTextString(m) }
func (*BatchChannelBaseInfoResp) ProtoMessage()    {}
func (*BatchChannelBaseInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{30}
}

func (m *BatchChannelBaseInfoResp) GetChannel() []*ChannelInfoBase {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *BatchChannelBaseInfoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// ChannelLink
type GetChanByLinkReq struct {
	ChannelLink string        `protobuf:"bytes,1,opt,name=channel_link,json=channelLink,proto3" json:"channel_link,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetChanByLinkReq) Reset()                    { *m = GetChanByLinkReq{} }
func (m *GetChanByLinkReq) String() string            { return proto.CompactTextString(m) }
func (*GetChanByLinkReq) ProtoMessage()               {}
func (*GetChanByLinkReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{31} }

func (m *GetChanByLinkReq) GetChannelLink() string {
	if m != nil {
		return m.ChannelLink
	}
	return ""
}

func (m *GetChanByLinkReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChanByLinkReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 返回为 ChannelInfoBaseResp
// -----------------------------------------------------------------------------
// GetFullChannelInfo
type GetFullChannelInfoReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *GetFullChannelInfoReq) Reset()         { *m = GetFullChannelInfoReq{} }
func (m *GetFullChannelInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetFullChannelInfoReq) ProtoMessage()    {}
func (*GetFullChannelInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{32}
}

func (m *GetFullChannelInfoReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetFullChannelInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetFullChannelInfoReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetFullChannelInfoReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type GetFullChannelInfoResp struct {
	Channelinfo         *ChannelInfoBase `protobuf:"bytes,1,opt,name=channelinfo" json:"channelinfo,omitempty"`
	ExportedInviteLink  string           `protobuf:"bytes,2,opt,name=exported_invite_link,json=exportedInviteLink,proto3" json:"exported_invite_link,omitempty"`
	ParticipantsCount   int32            `protobuf:"varint,3,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
	AdminsCount         int32            `protobuf:"varint,4,opt,name=admins_count,json=adminsCount,proto3" json:"admins_count,omitempty"`
	KickedCount         int32            `protobuf:"varint,5,opt,name=kicked_count,json=kickedCount,proto3" json:"kicked_count,omitempty"`
	BannedCount         int32            `protobuf:"varint,6,opt,name=banned_count,json=bannedCount,proto3" json:"banned_count,omitempty"`
	PinnedMsgId         int32            `protobuf:"varint,7,opt,name=pinned_msg_id,json=pinnedMsgId,proto3" json:"pinned_msg_id,omitempty"`
	MigratedFromMaxId   int32            `protobuf:"varint,8,opt,name=migrated_from_max_id,json=migratedFromMaxId,proto3" json:"migrated_from_max_id,omitempty"`
	MigratedFromChatId  int32            `protobuf:"varint,9,opt,name=migrated_from_chat_id,json=migratedFromChatId,proto3" json:"migrated_from_chat_id,omitempty"`
	AdminRights         *AdminRights     `protobuf:"bytes,10,opt,name=admin_rights,json=adminRights" json:"admin_rights,omitempty"`
	BanRights           *BannerRights    `protobuf:"bytes,11,opt,name=ban_rights,json=banRights" json:"ban_rights,omitempty"`
	About               string           `protobuf:"bytes,12,opt,name=about,proto3" json:"about,omitempty"`
	BotCount            int32            `protobuf:"varint,13,opt,name=bot_count,json=botCount,proto3" json:"bot_count,omitempty"`
	BotId               []int32          `protobuf:"varint,14,rep,packed,name=bot_id,json=botId" json:"bot_id,omitempty"`
	Users               *UserInfoArray   `protobuf:"bytes,15,opt,name=users" json:"users,omitempty"`
	CanSetUsername      bool             `protobuf:"varint,16,opt,name=Can_set_username,json=CanSetUsername,proto3" json:"Can_set_username,omitempty"`
	CanViewParticipants bool             `protobuf:"varint,17,opt,name=Can_view_participants,json=CanViewParticipants,proto3" json:"Can_view_participants,omitempty"`
	Resultcode          ChatResultCode   `protobuf:"varint,18,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *GetFullChannelInfoResp) Reset()         { *m = GetFullChannelInfoResp{} }
func (m *GetFullChannelInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetFullChannelInfoResp) ProtoMessage()    {}
func (*GetFullChannelInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{33}
}

func (m *GetFullChannelInfoResp) GetChannelinfo() *ChannelInfoBase {
	if m != nil {
		return m.Channelinfo
	}
	return nil
}

func (m *GetFullChannelInfoResp) GetExportedInviteLink() string {
	if m != nil {
		return m.ExportedInviteLink
	}
	return ""
}

func (m *GetFullChannelInfoResp) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetAdminsCount() int32 {
	if m != nil {
		return m.AdminsCount
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetKickedCount() int32 {
	if m != nil {
		return m.KickedCount
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetBannedCount() int32 {
	if m != nil {
		return m.BannedCount
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetPinnedMsgId() int32 {
	if m != nil {
		return m.PinnedMsgId
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetMigratedFromMaxId() int32 {
	if m != nil {
		return m.MigratedFromMaxId
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetMigratedFromChatId() int32 {
	if m != nil {
		return m.MigratedFromChatId
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetAdminRights() *AdminRights {
	if m != nil {
		return m.AdminRights
	}
	return nil
}

func (m *GetFullChannelInfoResp) GetBanRights() *BannerRights {
	if m != nil {
		return m.BanRights
	}
	return nil
}

func (m *GetFullChannelInfoResp) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *GetFullChannelInfoResp) GetBotCount() int32 {
	if m != nil {
		return m.BotCount
	}
	return 0
}

func (m *GetFullChannelInfoResp) GetBotId() []int32 {
	if m != nil {
		return m.BotId
	}
	return nil
}

func (m *GetFullChannelInfoResp) GetUsers() *UserInfoArray {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetFullChannelInfoResp) GetCanSetUsername() bool {
	if m != nil {
		return m.CanSetUsername
	}
	return false
}

func (m *GetFullChannelInfoResp) GetCanViewParticipants() bool {
	if m != nil {
		return m.CanViewParticipants
	}
	return false
}

func (m *GetFullChannelInfoResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 切换邀请规则
type ToggleInviteReq struct {
	ChannelId   int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash  int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	AdminEnable bool          `protobuf:"varint,4,opt,name=admin_enable,json=adminEnable,proto3" json:"admin_enable,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *ToggleInviteReq) Reset()                    { *m = ToggleInviteReq{} }
func (m *ToggleInviteReq) String() string            { return proto.CompactTextString(m) }
func (*ToggleInviteReq) ProtoMessage()               {}
func (*ToggleInviteReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{34} }

func (m *ToggleInviteReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ToggleInviteReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ToggleInviteReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ToggleInviteReq) GetAdminEnable() bool {
	if m != nil {
		return m.AdminEnable
	}
	return false
}

func (m *ToggleInviteReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 返回为ChannelupdatesResp  user可以为空
// -----------------------------------------------------------------------------
// 生成群群链接
type CreateChannelLinkReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CreateChannelLinkReq) Reset()         { *m = CreateChannelLinkReq{} }
func (m *CreateChannelLinkReq) String() string { return proto.CompactTextString(m) }
func (*CreateChannelLinkReq) ProtoMessage()    {}
func (*CreateChannelLinkReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{35}
}

func (m *CreateChannelLinkReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *CreateChannelLinkReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateChannelLinkReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 生成群链接
type CreateChannelLinkResp struct {
	Link       string         `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CreateChannelLinkResp) Reset()         { *m = CreateChannelLinkResp{} }
func (m *CreateChannelLinkResp) String() string { return proto.CompactTextString(m) }
func (*CreateChannelLinkResp) ProtoMessage()    {}
func (*CreateChannelLinkResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{36}
}

func (m *CreateChannelLinkResp) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CreateChannelLinkResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 校验邀请链接合法
type CheckChannelInviteLinkReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash string        `protobuf:"bytes,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CheckChannelInviteLinkReq) Reset()         { *m = CheckChannelInviteLinkReq{} }
func (m *CheckChannelInviteLinkReq) String() string { return proto.CompactTextString(m) }
func (*CheckChannelInviteLinkReq) ProtoMessage()    {}
func (*CheckChannelInviteLinkReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{37}
}

func (m *CheckChannelInviteLinkReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *CheckChannelInviteLinkReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckChannelInviteLinkReq) GetAccessHash() string {
	if m != nil {
		return m.AccessHash
	}
	return ""
}

func (m *CheckChannelInviteLinkReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 生成群链接
type CheckChannelInviteLinkResp struct {
	Link        string           `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Gtype       int32            `protobuf:"varint,2,opt,name=gtype,proto3" json:"gtype,omitempty"`
	ChanInfo    *ChannelInfoBase `protobuf:"bytes,3,opt,name=chanInfo" json:"chanInfo,omitempty"`
	Chatinfo    *GetChatInfoResp `protobuf:"bytes,4,opt,name=chatinfo" json:"chatinfo,omitempty"`
	LinkCreator int32            `protobuf:"varint,5,opt,name=linkCreator,proto3" json:"linkCreator,omitempty"`
	Resultcode  ChatResultCode   `protobuf:"varint,6,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CheckChannelInviteLinkResp) Reset()         { *m = CheckChannelInviteLinkResp{} }
func (m *CheckChannelInviteLinkResp) String() string { return proto.CompactTextString(m) }
func (*CheckChannelInviteLinkResp) ProtoMessage()    {}
func (*CheckChannelInviteLinkResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{38}
}

func (m *CheckChannelInviteLinkResp) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CheckChannelInviteLinkResp) GetGtype() int32 {
	if m != nil {
		return m.Gtype
	}
	return 0
}

func (m *CheckChannelInviteLinkResp) GetChanInfo() *ChannelInfoBase {
	if m != nil {
		return m.ChanInfo
	}
	return nil
}

func (m *CheckChannelInviteLinkResp) GetChatinfo() *GetChatInfoResp {
	if m != nil {
		return m.Chatinfo
	}
	return nil
}

func (m *CheckChannelInviteLinkResp) GetLinkCreator() int32 {
	if m != nil {
		return m.LinkCreator
	}
	return 0
}

func (m *CheckChannelInviteLinkResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 更改username
type UpdateChannelUserNameReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName  string        `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChannelUserNameReq) Reset()         { *m = UpdateChannelUserNameReq{} }
func (m *UpdateChannelUserNameReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelUserNameReq) ProtoMessage()    {}
func (*UpdateChannelUserNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{39}
}

func (m *UpdateChannelUserNameReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChannelUserNameReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChannelUserNameReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UpdateChannelUserNameReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type UpdateChannelUserNameResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *UpdateChannelUserNameResp) Reset()         { *m = UpdateChannelUserNameResp{} }
func (m *UpdateChannelUserNameResp) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelUserNameResp) ProtoMessage()    {}
func (*UpdateChannelUserNameResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{40}
}

func (m *UpdateChannelUserNameResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 更改username
type UpdateChannelPinnedMsgIdReq struct {
	ChannelId   int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PinnedMsgId int32         `protobuf:"varint,3,opt,name=pinned_msg_id,json=pinnedMsgId,proto3" json:"pinned_msg_id,omitempty"`
	Dlog        *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *UpdateChannelPinnedMsgIdReq) Reset()         { *m = UpdateChannelPinnedMsgIdReq{} }
func (m *UpdateChannelPinnedMsgIdReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelPinnedMsgIdReq) ProtoMessage()    {}
func (*UpdateChannelPinnedMsgIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{41}
}

func (m *UpdateChannelPinnedMsgIdReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UpdateChannelPinnedMsgIdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChannelPinnedMsgIdReq) GetPinnedMsgId() int32 {
	if m != nil {
		return m.PinnedMsgId
	}
	return 0
}

func (m *UpdateChannelPinnedMsgIdReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type UpdateChannelPinnedMsgIdResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *UpdateChannelPinnedMsgIdResp) Reset()         { *m = UpdateChannelPinnedMsgIdResp{} }
func (m *UpdateChannelPinnedMsgIdResp) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelPinnedMsgIdResp) ProtoMessage()    {}
func (*UpdateChannelPinnedMsgIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{42}
}

func (m *UpdateChannelPinnedMsgIdResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 检查userName是否可用
type CheckUserNameReq struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	UserName   string        `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Dlog       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CheckUserNameReq) Reset()                    { *m = CheckUserNameReq{} }
func (m *CheckUserNameReq) String() string            { return proto.CompactTextString(m) }
func (*CheckUserNameReq) ProtoMessage()               {}
func (*CheckUserNameReq) Descriptor() ([]byte, []int) { return fileDescriptorChannelservice, []int{43} }

func (m *CheckUserNameReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *CheckUserNameReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *CheckUserNameReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CheckUserNameReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type CheckUserNameResp struct {
	Resultcode ChatResultCode `protobuf:"varint,1,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CheckUserNameResp) Reset()         { *m = CheckUserNameResp{} }
func (m *CheckUserNameResp) String() string { return proto.CompactTextString(m) }
func (*CheckUserNameResp) ProtoMessage()    {}
func (*CheckUserNameResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{44}
}

func (m *CheckUserNameResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

// -----------------------------------------------------------------------------
// 检查群是否是加密
type CheckChannelIsEncryReq struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Dlog      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Dlog" json:"Dlog,omitempty"`
}

func (m *CheckChannelIsEncryReq) Reset()         { *m = CheckChannelIsEncryReq{} }
func (m *CheckChannelIsEncryReq) String() string { return proto.CompactTextString(m) }
func (*CheckChannelIsEncryReq) ProtoMessage()    {}
func (*CheckChannelIsEncryReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{45}
}

func (m *CheckChannelIsEncryReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *CheckChannelIsEncryReq) GetDlog() *pbcomm.Debug {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 检查群是否是加密
type CheckChannelIsEncryResp struct {
	Encry      bool           `protobuf:"varint,1,opt,name=encry,proto3" json:"encry,omitempty"`
	Resultcode ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=infoserver.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CheckChannelIsEncryResp) Reset()         { *m = CheckChannelIsEncryResp{} }
func (m *CheckChannelIsEncryResp) String() string { return proto.CompactTextString(m) }
func (*CheckChannelIsEncryResp) ProtoMessage()    {}
func (*CheckChannelIsEncryResp) Descriptor() ([]byte, []int) {
	return fileDescriptorChannelservice, []int{46}
}

func (m *CheckChannelIsEncryResp) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *CheckChannelIsEncryResp) GetResultcode() ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return ChatResultCode_Chat_RPC_OK
}

func init() {
	proto.RegisterType((*ChannelInfoBase)(nil), "infoserver.ChannelInfoBase")
	proto.RegisterType((*ChannelParticipant)(nil), "infoserver.ChannelParticipant")
	proto.RegisterType((*ChannelParticipantArr)(nil), "infoserver.ChannelParticipantArr")
	proto.RegisterType((*InvitedUsers)(nil), "infoserver.InvitedUsers")
	proto.RegisterType((*AdminRights)(nil), "infoserver.AdminRights")
	proto.RegisterType((*BannerRights)(nil), "infoserver.BannerRights")
	proto.RegisterType((*CreateChannelReq)(nil), "infoserver.CreateChannelReq")
	proto.RegisterType((*ChannelupdatesResp)(nil), "infoserver.ChannelupdatesResp")
	proto.RegisterType((*GetChannelUpdatesReq)(nil), "infoserver.GetChannelUpdatesReq")
	proto.RegisterType((*AddChannelUserReq)(nil), "infoserver.AddChannelUserReq")
	proto.RegisterType((*DelChannelUserReq)(nil), "infoserver.DelChannelUserReq")
	proto.RegisterType((*UpdateChanAboutReq)(nil), "infoserver.UpdateChanAboutReq")
	proto.RegisterType((*UpdateChanTitleReq)(nil), "infoserver.UpdateChanTitleReq")
	proto.RegisterType((*UpdateChanPhotoReq)(nil), "infoserver.UpdateChanPhotoReq")
	proto.RegisterType((*UpdateChanAdminRightsReq)(nil), "infoserver.UpdateChanAdminRightsReq")
	proto.RegisterType((*UpdateChanAdminRightsResp)(nil), "infoserver.UpdateChanAdminRightsResp")
	proto.RegisterType((*UpdateChanBanRightsReq)(nil), "infoserver.UpdateChanBanRightsReq")
	proto.RegisterType((*DismissChannelReq)(nil), "infoserver.DismissChannelReq")
	proto.RegisterType((*DismissChannelResp)(nil), "infoserver.DismissChannelResp")
	proto.RegisterType((*ParticipantLimitReq)(nil), "infoserver.ParticipantLimitReq")
	proto.RegisterType((*ParticipantLimitResp)(nil), "infoserver.ParticipantLimitResp")
	proto.RegisterType((*GetChannelOnePartReq)(nil), "infoserver.GetChannelOnePartReq")
	proto.RegisterType((*GetChannelOnePartResp)(nil), "infoserver.GetChannelOnePartResp")
	proto.RegisterType((*GetChannelUsersIdReq)(nil), "infoserver.GetChannelUsersIdReq")
	proto.RegisterType((*GetChannelUsersIdResp)(nil), "infoserver.GetChannelUsersIdResp")
	proto.RegisterType((*GetChannelBaseInfoReq)(nil), "infoserver.GetChannelBaseInfoReq")
	proto.RegisterType((*GetChannelBaseInfoResp)(nil), "infoserver.GetChannelBaseInfoResp")
	proto.RegisterType((*GetChannelInfoReq)(nil), "infoserver.GetChannelInfoReq")
	proto.RegisterType((*GetChannelInfoResp)(nil), "infoserver.GetChannelInfoResp")
	proto.RegisterType((*BatchChannelBaseInfoReq)(nil), "infoserver.BatchChannelBaseInfoReq")
	proto.RegisterType((*BatchChannelBaseInfoResp)(nil), "infoserver.BatchChannelBaseInfoResp")
	proto.RegisterType((*GetChanByLinkReq)(nil), "infoserver.GetChanByLinkReq")
	proto.RegisterType((*GetFullChannelInfoReq)(nil), "infoserver.GetFullChannelInfoReq")
	proto.RegisterType((*GetFullChannelInfoResp)(nil), "infoserver.GetFullChannelInfoResp")
	proto.RegisterType((*ToggleInviteReq)(nil), "infoserver.ToggleInviteReq")
	proto.RegisterType((*CreateChannelLinkReq)(nil), "infoserver.CreateChannelLinkReq")
	proto.RegisterType((*CreateChannelLinkResp)(nil), "infoserver.CreateChannelLinkResp")
	proto.RegisterType((*CheckChannelInviteLinkReq)(nil), "infoserver.CheckChannelInviteLinkReq")
	proto.RegisterType((*CheckChannelInviteLinkResp)(nil), "infoserver.CheckChannelInviteLinkResp")
	proto.RegisterType((*UpdateChannelUserNameReq)(nil), "infoserver.UpdateChannelUserNameReq")
	proto.RegisterType((*UpdateChannelUserNameResp)(nil), "infoserver.UpdateChannelUserNameResp")
	proto.RegisterType((*UpdateChannelPinnedMsgIdReq)(nil), "infoserver.UpdateChannelPinnedMsgIdReq")
	proto.RegisterType((*UpdateChannelPinnedMsgIdResp)(nil), "infoserver.UpdateChannelPinnedMsgIdResp")
	proto.RegisterType((*CheckUserNameReq)(nil), "infoserver.CheckUserNameReq")
	proto.RegisterType((*CheckUserNameResp)(nil), "infoserver.CheckUserNameResp")
	proto.RegisterType((*CheckChannelIsEncryReq)(nil), "infoserver.CheckChannelIsEncryReq")
	proto.RegisterType((*CheckChannelIsEncryResp)(nil), "infoserver.CheckChannelIsEncryResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChannelServerService service

type ChannelServerServiceClient interface {
	// 创建频道
	CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 获取channel信息
	GetChannelUpdatesInfo(ctx context.Context, in *GetChannelUpdatesReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 添加群成员
	AddChannelUser(ctx context.Context, in *AddChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 删除群成员
	DelChannelUser(ctx context.Context, in *DelChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 编辑about
	EditChannelAbout(ctx context.Context, in *UpdateChanAboutReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 编辑title
	EditChannelTitle(ctx context.Context, in *UpdateChanTitleReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 编辑photo
	EditChannelPhoto(ctx context.Context, in *UpdateChanPhotoReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 编辑管理员权限
	EditChanAdminRights(ctx context.Context, in *UpdateChanAdminRightsReq, opts ...grpc.CallOption) (*UpdateChanAdminRightsResp, error)
	// 编辑ban权限
	EditChanBanRights(ctx context.Context, in *UpdateChanBanRightsReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 解散channel
	DismissChannel(ctx context.Context, in *DismissChannelReq, opts ...grpc.CallOption) (*DismissChannelResp, error)
	// 根据偏移获取
	GetParticipantLimitReq(ctx context.Context, in *ParticipantLimitReq, opts ...grpc.CallOption) (*ParticipantLimitResp, error)
	// 获取单个信息
	GetChanOneParticipantReq(ctx context.Context, in *GetChannelOnePartReq, opts ...grpc.CallOption) (*GetChannelOnePartResp, error)
	// 获取所有用户Id
	GetChanUsersId(ctx context.Context, in *GetChannelUsersIdReq, opts ...grpc.CallOption) (*GetChannelUsersIdResp, error)
	// 获取channel基本信息
	GetChannelBaseInfo(ctx context.Context, in *GetChannelBaseInfoReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error)
	// 获取channel信息 不带user信息
	GetChannelInfo(ctx context.Context, in *GetChannelInfoReq, opts ...grpc.CallOption) (*GetChannelInfoResp, error)
	// 批量获取channel基本信息
	GetBatchChanBaseInfo(ctx context.Context, in *BatchChannelBaseInfoReq, opts ...grpc.CallOption) (*BatchChannelBaseInfoResp, error)
	// 根据link获取
	GetChanInfoByLink(ctx context.Context, in *GetChanByLinkReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error)
	// 获取全部信息
	GetChannelFullInfo(ctx context.Context, in *GetFullChannelInfoReq, opts ...grpc.CallOption) (*GetFullChannelInfoResp, error)
	// 切换邀请成员规则
	ToggleInvite(ctx context.Context, in *ToggleInviteReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error)
	// 生成群邀请链接
	CreateChannelLink(ctx context.Context, in *CreateChannelLinkReq, opts ...grpc.CallOption) (*CreateChannelLinkResp, error)
	// 校验邀请链接合法
	CheckChannelInviteLink(ctx context.Context, in *CheckChannelInviteLinkReq, opts ...grpc.CallOption) (*CheckChannelInviteLinkResp, error)
	// 更新channel userName
	UpdateChannelUserName(ctx context.Context, in *UpdateChannelUserNameReq, opts ...grpc.CallOption) (*UpdateChannelUserNameResp, error)
	// 更新channel置顶消息
	UpdateChannelPinnedMsgId(ctx context.Context, in *UpdateChannelPinnedMsgIdReq, opts ...grpc.CallOption) (*UpdateChannelPinnedMsgIdResp, error)
	// 检查userName是否可用
	CheckUserName(ctx context.Context, in *CheckUserNameReq, opts ...grpc.CallOption) (*CheckUserNameResp, error)
	// 检查是否是加密群
	CheckChannelIsEncry(ctx context.Context, in *CheckChannelIsEncryReq, opts ...grpc.CallOption) (*CheckChannelIsEncryResp, error)
}

type channelServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewChannelServerServiceClient(cc *grpc.ClientConn) ChannelServerServiceClient {
	return &channelServerServiceClient{cc}
}

func (c *channelServerServiceClient) CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/CreateChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelUpdatesInfo(ctx context.Context, in *GetChannelUpdatesReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/GetChannelUpdatesInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) AddChannelUser(ctx context.Context, in *AddChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/AddChannelUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) DelChannelUser(ctx context.Context, in *DelChannelUserReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/DelChannelUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChannelAbout(ctx context.Context, in *UpdateChanAboutReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/EditChannelAbout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChannelTitle(ctx context.Context, in *UpdateChanTitleReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/EditChannelTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChannelPhoto(ctx context.Context, in *UpdateChanPhotoReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/EditChannelPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChanAdminRights(ctx context.Context, in *UpdateChanAdminRightsReq, opts ...grpc.CallOption) (*UpdateChanAdminRightsResp, error) {
	out := new(UpdateChanAdminRightsResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/EditChanAdminRights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) EditChanBanRights(ctx context.Context, in *UpdateChanBanRightsReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/EditChanBanRights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) DismissChannel(ctx context.Context, in *DismissChannelReq, opts ...grpc.CallOption) (*DismissChannelResp, error) {
	out := new(DismissChannelResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/DismissChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetParticipantLimitReq(ctx context.Context, in *ParticipantLimitReq, opts ...grpc.CallOption) (*ParticipantLimitResp, error) {
	out := new(ParticipantLimitResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/GetParticipantLimitReq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChanOneParticipantReq(ctx context.Context, in *GetChannelOnePartReq, opts ...grpc.CallOption) (*GetChannelOnePartResp, error) {
	out := new(GetChannelOnePartResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/GetChanOneParticipantReq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChanUsersId(ctx context.Context, in *GetChannelUsersIdReq, opts ...grpc.CallOption) (*GetChannelUsersIdResp, error) {
	out := new(GetChannelUsersIdResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/GetChanUsersId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelBaseInfo(ctx context.Context, in *GetChannelBaseInfoReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error) {
	out := new(GetChannelBaseInfoResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/GetChannelBaseInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelInfo(ctx context.Context, in *GetChannelInfoReq, opts ...grpc.CallOption) (*GetChannelInfoResp, error) {
	out := new(GetChannelInfoResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/GetChannelInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetBatchChanBaseInfo(ctx context.Context, in *BatchChannelBaseInfoReq, opts ...grpc.CallOption) (*BatchChannelBaseInfoResp, error) {
	out := new(BatchChannelBaseInfoResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/GetBatchChanBaseInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChanInfoByLink(ctx context.Context, in *GetChanByLinkReq, opts ...grpc.CallOption) (*GetChannelBaseInfoResp, error) {
	out := new(GetChannelBaseInfoResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/GetChanInfoByLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) GetChannelFullInfo(ctx context.Context, in *GetFullChannelInfoReq, opts ...grpc.CallOption) (*GetFullChannelInfoResp, error) {
	out := new(GetFullChannelInfoResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/GetChannelFullInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) ToggleInvite(ctx context.Context, in *ToggleInviteReq, opts ...grpc.CallOption) (*ChannelupdatesResp, error) {
	out := new(ChannelupdatesResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/ToggleInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CreateChannelLink(ctx context.Context, in *CreateChannelLinkReq, opts ...grpc.CallOption) (*CreateChannelLinkResp, error) {
	out := new(CreateChannelLinkResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/CreateChannelLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CheckChannelInviteLink(ctx context.Context, in *CheckChannelInviteLinkReq, opts ...grpc.CallOption) (*CheckChannelInviteLinkResp, error) {
	out := new(CheckChannelInviteLinkResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/CheckChannelInviteLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelUserName(ctx context.Context, in *UpdateChannelUserNameReq, opts ...grpc.CallOption) (*UpdateChannelUserNameResp, error) {
	out := new(UpdateChannelUserNameResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/UpdateChannelUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) UpdateChannelPinnedMsgId(ctx context.Context, in *UpdateChannelPinnedMsgIdReq, opts ...grpc.CallOption) (*UpdateChannelPinnedMsgIdResp, error) {
	out := new(UpdateChannelPinnedMsgIdResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/UpdateChannelPinnedMsgId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CheckUserName(ctx context.Context, in *CheckUserNameReq, opts ...grpc.CallOption) (*CheckUserNameResp, error) {
	out := new(CheckUserNameResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/CheckUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerServiceClient) CheckChannelIsEncry(ctx context.Context, in *CheckChannelIsEncryReq, opts ...grpc.CallOption) (*CheckChannelIsEncryResp, error) {
	out := new(CheckChannelIsEncryResp)
	err := grpc.Invoke(ctx, "/infoserver.ChannelServerService/CheckChannelIsEncry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChannelServerService service

type ChannelServerServiceServer interface {
	// 创建频道
	CreateChannel(context.Context, *CreateChannelReq) (*ChannelupdatesResp, error)
	// 获取channel信息
	GetChannelUpdatesInfo(context.Context, *GetChannelUpdatesReq) (*ChannelupdatesResp, error)
	// 添加群成员
	AddChannelUser(context.Context, *AddChannelUserReq) (*ChannelupdatesResp, error)
	// 删除群成员
	DelChannelUser(context.Context, *DelChannelUserReq) (*ChannelupdatesResp, error)
	// 编辑about
	EditChannelAbout(context.Context, *UpdateChanAboutReq) (*ChannelupdatesResp, error)
	// 编辑title
	EditChannelTitle(context.Context, *UpdateChanTitleReq) (*ChannelupdatesResp, error)
	// 编辑photo
	EditChannelPhoto(context.Context, *UpdateChanPhotoReq) (*ChannelupdatesResp, error)
	// 编辑管理员权限
	EditChanAdminRights(context.Context, *UpdateChanAdminRightsReq) (*UpdateChanAdminRightsResp, error)
	// 编辑ban权限
	EditChanBanRights(context.Context, *UpdateChanBanRightsReq) (*ChannelupdatesResp, error)
	// 解散channel
	DismissChannel(context.Context, *DismissChannelReq) (*DismissChannelResp, error)
	// 根据偏移获取
	GetParticipantLimitReq(context.Context, *ParticipantLimitReq) (*ParticipantLimitResp, error)
	// 获取单个信息
	GetChanOneParticipantReq(context.Context, *GetChannelOnePartReq) (*GetChannelOnePartResp, error)
	// 获取所有用户Id
	GetChanUsersId(context.Context, *GetChannelUsersIdReq) (*GetChannelUsersIdResp, error)
	// 获取channel基本信息
	GetChannelBaseInfo(context.Context, *GetChannelBaseInfoReq) (*GetChannelBaseInfoResp, error)
	// 获取channel信息 不带user信息
	GetChannelInfo(context.Context, *GetChannelInfoReq) (*GetChannelInfoResp, error)
	// 批量获取channel基本信息
	GetBatchChanBaseInfo(context.Context, *BatchChannelBaseInfoReq) (*BatchChannelBaseInfoResp, error)
	// 根据link获取
	GetChanInfoByLink(context.Context, *GetChanByLinkReq) (*GetChannelBaseInfoResp, error)
	// 获取全部信息
	GetChannelFullInfo(context.Context, *GetFullChannelInfoReq) (*GetFullChannelInfoResp, error)
	// 切换邀请成员规则
	ToggleInvite(context.Context, *ToggleInviteReq) (*ChannelupdatesResp, error)
	// 生成群邀请链接
	CreateChannelLink(context.Context, *CreateChannelLinkReq) (*CreateChannelLinkResp, error)
	// 校验邀请链接合法
	CheckChannelInviteLink(context.Context, *CheckChannelInviteLinkReq) (*CheckChannelInviteLinkResp, error)
	// 更新channel userName
	UpdateChannelUserName(context.Context, *UpdateChannelUserNameReq) (*UpdateChannelUserNameResp, error)
	// 更新channel置顶消息
	UpdateChannelPinnedMsgId(context.Context, *UpdateChannelPinnedMsgIdReq) (*UpdateChannelPinnedMsgIdResp, error)
	// 检查userName是否可用
	CheckUserName(context.Context, *CheckUserNameReq) (*CheckUserNameResp, error)
	// 检查是否是加密群
	CheckChannelIsEncry(context.Context, *CheckChannelIsEncryReq) (*CheckChannelIsEncryResp, error)
}

func RegisterChannelServerServiceServer(s *grpc.Server, srv ChannelServerServiceServer) {
	s.RegisterService(&_ChannelServerService_serviceDesc, srv)
}

func _ChannelServerService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CreateChannel(ctx, req.(*CreateChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelUpdatesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelUpdatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelUpdatesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetChannelUpdatesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelUpdatesInfo(ctx, req.(*GetChannelUpdatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_AddChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChannelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).AddChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/AddChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).AddChannelUser(ctx, req.(*AddChannelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_DelChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChannelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).DelChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/DelChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).DelChannelUser(ctx, req.(*DelChannelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChannelAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanAboutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChannelAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/EditChannelAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChannelAbout(ctx, req.(*UpdateChanAboutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChannelTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanTitleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChannelTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/EditChannelTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChannelTitle(ctx, req.(*UpdateChanTitleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChannelPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanPhotoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChannelPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/EditChannelPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChannelPhoto(ctx, req.(*UpdateChanPhotoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChanAdminRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanAdminRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChanAdminRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/EditChanAdminRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChanAdminRights(ctx, req.(*UpdateChanAdminRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_EditChanBanRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChanBanRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).EditChanBanRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/EditChanBanRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).EditChanBanRights(ctx, req.(*UpdateChanBanRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_DismissChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DismissChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).DismissChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/DismissChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).DismissChannel(ctx, req.(*DismissChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetParticipantLimitReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipantLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetParticipantLimitReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetParticipantLimitReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetParticipantLimitReq(ctx, req.(*ParticipantLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChanOneParticipantReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelOnePartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChanOneParticipantReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetChanOneParticipantReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChanOneParticipantReq(ctx, req.(*GetChannelOnePartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChanUsersId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelUsersIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChanUsersId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetChanUsersId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChanUsersId(ctx, req.(*GetChannelUsersIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelBaseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetChannelBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelBaseInfo(ctx, req.(*GetChannelBaseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelInfo(ctx, req.(*GetChannelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetBatchChanBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchChannelBaseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetBatchChanBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetBatchChanBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetBatchChanBaseInfo(ctx, req.(*BatchChannelBaseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChanInfoByLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChanByLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChanInfoByLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetChanInfoByLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChanInfoByLink(ctx, req.(*GetChanByLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_GetChannelFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullChannelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).GetChannelFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/GetChannelFullInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).GetChannelFullInfo(ctx, req.(*GetFullChannelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_ToggleInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).ToggleInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/ToggleInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).ToggleInvite(ctx, req.(*ToggleInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CreateChannelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CreateChannelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/CreateChannelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CreateChannelLink(ctx, req.(*CreateChannelLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CheckChannelInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChannelInviteLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CheckChannelInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/CheckChannelInviteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CheckChannelInviteLink(ctx, req.(*CheckChannelInviteLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/UpdateChannelUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelUserName(ctx, req.(*UpdateChannelUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_UpdateChannelPinnedMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelPinnedMsgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).UpdateChannelPinnedMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/UpdateChannelPinnedMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).UpdateChannelPinnedMsgId(ctx, req.(*UpdateChannelPinnedMsgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CheckUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CheckUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/CheckUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CheckUserName(ctx, req.(*CheckUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServerService_CheckChannelIsEncry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChannelIsEncryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServiceServer).CheckChannelIsEncry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChannelServerService/CheckChannelIsEncry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServiceServer).CheckChannelIsEncry(ctx, req.(*CheckChannelIsEncryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infoserver.ChannelServerService",
	HandlerType: (*ChannelServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _ChannelServerService_CreateChannel_Handler,
		},
		{
			MethodName: "GetChannelUpdatesInfo",
			Handler:    _ChannelServerService_GetChannelUpdatesInfo_Handler,
		},
		{
			MethodName: "AddChannelUser",
			Handler:    _ChannelServerService_AddChannelUser_Handler,
		},
		{
			MethodName: "DelChannelUser",
			Handler:    _ChannelServerService_DelChannelUser_Handler,
		},
		{
			MethodName: "EditChannelAbout",
			Handler:    _ChannelServerService_EditChannelAbout_Handler,
		},
		{
			MethodName: "EditChannelTitle",
			Handler:    _ChannelServerService_EditChannelTitle_Handler,
		},
		{
			MethodName: "EditChannelPhoto",
			Handler:    _ChannelServerService_EditChannelPhoto_Handler,
		},
		{
			MethodName: "EditChanAdminRights",
			Handler:    _ChannelServerService_EditChanAdminRights_Handler,
		},
		{
			MethodName: "EditChanBanRights",
			Handler:    _ChannelServerService_EditChanBanRights_Handler,
		},
		{
			MethodName: "DismissChannel",
			Handler:    _ChannelServerService_DismissChannel_Handler,
		},
		{
			MethodName: "GetParticipantLimitReq",
			Handler:    _ChannelServerService_GetParticipantLimitReq_Handler,
		},
		{
			MethodName: "GetChanOneParticipantReq",
			Handler:    _ChannelServerService_GetChanOneParticipantReq_Handler,
		},
		{
			MethodName: "GetChanUsersId",
			Handler:    _ChannelServerService_GetChanUsersId_Handler,
		},
		{
			MethodName: "GetChannelBaseInfo",
			Handler:    _ChannelServerService_GetChannelBaseInfo_Handler,
		},
		{
			MethodName: "GetChannelInfo",
			Handler:    _ChannelServerService_GetChannelInfo_Handler,
		},
		{
			MethodName: "GetBatchChanBaseInfo",
			Handler:    _ChannelServerService_GetBatchChanBaseInfo_Handler,
		},
		{
			MethodName: "GetChanInfoByLink",
			Handler:    _ChannelServerService_GetChanInfoByLink_Handler,
		},
		{
			MethodName: "GetChannelFullInfo",
			Handler:    _ChannelServerService_GetChannelFullInfo_Handler,
		},
		{
			MethodName: "ToggleInvite",
			Handler:    _ChannelServerService_ToggleInvite_Handler,
		},
		{
			MethodName: "CreateChannelLink",
			Handler:    _ChannelServerService_CreateChannelLink_Handler,
		},
		{
			MethodName: "CheckChannelInviteLink",
			Handler:    _ChannelServerService_CheckChannelInviteLink_Handler,
		},
		{
			MethodName: "UpdateChannelUserName",
			Handler:    _ChannelServerService_UpdateChannelUserName_Handler,
		},
		{
			MethodName: "UpdateChannelPinnedMsgId",
			Handler:    _ChannelServerService_UpdateChannelPinnedMsgId_Handler,
		},
		{
			MethodName: "CheckUserName",
			Handler:    _ChannelServerService_CheckUserName_Handler,
		},
		{
			MethodName: "CheckChannelIsEncry",
			Handler:    _ChannelServerService_CheckChannelIsEncry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/channelservice.proto",
}

func (m *ChannelInfoBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelInfoBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.Encry {
		dAtA[i] = 0x18
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Broadcast {
		dAtA[i] = 0x20
		i++
		if m.Broadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Verified {
		dAtA[i] = 0x28
		i++
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Megagroup {
		dAtA[i] = 0x30
		i++
		if m.Megagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Restricted {
		dAtA[i] = 0x38
		i++
		if m.Restricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Democracy {
		dAtA[i] = 0x40
		i++
		if m.Democracy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Signatures {
		dAtA[i] = 0x48
		i++
		if m.Signatures {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Min {
		dAtA[i] = 0x50
		i++
		if m.Min {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Date != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Date))
	}
	if m.Version != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Version))
	}
	if len(m.RestrictionReason) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.RestrictionReason)))
		i += copy(dAtA[i:], m.RestrictionReason)
	}
	if m.Cluster != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Cluster))
	}
	if m.IsCreator {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.IsCreator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAdmin {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Left {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.Left {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Kicked {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.Kicked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MigratedFromChatId != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.MigratedFromChatId))
	}
	if m.InviteRule != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.InviteRule))
	}
	if m.AdminsCount != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BannedCount))
	}
	if m.BotCount != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BotCount))
	}
	if m.ParticipantsCount != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ParticipantsCount))
	}
	if m.IsInChannel {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if m.IsInChannel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UtilDate != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UtilDate))
	}
	if len(m.ExportedInviteLink) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ExportedInviteLink)))
		i += copy(dAtA[i:], m.ExportedInviteLink)
	}
	if m.Creator != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Creator))
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.EveryoneQuiet {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		if m.EveryoneQuiet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PrivateChat {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		if m.PrivateChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ChannelParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelParticipant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.InviteId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.InviteId))
	}
	if m.CanSetUsername {
		dAtA[i] = 0x18
		i++
		if m.CanSetUsername {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanViewParticipants {
		dAtA[i] = 0x20
		i++
		if m.CanViewParticipants {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsCreator {
		dAtA[i] = 0x28
		i++
		if m.IsCreator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAdmin {
		dAtA[i] = 0x30
		i++
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBan {
		dAtA[i] = 0x38
		i++
		if m.IsBan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.JoinTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.JoinTime))
	}
	if m.AdRight != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AdRight.Size()))
		n1, err := m.AdRight.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.BanRight != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BanRight.Size()))
		n2, err := m.BanRight.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	if len(m.ExportedInviteLink) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ExportedInviteLink)))
		i += copy(dAtA[i:], m.ExportedInviteLink)
	}
	return i, nil
}

func (m *ChannelParticipantArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelParticipantArr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.TotalCount))
	}
	if len(m.Part) > 0 {
		for _, msg := range m.Part {
			dAtA[i] = 0x12
			i++
			i = encodeVarintChannelservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InvitedUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvitedUsers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.IsBotUser {
		dAtA[i] = 0x10
		i++
		if m.IsBotUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AdminRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRights) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChangeGroupInfo {
		dAtA[i] = 0x8
		i++
		if m.ChangeGroupInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DeleteMessages {
		dAtA[i] = 0x10
		i++
		if m.DeleteMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BanUsers {
		dAtA[i] = 0x18
		i++
		if m.BanUsers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PinMessages {
		dAtA[i] = 0x20
		i++
		if m.PinMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AddNewAdmin {
		dAtA[i] = 0x28
		i++
		if m.AddNewAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PromotedBy != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.PromotedBy))
	}
	if m.PostMessages {
		dAtA[i] = 0x38
		i++
		if m.PostMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EditMessages {
		dAtA[i] = 0x40
		i++
		if m.EditMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InviteUsers {
		dAtA[i] = 0x48
		i++
		if m.InviteUsers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InviteLink {
		dAtA[i] = 0x50
		i++
		if m.InviteLink {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *BannerRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannerRights) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CanReadMessages {
		dAtA[i] = 0x8
		i++
		if m.CanReadMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendMessge {
		dAtA[i] = 0x10
		i++
		if m.CanSendMessge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendMedia {
		dAtA[i] = 0x18
		i++
		if m.CanSendMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendSticker {
		dAtA[i] = 0x20
		i++
		if m.CanSendSticker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanEmbedLinks {
		dAtA[i] = 0x28
		i++
		if m.CanEmbedLinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickedBy != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.KickedBy))
	}
	if m.UntilDate != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UntilDate))
	}
	if m.CanSendGifs {
		dAtA[i] = 0x40
		i++
		if m.CanSendGifs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendGames {
		dAtA[i] = 0x48
		i++
		if m.CanSendGames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendInline {
		dAtA[i] = 0x50
		i++
		if m.CanSendInline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.CreatorId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.CreatorId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.Broadcast {
		dAtA[i] = 0x30
		i++
		if m.Broadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Megagroup {
		dAtA[i] = 0x38
		i++
		if m.Megagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Cluster != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Cluster))
	}
	if m.Date != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Date))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n3, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ChannelupdatesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelupdatesResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Channel.Size()))
		n4, err := m.Channel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Users != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Users.Size()))
		n5, err := m.Users.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Participants != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Participants.Size()))
		n6, err := m.Participants.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChannelUpdatesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelUpdatesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n7, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *AddChannelUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddChannelUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.InvitorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.InvitorId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x22
			i++
			i = encodeVarintChannelservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n8, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *DelChannelUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChannelUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.IsBotUser {
		dAtA[i] = 0x18
		i++
		if m.IsBotUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsKicked {
		dAtA[i] = 0x20
		i++
		if m.IsKicked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickedId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.KickedId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n9, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *UpdateChanAboutReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChanAboutReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n10, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *UpdateChanTitleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChanTitleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n11, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *UpdateChanPhotoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChanPhotoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n12, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *UpdateChanAdminRightsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChanAdminRightsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.FromId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.KeepAdmin {
		dAtA[i] = 0x20
		i++
		if m.KeepAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AdminRights != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AdminRights.Size()))
		n13, err := m.AdminRights.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Dlog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n14, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *UpdateChanAdminRightsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChanAdminRightsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Updates != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Updates.Size()))
		n15, err := m.Updates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.IsAdd {
		dAtA[i] = 0x10
		i++
		if m.IsAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ispromote {
		dAtA[i] = 0x18
		i++
		if m.Ispromote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *UpdateChanBanRightsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChanBanRightsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.FromId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.IsKick {
		dAtA[i] = 0x20
		i++
		if m.IsKick {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BanRights != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BanRights.Size()))
		n16, err := m.BanRights.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.BanDate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BanDate))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n17, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *DismissChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DismissChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.CmdOption {
		dAtA[i] = 0x20
		i++
		if m.CmdOption {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n18, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *DismissChannelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DismissChannelResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.B {
		dAtA[i] = 0x8
		i++
		if m.B {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ParticipantLimitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipantLimitReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Limit))
	}
	if m.PartType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.PartType))
	}
	if m.Userid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Userid))
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n19, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *ParticipantLimitResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipantLimitResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.TotalCount))
	}
	if len(m.Part) > 0 {
		for _, msg := range m.Part {
			dAtA[i] = 0x12
			i++
			i = encodeVarintChannelservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Users != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Users.Size()))
		n20, err := m.Users.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChannelOnePartReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelOnePartReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n21, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *GetChannelOnePartResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelOnePartResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OneParticipant != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.OneParticipant.Size()))
		n22, err := m.OneParticipant.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.UserInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserInfo.Size()))
		n23, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChannelUsersIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelUsersIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n24, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *GetChannelUsersIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelUsersIdResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.UserId) > 0 {
		dAtA26 := make([]byte, len(m.UserId)*10)
		var j25 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j25))
		i += copy(dAtA[i:], dAtA26[:j25])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChannelBaseInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelBaseInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n27, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *GetChannelBaseInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelBaseInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BaseInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BaseInfo.Size()))
		n28, err := m.BaseInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChannelInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n29, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *GetChannelInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BaseInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BaseInfo.Size()))
		n30, err := m.BaseInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *BatchChannelBaseInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchChannelBaseInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.UserId) > 0 {
		dAtA32 := make([]byte, len(m.UserId)*10)
		var j31 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j31))
		i += copy(dAtA[i:], dAtA32[:j31])
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n33, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *BatchChannelBaseInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchChannelBaseInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		for _, msg := range m.Channel {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChannelservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *GetChanByLinkReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChanByLinkReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelLink) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ChannelLink)))
		i += copy(dAtA[i:], m.ChannelLink)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n34, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *GetFullChannelInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullChannelInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n35, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *GetFullChannelInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullChannelInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channelinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Channelinfo.Size()))
		n36, err := m.Channelinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if len(m.ExportedInviteLink) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.ExportedInviteLink)))
		i += copy(dAtA[i:], m.ExportedInviteLink)
	}
	if m.ParticipantsCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ParticipantsCount))
	}
	if m.AdminsCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BannedCount))
	}
	if m.PinnedMsgId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.PinnedMsgId))
	}
	if m.MigratedFromMaxId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.MigratedFromMaxId))
	}
	if m.MigratedFromChatId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.MigratedFromChatId))
	}
	if m.AdminRights != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AdminRights.Size()))
		n37, err := m.AdminRights.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.BanRights != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BanRights.Size()))
		n38, err := m.BanRights.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.BotCount != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.BotCount))
	}
	if len(m.BotId) > 0 {
		dAtA40 := make([]byte, len(m.BotId)*10)
		var j39 int
		for _, num1 := range m.BotId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA40[j39] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j39++
			}
			dAtA40[j39] = uint8(num)
			j39++
		}
		dAtA[i] = 0x72
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(j39))
		i += copy(dAtA[i:], dAtA40[:j39])
	}
	if m.Users != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Users.Size()))
		n41, err := m.Users.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.CanSetUsername {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSetUsername {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanViewParticipants {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.CanViewParticipants {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ToggleInviteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToggleInviteReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if m.AdminEnable {
		dAtA[i] = 0x20
		i++
		if m.AdminEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n42, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}

func (m *CreateChannelLinkReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChannelLinkReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n43, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}

func (m *CreateChannelLinkResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChannelLinkResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Link) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *CheckChannelInviteLinkReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChannelInviteLinkReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.AccessHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.AccessHash)))
		i += copy(dAtA[i:], m.AccessHash)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n44, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}

func (m *CheckChannelInviteLinkResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChannelInviteLinkResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Link) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Gtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Gtype))
	}
	if m.ChanInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChanInfo.Size()))
		n45, err := m.ChanInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if m.Chatinfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Chatinfo.Size()))
		n46, err := m.Chatinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.LinkCreator != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.LinkCreator))
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *UpdateChannelUserNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelUserNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n47, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *UpdateChannelUserNameResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelUserNameResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *UpdateChannelPinnedMsgIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelPinnedMsgIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.UserId))
	}
	if m.PinnedMsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.PinnedMsgId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n48, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}

func (m *UpdateChannelPinnedMsgIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelPinnedMsgIdResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *CheckUserNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n49, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}

func (m *CheckUserNameResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserNameResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resultcode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *CheckChannelIsEncryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChannelIsEncryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Dlog.Size()))
		n50, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}

func (m *CheckChannelIsEncryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChannelIsEncryResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Encry {
		dAtA[i] = 0x8
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannelservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func encodeVarintChannelservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChannelInfoBase) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.Encry {
		n += 2
	}
	if m.Broadcast {
		n += 2
	}
	if m.Verified {
		n += 2
	}
	if m.Megagroup {
		n += 2
	}
	if m.Restricted {
		n += 2
	}
	if m.Democracy {
		n += 2
	}
	if m.Signatures {
		n += 2
	}
	if m.Min {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovChannelservice(uint64(m.Date))
	}
	if m.Version != 0 {
		n += 1 + sovChannelservice(uint64(m.Version))
	}
	l = len(m.RestrictionReason)
	if l > 0 {
		n += 2 + l + sovChannelservice(uint64(l))
	}
	if m.Cluster != 0 {
		n += 2 + sovChannelservice(uint64(m.Cluster))
	}
	if m.IsCreator {
		n += 3
	}
	if m.IsAdmin {
		n += 3
	}
	if m.Left {
		n += 3
	}
	if m.Kicked {
		n += 3
	}
	if m.MigratedFromChatId != 0 {
		n += 2 + sovChannelservice(uint64(m.MigratedFromChatId))
	}
	if m.InviteRule != 0 {
		n += 2 + sovChannelservice(uint64(m.InviteRule))
	}
	if m.AdminsCount != 0 {
		n += 2 + sovChannelservice(uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		n += 2 + sovChannelservice(uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		n += 2 + sovChannelservice(uint64(m.BannedCount))
	}
	if m.BotCount != 0 {
		n += 2 + sovChannelservice(uint64(m.BotCount))
	}
	if m.ParticipantsCount != 0 {
		n += 2 + sovChannelservice(uint64(m.ParticipantsCount))
	}
	if m.IsInChannel {
		n += 3
	}
	if m.UtilDate != 0 {
		n += 2 + sovChannelservice(uint64(m.UtilDate))
	}
	l = len(m.ExportedInviteLink)
	if l > 0 {
		n += 2 + l + sovChannelservice(uint64(l))
	}
	if m.Creator != 0 {
		n += 2 + sovChannelservice(uint64(m.Creator))
	}
	l = len(m.About)
	if l > 0 {
		n += 2 + l + sovChannelservice(uint64(l))
	}
	if m.EveryoneQuiet {
		n += 3
	}
	if m.PrivateChat {
		n += 3
	}
	return n
}

func (m *ChannelParticipant) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.InviteId != 0 {
		n += 1 + sovChannelservice(uint64(m.InviteId))
	}
	if m.CanSetUsername {
		n += 2
	}
	if m.CanViewParticipants {
		n += 2
	}
	if m.IsCreator {
		n += 2
	}
	if m.IsAdmin {
		n += 2
	}
	if m.IsBan {
		n += 2
	}
	if m.JoinTime != 0 {
		n += 1 + sovChannelservice(uint64(m.JoinTime))
	}
	if m.AdRight != nil {
		l = m.AdRight.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.BanRight != nil {
		l = m.BanRight.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	l = len(m.ExportedInviteLink)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ChannelParticipantArr) Size() (n int) {
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovChannelservice(uint64(m.TotalCount))
	}
	if len(m.Part) > 0 {
		for _, e := range m.Part {
			l = e.Size()
			n += 1 + l + sovChannelservice(uint64(l))
		}
	}
	return n
}

func (m *InvitedUsers) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.IsBotUser {
		n += 2
	}
	return n
}

func (m *AdminRights) Size() (n int) {
	var l int
	_ = l
	if m.ChangeGroupInfo {
		n += 2
	}
	if m.DeleteMessages {
		n += 2
	}
	if m.BanUsers {
		n += 2
	}
	if m.PinMessages {
		n += 2
	}
	if m.AddNewAdmin {
		n += 2
	}
	if m.PromotedBy != 0 {
		n += 1 + sovChannelservice(uint64(m.PromotedBy))
	}
	if m.PostMessages {
		n += 2
	}
	if m.EditMessages {
		n += 2
	}
	if m.InviteUsers {
		n += 2
	}
	if m.InviteLink {
		n += 2
	}
	return n
}

func (m *BannerRights) Size() (n int) {
	var l int
	_ = l
	if m.CanReadMessages {
		n += 2
	}
	if m.CanSendMessge {
		n += 2
	}
	if m.CanSendMedia {
		n += 2
	}
	if m.CanSendSticker {
		n += 2
	}
	if m.CanEmbedLinks {
		n += 2
	}
	if m.KickedBy != 0 {
		n += 1 + sovChannelservice(uint64(m.KickedBy))
	}
	if m.UntilDate != 0 {
		n += 1 + sovChannelservice(uint64(m.UntilDate))
	}
	if m.CanSendGifs {
		n += 2
	}
	if m.CanSendGames {
		n += 2
	}
	if m.CanSendInline {
		n += 2
	}
	return n
}

func (m *CreateChannelReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.CreatorId != 0 {
		n += 1 + sovChannelservice(uint64(m.CreatorId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Broadcast {
		n += 2
	}
	if m.Megagroup {
		n += 2
	}
	if m.Cluster != 0 {
		n += 1 + sovChannelservice(uint64(m.Cluster))
	}
	if m.Date != 0 {
		n += 1 + sovChannelservice(uint64(m.Date))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ChannelupdatesResp) Size() (n int) {
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Users != nil {
		l = m.Users.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Participants != nil {
		l = m.Participants.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChannelUpdatesReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *AddChannelUserReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.InvitorId != 0 {
		n += 1 + sovChannelservice(uint64(m.InvitorId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovChannelservice(uint64(l))
		}
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *DelChannelUserReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.IsBotUser {
		n += 2
	}
	if m.IsKicked {
		n += 2
	}
	if m.KickedId != 0 {
		n += 1 + sovChannelservice(uint64(m.KickedId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChanAboutReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChanTitleReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChanPhotoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChanAdminRightsReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovChannelservice(uint64(m.FromId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.KeepAdmin {
		n += 2
	}
	if m.AdminRights != nil {
		l = m.AdminRights.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChanAdminRightsResp) Size() (n int) {
	var l int
	_ = l
	if m.Updates != nil {
		l = m.Updates.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.IsAdd {
		n += 2
	}
	if m.Ispromote {
		n += 2
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *UpdateChanBanRightsReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovChannelservice(uint64(m.FromId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.IsKick {
		n += 2
	}
	if m.BanRights != nil {
		l = m.BanRights.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.BanDate != 0 {
		n += 1 + sovChannelservice(uint64(m.BanDate))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *DismissChannelReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.CmdOption {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *DismissChannelResp) Size() (n int) {
	var l int
	_ = l
	if m.B {
		n += 2
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ParticipantLimitReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Offset != 0 {
		n += 1 + sovChannelservice(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovChannelservice(uint64(m.Limit))
	}
	if m.PartType != 0 {
		n += 1 + sovChannelservice(uint64(m.PartType))
	}
	if m.Userid != 0 {
		n += 1 + sovChannelservice(uint64(m.Userid))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *ParticipantLimitResp) Size() (n int) {
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovChannelservice(uint64(m.TotalCount))
	}
	if len(m.Part) > 0 {
		for _, e := range m.Part {
			l = e.Size()
			n += 1 + l + sovChannelservice(uint64(l))
		}
	}
	if m.Users != nil {
		l = m.Users.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChannelOnePartReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetChannelOnePartResp) Size() (n int) {
	var l int
	_ = l
	if m.OneParticipant != nil {
		l = m.OneParticipant.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChannelUsersIdReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetChannelUsersIdResp) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChannelBaseInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetChannelBaseInfoResp) Size() (n int) {
	var l int
	_ = l
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChannelInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetChannelInfoResp) Size() (n int) {
	var l int
	_ = l
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *BatchChannelBaseInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *BatchChannelBaseInfoResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Channel) > 0 {
		for _, e := range m.Channel {
			l = e.Size()
			n += 1 + l + sovChannelservice(uint64(l))
		}
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *GetChanByLinkReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChannelLink)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetFullChannelInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *GetFullChannelInfoResp) Size() (n int) {
	var l int
	_ = l
	if m.Channelinfo != nil {
		l = m.Channelinfo.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	l = len(m.ExportedInviteLink)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.ParticipantsCount != 0 {
		n += 1 + sovChannelservice(uint64(m.ParticipantsCount))
	}
	if m.AdminsCount != 0 {
		n += 1 + sovChannelservice(uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		n += 1 + sovChannelservice(uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		n += 1 + sovChannelservice(uint64(m.BannedCount))
	}
	if m.PinnedMsgId != 0 {
		n += 1 + sovChannelservice(uint64(m.PinnedMsgId))
	}
	if m.MigratedFromMaxId != 0 {
		n += 1 + sovChannelservice(uint64(m.MigratedFromMaxId))
	}
	if m.MigratedFromChatId != 0 {
		n += 1 + sovChannelservice(uint64(m.MigratedFromChatId))
	}
	if m.AdminRights != nil {
		l = m.AdminRights.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.BanRights != nil {
		l = m.BanRights.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.BotCount != 0 {
		n += 1 + sovChannelservice(uint64(m.BotCount))
	}
	if len(m.BotId) > 0 {
		l = 0
		for _, e := range m.BotId {
			l += sovChannelservice(uint64(e))
		}
		n += 1 + sovChannelservice(uint64(l)) + l
	}
	if m.Users != nil {
		l = m.Users.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.CanSetUsername {
		n += 3
	}
	if m.CanViewParticipants {
		n += 3
	}
	if m.Resultcode != 0 {
		n += 2 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ToggleInviteReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	if m.AdminEnable {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *CreateChannelLinkReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *CreateChannelLinkResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *CheckChannelInviteLinkReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	l = len(m.AccessHash)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *CheckChannelInviteLinkResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Gtype != 0 {
		n += 1 + sovChannelservice(uint64(m.Gtype))
	}
	if m.ChanInfo != nil {
		l = m.ChanInfo.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Chatinfo != nil {
		l = m.Chatinfo.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.LinkCreator != 0 {
		n += 1 + sovChannelservice(uint64(m.LinkCreator))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *UpdateChannelUserNameReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChannelUserNameResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *UpdateChannelPinnedMsgIdReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChannelservice(uint64(m.UserId))
	}
	if m.PinnedMsgId != 0 {
		n += 1 + sovChannelservice(uint64(m.PinnedMsgId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *UpdateChannelPinnedMsgIdResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *CheckUserNameReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChannelservice(uint64(m.AccessHash))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovChannelservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *CheckUserNameResp) Size() (n int) {
	var l int
	_ = l
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func (m *CheckChannelIsEncryReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChannelservice(uint64(m.ChannelId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChannelservice(uint64(l))
	}
	return n
}

func (m *CheckChannelIsEncryResp) Size() (n int) {
	var l int
	_ = l
	if m.Encry {
		n += 2
	}
	if m.Resultcode != 0 {
		n += 1 + sovChannelservice(uint64(m.Resultcode))
	}
	return n
}

func sovChannelservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChannelservice(x uint64) (n int) {
	return sovChannelservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChannelInfoBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelInfoBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelInfoBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Broadcast = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Megagroup = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Democracy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Democracy = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Signatures = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestrictionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCreator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCreator = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Left = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kicked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kicked = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedFromChatId", wireType)
			}
			m.MigratedFromChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedFromChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteRule", wireType)
			}
			m.InviteRule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteRule |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsCount", wireType)
			}
			m.AdminsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedCount", wireType)
			}
			m.KickedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedCount", wireType)
			}
			m.BannedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotCount", wireType)
			}
			m.BotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInChannel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInChannel = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilDate", wireType)
			}
			m.UtilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryoneQuiet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EveryoneQuiet = bool(v != 0)
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrivateChat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteId", wireType)
			}
			m.InviteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSetUsername", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSetUsername = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanViewParticipants", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanViewParticipants = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCreator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCreator = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBan = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
			}
			m.JoinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdRight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdRight == nil {
				m.AdRight = &AdminRights{}
			}
			if err := m.AdRight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanRight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BanRight == nil {
				m.BanRight = &BannerRights{}
			}
			if err := m.BanRight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelParticipantArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelParticipantArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelParticipantArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Part = append(m.Part, &ChannelParticipant{})
			if err := m.Part[len(m.Part)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvitedUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvitedUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvitedUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBotUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBotUser = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeGroupInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeGroupInfo = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteMessages = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanUsers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BanUsers = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PinMessages = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddNewAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddNewAdmin = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotedBy", wireType)
			}
			m.PromotedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromotedBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PostMessages = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EditMessages = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUsers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteUsers = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteLink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteLink = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BannerRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BannerRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BannerRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanReadMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanReadMessages = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMessge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMessge = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMedia = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendSticker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendSticker = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanEmbedLinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanEmbedLinks = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedBy", wireType)
			}
			m.KickedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UntilDate", wireType)
			}
			m.UntilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UntilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendGifs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendGifs = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendGames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendGames = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendInline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendInline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorId", wireType)
			}
			m.CreatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Broadcast = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Megagroup = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelupdatesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelupdatesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelupdatesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &ChannelInfoBase{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Users == nil {
				m.Users = &UserInfoArray{}
			}
			if err := m.Users.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participants == nil {
				m.Participants = &ChannelParticipantArr{}
			}
			if err := m.Participants.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelUpdatesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelUpdatesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelUpdatesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddChannelUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddChannelUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddChannelUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitorId", wireType)
			}
			m.InvitorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvitorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &InvitedUsers{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChannelUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChannelUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChannelUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBotUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBotUser = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsKicked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsKicked = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedId", wireType)
			}
			m.KickedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChanAboutReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChanAboutReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChanAboutReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChanTitleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChanTitleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChanTitleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChanPhotoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChanPhotoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChanPhotoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChanAdminRightsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChanAdminRightsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChanAdminRightsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeepAdmin = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminRights == nil {
				m.AdminRights = &AdminRights{}
			}
			if err := m.AdminRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChanAdminRightsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChanAdminRightsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChanAdminRightsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updates == nil {
				m.Updates = &ChannelupdatesResp{}
			}
			if err := m.Updates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdd = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ispromote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ispromote = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChanBanRightsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChanBanRightsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChanBanRightsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsKick", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsKick = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BanRights == nil {
				m.BanRights = &BannerRights{}
			}
			if err := m.BanRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanDate", wireType)
			}
			m.BanDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BanDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DismissChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DismissChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DismissChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdOption", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CmdOption = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DismissChannelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DismissChannelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DismissChannelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.B = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipantLimitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipantLimitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipantLimitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartType", wireType)
			}
			m.PartType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipantLimitResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipantLimitResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipantLimitResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Part = append(m.Part, &ChannelParticipant{})
			if err := m.Part[len(m.Part)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Users == nil {
				m.Users = &UserInfoArray{}
			}
			if err := m.Users.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelOnePartReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelOnePartReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelOnePartReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelOnePartResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelOnePartResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelOnePartResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneParticipant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OneParticipant == nil {
				m.OneParticipant = &ChannelParticipant{}
			}
			if err := m.OneParticipant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelUsersIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelUsersIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelUsersIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelUsersIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelUsersIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelUsersIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelBaseInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelBaseInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelBaseInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelBaseInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelBaseInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelBaseInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &ChannelInfoBase{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &ChannelInfoBase{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchChannelBaseInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchChannelBaseInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchChannelBaseInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchChannelBaseInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchChannelBaseInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchChannelBaseInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = append(m.Channel, &ChannelInfoBase{})
			if err := m.Channel[len(m.Channel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChanByLinkReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChanByLinkReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChanByLinkReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFullChannelInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullChannelInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullChannelInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFullChannelInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullChannelInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullChannelInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channelinfo == nil {
				m.Channelinfo = &ChannelInfoBase{}
			}
			if err := m.Channelinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsCount", wireType)
			}
			m.AdminsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedCount", wireType)
			}
			m.KickedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedCount", wireType)
			}
			m.BannedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedMsgId", wireType)
			}
			m.PinnedMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PinnedMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedFromMaxId", wireType)
			}
			m.MigratedFromMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedFromMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedFromChatId", wireType)
			}
			m.MigratedFromChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedFromChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminRights == nil {
				m.AdminRights = &AdminRights{}
			}
			if err := m.AdminRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BanRights == nil {
				m.BanRights = &BannerRights{}
			}
			if err := m.BanRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotCount", wireType)
			}
			m.BotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BotId = append(m.BotId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannelservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannelservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BotId = append(m.BotId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Users == nil {
				m.Users = &UserInfoArray{}
			}
			if err := m.Users.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSetUsername", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSetUsername = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanViewParticipants", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanViewParticipants = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToggleInviteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToggleInviteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToggleInviteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminEnable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChannelLinkReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChannelLinkReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChannelLinkReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChannelLinkResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChannelLinkResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChannelLinkResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChannelInviteLinkReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChannelInviteLinkReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChannelInviteLinkReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChannelInviteLinkResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChannelInviteLinkResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChannelInviteLinkResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtype", wireType)
			}
			m.Gtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChanInfo == nil {
				m.ChanInfo = &ChannelInfoBase{}
			}
			if err := m.ChanInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chatinfo == nil {
				m.Chatinfo = &GetChatInfoResp{}
			}
			if err := m.Chatinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkCreator", wireType)
			}
			m.LinkCreator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LinkCreator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelUserNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelUserNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelUserNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelUserNameResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelUserNameResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelUserNameResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelPinnedMsgIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelPinnedMsgIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelPinnedMsgIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedMsgId", wireType)
			}
			m.PinnedMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PinnedMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelPinnedMsgIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelPinnedMsgIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelPinnedMsgIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserNameResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserNameResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserNameResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChannelIsEncryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChannelIsEncryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChannelIsEncryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannelservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &pbcomm.Debug{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChannelIsEncryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChannelIsEncryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChannelIsEncryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannelservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannelservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChannelservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChannelservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChannelservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChannelservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChannelservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChannelservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChannelservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChannelservice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/channelservice.proto", fileDescriptorChannelservice)
}

var fileDescriptorChannelservice = []byte{
	// 3106 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x3a, 0x4f, 0x6f, 0x1b, 0xc7,
	0xf5, 0x5e, 0x51, 0x94, 0xc8, 0x47, 0xea, 0x0f, 0xc7, 0x92, 0xbc, 0xa6, 0x6d, 0x59, 0xa2, 0x9d,
	0x44, 0xf8, 0x01, 0x91, 0x7f, 0x51, 0x11, 0xa4, 0x08, 0xd0, 0x83, 0x25, 0x3b, 0x8e, 0xd0, 0x38,
	0x76, 0xd6, 0x4a, 0xd3, 0xa6, 0x68, 0xd9, 0x25, 0x77, 0x44, 0x4d, 0x45, 0xee, 0xae, 0x77, 0x96,
	0x72, 0xf4, 0x01, 0x0a, 0xb4, 0x08, 0x72, 0x49, 0x81, 0xf6, 0xd2, 0x4f, 0x50, 0xa0, 0x40, 0x81,
	0x7e, 0x86, 0x14, 0xb9, 0xb5, 0xb7, 0x5e, 0x8b, 0xdc, 0x7a, 0xea, 0xa9, 0x40, 0x6f, 0x2d, 0xe6,
	0xcd, 0xec, 0x72, 0x66, 0xc9, 0x95, 0x96, 0xa5, 0x8d, 0x9c, 0xc8, 0x79, 0xf3, 0xe6, 0xcd, 0xfb,
	0x37, 0x6f, 0xde, 0x7b, 0xb3, 0x70, 0xd4, 0x63, 0x71, 0xdf, 0xed, 0xec, 0x76, 0x4f, 0xdc, 0x98,
	0xd3, 0xe8, 0x8c, 0x46, 0xbb, 0x6c, 0x70, 0x8f, 0xf9, 0x31, 0x8d, 0x8e, 0xdd, 0x2e, 0x0d, 0xa3,
	0xa0, 0x33, 0x3c, 0xbe, 0x17, 0x06, 0xb1, 0x1b, 0x07, 0x61, 0x14, 0xc4, 0x62, 0xc8, 0xef, 0x31,
	0xff, 0x38, 0x90, 0xd8, 0xf7, 0xba, 0x27, 0xae, 0xef, 0xd3, 0xbe, 0x18, 0xb1, 0x2e, 0xdd, 0x45,
	0x1c, 0x02, 0x23, 0x84, 0xe6, 0xfb, 0xff, 0xd3, 0x0e, 0x61, 0xa7, 0x1b, 0x0c, 0x06, 0xea, 0x47,
	0x52, 0x6d, 0x3e, 0x7d, 0x09, 0xbc, 0xc6, 0x82, 0x5e, 0xe0, 0x2b, 0x8a, 0x1f, 0xbd, 0x0c, 0x8a,
	0x86, 0xe8, 0xb3, 0x33, 0x39, 0xe4, 0x34, 0x52, 0x0b, 0x71, 0xbe, 0xf5, 0xe7, 0x0a, 0xac, 0x1c,
	0x48, 0x2d, 0x1f, 0xfa, 0xc7, 0xc1, 0xbe, 0xcb, 0x29, 0xb9, 0x05, 0xa0, 0x14, 0xdf, 0x66, 0x9e,
	0x6d, 0x6d, 0x59, 0x3b, 0x65, 0xa7, 0xaa, 0x20, 0x87, 0x1e, 0xb9, 0x0d, 0x35, 0xb7, 0xdb, 0xa5,
	0x9c, 0xb7, 0x4f, 0x5c, 0x7e, 0x62, 0xcf, 0x6d, 0x59, 0x3b, 0x25, 0x07, 0x24, 0xe8, 0x7d, 0x97,
	0x9f, 0x90, 0x35, 0x28, 0x53, 0xbf, 0x1b, 0x9d, 0xdb, 0xa5, 0x2d, 0x6b, 0xa7, 0xe2, 0xc8, 0x01,
	0xb9, 0x09, 0xd5, 0x4e, 0x14, 0xb8, 0x5e, 0xd7, 0xe5, 0xb1, 0x3d, 0x8f, 0x33, 0x23, 0x00, 0x69,
	0x42, 0xe5, 0x8c, 0x46, 0xec, 0x98, 0x51, 0xcf, 0x2e, 0xe3, 0x64, 0x3a, 0x16, 0x2b, 0x07, 0xb4,
	0xe7, 0xf6, 0xa2, 0x60, 0x18, 0xda, 0x0b, 0x72, 0x65, 0x0a, 0x20, 0x9b, 0x00, 0x11, 0xe5, 0x71,
	0xc4, 0xba, 0x31, 0xf5, 0xec, 0x45, 0x9c, 0xd6, 0x20, 0x62, 0xb5, 0x47, 0x07, 0x41, 0x37, 0x72,
	0xbb, 0xe7, 0x76, 0x45, 0xae, 0x4e, 0x01, 0x62, 0x35, 0x67, 0x3d, 0xdf, 0x8d, 0x87, 0x11, 0xe5,
	0x76, 0x55, 0xae, 0x1e, 0x41, 0xc8, 0x2a, 0x94, 0x06, 0xcc, 0xb7, 0x01, 0x27, 0xc4, 0x5f, 0x21,
	0x5d, 0xcc, 0xe2, 0x3e, 0xb5, 0x6b, 0x5b, 0xd6, 0x4e, 0xd5, 0x91, 0x03, 0xc1, 0xbf, 0xd0, 0xad,
	0xef, 0x0e, 0xa8, 0x5d, 0xc7, 0x89, 0x74, 0x2c, 0x56, 0x84, 0x27, 0x41, 0x1c, 0xd8, 0x4b, 0x72,
	0x05, 0x0e, 0x08, 0x81, 0x79, 0xcf, 0x8d, 0xa9, 0xbd, 0x8c, 0xfa, 0xc5, 0xff, 0xc4, 0x86, 0xc5,
	0x33, 0x1a, 0x71, 0x16, 0xf8, 0xf6, 0x0a, 0x82, 0x93, 0x21, 0x79, 0x13, 0x48, 0x22, 0x13, 0x0b,
	0xfc, 0x76, 0x44, 0x5d, 0x1e, 0xf8, 0xf6, 0x2a, 0x12, 0x6c, 0x68, 0x33, 0x0e, 0x4e, 0x08, 0x42,
	0xdd, 0xfe, 0x90, 0xc7, 0x34, 0xb2, 0x1b, 0x92, 0x90, 0x1a, 0x0a, 0xe3, 0x32, 0xde, 0xee, 0x46,
	0xd4, 0x8d, 0x83, 0xc8, 0x26, 0x52, 0x1f, 0x8c, 0x1f, 0x48, 0x00, 0xb9, 0x0e, 0x15, 0xc6, 0xdb,
	0xae, 0x27, 0x84, 0xbe, 0x8a, 0x93, 0x8b, 0x8c, 0xdf, 0x17, 0x43, 0xc1, 0x70, 0x9f, 0x1e, 0xc7,
	0xf6, 0x1a, 0x82, 0xf1, 0x3f, 0xd9, 0x80, 0x85, 0x53, 0xd6, 0x3d, 0xa5, 0x9e, 0xbd, 0x8e, 0x50,
	0x35, 0x22, 0x6f, 0xc1, 0xfa, 0x80, 0xf5, 0x22, 0x37, 0xa6, 0x5e, 0xfb, 0x38, 0x0a, 0x06, 0x6d,
	0xe1, 0xb1, 0xc2, 0x9b, 0x36, 0x90, 0x1b, 0x92, 0x4c, 0xbe, 0x17, 0x05, 0x83, 0x83, 0x13, 0x37,
	0x96, 0x6e, 0xc5, 0xfc, 0x33, 0x16, 0xd3, 0x76, 0x34, 0xec, 0x53, 0xfb, 0x1a, 0x22, 0x82, 0x04,
	0x39, 0xc3, 0x3e, 0x25, 0xdb, 0x50, 0x47, 0x46, 0x78, 0xbb, 0x1b, 0x0c, 0xfd, 0xd8, 0xb6, 0x11,
	0xa3, 0x26, 0x61, 0x07, 0x02, 0x24, 0x50, 0xbe, 0x8f, 0x0c, 0x28, 0x94, 0xeb, 0x12, 0x45, 0xc2,
	0x52, 0x94, 0x7d, 0xe1, 0xc9, 0x09, 0x4a, 0x53, 0xa2, 0x48, 0x98, 0x44, 0xb9, 0x01, 0xd5, 0xfd,
	0x20, 0x56, 0xf3, 0x37, 0x70, 0xbe, 0xb2, 0x1f, 0xc4, 0x72, 0xf2, 0x4d, 0x20, 0x4f, 0xdd, 0x28,
	0x66, 0x5d, 0x16, 0xba, 0x7e, 0x9c, 0xf0, 0x72, 0x13, 0xb1, 0x1a, 0xfa, 0x8c, 0x44, 0xdf, 0x82,
	0xda, 0x21, 0x3f, 0xf4, 0xd5, 0x11, 0xb3, 0x6f, 0xa1, 0x96, 0x74, 0x90, 0xd8, 0x6d, 0x18, 0xb3,
	0x7e, 0x1b, 0x9d, 0x61, 0x53, 0xee, 0x26, 0x00, 0x0f, 0x84, 0x43, 0xfc, 0x3f, 0xac, 0xd1, 0xcf,
	0xc2, 0x20, 0x12, 0x7a, 0x54, 0xda, 0xe9, 0x33, 0xff, 0xd4, 0xbe, 0x8d, 0x86, 0x27, 0xc9, 0xdc,
	0x21, 0x4e, 0x7d, 0xc0, 0xfc, 0x53, 0x61, 0x79, 0x65, 0x4b, 0x7b, 0x4b, 0x5a, 0x3e, 0x31, 0xed,
	0x1a, 0x94, 0xef, 0x77, 0x82, 0x61, 0x6c, 0x6f, 0x4b, 0x37, 0xc4, 0x01, 0xb9, 0x0b, 0x4b, 0x0f,
	0xcf, 0x68, 0x74, 0x1e, 0xf8, 0xf4, 0xa3, 0x21, 0xa3, 0xb1, 0xdd, 0x42, 0x16, 0x4d, 0xa0, 0x10,
	0xe3, 0x69, 0xc4, 0xce, 0xdc, 0x98, 0x0a, 0x6b, 0xd9, 0x77, 0xa4, 0x18, 0x1a, 0xa8, 0xf5, 0xcf,
	0x12, 0x10, 0x25, 0x92, 0xa6, 0x05, 0x72, 0x0d, 0x16, 0xc5, 0x39, 0x18, 0x05, 0x92, 0x05, 0x31,
	0x3c, 0xf4, 0x84, 0xd8, 0x4a, 0x20, 0xe6, 0x61, 0x0c, 0x29, 0x3b, 0x15, 0x09, 0x38, 0xf4, 0xc8,
	0x0e, 0xac, 0x76, 0x5d, 0xbf, 0xcd, 0x69, 0xdc, 0x4e, 0x4f, 0x95, 0x0c, 0x26, 0xcb, 0x5d, 0xd7,
	0x7f, 0x46, 0xe3, 0x8f, 0x93, 0xb3, 0xb5, 0x07, 0xeb, 0x02, 0xf3, 0x8c, 0xd1, 0x17, 0xed, 0x50,
	0xd3, 0xbe, 0x8a, 0x30, 0x57, 0xbb, 0xae, 0xff, 0x03, 0x46, 0x5f, 0xe8, 0x86, 0xc9, 0x1c, 0x81,
	0xf2, 0x45, 0x47, 0x60, 0xc1, 0x3c, 0x02, 0xeb, 0xb0, 0xc0, 0x78, 0xbb, 0xe3, 0xfa, 0x2a, 0xce,
	0x94, 0x19, 0xdf, 0x77, 0x7d, 0x21, 0xcb, 0xcf, 0x03, 0xe6, 0xb7, 0x63, 0x36, 0xa0, 0x18, 0x62,
	0xca, 0x4e, 0x45, 0x00, 0x8e, 0x18, 0x72, 0x58, 0x71, 0xbd, 0x76, 0xc4, 0x7a, 0x27, 0x31, 0xc6,
	0x97, 0xda, 0xde, 0xb5, 0xdd, 0x51, 0x44, 0xde, 0x45, 0xc2, 0x8e, 0x98, 0xe5, 0xce, 0xa2, 0xeb,
	0xe1, 0x3f, 0xf2, 0x36, 0x54, 0x3b, 0xae, 0xaf, 0x16, 0x01, 0x2e, 0xb2, 0xf5, 0x45, 0xe8, 0xad,
	0x91, 0x5a, 0x55, 0xe9, 0xb8, 0x92, 0x00, 0x79, 0x17, 0x43, 0xe1, 0xb0, 0x1f, 0x77, 0x03, 0x4f,
	0xc6, 0xa7, 0xe5, 0xbd, 0xa6, 0xbe, 0x4e, 0x58, 0xca, 0x41, 0x8c, 0x83, 0xc0, 0xa3, 0x8e, 0x86,
	0x9d, 0xeb, 0x69, 0xf5, 0x3c, 0x4f, 0x6b, 0x9d, 0xc2, 0xfa, 0xb8, 0xc1, 0xef, 0x47, 0x91, 0x88,
	0xa9, 0x47, 0x41, 0xec, 0xf6, 0xf1, 0x04, 0x28, 0xb3, 0x6b, 0x10, 0xb2, 0x07, 0xf3, 0xc2, 0x54,
	0xf6, 0xdc, 0x56, 0x69, 0xa7, 0xb6, 0xb7, 0x99, 0x61, 0x30, 0x43, 0xd0, 0x41, 0xdc, 0xd6, 0x23,
	0xa8, 0xcb, 0xad, 0x3d, 0x61, 0x7a, 0x9e, 0xef, 0x57, 0x9b, 0x50, 0x13, 0x26, 0x0a, 0xa4, 0xe7,
	0xa0, 0x67, 0xa1, 0x75, 0xf7, 0x03, 0x74, 0x9a, 0xd6, 0xbf, 0xe6, 0xa0, 0xa6, 0xe9, 0x9c, 0xfc,
	0x1f, 0x34, 0xc4, 0xd5, 0xd6, 0xa3, 0x6d, 0xbc, 0x4e, 0xda, 0x82, 0x19, 0x24, 0x59, 0x71, 0x56,
	0xe4, 0xc4, 0x23, 0x01, 0x17, 0x97, 0x23, 0x79, 0x03, 0x56, 0x3c, 0xda, 0xa7, 0x31, 0x6d, 0x0f,
	0x28, 0xe7, 0x6e, 0x8f, 0x72, 0x45, 0x7f, 0x59, 0x82, 0x1f, 0x2b, 0xa8, 0x70, 0x08, 0x61, 0x3f,
	0xbc, 0x6d, 0x95, 0xe3, 0x0a, 0x2b, 0x49, 0xd6, 0xb7, 0xa1, 0x1e, 0x32, 0x7f, 0x44, 0x42, 0x7a,
	0x6a, 0x2d, 0x64, 0x7e, 0xba, 0xbe, 0x05, 0x4b, 0xae, 0xe7, 0xb5, 0x7d, 0xfa, 0x42, 0xf9, 0xa1,
	0x74, 0xd2, 0x9a, 0xeb, 0x79, 0x1f, 0xd2, 0x17, 0xd2, 0x17, 0x6f, 0x43, 0x2d, 0x8c, 0x82, 0x41,
	0x20, 0x0c, 0xd6, 0x39, 0x47, 0x4f, 0x2d, 0x3b, 0x90, 0x80, 0xf6, 0xcf, 0xc9, 0x1d, 0x58, 0x0a,
	0x03, 0x1e, 0x8f, 0x36, 0x92, 0x3e, 0x5b, 0x17, 0xc0, 0x74, 0xa7, 0x3b, 0xb0, 0x44, 0x3d, 0xa6,
	0x21, 0xc9, 0x1b, 0xb2, 0x2e, 0x80, 0x29, 0xd2, 0x36, 0xd4, 0x95, 0x4b, 0x48, 0x89, 0xe4, 0x35,
	0xa9, 0xc2, 0xb5, 0x14, 0x6a, 0x14, 0xbd, 0xd1, 0x6b, 0xe4, 0x7d, 0xa9, 0xa2, 0x37, 0x7a, 0xcb,
	0x2f, 0x4b, 0x2a, 0xf0, 0x46, 0x9a, 0xe2, 0x5d, 0xbc, 0xc9, 0xbc, 0xd1, 0xee, 0x89, 0xe2, 0x5d,
	0x71, 0x91, 0x79, 0x29, 0x03, 0xaf, 0xc3, 0x8a, 0x8c, 0x07, 0xbe, 0xc4, 0xed, 0x51, 0xa5, 0xf8,
	0x25, 0x0c, 0x07, 0x3e, 0x62, 0xf6, 0x28, 0xb9, 0x0b, 0xcb, 0x1a, 0x9e, 0xc7, 0x5c, 0xa5, 0xfc,
	0x7a, 0x8a, 0xe6, 0x31, 0x77, 0x14, 0x5d, 0x7c, 0xaf, 0xcd, 0x63, 0x71, 0x37, 0x44, 0xca, 0x08,
	0xcb, 0x0a, 0xef, 0x99, 0x84, 0x26, 0xfb, 0xd2, 0x41, 0x87, 0x7a, 0x28, 0x18, 0x57, 0x96, 0x10,
	0xfb, 0x3e, 0x14, 0x50, 0x21, 0x1b, 0xda, 0x5b, 0x5e, 0x7c, 0x23, 0x4b, 0x54, 0x24, 0x60, 0xff,
	0x5c, 0x84, 0x9b, 0xa1, 0x9f, 0x46, 0xf8, 0x45, 0x99, 0x4e, 0x21, 0x04, 0x43, 0x7c, 0x0b, 0x96,
	0x52, 0x6e, 0x7a, 0xec, 0x38, 0xb1, 0x40, 0x4d, 0xb1, 0xf2, 0x88, 0x1d, 0x73, 0x43, 0xae, 0x9e,
	0x3b, 0x48, 0x33, 0x95, 0x44, 0xae, 0x47, 0x02, 0x66, 0x68, 0x89, 0xf9, 0x7d, 0xe6, 0x53, 0x65,
	0x87, 0x44, 0x4b, 0x87, 0x08, 0x6c, 0xfd, 0x7e, 0x0e, 0x56, 0x31, 0xd8, 0x51, 0x75, 0xdc, 0x1c,
	0xfa, 0x7c, 0xe6, 0xa4, 0x4f, 0xac, 0x97, 0x01, 0x54, 0xac, 0x2f, 0xa9, 0xf5, 0x12, 0x72, 0xe8,
	0x8d, 0xb2, 0xa6, 0x79, 0x3d, 0x6b, 0x5a, 0x83, 0xb2, 0x8b, 0x57, 0x52, 0x59, 0x42, 0x71, 0x60,
	0x66, 0x8a, 0x0b, 0xd9, 0x4c, 0xd1, 0xc8, 0x06, 0x17, 0xb3, 0xd9, 0xa0, 0x96, 0xf8, 0x54, 0xcc,
	0xc4, 0x27, 0xc9, 0xb7, 0xaa, 0x5a, 0xbe, 0xb5, 0x0d, 0xf3, 0x0f, 0xfa, 0x41, 0x4f, 0x85, 0xd8,
	0xa5, 0x5d, 0x55, 0x11, 0x3c, 0xa0, 0x9d, 0x61, 0xcf, 0xc1, 0xa9, 0xd6, 0x7f, 0xac, 0xf4, 0x5e,
	0x1b, 0x86, 0x62, 0x11, 0x77, 0x28, 0x0f, 0xc9, 0xdb, 0xb0, 0xa8, 0x94, 0x83, 0xba, 0xaa, 0xed,
	0xdd, 0x98, 0x10, 0xc6, 0x92, 0x8c, 0xda, 0x49, 0x70, 0xc9, 0x3d, 0x28, 0xcb, 0x23, 0x34, 0x87,
	0x8b, 0xae, 0xeb, 0x8b, 0xc4, 0x41, 0x12, 0x2b, 0xee, 0x47, 0x91, 0x7b, 0xee, 0x48, 0x3c, 0xf2,
	0x10, 0xea, 0xc6, 0xb5, 0x56, 0xc2, 0x75, 0xdb, 0x17, 0xc7, 0xcc, 0xfb, 0x51, 0xe4, 0x18, 0xcb,
	0x32, 0x37, 0xc3, 0xfc, 0x34, 0x37, 0x43, 0xeb, 0x39, 0xac, 0x3d, 0xa2, 0xb1, 0xda, 0xe5, 0xe3,
	0x44, 0x07, 0x97, 0x7a, 0x8c, 0x16, 0xa1, 0xe7, 0x8c, 0x08, 0x9d, 0x28, 0xbd, 0x94, 0xaf, 0xf4,
	0xaf, 0x2c, 0x68, 0xdc, 0xf7, 0xbc, 0x64, 0x4f, 0x4e, 0xa3, 0x02, 0x1b, 0x8a, 0x6b, 0x5d, 0xc4,
	0x9b, 0x40, 0xdb, 0xb3, 0xaa, 0x20, 0xe3, 0x1e, 0x5c, 0x1a, 0xf3, 0xe0, 0xdd, 0xc4, 0x36, 0xf3,
	0x78, 0x2f, 0x19, 0x17, 0xae, 0x7e, 0xf7, 0x24, 0xa6, 0x49, 0xe4, 0x28, 0xe7, 0xcb, 0xf1, 0xb5,
	0x05, 0x8d, 0x07, 0xb4, 0x3f, 0x9d, 0x1c, 0xb9, 0x8a, 0xcb, 0x5c, 0x6d, 0xa5, 0xcc, 0xd5, 0x86,
	0x29, 0x15, 0x6f, 0xab, 0x7c, 0x5c, 0x06, 0xb4, 0x0a, 0xe3, 0x32, 0xf9, 0x15, 0x93, 0x2a, 0x35,
	0x66, 0xb2, 0xc2, 0x2a, 0x3b, 0x15, 0x09, 0xd0, 0x4c, 0xb2, 0x90, 0x2f, 0xca, 0x2f, 0x2c, 0x20,
	0xd2, 0xf8, 0x42, 0x1a, 0xcc, 0x1d, 0x67, 0x91, 0x25, 0x3d, 0xf9, 0x25, 0xfd, 0xe4, 0x27, 0x7c,
	0xcc, 0x17, 0xe5, 0xe3, 0x48, 0x84, 0x91, 0x19, 0xf9, 0x90, 0x71, 0xa9, 0xa4, 0xc7, 0xa5, 0xa9,
	0xf9, 0x78, 0x2a, 0x4a, 0xba, 0x19, 0xf9, 0x90, 0x35, 0x62, 0x49, 0xaf, 0x11, 0x0b, 0xf0, 0xf1,
	0x0f, 0x0b, 0x6c, 0xcd, 0x2e, 0x5a, 0x36, 0x59, 0x88, 0x1b, 0x2c, 0xce, 0x46, 0xdc, 0x88, 0xa1,
	0xc9, 0x66, 0xc9, 0x60, 0xf3, 0x16, 0xc0, 0x29, 0xa5, 0xa1, 0xca, 0x4a, 0x54, 0x15, 0x2f, 0x20,
	0x32, 0x27, 0x79, 0x17, 0xea, 0x38, 0x23, 0x33, 0x57, 0xae, 0x8e, 0x46, 0x6e, 0xbe, 0x5b, 0x73,
	0xb5, 0x44, 0xac, 0x80, 0x0f, 0x7e, 0x65, 0xc1, 0xf5, 0x1c, 0x59, 0x79, 0x48, 0xbe, 0x0b, 0x8b,
	0x2a, 0x42, 0xab, 0x90, 0x3c, 0x29, 0xb3, 0xd4, 0x62, 0xb8, 0x93, 0xa0, 0x0b, 0xe5, 0x8b, 0x0c,
	0xdf, 0x53, 0x49, 0x85, 0x1c, 0x88, 0x8b, 0x86, 0x71, 0x95, 0x4f, 0x8d, 0x0e, 0x9b, 0x02, 0xcc,
	0x14, 0x51, 0xff, 0x6d, 0xc1, 0xc6, 0x48, 0x8e, 0x7d, 0xf7, 0x55, 0x5a, 0x6c, 0x43, 0x94, 0x2c,
	0xe2, 0xa0, 0x2b, 0x6b, 0xa9, 0x11, 0x79, 0x07, 0x20, 0x2d, 0x31, 0x12, 0x43, 0xe5, 0xd7, 0x18,
	0xd5, 0xa4, 0xc6, 0xe0, 0xa2, 0x3c, 0x12, 0x0b, 0xf1, 0x2e, 0x95, 0xa9, 0xce, 0x62, 0xc7, 0xf5,
	0x1f, 0xe8, 0xd7, 0xe9, 0x62, 0xbe, 0x09, 0xff, 0x20, 0x22, 0x22, 0xe3, 0x03, 0xc6, 0x79, 0xf1,
	0xe4, 0x23, 0xf7, 0xd4, 0x5c, 0x1a, 0xd3, 0x6f, 0x42, 0xf5, 0x60, 0xe0, 0x3d, 0x09, 0x63, 0x16,
	0xa4, 0xee, 0x9a, 0x02, 0x8a, 0x44, 0xf0, 0x9f, 0x02, 0xc9, 0xb2, 0xcb, 0x43, 0x52, 0x07, 0xab,
	0xa3, 0x72, 0x55, 0xab, 0x93, 0x71, 0x85, 0xb9, 0xa9, 0x5c, 0xe1, 0x6b, 0x0b, 0xae, 0x6a, 0x37,
	0xf7, 0x07, 0x6c, 0xc0, 0x8a, 0xc4, 0xd5, 0x0d, 0x58, 0x08, 0x8e, 0x8f, 0x39, 0x8d, 0x13, 0x85,
	0xc8, 0x91, 0xf0, 0xe4, 0xbe, 0x20, 0xa1, 0x9c, 0x40, 0x0e, 0x44, 0xec, 0x17, 0xd9, 0x40, 0x3b,
	0x3e, 0x0f, 0xa5, 0xab, 0x96, 0x9d, 0x8a, 0x00, 0x1c, 0x9d, 0x87, 0x54, 0x90, 0x12, 0xda, 0x4c,
	0x6f, 0x05, 0x35, 0x12, 0x32, 0x3e, 0x47, 0x03, 0x57, 0x1d, 0xeb, 0x79, 0x11, 0xd3, 0xfe, 0xcd,
	0x82, 0xb5, 0x71, 0x51, 0x78, 0xf8, 0x2a, 0xea, 0xc1, 0x51, 0x22, 0x55, 0x2a, 0x98, 0x48, 0xcd,
	0x72, 0x5e, 0xbf, 0xb4, 0xf4, 0x14, 0xe8, 0x89, 0x4f, 0x05, 0x3f, 0xaf, 0xd4, 0x6f, 0x0b, 0x04,
	0xfe, 0xbf, 0x58, 0xb0, 0x3e, 0x81, 0x29, 0x1e, 0x92, 0x47, 0xb0, 0x12, 0xf8, 0x54, 0x6f, 0x87,
	0x5c, 0x10, 0x10, 0x75, 0xd5, 0x2e, 0x07, 0x92, 0x4a, 0xd2, 0xbc, 0x79, 0x0b, 0xaa, 0x92, 0x7f,
	0x51, 0x13, 0xcb, 0x8c, 0x75, 0x4d, 0x27, 0x31, 0x54, 0x8a, 0x96, 0xbd, 0x4e, 0x2c, 0x91, 0x4d,
	0x35, 0x97, 0xa6, 0x52, 0xf3, 0x0f, 0x8d, 0x44, 0x53, 0x58, 0xed, 0xd0, 0x2b, 0xa0, 0xe5, 0x44,
	0x57, 0x73, 0xf9, 0xba, 0xfa, 0xdc, 0xd0, 0x55, 0x4a, 0x9a, 0x87, 0x53, 0x59, 0xb0, 0xa4, 0x59,
	0x70, 0x16, 0x39, 0x7f, 0x6d, 0x70, 0x23, 0x0a, 0x04, 0x54, 0xe2, 0xb7, 0xec, 0x4f, 0x5f, 0x58,
	0xb0, 0x31, 0x89, 0x2b, 0x1e, 0x92, 0x77, 0x44, 0xc8, 0x97, 0xe3, 0x22, 0xd5, 0x4e, 0x8a, 0x3c,
	0x53, 0x64, 0x3c, 0x83, 0xc6, 0x88, 0x9d, 0x82, 0x0a, 0xba, 0xb4, 0x4a, 0x2d, 0x50, 0x7b, 0xfc,
	0xca, 0x02, 0x92, 0xdd, 0xf8, 0xdb, 0xd2, 0x41, 0x0c, 0xd7, 0xf6, 0xdd, 0xb8, 0x7b, 0x32, 0xa3,
	0xab, 0x94, 0xa6, 0xab, 0xbe, 0xbe, 0xb0, 0xc0, 0x9e, 0xbc, 0x6d, 0xb6, 0xf0, 0x2d, 0x15, 0x2e,
	0x7c, 0x67, 0xd1, 0xc2, 0x73, 0x58, 0x55, 0x06, 0xd9, 0x3f, 0xff, 0x80, 0xf9, 0xa7, 0x42, 0xfc,
	0x6d, 0xa8, 0x27, 0xe2, 0x63, 0xc3, 0xc9, 0xc2, 0x8b, 0xaa, 0xa6, 0x60, 0xd8, 0x09, 0x9f, 0xa5,
	0x00, 0x55, 0x47, 0xf4, 0xbd, 0x61, 0xbf, 0x3f, 0x9d, 0x07, 0xce, 0x7e, 0x44, 0x2f, 0x48, 0x46,
	0xfe, 0xb4, 0x80, 0x47, 0x74, 0x8c, 0x2b, 0x1e, 0x92, 0xef, 0x41, 0x22, 0x3b, 0x2b, 0xe8, 0xa1,
	0x3a, 0x7e, 0x6e, 0xf7, 0x77, 0x2e, 0xf7, 0x9d, 0xe1, 0x4d, 0x20, 0xe1, 0xf8, 0x3b, 0x88, 0x4c,
	0x3b, 0x1a, 0xe1, 0xd8, 0x3b, 0xc8, 0xb6, 0xaa, 0x0c, 0x12, 0x44, 0x99, 0x85, 0xc8, 0x02, 0x60,
	0x84, 0x72, 0xaa, 0x3f, 0xde, 0xc8, 0x74, 0xa4, 0x76, 0x6a, 0x3e, 0xde, 0x74, 0xf4, 0xc7, 0x1b,
	0x99, 0x7f, 0xd6, 0x3a, 0xda, 0xe3, 0x4d, 0x0b, 0x96, 0x42, 0x86, 0x28, 0x03, 0xde, 0x13, 0x66,
	0x90, 0x0d, 0xb7, 0x9a, 0x04, 0x3e, 0xe6, 0xbd, 0x43, 0x8f, 0xdc, 0x83, 0x35, 0xf3, 0x75, 0x6a,
	0xe0, 0x7e, 0x26, 0x50, 0x65, 0xc7, 0xa8, 0xa1, 0x3f, 0x4e, 0x3d, 0x76, 0x3f, 0x3b, 0xbc, 0xe0,
	0x39, 0xab, 0x9a, 0xfb, 0x9c, 0x95, 0x2d, 0x85, 0x60, 0x8a, 0x52, 0xc8, 0xcc, 0xcd, 0x6b, 0xc5,
	0x73, 0xf3, 0xb4, 0xaa, 0xae, 0xeb, 0x55, 0xf5, 0x0d, 0xa8, 0x76, 0xd2, 0xf7, 0xac, 0x25, 0x99,
	0xfe, 0x75, 0x92, 0xf7, 0xac, 0x75, 0x58, 0x10, 0x93, 0xcc, 0xb3, 0x97, 0x31, 0x4e, 0x94, 0x3b,
	0x41, 0x8c, 0x2a, 0x52, 0xf9, 0xd5, 0x4a, 0xc1, 0xfc, 0x6a, 0x07, 0x56, 0x0f, 0xb2, 0x4f, 0x36,
	0xab, 0xb2, 0xa9, 0x7a, 0x30, 0xf6, 0x64, 0x73, 0x30, 0xf1, 0xc9, 0xa6, 0x21, 0x9f, 0x6c, 0x0e,
	0x26, 0x3c, 0xd9, 0x98, 0xe1, 0x83, 0x4c, 0x15, 0x3e, 0xfe, 0x68, 0xc1, 0xca, 0x51, 0xd0, 0xeb,
	0xf5, 0xa9, 0x74, 0xdf, 0x57, 0x7c, 0x8a, 0x95, 0xd9, 0xa9, 0xef, 0x76, 0x54, 0xbb, 0xb3, 0xa2,
	0xac, 0xfb, 0x10, 0x41, 0x45, 0x0e, 0xfa, 0x73, 0x58, 0x33, 0x1a, 0xb4, 0x49, 0xd4, 0x7b, 0x85,
	0x2d, 0xb7, 0x1e, 0xac, 0x4f, 0xd8, 0x92, 0x87, 0xf8, 0xec, 0x3b, 0x8a, 0xb0, 0xf8, 0x7f, 0xa6,
	0x68, 0xfe, 0x5b, 0x0b, 0xae, 0x1f, 0x9c, 0xd0, 0xee, 0x69, 0x1a, 0x90, 0x92, 0x98, 0xf2, 0x92,
	0x0d, 0x53, 0x9d, 0x36, 0x03, 0xfa, 0xcd, 0x1c, 0x34, 0xf3, 0x38, 0xcb, 0x51, 0xc4, 0x1a, 0x94,
	0x7b, 0x58, 0x55, 0x49, 0x6e, 0xe4, 0x40, 0xe4, 0x0a, 0x82, 0x65, 0xcc, 0x15, 0x4a, 0x05, 0x72,
	0x85, 0x04, 0x59, 0x2d, 0x8c, 0x31, 0x84, 0xcf, 0x8f, 0x2f, 0x94, 0xb7, 0x60, 0x9c, 0x04, 0x7d,
	0x27, 0x45, 0x26, 0x5b, 0x50, 0x13, 0xfc, 0x1c, 0x68, 0x6f, 0x9a, 0x65, 0x47, 0x07, 0x65, 0x4c,
	0xb6, 0x30, 0x6d, 0xfd, 0xa3, 0xf5, 0x98, 0x54, 0x06, 0xfd, 0xa1, 0x3b, 0x98, 0xe9, 0x28, 0xdd,
	0x50, 0xc5, 0x45, 0xfa, 0xb8, 0xab, 0x3e, 0x99, 0x10, 0x74, 0x8b, 0x58, 0xeb, 0x13, 0xbd, 0x17,
	0x64, 0xf0, 0xc4, 0xc3, 0x8c, 0xb4, 0xd6, 0x54, 0xd2, 0xfe, 0xce, 0x82, 0x1b, 0x06, 0xe5, 0xa7,
	0xa3, 0xab, 0x63, 0x16, 0x81, 0xc7, 0x6e, 0xa6, 0xd2, 0xf8, 0xcd, 0x54, 0x40, 0xee, 0x4f, 0xe1,
	0x66, 0x3e, 0x77, 0x33, 0x8a, 0xfe, 0xa5, 0x05, 0xab, 0x78, 0x02, 0xa6, 0x30, 0xf0, 0xa5, 0x39,
	0xf7, 0xac, 0x86, 0x7e, 0x02, 0x8d, 0x0c, 0x4f, 0x33, 0x4a, 0xf9, 0x29, 0x6c, 0x18, 0xc7, 0x9c,
	0x3f, 0xf4, 0xbb, 0xd1, 0xf9, 0xcb, 0xa9, 0x34, 0x4f, 0xe1, 0xda, 0x44, 0xda, 0x3c, 0x1c, 0x7d,
	0x16, 0x65, 0xe9, 0x9f, 0x45, 0xcd, 0x10, 0x4a, 0xf7, 0x3e, 0x27, 0xb0, 0xa6, 0x36, 0x7a, 0x86,
	0xc8, 0xcf, 0xe4, 0xd7, 0x62, 0xe4, 0x09, 0x2c, 0x19, 0xc1, 0x9c, 0xdc, 0x34, 0x28, 0x66, 0xde,
	0xfe, 0x9a, 0x97, 0x34, 0x4a, 0x5b, 0x57, 0xc8, 0x8f, 0x8d, 0xfa, 0x59, 0x4e, 0x61, 0xc4, 0xda,
	0x1a, 0x8f, 0x4f, 0xe6, 0x33, 0x51, 0x01, 0xe2, 0x1f, 0xc1, 0xb2, 0xf9, 0xd8, 0x43, 0x6e, 0x99,
	0x69, 0x52, 0xe6, 0x21, 0xa8, 0x18, 0x49, 0xf3, 0xdd, 0xc5, 0x24, 0x39, 0xf6, 0x26, 0x53, 0x80,
	0xe4, 0x11, 0xac, 0x3e, 0xf4, 0x58, 0x22, 0xa0, 0xfc, 0x78, 0xc6, 0x58, 0x35, 0xfe, 0x3a, 0x32,
	0x35, 0x55, 0x7c, 0xce, 0xc8, 0xa3, 0x9a, 0xbc, 0x75, 0x4c, 0x4d, 0x15, 0x1f, 0x27, 0xf2, 0xa8,
	0x26, 0x2f, 0x17, 0x05, 0xa8, 0x7a, 0x70, 0x35, 0xa1, 0xaa, 0x7f, 0x41, 0x71, 0x37, 0x47, 0x09,
	0xc6, 0x53, 0x44, 0xf3, 0xb5, 0x02, 0x58, 0xb8, 0xcb, 0x8f, 0xa0, 0x91, 0xec, 0x92, 0x76, 0xc6,
	0x49, 0x6b, 0xf2, 0x6a, 0xbd, 0x75, 0x5e, 0xd0, 0x2b, 0x8c, 0x66, 0x6e, 0xc6, 0x2b, 0xb2, 0x7d,
	0x69, 0x93, 0xe4, 0x78, 0x1f, 0xb8, 0x75, 0x85, 0xfc, 0x04, 0x2b, 0xb2, 0x49, 0x1d, 0xdc, 0xdb,
	0xfa, 0xda, 0x09, 0x08, 0xcd, 0xad, 0x8b, 0x11, 0x90, 0xbc, 0x0b, 0xb6, 0x3a, 0x54, 0x4f, 0x8c,
	0xd6, 0x9c, 0xd8, 0x20, 0xe7, 0xe8, 0x8d, 0xda, 0x93, 0xcd, 0xed, 0x4b, 0x30, 0x70, 0x8b, 0x4f,
	0x60, 0x59, 0x4d, 0xa9, 0xbe, 0x58, 0xee, 0x99, 0x4e, 0x3b, 0x72, 0x79, 0x84, 0xb5, 0xc6, 0x1a,
	0xaa, 0x86, 0x8c, 0xf7, 0x93, 0x48, 0xce, 0x52, 0xad, 0xb5, 0xd1, 0x6c, 0x5d, 0x86, 0x92, 0x18,
	0xd3, 0x6c, 0xd3, 0x98, 0xc6, 0x1c, 0xeb, 0x1d, 0x99, 0xc6, 0x1c, 0xef, 0xf0, 0xb4, 0xae, 0x90,
	0x2e, 0x36, 0x20, 0xd3, 0xd6, 0x47, 0xca, 0xf3, 0x1d, 0xb3, 0xf6, 0x9a, 0xd8, 0x90, 0x69, 0xde,
	0xbd, 0x1c, 0x49, 0xe9, 0x3b, 0xe9, 0x6b, 0x61, 0x02, 0x88, 0x1d, 0x0d, 0x33, 0x3e, 0x67, 0x9b,
	0x1d, 0x05, 0x15, 0x62, 0xe8, 0xfb, 0xbd, 0x61, 0xbf, 0x3f, 0x51, 0xdf, 0xe3, 0x2d, 0x8d, 0x31,
	0xf2, 0x13, 0xfa, 0x0b, 0xad, 0x2b, 0xe4, 0x31, 0xd4, 0xf5, 0x2a, 0x8a, 0x18, 0x99, 0x69, 0xa6,
	0xbe, 0x2a, 0x70, 0x16, 0x3f, 0x85, 0xc6, 0x58, 0xbd, 0x61, 0x7a, 0xde, 0xa4, 0x0a, 0xc8, 0xf4,
	0xbc, 0x89, 0x05, 0x4b, 0xeb, 0x0a, 0x61, 0x99, 0x0b, 0x7e, 0xd4, 0xb5, 0x78, 0xcd, 0xe4, 0x2b,
	0xa7, 0x0a, 0x69, 0xbe, 0x5e, 0x04, 0x0d, 0xb7, 0x3a, 0x86, 0xf5, 0x89, 0x59, 0x68, 0x5e, 0x54,
	0x34, 0x93, 0xe7, 0xbc, 0xa8, 0x98, 0x49, 0x67, 0x5b, 0x57, 0x48, 0x90, 0xc9, 0xc0, 0xb5, 0xac,
	0x8f, 0xbc, 0x91, 0x4b, 0xc4, 0xcc, 0x5c, 0x9b, 0x3b, 0xc5, 0x10, 0x71, 0xc3, 0x0f, 0x61, 0xc9,
	0xc8, 0xba, 0x32, 0x29, 0x44, 0x26, 0x49, 0x6c, 0xde, 0xba, 0x60, 0x16, 0xe9, 0xfd, 0x0c, 0xae,
	0x4e, 0x48, 0x8c, 0xcc, 0xc0, 0x3e, 0x39, 0x2b, 0x6b, 0xde, 0xb9, 0x14, 0x47, 0xec, 0xb0, 0x5f,
	0xff, 0xfa, 0x9b, 0x4d, 0xeb, 0xaf, 0xdf, 0x6c, 0x5a, 0x7f, 0xff, 0x66, 0xd3, 0xea, 0x2c, 0xe0,
	0xf7, 0xed, 0xdf, 0xf9, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xab, 0x29, 0x62, 0x84, 0x30,
	0x00, 0x00,
}
