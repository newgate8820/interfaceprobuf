// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/infoserver.proto

package infoserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/pbcomm"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 发送短信的类型
type CodeType int32

const (
	CodeType_SendSms     CodeType = 0
	CodeType_SendAppCode CodeType = 1
)

var CodeType_name = map[int32]string{
	0: "SendSms",
	1: "SendAppCode",
}
var CodeType_value = map[string]int32{
	"SendSms":     0,
	"SendAppCode": 1,
}

func (x CodeType) String() string {
	return proto.EnumName(CodeType_name, int32(x))
}
func (CodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{0} }

type SendCodeResult_ResultCode int32

const (
	SendCodeResult_Success                        SendCodeResult_ResultCode = 0
	SendCodeResult_InternalError                  SendCodeResult_ResultCode = 1
	SendCodeResult_PhoneOccupied                  SendCodeResult_ResultCode = 2
	SendCodeResult_VirtualPhoneBlockedTemporarily SendCodeResult_ResultCode = 3
	SendCodeResult_PhoneNumberInvalid             SendCodeResult_ResultCode = 4
	SendCodeResult_AccountMarkedDeleted           SendCodeResult_ResultCode = 5
	SendCodeResult_FloodWait                      SendCodeResult_ResultCode = 6
	SendCodeResult_SMSFailed                      SendCodeResult_ResultCode = 7
	SendCodeResult_UserRestricted                 SendCodeResult_ResultCode = 8
)

var SendCodeResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "PhoneOccupied",
	3: "VirtualPhoneBlockedTemporarily",
	4: "PhoneNumberInvalid",
	5: "AccountMarkedDeleted",
	6: "FloodWait",
	7: "SMSFailed",
	8: "UserRestricted",
}
var SendCodeResult_ResultCode_value = map[string]int32{
	"Success":                        0,
	"InternalError":                  1,
	"PhoneOccupied":                  2,
	"VirtualPhoneBlockedTemporarily": 3,
	"PhoneNumberInvalid":             4,
	"AccountMarkedDeleted":           5,
	"FloodWait":                      6,
	"SMSFailed":                      7,
	"UserRestricted":                 8,
}

func (x SendCodeResult_ResultCode) String() string {
	return proto.EnumName(SendCodeResult_ResultCode_name, int32(x))
}
func (SendCodeResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{1, 0}
}

type SignInOrReqitsterResult_ResultCode int32

const (
	SignInOrReqitsterResult_Success               SignInOrReqitsterResult_ResultCode = 0
	SignInOrReqitsterResult_InternalError         SignInOrReqitsterResult_ResultCode = 1
	SignInOrReqitsterResult_PhoneNumberUnoccupied SignInOrReqitsterResult_ResultCode = 2
	SignInOrReqitsterResult_CaptchaInvalid        SignInOrReqitsterResult_ResultCode = 3
	SignInOrReqitsterResult_PasswordNeeded        SignInOrReqitsterResult_ResultCode = 4
	SignInOrReqitsterResult_CaptchaExpired        SignInOrReqitsterResult_ResultCode = 5
	SignInOrReqitsterResult_FloodWait             SignInOrReqitsterResult_ResultCode = 6
)

var SignInOrReqitsterResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "PhoneNumberUnoccupied",
	3: "CaptchaInvalid",
	4: "PasswordNeeded",
	5: "CaptchaExpired",
	6: "FloodWait",
}
var SignInOrReqitsterResult_ResultCode_value = map[string]int32{
	"Success":               0,
	"InternalError":         1,
	"PhoneNumberUnoccupied": 2,
	"CaptchaInvalid":        3,
	"PasswordNeeded":        4,
	"CaptchaExpired":        5,
	"FloodWait":             6,
}

func (x SignInOrReqitsterResult_ResultCode) String() string {
	return proto.EnumName(SignInOrReqitsterResult_ResultCode_name, int32(x))
}
func (SignInOrReqitsterResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{4, 0}
}

type AuthSignUpResult_ResultCode int32

const (
	AuthSignUpResult_Success             AuthSignUpResult_ResultCode = 0
	AuthSignUpResult_InternalError       AuthSignUpResult_ResultCode = 1
	AuthSignUpResult_PhoneNumberInvalid  AuthSignUpResult_ResultCode = 2
	AuthSignUpResult_PhoneNumberOccupied AuthSignUpResult_ResultCode = 3
	AuthSignUpResult_CaptchaExpired      AuthSignUpResult_ResultCode = 4
	AuthSignUpResult_CaptchaInvalid      AuthSignUpResult_ResultCode = 5
	AuthSignUpResult_FloodWait           AuthSignUpResult_ResultCode = 6
	AuthSignUpResult_SignUpRobotBlocked  AuthSignUpResult_ResultCode = 7
)

var AuthSignUpResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "PhoneNumberInvalid",
	3: "PhoneNumberOccupied",
	4: "CaptchaExpired",
	5: "CaptchaInvalid",
	6: "FloodWait",
	7: "SignUpRobotBlocked",
}
var AuthSignUpResult_ResultCode_value = map[string]int32{
	"Success":             0,
	"InternalError":       1,
	"PhoneNumberInvalid":  2,
	"PhoneNumberOccupied": 3,
	"CaptchaExpired":      4,
	"CaptchaInvalid":      5,
	"FloodWait":           6,
	"SignUpRobotBlocked":  7,
}

func (x AuthSignUpResult_ResultCode) String() string {
	return proto.EnumName(AuthSignUpResult_ResultCode_name, int32(x))
}
func (AuthSignUpResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{6, 0}
}

type ChangePhoneResult_ResultCode int32

const (
	ChangePhoneResult_Success             ChangePhoneResult_ResultCode = 0
	ChangePhoneResult_InternalError       ChangePhoneResult_ResultCode = 1
	ChangePhoneResult_PhoneNumberOccupied ChangePhoneResult_ResultCode = 2
	ChangePhoneResult_PhoneCodeExpired    ChangePhoneResult_ResultCode = 3
	ChangePhoneResult_PhoneCodeInvalid    ChangePhoneResult_ResultCode = 4
	ChangePhoneResult_FloodWait           ChangePhoneResult_ResultCode = 5
)

var ChangePhoneResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "PhoneNumberOccupied",
	3: "PhoneCodeExpired",
	4: "PhoneCodeInvalid",
	5: "FloodWait",
}
var ChangePhoneResult_ResultCode_value = map[string]int32{
	"Success":             0,
	"InternalError":       1,
	"PhoneNumberOccupied": 2,
	"PhoneCodeExpired":    3,
	"PhoneCodeInvalid":    4,
	"FloodWait":           5,
}

func (x ChangePhoneResult_ResultCode) String() string {
	return proto.EnumName(ChangePhoneResult_ResultCode_name, int32(x))
}
func (ChangePhoneResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{8, 0}
}

type AuthCheckPasswdResult_ResultCode int32

const (
	AuthCheckPasswdResult_Success       AuthCheckPasswdResult_ResultCode = 0
	AuthCheckPasswdResult_InternalError AuthCheckPasswdResult_ResultCode = 1
	AuthCheckPasswdResult_WrongPassword AuthCheckPasswdResult_ResultCode = 2
)

var AuthCheckPasswdResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "WrongPassword",
}
var AuthCheckPasswdResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
	"WrongPassword": 2,
}

func (x AuthCheckPasswdResult_ResultCode) String() string {
	return proto.EnumName(AuthCheckPasswdResult_ResultCode_name, int32(x))
}
func (AuthCheckPasswdResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{10, 0}
}

type AuthImportAuthorizationResult_ResultCode int32

const (
	AuthImportAuthorizationResult_Success       AuthImportAuthorizationResult_ResultCode = 0
	AuthImportAuthorizationResult_InternalError AuthImportAuthorizationResult_ResultCode = 1
)

var AuthImportAuthorizationResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var AuthImportAuthorizationResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x AuthImportAuthorizationResult_ResultCode) String() string {
	return proto.EnumName(AuthImportAuthorizationResult_ResultCode_name, int32(x))
}
func (AuthImportAuthorizationResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{12, 0}
}

type AuthExportAuthorizationResult_ResultCode int32

const (
	AuthExportAuthorizationResult_Success       AuthExportAuthorizationResult_ResultCode = 0
	AuthExportAuthorizationResult_InternalError AuthExportAuthorizationResult_ResultCode = 1
)

var AuthExportAuthorizationResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var AuthExportAuthorizationResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x AuthExportAuthorizationResult_ResultCode) String() string {
	return proto.EnumName(AuthExportAuthorizationResult_ResultCode_name, int32(x))
}
func (AuthExportAuthorizationResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{14, 0}
}

type AuthRecoverPasswdResult_ResultCode int32

const (
	AuthRecoverPasswdResult_Success        AuthRecoverPasswdResult_ResultCode = 0
	AuthRecoverPasswdResult_InternalError  AuthRecoverPasswdResult_ResultCode = 1
	AuthRecoverPasswdResult_CaptchaInvalid AuthRecoverPasswdResult_ResultCode = 2
	AuthRecoverPasswdResult_CaptchaExpired AuthRecoverPasswdResult_ResultCode = 3
	AuthRecoverPasswdResult_FloodWait      AuthRecoverPasswdResult_ResultCode = 4
)

var AuthRecoverPasswdResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "CaptchaInvalid",
	3: "CaptchaExpired",
	4: "FloodWait",
}
var AuthRecoverPasswdResult_ResultCode_value = map[string]int32{
	"Success":        0,
	"InternalError":  1,
	"CaptchaInvalid": 2,
	"CaptchaExpired": 3,
	"FloodWait":      4,
}

func (x AuthRecoverPasswdResult_ResultCode) String() string {
	return proto.EnumName(AuthRecoverPasswdResult_ResultCode_name, int32(x))
}
func (AuthRecoverPasswdResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{16, 0}
}

type ContactsSearcResult_ResultCode int32

const (
	ContactsSearcResult_Success       ContactsSearcResult_ResultCode = 0
	ContactsSearcResult_InternalError ContactsSearcResult_ResultCode = 1
)

var ContactsSearcResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var ContactsSearcResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x ContactsSearcResult_ResultCode) String() string {
	return proto.EnumName(ContactsSearcResult_ResultCode_name, int32(x))
}
func (ContactsSearcResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{18, 0}
}

type AuthRequestPasswordRecoveryResult_ResultCode int32

const (
	AuthRequestPasswordRecoveryResult_Success             AuthRequestPasswordRecoveryResult_ResultCode = 0
	AuthRequestPasswordRecoveryResult_InternalError       AuthRequestPasswordRecoveryResult_ResultCode = 1
	AuthRequestPasswordRecoveryResult_MissingEmailPattern AuthRequestPasswordRecoveryResult_ResultCode = 2
)

var AuthRequestPasswordRecoveryResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "MissingEmailPattern",
}
var AuthRequestPasswordRecoveryResult_ResultCode_value = map[string]int32{
	"Success":             0,
	"InternalError":       1,
	"MissingEmailPattern": 2,
}

func (x AuthRequestPasswordRecoveryResult_ResultCode) String() string {
	return proto.EnumName(AuthRequestPasswordRecoveryResult_ResultCode_name, int32(x))
}
func (AuthRequestPasswordRecoveryResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{20, 0}
}

type PhonecallAllocSessionResult_ResultCode int32

const (
	PhonecallAllocSessionResult_Success             PhonecallAllocSessionResult_ResultCode = 0
	PhonecallAllocSessionResult_InternalError       PhonecallAllocSessionResult_ResultCode = 1
	PhonecallAllocSessionResult_SessionAlreadyExist PhonecallAllocSessionResult_ResultCode = 2
)

var PhonecallAllocSessionResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "SessionAlreadyExist",
}
var PhonecallAllocSessionResult_ResultCode_value = map[string]int32{
	"Success":             0,
	"InternalError":       1,
	"SessionAlreadyExist": 2,
}

func (x PhonecallAllocSessionResult_ResultCode) String() string {
	return proto.EnumName(PhonecallAllocSessionResult_ResultCode_name, int32(x))
}
func (PhonecallAllocSessionResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{24, 0}
}

type PhonecallOnReceivedCallCheckResult_ResultCode int32

const (
	PhonecallOnReceivedCallCheckResult_SessionExist    PhonecallOnReceivedCallCheckResult_ResultCode = 0
	PhonecallOnReceivedCallCheckResult_SessionNotFound PhonecallOnReceivedCallCheckResult_ResultCode = 1
	PhonecallOnReceivedCallCheckResult_InternalError   PhonecallOnReceivedCallCheckResult_ResultCode = 2
)

var PhonecallOnReceivedCallCheckResult_ResultCode_name = map[int32]string{
	0: "SessionExist",
	1: "SessionNotFound",
	2: "InternalError",
}
var PhonecallOnReceivedCallCheckResult_ResultCode_value = map[string]int32{
	"SessionExist":    0,
	"SessionNotFound": 1,
	"InternalError":   2,
}

func (x PhonecallOnReceivedCallCheckResult_ResultCode) String() string {
	return proto.EnumName(PhonecallOnReceivedCallCheckResult_ResultCode_name, int32(x))
}
func (PhonecallOnReceivedCallCheckResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{26, 0}
}

type PhonecallOnAcceptCallUpdateResult_ResultCode int32

const (
	PhonecallOnAcceptCallUpdateResult_Success         PhonecallOnAcceptCallUpdateResult_ResultCode = 0
	PhonecallOnAcceptCallUpdateResult_SessionNotFound PhonecallOnAcceptCallUpdateResult_ResultCode = 1
	PhonecallOnAcceptCallUpdateResult_DuplicateAccept PhonecallOnAcceptCallUpdateResult_ResultCode = 2
	PhonecallOnAcceptCallUpdateResult_InternalError   PhonecallOnAcceptCallUpdateResult_ResultCode = 3
)

var PhonecallOnAcceptCallUpdateResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "SessionNotFound",
	2: "DuplicateAccept",
	3: "InternalError",
}
var PhonecallOnAcceptCallUpdateResult_ResultCode_value = map[string]int32{
	"Success":         0,
	"SessionNotFound": 1,
	"DuplicateAccept": 2,
	"InternalError":   3,
}

func (x PhonecallOnAcceptCallUpdateResult_ResultCode) String() string {
	return proto.EnumName(PhonecallOnAcceptCallUpdateResult_ResultCode_name, int32(x))
}
func (PhonecallOnAcceptCallUpdateResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{28, 0}
}

type PhonecallOnConfirmCallUpdateResult_ResultCode int32

const (
	PhonecallOnConfirmCallUpdateResult_Success          PhonecallOnConfirmCallUpdateResult_ResultCode = 0
	PhonecallOnConfirmCallUpdateResult_SessionNotFound  PhonecallOnConfirmCallUpdateResult_ResultCode = 1
	PhonecallOnConfirmCallUpdateResult_DuplicateConfirm PhonecallOnConfirmCallUpdateResult_ResultCode = 2
	PhonecallOnConfirmCallUpdateResult_InternalError    PhonecallOnConfirmCallUpdateResult_ResultCode = 3
)

var PhonecallOnConfirmCallUpdateResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "SessionNotFound",
	2: "DuplicateConfirm",
	3: "InternalError",
}
var PhonecallOnConfirmCallUpdateResult_ResultCode_value = map[string]int32{
	"Success":          0,
	"SessionNotFound":  1,
	"DuplicateConfirm": 2,
	"InternalError":    3,
}

func (x PhonecallOnConfirmCallUpdateResult_ResultCode) String() string {
	return proto.EnumName(PhonecallOnConfirmCallUpdateResult_ResultCode_name, int32(x))
}
func (PhonecallOnConfirmCallUpdateResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{30, 0}
}

type PhonecallOnDiscardCallUpdateResult_ResultCode int32

const (
	PhonecallOnDiscardCallUpdateResult_Success         PhonecallOnDiscardCallUpdateResult_ResultCode = 0
	PhonecallOnDiscardCallUpdateResult_SessionNotFound PhonecallOnDiscardCallUpdateResult_ResultCode = 1
	PhonecallOnDiscardCallUpdateResult_InternalError   PhonecallOnDiscardCallUpdateResult_ResultCode = 2
)

var PhonecallOnDiscardCallUpdateResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "SessionNotFound",
	2: "InternalError",
}
var PhonecallOnDiscardCallUpdateResult_ResultCode_value = map[string]int32{
	"Success":         0,
	"SessionNotFound": 1,
	"InternalError":   2,
}

func (x PhonecallOnDiscardCallUpdateResult_ResultCode) String() string {
	return proto.EnumName(PhonecallOnDiscardCallUpdateResult_ResultCode_name, int32(x))
}
func (PhonecallOnDiscardCallUpdateResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{32, 0}
}

type PhonecallQueryEndpointsResult_ResultCode int32

const (
	PhonecallQueryEndpointsResult_Success       PhonecallQueryEndpointsResult_ResultCode = 0
	PhonecallQueryEndpointsResult_InternalError PhonecallQueryEndpointsResult_ResultCode = 1
)

var PhonecallQueryEndpointsResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var PhonecallQueryEndpointsResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x PhonecallQueryEndpointsResult_ResultCode) String() string {
	return proto.EnumName(PhonecallQueryEndpointsResult_ResultCode_name, int32(x))
}
func (PhonecallQueryEndpointsResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{34, 0}
}

type LangPacktReq_ReqType int32

const (
	LangPacktReq_LangPackGetLanguages  LangPacktReq_ReqType = 0
	LangPacktReq_LangPackGetLangInfo   LangPacktReq_ReqType = 1
	LangPacktReq_LangPackGetStrings    LangPacktReq_ReqType = 2
	LangPacktReq_LangPackGetDifference LangPacktReq_ReqType = 3
)

var LangPacktReq_ReqType_name = map[int32]string{
	0: "LangPackGetLanguages",
	1: "LangPackGetLangInfo",
	2: "LangPackGetStrings",
	3: "LangPackGetDifference",
}
var LangPacktReq_ReqType_value = map[string]int32{
	"LangPackGetLanguages":  0,
	"LangPackGetLangInfo":   1,
	"LangPackGetStrings":    2,
	"LangPackGetDifference": 3,
}

func (x LangPacktReq_ReqType) String() string {
	return proto.EnumName(LangPacktReq_ReqType_name, int32(x))
}
func (LangPacktReq_ReqType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{41, 0}
}

type CmdVirtualPhoneNumberGenerateResult_ResultCode int32

const (
	CmdVirtualPhoneNumberGenerateResult_Success       CmdVirtualPhoneNumberGenerateResult_ResultCode = 0
	CmdVirtualPhoneNumberGenerateResult_InternalError CmdVirtualPhoneNumberGenerateResult_ResultCode = 1
)

var CmdVirtualPhoneNumberGenerateResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var CmdVirtualPhoneNumberGenerateResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x CmdVirtualPhoneNumberGenerateResult_ResultCode) String() string {
	return proto.EnumName(CmdVirtualPhoneNumberGenerateResult_ResultCode_name, int32(x))
}
func (CmdVirtualPhoneNumberGenerateResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{44, 0}
}

type CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode int32

const (
	CmdVirtualPhoneNumberBindRealPhoneNumberResult_Success                    CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode = 0
	CmdVirtualPhoneNumberBindRealPhoneNumberResult_InternalError              CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode = 1
	CmdVirtualPhoneNumberBindRealPhoneNumberResult_InvalidVirtualPhoneNumber  CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode = 2
	CmdVirtualPhoneNumberBindRealPhoneNumberResult_VirtualPhoneNumberOccupied CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode = 3
	CmdVirtualPhoneNumberBindRealPhoneNumberResult_InvalidRealPhoneNumber     CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode = 4
)

var CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "InvalidVirtualPhoneNumber",
	3: "VirtualPhoneNumberOccupied",
	4: "InvalidRealPhoneNumber",
}
var CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode_value = map[string]int32{
	"Success":                    0,
	"InternalError":              1,
	"InvalidVirtualPhoneNumber":  2,
	"VirtualPhoneNumberOccupied": 3,
	"InvalidRealPhoneNumber":     4,
}

func (x CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode) String() string {
	return proto.EnumName(CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode_name, int32(x))
}
func (CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{48, 0}
}

type CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode int32

const (
	CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_Success                   CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode = 0
	CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_InternalError             CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode = 1
	CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_InvalidVirtualPhoneNumber CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode = 2
)

var CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "InvalidVirtualPhoneNumber",
}
var CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode_value = map[string]int32{
	"Success":                   0,
	"InternalError":             1,
	"InvalidVirtualPhoneNumber": 2,
}

func (x CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode) String() string {
	return proto.EnumName(CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode_name, int32(x))
}
func (CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{50, 0}
}

type CmdVirtualPhoneNumberQueryInfoResult_ResultCode int32

const (
	CmdVirtualPhoneNumberQueryInfoResult_Success                   CmdVirtualPhoneNumberQueryInfoResult_ResultCode = 0
	CmdVirtualPhoneNumberQueryInfoResult_InternalError             CmdVirtualPhoneNumberQueryInfoResult_ResultCode = 1
	CmdVirtualPhoneNumberQueryInfoResult_InvalidVirtualPhoneNumber CmdVirtualPhoneNumberQueryInfoResult_ResultCode = 2
)

var CmdVirtualPhoneNumberQueryInfoResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "InvalidVirtualPhoneNumber",
}
var CmdVirtualPhoneNumberQueryInfoResult_ResultCode_value = map[string]int32{
	"Success":                   0,
	"InternalError":             1,
	"InvalidVirtualPhoneNumber": 2,
}

func (x CmdVirtualPhoneNumberQueryInfoResult_ResultCode) String() string {
	return proto.EnumName(CmdVirtualPhoneNumberQueryInfoResult_ResultCode_name, int32(x))
}
func (CmdVirtualPhoneNumberQueryInfoResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{52, 0}
}

type CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode int32

const (
	CmdSysPhoneNumberBindRealPhoneNumberResult_Success       CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode = 0
	CmdSysPhoneNumberBindRealPhoneNumberResult_InternalError CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode = 1
)

var CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode) String() string {
	return proto.EnumName(CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode_name, int32(x))
}
func (CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{54, 0}
}

type CmdBlockSignInResult_ResultCode int32

const (
	CmdBlockSignInResult_Success       CmdBlockSignInResult_ResultCode = 0
	CmdBlockSignInResult_InternalError CmdBlockSignInResult_ResultCode = 1
)

var CmdBlockSignInResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var CmdBlockSignInResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x CmdBlockSignInResult_ResultCode) String() string {
	return proto.EnumName(CmdBlockSignInResult_ResultCode_name, int32(x))
}
func (CmdBlockSignInResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{56, 0}
}

type CmdUnblockSignInResult_ResultCode int32

const (
	CmdUnblockSignInResult_Success       CmdUnblockSignInResult_ResultCode = 0
	CmdUnblockSignInResult_InternalError CmdUnblockSignInResult_ResultCode = 1
)

var CmdUnblockSignInResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var CmdUnblockSignInResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x CmdUnblockSignInResult_ResultCode) String() string {
	return proto.EnumName(CmdUnblockSignInResult_ResultCode_name, int32(x))
}
func (CmdUnblockSignInResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{58, 0}
}

type CmdBlockSignUpResult_ResultCode int32

const (
	CmdBlockSignUpResult_Success       CmdBlockSignUpResult_ResultCode = 0
	CmdBlockSignUpResult_InternalError CmdBlockSignUpResult_ResultCode = 1
)

var CmdBlockSignUpResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var CmdBlockSignUpResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x CmdBlockSignUpResult_ResultCode) String() string {
	return proto.EnumName(CmdBlockSignUpResult_ResultCode_name, int32(x))
}
func (CmdBlockSignUpResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{60, 0}
}

type CmdUnblockSignUpResult_ResultCode int32

const (
	CmdUnblockSignUpResult_Success       CmdUnblockSignUpResult_ResultCode = 0
	CmdUnblockSignUpResult_InternalError CmdUnblockSignUpResult_ResultCode = 1
)

var CmdUnblockSignUpResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var CmdUnblockSignUpResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x CmdUnblockSignUpResult_ResultCode) String() string {
	return proto.EnumName(CmdUnblockSignUpResult_ResultCode_name, int32(x))
}
func (CmdUnblockSignUpResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{62, 0}
}

type ContactRevoleUserNameResult_ResultCode int32

const (
	ContactRevoleUserNameResult_IsUser        ContactRevoleUserNameResult_ResultCode = 0
	ContactRevoleUserNameResult_IsChannel     ContactRevoleUserNameResult_ResultCode = 1
	ContactRevoleUserNameResult_InternalError ContactRevoleUserNameResult_ResultCode = 2
)

var ContactRevoleUserNameResult_ResultCode_name = map[int32]string{
	0: "IsUser",
	1: "IsChannel",
	2: "InternalError",
}
var ContactRevoleUserNameResult_ResultCode_value = map[string]int32{
	"IsUser":        0,
	"IsChannel":     1,
	"InternalError": 2,
}

func (x ContactRevoleUserNameResult_ResultCode) String() string {
	return proto.EnumName(ContactRevoleUserNameResult_ResultCode_name, int32(x))
}
func (ContactRevoleUserNameResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{64, 0}
}

type AuthSignUpPasswordResult_Code int32

const (
	AuthSignUpPasswordResult_Success             AuthSignUpPasswordResult_Code = 0
	AuthSignUpPasswordResult_InternalError       AuthSignUpPasswordResult_Code = 1
	AuthSignUpPasswordResult_CaptchaInvalid      AuthSignUpPasswordResult_Code = 2
	AuthSignUpPasswordResult_CaptchaExpired      AuthSignUpPasswordResult_Code = 3
	AuthSignUpPasswordResult_PhoneNumberOccupied AuthSignUpPasswordResult_Code = 4
	AuthSignUpPasswordResult_Flood               AuthSignUpPasswordResult_Code = 5
)

var AuthSignUpPasswordResult_Code_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "CaptchaInvalid",
	3: "CaptchaExpired",
	4: "PhoneNumberOccupied",
	5: "Flood",
}
var AuthSignUpPasswordResult_Code_value = map[string]int32{
	"Success":             0,
	"InternalError":       1,
	"CaptchaInvalid":      2,
	"CaptchaExpired":      3,
	"PhoneNumberOccupied": 4,
	"Flood":               5,
}

func (x AuthSignUpPasswordResult_Code) String() string {
	return proto.EnumName(AuthSignUpPasswordResult_Code_name, int32(x))
}
func (AuthSignUpPasswordResult_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{71, 0}
}

type AuthSignInPasswordResult_Code int32

const (
	AuthSignInPasswordResult_Success               AuthSignInPasswordResult_Code = 0
	AuthSignInPasswordResult_InternalError         AuthSignInPasswordResult_Code = 1
	AuthSignInPasswordResult_PhoneNumberUnoccupied AuthSignInPasswordResult_Code = 2
	AuthSignInPasswordResult_Flood                 AuthSignInPasswordResult_Code = 3
	AuthSignInPasswordResult_PasswordInvalid       AuthSignInPasswordResult_Code = 4
)

var AuthSignInPasswordResult_Code_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "PhoneNumberUnoccupied",
	3: "Flood",
	4: "PasswordInvalid",
}
var AuthSignInPasswordResult_Code_value = map[string]int32{
	"Success":               0,
	"InternalError":         1,
	"PhoneNumberUnoccupied": 2,
	"Flood":                 3,
	"PasswordInvalid":       4,
}

func (x AuthSignInPasswordResult_Code) String() string {
	return proto.EnumName(AuthSignInPasswordResult_Code_name, int32(x))
}
func (AuthSignInPasswordResult_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{73, 0}
}

type AccountResetPasswordResult_Code int32

const (
	AccountResetPasswordResult_Success               AccountResetPasswordResult_Code = 0
	AccountResetPasswordResult_Internal              AccountResetPasswordResult_Code = 1
	AccountResetPasswordResult_CaptchaInvalid        AccountResetPasswordResult_Code = 2
	AccountResetPasswordResult_CaptchaExpired        AccountResetPasswordResult_Code = 3
	AccountResetPasswordResult_Flood                 AccountResetPasswordResult_Code = 4
	AccountResetPasswordResult_PhoneNumberUnoccupied AccountResetPasswordResult_Code = 5
	AccountResetPasswordResult_PasswordInvalid       AccountResetPasswordResult_Code = 6
	AccountResetPasswordResult_PasswordMustDifferent AccountResetPasswordResult_Code = 7
)

var AccountResetPasswordResult_Code_name = map[int32]string{
	0: "Success",
	1: "Internal",
	2: "CaptchaInvalid",
	3: "CaptchaExpired",
	4: "Flood",
	5: "PhoneNumberUnoccupied",
	6: "PasswordInvalid",
	7: "PasswordMustDifferent",
}
var AccountResetPasswordResult_Code_value = map[string]int32{
	"Success":               0,
	"Internal":              1,
	"CaptchaInvalid":        2,
	"CaptchaExpired":        3,
	"Flood":                 4,
	"PhoneNumberUnoccupied": 5,
	"PasswordInvalid":       6,
	"PasswordMustDifferent": 7,
}

func (x AccountResetPasswordResult_Code) String() string {
	return proto.EnumName(AccountResetPasswordResult_Code_name, int32(x))
}
func (AccountResetPasswordResult_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{75, 0}
}

type GetUserChannelByUserNameResult_ErrorCode int32

const (
	GetUserChannelByUserNameResult_Success  GetUserChannelByUserNameResult_ErrorCode = 0
	GetUserChannelByUserNameResult_NOTFOUND GetUserChannelByUserNameResult_ErrorCode = 2
)

var GetUserChannelByUserNameResult_ErrorCode_name = map[int32]string{
	0: "Success",
	2: "NOTFOUND",
}
var GetUserChannelByUserNameResult_ErrorCode_value = map[string]int32{
	"Success":  0,
	"NOTFOUND": 2,
}

func (x GetUserChannelByUserNameResult_ErrorCode) String() string {
	return proto.EnumName(GetUserChannelByUserNameResult_ErrorCode_name, int32(x))
}
func (GetUserChannelByUserNameResult_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{83, 0}
}

// 发送短信验证码的请求
type SendCodeReq struct {
	PhoneNumber   string        `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	CurrentNumber bool          `protobuf:"varint,2,opt,name=CurrentNumber,proto3" json:"CurrentNumber,omitempty"`
	ApiId         int32         `protobuf:"varint,3,opt,name=ApiId,proto3" json:"ApiId,omitempty"`
	ApiHash       string        `protobuf:"bytes,4,opt,name=ApiHash,proto3" json:"ApiHash,omitempty"`
	LangCode      string        `protobuf:"bytes,5,opt,name=LangCode,proto3" json:"LangCode,omitempty"`
	UserId        int32         `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId         int64         `protobuf:"varint,7,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
	CountryCode   string        `protobuf:"bytes,9,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LocalPhone    string        `protobuf:"bytes,10,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
}

func (m *SendCodeReq) Reset()                    { *m = SendCodeReq{} }
func (m *SendCodeReq) String() string            { return proto.CompactTextString(m) }
func (*SendCodeReq) ProtoMessage()               {}
func (*SendCodeReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{0} }

func (m *SendCodeReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *SendCodeReq) GetCurrentNumber() bool {
	if m != nil {
		return m.CurrentNumber
	}
	return false
}

func (m *SendCodeReq) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *SendCodeReq) GetApiHash() string {
	if m != nil {
		return m.ApiHash
	}
	return ""
}

func (m *SendCodeReq) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *SendCodeReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SendCodeReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SendCodeReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *SendCodeReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *SendCodeReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

// 发送短信请求的返回
type SendCodeResult struct {
	Result        bool                      `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrorCode     SendCodeResult_ResultCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=infoserver.SendCodeResult_ResultCode" json:"ErrorCode,omitempty"`
	PhoneRegister bool                      `protobuf:"varint,3,opt,name=PhoneRegister,proto3" json:"PhoneRegister,omitempty"`
	NextCodeType  CodeType                  `protobuf:"varint,4,opt,name=NextCodeType,proto3,enum=infoserver.CodeType" json:"NextCodeType,omitempty"`
	PhoneCodeHash string                    `protobuf:"bytes,5,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	TimeOut       int32                     `protobuf:"varint,6,opt,name=TimeOut,proto3" json:"TimeOut,omitempty"`
	SendTypeApp   bool                      `protobuf:"varint,7,opt,name=SendTypeApp,proto3" json:"SendTypeApp,omitempty"`
	PhoneCodeDesc string                    `protobuf:"bytes,8,opt,name=PhoneCodeDesc,proto3" json:"PhoneCodeDesc,omitempty"`
}

func (m *SendCodeResult) Reset()                    { *m = SendCodeResult{} }
func (m *SendCodeResult) String() string            { return proto.CompactTextString(m) }
func (*SendCodeResult) ProtoMessage()               {}
func (*SendCodeResult) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{1} }

func (m *SendCodeResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *SendCodeResult) GetErrorCode() SendCodeResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return SendCodeResult_Success
}

func (m *SendCodeResult) GetPhoneRegister() bool {
	if m != nil {
		return m.PhoneRegister
	}
	return false
}

func (m *SendCodeResult) GetNextCodeType() CodeType {
	if m != nil {
		return m.NextCodeType
	}
	return CodeType_SendSms
}

func (m *SendCodeResult) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *SendCodeResult) GetTimeOut() int32 {
	if m != nil {
		return m.TimeOut
	}
	return 0
}

func (m *SendCodeResult) GetSendTypeApp() bool {
	if m != nil {
		return m.SendTypeApp
	}
	return false
}

func (m *SendCodeResult) GetPhoneCodeDesc() string {
	if m != nil {
		return m.PhoneCodeDesc
	}
	return ""
}

// 更改电话号码发送短信的接口
type SendChangePhoneCodeReq struct {
	PhoneNumber    string        `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	AllowFlashcall bool          `protobuf:"varint,2,opt,name=AllowFlashcall,proto3" json:"AllowFlashcall,omitempty"`
	CurrentNumber  bool          `protobuf:"varint,3,opt,name=Current_number,json=CurrentNumber,proto3" json:"Current_number,omitempty"`
	UserId         int32         `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId          int64         `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
	CountryCode    string        `protobuf:"bytes,7,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LocalPhone     string        `protobuf:"bytes,8,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
}

func (m *SendChangePhoneCodeReq) Reset()         { *m = SendChangePhoneCodeReq{} }
func (m *SendChangePhoneCodeReq) String() string { return proto.CompactTextString(m) }
func (*SendChangePhoneCodeReq) ProtoMessage()    {}
func (*SendChangePhoneCodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{2}
}

func (m *SendChangePhoneCodeReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *SendChangePhoneCodeReq) GetAllowFlashcall() bool {
	if m != nil {
		return m.AllowFlashcall
	}
	return false
}

func (m *SendChangePhoneCodeReq) GetCurrentNumber() bool {
	if m != nil {
		return m.CurrentNumber
	}
	return false
}

func (m *SendChangePhoneCodeReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SendChangePhoneCodeReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SendChangePhoneCodeReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *SendChangePhoneCodeReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *SendChangePhoneCodeReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

// 登录的请求
type SignInReq struct {
	PhoneNumber   string        `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	PhoneCodeHash string        `protobuf:"bytes,2,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode     string        `protobuf:"bytes,3,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"`
	KeyId         int64         `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
	CountryCode   string        `protobuf:"bytes,7,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LocalPhone    string        `protobuf:"bytes,8,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
}

func (m *SignInReq) Reset()                    { *m = SignInReq{} }
func (m *SignInReq) String() string            { return proto.CompactTextString(m) }
func (*SignInReq) ProtoMessage()               {}
func (*SignInReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{3} }

func (m *SignInReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *SignInReq) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *SignInReq) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *SignInReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SignInReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *SignInReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *SignInReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

// 登录或者注册接口的返回
type SignInOrReqitsterResult struct {
	UserInfo  *UserInfo                          `protobuf:"bytes,1,opt,name=userInfo" json:"userInfo,omitempty"`
	ErrorCode SignInOrReqitsterResult_ResultCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=infoserver.SignInOrReqitsterResult_ResultCode" json:"ErrorCode,omitempty"`
	Result    bool                               `protobuf:"varint,3,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *SignInOrReqitsterResult) Reset()         { *m = SignInOrReqitsterResult{} }
func (m *SignInOrReqitsterResult) String() string { return proto.CompactTextString(m) }
func (*SignInOrReqitsterResult) ProtoMessage()    {}
func (*SignInOrReqitsterResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{4}
}

func (m *SignInOrReqitsterResult) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *SignInOrReqitsterResult) GetErrorCode() SignInOrReqitsterResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return SignInOrReqitsterResult_Success
}

func (m *SignInOrReqitsterResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 用户注册的请求结构
type SignUpReq struct {
	PhoneNumber    string        `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	PhoneCodeHash  string        `protobuf:"bytes,2,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode      string        `protobuf:"bytes,3,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"`
	KeyId          int64         `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`
	FirstName      string        `protobuf:"bytes,6,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName       string        `protobuf:"bytes,7,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot          bool          `protobuf:"varint,8,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32         `protobuf:"varint,9,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool          `protobuf:"varint,10,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool          `protobuf:"varint,11,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	DcId           int32         `protobuf:"varint,12,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,13,opt,name=debug" json:"debug,omitempty"`
	CountryCode    string        `protobuf:"bytes,14,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LocalPhone     string        `protobuf:"bytes,15,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
}

func (m *SignUpReq) Reset()                    { *m = SignUpReq{} }
func (m *SignUpReq) String() string            { return proto.CompactTextString(m) }
func (*SignUpReq) ProtoMessage()               {}
func (*SignUpReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{5} }

func (m *SignUpReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *SignUpReq) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *SignUpReq) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *SignUpReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SignUpReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *SignUpReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *SignUpReq) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *SignUpReq) GetBotInfoVersion() int32 {
	if m != nil {
		return m.BotInfoVersion
	}
	return 0
}

func (m *SignUpReq) GetBotChatHistory() bool {
	if m != nil {
		return m.BotChatHistory
	}
	return false
}

func (m *SignUpReq) GetBotNoChats() bool {
	if m != nil {
		return m.BotNoChats
	}
	return false
}

func (m *SignUpReq) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

func (m *SignUpReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *SignUpReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *SignUpReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

type AuthSignUpResult struct {
	Code     AuthSignUpResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.AuthSignUpResult_ResultCode" json:"code,omitempty"`
	UserInfo *UserInfo                   `protobuf:"bytes,2,opt,name=userInfo" json:"userInfo,omitempty"`
}

func (m *AuthSignUpResult) Reset()                    { *m = AuthSignUpResult{} }
func (m *AuthSignUpResult) String() string            { return proto.CompactTextString(m) }
func (*AuthSignUpResult) ProtoMessage()               {}
func (*AuthSignUpResult) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{6} }

func (m *AuthSignUpResult) GetCode() AuthSignUpResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return AuthSignUpResult_Success
}

func (m *AuthSignUpResult) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

// 更改电话号码的请求参数
type ChangePhoneReq struct {
	UserId        int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId         int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	PhoneNumber   string        `protobuf:"bytes,3,opt,name=Phone_number,json=PhoneNumber,proto3" json:"Phone_number,omitempty"`
	PhoneCodeHash string        `protobuf:"bytes,4,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode     string        `protobuf:"bytes,5,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
	CountryCode   string        `protobuf:"bytes,7,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LocalPhone    string        `protobuf:"bytes,8,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
}

func (m *ChangePhoneReq) Reset()                    { *m = ChangePhoneReq{} }
func (m *ChangePhoneReq) String() string            { return proto.CompactTextString(m) }
func (*ChangePhoneReq) ProtoMessage()               {}
func (*ChangePhoneReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{7} }

func (m *ChangePhoneReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChangePhoneReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ChangePhoneReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *ChangePhoneReq) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *ChangePhoneReq) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *ChangePhoneReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ChangePhoneReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *ChangePhoneReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

// 更改电话号码的返回
type ChangePhoneResult struct {
	UserInfo  *UserInfo                    `protobuf:"bytes,1,opt,name=userInfo" json:"userInfo,omitempty"`
	ErrorCode ChangePhoneResult_ResultCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=infoserver.ChangePhoneResult_ResultCode" json:"ErrorCode,omitempty"`
	Result    bool                         `protobuf:"varint,3,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *ChangePhoneResult) Reset()                    { *m = ChangePhoneResult{} }
func (m *ChangePhoneResult) String() string            { return proto.CompactTextString(m) }
func (*ChangePhoneResult) ProtoMessage()               {}
func (*ChangePhoneResult) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{8} }

func (m *ChangePhoneResult) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *ChangePhoneResult) GetErrorCode() ChangePhoneResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return ChangePhoneResult_Success
}

func (m *ChangePhoneResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 两步验证校验密码
type AuthCheckPasswdReq struct {
	UserId       int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	PasswordHash []byte        `protobuf:"bytes,2,opt,name=PasswordHash,proto3" json:"PasswordHash,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
	KeyId        uint64        `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (m *AuthCheckPasswdReq) Reset()                    { *m = AuthCheckPasswdReq{} }
func (m *AuthCheckPasswdReq) String() string            { return proto.CompactTextString(m) }
func (*AuthCheckPasswdReq) ProtoMessage()               {}
func (*AuthCheckPasswdReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{9} }

func (m *AuthCheckPasswdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AuthCheckPasswdReq) GetPasswordHash() []byte {
	if m != nil {
		return m.PasswordHash
	}
	return nil
}

func (m *AuthCheckPasswdReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *AuthCheckPasswdReq) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

// 校验两步验证的返回
type AuthCheckPasswdResult struct {
	UserInfo  *UserInfo                        `protobuf:"bytes,1,opt,name=userInfo" json:"userInfo,omitempty"`
	ErrorCode AuthCheckPasswdResult_ResultCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=infoserver.AuthCheckPasswdResult_ResultCode" json:"ErrorCode,omitempty"`
	Result    bool                             `protobuf:"varint,3,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *AuthCheckPasswdResult) Reset()         { *m = AuthCheckPasswdResult{} }
func (m *AuthCheckPasswdResult) String() string { return proto.CompactTextString(m) }
func (*AuthCheckPasswdResult) ProtoMessage()    {}
func (*AuthCheckPasswdResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{10}
}

func (m *AuthCheckPasswdResult) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *AuthCheckPasswdResult) GetErrorCode() AuthCheckPasswdResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return AuthCheckPasswdResult_Success
}

func (m *AuthCheckPasswdResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// importAuthorization  请求
type AuthImportAuthorizationReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId  int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Bytes  []byte        `protobuf:"bytes,3,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	Dcid   int32         `protobuf:"varint,4,opt,name=dcid,proto3" json:"dcid,omitempty"`
	Authid int32         `protobuf:"varint,5,opt,name=authid,proto3" json:"authid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *AuthImportAuthorizationReq) Reset()         { *m = AuthImportAuthorizationReq{} }
func (m *AuthImportAuthorizationReq) String() string { return proto.CompactTextString(m) }
func (*AuthImportAuthorizationReq) ProtoMessage()    {}
func (*AuthImportAuthorizationReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{11}
}

func (m *AuthImportAuthorizationReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AuthImportAuthorizationReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *AuthImportAuthorizationReq) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *AuthImportAuthorizationReq) GetDcid() int32 {
	if m != nil {
		return m.Dcid
	}
	return 0
}

func (m *AuthImportAuthorizationReq) GetAuthid() int32 {
	if m != nil {
		return m.Authid
	}
	return 0
}

func (m *AuthImportAuthorizationReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// importAuthorization 的返回
type AuthImportAuthorizationResult struct {
	UserInfo  *UserInfo                                `protobuf:"bytes,1,opt,name=userInfo" json:"userInfo,omitempty"`
	ErrorCode AuthImportAuthorizationResult_ResultCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=infoserver.AuthImportAuthorizationResult_ResultCode" json:"ErrorCode,omitempty"`
	Result    bool                                     `protobuf:"varint,3,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *AuthImportAuthorizationResult) Reset()         { *m = AuthImportAuthorizationResult{} }
func (m *AuthImportAuthorizationResult) String() string { return proto.CompactTextString(m) }
func (*AuthImportAuthorizationResult) ProtoMessage()    {}
func (*AuthImportAuthorizationResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{12}
}

func (m *AuthImportAuthorizationResult) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *AuthImportAuthorizationResult) GetErrorCode() AuthImportAuthorizationResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return AuthImportAuthorizationResult_Success
}

func (m *AuthImportAuthorizationResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// export auth 请求
type AuthExportAuthorizationReq struct {
	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Keyid  int64         `protobuf:"varint,2,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Dcid   int32         `protobuf:"varint,3,opt,name=dcid,proto3" json:"dcid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *AuthExportAuthorizationReq) Reset()         { *m = AuthExportAuthorizationReq{} }
func (m *AuthExportAuthorizationReq) String() string { return proto.CompactTextString(m) }
func (*AuthExportAuthorizationReq) ProtoMessage()    {}
func (*AuthExportAuthorizationReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{13}
}

func (m *AuthExportAuthorizationReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *AuthExportAuthorizationReq) GetKeyid() int64 {
	if m != nil {
		return m.Keyid
	}
	return 0
}

func (m *AuthExportAuthorizationReq) GetDcid() int32 {
	if m != nil {
		return m.Dcid
	}
	return 0
}

func (m *AuthExportAuthorizationReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// export auth 返回
type AuthExportAuthorizationResult struct {
	Code AuthExportAuthorizationResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.AuthExportAuthorizationResult_ResultCode" json:"code,omitempty"`
	Data []byte                                   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AuthExportAuthorizationResult) Reset()         { *m = AuthExportAuthorizationResult{} }
func (m *AuthExportAuthorizationResult) String() string { return proto.CompactTextString(m) }
func (*AuthExportAuthorizationResult) ProtoMessage()    {}
func (*AuthExportAuthorizationResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{14}
}

func (m *AuthExportAuthorizationResult) GetCode() AuthExportAuthorizationResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return AuthExportAuthorizationResult_Success
}

func (m *AuthExportAuthorizationResult) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 恢复两步验证密码
type AuthRecoverPasswdReq struct {
	UserId      int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId       int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Code        string        `protobuf:"bytes,3,opt,name=Code,proto3" json:"Code,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
	PhoneNumber string        `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *AuthRecoverPasswdReq) Reset()                    { *m = AuthRecoverPasswdReq{} }
func (m *AuthRecoverPasswdReq) String() string            { return proto.CompactTextString(m) }
func (*AuthRecoverPasswdReq) ProtoMessage()               {}
func (*AuthRecoverPasswdReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{15} }

func (m *AuthRecoverPasswdReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AuthRecoverPasswdReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *AuthRecoverPasswdReq) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *AuthRecoverPasswdReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *AuthRecoverPasswdReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

// 恢复两步验证密码 的返回
type AuthRecoverPasswdResult struct {
	UserInfo  *UserInfo                          `protobuf:"bytes,1,opt,name=userInfo" json:"userInfo,omitempty"`
	ErrorCode AuthRecoverPasswdResult_ResultCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=infoserver.AuthRecoverPasswdResult_ResultCode" json:"ErrorCode,omitempty"`
}

func (m *AuthRecoverPasswdResult) Reset()         { *m = AuthRecoverPasswdResult{} }
func (m *AuthRecoverPasswdResult) String() string { return proto.CompactTextString(m) }
func (*AuthRecoverPasswdResult) ProtoMessage()    {}
func (*AuthRecoverPasswdResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{16}
}

func (m *AuthRecoverPasswdResult) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *AuthRecoverPasswdResult) GetErrorCode() AuthRecoverPasswdResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return AuthRecoverPasswdResult_Success
}

// 联系人搜索的请求
type ContactsSearchReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Q      string        `protobuf:"bytes,2,opt,name=Q,proto3" json:"Q,omitempty"`
	Limit  int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ContactsSearchReq) Reset()                    { *m = ContactsSearchReq{} }
func (m *ContactsSearchReq) String() string            { return proto.CompactTextString(m) }
func (*ContactsSearchReq) ProtoMessage()               {}
func (*ContactsSearchReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{17} }

func (m *ContactsSearchReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ContactsSearchReq) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *ContactsSearchReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ContactsSearchReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 搜索的结果
type ContactsSearcResult struct {
	Users     *UserInfoArray                 `protobuf:"bytes,1,opt,name=users" json:"users,omitempty"`
	Channel   [][]byte                       `protobuf:"bytes,2,rep,name=channel" json:"channel,omitempty"`
	ErrorCode ContactsSearcResult_ResultCode `protobuf:"varint,3,opt,name=ErrorCode,proto3,enum=infoserver.ContactsSearcResult_ResultCode" json:"ErrorCode,omitempty"`
}

func (m *ContactsSearcResult) Reset()                    { *m = ContactsSearcResult{} }
func (m *ContactsSearcResult) String() string            { return proto.CompactTextString(m) }
func (*ContactsSearcResult) ProtoMessage()               {}
func (*ContactsSearcResult) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{18} }

func (m *ContactsSearcResult) GetUsers() *UserInfoArray {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ContactsSearcResult) GetChannel() [][]byte {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *ContactsSearcResult) GetErrorCode() ContactsSearcResult_ResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return ContactsSearcResult_Success
}

// 发送重置密码验证码
type AuthRequestPasswordRecoveryReq struct {
	PhoneNumber string        `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *AuthRequestPasswordRecoveryReq) Reset()         { *m = AuthRequestPasswordRecoveryReq{} }
func (m *AuthRequestPasswordRecoveryReq) String() string { return proto.CompactTextString(m) }
func (*AuthRequestPasswordRecoveryReq) ProtoMessage()    {}
func (*AuthRequestPasswordRecoveryReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{19}
}

func (m *AuthRequestPasswordRecoveryReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *AuthRequestPasswordRecoveryReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AuthRequestPasswordRecoveryReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type AuthRequestPasswordRecoveryResult struct {
	Code         AuthRequestPasswordRecoveryResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.AuthRequestPasswordRecoveryResult_ResultCode" json:"code,omitempty"`
	EmailPattern string                                       `protobuf:"bytes,2,opt,name=email_pattern,json=emailPattern,proto3" json:"email_pattern,omitempty"`
}

func (m *AuthRequestPasswordRecoveryResult) Reset()         { *m = AuthRequestPasswordRecoveryResult{} }
func (m *AuthRequestPasswordRecoveryResult) String() string { return proto.CompactTextString(m) }
func (*AuthRequestPasswordRecoveryResult) ProtoMessage()    {}
func (*AuthRequestPasswordRecoveryResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{20}
}

func (m *AuthRequestPasswordRecoveryResult) GetCode() AuthRequestPasswordRecoveryResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return AuthRequestPasswordRecoveryResult_Success
}

func (m *AuthRequestPasswordRecoveryResult) GetEmailPattern() string {
	if m != nil {
		return m.EmailPattern
	}
	return ""
}

// 电话功能
type PhonecallSessionInformation struct {
	SessionId        int64  `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AccessHash       int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	AdminId          int32  `protobuf:"varint,3,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	AdminKeyid       uint64 `protobuf:"varint,4,opt,name=admin_keyid,json=adminKeyid,proto3" json:"admin_keyid,omitempty"`
	ParticipantId    int32  `protobuf:"varint,5,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	ParticipantKeyid uint64 `protobuf:"varint,6,opt,name=participant_keyid,json=participantKeyid,proto3" json:"participant_keyid,omitempty"`
	GB               []byte `protobuf:"bytes,7,opt,name=g_b,json=gB,proto3" json:"g_b,omitempty"`
	CallRequestedAt  int32  `protobuf:"varint,8,opt,name=call_requested_at,json=callRequestedAt,proto3" json:"call_requested_at,omitempty"`
	CallReceivedAt   int32  `protobuf:"varint,9,opt,name=call_received_at,json=callReceivedAt,proto3" json:"call_received_at,omitempty"`
	CallConfirmedAt  int32  `protobuf:"varint,10,opt,name=call_confirmed_at,json=callConfirmedAt,proto3" json:"call_confirmed_at,omitempty"`
	PeerTag          []byte `protobuf:"bytes,11,opt,name=peer_tag,json=peerTag,proto3" json:"peer_tag,omitempty"`
	CurStatus        uint32 `protobuf:"varint,12,opt,name=cur_status,json=curStatus,proto3" json:"cur_status,omitempty"`
}

func (m *PhonecallSessionInformation) Reset()         { *m = PhonecallSessionInformation{} }
func (m *PhonecallSessionInformation) String() string { return proto.CompactTextString(m) }
func (*PhonecallSessionInformation) ProtoMessage()    {}
func (*PhonecallSessionInformation) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{21}
}

func (m *PhonecallSessionInformation) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *PhonecallSessionInformation) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *PhonecallSessionInformation) GetAdminId() int32 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

func (m *PhonecallSessionInformation) GetAdminKeyid() uint64 {
	if m != nil {
		return m.AdminKeyid
	}
	return 0
}

func (m *PhonecallSessionInformation) GetParticipantId() int32 {
	if m != nil {
		return m.ParticipantId
	}
	return 0
}

func (m *PhonecallSessionInformation) GetParticipantKeyid() uint64 {
	if m != nil {
		return m.ParticipantKeyid
	}
	return 0
}

func (m *PhonecallSessionInformation) GetGB() []byte {
	if m != nil {
		return m.GB
	}
	return nil
}

func (m *PhonecallSessionInformation) GetCallRequestedAt() int32 {
	if m != nil {
		return m.CallRequestedAt
	}
	return 0
}

func (m *PhonecallSessionInformation) GetCallReceivedAt() int32 {
	if m != nil {
		return m.CallReceivedAt
	}
	return 0
}

func (m *PhonecallSessionInformation) GetCallConfirmedAt() int32 {
	if m != nil {
		return m.CallConfirmedAt
	}
	return 0
}

func (m *PhonecallSessionInformation) GetPeerTag() []byte {
	if m != nil {
		return m.PeerTag
	}
	return nil
}

func (m *PhonecallSessionInformation) GetCurStatus() uint32 {
	if m != nil {
		return m.CurStatus
	}
	return 0
}

type PhonecallEndpointInformation struct {
	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip   string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Ipv6 string `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	Port int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *PhonecallEndpointInformation) Reset()         { *m = PhonecallEndpointInformation{} }
func (m *PhonecallEndpointInformation) String() string { return proto.CompactTextString(m) }
func (*PhonecallEndpointInformation) ProtoMessage()    {}
func (*PhonecallEndpointInformation) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{22}
}

func (m *PhonecallEndpointInformation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PhonecallEndpointInformation) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PhonecallEndpointInformation) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

func (m *PhonecallEndpointInformation) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type PhonecallAllocSessionReq struct {
	CallerId    int32         `protobuf:"varint,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	ReceiverId  int32         `protobuf:"varint,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	CallerKeyid uint64        `protobuf:"varint,3,opt,name=caller_keyid,json=callerKeyid,proto3" json:"caller_keyid,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *PhonecallAllocSessionReq) Reset()         { *m = PhonecallAllocSessionReq{} }
func (m *PhonecallAllocSessionReq) String() string { return proto.CompactTextString(m) }
func (*PhonecallAllocSessionReq) ProtoMessage()    {}
func (*PhonecallAllocSessionReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{23}
}

func (m *PhonecallAllocSessionReq) GetCallerId() int32 {
	if m != nil {
		return m.CallerId
	}
	return 0
}

func (m *PhonecallAllocSessionReq) GetReceiverId() int32 {
	if m != nil {
		return m.ReceiverId
	}
	return 0
}

func (m *PhonecallAllocSessionReq) GetCallerKeyid() uint64 {
	if m != nil {
		return m.CallerKeyid
	}
	return 0
}

func (m *PhonecallAllocSessionReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type PhonecallAllocSessionResult struct {
	Code       PhonecallAllocSessionResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhonecallAllocSessionResult_ResultCode" json:"code,omitempty"`
	SessionId  int64                                  `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AccessHash int64                                  `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *PhonecallAllocSessionResult) Reset()         { *m = PhonecallAllocSessionResult{} }
func (m *PhonecallAllocSessionResult) String() string { return proto.CompactTextString(m) }
func (*PhonecallAllocSessionResult) ProtoMessage()    {}
func (*PhonecallAllocSessionResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{24}
}

func (m *PhonecallAllocSessionResult) GetCode() PhonecallAllocSessionResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return PhonecallAllocSessionResult_Success
}

func (m *PhonecallAllocSessionResult) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *PhonecallAllocSessionResult) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

type PhonecallOnReceivedCallCheckReq struct {
	SessionId  int64         `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *PhonecallOnReceivedCallCheckReq) Reset()         { *m = PhonecallOnReceivedCallCheckReq{} }
func (m *PhonecallOnReceivedCallCheckReq) String() string { return proto.CompactTextString(m) }
func (*PhonecallOnReceivedCallCheckReq) ProtoMessage()    {}
func (*PhonecallOnReceivedCallCheckReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{25}
}

func (m *PhonecallOnReceivedCallCheckReq) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *PhonecallOnReceivedCallCheckReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *PhonecallOnReceivedCallCheckReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type PhonecallOnReceivedCallCheckResult struct {
	Code PhonecallOnReceivedCallCheckResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhonecallOnReceivedCallCheckResult_ResultCode" json:"code,omitempty"`
}

func (m *PhonecallOnReceivedCallCheckResult) Reset()         { *m = PhonecallOnReceivedCallCheckResult{} }
func (m *PhonecallOnReceivedCallCheckResult) String() string { return proto.CompactTextString(m) }
func (*PhonecallOnReceivedCallCheckResult) ProtoMessage()    {}
func (*PhonecallOnReceivedCallCheckResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{26}
}

func (m *PhonecallOnReceivedCallCheckResult) GetCode() PhonecallOnReceivedCallCheckResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return PhonecallOnReceivedCallCheckResult_SessionExist
}

type PhonecallOnAcceptCallUpdateReq struct {
	SessionId        int64         `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AccessHash       int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	ParticipantId    int32         `protobuf:"varint,3,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	ParticipantKeyid uint64        `protobuf:"varint,4,opt,name=participant_keyid,json=participantKeyid,proto3" json:"participant_keyid,omitempty"`
	GB               []byte        `protobuf:"bytes,5,opt,name=g_b,json=gB,proto3" json:"g_b,omitempty"`
	Debug            *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *PhonecallOnAcceptCallUpdateReq) Reset()         { *m = PhonecallOnAcceptCallUpdateReq{} }
func (m *PhonecallOnAcceptCallUpdateReq) String() string { return proto.CompactTextString(m) }
func (*PhonecallOnAcceptCallUpdateReq) ProtoMessage()    {}
func (*PhonecallOnAcceptCallUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{27}
}

func (m *PhonecallOnAcceptCallUpdateReq) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *PhonecallOnAcceptCallUpdateReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *PhonecallOnAcceptCallUpdateReq) GetParticipantId() int32 {
	if m != nil {
		return m.ParticipantId
	}
	return 0
}

func (m *PhonecallOnAcceptCallUpdateReq) GetParticipantKeyid() uint64 {
	if m != nil {
		return m.ParticipantKeyid
	}
	return 0
}

func (m *PhonecallOnAcceptCallUpdateReq) GetGB() []byte {
	if m != nil {
		return m.GB
	}
	return nil
}

func (m *PhonecallOnAcceptCallUpdateReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type PhonecallOnAcceptCallUpdateResult struct {
	Code        PhonecallOnAcceptCallUpdateResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhonecallOnAcceptCallUpdateResult_ResultCode" json:"code,omitempty"`
	Information *PhonecallSessionInformation                 `protobuf:"bytes,2,opt,name=information" json:"information,omitempty"`
}

func (m *PhonecallOnAcceptCallUpdateResult) Reset()         { *m = PhonecallOnAcceptCallUpdateResult{} }
func (m *PhonecallOnAcceptCallUpdateResult) String() string { return proto.CompactTextString(m) }
func (*PhonecallOnAcceptCallUpdateResult) ProtoMessage()    {}
func (*PhonecallOnAcceptCallUpdateResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{28}
}

func (m *PhonecallOnAcceptCallUpdateResult) GetCode() PhonecallOnAcceptCallUpdateResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return PhonecallOnAcceptCallUpdateResult_Success
}

func (m *PhonecallOnAcceptCallUpdateResult) GetInformation() *PhonecallSessionInformation {
	if m != nil {
		return m.Information
	}
	return nil
}

type PhonecallOnConfirmCallUpdateReq struct {
	SessionId  int64         `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	AdminId    int32         `protobuf:"varint,3,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	AdminKeyid uint64        `protobuf:"varint,4,opt,name=admin_keyid,json=adminKeyid,proto3" json:"admin_keyid,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *PhonecallOnConfirmCallUpdateReq) Reset()         { *m = PhonecallOnConfirmCallUpdateReq{} }
func (m *PhonecallOnConfirmCallUpdateReq) String() string { return proto.CompactTextString(m) }
func (*PhonecallOnConfirmCallUpdateReq) ProtoMessage()    {}
func (*PhonecallOnConfirmCallUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{29}
}

func (m *PhonecallOnConfirmCallUpdateReq) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *PhonecallOnConfirmCallUpdateReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *PhonecallOnConfirmCallUpdateReq) GetAdminId() int32 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

func (m *PhonecallOnConfirmCallUpdateReq) GetAdminKeyid() uint64 {
	if m != nil {
		return m.AdminKeyid
	}
	return 0
}

func (m *PhonecallOnConfirmCallUpdateReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type PhonecallOnConfirmCallUpdateResult struct {
	Code        PhonecallOnConfirmCallUpdateResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhonecallOnConfirmCallUpdateResult_ResultCode" json:"code,omitempty"`
	Information *PhonecallSessionInformation                  `protobuf:"bytes,2,opt,name=information" json:"information,omitempty"`
}

func (m *PhonecallOnConfirmCallUpdateResult) Reset()         { *m = PhonecallOnConfirmCallUpdateResult{} }
func (m *PhonecallOnConfirmCallUpdateResult) String() string { return proto.CompactTextString(m) }
func (*PhonecallOnConfirmCallUpdateResult) ProtoMessage()    {}
func (*PhonecallOnConfirmCallUpdateResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{30}
}

func (m *PhonecallOnConfirmCallUpdateResult) GetCode() PhonecallOnConfirmCallUpdateResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return PhonecallOnConfirmCallUpdateResult_Success
}

func (m *PhonecallOnConfirmCallUpdateResult) GetInformation() *PhonecallSessionInformation {
	if m != nil {
		return m.Information
	}
	return nil
}

type PhonecallOnDiscardCallUpdateReq struct {
	DiscarderId int32         `protobuf:"varint,1,opt,name=discarder_id,json=discarderId,proto3" json:"discarder_id,omitempty"`
	SessionId   int64         `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AccessHash  int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *PhonecallOnDiscardCallUpdateReq) Reset()         { *m = PhonecallOnDiscardCallUpdateReq{} }
func (m *PhonecallOnDiscardCallUpdateReq) String() string { return proto.CompactTextString(m) }
func (*PhonecallOnDiscardCallUpdateReq) ProtoMessage()    {}
func (*PhonecallOnDiscardCallUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{31}
}

func (m *PhonecallOnDiscardCallUpdateReq) GetDiscarderId() int32 {
	if m != nil {
		return m.DiscarderId
	}
	return 0
}

func (m *PhonecallOnDiscardCallUpdateReq) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *PhonecallOnDiscardCallUpdateReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *PhonecallOnDiscardCallUpdateReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type PhonecallOnDiscardCallUpdateResult struct {
	Code        PhonecallOnDiscardCallUpdateResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhonecallOnDiscardCallUpdateResult_ResultCode" json:"code,omitempty"`
	Information *PhonecallSessionInformation                  `protobuf:"bytes,2,opt,name=information" json:"information,omitempty"`
}

func (m *PhonecallOnDiscardCallUpdateResult) Reset()         { *m = PhonecallOnDiscardCallUpdateResult{} }
func (m *PhonecallOnDiscardCallUpdateResult) String() string { return proto.CompactTextString(m) }
func (*PhonecallOnDiscardCallUpdateResult) ProtoMessage()    {}
func (*PhonecallOnDiscardCallUpdateResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{32}
}

func (m *PhonecallOnDiscardCallUpdateResult) GetCode() PhonecallOnDiscardCallUpdateResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return PhonecallOnDiscardCallUpdateResult_Success
}

func (m *PhonecallOnDiscardCallUpdateResult) GetInformation() *PhonecallSessionInformation {
	if m != nil {
		return m.Information
	}
	return nil
}

type PhonecallQueryEndpointsReq struct {
	Debug *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *PhonecallQueryEndpointsReq) Reset()         { *m = PhonecallQueryEndpointsReq{} }
func (m *PhonecallQueryEndpointsReq) String() string { return proto.CompactTextString(m) }
func (*PhonecallQueryEndpointsReq) ProtoMessage()    {}
func (*PhonecallQueryEndpointsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{33}
}

func (m *PhonecallQueryEndpointsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type PhonecallQueryEndpointsResult struct {
	Code         PhonecallQueryEndpointsResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhonecallQueryEndpointsResult_ResultCode" json:"code,omitempty"`
	Informations []*PhonecallEndpointInformation          `protobuf:"bytes,2,rep,name=informations" json:"informations,omitempty"`
}

func (m *PhonecallQueryEndpointsResult) Reset()         { *m = PhonecallQueryEndpointsResult{} }
func (m *PhonecallQueryEndpointsResult) String() string { return proto.CompactTextString(m) }
func (*PhonecallQueryEndpointsResult) ProtoMessage()    {}
func (*PhonecallQueryEndpointsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{34}
}

func (m *PhonecallQueryEndpointsResult) GetCode() PhonecallQueryEndpointsResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return PhonecallQueryEndpointsResult_Success
}

func (m *PhonecallQueryEndpointsResult) GetInformations() []*PhonecallEndpointInformation {
	if m != nil {
		return m.Informations
	}
	return nil
}

type AuthCancelCodeReq struct {
	UserId        int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId         int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	PhoneNumber   string        `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string        `protobuf:"bytes,4,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *AuthCancelCodeReq) Reset()                    { *m = AuthCancelCodeReq{} }
func (m *AuthCancelCodeReq) String() string            { return proto.CompactTextString(m) }
func (*AuthCancelCodeReq) ProtoMessage()               {}
func (*AuthCancelCodeReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{35} }

func (m *AuthCancelCodeReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AuthCancelCodeReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *AuthCancelCodeReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *AuthCancelCodeReq) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *AuthCancelCodeReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type AuthCancelCodeResult struct {
	CodeCanceled bool `protobuf:"varint,1,opt,name=code_canceled,json=codeCanceled,proto3" json:"code_canceled,omitempty"`
}

func (m *AuthCancelCodeResult) Reset()                    { *m = AuthCancelCodeResult{} }
func (m *AuthCancelCodeResult) String() string            { return proto.CompactTextString(m) }
func (*AuthCancelCodeResult) ProtoMessage()               {}
func (*AuthCancelCodeResult) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{36} }

func (m *AuthCancelCodeResult) GetCodeCanceled() bool {
	if m != nil {
		return m.CodeCanceled
	}
	return false
}

// 语言包信息
type Langpack struct {
	Platform    uint32 `protobuf:"varint,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NativeName  string `protobuf:"bytes,3,opt,name=native_name,json=nativeName,proto3" json:"native_name,omitempty"`
	LangCode    string `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	FromVersion int32  `protobuf:"varint,5,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty"`
	Version     int32  `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	Strings     []byte `protobuf:"bytes,7,opt,name=strings,proto3" json:"strings,omitempty"`
}

func (m *Langpack) Reset()                    { *m = Langpack{} }
func (m *Langpack) String() string            { return proto.CompactTextString(m) }
func (*Langpack) ProtoMessage()               {}
func (*Langpack) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{37} }

func (m *Langpack) GetPlatform() uint32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *Langpack) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Langpack) GetNativeName() string {
	if m != nil {
		return m.NativeName
	}
	return ""
}

func (m *Langpack) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *Langpack) GetFromVersion() int32 {
	if m != nil {
		return m.FromVersion
	}
	return 0
}

func (m *Langpack) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Langpack) GetStrings() []byte {
	if m != nil {
		return m.Strings
	}
	return nil
}

type LangpackList struct {
	Vector []*Langpack `protobuf:"bytes,1,rep,name=vector" json:"vector,omitempty"`
}

func (m *LangpackList) Reset()                    { *m = LangpackList{} }
func (m *LangpackList) String() string            { return proto.CompactTextString(m) }
func (*LangpackList) ProtoMessage()               {}
func (*LangpackList) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{38} }

func (m *LangpackList) GetVector() []*Langpack {
	if m != nil {
		return m.Vector
	}
	return nil
}

type LangpackStrings struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LangpackStrings) Reset()                    { *m = LangpackStrings{} }
func (m *LangpackStrings) String() string            { return proto.CompactTextString(m) }
func (*LangpackStrings) ProtoMessage()               {}
func (*LangpackStrings) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{39} }

func (m *LangpackStrings) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LangpackStrings) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type LangpackStringsList struct {
	Vector []*LangpackStrings `protobuf:"bytes,1,rep,name=vector" json:"vector,omitempty"`
}

func (m *LangpackStringsList) Reset()                    { *m = LangpackStringsList{} }
func (m *LangpackStringsList) String() string            { return proto.CompactTextString(m) }
func (*LangpackStringsList) ProtoMessage()               {}
func (*LangpackStringsList) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{40} }

func (m *LangpackStringsList) GetVector() []*LangpackStrings {
	if m != nil {
		return m.Vector
	}
	return nil
}

// 获取语言包列表rpc请求
type LangPacktReq struct {
	Platform    uint32               `protobuf:"varint,1,opt,name=platform,proto3" json:"platform,omitempty"`
	LangCode    string               `protobuf:"bytes,2,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	FromVersion int32                `protobuf:"varint,3,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty"`
	Keystrings  string               `protobuf:"bytes,4,opt,name=keystrings,proto3" json:"keystrings,omitempty"`
	Type        LangPacktReq_ReqType `protobuf:"varint,5,opt,name=type,proto3,enum=infoserver.LangPacktReq_ReqType" json:"type,omitempty"`
}

func (m *LangPacktReq) Reset()                    { *m = LangPacktReq{} }
func (m *LangPacktReq) String() string            { return proto.CompactTextString(m) }
func (*LangPacktReq) ProtoMessage()               {}
func (*LangPacktReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{41} }

func (m *LangPacktReq) GetPlatform() uint32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *LangPacktReq) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *LangPacktReq) GetFromVersion() int32 {
	if m != nil {
		return m.FromVersion
	}
	return 0
}

func (m *LangPacktReq) GetKeystrings() string {
	if m != nil {
		return m.Keystrings
	}
	return ""
}

func (m *LangPacktReq) GetType() LangPacktReq_ReqType {
	if m != nil {
		return m.Type
	}
	return LangPacktReq_LangPackGetLanguages
}

// 虚拟号信息
type VirtualPhoneNumberInfo struct {
	VirtualPhone     string `protobuf:"bytes,1,opt,name=virtual_phone,json=virtualPhone,proto3" json:"virtual_phone,omitempty"`
	RealPhone        string `protobuf:"bytes,2,opt,name=real_phone,json=realPhone,proto3" json:"real_phone,omitempty"`
	Activated        uint32 `protobuf:"varint,3,opt,name=activated,proto3" json:"activated,omitempty"`
	BindTime         int64  `protobuf:"varint,4,opt,name=bind_time,json=bindTime,proto3" json:"bind_time,omitempty"`
	ActivateTime     int64  `protobuf:"varint,5,opt,name=activate_time,json=activateTime,proto3" json:"activate_time,omitempty"`
	ActivateAdminId  int32  `protobuf:"varint,6,opt,name=activate_admin_id,json=activateAdminId,proto3" json:"activate_admin_id,omitempty"`
	BindAdminId      int32  `protobuf:"varint,7,opt,name=bind_admin_id,json=bindAdminId,proto3" json:"bind_admin_id,omitempty"`
	OwnerId          int32  `protobuf:"varint,8,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	InitialPhoneCode string `protobuf:"bytes,9,opt,name=initial_phone_code,json=initialPhoneCode,proto3" json:"initial_phone_code,omitempty"`
}

func (m *VirtualPhoneNumberInfo) Reset()         { *m = VirtualPhoneNumberInfo{} }
func (m *VirtualPhoneNumberInfo) String() string { return proto.CompactTextString(m) }
func (*VirtualPhoneNumberInfo) ProtoMessage()    {}
func (*VirtualPhoneNumberInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{42}
}

func (m *VirtualPhoneNumberInfo) GetVirtualPhone() string {
	if m != nil {
		return m.VirtualPhone
	}
	return ""
}

func (m *VirtualPhoneNumberInfo) GetRealPhone() string {
	if m != nil {
		return m.RealPhone
	}
	return ""
}

func (m *VirtualPhoneNumberInfo) GetActivated() uint32 {
	if m != nil {
		return m.Activated
	}
	return 0
}

func (m *VirtualPhoneNumberInfo) GetBindTime() int64 {
	if m != nil {
		return m.BindTime
	}
	return 0
}

func (m *VirtualPhoneNumberInfo) GetActivateTime() int64 {
	if m != nil {
		return m.ActivateTime
	}
	return 0
}

func (m *VirtualPhoneNumberInfo) GetActivateAdminId() int32 {
	if m != nil {
		return m.ActivateAdminId
	}
	return 0
}

func (m *VirtualPhoneNumberInfo) GetBindAdminId() int32 {
	if m != nil {
		return m.BindAdminId
	}
	return 0
}

func (m *VirtualPhoneNumberInfo) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *VirtualPhoneNumberInfo) GetInitialPhoneCode() string {
	if m != nil {
		return m.InitialPhoneCode
	}
	return ""
}

// 虚拟号生成
type CmdVirtualPhoneNumberGenerateReq struct {
	Debug    *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	Quantity uint32        `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	AdminId  int32         `protobuf:"varint,3,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	OwnerId  int32         `protobuf:"varint,4,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (m *CmdVirtualPhoneNumberGenerateReq) Reset()         { *m = CmdVirtualPhoneNumberGenerateReq{} }
func (m *CmdVirtualPhoneNumberGenerateReq) String() string { return proto.CompactTextString(m) }
func (*CmdVirtualPhoneNumberGenerateReq) ProtoMessage()    {}
func (*CmdVirtualPhoneNumberGenerateReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{43}
}

func (m *CmdVirtualPhoneNumberGenerateReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *CmdVirtualPhoneNumberGenerateReq) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *CmdVirtualPhoneNumberGenerateReq) GetAdminId() int32 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

func (m *CmdVirtualPhoneNumberGenerateReq) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

type CmdVirtualPhoneNumberGenerateResult struct {
	Code  CmdVirtualPhoneNumberGenerateResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdVirtualPhoneNumberGenerateResult_ResultCode" json:"code,omitempty"`
	Infos []*VirtualPhoneNumberInfo                      `protobuf:"bytes,2,rep,name=infos" json:"infos,omitempty"`
}

func (m *CmdVirtualPhoneNumberGenerateResult) Reset()         { *m = CmdVirtualPhoneNumberGenerateResult{} }
func (m *CmdVirtualPhoneNumberGenerateResult) String() string { return proto.CompactTextString(m) }
func (*CmdVirtualPhoneNumberGenerateResult) ProtoMessage()    {}
func (*CmdVirtualPhoneNumberGenerateResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{44}
}

func (m *CmdVirtualPhoneNumberGenerateResult) GetCode() CmdVirtualPhoneNumberGenerateResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return CmdVirtualPhoneNumberGenerateResult_Success
}

func (m *CmdVirtualPhoneNumberGenerateResult) GetInfos() []*VirtualPhoneNumberInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

// 生成指定的虚拟号
type CmdVirtualPhoneNumberSpecialGenReq struct {
	SpecialNumber string `protobuf:"bytes,1,opt,name=special_number,json=specialNumber,proto3" json:"special_number,omitempty"`
	AdminId       int32  `protobuf:"varint,2,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	OwnerId       int32  `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (m *CmdVirtualPhoneNumberSpecialGenReq) Reset()         { *m = CmdVirtualPhoneNumberSpecialGenReq{} }
func (m *CmdVirtualPhoneNumberSpecialGenReq) String() string { return proto.CompactTextString(m) }
func (*CmdVirtualPhoneNumberSpecialGenReq) ProtoMessage()    {}
func (*CmdVirtualPhoneNumberSpecialGenReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{45}
}

func (m *CmdVirtualPhoneNumberSpecialGenReq) GetSpecialNumber() string {
	if m != nil {
		return m.SpecialNumber
	}
	return ""
}

func (m *CmdVirtualPhoneNumberSpecialGenReq) GetAdminId() int32 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

func (m *CmdVirtualPhoneNumberSpecialGenReq) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

type CmdVirtualPhoneNumberSpecialGenResult struct {
	Success bool                    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Info    *VirtualPhoneNumberInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *CmdVirtualPhoneNumberSpecialGenResult) Reset()         { *m = CmdVirtualPhoneNumberSpecialGenResult{} }
func (m *CmdVirtualPhoneNumberSpecialGenResult) String() string { return proto.CompactTextString(m) }
func (*CmdVirtualPhoneNumberSpecialGenResult) ProtoMessage()    {}
func (*CmdVirtualPhoneNumberSpecialGenResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{46}
}

func (m *CmdVirtualPhoneNumberSpecialGenResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CmdVirtualPhoneNumberSpecialGenResult) GetInfo() *VirtualPhoneNumberInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 虚拟号绑定
type CmdVirtualPhoneNumberBindRealPhoneNumberReq struct {
	Debug              *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	VirtualPhoneNumber string        `protobuf:"bytes,2,opt,name=virtual_phone_number,json=virtualPhoneNumber,proto3" json:"virtual_phone_number,omitempty"`
	RealPhoneNumber    string        `protobuf:"bytes,3,opt,name=real_phone_number,json=realPhoneNumber,proto3" json:"real_phone_number,omitempty"`
	AdminId            int32         `protobuf:"varint,4,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
}

func (m *CmdVirtualPhoneNumberBindRealPhoneNumberReq) Reset() {
	*m = CmdVirtualPhoneNumberBindRealPhoneNumberReq{}
}
func (m *CmdVirtualPhoneNumberBindRealPhoneNumberReq) String() string {
	return proto.CompactTextString(m)
}
func (*CmdVirtualPhoneNumberBindRealPhoneNumberReq) ProtoMessage() {}
func (*CmdVirtualPhoneNumberBindRealPhoneNumberReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{47}
}

func (m *CmdVirtualPhoneNumberBindRealPhoneNumberReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *CmdVirtualPhoneNumberBindRealPhoneNumberReq) GetVirtualPhoneNumber() string {
	if m != nil {
		return m.VirtualPhoneNumber
	}
	return ""
}

func (m *CmdVirtualPhoneNumberBindRealPhoneNumberReq) GetRealPhoneNumber() string {
	if m != nil {
		return m.RealPhoneNumber
	}
	return ""
}

func (m *CmdVirtualPhoneNumberBindRealPhoneNumberReq) GetAdminId() int32 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

type CmdVirtualPhoneNumberBindRealPhoneNumberResult struct {
	Code    CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode" json:"code,omitempty"`
	Current string                                                    `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (m *CmdVirtualPhoneNumberBindRealPhoneNumberResult) Reset() {
	*m = CmdVirtualPhoneNumberBindRealPhoneNumberResult{}
}
func (m *CmdVirtualPhoneNumberBindRealPhoneNumberResult) String() string {
	return proto.CompactTextString(m)
}
func (*CmdVirtualPhoneNumberBindRealPhoneNumberResult) ProtoMessage() {}
func (*CmdVirtualPhoneNumberBindRealPhoneNumberResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{48}
}

func (m *CmdVirtualPhoneNumberBindRealPhoneNumberResult) GetCode() CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return CmdVirtualPhoneNumberBindRealPhoneNumberResult_Success
}

func (m *CmdVirtualPhoneNumberBindRealPhoneNumberResult) GetCurrent() string {
	if m != nil {
		return m.Current
	}
	return ""
}

// 虚拟号解绑
type CmdVirtualPhoneNumberUnbindRealPhoneNumberReq struct {
	Debug              *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	VirtualPhoneNumber string        `protobuf:"bytes,2,opt,name=virtual_phone_number,json=virtualPhoneNumber,proto3" json:"virtual_phone_number,omitempty"`
	AdminId            int32         `protobuf:"varint,3,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
}

func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) Reset() {
	*m = CmdVirtualPhoneNumberUnbindRealPhoneNumberReq{}
}
func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) String() string {
	return proto.CompactTextString(m)
}
func (*CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) ProtoMessage() {}
func (*CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{49}
}

func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) GetVirtualPhoneNumber() string {
	if m != nil {
		return m.VirtualPhoneNumber
	}
	return ""
}

func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) GetAdminId() int32 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

type CmdVirtualPhoneNumberUnbindRealPhoneNumberResult struct {
	Code         CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode" json:"code,omitempty"`
	BeforeDelete string                                                      `protobuf:"bytes,2,opt,name=before_delete,json=beforeDelete,proto3" json:"before_delete,omitempty"`
}

func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) Reset() {
	*m = CmdVirtualPhoneNumberUnbindRealPhoneNumberResult{}
}
func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) String() string {
	return proto.CompactTextString(m)
}
func (*CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) ProtoMessage() {}
func (*CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{50}
}

func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) GetCode() CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_Success
}

func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) GetBeforeDelete() string {
	if m != nil {
		return m.BeforeDelete
	}
	return ""
}

// 虚拟号信息查询
type CmdVirtualPhoneNumberQueryInfoReq struct {
	Debug              *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	VirtualPhoneNumber string        `protobuf:"bytes,2,opt,name=virtual_phone_number,json=virtualPhoneNumber,proto3" json:"virtual_phone_number,omitempty"`
}

func (m *CmdVirtualPhoneNumberQueryInfoReq) Reset()         { *m = CmdVirtualPhoneNumberQueryInfoReq{} }
func (m *CmdVirtualPhoneNumberQueryInfoReq) String() string { return proto.CompactTextString(m) }
func (*CmdVirtualPhoneNumberQueryInfoReq) ProtoMessage()    {}
func (*CmdVirtualPhoneNumberQueryInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{51}
}

func (m *CmdVirtualPhoneNumberQueryInfoReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *CmdVirtualPhoneNumberQueryInfoReq) GetVirtualPhoneNumber() string {
	if m != nil {
		return m.VirtualPhoneNumber
	}
	return ""
}

type CmdVirtualPhoneNumberQueryInfoResult struct {
	Code CmdVirtualPhoneNumberQueryInfoResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdVirtualPhoneNumberQueryInfoResult_ResultCode" json:"code,omitempty"`
	Info *VirtualPhoneNumberInfo                         `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *CmdVirtualPhoneNumberQueryInfoResult) Reset()         { *m = CmdVirtualPhoneNumberQueryInfoResult{} }
func (m *CmdVirtualPhoneNumberQueryInfoResult) String() string { return proto.CompactTextString(m) }
func (*CmdVirtualPhoneNumberQueryInfoResult) ProtoMessage()    {}
func (*CmdVirtualPhoneNumberQueryInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{52}
}

func (m *CmdVirtualPhoneNumberQueryInfoResult) GetCode() CmdVirtualPhoneNumberQueryInfoResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return CmdVirtualPhoneNumberQueryInfoResult_Success
}

func (m *CmdVirtualPhoneNumberQueryInfoResult) GetInfo() *VirtualPhoneNumberInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 绑定服务号码
type CmdSysPhoneNumberBindRealPhoneNumberReq struct {
	Debug       *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	SysNo       string        `protobuf:"bytes,2,opt,name=sys_no,json=sysNo,proto3" json:"sys_no,omitempty"`
	PhoneNumber string        `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *CmdSysPhoneNumberBindRealPhoneNumberReq) Reset() {
	*m = CmdSysPhoneNumberBindRealPhoneNumberReq{}
}
func (m *CmdSysPhoneNumberBindRealPhoneNumberReq) String() string { return proto.CompactTextString(m) }
func (*CmdSysPhoneNumberBindRealPhoneNumberReq) ProtoMessage()    {}
func (*CmdSysPhoneNumberBindRealPhoneNumberReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{53}
}

func (m *CmdSysPhoneNumberBindRealPhoneNumberReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *CmdSysPhoneNumberBindRealPhoneNumberReq) GetSysNo() string {
	if m != nil {
		return m.SysNo
	}
	return ""
}

func (m *CmdSysPhoneNumberBindRealPhoneNumberReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type CmdSysPhoneNumberBindRealPhoneNumberResult struct {
	Code CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode" json:"code,omitempty"`
}

func (m *CmdSysPhoneNumberBindRealPhoneNumberResult) Reset() {
	*m = CmdSysPhoneNumberBindRealPhoneNumberResult{}
}
func (m *CmdSysPhoneNumberBindRealPhoneNumberResult) String() string {
	return proto.CompactTextString(m)
}
func (*CmdSysPhoneNumberBindRealPhoneNumberResult) ProtoMessage() {}
func (*CmdSysPhoneNumberBindRealPhoneNumberResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{54}
}

func (m *CmdSysPhoneNumberBindRealPhoneNumberResult) GetCode() CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return CmdSysPhoneNumberBindRealPhoneNumberResult_Success
}

// 阻止登陆
type CmdBlockSignInReq struct {
	PhoneNumbers []string `protobuf:"bytes,1,rep,name=phone_numbers,json=phoneNumbers" json:"phone_numbers,omitempty"`
}

func (m *CmdBlockSignInReq) Reset()                    { *m = CmdBlockSignInReq{} }
func (m *CmdBlockSignInReq) String() string            { return proto.CompactTextString(m) }
func (*CmdBlockSignInReq) ProtoMessage()               {}
func (*CmdBlockSignInReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{55} }

func (m *CmdBlockSignInReq) GetPhoneNumbers() []string {
	if m != nil {
		return m.PhoneNumbers
	}
	return nil
}

type CmdBlockSignInResult struct {
	Code CmdBlockSignInResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdBlockSignInResult_ResultCode" json:"code,omitempty"`
}

func (m *CmdBlockSignInResult) Reset()                    { *m = CmdBlockSignInResult{} }
func (m *CmdBlockSignInResult) String() string            { return proto.CompactTextString(m) }
func (*CmdBlockSignInResult) ProtoMessage()               {}
func (*CmdBlockSignInResult) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{56} }

func (m *CmdBlockSignInResult) GetCode() CmdBlockSignInResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return CmdBlockSignInResult_Success
}

// 接触登陆禁止
type CmdUnblockSignInReq struct {
	PhoneNumbers []string `protobuf:"bytes,1,rep,name=phone_numbers,json=phoneNumbers" json:"phone_numbers,omitempty"`
}

func (m *CmdUnblockSignInReq) Reset()                    { *m = CmdUnblockSignInReq{} }
func (m *CmdUnblockSignInReq) String() string            { return proto.CompactTextString(m) }
func (*CmdUnblockSignInReq) ProtoMessage()               {}
func (*CmdUnblockSignInReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{57} }

func (m *CmdUnblockSignInReq) GetPhoneNumbers() []string {
	if m != nil {
		return m.PhoneNumbers
	}
	return nil
}

type CmdUnblockSignInResult struct {
	Code CmdUnblockSignInResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdUnblockSignInResult_ResultCode" json:"code,omitempty"`
}

func (m *CmdUnblockSignInResult) Reset()         { *m = CmdUnblockSignInResult{} }
func (m *CmdUnblockSignInResult) String() string { return proto.CompactTextString(m) }
func (*CmdUnblockSignInResult) ProtoMessage()    {}
func (*CmdUnblockSignInResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{58}
}

func (m *CmdUnblockSignInResult) GetCode() CmdUnblockSignInResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return CmdUnblockSignInResult_Success
}

// 阻止注册
type CmdBlockSignUpReq struct {
}

func (m *CmdBlockSignUpReq) Reset()                    { *m = CmdBlockSignUpReq{} }
func (m *CmdBlockSignUpReq) String() string            { return proto.CompactTextString(m) }
func (*CmdBlockSignUpReq) ProtoMessage()               {}
func (*CmdBlockSignUpReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{59} }

type CmdBlockSignUpResult struct {
	Code CmdBlockSignUpResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdBlockSignUpResult_ResultCode" json:"code,omitempty"`
}

func (m *CmdBlockSignUpResult) Reset()                    { *m = CmdBlockSignUpResult{} }
func (m *CmdBlockSignUpResult) String() string            { return proto.CompactTextString(m) }
func (*CmdBlockSignUpResult) ProtoMessage()               {}
func (*CmdBlockSignUpResult) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{60} }

func (m *CmdBlockSignUpResult) GetCode() CmdBlockSignUpResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return CmdBlockSignUpResult_Success
}

// 解除禁止注册
type CmdUnblockSignUpReq struct {
}

func (m *CmdUnblockSignUpReq) Reset()                    { *m = CmdUnblockSignUpReq{} }
func (m *CmdUnblockSignUpReq) String() string            { return proto.CompactTextString(m) }
func (*CmdUnblockSignUpReq) ProtoMessage()               {}
func (*CmdUnblockSignUpReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{61} }

type CmdUnblockSignUpResult struct {
	Code CmdUnblockSignUpResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdUnblockSignUpResult_ResultCode" json:"code,omitempty"`
}

func (m *CmdUnblockSignUpResult) Reset()         { *m = CmdUnblockSignUpResult{} }
func (m *CmdUnblockSignUpResult) String() string { return proto.CompactTextString(m) }
func (*CmdUnblockSignUpResult) ProtoMessage()    {}
func (*CmdUnblockSignUpResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{62}
}

func (m *CmdUnblockSignUpResult) GetCode() CmdUnblockSignUpResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return CmdUnblockSignUpResult_Success
}

// 根据username 来查找具体的超级群/人的请求
type ContactRevoleUserNameReq struct {
	SelfId   int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Username string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ContactRevoleUserNameReq) Reset()         { *m = ContactRevoleUserNameReq{} }
func (m *ContactRevoleUserNameReq) String() string { return proto.CompactTextString(m) }
func (*ContactRevoleUserNameReq) ProtoMessage()    {}
func (*ContactRevoleUserNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{63}
}

func (m *ContactRevoleUserNameReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *ContactRevoleUserNameReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ContactRevoleUserNameReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 根据username 来查找具体的超级群/人的结果
type ContactRevoleUserNameResult struct {
	Uinfo   *UserInfo                              `protobuf:"bytes,1,opt,name=uinfo" json:"uinfo,omitempty"`
	Channel []byte                                 `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Code    ContactRevoleUserNameResult_ResultCode `protobuf:"varint,3,opt,name=code,proto3,enum=infoserver.ContactRevoleUserNameResult_ResultCode" json:"code,omitempty"`
}

func (m *ContactRevoleUserNameResult) Reset()         { *m = ContactRevoleUserNameResult{} }
func (m *ContactRevoleUserNameResult) String() string { return proto.CompactTextString(m) }
func (*ContactRevoleUserNameResult) ProtoMessage()    {}
func (*ContactRevoleUserNameResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{64}
}

func (m *ContactRevoleUserNameResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *ContactRevoleUserNameResult) GetChannel() []byte {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *ContactRevoleUserNameResult) GetCode() ContactRevoleUserNameResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return ContactRevoleUserNameResult_IsUser
}

// getfull user的请求
type GetFullUserReq struct {
	SelfId     int32         `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetFullUserReq) Reset()                    { *m = GetFullUserReq{} }
func (m *GetFullUserReq) String() string            { return proto.CompactTextString(m) }
func (*GetFullUserReq) ProtoMessage()               {}
func (*GetFullUserReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{65} }

func (m *GetFullUserReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetFullUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetFullUserReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetFullUserReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// getfull user的请求
type GetFullUserResult struct {
	Uinfo               *UserInfo `protobuf:"bytes,1,opt,name=uinfo" json:"uinfo,omitempty"`
	Isblocked           bool      `protobuf:"varint,2,opt,name=isblocked,proto3" json:"isblocked,omitempty"`
	PhoneCallsPrivate   bool      `protobuf:"varint,3,opt,name=phone_calls_private,json=phoneCallsPrivate,proto3" json:"phone_calls_private,omitempty"`
	PhoneCallsAvailable bool      `protobuf:"varint,4,opt,name=phone_calls_available,json=phoneCallsAvailable,proto3" json:"phone_calls_available,omitempty"`
	About               string    `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	CommonChat          int32     `protobuf:"varint,6,opt,name=common_chat,json=commonChat,proto3" json:"common_chat,omitempty"`
	Errorcode           ReErrCode `protobuf:"varint,7,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetFullUserResult) Reset()                    { *m = GetFullUserResult{} }
func (m *GetFullUserResult) String() string            { return proto.CompactTextString(m) }
func (*GetFullUserResult) ProtoMessage()               {}
func (*GetFullUserResult) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{66} }

func (m *GetFullUserResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *GetFullUserResult) GetIsblocked() bool {
	if m != nil {
		return m.Isblocked
	}
	return false
}

func (m *GetFullUserResult) GetPhoneCallsPrivate() bool {
	if m != nil {
		return m.PhoneCallsPrivate
	}
	return false
}

func (m *GetFullUserResult) GetPhoneCallsAvailable() bool {
	if m != nil {
		return m.PhoneCallsAvailable
	}
	return false
}

func (m *GetFullUserResult) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *GetFullUserResult) GetCommonChat() int32 {
	if m != nil {
		return m.CommonChat
	}
	return 0
}

func (m *GetFullUserResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type GetFullUserSimReq struct {
	SelfId     int32         `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetFullUserSimReq) Reset()                    { *m = GetFullUserSimReq{} }
func (m *GetFullUserSimReq) String() string            { return proto.CompactTextString(m) }
func (*GetFullUserSimReq) ProtoMessage()               {}
func (*GetFullUserSimReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{67} }

func (m *GetFullUserSimReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetFullUserSimReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetFullUserSimReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GetFullUserSimReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UserLocation struct {
	Country string `protobuf:"bytes,1,opt,name=Country,proto3" json:"Country,omitempty"`
	City    string `protobuf:"bytes,2,opt,name=City,proto3" json:"City,omitempty"`
	Detail  string `protobuf:"bytes,3,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (m *UserLocation) Reset()                    { *m = UserLocation{} }
func (m *UserLocation) String() string            { return proto.CompactTextString(m) }
func (*UserLocation) ProtoMessage()               {}
func (*UserLocation) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{68} }

func (m *UserLocation) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UserLocation) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UserLocation) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

type GetFullUserSimResult struct {
	Uinfo               *UserInfo     `protobuf:"bytes,1,opt,name=uinfo" json:"uinfo,omitempty"`
	Isblocked           bool          `protobuf:"varint,2,opt,name=isblocked,proto3" json:"isblocked,omitempty"`
	PhoneCallsPrivate   bool          `protobuf:"varint,3,opt,name=phone_calls_private,json=phoneCallsPrivate,proto3" json:"phone_calls_private,omitempty"`
	PhoneCallsAvailable bool          `protobuf:"varint,4,opt,name=phone_calls_available,json=phoneCallsAvailable,proto3" json:"phone_calls_available,omitempty"`
	About               string        `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	CommonChat          int32         `protobuf:"varint,6,opt,name=common_chat,json=commonChat,proto3" json:"common_chat,omitempty"`
	Gender              int32         `protobuf:"varint,7,opt,name=Gender,proto3" json:"Gender,omitempty"`
	Email               string        `protobuf:"bytes,8,opt,name=Email,proto3" json:"Email,omitempty"`
	Location            *UserLocation `protobuf:"bytes,9,opt,name=Location" json:"Location,omitempty"`
	Errorcode           ReErrCode     `protobuf:"varint,10,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`
}

func (m *GetFullUserSimResult) Reset()                    { *m = GetFullUserSimResult{} }
func (m *GetFullUserSimResult) String() string            { return proto.CompactTextString(m) }
func (*GetFullUserSimResult) ProtoMessage()               {}
func (*GetFullUserSimResult) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{69} }

func (m *GetFullUserSimResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *GetFullUserSimResult) GetIsblocked() bool {
	if m != nil {
		return m.Isblocked
	}
	return false
}

func (m *GetFullUserSimResult) GetPhoneCallsPrivate() bool {
	if m != nil {
		return m.PhoneCallsPrivate
	}
	return false
}

func (m *GetFullUserSimResult) GetPhoneCallsAvailable() bool {
	if m != nil {
		return m.PhoneCallsAvailable
	}
	return false
}

func (m *GetFullUserSimResult) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *GetFullUserSimResult) GetCommonChat() int32 {
	if m != nil {
		return m.CommonChat
	}
	return 0
}

func (m *GetFullUserSimResult) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *GetFullUserSimResult) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GetFullUserSimResult) GetLocation() *UserLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GetFullUserSimResult) GetErrorcode() ReErrCode {
	if m != nil {
		return m.Errorcode
	}
	return ReErrCode_Success
}

type AuthSignUpPasswordReq struct {
	Base    *SignUpReq `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	PwdHash string     `protobuf:"bytes,2,opt,name=pwd_hash,json=pwdHash,proto3" json:"pwd_hash,omitempty"`
}

func (m *AuthSignUpPasswordReq) Reset()         { *m = AuthSignUpPasswordReq{} }
func (m *AuthSignUpPasswordReq) String() string { return proto.CompactTextString(m) }
func (*AuthSignUpPasswordReq) ProtoMessage()    {}
func (*AuthSignUpPasswordReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{70}
}

func (m *AuthSignUpPasswordReq) GetBase() *SignUpReq {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *AuthSignUpPasswordReq) GetPwdHash() string {
	if m != nil {
		return m.PwdHash
	}
	return ""
}

type AuthSignUpPasswordResult struct {
	UserInfo *UserInfo                     `protobuf:"bytes,1,opt,name=user_info,json=userInfo" json:"user_info,omitempty"`
	Code     AuthSignUpPasswordResult_Code `protobuf:"varint,2,opt,name=code,proto3,enum=infoserver.AuthSignUpPasswordResult_Code" json:"code,omitempty"`
}

func (m *AuthSignUpPasswordResult) Reset()         { *m = AuthSignUpPasswordResult{} }
func (m *AuthSignUpPasswordResult) String() string { return proto.CompactTextString(m) }
func (*AuthSignUpPasswordResult) ProtoMessage()    {}
func (*AuthSignUpPasswordResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{71}
}

func (m *AuthSignUpPasswordResult) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *AuthSignUpPasswordResult) GetCode() AuthSignUpPasswordResult_Code {
	if m != nil {
		return m.Code
	}
	return AuthSignUpPasswordResult_Success
}

type AuthSignInPasswordReq struct {
	Base    *SignInReq `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	PwdHash string     `protobuf:"bytes,2,opt,name=pwd_hash,json=pwdHash,proto3" json:"pwd_hash,omitempty"`
}

func (m *AuthSignInPasswordReq) Reset()         { *m = AuthSignInPasswordReq{} }
func (m *AuthSignInPasswordReq) String() string { return proto.CompactTextString(m) }
func (*AuthSignInPasswordReq) ProtoMessage()    {}
func (*AuthSignInPasswordReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{72}
}

func (m *AuthSignInPasswordReq) GetBase() *SignInReq {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *AuthSignInPasswordReq) GetPwdHash() string {
	if m != nil {
		return m.PwdHash
	}
	return ""
}

type AuthSignInPasswordResult struct {
	UserInfo *UserInfo                     `protobuf:"bytes,1,opt,name=user_info,json=userInfo" json:"user_info,omitempty"`
	Code     AuthSignInPasswordResult_Code `protobuf:"varint,2,opt,name=code,proto3,enum=infoserver.AuthSignInPasswordResult_Code" json:"code,omitempty"`
}

func (m *AuthSignInPasswordResult) Reset()         { *m = AuthSignInPasswordResult{} }
func (m *AuthSignInPasswordResult) String() string { return proto.CompactTextString(m) }
func (*AuthSignInPasswordResult) ProtoMessage()    {}
func (*AuthSignInPasswordResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{73}
}

func (m *AuthSignInPasswordResult) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *AuthSignInPasswordResult) GetCode() AuthSignInPasswordResult_Code {
	if m != nil {
		return m.Code
	}
	return AuthSignInPasswordResult_Success
}

type AccountResetPasswordReq struct {
	PhoneNumber    string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Forget         bool   `protobuf:"varint,2,opt,name=forget,proto3" json:"forget,omitempty"`
	PhoneCode      string `protobuf:"bytes,3,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
	CurrentPwdHash string `protobuf:"bytes,4,opt,name=current_pwd_hash,json=currentPwdHash,proto3" json:"current_pwd_hash,omitempty"`
	NewPwdHash     string `protobuf:"bytes,5,opt,name=new_pwd_hash,json=newPwdHash,proto3" json:"new_pwd_hash,omitempty"`
	KeyId          int64  `protobuf:"varint,6,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	PhoneCodeHash  string `protobuf:"bytes,7,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
}

func (m *AccountResetPasswordReq) Reset()         { *m = AccountResetPasswordReq{} }
func (m *AccountResetPasswordReq) String() string { return proto.CompactTextString(m) }
func (*AccountResetPasswordReq) ProtoMessage()    {}
func (*AccountResetPasswordReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{74}
}

func (m *AccountResetPasswordReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *AccountResetPasswordReq) GetForget() bool {
	if m != nil {
		return m.Forget
	}
	return false
}

func (m *AccountResetPasswordReq) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *AccountResetPasswordReq) GetCurrentPwdHash() string {
	if m != nil {
		return m.CurrentPwdHash
	}
	return ""
}

func (m *AccountResetPasswordReq) GetNewPwdHash() string {
	if m != nil {
		return m.NewPwdHash
	}
	return ""
}

func (m *AccountResetPasswordReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *AccountResetPasswordReq) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

type AccountResetPasswordResult struct {
	Code AccountResetPasswordResult_Code `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.AccountResetPasswordResult_Code" json:"code,omitempty"`
}

func (m *AccountResetPasswordResult) Reset()         { *m = AccountResetPasswordResult{} }
func (m *AccountResetPasswordResult) String() string { return proto.CompactTextString(m) }
func (*AccountResetPasswordResult) ProtoMessage()    {}
func (*AccountResetPasswordResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{75}
}

func (m *AccountResetPasswordResult) GetCode() AccountResetPasswordResult_Code {
	if m != nil {
		return m.Code
	}
	return AccountResetPasswordResult_Success
}

type CheckDeviceBanReq struct {
	UniqueNumber string `protobuf:"bytes,1,opt,name=unique_number,json=uniqueNumber,proto3" json:"unique_number,omitempty"`
	KeyId        uint64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (m *CheckDeviceBanReq) Reset()                    { *m = CheckDeviceBanReq{} }
func (m *CheckDeviceBanReq) String() string            { return proto.CompactTextString(m) }
func (*CheckDeviceBanReq) ProtoMessage()               {}
func (*CheckDeviceBanReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{76} }

func (m *CheckDeviceBanReq) GetUniqueNumber() string {
	if m != nil {
		return m.UniqueNumber
	}
	return ""
}

func (m *CheckDeviceBanReq) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

type CheckDeviceBanResult struct {
	Banned bool `protobuf:"varint,1,opt,name=banned,proto3" json:"banned,omitempty"`
}

func (m *CheckDeviceBanResult) Reset()                    { *m = CheckDeviceBanResult{} }
func (m *CheckDeviceBanResult) String() string            { return proto.CompactTextString(m) }
func (*CheckDeviceBanResult) ProtoMessage()               {}
func (*CheckDeviceBanResult) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{77} }

func (m *CheckDeviceBanResult) GetBanned() bool {
	if m != nil {
		return m.Banned
	}
	return false
}

type HeartbeatReq struct {
}

func (m *HeartbeatReq) Reset()                    { *m = HeartbeatReq{} }
func (m *HeartbeatReq) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatReq) ProtoMessage()               {}
func (*HeartbeatReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{78} }

type HeartbeatResult struct {
}

func (m *HeartbeatResult) Reset()                    { *m = HeartbeatResult{} }
func (m *HeartbeatResult) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatResult) ProtoMessage()               {}
func (*HeartbeatResult) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{79} }

type QueryDebugingUserIDReq struct {
}

func (m *QueryDebugingUserIDReq) Reset()         { *m = QueryDebugingUserIDReq{} }
func (m *QueryDebugingUserIDReq) String() string { return proto.CompactTextString(m) }
func (*QueryDebugingUserIDReq) ProtoMessage()    {}
func (*QueryDebugingUserIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{80}
}

type QueryDebugingUserIDResult struct {
	UserIdList []int32 `protobuf:"varint,1,rep,packed,name=user_id_list,json=userIdList" json:"user_id_list,omitempty"`
}

func (m *QueryDebugingUserIDResult) Reset()         { *m = QueryDebugingUserIDResult{} }
func (m *QueryDebugingUserIDResult) String() string { return proto.CompactTextString(m) }
func (*QueryDebugingUserIDResult) ProtoMessage()    {}
func (*QueryDebugingUserIDResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{81}
}

func (m *QueryDebugingUserIDResult) GetUserIdList() []int32 {
	if m != nil {
		return m.UserIdList
	}
	return nil
}

// 根据UserName来获取用户信息或者群信息请求
type GetUserChannelByUserNameReq struct {
	SelfId   int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Username string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetUserChannelByUserNameReq) Reset()         { *m = GetUserChannelByUserNameReq{} }
func (m *GetUserChannelByUserNameReq) String() string { return proto.CompactTextString(m) }
func (*GetUserChannelByUserNameReq) ProtoMessage()    {}
func (*GetUserChannelByUserNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{82}
}

func (m *GetUserChannelByUserNameReq) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GetUserChannelByUserNameReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetUserChannelByUserNameReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 根据UserName来获取用户信息或者群信息返回
type GetUserChannelByUserNameResult struct {
	Uinfo       *UserInfo                                `protobuf:"bytes,1,opt,name=Uinfo" json:"Uinfo,omitempty"`
	ChannelInfo []byte                                   `protobuf:"bytes,2,opt,name=channelInfo,proto3" json:"channelInfo,omitempty"`
	Type        int32                                    `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Errcode     GetUserChannelByUserNameResult_ErrorCode `protobuf:"varint,4,opt,name=errcode,proto3,enum=infoserver.GetUserChannelByUserNameResult_ErrorCode" json:"errcode,omitempty"`
}

func (m *GetUserChannelByUserNameResult) Reset()         { *m = GetUserChannelByUserNameResult{} }
func (m *GetUserChannelByUserNameResult) String() string { return proto.CompactTextString(m) }
func (*GetUserChannelByUserNameResult) ProtoMessage()    {}
func (*GetUserChannelByUserNameResult) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{83}
}

func (m *GetUserChannelByUserNameResult) GetUinfo() *UserInfo {
	if m != nil {
		return m.Uinfo
	}
	return nil
}

func (m *GetUserChannelByUserNameResult) GetChannelInfo() []byte {
	if m != nil {
		return m.ChannelInfo
	}
	return nil
}

func (m *GetUserChannelByUserNameResult) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *GetUserChannelByUserNameResult) GetErrcode() GetUserChannelByUserNameResult_ErrorCode {
	if m != nil {
		return m.Errcode
	}
	return GetUserChannelByUserNameResult_Success
}

// 根据电话号码删除当前所有端的authkey
type DeleteAuthKeysReq struct {
	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *DeleteAuthKeysReq) Reset()                    { *m = DeleteAuthKeysReq{} }
func (m *DeleteAuthKeysReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteAuthKeysReq) ProtoMessage()               {}
func (*DeleteAuthKeysReq) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{84} }

func (m *DeleteAuthKeysReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type DeleteAuthKeysResult struct {
	KeyId []int64 `protobuf:"varint,1,rep,packed,name=key_id,json=keyId" json:"key_id,omitempty"`
}

func (m *DeleteAuthKeysResult) Reset()                    { *m = DeleteAuthKeysResult{} }
func (m *DeleteAuthKeysResult) String() string            { return proto.CompactTextString(m) }
func (*DeleteAuthKeysResult) ProtoMessage()               {}
func (*DeleteAuthKeysResult) Descriptor() ([]byte, []int) { return fileDescriptorInfoserver, []int{85} }

func (m *DeleteAuthKeysResult) GetKeyId() []int64 {
	if m != nil {
		return m.KeyId
	}
	return nil
}

// 更改电话号码发送短信的接口
type SendSetPasswordPhoneCodeReq struct {
	PhoneNumber string        `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId       int64         `protobuf:"varint,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
	CountryCode string        `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LocalPhone  string        `protobuf:"bytes,6,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`
}

func (m *SendSetPasswordPhoneCodeReq) Reset()         { *m = SendSetPasswordPhoneCodeReq{} }
func (m *SendSetPasswordPhoneCodeReq) String() string { return proto.CompactTextString(m) }
func (*SendSetPasswordPhoneCodeReq) ProtoMessage()    {}
func (*SendSetPasswordPhoneCodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptorInfoserver, []int{86}
}

func (m *SendSetPasswordPhoneCodeReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *SendSetPasswordPhoneCodeReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SendSetPasswordPhoneCodeReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SendSetPasswordPhoneCodeReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *SendSetPasswordPhoneCodeReq) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *SendSetPasswordPhoneCodeReq) GetLocalPhone() string {
	if m != nil {
		return m.LocalPhone
	}
	return ""
}

func init() {
	proto.RegisterType((*SendCodeReq)(nil), "infoserver.sendCodeReq")
	proto.RegisterType((*SendCodeResult)(nil), "infoserver.SendCodeResult")
	proto.RegisterType((*SendChangePhoneCodeReq)(nil), "infoserver.sendChangePhoneCodeReq")
	proto.RegisterType((*SignInReq)(nil), "infoserver.SignInReq")
	proto.RegisterType((*SignInOrReqitsterResult)(nil), "infoserver.SignInOrReqitsterResult")
	proto.RegisterType((*SignUpReq)(nil), "infoserver.SignUpReq")
	proto.RegisterType((*AuthSignUpResult)(nil), "infoserver.AuthSignUpResult")
	proto.RegisterType((*ChangePhoneReq)(nil), "infoserver.ChangePhoneReq")
	proto.RegisterType((*ChangePhoneResult)(nil), "infoserver.ChangePhoneResult")
	proto.RegisterType((*AuthCheckPasswdReq)(nil), "infoserver.AuthCheckPasswdReq")
	proto.RegisterType((*AuthCheckPasswdResult)(nil), "infoserver.AuthCheckPasswdResult")
	proto.RegisterType((*AuthImportAuthorizationReq)(nil), "infoserver.AuthImportAuthorizationReq")
	proto.RegisterType((*AuthImportAuthorizationResult)(nil), "infoserver.AuthImportAuthorizationResult")
	proto.RegisterType((*AuthExportAuthorizationReq)(nil), "infoserver.AuthExportAuthorizationReq")
	proto.RegisterType((*AuthExportAuthorizationResult)(nil), "infoserver.AuthExportAuthorizationResult")
	proto.RegisterType((*AuthRecoverPasswdReq)(nil), "infoserver.AuthRecoverPasswdReq")
	proto.RegisterType((*AuthRecoverPasswdResult)(nil), "infoserver.AuthRecoverPasswdResult")
	proto.RegisterType((*ContactsSearchReq)(nil), "infoserver.ContactsSearchReq")
	proto.RegisterType((*ContactsSearcResult)(nil), "infoserver.ContactsSearcResult")
	proto.RegisterType((*AuthRequestPasswordRecoveryReq)(nil), "infoserver.AuthRequestPasswordRecoveryReq")
	proto.RegisterType((*AuthRequestPasswordRecoveryResult)(nil), "infoserver.AuthRequestPasswordRecoveryResult")
	proto.RegisterType((*PhonecallSessionInformation)(nil), "infoserver.PhonecallSessionInformation")
	proto.RegisterType((*PhonecallEndpointInformation)(nil), "infoserver.PhonecallEndpointInformation")
	proto.RegisterType((*PhonecallAllocSessionReq)(nil), "infoserver.PhonecallAllocSessionReq")
	proto.RegisterType((*PhonecallAllocSessionResult)(nil), "infoserver.PhonecallAllocSessionResult")
	proto.RegisterType((*PhonecallOnReceivedCallCheckReq)(nil), "infoserver.PhonecallOnReceivedCallCheckReq")
	proto.RegisterType((*PhonecallOnReceivedCallCheckResult)(nil), "infoserver.PhonecallOnReceivedCallCheckResult")
	proto.RegisterType((*PhonecallOnAcceptCallUpdateReq)(nil), "infoserver.PhonecallOnAcceptCallUpdateReq")
	proto.RegisterType((*PhonecallOnAcceptCallUpdateResult)(nil), "infoserver.PhonecallOnAcceptCallUpdateResult")
	proto.RegisterType((*PhonecallOnConfirmCallUpdateReq)(nil), "infoserver.PhonecallOnConfirmCallUpdateReq")
	proto.RegisterType((*PhonecallOnConfirmCallUpdateResult)(nil), "infoserver.PhonecallOnConfirmCallUpdateResult")
	proto.RegisterType((*PhonecallOnDiscardCallUpdateReq)(nil), "infoserver.PhonecallOnDiscardCallUpdateReq")
	proto.RegisterType((*PhonecallOnDiscardCallUpdateResult)(nil), "infoserver.PhonecallOnDiscardCallUpdateResult")
	proto.RegisterType((*PhonecallQueryEndpointsReq)(nil), "infoserver.PhonecallQueryEndpointsReq")
	proto.RegisterType((*PhonecallQueryEndpointsResult)(nil), "infoserver.PhonecallQueryEndpointsResult")
	proto.RegisterType((*AuthCancelCodeReq)(nil), "infoserver.AuthCancelCodeReq")
	proto.RegisterType((*AuthCancelCodeResult)(nil), "infoserver.AuthCancelCodeResult")
	proto.RegisterType((*Langpack)(nil), "infoserver.Langpack")
	proto.RegisterType((*LangpackList)(nil), "infoserver.LangpackList")
	proto.RegisterType((*LangpackStrings)(nil), "infoserver.LangpackStrings")
	proto.RegisterType((*LangpackStringsList)(nil), "infoserver.LangpackStringsList")
	proto.RegisterType((*LangPacktReq)(nil), "infoserver.LangPacktReq")
	proto.RegisterType((*VirtualPhoneNumberInfo)(nil), "infoserver.VirtualPhoneNumberInfo")
	proto.RegisterType((*CmdVirtualPhoneNumberGenerateReq)(nil), "infoserver.CmdVirtualPhoneNumberGenerateReq")
	proto.RegisterType((*CmdVirtualPhoneNumberGenerateResult)(nil), "infoserver.CmdVirtualPhoneNumberGenerateResult")
	proto.RegisterType((*CmdVirtualPhoneNumberSpecialGenReq)(nil), "infoserver.CmdVirtualPhoneNumberSpecialGenReq")
	proto.RegisterType((*CmdVirtualPhoneNumberSpecialGenResult)(nil), "infoserver.CmdVirtualPhoneNumberSpecialGenResult")
	proto.RegisterType((*CmdVirtualPhoneNumberBindRealPhoneNumberReq)(nil), "infoserver.CmdVirtualPhoneNumberBindRealPhoneNumberReq")
	proto.RegisterType((*CmdVirtualPhoneNumberBindRealPhoneNumberResult)(nil), "infoserver.CmdVirtualPhoneNumberBindRealPhoneNumberResult")
	proto.RegisterType((*CmdVirtualPhoneNumberUnbindRealPhoneNumberReq)(nil), "infoserver.CmdVirtualPhoneNumberUnbindRealPhoneNumberReq")
	proto.RegisterType((*CmdVirtualPhoneNumberUnbindRealPhoneNumberResult)(nil), "infoserver.CmdVirtualPhoneNumberUnbindRealPhoneNumberResult")
	proto.RegisterType((*CmdVirtualPhoneNumberQueryInfoReq)(nil), "infoserver.CmdVirtualPhoneNumberQueryInfoReq")
	proto.RegisterType((*CmdVirtualPhoneNumberQueryInfoResult)(nil), "infoserver.CmdVirtualPhoneNumberQueryInfoResult")
	proto.RegisterType((*CmdSysPhoneNumberBindRealPhoneNumberReq)(nil), "infoserver.CmdSysPhoneNumberBindRealPhoneNumberReq")
	proto.RegisterType((*CmdSysPhoneNumberBindRealPhoneNumberResult)(nil), "infoserver.CmdSysPhoneNumberBindRealPhoneNumberResult")
	proto.RegisterType((*CmdBlockSignInReq)(nil), "infoserver.CmdBlockSignInReq")
	proto.RegisterType((*CmdBlockSignInResult)(nil), "infoserver.CmdBlockSignInResult")
	proto.RegisterType((*CmdUnblockSignInReq)(nil), "infoserver.CmdUnblockSignInReq")
	proto.RegisterType((*CmdUnblockSignInResult)(nil), "infoserver.CmdUnblockSignInResult")
	proto.RegisterType((*CmdBlockSignUpReq)(nil), "infoserver.CmdBlockSignUpReq")
	proto.RegisterType((*CmdBlockSignUpResult)(nil), "infoserver.CmdBlockSignUpResult")
	proto.RegisterType((*CmdUnblockSignUpReq)(nil), "infoserver.CmdUnblockSignUpReq")
	proto.RegisterType((*CmdUnblockSignUpResult)(nil), "infoserver.CmdUnblockSignUpResult")
	proto.RegisterType((*ContactRevoleUserNameReq)(nil), "infoserver.ContactRevoleUserNameReq")
	proto.RegisterType((*ContactRevoleUserNameResult)(nil), "infoserver.ContactRevoleUserNameResult")
	proto.RegisterType((*GetFullUserReq)(nil), "infoserver.GetFullUserReq")
	proto.RegisterType((*GetFullUserResult)(nil), "infoserver.GetFullUserResult")
	proto.RegisterType((*GetFullUserSimReq)(nil), "infoserver.GetFullUserSimReq")
	proto.RegisterType((*UserLocation)(nil), "infoserver.UserLocation")
	proto.RegisterType((*GetFullUserSimResult)(nil), "infoserver.GetFullUserSimResult")
	proto.RegisterType((*AuthSignUpPasswordReq)(nil), "infoserver.AuthSignUpPasswordReq")
	proto.RegisterType((*AuthSignUpPasswordResult)(nil), "infoserver.AuthSignUpPasswordResult")
	proto.RegisterType((*AuthSignInPasswordReq)(nil), "infoserver.AuthSignInPasswordReq")
	proto.RegisterType((*AuthSignInPasswordResult)(nil), "infoserver.AuthSignInPasswordResult")
	proto.RegisterType((*AccountResetPasswordReq)(nil), "infoserver.AccountResetPasswordReq")
	proto.RegisterType((*AccountResetPasswordResult)(nil), "infoserver.AccountResetPasswordResult")
	proto.RegisterType((*CheckDeviceBanReq)(nil), "infoserver.CheckDeviceBanReq")
	proto.RegisterType((*CheckDeviceBanResult)(nil), "infoserver.CheckDeviceBanResult")
	proto.RegisterType((*HeartbeatReq)(nil), "infoserver.HeartbeatReq")
	proto.RegisterType((*HeartbeatResult)(nil), "infoserver.HeartbeatResult")
	proto.RegisterType((*QueryDebugingUserIDReq)(nil), "infoserver.QueryDebugingUserIDReq")
	proto.RegisterType((*QueryDebugingUserIDResult)(nil), "infoserver.QueryDebugingUserIDResult")
	proto.RegisterType((*GetUserChannelByUserNameReq)(nil), "infoserver.GetUserChannelByUserNameReq")
	proto.RegisterType((*GetUserChannelByUserNameResult)(nil), "infoserver.GetUserChannelByUserNameResult")
	proto.RegisterType((*DeleteAuthKeysReq)(nil), "infoserver.DeleteAuthKeysReq")
	proto.RegisterType((*DeleteAuthKeysResult)(nil), "infoserver.DeleteAuthKeysResult")
	proto.RegisterType((*SendSetPasswordPhoneCodeReq)(nil), "infoserver.sendSetPasswordPhoneCodeReq")
	proto.RegisterEnum("infoserver.CodeType", CodeType_name, CodeType_value)
	proto.RegisterEnum("infoserver.SendCodeResult_ResultCode", SendCodeResult_ResultCode_name, SendCodeResult_ResultCode_value)
	proto.RegisterEnum("infoserver.SignInOrReqitsterResult_ResultCode", SignInOrReqitsterResult_ResultCode_name, SignInOrReqitsterResult_ResultCode_value)
	proto.RegisterEnum("infoserver.AuthSignUpResult_ResultCode", AuthSignUpResult_ResultCode_name, AuthSignUpResult_ResultCode_value)
	proto.RegisterEnum("infoserver.ChangePhoneResult_ResultCode", ChangePhoneResult_ResultCode_name, ChangePhoneResult_ResultCode_value)
	proto.RegisterEnum("infoserver.AuthCheckPasswdResult_ResultCode", AuthCheckPasswdResult_ResultCode_name, AuthCheckPasswdResult_ResultCode_value)
	proto.RegisterEnum("infoserver.AuthImportAuthorizationResult_ResultCode", AuthImportAuthorizationResult_ResultCode_name, AuthImportAuthorizationResult_ResultCode_value)
	proto.RegisterEnum("infoserver.AuthExportAuthorizationResult_ResultCode", AuthExportAuthorizationResult_ResultCode_name, AuthExportAuthorizationResult_ResultCode_value)
	proto.RegisterEnum("infoserver.AuthRecoverPasswdResult_ResultCode", AuthRecoverPasswdResult_ResultCode_name, AuthRecoverPasswdResult_ResultCode_value)
	proto.RegisterEnum("infoserver.ContactsSearcResult_ResultCode", ContactsSearcResult_ResultCode_name, ContactsSearcResult_ResultCode_value)
	proto.RegisterEnum("infoserver.AuthRequestPasswordRecoveryResult_ResultCode", AuthRequestPasswordRecoveryResult_ResultCode_name, AuthRequestPasswordRecoveryResult_ResultCode_value)
	proto.RegisterEnum("infoserver.PhonecallAllocSessionResult_ResultCode", PhonecallAllocSessionResult_ResultCode_name, PhonecallAllocSessionResult_ResultCode_value)
	proto.RegisterEnum("infoserver.PhonecallOnReceivedCallCheckResult_ResultCode", PhonecallOnReceivedCallCheckResult_ResultCode_name, PhonecallOnReceivedCallCheckResult_ResultCode_value)
	proto.RegisterEnum("infoserver.PhonecallOnAcceptCallUpdateResult_ResultCode", PhonecallOnAcceptCallUpdateResult_ResultCode_name, PhonecallOnAcceptCallUpdateResult_ResultCode_value)
	proto.RegisterEnum("infoserver.PhonecallOnConfirmCallUpdateResult_ResultCode", PhonecallOnConfirmCallUpdateResult_ResultCode_name, PhonecallOnConfirmCallUpdateResult_ResultCode_value)
	proto.RegisterEnum("infoserver.PhonecallOnDiscardCallUpdateResult_ResultCode", PhonecallOnDiscardCallUpdateResult_ResultCode_name, PhonecallOnDiscardCallUpdateResult_ResultCode_value)
	proto.RegisterEnum("infoserver.PhonecallQueryEndpointsResult_ResultCode", PhonecallQueryEndpointsResult_ResultCode_name, PhonecallQueryEndpointsResult_ResultCode_value)
	proto.RegisterEnum("infoserver.LangPacktReq_ReqType", LangPacktReq_ReqType_name, LangPacktReq_ReqType_value)
	proto.RegisterEnum("infoserver.CmdVirtualPhoneNumberGenerateResult_ResultCode", CmdVirtualPhoneNumberGenerateResult_ResultCode_name, CmdVirtualPhoneNumberGenerateResult_ResultCode_value)
	proto.RegisterEnum("infoserver.CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode", CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode_name, CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode_value)
	proto.RegisterEnum("infoserver.CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode", CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode_name, CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode_value)
	proto.RegisterEnum("infoserver.CmdVirtualPhoneNumberQueryInfoResult_ResultCode", CmdVirtualPhoneNumberQueryInfoResult_ResultCode_name, CmdVirtualPhoneNumberQueryInfoResult_ResultCode_value)
	proto.RegisterEnum("infoserver.CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode", CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode_name, CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode_value)
	proto.RegisterEnum("infoserver.CmdBlockSignInResult_ResultCode", CmdBlockSignInResult_ResultCode_name, CmdBlockSignInResult_ResultCode_value)
	proto.RegisterEnum("infoserver.CmdUnblockSignInResult_ResultCode", CmdUnblockSignInResult_ResultCode_name, CmdUnblockSignInResult_ResultCode_value)
	proto.RegisterEnum("infoserver.CmdBlockSignUpResult_ResultCode", CmdBlockSignUpResult_ResultCode_name, CmdBlockSignUpResult_ResultCode_value)
	proto.RegisterEnum("infoserver.CmdUnblockSignUpResult_ResultCode", CmdUnblockSignUpResult_ResultCode_name, CmdUnblockSignUpResult_ResultCode_value)
	proto.RegisterEnum("infoserver.ContactRevoleUserNameResult_ResultCode", ContactRevoleUserNameResult_ResultCode_name, ContactRevoleUserNameResult_ResultCode_value)
	proto.RegisterEnum("infoserver.AuthSignUpPasswordResult_Code", AuthSignUpPasswordResult_Code_name, AuthSignUpPasswordResult_Code_value)
	proto.RegisterEnum("infoserver.AuthSignInPasswordResult_Code", AuthSignInPasswordResult_Code_name, AuthSignInPasswordResult_Code_value)
	proto.RegisterEnum("infoserver.AccountResetPasswordResult_Code", AccountResetPasswordResult_Code_name, AccountResetPasswordResult_Code_value)
	proto.RegisterEnum("infoserver.GetUserChannelByUserNameResult_ErrorCode", GetUserChannelByUserNameResult_ErrorCode_name, GetUserChannelByUserNameResult_ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for InfoServerService service

type InfoServerServiceClient interface {
	// 发送短信验证码的接口(yuankan)
	SendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error)
	// resendcode的接口（目前处理的是直接发送短信验证码）(yuankan)
	ReSendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error)
	// 更改电话号码的发送短信(yuankan)
	SendChangePhoneCode(ctx context.Context, in *SendChangePhoneCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error)
	// 登录接口(yuankan和lxl)
	AuthSignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInOrReqitsterResult, error)
	// 注册用户的接口(yuankan和lxl)
	AuthSignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*AuthSignUpResult, error)
	// 更改电话号码的接口(yuankan和lxl)
	AccountChangePhone(ctx context.Context, in *ChangePhoneReq, opts ...grpc.CallOption) (*ChangePhoneResult, error)
	// 校验两步验证的密码(yuankan)
	AuthCheckPassWord(ctx context.Context, in *AuthCheckPasswdReq, opts ...grpc.CallOption) (*AuthCheckPasswdResult, error)
	// i导入authr (yuankan )
	AuthImPortAuthorizion(ctx context.Context, in *AuthImportAuthorizationReq, opts ...grpc.CallOption) (*AuthImportAuthorizationResult, error)
	// 导出auth
	AuthExportAuthorization(ctx context.Context, in *AuthExportAuthorizationReq, opts ...grpc.CallOption) (*AuthExportAuthorizationResult, error)
	// 恢复量保护验证的密码
	AuthRecoverPassword(ctx context.Context, in *AuthRecoverPasswdReq, opts ...grpc.CallOption) (*AuthRecoverPasswdResult, error)
	// 根据Username搜索人或者超级群、频道(lxl\tanyuzhou)
	ContactsSearch(ctx context.Context, in *ContactsSearchReq, opts ...grpc.CallOption) (*ContactsSearcResult, error)
	// getfulluser
	GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error)
	// 根据userName 来查找具体的人或者超级群
	ContactRevoleUserName(ctx context.Context, in *ContactRevoleUserNameReq, opts ...grpc.CallOption) (*ContactRevoleUserNameResult, error)
	// 忘记两步验证密码(yuankan)
	AuthRequestPasswordRecovery(ctx context.Context, in *AuthRequestPasswordRecoveryReq, opts ...grpc.CallOption) (*AuthRequestPasswordRecoveryResult, error)
	// 电话功能 对应的每一个步骤名称
	PhonecallAllocSession(ctx context.Context, in *PhonecallAllocSessionReq, opts ...grpc.CallOption) (*PhonecallAllocSessionResult, error)
	PhonecallOnReceivedCallCheck(ctx context.Context, in *PhonecallOnReceivedCallCheckReq, opts ...grpc.CallOption) (*PhonecallOnReceivedCallCheckResult, error)
	PhonecallOnAcceptCallUpdate(ctx context.Context, in *PhonecallOnAcceptCallUpdateReq, opts ...grpc.CallOption) (*PhonecallOnAcceptCallUpdateResult, error)
	PhonecallOnConfirmCallUpdate(ctx context.Context, in *PhonecallOnConfirmCallUpdateReq, opts ...grpc.CallOption) (*PhonecallOnConfirmCallUpdateResult, error)
	PhonecallOnDiscardCallUpdate(ctx context.Context, in *PhonecallOnDiscardCallUpdateReq, opts ...grpc.CallOption) (*PhonecallOnDiscardCallUpdateResult, error)
	PhonecallQueryEndpoints(ctx context.Context, in *PhonecallQueryEndpointsReq, opts ...grpc.CallOption) (*PhonecallQueryEndpointsResult, error)
	// 取消验证码
	AuthCancelCode(ctx context.Context, in *AuthCancelCodeReq, opts ...grpc.CallOption) (*AuthCancelCodeResult, error)
	// 虚拟号摇号
	CmdVirtualPhoneNumberGenerate(ctx context.Context, in *CmdVirtualPhoneNumberGenerateReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberGenerateResult, error)
	// 虚拟号激活指定的号
	CmdVirtualPhoneNumberSpecialGen(ctx context.Context, in *CmdVirtualPhoneNumberSpecialGenReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberSpecialGenResult, error)
	// 虚拟号绑定
	CmdVirtualPhoneNumberBindRealPhoneNumber(ctx context.Context, in *CmdVirtualPhoneNumberBindRealPhoneNumberReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberBindRealPhoneNumberResult, error)
	// 虚拟号解绑
	CmdVirtualPhoneNumberUnbindRealPhoneNumber(ctx context.Context, in *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberUnbindRealPhoneNumberResult, error)
	// 虚拟号信息查询
	CmdVirtualPhoneNumberQueryInfo(ctx context.Context, in *CmdVirtualPhoneNumberQueryInfoReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberQueryInfoResult, error)
	// 服务号绑定电话号码
	CmdSysPhoneNumberBindRealPhoneNumber(ctx context.Context, in *CmdSysPhoneNumberBindRealPhoneNumberReq, opts ...grpc.CallOption) (*CmdSysPhoneNumberBindRealPhoneNumberResult, error)
	// 阻止登陆
	CmdBlockSignIn(ctx context.Context, in *CmdBlockSignInReq, opts ...grpc.CallOption) (*CmdBlockSignInResult, error)
	// 解除禁止登陆
	CmdUnblockSignIn(ctx context.Context, in *CmdUnblockSignInReq, opts ...grpc.CallOption) (*CmdUnblockSignInResult, error)
	// 阻止注册
	CmdBlockSignUp(ctx context.Context, in *CmdBlockSignUpReq, opts ...grpc.CallOption) (*CmdBlockSignUpResult, error)
	// 解除禁止注册
	CmdUnblockSignUp(ctx context.Context, in *CmdUnblockSignUpReq, opts ...grpc.CallOption) (*CmdUnblockSignUpResult, error)
	// 语言包列表查询
	LangpackGetLanguages(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*LangpackList, error)
	// 语音包详细查询
	LangpackGetLangPack(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*Langpack, error)
	// 语言包修改确认提示语查询
	LangpackGetStrings(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*LangpackStringsList, error)
	// 语言包版本对比
	LangpackGetDifference(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*Langpack, error)
	// 根据UserName来获取用户信息或者群信息
	GetUserChannelByUserName(ctx context.Context, in *GetUserChannelByUserNameReq, opts ...grpc.CallOption) (*GetUserChannelByUserNameResult, error)
	// 删除电话号码当前所有authkey
	DeleteAuthKeys(ctx context.Context, in *DeleteAuthKeysReq, opts ...grpc.CallOption) (*DeleteAuthKeysResult, error)
	// get all useid in debuging
	QueryDebugingUserID(ctx context.Context, in *QueryDebugingUserIDReq, opts ...grpc.CallOption) (*QueryDebugingUserIDResult, error)
	// heartbeat
	Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatResult, error)
	// check device ban
	CheckDeviceBan(ctx context.Context, in *CheckDeviceBanReq, opts ...grpc.CallOption) (*CheckDeviceBanResult, error)
	// login and register with password
	AuthSignUpPassword(ctx context.Context, in *AuthSignUpPasswordReq, opts ...grpc.CallOption) (*AuthSignUpPasswordResult, error)
	AuthSignInPassword(ctx context.Context, in *AuthSignInPasswordReq, opts ...grpc.CallOption) (*AuthSignInPasswordResult, error)
	AccountResetPassword(ctx context.Context, in *AccountResetPasswordReq, opts ...grpc.CallOption) (*AccountResetPasswordResult, error)
	// ***************** simple im chat *********************
	GetFullUserSim(ctx context.Context, in *GetFullUserSimReq, opts ...grpc.CallOption) (*GetFullUserSimResult, error)
	// 设置密码发送短信验证码
	SendSetPasswordCode(ctx context.Context, in *SendSetPasswordPhoneCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error)
}

type infoServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewInfoServerServiceClient(cc *grpc.ClientConn) InfoServerServiceClient {
	return &infoServerServiceClient{cc}
}

func (c *infoServerServiceClient) SendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error) {
	out := new(SendCodeResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/SendCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) ReSendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error) {
	out := new(SendCodeResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/ReSendCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) SendChangePhoneCode(ctx context.Context, in *SendChangePhoneCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error) {
	out := new(SendCodeResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/SendChangePhoneCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthSignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInOrReqitsterResult, error) {
	out := new(SignInOrReqitsterResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/AuthSignIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthSignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*AuthSignUpResult, error) {
	out := new(AuthSignUpResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/AuthSignUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AccountChangePhone(ctx context.Context, in *ChangePhoneReq, opts ...grpc.CallOption) (*ChangePhoneResult, error) {
	out := new(ChangePhoneResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/AccountChangePhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthCheckPassWord(ctx context.Context, in *AuthCheckPasswdReq, opts ...grpc.CallOption) (*AuthCheckPasswdResult, error) {
	out := new(AuthCheckPasswdResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/AuthCheckPassWord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthImPortAuthorizion(ctx context.Context, in *AuthImportAuthorizationReq, opts ...grpc.CallOption) (*AuthImportAuthorizationResult, error) {
	out := new(AuthImportAuthorizationResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/AuthImPortAuthorizion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthExportAuthorization(ctx context.Context, in *AuthExportAuthorizationReq, opts ...grpc.CallOption) (*AuthExportAuthorizationResult, error) {
	out := new(AuthExportAuthorizationResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/AuthExportAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthRecoverPassword(ctx context.Context, in *AuthRecoverPasswdReq, opts ...grpc.CallOption) (*AuthRecoverPasswdResult, error) {
	out := new(AuthRecoverPasswdResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/AuthRecoverPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) ContactsSearch(ctx context.Context, in *ContactsSearchReq, opts ...grpc.CallOption) (*ContactsSearcResult, error) {
	out := new(ContactsSearcResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/ContactsSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error) {
	out := new(GetFullUserResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/GetFullUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) ContactRevoleUserName(ctx context.Context, in *ContactRevoleUserNameReq, opts ...grpc.CallOption) (*ContactRevoleUserNameResult, error) {
	out := new(ContactRevoleUserNameResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/ContactRevoleUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthRequestPasswordRecovery(ctx context.Context, in *AuthRequestPasswordRecoveryReq, opts ...grpc.CallOption) (*AuthRequestPasswordRecoveryResult, error) {
	out := new(AuthRequestPasswordRecoveryResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/AuthRequestPasswordRecovery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) PhonecallAllocSession(ctx context.Context, in *PhonecallAllocSessionReq, opts ...grpc.CallOption) (*PhonecallAllocSessionResult, error) {
	out := new(PhonecallAllocSessionResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/PhonecallAllocSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) PhonecallOnReceivedCallCheck(ctx context.Context, in *PhonecallOnReceivedCallCheckReq, opts ...grpc.CallOption) (*PhonecallOnReceivedCallCheckResult, error) {
	out := new(PhonecallOnReceivedCallCheckResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/PhonecallOnReceivedCallCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) PhonecallOnAcceptCallUpdate(ctx context.Context, in *PhonecallOnAcceptCallUpdateReq, opts ...grpc.CallOption) (*PhonecallOnAcceptCallUpdateResult, error) {
	out := new(PhonecallOnAcceptCallUpdateResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/PhonecallOnAcceptCallUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) PhonecallOnConfirmCallUpdate(ctx context.Context, in *PhonecallOnConfirmCallUpdateReq, opts ...grpc.CallOption) (*PhonecallOnConfirmCallUpdateResult, error) {
	out := new(PhonecallOnConfirmCallUpdateResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/PhonecallOnConfirmCallUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) PhonecallOnDiscardCallUpdate(ctx context.Context, in *PhonecallOnDiscardCallUpdateReq, opts ...grpc.CallOption) (*PhonecallOnDiscardCallUpdateResult, error) {
	out := new(PhonecallOnDiscardCallUpdateResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/PhonecallOnDiscardCallUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) PhonecallQueryEndpoints(ctx context.Context, in *PhonecallQueryEndpointsReq, opts ...grpc.CallOption) (*PhonecallQueryEndpointsResult, error) {
	out := new(PhonecallQueryEndpointsResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/PhonecallQueryEndpoints", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthCancelCode(ctx context.Context, in *AuthCancelCodeReq, opts ...grpc.CallOption) (*AuthCancelCodeResult, error) {
	out := new(AuthCancelCodeResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/AuthCancelCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdVirtualPhoneNumberGenerate(ctx context.Context, in *CmdVirtualPhoneNumberGenerateReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberGenerateResult, error) {
	out := new(CmdVirtualPhoneNumberGenerateResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/CmdVirtualPhoneNumberGenerate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdVirtualPhoneNumberSpecialGen(ctx context.Context, in *CmdVirtualPhoneNumberSpecialGenReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberSpecialGenResult, error) {
	out := new(CmdVirtualPhoneNumberSpecialGenResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/CmdVirtualPhoneNumberSpecialGen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdVirtualPhoneNumberBindRealPhoneNumber(ctx context.Context, in *CmdVirtualPhoneNumberBindRealPhoneNumberReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberBindRealPhoneNumberResult, error) {
	out := new(CmdVirtualPhoneNumberBindRealPhoneNumberResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/CmdVirtualPhoneNumberBindRealPhoneNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdVirtualPhoneNumberUnbindRealPhoneNumber(ctx context.Context, in *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberUnbindRealPhoneNumberResult, error) {
	out := new(CmdVirtualPhoneNumberUnbindRealPhoneNumberResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/CmdVirtualPhoneNumberUnbindRealPhoneNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdVirtualPhoneNumberQueryInfo(ctx context.Context, in *CmdVirtualPhoneNumberQueryInfoReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberQueryInfoResult, error) {
	out := new(CmdVirtualPhoneNumberQueryInfoResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/CmdVirtualPhoneNumberQueryInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdSysPhoneNumberBindRealPhoneNumber(ctx context.Context, in *CmdSysPhoneNumberBindRealPhoneNumberReq, opts ...grpc.CallOption) (*CmdSysPhoneNumberBindRealPhoneNumberResult, error) {
	out := new(CmdSysPhoneNumberBindRealPhoneNumberResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/CmdSysPhoneNumberBindRealPhoneNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdBlockSignIn(ctx context.Context, in *CmdBlockSignInReq, opts ...grpc.CallOption) (*CmdBlockSignInResult, error) {
	out := new(CmdBlockSignInResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/CmdBlockSignIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdUnblockSignIn(ctx context.Context, in *CmdUnblockSignInReq, opts ...grpc.CallOption) (*CmdUnblockSignInResult, error) {
	out := new(CmdUnblockSignInResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/CmdUnblockSignIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdBlockSignUp(ctx context.Context, in *CmdBlockSignUpReq, opts ...grpc.CallOption) (*CmdBlockSignUpResult, error) {
	out := new(CmdBlockSignUpResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/CmdBlockSignUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdUnblockSignUp(ctx context.Context, in *CmdUnblockSignUpReq, opts ...grpc.CallOption) (*CmdUnblockSignUpResult, error) {
	out := new(CmdUnblockSignUpResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/CmdUnblockSignUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) LangpackGetLanguages(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*LangpackList, error) {
	out := new(LangpackList)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/LangpackGetLanguages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) LangpackGetLangPack(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*Langpack, error) {
	out := new(Langpack)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/LangpackGetLangPack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) LangpackGetStrings(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*LangpackStringsList, error) {
	out := new(LangpackStringsList)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/LangpackGetStrings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) LangpackGetDifference(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*Langpack, error) {
	out := new(Langpack)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/LangpackGetDifference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) GetUserChannelByUserName(ctx context.Context, in *GetUserChannelByUserNameReq, opts ...grpc.CallOption) (*GetUserChannelByUserNameResult, error) {
	out := new(GetUserChannelByUserNameResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/GetUserChannelByUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) DeleteAuthKeys(ctx context.Context, in *DeleteAuthKeysReq, opts ...grpc.CallOption) (*DeleteAuthKeysResult, error) {
	out := new(DeleteAuthKeysResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/DeleteAuthKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) QueryDebugingUserID(ctx context.Context, in *QueryDebugingUserIDReq, opts ...grpc.CallOption) (*QueryDebugingUserIDResult, error) {
	out := new(QueryDebugingUserIDResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/QueryDebugingUserID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatResult, error) {
	out := new(HeartbeatResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CheckDeviceBan(ctx context.Context, in *CheckDeviceBanReq, opts ...grpc.CallOption) (*CheckDeviceBanResult, error) {
	out := new(CheckDeviceBanResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/CheckDeviceBan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthSignUpPassword(ctx context.Context, in *AuthSignUpPasswordReq, opts ...grpc.CallOption) (*AuthSignUpPasswordResult, error) {
	out := new(AuthSignUpPasswordResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/AuthSignUpPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthSignInPassword(ctx context.Context, in *AuthSignInPasswordReq, opts ...grpc.CallOption) (*AuthSignInPasswordResult, error) {
	out := new(AuthSignInPasswordResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/AuthSignInPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AccountResetPassword(ctx context.Context, in *AccountResetPasswordReq, opts ...grpc.CallOption) (*AccountResetPasswordResult, error) {
	out := new(AccountResetPasswordResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/AccountResetPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) GetFullUserSim(ctx context.Context, in *GetFullUserSimReq, opts ...grpc.CallOption) (*GetFullUserSimResult, error) {
	out := new(GetFullUserSimResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/GetFullUserSim", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) SendSetPasswordCode(ctx context.Context, in *SendSetPasswordPhoneCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error) {
	out := new(SendCodeResult)
	err := grpc.Invoke(ctx, "/infoserver.InfoServerService/SendSetPasswordCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InfoServerService service

type InfoServerServiceServer interface {
	// 发送短信验证码的接口(yuankan)
	SendCode(context.Context, *SendCodeReq) (*SendCodeResult, error)
	// resendcode的接口（目前处理的是直接发送短信验证码）(yuankan)
	ReSendCode(context.Context, *SendCodeReq) (*SendCodeResult, error)
	// 更改电话号码的发送短信(yuankan)
	SendChangePhoneCode(context.Context, *SendChangePhoneCodeReq) (*SendCodeResult, error)
	// 登录接口(yuankan和lxl)
	AuthSignIn(context.Context, *SignInReq) (*SignInOrReqitsterResult, error)
	// 注册用户的接口(yuankan和lxl)
	AuthSignUp(context.Context, *SignUpReq) (*AuthSignUpResult, error)
	// 更改电话号码的接口(yuankan和lxl)
	AccountChangePhone(context.Context, *ChangePhoneReq) (*ChangePhoneResult, error)
	// 校验两步验证的密码(yuankan)
	AuthCheckPassWord(context.Context, *AuthCheckPasswdReq) (*AuthCheckPasswdResult, error)
	// i导入authr (yuankan )
	AuthImPortAuthorizion(context.Context, *AuthImportAuthorizationReq) (*AuthImportAuthorizationResult, error)
	// 导出auth
	AuthExportAuthorization(context.Context, *AuthExportAuthorizationReq) (*AuthExportAuthorizationResult, error)
	// 恢复量保护验证的密码
	AuthRecoverPassword(context.Context, *AuthRecoverPasswdReq) (*AuthRecoverPasswdResult, error)
	// 根据Username搜索人或者超级群、频道(lxl\tanyuzhou)
	ContactsSearch(context.Context, *ContactsSearchReq) (*ContactsSearcResult, error)
	// getfulluser
	GetFullUser(context.Context, *GetFullUserReq) (*GetFullUserResult, error)
	// 根据userName 来查找具体的人或者超级群
	ContactRevoleUserName(context.Context, *ContactRevoleUserNameReq) (*ContactRevoleUserNameResult, error)
	// 忘记两步验证密码(yuankan)
	AuthRequestPasswordRecovery(context.Context, *AuthRequestPasswordRecoveryReq) (*AuthRequestPasswordRecoveryResult, error)
	// 电话功能 对应的每一个步骤名称
	PhonecallAllocSession(context.Context, *PhonecallAllocSessionReq) (*PhonecallAllocSessionResult, error)
	PhonecallOnReceivedCallCheck(context.Context, *PhonecallOnReceivedCallCheckReq) (*PhonecallOnReceivedCallCheckResult, error)
	PhonecallOnAcceptCallUpdate(context.Context, *PhonecallOnAcceptCallUpdateReq) (*PhonecallOnAcceptCallUpdateResult, error)
	PhonecallOnConfirmCallUpdate(context.Context, *PhonecallOnConfirmCallUpdateReq) (*PhonecallOnConfirmCallUpdateResult, error)
	PhonecallOnDiscardCallUpdate(context.Context, *PhonecallOnDiscardCallUpdateReq) (*PhonecallOnDiscardCallUpdateResult, error)
	PhonecallQueryEndpoints(context.Context, *PhonecallQueryEndpointsReq) (*PhonecallQueryEndpointsResult, error)
	// 取消验证码
	AuthCancelCode(context.Context, *AuthCancelCodeReq) (*AuthCancelCodeResult, error)
	// 虚拟号摇号
	CmdVirtualPhoneNumberGenerate(context.Context, *CmdVirtualPhoneNumberGenerateReq) (*CmdVirtualPhoneNumberGenerateResult, error)
	// 虚拟号激活指定的号
	CmdVirtualPhoneNumberSpecialGen(context.Context, *CmdVirtualPhoneNumberSpecialGenReq) (*CmdVirtualPhoneNumberSpecialGenResult, error)
	// 虚拟号绑定
	CmdVirtualPhoneNumberBindRealPhoneNumber(context.Context, *CmdVirtualPhoneNumberBindRealPhoneNumberReq) (*CmdVirtualPhoneNumberBindRealPhoneNumberResult, error)
	// 虚拟号解绑
	CmdVirtualPhoneNumberUnbindRealPhoneNumber(context.Context, *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) (*CmdVirtualPhoneNumberUnbindRealPhoneNumberResult, error)
	// 虚拟号信息查询
	CmdVirtualPhoneNumberQueryInfo(context.Context, *CmdVirtualPhoneNumberQueryInfoReq) (*CmdVirtualPhoneNumberQueryInfoResult, error)
	// 服务号绑定电话号码
	CmdSysPhoneNumberBindRealPhoneNumber(context.Context, *CmdSysPhoneNumberBindRealPhoneNumberReq) (*CmdSysPhoneNumberBindRealPhoneNumberResult, error)
	// 阻止登陆
	CmdBlockSignIn(context.Context, *CmdBlockSignInReq) (*CmdBlockSignInResult, error)
	// 解除禁止登陆
	CmdUnblockSignIn(context.Context, *CmdUnblockSignInReq) (*CmdUnblockSignInResult, error)
	// 阻止注册
	CmdBlockSignUp(context.Context, *CmdBlockSignUpReq) (*CmdBlockSignUpResult, error)
	// 解除禁止注册
	CmdUnblockSignUp(context.Context, *CmdUnblockSignUpReq) (*CmdUnblockSignUpResult, error)
	// 语言包列表查询
	LangpackGetLanguages(context.Context, *LangPacktReq) (*LangpackList, error)
	// 语音包详细查询
	LangpackGetLangPack(context.Context, *LangPacktReq) (*Langpack, error)
	// 语言包修改确认提示语查询
	LangpackGetStrings(context.Context, *LangPacktReq) (*LangpackStringsList, error)
	// 语言包版本对比
	LangpackGetDifference(context.Context, *LangPacktReq) (*Langpack, error)
	// 根据UserName来获取用户信息或者群信息
	GetUserChannelByUserName(context.Context, *GetUserChannelByUserNameReq) (*GetUserChannelByUserNameResult, error)
	// 删除电话号码当前所有authkey
	DeleteAuthKeys(context.Context, *DeleteAuthKeysReq) (*DeleteAuthKeysResult, error)
	// get all useid in debuging
	QueryDebugingUserID(context.Context, *QueryDebugingUserIDReq) (*QueryDebugingUserIDResult, error)
	// heartbeat
	Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatResult, error)
	// check device ban
	CheckDeviceBan(context.Context, *CheckDeviceBanReq) (*CheckDeviceBanResult, error)
	// login and register with password
	AuthSignUpPassword(context.Context, *AuthSignUpPasswordReq) (*AuthSignUpPasswordResult, error)
	AuthSignInPassword(context.Context, *AuthSignInPasswordReq) (*AuthSignInPasswordResult, error)
	AccountResetPassword(context.Context, *AccountResetPasswordReq) (*AccountResetPasswordResult, error)
	// ***************** simple im chat *********************
	GetFullUserSim(context.Context, *GetFullUserSimReq) (*GetFullUserSimResult, error)
	// 设置密码发送短信验证码
	SendSetPasswordCode(context.Context, *SendSetPasswordPhoneCodeReq) (*SendCodeResult, error)
}

func RegisterInfoServerServiceServer(s *grpc.Server, srv InfoServerServiceServer) {
	s.RegisterService(&_InfoServerService_serviceDesc, srv)
}

func _InfoServerService_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/SendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).SendCode(ctx, req.(*SendCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_ReSendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).ReSendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/ReSendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).ReSendCode(ctx, req.(*SendCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_SendChangePhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChangePhoneCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).SendChangePhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/SendChangePhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).SendChangePhoneCode(ctx, req.(*SendChangePhoneCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthSignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthSignIn(ctx, req.(*SignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthSignUp(ctx, req.(*SignUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AccountChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AccountChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AccountChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AccountChangePhone(ctx, req.(*ChangePhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthCheckPassWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCheckPasswdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthCheckPassWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthCheckPassWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthCheckPassWord(ctx, req.(*AuthCheckPasswdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthImPortAuthorizion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthImportAuthorizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthImPortAuthorizion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthImPortAuthorizion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthImPortAuthorizion(ctx, req.(*AuthImportAuthorizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthExportAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthExportAuthorizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthExportAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthExportAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthExportAuthorization(ctx, req.(*AuthExportAuthorizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthRecoverPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRecoverPasswdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthRecoverPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthRecoverPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthRecoverPassword(ctx, req.(*AuthRecoverPasswdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_ContactsSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).ContactsSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/ContactsSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).ContactsSearch(ctx, req.(*ContactsSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_GetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).GetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/GetFullUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).GetFullUser(ctx, req.(*GetFullUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_ContactRevoleUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRevoleUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).ContactRevoleUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/ContactRevoleUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).ContactRevoleUserName(ctx, req.(*ContactRevoleUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthRequestPasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequestPasswordRecoveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthRequestPasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthRequestPasswordRecovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthRequestPasswordRecovery(ctx, req.(*AuthRequestPasswordRecoveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_PhonecallAllocSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonecallAllocSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).PhonecallAllocSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/PhonecallAllocSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).PhonecallAllocSession(ctx, req.(*PhonecallAllocSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_PhonecallOnReceivedCallCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonecallOnReceivedCallCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).PhonecallOnReceivedCallCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/PhonecallOnReceivedCallCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).PhonecallOnReceivedCallCheck(ctx, req.(*PhonecallOnReceivedCallCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_PhonecallOnAcceptCallUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonecallOnAcceptCallUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).PhonecallOnAcceptCallUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/PhonecallOnAcceptCallUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).PhonecallOnAcceptCallUpdate(ctx, req.(*PhonecallOnAcceptCallUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_PhonecallOnConfirmCallUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonecallOnConfirmCallUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).PhonecallOnConfirmCallUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/PhonecallOnConfirmCallUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).PhonecallOnConfirmCallUpdate(ctx, req.(*PhonecallOnConfirmCallUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_PhonecallOnDiscardCallUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonecallOnDiscardCallUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).PhonecallOnDiscardCallUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/PhonecallOnDiscardCallUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).PhonecallOnDiscardCallUpdate(ctx, req.(*PhonecallOnDiscardCallUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_PhonecallQueryEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonecallQueryEndpointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).PhonecallQueryEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/PhonecallQueryEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).PhonecallQueryEndpoints(ctx, req.(*PhonecallQueryEndpointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthCancelCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCancelCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthCancelCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthCancelCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthCancelCode(ctx, req.(*AuthCancelCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdVirtualPhoneNumberGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdVirtualPhoneNumberGenerateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdVirtualPhoneNumberGenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberGenerate(ctx, req.(*CmdVirtualPhoneNumberGenerateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdVirtualPhoneNumberSpecialGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdVirtualPhoneNumberSpecialGenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberSpecialGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdVirtualPhoneNumberSpecialGen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberSpecialGen(ctx, req.(*CmdVirtualPhoneNumberSpecialGenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdVirtualPhoneNumberBindRealPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdVirtualPhoneNumberBindRealPhoneNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberBindRealPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdVirtualPhoneNumberBindRealPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberBindRealPhoneNumber(ctx, req.(*CmdVirtualPhoneNumberBindRealPhoneNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdVirtualPhoneNumberUnbindRealPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdVirtualPhoneNumberUnbindRealPhoneNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberUnbindRealPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdVirtualPhoneNumberUnbindRealPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberUnbindRealPhoneNumber(ctx, req.(*CmdVirtualPhoneNumberUnbindRealPhoneNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdVirtualPhoneNumberQueryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdVirtualPhoneNumberQueryInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberQueryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdVirtualPhoneNumberQueryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberQueryInfo(ctx, req.(*CmdVirtualPhoneNumberQueryInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdSysPhoneNumberBindRealPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdSysPhoneNumberBindRealPhoneNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdSysPhoneNumberBindRealPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdSysPhoneNumberBindRealPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdSysPhoneNumberBindRealPhoneNumber(ctx, req.(*CmdSysPhoneNumberBindRealPhoneNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdBlockSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdBlockSignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdBlockSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdBlockSignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdBlockSignIn(ctx, req.(*CmdBlockSignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdUnblockSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdUnblockSignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdUnblockSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdUnblockSignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdUnblockSignIn(ctx, req.(*CmdUnblockSignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdBlockSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdBlockSignUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdBlockSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdBlockSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdBlockSignUp(ctx, req.(*CmdBlockSignUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdUnblockSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdUnblockSignUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdUnblockSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdUnblockSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdUnblockSignUp(ctx, req.(*CmdUnblockSignUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_LangpackGetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LangPacktReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).LangpackGetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/LangpackGetLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).LangpackGetLanguages(ctx, req.(*LangPacktReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_LangpackGetLangPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LangPacktReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).LangpackGetLangPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/LangpackGetLangPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).LangpackGetLangPack(ctx, req.(*LangPacktReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_LangpackGetStrings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LangPacktReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).LangpackGetStrings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/LangpackGetStrings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).LangpackGetStrings(ctx, req.(*LangPacktReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_LangpackGetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LangPacktReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).LangpackGetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/LangpackGetDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).LangpackGetDifference(ctx, req.(*LangPacktReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_GetUserChannelByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChannelByUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).GetUserChannelByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/GetUserChannelByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).GetUserChannelByUserName(ctx, req.(*GetUserChannelByUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_DeleteAuthKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).DeleteAuthKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/DeleteAuthKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).DeleteAuthKeys(ctx, req.(*DeleteAuthKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_QueryDebugingUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDebugingUserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).QueryDebugingUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/QueryDebugingUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).QueryDebugingUserID(ctx, req.(*QueryDebugingUserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).Heartbeat(ctx, req.(*HeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CheckDeviceBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDeviceBanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CheckDeviceBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CheckDeviceBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CheckDeviceBan(ctx, req.(*CheckDeviceBanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthSignUpPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthSignUpPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthSignUpPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthSignUpPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthSignUpPassword(ctx, req.(*AuthSignUpPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthSignInPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthSignInPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthSignInPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthSignInPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthSignInPassword(ctx, req.(*AuthSignInPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AccountResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AccountResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AccountResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AccountResetPassword(ctx, req.(*AccountResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_GetFullUserSim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullUserSimReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).GetFullUserSim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/GetFullUserSim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).GetFullUserSim(ctx, req.(*GetFullUserSimReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_SendSetPasswordCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSetPasswordPhoneCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).SendSetPasswordCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/SendSetPasswordCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).SendSetPasswordCode(ctx, req.(*SendSetPasswordPhoneCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfoServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infoserver.InfoServerService",
	HandlerType: (*InfoServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCode",
			Handler:    _InfoServerService_SendCode_Handler,
		},
		{
			MethodName: "ReSendCode",
			Handler:    _InfoServerService_ReSendCode_Handler,
		},
		{
			MethodName: "SendChangePhoneCode",
			Handler:    _InfoServerService_SendChangePhoneCode_Handler,
		},
		{
			MethodName: "AuthSignIn",
			Handler:    _InfoServerService_AuthSignIn_Handler,
		},
		{
			MethodName: "AuthSignUp",
			Handler:    _InfoServerService_AuthSignUp_Handler,
		},
		{
			MethodName: "AccountChangePhone",
			Handler:    _InfoServerService_AccountChangePhone_Handler,
		},
		{
			MethodName: "AuthCheckPassWord",
			Handler:    _InfoServerService_AuthCheckPassWord_Handler,
		},
		{
			MethodName: "AuthImPortAuthorizion",
			Handler:    _InfoServerService_AuthImPortAuthorizion_Handler,
		},
		{
			MethodName: "AuthExportAuthorization",
			Handler:    _InfoServerService_AuthExportAuthorization_Handler,
		},
		{
			MethodName: "AuthRecoverPassword",
			Handler:    _InfoServerService_AuthRecoverPassword_Handler,
		},
		{
			MethodName: "ContactsSearch",
			Handler:    _InfoServerService_ContactsSearch_Handler,
		},
		{
			MethodName: "GetFullUser",
			Handler:    _InfoServerService_GetFullUser_Handler,
		},
		{
			MethodName: "ContactRevoleUserName",
			Handler:    _InfoServerService_ContactRevoleUserName_Handler,
		},
		{
			MethodName: "AuthRequestPasswordRecovery",
			Handler:    _InfoServerService_AuthRequestPasswordRecovery_Handler,
		},
		{
			MethodName: "PhonecallAllocSession",
			Handler:    _InfoServerService_PhonecallAllocSession_Handler,
		},
		{
			MethodName: "PhonecallOnReceivedCallCheck",
			Handler:    _InfoServerService_PhonecallOnReceivedCallCheck_Handler,
		},
		{
			MethodName: "PhonecallOnAcceptCallUpdate",
			Handler:    _InfoServerService_PhonecallOnAcceptCallUpdate_Handler,
		},
		{
			MethodName: "PhonecallOnConfirmCallUpdate",
			Handler:    _InfoServerService_PhonecallOnConfirmCallUpdate_Handler,
		},
		{
			MethodName: "PhonecallOnDiscardCallUpdate",
			Handler:    _InfoServerService_PhonecallOnDiscardCallUpdate_Handler,
		},
		{
			MethodName: "PhonecallQueryEndpoints",
			Handler:    _InfoServerService_PhonecallQueryEndpoints_Handler,
		},
		{
			MethodName: "AuthCancelCode",
			Handler:    _InfoServerService_AuthCancelCode_Handler,
		},
		{
			MethodName: "CmdVirtualPhoneNumberGenerate",
			Handler:    _InfoServerService_CmdVirtualPhoneNumberGenerate_Handler,
		},
		{
			MethodName: "CmdVirtualPhoneNumberSpecialGen",
			Handler:    _InfoServerService_CmdVirtualPhoneNumberSpecialGen_Handler,
		},
		{
			MethodName: "CmdVirtualPhoneNumberBindRealPhoneNumber",
			Handler:    _InfoServerService_CmdVirtualPhoneNumberBindRealPhoneNumber_Handler,
		},
		{
			MethodName: "CmdVirtualPhoneNumberUnbindRealPhoneNumber",
			Handler:    _InfoServerService_CmdVirtualPhoneNumberUnbindRealPhoneNumber_Handler,
		},
		{
			MethodName: "CmdVirtualPhoneNumberQueryInfo",
			Handler:    _InfoServerService_CmdVirtualPhoneNumberQueryInfo_Handler,
		},
		{
			MethodName: "CmdSysPhoneNumberBindRealPhoneNumber",
			Handler:    _InfoServerService_CmdSysPhoneNumberBindRealPhoneNumber_Handler,
		},
		{
			MethodName: "CmdBlockSignIn",
			Handler:    _InfoServerService_CmdBlockSignIn_Handler,
		},
		{
			MethodName: "CmdUnblockSignIn",
			Handler:    _InfoServerService_CmdUnblockSignIn_Handler,
		},
		{
			MethodName: "CmdBlockSignUp",
			Handler:    _InfoServerService_CmdBlockSignUp_Handler,
		},
		{
			MethodName: "CmdUnblockSignUp",
			Handler:    _InfoServerService_CmdUnblockSignUp_Handler,
		},
		{
			MethodName: "LangpackGetLanguages",
			Handler:    _InfoServerService_LangpackGetLanguages_Handler,
		},
		{
			MethodName: "LangpackGetLangPack",
			Handler:    _InfoServerService_LangpackGetLangPack_Handler,
		},
		{
			MethodName: "LangpackGetStrings",
			Handler:    _InfoServerService_LangpackGetStrings_Handler,
		},
		{
			MethodName: "LangpackGetDifference",
			Handler:    _InfoServerService_LangpackGetDifference_Handler,
		},
		{
			MethodName: "GetUserChannelByUserName",
			Handler:    _InfoServerService_GetUserChannelByUserName_Handler,
		},
		{
			MethodName: "DeleteAuthKeys",
			Handler:    _InfoServerService_DeleteAuthKeys_Handler,
		},
		{
			MethodName: "QueryDebugingUserID",
			Handler:    _InfoServerService_QueryDebugingUserID_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _InfoServerService_Heartbeat_Handler,
		},
		{
			MethodName: "CheckDeviceBan",
			Handler:    _InfoServerService_CheckDeviceBan_Handler,
		},
		{
			MethodName: "AuthSignUpPassword",
			Handler:    _InfoServerService_AuthSignUpPassword_Handler,
		},
		{
			MethodName: "AuthSignInPassword",
			Handler:    _InfoServerService_AuthSignInPassword_Handler,
		},
		{
			MethodName: "AccountResetPassword",
			Handler:    _InfoServerService_AccountResetPassword_Handler,
		},
		{
			MethodName: "GetFullUserSim",
			Handler:    _InfoServerService_GetFullUserSim_Handler,
		},
		{
			MethodName: "SendSetPasswordCode",
			Handler:    _InfoServerService_SendSetPasswordCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/infoserver.proto",
}

func (m *SendCodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendCodeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if m.CurrentNumber {
		dAtA[i] = 0x10
		i++
		if m.CurrentNumber {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ApiId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ApiId))
	}
	if len(m.ApiHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.ApiHash)))
		i += copy(dAtA[i:], m.ApiHash)
	}
	if len(m.LangCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.LangCode)))
		i += copy(dAtA[i:], m.LangCode)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n1, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	return i, nil
}

func (m *SendCodeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendCodeResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.PhoneRegister {
		dAtA[i] = 0x18
		i++
		if m.PhoneRegister {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NextCodeType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.NextCodeType))
	}
	if len(m.PhoneCodeHash) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i += copy(dAtA[i:], m.PhoneCodeHash)
	}
	if m.TimeOut != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.TimeOut))
	}
	if m.SendTypeApp {
		dAtA[i] = 0x38
		i++
		if m.SendTypeApp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PhoneCodeDesc) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneCodeDesc)))
		i += copy(dAtA[i:], m.PhoneCodeDesc)
	}
	return i, nil
}

func (m *SendChangePhoneCodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendChangePhoneCodeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if m.AllowFlashcall {
		dAtA[i] = 0x10
		i++
		if m.AllowFlashcall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CurrentNumber {
		dAtA[i] = 0x18
		i++
		if m.CurrentNumber {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n2, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	return i, nil
}

func (m *SignInReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.PhoneCodeHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i += copy(dAtA[i:], m.PhoneCodeHash)
	}
	if len(m.PhoneCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneCode)))
		i += copy(dAtA[i:], m.PhoneCode)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n3, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	return i, nil
}

func (m *SignInOrReqitsterResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInOrReqitsterResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserInfo.Size()))
		n4, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result {
		dAtA[i] = 0x18
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SignUpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignUpReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.PhoneCodeHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i += copy(dAtA[i:], m.PhoneCodeHash)
	}
	if len(m.PhoneCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneCode)))
		i += copy(dAtA[i:], m.PhoneCode)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if m.IsBot {
		dAtA[i] = 0x40
		i++
		if m.IsBot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotInfoVersion != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		dAtA[i] = 0x50
		i++
		if m.BotChatHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BotNoChats {
		dAtA[i] = 0x58
		i++
		if m.BotNoChats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DcId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.DcId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n5, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	return i, nil
}

func (m *AuthSignUpResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthSignUpResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	if m.UserInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserInfo.Size()))
		n6, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ChangePhoneReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePhoneReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.PhoneCodeHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i += copy(dAtA[i:], m.PhoneCodeHash)
	}
	if len(m.PhoneCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneCode)))
		i += copy(dAtA[i:], m.PhoneCode)
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n7, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	return i, nil
}

func (m *ChangePhoneResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePhoneResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserInfo.Size()))
		n8, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result {
		dAtA[i] = 0x18
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AuthCheckPasswdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthCheckPasswdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.PasswordHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PasswordHash)))
		i += copy(dAtA[i:], m.PasswordHash)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n9, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.KeyId))
	}
	return i, nil
}

func (m *AuthCheckPasswdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthCheckPasswdResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserInfo.Size()))
		n10, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result {
		dAtA[i] = 0x18
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AuthImportAuthorizationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthImportAuthorizationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.Bytes) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Bytes)))
		i += copy(dAtA[i:], m.Bytes)
	}
	if m.Dcid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Dcid))
	}
	if m.Authid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Authid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n11, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *AuthImportAuthorizationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthImportAuthorizationResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserInfo.Size()))
		n12, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result {
		dAtA[i] = 0x18
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AuthExportAuthorizationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthExportAuthorizationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Userid))
	}
	if m.Keyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Keyid))
	}
	if m.Dcid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Dcid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n13, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *AuthExportAuthorizationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthExportAuthorizationResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *AuthRecoverPasswdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthRecoverPasswdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n14, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *AuthRecoverPasswdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthRecoverPasswdResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserInfo.Size()))
		n15, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ContactsSearchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsSearchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n16, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *ContactsSearcResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsSearcResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Users != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Users.Size()))
		n17, err := m.Users.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.Channel) > 0 {
		for _, b := range m.Channel {
			dAtA[i] = 0x12
			i++
			i = encodeVarintInfoserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *AuthRequestPasswordRecoveryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthRequestPasswordRecoveryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n18, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *AuthRequestPasswordRecoveryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthRequestPasswordRecoveryResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	if len(m.EmailPattern) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.EmailPattern)))
		i += copy(dAtA[i:], m.EmailPattern)
	}
	return i, nil
}

func (m *PhonecallSessionInformation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhonecallSessionInformation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.SessionId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.AdminId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AdminId))
	}
	if m.AdminKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AdminKeyid))
	}
	if m.ParticipantId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ParticipantId))
	}
	if m.ParticipantKeyid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ParticipantKeyid))
	}
	if len(m.GB) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.GB)))
		i += copy(dAtA[i:], m.GB)
	}
	if m.CallRequestedAt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.CallRequestedAt))
	}
	if m.CallReceivedAt != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.CallReceivedAt))
	}
	if m.CallConfirmedAt != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.CallConfirmedAt))
	}
	if len(m.PeerTag) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PeerTag)))
		i += copy(dAtA[i:], m.PeerTag)
	}
	if m.CurStatus != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.CurStatus))
	}
	return i, nil
}

func (m *PhonecallEndpointInformation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhonecallEndpointInformation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Id))
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Ipv6) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Ipv6)))
		i += copy(dAtA[i:], m.Ipv6)
	}
	if m.Port != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Port))
	}
	return i, nil
}

func (m *PhonecallAllocSessionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhonecallAllocSessionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CallerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.CallerId))
	}
	if m.ReceiverId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ReceiverId))
	}
	if m.CallerKeyid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.CallerKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n19, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *PhonecallAllocSessionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhonecallAllocSessionResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.SessionId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AccessHash))
	}
	return i, nil
}

func (m *PhonecallOnReceivedCallCheckReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhonecallOnReceivedCallCheckReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.SessionId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n20, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *PhonecallOnReceivedCallCheckResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhonecallOnReceivedCallCheckResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *PhonecallOnAcceptCallUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhonecallOnAcceptCallUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.SessionId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.ParticipantId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ParticipantId))
	}
	if m.ParticipantKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ParticipantKeyid))
	}
	if len(m.GB) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.GB)))
		i += copy(dAtA[i:], m.GB)
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n21, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *PhonecallOnAcceptCallUpdateResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhonecallOnAcceptCallUpdateResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	if m.Information != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Information.Size()))
		n22, err := m.Information.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *PhonecallOnConfirmCallUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhonecallOnConfirmCallUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.SessionId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.AdminId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AdminId))
	}
	if m.AdminKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AdminKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n23, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *PhonecallOnConfirmCallUpdateResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhonecallOnConfirmCallUpdateResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	if m.Information != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Information.Size()))
		n24, err := m.Information.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *PhonecallOnDiscardCallUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhonecallOnDiscardCallUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DiscarderId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.DiscarderId))
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.SessionId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n25, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *PhonecallOnDiscardCallUpdateResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhonecallOnDiscardCallUpdateResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	if m.Information != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Information.Size()))
		n26, err := m.Information.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *PhonecallQueryEndpointsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhonecallQueryEndpointsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n27, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *PhonecallQueryEndpointsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhonecallQueryEndpointsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	if len(m.Informations) > 0 {
		for _, msg := range m.Informations {
			dAtA[i] = 0x12
			i++
			i = encodeVarintInfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AuthCancelCodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthCancelCodeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.PhoneCodeHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i += copy(dAtA[i:], m.PhoneCodeHash)
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n28, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *AuthCancelCodeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthCancelCodeResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CodeCanceled {
		dAtA[i] = 0x8
		i++
		if m.CodeCanceled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Langpack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Langpack) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Platform != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Platform))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.NativeName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.NativeName)))
		i += copy(dAtA[i:], m.NativeName)
	}
	if len(m.LangCode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.LangCode)))
		i += copy(dAtA[i:], m.LangCode)
	}
	if m.FromVersion != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.FromVersion))
	}
	if m.Version != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Version))
	}
	if len(m.Strings) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Strings)))
		i += copy(dAtA[i:], m.Strings)
	}
	return i, nil
}

func (m *LangpackList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LangpackList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vector) > 0 {
		for _, msg := range m.Vector {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LangpackStrings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LangpackStrings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *LangpackStringsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LangpackStringsList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vector) > 0 {
		for _, msg := range m.Vector {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LangPacktReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LangPacktReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Platform != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Platform))
	}
	if len(m.LangCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.LangCode)))
		i += copy(dAtA[i:], m.LangCode)
	}
	if m.FromVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.FromVersion))
	}
	if len(m.Keystrings) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Keystrings)))
		i += copy(dAtA[i:], m.Keystrings)
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *VirtualPhoneNumberInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualPhoneNumberInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VirtualPhone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.VirtualPhone)))
		i += copy(dAtA[i:], m.VirtualPhone)
	}
	if len(m.RealPhone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.RealPhone)))
		i += copy(dAtA[i:], m.RealPhone)
	}
	if m.Activated != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Activated))
	}
	if m.BindTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.BindTime))
	}
	if m.ActivateTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ActivateTime))
	}
	if m.ActivateAdminId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.ActivateAdminId))
	}
	if m.BindAdminId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.BindAdminId))
	}
	if m.OwnerId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.OwnerId))
	}
	if len(m.InitialPhoneCode) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.InitialPhoneCode)))
		i += copy(dAtA[i:], m.InitialPhoneCode)
	}
	return i, nil
}

func (m *CmdVirtualPhoneNumberGenerateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdVirtualPhoneNumberGenerateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n29, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.Quantity != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Quantity))
	}
	if m.AdminId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AdminId))
	}
	if m.OwnerId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.OwnerId))
	}
	return i, nil
}

func (m *CmdVirtualPhoneNumberGenerateResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdVirtualPhoneNumberGenerateResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintInfoserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CmdVirtualPhoneNumberSpecialGenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdVirtualPhoneNumberSpecialGenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SpecialNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.SpecialNumber)))
		i += copy(dAtA[i:], m.SpecialNumber)
	}
	if m.AdminId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AdminId))
	}
	if m.OwnerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.OwnerId))
	}
	return i, nil
}

func (m *CmdVirtualPhoneNumberSpecialGenResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdVirtualPhoneNumberSpecialGenResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Info != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Info.Size()))
		n30, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *CmdVirtualPhoneNumberBindRealPhoneNumberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdVirtualPhoneNumberBindRealPhoneNumberReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n31, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if len(m.VirtualPhoneNumber) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.VirtualPhoneNumber)))
		i += copy(dAtA[i:], m.VirtualPhoneNumber)
	}
	if len(m.RealPhoneNumber) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.RealPhoneNumber)))
		i += copy(dAtA[i:], m.RealPhoneNumber)
	}
	if m.AdminId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AdminId))
	}
	return i, nil
}

func (m *CmdVirtualPhoneNumberBindRealPhoneNumberResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdVirtualPhoneNumberBindRealPhoneNumberResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	if len(m.Current) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Current)))
		i += copy(dAtA[i:], m.Current)
	}
	return i, nil
}

func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n32, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if len(m.VirtualPhoneNumber) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.VirtualPhoneNumber)))
		i += copy(dAtA[i:], m.VirtualPhoneNumber)
	}
	if m.AdminId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AdminId))
	}
	return i, nil
}

func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	if len(m.BeforeDelete) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.BeforeDelete)))
		i += copy(dAtA[i:], m.BeforeDelete)
	}
	return i, nil
}

func (m *CmdVirtualPhoneNumberQueryInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdVirtualPhoneNumberQueryInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n33, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if len(m.VirtualPhoneNumber) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.VirtualPhoneNumber)))
		i += copy(dAtA[i:], m.VirtualPhoneNumber)
	}
	return i, nil
}

func (m *CmdVirtualPhoneNumberQueryInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdVirtualPhoneNumberQueryInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	if m.Info != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Info.Size()))
		n34, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *CmdSysPhoneNumberBindRealPhoneNumberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdSysPhoneNumberBindRealPhoneNumberReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n35, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if len(m.SysNo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.SysNo)))
		i += copy(dAtA[i:], m.SysNo)
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *CmdSysPhoneNumberBindRealPhoneNumberResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdSysPhoneNumberBindRealPhoneNumberResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *CmdBlockSignInReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdBlockSignInReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumbers) > 0 {
		for _, s := range m.PhoneNumbers {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CmdBlockSignInResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdBlockSignInResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *CmdUnblockSignInReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdUnblockSignInReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumbers) > 0 {
		for _, s := range m.PhoneNumbers {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CmdUnblockSignInResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdUnblockSignInResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *CmdBlockSignUpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdBlockSignUpReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CmdBlockSignUpResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdBlockSignUpResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *CmdUnblockSignUpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdUnblockSignUpReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CmdUnblockSignUpResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdUnblockSignUpResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *ContactRevoleUserNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRevoleUserNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.SelfId))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n36, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *ContactRevoleUserNameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRevoleUserNameResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Uinfo.Size()))
		n37, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if len(m.Channel) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if m.Code != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *GetFullUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n38, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}

func (m *GetFullUserResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullUserResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Uinfo.Size()))
		n39, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.Isblocked {
		dAtA[i] = 0x10
		i++
		if m.Isblocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PhoneCallsPrivate {
		dAtA[i] = 0x18
		i++
		if m.PhoneCallsPrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PhoneCallsAvailable {
		dAtA[i] = 0x20
		i++
		if m.PhoneCallsAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.CommonChat != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.CommonChat))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *GetFullUserSimReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullUserSimReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.SelfId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n40, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}

func (m *UserLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLocation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Country) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.Detail) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Detail)))
		i += copy(dAtA[i:], m.Detail)
	}
	return i, nil
}

func (m *GetFullUserSimResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullUserSimResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Uinfo.Size()))
		n41, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.Isblocked {
		dAtA[i] = 0x10
		i++
		if m.Isblocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PhoneCallsPrivate {
		dAtA[i] = 0x18
		i++
		if m.PhoneCallsPrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PhoneCallsAvailable {
		dAtA[i] = 0x20
		i++
		if m.PhoneCallsAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.CommonChat != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.CommonChat))
	}
	if m.Gender != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Gender))
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.Location != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Location.Size()))
		n42, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Errorcode))
	}
	return i, nil
}

func (m *AuthSignUpPasswordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthSignUpPasswordReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Base.Size()))
		n43, err := m.Base.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if len(m.PwdHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PwdHash)))
		i += copy(dAtA[i:], m.PwdHash)
	}
	return i, nil
}

func (m *AuthSignUpPasswordResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthSignUpPasswordResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserInfo.Size()))
		n44, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *AuthSignInPasswordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthSignInPasswordReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Base.Size()))
		n45, err := m.Base.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if len(m.PwdHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PwdHash)))
		i += copy(dAtA[i:], m.PwdHash)
	}
	return i, nil
}

func (m *AuthSignInPasswordResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthSignInPasswordResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserInfo.Size()))
		n46, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *AccountResetPasswordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountResetPasswordReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if m.Forget {
		dAtA[i] = 0x10
		i++
		if m.Forget {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PhoneCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneCode)))
		i += copy(dAtA[i:], m.PhoneCode)
	}
	if len(m.CurrentPwdHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.CurrentPwdHash)))
		i += copy(dAtA[i:], m.CurrentPwdHash)
	}
	if len(m.NewPwdHash) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.NewPwdHash)))
		i += copy(dAtA[i:], m.NewPwdHash)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.PhoneCodeHash) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i += copy(dAtA[i:], m.PhoneCodeHash)
	}
	return i, nil
}

func (m *AccountResetPasswordResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountResetPasswordResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *CheckDeviceBanReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckDeviceBanReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UniqueNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.UniqueNumber)))
		i += copy(dAtA[i:], m.UniqueNumber)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.KeyId))
	}
	return i, nil
}

func (m *CheckDeviceBanResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckDeviceBanResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Banned {
		dAtA[i] = 0x8
		i++
		if m.Banned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *HeartbeatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HeartbeatResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *QueryDebugingUserIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDebugingUserIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *QueryDebugingUserIDResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDebugingUserIDResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIdList) > 0 {
		dAtA48 := make([]byte, len(m.UserIdList)*10)
		var j47 int
		for _, num1 := range m.UserIdList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA48[j47] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j47++
			}
			dAtA48[j47] = uint8(num)
			j47++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(j47))
		i += copy(dAtA[i:], dAtA48[:j47])
	}
	return i, nil
}

func (m *GetUserChannelByUserNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserChannelByUserNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.SelfId))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n49, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}

func (m *GetUserChannelByUserNameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserChannelByUserNameResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Uinfo.Size()))
		n50, err := m.Uinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	if len(m.ChannelInfo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.ChannelInfo)))
		i += copy(dAtA[i:], m.ChannelInfo)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Type))
	}
	if m.Errcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Errcode))
	}
	return i, nil
}

func (m *DeleteAuthKeysReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAuthKeysReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *DeleteAuthKeysResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAuthKeysResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KeyId) > 0 {
		dAtA52 := make([]byte, len(m.KeyId)*10)
		var j51 int
		for _, num1 := range m.KeyId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA52[j51] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j51++
			}
			dAtA52[j51] = uint8(num)
			j51++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(j51))
		i += copy(dAtA[i:], dAtA52[:j51])
	}
	return i, nil
}

func (m *SendSetPasswordPhoneCodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendSetPasswordPhoneCodeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(m.Debug.Size()))
		n53, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if len(m.LocalPhone) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInfoserver(dAtA, i, uint64(len(m.LocalPhone)))
		i += copy(dAtA[i:], m.LocalPhone)
	}
	return i, nil
}

func encodeVarintInfoserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SendCodeReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.CurrentNumber {
		n += 2
	}
	if m.ApiId != 0 {
		n += 1 + sovInfoserver(uint64(m.ApiId))
	}
	l = len(m.ApiHash)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovInfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovInfoserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *SendCodeResult) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovInfoserver(uint64(m.ErrorCode))
	}
	if m.PhoneRegister {
		n += 2
	}
	if m.NextCodeType != 0 {
		n += 1 + sovInfoserver(uint64(m.NextCodeType))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.TimeOut != 0 {
		n += 1 + sovInfoserver(uint64(m.TimeOut))
	}
	if m.SendTypeApp {
		n += 2
	}
	l = len(m.PhoneCodeDesc)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *SendChangePhoneCodeReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.AllowFlashcall {
		n += 2
	}
	if m.CurrentNumber {
		n += 2
	}
	if m.UserId != 0 {
		n += 1 + sovInfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovInfoserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *SignInReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovInfoserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *SignInOrReqitsterResult) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovInfoserver(uint64(m.ErrorCode))
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *SignUpReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovInfoserver(uint64(m.KeyId))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.IsBot {
		n += 2
	}
	if m.BotInfoVersion != 0 {
		n += 1 + sovInfoserver(uint64(m.BotInfoVersion))
	}
	if m.BotChatHistory {
		n += 2
	}
	if m.BotNoChats {
		n += 2
	}
	if m.DcId != 0 {
		n += 1 + sovInfoserver(uint64(m.DcId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *AuthSignUpResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *ChangePhoneReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovInfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovInfoserver(uint64(m.KeyId))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *ChangePhoneResult) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovInfoserver(uint64(m.ErrorCode))
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *AuthCheckPasswdReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovInfoserver(uint64(m.UserId))
	}
	l = len(m.PasswordHash)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovInfoserver(uint64(m.KeyId))
	}
	return n
}

func (m *AuthCheckPasswdResult) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovInfoserver(uint64(m.ErrorCode))
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *AuthImportAuthorizationReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovInfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovInfoserver(uint64(m.KeyId))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Dcid != 0 {
		n += 1 + sovInfoserver(uint64(m.Dcid))
	}
	if m.Authid != 0 {
		n += 1 + sovInfoserver(uint64(m.Authid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *AuthImportAuthorizationResult) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovInfoserver(uint64(m.ErrorCode))
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *AuthExportAuthorizationReq) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovInfoserver(uint64(m.Userid))
	}
	if m.Keyid != 0 {
		n += 1 + sovInfoserver(uint64(m.Keyid))
	}
	if m.Dcid != 0 {
		n += 1 + sovInfoserver(uint64(m.Dcid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *AuthExportAuthorizationResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *AuthRecoverPasswdReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovInfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovInfoserver(uint64(m.KeyId))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *AuthRecoverPasswdResult) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovInfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ContactsSearchReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovInfoserver(uint64(m.UserId))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovInfoserver(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *ContactsSearcResult) Size() (n int) {
	var l int
	_ = l
	if m.Users != nil {
		l = m.Users.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if len(m.Channel) > 0 {
		for _, b := range m.Channel {
			l = len(b)
			n += 1 + l + sovInfoserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovInfoserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *AuthRequestPasswordRecoveryReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovInfoserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *AuthRequestPasswordRecoveryResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	l = len(m.EmailPattern)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *PhonecallSessionInformation) Size() (n int) {
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovInfoserver(uint64(m.SessionId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovInfoserver(uint64(m.AccessHash))
	}
	if m.AdminId != 0 {
		n += 1 + sovInfoserver(uint64(m.AdminId))
	}
	if m.AdminKeyid != 0 {
		n += 1 + sovInfoserver(uint64(m.AdminKeyid))
	}
	if m.ParticipantId != 0 {
		n += 1 + sovInfoserver(uint64(m.ParticipantId))
	}
	if m.ParticipantKeyid != 0 {
		n += 1 + sovInfoserver(uint64(m.ParticipantKeyid))
	}
	l = len(m.GB)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.CallRequestedAt != 0 {
		n += 1 + sovInfoserver(uint64(m.CallRequestedAt))
	}
	if m.CallReceivedAt != 0 {
		n += 1 + sovInfoserver(uint64(m.CallReceivedAt))
	}
	if m.CallConfirmedAt != 0 {
		n += 1 + sovInfoserver(uint64(m.CallConfirmedAt))
	}
	l = len(m.PeerTag)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.CurStatus != 0 {
		n += 1 + sovInfoserver(uint64(m.CurStatus))
	}
	return n
}

func (m *PhonecallEndpointInformation) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovInfoserver(uint64(m.Id))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.Ipv6)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovInfoserver(uint64(m.Port))
	}
	return n
}

func (m *PhonecallAllocSessionReq) Size() (n int) {
	var l int
	_ = l
	if m.CallerId != 0 {
		n += 1 + sovInfoserver(uint64(m.CallerId))
	}
	if m.ReceiverId != 0 {
		n += 1 + sovInfoserver(uint64(m.ReceiverId))
	}
	if m.CallerKeyid != 0 {
		n += 1 + sovInfoserver(uint64(m.CallerKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *PhonecallAllocSessionResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	if m.SessionId != 0 {
		n += 1 + sovInfoserver(uint64(m.SessionId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovInfoserver(uint64(m.AccessHash))
	}
	return n
}

func (m *PhonecallOnReceivedCallCheckReq) Size() (n int) {
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovInfoserver(uint64(m.SessionId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovInfoserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *PhonecallOnReceivedCallCheckResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	return n
}

func (m *PhonecallOnAcceptCallUpdateReq) Size() (n int) {
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovInfoserver(uint64(m.SessionId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovInfoserver(uint64(m.AccessHash))
	}
	if m.ParticipantId != 0 {
		n += 1 + sovInfoserver(uint64(m.ParticipantId))
	}
	if m.ParticipantKeyid != 0 {
		n += 1 + sovInfoserver(uint64(m.ParticipantKeyid))
	}
	l = len(m.GB)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *PhonecallOnAcceptCallUpdateResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *PhonecallOnConfirmCallUpdateReq) Size() (n int) {
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovInfoserver(uint64(m.SessionId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovInfoserver(uint64(m.AccessHash))
	}
	if m.AdminId != 0 {
		n += 1 + sovInfoserver(uint64(m.AdminId))
	}
	if m.AdminKeyid != 0 {
		n += 1 + sovInfoserver(uint64(m.AdminKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *PhonecallOnConfirmCallUpdateResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *PhonecallOnDiscardCallUpdateReq) Size() (n int) {
	var l int
	_ = l
	if m.DiscarderId != 0 {
		n += 1 + sovInfoserver(uint64(m.DiscarderId))
	}
	if m.SessionId != 0 {
		n += 1 + sovInfoserver(uint64(m.SessionId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovInfoserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *PhonecallOnDiscardCallUpdateResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *PhonecallQueryEndpointsReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *PhonecallQueryEndpointsResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	if len(m.Informations) > 0 {
		for _, e := range m.Informations {
			l = e.Size()
			n += 1 + l + sovInfoserver(uint64(l))
		}
	}
	return n
}

func (m *AuthCancelCodeReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovInfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovInfoserver(uint64(m.KeyId))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *AuthCancelCodeResult) Size() (n int) {
	var l int
	_ = l
	if m.CodeCanceled {
		n += 2
	}
	return n
}

func (m *Langpack) Size() (n int) {
	var l int
	_ = l
	if m.Platform != 0 {
		n += 1 + sovInfoserver(uint64(m.Platform))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.NativeName)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.FromVersion != 0 {
		n += 1 + sovInfoserver(uint64(m.FromVersion))
	}
	if m.Version != 0 {
		n += 1 + sovInfoserver(uint64(m.Version))
	}
	l = len(m.Strings)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *LangpackList) Size() (n int) {
	var l int
	_ = l
	if len(m.Vector) > 0 {
		for _, e := range m.Vector {
			l = e.Size()
			n += 1 + l + sovInfoserver(uint64(l))
		}
	}
	return n
}

func (m *LangpackStrings) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *LangpackStringsList) Size() (n int) {
	var l int
	_ = l
	if len(m.Vector) > 0 {
		for _, e := range m.Vector {
			l = e.Size()
			n += 1 + l + sovInfoserver(uint64(l))
		}
	}
	return n
}

func (m *LangPacktReq) Size() (n int) {
	var l int
	_ = l
	if m.Platform != 0 {
		n += 1 + sovInfoserver(uint64(m.Platform))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.FromVersion != 0 {
		n += 1 + sovInfoserver(uint64(m.FromVersion))
	}
	l = len(m.Keystrings)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovInfoserver(uint64(m.Type))
	}
	return n
}

func (m *VirtualPhoneNumberInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.VirtualPhone)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.RealPhone)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Activated != 0 {
		n += 1 + sovInfoserver(uint64(m.Activated))
	}
	if m.BindTime != 0 {
		n += 1 + sovInfoserver(uint64(m.BindTime))
	}
	if m.ActivateTime != 0 {
		n += 1 + sovInfoserver(uint64(m.ActivateTime))
	}
	if m.ActivateAdminId != 0 {
		n += 1 + sovInfoserver(uint64(m.ActivateAdminId))
	}
	if m.BindAdminId != 0 {
		n += 1 + sovInfoserver(uint64(m.BindAdminId))
	}
	if m.OwnerId != 0 {
		n += 1 + sovInfoserver(uint64(m.OwnerId))
	}
	l = len(m.InitialPhoneCode)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *CmdVirtualPhoneNumberGenerateReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovInfoserver(uint64(m.Quantity))
	}
	if m.AdminId != 0 {
		n += 1 + sovInfoserver(uint64(m.AdminId))
	}
	if m.OwnerId != 0 {
		n += 1 + sovInfoserver(uint64(m.OwnerId))
	}
	return n
}

func (m *CmdVirtualPhoneNumberGenerateResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovInfoserver(uint64(l))
		}
	}
	return n
}

func (m *CmdVirtualPhoneNumberSpecialGenReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.SpecialNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.AdminId != 0 {
		n += 1 + sovInfoserver(uint64(m.AdminId))
	}
	if m.OwnerId != 0 {
		n += 1 + sovInfoserver(uint64(m.OwnerId))
	}
	return n
}

func (m *CmdVirtualPhoneNumberSpecialGenResult) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *CmdVirtualPhoneNumberBindRealPhoneNumberReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.VirtualPhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.RealPhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.AdminId != 0 {
		n += 1 + sovInfoserver(uint64(m.AdminId))
	}
	return n
}

func (m *CmdVirtualPhoneNumberBindRealPhoneNumberResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	l = len(m.Current)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.VirtualPhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.AdminId != 0 {
		n += 1 + sovInfoserver(uint64(m.AdminId))
	}
	return n
}

func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	l = len(m.BeforeDelete)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *CmdVirtualPhoneNumberQueryInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.VirtualPhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *CmdVirtualPhoneNumberQueryInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *CmdSysPhoneNumberBindRealPhoneNumberReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.SysNo)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *CmdSysPhoneNumberBindRealPhoneNumberResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	return n
}

func (m *CmdBlockSignInReq) Size() (n int) {
	var l int
	_ = l
	if len(m.PhoneNumbers) > 0 {
		for _, s := range m.PhoneNumbers {
			l = len(s)
			n += 1 + l + sovInfoserver(uint64(l))
		}
	}
	return n
}

func (m *CmdBlockSignInResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	return n
}

func (m *CmdUnblockSignInReq) Size() (n int) {
	var l int
	_ = l
	if len(m.PhoneNumbers) > 0 {
		for _, s := range m.PhoneNumbers {
			l = len(s)
			n += 1 + l + sovInfoserver(uint64(l))
		}
	}
	return n
}

func (m *CmdUnblockSignInResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	return n
}

func (m *CmdBlockSignUpReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CmdBlockSignUpResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	return n
}

func (m *CmdUnblockSignUpReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CmdUnblockSignUpResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	return n
}

func (m *ContactRevoleUserNameReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovInfoserver(uint64(m.SelfId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *ContactRevoleUserNameResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	return n
}

func (m *GetFullUserReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovInfoserver(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovInfoserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovInfoserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *GetFullUserResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Isblocked {
		n += 2
	}
	if m.PhoneCallsPrivate {
		n += 2
	}
	if m.PhoneCallsAvailable {
		n += 2
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.CommonChat != 0 {
		n += 1 + sovInfoserver(uint64(m.CommonChat))
	}
	if m.Errorcode != 0 {
		n += 1 + sovInfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *GetFullUserSimReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovInfoserver(uint64(m.SelfId))
	}
	if m.UserId != 0 {
		n += 1 + sovInfoserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovInfoserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *UserLocation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *GetFullUserSimResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Isblocked {
		n += 2
	}
	if m.PhoneCallsPrivate {
		n += 2
	}
	if m.PhoneCallsAvailable {
		n += 2
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.CommonChat != 0 {
		n += 1 + sovInfoserver(uint64(m.CommonChat))
	}
	if m.Gender != 0 {
		n += 1 + sovInfoserver(uint64(m.Gender))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Errorcode != 0 {
		n += 1 + sovInfoserver(uint64(m.Errorcode))
	}
	return n
}

func (m *AuthSignUpPasswordReq) Size() (n int) {
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.PwdHash)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *AuthSignUpPasswordResult) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	return n
}

func (m *AuthSignInPasswordReq) Size() (n int) {
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.PwdHash)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *AuthSignInPasswordResult) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	return n
}

func (m *AccountResetPasswordReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Forget {
		n += 2
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.CurrentPwdHash)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.NewPwdHash)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovInfoserver(uint64(m.KeyId))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *AccountResetPasswordResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInfoserver(uint64(m.Code))
	}
	return n
}

func (m *CheckDeviceBanReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.UniqueNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovInfoserver(uint64(m.KeyId))
	}
	return n
}

func (m *CheckDeviceBanResult) Size() (n int) {
	var l int
	_ = l
	if m.Banned {
		n += 2
	}
	return n
}

func (m *HeartbeatReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *HeartbeatResult) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *QueryDebugingUserIDReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *QueryDebugingUserIDResult) Size() (n int) {
	var l int
	_ = l
	if len(m.UserIdList) > 0 {
		l = 0
		for _, e := range m.UserIdList {
			l += sovInfoserver(uint64(e))
		}
		n += 1 + sovInfoserver(uint64(l)) + l
	}
	return n
}

func (m *GetUserChannelByUserNameReq) Size() (n int) {
	var l int
	_ = l
	if m.SelfId != 0 {
		n += 1 + sovInfoserver(uint64(m.SelfId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *GetUserChannelByUserNameResult) Size() (n int) {
	var l int
	_ = l
	if m.Uinfo != nil {
		l = m.Uinfo.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.ChannelInfo)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovInfoserver(uint64(m.Type))
	}
	if m.Errcode != 0 {
		n += 1 + sovInfoserver(uint64(m.Errcode))
	}
	return n
}

func (m *DeleteAuthKeysReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func (m *DeleteAuthKeysResult) Size() (n int) {
	var l int
	_ = l
	if len(m.KeyId) > 0 {
		l = 0
		for _, e := range m.KeyId {
			l += sovInfoserver(uint64(e))
		}
		n += 1 + sovInfoserver(uint64(l)) + l
	}
	return n
}

func (m *SendSetPasswordPhoneCodeReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovInfoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovInfoserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	l = len(m.LocalPhone)
	if l > 0 {
		n += 1 + l + sovInfoserver(uint64(l))
	}
	return n
}

func sovInfoserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInfoserver(x uint64) (n int) {
	return sovInfoserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SendCodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sendCodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sendCodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNumber", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurrentNumber = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiId", wireType)
			}
			m.ApiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendCodeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendCodeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendCodeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (SendCodeResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneRegister", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneRegister = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCodeType", wireType)
			}
			m.NextCodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextCodeType |= (CodeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOut", wireType)
			}
			m.TimeOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeOut |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTypeApp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendTypeApp = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendChangePhoneCodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sendChangePhoneCodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sendChangePhoneCodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowFlashcall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowFlashcall = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNumber", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurrentNumber = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignInReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignInOrReqitsterResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInOrReqitsterResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInOrReqitsterResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (SignInOrReqitsterResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignUpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignUpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignUpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfoVersion", wireType)
			}
			m.BotInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotInfoVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotChatHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotChatHistory = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotNoChats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotNoChats = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthSignUpResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthSignUpResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthSignUpResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (AuthSignUpResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePhoneReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePhoneReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePhoneReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePhoneResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePhoneResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePhoneResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ChangePhoneResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthCheckPasswdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthCheckPasswdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthCheckPasswdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordHash = append(m.PasswordHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PasswordHash == nil {
				m.PasswordHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthCheckPasswdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthCheckPasswdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthCheckPasswdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (AuthCheckPasswdResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthImportAuthorizationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthImportAuthorizationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthImportAuthorizationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dcid", wireType)
			}
			m.Dcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authid", wireType)
			}
			m.Authid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Authid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthImportAuthorizationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthImportAuthorizationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthImportAuthorizationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (AuthImportAuthorizationResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthExportAuthorizationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthExportAuthorizationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthExportAuthorizationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyid", wireType)
			}
			m.Keyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dcid", wireType)
			}
			m.Dcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthExportAuthorizationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthExportAuthorizationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthExportAuthorizationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (AuthExportAuthorizationResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthRecoverPasswdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthRecoverPasswdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthRecoverPasswdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthRecoverPasswdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthRecoverPasswdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthRecoverPasswdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (AuthRecoverPasswdResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsSearchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsSearchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsSearchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsSearcResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsSearcResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsSearcResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Users == nil {
				m.Users = &UserInfoArray{}
			}
			if err := m.Users.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = append(m.Channel, make([]byte, postIndex-iNdEx))
			copy(m.Channel[len(m.Channel)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ContactsSearcResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthRequestPasswordRecoveryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthRequestPasswordRecoveryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthRequestPasswordRecoveryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthRequestPasswordRecoveryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthRequestPasswordRecoveryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthRequestPasswordRecoveryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (AuthRequestPasswordRecoveryResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailPattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailPattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhonecallSessionInformation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhonecallSessionInformation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhonecallSessionInformation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminKeyid", wireType)
			}
			m.AdminKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantId", wireType)
			}
			m.ParticipantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantKeyid", wireType)
			}
			m.ParticipantKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GB", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GB = append(m.GB[:0], dAtA[iNdEx:postIndex]...)
			if m.GB == nil {
				m.GB = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallRequestedAt", wireType)
			}
			m.CallRequestedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallRequestedAt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallReceivedAt", wireType)
			}
			m.CallReceivedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallReceivedAt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallConfirmedAt", wireType)
			}
			m.CallConfirmedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallConfirmedAt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerTag", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerTag = append(m.PeerTag[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerTag == nil {
				m.PeerTag = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurStatus", wireType)
			}
			m.CurStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurStatus |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhonecallEndpointInformation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhonecallEndpointInformation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhonecallEndpointInformation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhonecallAllocSessionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhonecallAllocSessionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhonecallAllocSessionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerId", wireType)
			}
			m.CallerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverId", wireType)
			}
			m.ReceiverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerKeyid", wireType)
			}
			m.CallerKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallerKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhonecallAllocSessionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhonecallAllocSessionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhonecallAllocSessionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (PhonecallAllocSessionResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhonecallOnReceivedCallCheckReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhonecallOnReceivedCallCheckReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhonecallOnReceivedCallCheckReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhonecallOnReceivedCallCheckResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhonecallOnReceivedCallCheckResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhonecallOnReceivedCallCheckResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (PhonecallOnReceivedCallCheckResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhonecallOnAcceptCallUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhonecallOnAcceptCallUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhonecallOnAcceptCallUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantId", wireType)
			}
			m.ParticipantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantKeyid", wireType)
			}
			m.ParticipantKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GB", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GB = append(m.GB[:0], dAtA[iNdEx:postIndex]...)
			if m.GB == nil {
				m.GB = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhonecallOnAcceptCallUpdateResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhonecallOnAcceptCallUpdateResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhonecallOnAcceptCallUpdateResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (PhonecallOnAcceptCallUpdateResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &PhonecallSessionInformation{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhonecallOnConfirmCallUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhonecallOnConfirmCallUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhonecallOnConfirmCallUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminKeyid", wireType)
			}
			m.AdminKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhonecallOnConfirmCallUpdateResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhonecallOnConfirmCallUpdateResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhonecallOnConfirmCallUpdateResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (PhonecallOnConfirmCallUpdateResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &PhonecallSessionInformation{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhonecallOnDiscardCallUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhonecallOnDiscardCallUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhonecallOnDiscardCallUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscarderId", wireType)
			}
			m.DiscarderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscarderId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhonecallOnDiscardCallUpdateResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhonecallOnDiscardCallUpdateResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhonecallOnDiscardCallUpdateResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (PhonecallOnDiscardCallUpdateResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &PhonecallSessionInformation{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhonecallQueryEndpointsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhonecallQueryEndpointsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhonecallQueryEndpointsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhonecallQueryEndpointsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhonecallQueryEndpointsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhonecallQueryEndpointsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (PhonecallQueryEndpointsResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Informations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Informations = append(m.Informations, &PhonecallEndpointInformation{})
			if err := m.Informations[len(m.Informations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthCancelCodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthCancelCodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthCancelCodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthCancelCodeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthCancelCodeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthCancelCodeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeCanceled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CodeCanceled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Langpack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Langpack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Langpack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromVersion", wireType)
			}
			m.FromVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strings", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strings = append(m.Strings[:0], dAtA[iNdEx:postIndex]...)
			if m.Strings == nil {
				m.Strings = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LangpackList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LangpackList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LangpackList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vector = append(m.Vector, &Langpack{})
			if err := m.Vector[len(m.Vector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LangpackStrings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LangpackStrings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LangpackStrings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LangpackStringsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LangpackStringsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LangpackStringsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vector = append(m.Vector, &LangpackStrings{})
			if err := m.Vector[len(m.Vector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LangPacktReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LangPacktReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LangPacktReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromVersion", wireType)
			}
			m.FromVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keystrings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keystrings = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (LangPacktReq_ReqType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualPhoneNumberInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualPhoneNumberInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualPhoneNumberInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
			}
			m.Activated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Activated |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindTime", wireType)
			}
			m.BindTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivateTime", wireType)
			}
			m.ActivateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivateAdminId", wireType)
			}
			m.ActivateAdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivateAdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindAdminId", wireType)
			}
			m.BindAdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindAdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialPhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialPhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdVirtualPhoneNumberGenerateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberGenerateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberGenerateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdVirtualPhoneNumberGenerateResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberGenerateResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberGenerateResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (CmdVirtualPhoneNumberGenerateResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &VirtualPhoneNumberInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdVirtualPhoneNumberSpecialGenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberSpecialGenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberSpecialGenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdVirtualPhoneNumberSpecialGenResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberSpecialGenResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberSpecialGenResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &VirtualPhoneNumberInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdVirtualPhoneNumberBindRealPhoneNumberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberBindRealPhoneNumberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberBindRealPhoneNumberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualPhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealPhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdVirtualPhoneNumberBindRealPhoneNumberResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberBindRealPhoneNumberResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberBindRealPhoneNumberResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Current = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberUnbindRealPhoneNumberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberUnbindRealPhoneNumberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualPhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberUnbindRealPhoneNumberResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberUnbindRealPhoneNumberResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeDelete", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeforeDelete = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdVirtualPhoneNumberQueryInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberQueryInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberQueryInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualPhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdVirtualPhoneNumberQueryInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberQueryInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdVirtualPhoneNumberQueryInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (CmdVirtualPhoneNumberQueryInfoResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &VirtualPhoneNumberInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdSysPhoneNumberBindRealPhoneNumberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdSysPhoneNumberBindRealPhoneNumberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdSysPhoneNumberBindRealPhoneNumberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SysNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdSysPhoneNumberBindRealPhoneNumberResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdSysPhoneNumberBindRealPhoneNumberResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdSysPhoneNumberBindRealPhoneNumberResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdBlockSignInReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdBlockSignInReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdBlockSignInReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumbers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumbers = append(m.PhoneNumbers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdBlockSignInResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdBlockSignInResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdBlockSignInResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (CmdBlockSignInResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdUnblockSignInReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdUnblockSignInReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdUnblockSignInReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumbers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumbers = append(m.PhoneNumbers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdUnblockSignInResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdUnblockSignInResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdUnblockSignInResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (CmdUnblockSignInResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdBlockSignUpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdBlockSignUpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdBlockSignUpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdBlockSignUpResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdBlockSignUpResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdBlockSignUpResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (CmdBlockSignUpResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdUnblockSignUpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdUnblockSignUpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdUnblockSignUpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdUnblockSignUpResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdUnblockSignUpResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdUnblockSignUpResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (CmdUnblockSignUpResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRevoleUserNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRevoleUserNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRevoleUserNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRevoleUserNameResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRevoleUserNameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRevoleUserNameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = append(m.Channel[:0], dAtA[iNdEx:postIndex]...)
			if m.Channel == nil {
				m.Channel = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (ContactRevoleUserNameResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFullUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFullUserResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullUserResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullUserResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isblocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isblocked = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCallsPrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneCallsPrivate = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCallsAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneCallsAvailable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonChat", wireType)
			}
			m.CommonChat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommonChat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFullUserSimReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullUserSimReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullUserSimReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFullUserSimResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullUserSimResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullUserSimResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isblocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isblocked = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCallsPrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneCallsPrivate = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCallsAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneCallsAvailable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonChat", wireType)
			}
			m.CommonChat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommonChat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &UserLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthSignUpPasswordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthSignUpPasswordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthSignUpPasswordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &SignUpReq{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PwdHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PwdHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthSignUpPasswordResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthSignUpPasswordResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthSignUpPasswordResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (AuthSignUpPasswordResult_Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthSignInPasswordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthSignInPasswordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthSignInPasswordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &SignInReq{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PwdHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PwdHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthSignInPasswordResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthSignInPasswordResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthSignInPasswordResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (AuthSignInPasswordResult_Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountResetPasswordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountResetPasswordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountResetPasswordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forget", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Forget = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPwdHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentPwdHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPwdHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPwdHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountResetPasswordResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountResetPasswordResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountResetPasswordResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (AccountResetPasswordResult_Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckDeviceBanReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckDeviceBanReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckDeviceBanReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckDeviceBanResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckDeviceBanResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckDeviceBanResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Banned = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDebugingUserIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDebugingUserIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDebugingUserIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDebugingUserIDResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDebugingUserIDResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDebugingUserIDResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIdList = append(m.UserIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIdList = append(m.UserIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserChannelByUserNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserChannelByUserNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserChannelByUserNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserChannelByUserNameResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserChannelByUserNameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserChannelByUserNameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uinfo == nil {
				m.Uinfo = &UserInfo{}
			}
			if err := m.Uinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelInfo = append(m.ChannelInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.ChannelInfo == nil {
				m.ChannelInfo = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errcode", wireType)
			}
			m.Errcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errcode |= (GetUserChannelByUserNameResult_ErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAuthKeysReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAuthKeysReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAuthKeysReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAuthKeysResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAuthKeysResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAuthKeysResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyId = append(m.KeyId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInfoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInfoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInfoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyId = append(m.KeyId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendSetPasswordPhoneCodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sendSetPasswordPhoneCodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sendSetPasswordPhoneCodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInfoserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInfoserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfoserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInfoserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInfoserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInfoserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInfoserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInfoserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/infoserver.proto", fileDescriptorInfoserver)
}

var fileDescriptorInfoserver = []byte{
	// 4999 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5c, 0x5b, 0x8c, 0x1c, 0x57,
	0x5a, 0xee, 0xea, 0xcb, 0x4c, 0xf7, 0x3f, 0x3d, 0x33, 0x3d, 0x67, 0x66, 0xec, 0x76, 0xdb, 0x1e,
	0x8f, 0x8f, 0xe3, 0xd8, 0x71, 0x92, 0x49, 0xd6, 0x89, 0x42, 0x2e, 0xbb, 0x5a, 0xb5, 0x67, 0x7c,
	0x99, 0xc4, 0x19, 0x3b, 0x35, 0x9e, 0x84, 0x15, 0x97, 0x56, 0x75, 0xd5, 0x99, 0x99, 0x92, 0xbb,
	0xab, 0xaa, 0xab, 0xaa, 0xc7, 0xe9, 0x48, 0x48, 0x59, 0xad, 0x76, 0x59, 0x24, 0xc4, 0x03, 0x5a,
	0x84, 0x78, 0xda, 0xdd, 0x27, 0x40, 0x80, 0x20, 0xe2, 0x05, 0xc1, 0x1b, 0x0f, 0x80, 0x04, 0x02,
	0x5e, 0x40, 0xbc, 0xac, 0x84, 0x22, 0x21, 0x24, 0x40, 0xc0, 0x33, 0x42, 0x80, 0xce, 0xa5, 0xaa,
	0xeb, 0xd4, 0xa5, 0xbb, 0x6b, 0xec, 0x24, 0x0f, 0xbc, 0xd8, 0x7d, 0xfe, 0x3a, 0xd7, 0xef, 0xbf,
	0x9c, 0x73, 0xfe, 0xff, 0x3f, 0x03, 0x0f, 0x8f, 0x4c, 0xbf, 0xa7, 0x75, 0xb7, 0xf4, 0x63, 0xcd,
	0xf7, 0x88, 0x7b, 0x42, 0xdc, 0x2d, 0xb3, 0xff, 0x8a, 0x69, 0xf9, 0xc4, 0x3d, 0xd4, 0x74, 0xe2,
	0xb8, 0x76, 0x77, 0x78, 0xf8, 0x8a, 0x63, 0xfb, 0x9a, 0x6f, 0x3b, 0xae, 0xed, 0xd3, 0xa2, 0xf7,
	0x8a, 0x69, 0x1d, 0xda, 0xbc, 0x76, 0xe4, 0xe7, 0x16, 0xfb, 0x8e, 0x60, 0x4c, 0x69, 0x3d, 0x75,
	0xef, 0x43, 0x8f, 0xb8, 0xd1, 0xde, 0x5b, 0xf7, 0x4e, 0xd5, 0xa3, 0xd3, 0xd5, 0xed, 0x7e, 0x5f,
	0xfc, 0xc7, 0x7b, 0xc2, 0x7f, 0x54, 0x84, 0x05, 0x8f, 0x58, 0xc6, 0xb6, 0x6d, 0x10, 0x95, 0x0c,
	0xd0, 0x26, 0x2c, 0x3c, 0x3c, 0xb6, 0x2d, 0xb2, 0x37, 0xec, 0x77, 0x89, 0xdb, 0x54, 0x36, 0x95,
	0xeb, 0x35, 0x35, 0x4a, 0x42, 0xcf, 0xc1, 0xe2, 0xf6, 0xd0, 0x75, 0x89, 0xe5, 0x8b, 0x3a, 0xc5,
	0x4d, 0xe5, 0x7a, 0x55, 0x95, 0x89, 0x68, 0x0d, 0x2a, 0x6d, 0xc7, 0xdc, 0x35, 0x9a, 0xa5, 0x4d,
	0xe5, 0x7a, 0x45, 0xe5, 0x05, 0xd4, 0x84, 0xf9, 0xb6, 0x63, 0xde, 0xd3, 0xbc, 0xe3, 0x66, 0x99,
	0xf5, 0x1c, 0x14, 0x51, 0x0b, 0xaa, 0xf7, 0x35, 0xeb, 0x88, 0x4e, 0xa3, 0x59, 0x61, 0x9f, 0xc2,
	0x32, 0x3a, 0x03, 0x73, 0x14, 0x81, 0x5d, 0xa3, 0x39, 0xc7, 0x3a, 0x13, 0x25, 0x3a, 0xc6, 0x63,
	0x32, 0xda, 0x35, 0x9a, 0xf3, 0x9b, 0xca, 0xf5, 0x92, 0xca, 0x0b, 0xe8, 0x0a, 0x54, 0x0c, 0xd2,
	0x1d, 0x1e, 0x35, 0xab, 0x9b, 0xca, 0xf5, 0x85, 0x9b, 0x8b, 0x5b, 0x62, 0xbd, 0x3b, 0x94, 0xa8,
	0xf2, 0x6f, 0xe8, 0x32, 0xd4, 0x75, 0x7b, 0x68, 0xf9, 0xee, 0xa8, 0xa3, 0xd3, 0x21, 0x6b, 0x7c,
	0x9d, 0x82, 0xc6, 0x46, 0xbd, 0x04, 0x0b, 0x3d, 0x5b, 0xd7, 0x7a, 0x1d, 0x87, 0x2e, 0xbe, 0x09,
	0xac, 0x06, 0x30, 0x12, 0x83, 0x03, 0xff, 0xb0, 0x0c, 0x4b, 0xfb, 0x21, 0x74, 0xde, 0xb0, 0xe7,
	0xd3, 0x99, 0xf2, 0x5f, 0x0c, 0xb8, 0xaa, 0x2a, 0x4a, 0x68, 0x1b, 0x6a, 0xb7, 0x5d, 0xd7, 0x76,
	0xd9, 0xf2, 0x28, 0x5e, 0x4b, 0x37, 0xaf, 0x6e, 0x45, 0x64, 0x46, 0xee, 0x66, 0x8b, 0xff, 0xc7,
	0x08, 0xe3, 0x76, 0x14, 0x78, 0x36, 0xb0, 0x4a, 0x8e, 0x4c, 0xcf, 0x27, 0x2e, 0x83, 0xb6, 0xaa,
	0xca, 0x44, 0xf4, 0x26, 0xd4, 0xf7, 0xc8, 0xc7, 0xac, 0xf1, 0xa3, 0x91, 0x43, 0x18, 0xce, 0x4b,
	0x37, 0xd7, 0xa2, 0xa3, 0x05, 0xdf, 0x54, 0xa9, 0x66, 0xd8, 0x3f, 0x25, 0x30, 0x16, 0x71, 0x3e,
	0xc8, 0x44, 0xca, 0xc2, 0x47, 0x66, 0x9f, 0x3c, 0x18, 0xfa, 0x82, 0x1b, 0x41, 0x91, 0x8a, 0x0e,
	0x5d, 0x07, 0xed, 0xab, 0xed, 0x38, 0x8c, 0x29, 0x55, 0x35, 0x4a, 0x92, 0x46, 0xd8, 0x21, 0x9e,
	0xce, 0x58, 0x14, 0x1d, 0x81, 0x12, 0xf1, 0x9f, 0x2b, 0x00, 0x63, 0x04, 0xd0, 0x02, 0xcc, 0xef,
	0x0f, 0x75, 0x9d, 0x78, 0x5e, 0xa3, 0x80, 0x56, 0x60, 0x71, 0x97, 0x4a, 0xb9, 0xa5, 0xf5, 0x18,
	0x30, 0x0d, 0x85, 0x92, 0x58, 0xfb, 0x07, 0xba, 0x3e, 0x74, 0x4c, 0x62, 0x34, 0x8a, 0x08, 0xc3,
	0xc6, 0x87, 0xa6, 0xeb, 0x0f, 0x05, 0xa7, 0x6e, 0xf5, 0x6c, 0xfd, 0x31, 0x31, 0x1e, 0x91, 0xbe,
	0x63, 0xbb, 0x9a, 0x6b, 0xf6, 0x46, 0x8d, 0x12, 0x3a, 0x03, 0x28, 0x22, 0xd5, 0xbb, 0xd6, 0x89,
	0xd6, 0x33, 0x8d, 0x46, 0x19, 0x35, 0x61, 0xad, 0xad, 0x33, 0x39, 0x78, 0x5f, 0x73, 0x1f, 0x13,
	0x63, 0x87, 0xf4, 0x88, 0x4f, 0x8c, 0x46, 0x05, 0x2d, 0x42, 0xed, 0x4e, 0xcf, 0xb6, 0x8d, 0x8f,
	0x34, 0xd3, 0x6f, 0xcc, 0xd1, 0xe2, 0xfe, 0xfb, 0xfb, 0x77, 0x34, 0xb3, 0x47, 0x8c, 0xc6, 0x3c,
	0x42, 0xb0, 0x74, 0xe0, 0x11, 0x57, 0x25, 0x9e, 0xef, 0x9a, 0x3a, 0x6d, 0x51, 0xc5, 0x3f, 0x2a,
	0xc2, 0x19, 0xa6, 0x5c, 0xc7, 0x9a, 0x75, 0x44, 0xc2, 0x55, 0xce, 0xa6, 0x67, 0xcf, 0xc3, 0x52,
	0xbb, 0xd7, 0xb3, 0x9f, 0xdc, 0xe9, 0x69, 0xde, 0xb1, 0xae, 0xf5, 0x7a, 0x42, 0xd1, 0x62, 0x54,
	0x74, 0x15, 0x96, 0x84, 0xea, 0x75, 0x2c, 0xde, 0x59, 0x29, 0x4d, 0x21, 0xc7, 0x4a, 0x54, 0x4e,
	0x57, 0xa2, 0x4a, 0xaa, 0x12, 0xcd, 0xe5, 0x50, 0xa2, 0xf9, 0xa9, 0x4a, 0x54, 0x4d, 0x28, 0xd1,
	0x7f, 0x2a, 0x50, 0xdb, 0x37, 0x8f, 0xac, 0x5d, 0x6b, 0x66, 0xeb, 0x23, 0x0b, 0x69, 0x31, 0x4d,
	0x48, 0x2f, 0x40, 0x2d, 0x24, 0x30, 0x38, 0x6a, 0xea, 0x98, 0xf0, 0x55, 0x2f, 0xf9, 0xcf, 0x8a,
	0x70, 0x96, 0x2f, 0xf9, 0x81, 0xab, 0x92, 0x81, 0xe9, 0x53, 0xbd, 0x15, 0x86, 0xe2, 0x55, 0xa8,
	0x32, 0xbe, 0x58, 0x87, 0x36, 0x5b, 0xfd, 0x82, 0xac, 0xb9, 0xc1, 0x37, 0x35, 0xac, 0x85, 0xee,
	0x27, 0x4d, 0xcb, 0x96, 0x64, 0x5a, 0xd2, 0x47, 0xca, 0xb0, 0x31, 0x63, 0x03, 0x56, 0x8a, 0x1a,
	0x30, 0xfc, 0xab, 0xf9, 0x74, 0xf2, 0x1c, 0xac, 0x47, 0x98, 0x76, 0x60, 0xd9, 0x63, 0xdd, 0x44,
	0xb0, 0xb4, 0xad, 0x39, 0xbe, 0x7e, 0xac, 0x05, 0x3a, 0x57, 0xa2, 0xb4, 0x87, 0x9a, 0xe7, 0x3d,
	0xb1, 0x5d, 0x63, 0x8f, 0x10, 0x83, 0x50, 0x3d, 0x1c, 0xd7, 0xbb, 0xfd, 0xb1, 0x63, 0xba, 0x29,
	0x1a, 0x88, 0xff, 0xaa, 0xc4, 0x65, 0xe7, 0xc0, 0xf9, 0xaa, 0x65, 0xe7, 0x02, 0xd4, 0xee, 0x98,
	0xae, 0xe7, 0xef, 0x69, 0x7d, 0xc2, 0xe4, 0xa7, 0xa6, 0x8e, 0x09, 0x7c, 0x6f, 0x13, 0x1f, 0xe7,
	0x83, 0xbd, 0x4d, 0x7c, 0x5b, 0x87, 0x39, 0xd3, 0xeb, 0x74, 0x6d, 0x9f, 0x09, 0x4a, 0x55, 0xad,
	0x98, 0xde, 0x2d, 0xdb, 0x47, 0xd7, 0xa1, 0xd1, 0xb5, 0xfd, 0x0e, 0xe5, 0x63, 0xe7, 0x84, 0xb8,
	0x9e, 0x69, 0x5b, 0x6c, 0x8f, 0xaa, 0xa8, 0x4b, 0x5d, 0xdb, 0xa7, 0x8c, 0xff, 0x90, 0x53, 0x83,
	0x9a, 0xf4, 0x24, 0xd0, 0x39, 0x36, 0x3d, 0xdf, 0x76, 0x47, 0x6c, 0xaf, 0xaa, 0xb2, 0x9a, 0xdb,
	0xc7, 0x9a, 0x7f, 0x8f, 0x53, 0xd1, 0x26, 0xd4, 0x69, 0x4d, 0xcb, 0x66, 0x95, 0xbd, 0xe6, 0x02,
	0xab, 0x05, 0x5d, 0xdb, 0xdf, 0xb3, 0x69, 0x3d, 0x0f, 0xad, 0x42, 0xc5, 0xd0, 0x3b, 0xa6, 0xd1,
	0xac, 0xb3, 0xa1, 0xca, 0x86, 0x1e, 0xd5, 0x8b, 0xc5, 0x1c, 0x7a, 0xb1, 0x34, 0x55, 0x2f, 0x96,
	0x13, 0x7a, 0xf1, 0x07, 0x45, 0x68, 0xb4, 0x87, 0xfe, 0x71, 0xc0, 0x52, 0xa6, 0x10, 0xef, 0x40,
	0x99, 0x75, 0xa8, 0x30, 0xc9, 0xbe, 0x16, 0x95, 0xec, 0x78, 0xdd, 0xa8, 0x48, 0xb3, 0x46, 0x92,
	0x36, 0x15, 0x67, 0xd1, 0x26, 0xfc, 0xbb, 0xf9, 0xe4, 0x3c, 0x7d, 0x13, 0x29, 0xa2, 0xb3, 0xb0,
	0x1a, 0xa1, 0x87, 0x3b, 0x53, 0x29, 0x45, 0xaa, 0xcb, 0x29, 0x1a, 0x91, 0xd8, 0x6b, 0xce, 0x00,
	0x12, 0x2b, 0xb5, 0xbb, 0xb6, 0x2f, 0xf6, 0xb3, 0xc6, 0x3c, 0xfe, 0x95, 0x22, 0x2c, 0x45, 0x36,
	0x17, 0xaa, 0x06, 0x63, 0x3b, 0xaf, 0xa4, 0xdb, 0xf9, 0x62, 0x54, 0x70, 0x2f, 0x43, 0x9d, 0xb5,
	0x8c, 0x6e, 0x1d, 0xd3, 0xb4, 0xa6, 0x3c, 0x55, 0x6b, 0x2a, 0x71, 0xad, 0xf9, 0xd2, 0x6c, 0xeb,
	0x6f, 0x15, 0x61, 0x45, 0x02, 0xe4, 0x94, 0x56, 0xf5, 0x4e, 0xd2, 0xaa, 0x5e, 0x97, 0x8e, 0x50,
	0xf1, 0x31, 0x72, 0xda, 0xd3, 0x4f, 0xf3, 0xc9, 0x59, 0x86, 0x3c, 0x15, 0xd1, 0x1a, 0x34, 0x42,
	0x94, 0x03, 0x89, 0x2a, 0x49, 0xd4, 0xf1, 0xc9, 0x46, 0x92, 0xa9, 0x0a, 0xfe, 0x65, 0x05, 0x10,
	0x55, 0xa1, 0xed, 0x63, 0xa2, 0x3f, 0x66, 0xe6, 0xd7, 0x10, 0xf2, 0x73, 0x20, 0xc9, 0x0f, 0x2f,
	0x21, 0x0c, 0xf5, 0xc0, 0x46, 0x87, 0xb6, 0xb3, 0xae, 0x4a, 0xb4, 0x31, 0x9b, 0x4b, 0x13, 0xd8,
	0xbc, 0x0e, 0x73, 0x8f, 0xc9, 0x88, 0x5a, 0x19, 0x2a, 0x48, 0x65, 0x21, 0x89, 0xf8, 0xdf, 0x15,
	0x58, 0x4f, 0x4c, 0xe7, 0x94, 0xdc, 0x7b, 0x37, 0xc9, 0xbd, 0x97, 0xe2, 0x96, 0x23, 0x31, 0x4e,
	0x4e, 0x0e, 0x7e, 0x33, 0xef, 0x21, 0xf5, 0x23, 0xd7, 0xb6, 0x8e, 0x02, 0xb8, 0x1a, 0x45, 0xfc,
	0x99, 0x02, 0x2d, 0x3a, 0x91, 0x5d, 0x7a, 0x2a, 0xf5, 0xe9, 0x2f, 0xdb, 0x35, 0x3f, 0xd1, 0x7c,
	0xd3, 0xb6, 0xf2, 0xeb, 0xf1, 0x1a, 0x54, 0x6e, 0x8d, 0x7c, 0xe2, 0xb1, 0x49, 0xd6, 0x55, 0x5e,
	0x40, 0x08, 0xca, 0x86, 0x6e, 0x06, 0x27, 0x3e, 0xf6, 0x9b, 0xf6, 0xab, 0x0d, 0xfd, 0x63, 0x93,
	0xef, 0x60, 0x15, 0x55, 0x94, 0x66, 0x52, 0x51, 0xfc, 0xaf, 0x0a, 0x5c, 0xcc, 0x9c, 0xf3, 0x29,
	0x99, 0xa5, 0x26, 0x99, 0xf5, 0x7a, 0x9c, 0x59, 0x99, 0xe3, 0xe5, 0x64, 0xda, 0x4b, 0x79, 0x98,
	0x86, 0xbf, 0x23, 0x38, 0x74, 0xfb, 0xe3, 0x49, 0x1c, 0x32, 0x25, 0x0e, 0x99, 0x01, 0x87, 0xcc,
	0x28, 0x87, 0x4c, 0x23, 0xe4, 0x45, 0x29, 0xc2, 0x8b, 0x10, 0xf3, 0xf2, 0x04, 0xcc, 0x7f, 0x47,
	0x60, 0x9e, 0x3a, 0x0b, 0x86, 0xf9, 0x3d, 0x69, 0x8f, 0x4c, 0x80, 0x97, 0xd9, 0x30, 0xb9, 0x61,
	0xd2, 0x49, 0x6a, 0xbe, 0x26, 0x94, 0x9b, 0xfd, 0xce, 0x89, 0xd9, 0x8f, 0x14, 0x58, 0xa3, 0x43,
	0xa9, 0x44, 0xb7, 0x4f, 0x88, 0x2b, 0xd9, 0x95, 0x1c, 0xf2, 0x8c, 0xa0, 0x1c, 0x39, 0x7f, 0x95,
	0xe5, 0x4d, 0xa4, 0x3c, 0x79, 0x13, 0x71, 0xa2, 0x1b, 0x1a, 0xdf, 0x8a, 0x16, 0x9c, 0xb1, 0xf5,
	0xc4, 0xff, 0xa3, 0xc0, 0xd9, 0x94, 0x29, 0x7e, 0x41, 0xe7, 0xef, 0x8c, 0x91, 0xd2, 0x05, 0x17,
	0xeb, 0xb9, 0xac, 0x4a, 0xf2, 0xe4, 0x50, 0x4c, 0x39, 0x61, 0x94, 0x64, 0xcb, 0x5f, 0xc6, 0x3e,
	0xac, 0x6c, 0xdb, 0x96, 0xaf, 0xe9, 0xbe, 0xb7, 0x4f, 0x34, 0x57, 0x3f, 0x9e, 0xc4, 0x9f, 0x3a,
	0x28, 0x1f, 0x88, 0x83, 0xb2, 0xf2, 0x01, 0xe5, 0xd6, 0x7d, 0xb3, 0x6f, 0xfa, 0x81, 0x5b, 0x87,
	0x15, 0x66, 0x93, 0xe3, 0x7f, 0x50, 0x60, 0x55, 0x1a, 0x56, 0x40, 0xfe, 0x0a, 0x54, 0x98, 0x7f,
	0x4b, 0xe0, 0x7d, 0x2e, 0x0a, 0xde, 0x81, 0x40, 0xb9, 0xed, 0xba, 0xda, 0x48, 0xe5, 0xf5, 0x50,
	0x13, 0xe6, 0xf5, 0x63, 0xcd, 0xb2, 0x08, 0xbd, 0x11, 0x97, 0xae, 0xd7, 0xd5, 0xa0, 0x88, 0xee,
	0x45, 0x79, 0x51, 0x62, 0xbc, 0xb8, 0x21, 0x3b, 0x3e, 0x12, 0xc3, 0x67, 0xf0, 0x21, 0x9f, 0xd0,
	0x7f, 0x5b, 0x81, 0x0d, 0xce, 0xe7, 0xc1, 0x90, 0x78, 0x7e, 0x60, 0xe4, 0x05, 0xdb, 0x47, 0x14,
	0xde, 0xb8, 0x5c, 0x2a, 0x09, 0xb9, 0x44, 0x67, 0x61, 0x9e, 0x2e, 0xb0, 0x23, 0x2c, 0xc7, 0x98,
	0x05, 0xb3, 0x6c, 0xab, 0xf8, 0x27, 0x0a, 0x5c, 0x9e, 0x38, 0x07, 0x06, 0xf6, 0x7d, 0xc9, 0x54,
	0xbc, 0x99, 0x14, 0xd4, 0x09, 0x8d, 0x93, 0xe6, 0xe2, 0x0a, 0x2c, 0x92, 0xbe, 0x66, 0xf6, 0x3a,
	0x8e, 0xe6, 0x53, 0x44, 0x84, 0x9c, 0xd4, 0x19, 0xf1, 0x21, 0xa7, 0xe1, 0xdb, 0x79, 0x4f, 0x3a,
	0xef, 0x9b, 0x9e, 0x67, 0x5a, 0x47, 0xb7, 0x23, 0x9d, 0x34, 0x8a, 0xf8, 0x8f, 0x4b, 0x70, 0x9e,
	0x1d, 0x6a, 0x74, 0xad, 0xd7, 0xdb, 0x27, 0x1e, 0xbd, 0xfc, 0x50, 0xd1, 0x70, 0xfb, 0xcc, 0xa2,
	0xa1, 0x8b, 0x00, 0x1e, 0xa7, 0x76, 0x84, 0x45, 0x2e, 0xa9, 0x35, 0x41, 0xd9, 0x35, 0xe8, 0xc9,
	0x51, 0x63, 0xc3, 0x76, 0x8e, 0x83, 0xd3, 0x4b, 0x49, 0x05, 0x4e, 0x62, 0x67, 0x97, 0x73, 0x50,
	0xd5, 0x8c, 0xbe, 0xc9, 0x5a, 0x73, 0xe1, 0x9e, 0x67, 0x65, 0xd1, 0x96, 0x7d, 0xe2, 0x66, 0x9d,
	0x1f, 0x5b, 0x80, 0x91, 0xde, 0x63, 0xb6, 0xfd, 0x2a, 0x2c, 0x39, 0x9a, 0xeb, 0x9b, 0xba, 0xe9,
	0x68, 0x96, 0xdf, 0x09, 0xf7, 0xd6, 0xc5, 0x08, 0x75, 0xd7, 0x40, 0x2f, 0xc2, 0x4a, 0xb4, 0x1a,
	0xef, 0x6d, 0x8e, 0xf5, 0xd6, 0x88, 0x7c, 0xe0, 0x7d, 0x2e, 0x43, 0xe9, 0xa8, 0xd3, 0x65, 0x87,
	0xe0, 0xba, 0x5a, 0x3c, 0xba, 0x85, 0x6e, 0xc0, 0x0a, 0x5d, 0x7a, 0xc7, 0xe5, 0x3c, 0x22, 0x46,
	0x47, 0xe3, 0x97, 0xc6, 0x8a, 0xba, 0x4c, 0x3f, 0xa8, 0x01, 0xbd, 0xcd, 0xae, 0x8f, 0xa2, 0xae,
	0x4e, 0xcc, 0x13, 0x5e, 0x55, 0x5c, 0x1f, 0x79, 0x55, 0x4e, 0x6e, 0xfb, 0x61, 0xaf, 0xba, 0x6d,
	0x1d, 0x9a, 0x6e, 0x9f, 0x57, 0x85, 0x71, 0xaf, 0xdb, 0x01, 0xbd, 0xed, 0x53, 0x88, 0x1c, 0x42,
	0xdc, 0x8e, 0xaf, 0x1d, 0xb1, 0xcb, 0x63, 0x5d, 0x9d, 0xa7, 0xe5, 0x47, 0xda, 0x11, 0x45, 0x5f,
	0x1f, 0xba, 0x1d, 0xcf, 0xd7, 0xfc, 0xa1, 0xc7, 0xae, 0x8f, 0x8b, 0x6a, 0x4d, 0x1f, 0xba, 0xfb,
	0x8c, 0x80, 0x0f, 0xe1, 0x42, 0xc8, 0xbb, 0xdb, 0x96, 0xe1, 0xd8, 0xa6, 0xe5, 0x47, 0x99, 0xb7,
	0x04, 0xc5, 0x90, 0x69, 0x45, 0xd3, 0x60, 0x65, 0x47, 0x48, 0x53, 0xd1, 0x74, 0xe8, 0x76, 0x60,
	0x3a, 0x27, 0x6f, 0x04, 0xdb, 0x01, 0xfd, 0x4d, 0x69, 0x74, 0x5f, 0x0b, 0x0e, 0x37, 0xf4, 0x37,
	0xdd, 0x7d, 0x9a, 0xe1, 0x40, 0xed, 0x5e, 0xcf, 0xd6, 0x85, 0xa4, 0x50, 0x15, 0x3c, 0x0f, 0x35,
	0x4a, 0xe6, 0x1a, 0xc6, 0x8d, 0x5c, 0x95, 0x13, 0x38, 0x8f, 0x05, 0x58, 0x11, 0x05, 0x84, 0x80,
	0xc4, 0x6f, 0x4a, 0xa2, 0x35, 0xe7, 0x5b, 0x89, 0xf1, 0x6d, 0x81, 0xd3, 0x38, 0xcb, 0x66, 0x32,
	0x83, 0xff, 0xa6, 0x44, 0xe4, 0x58, 0x9e, 0x22, 0xd3, 0xd0, 0x3b, 0x92, 0x86, 0xde, 0x8c, 0x6a,
	0xe8, 0x84, 0x66, 0x49, 0xdd, 0x94, 0xf5, 0xa1, 0x38, 0x45, 0x1f, 0x4a, 0x71, 0x7d, 0xc8, 0xaf,
	0xb6, 0x62, 0x3e, 0xed, 0x9e, 0x4b, 0x34, 0x63, 0x74, 0xfb, 0x63, 0xd3, 0xf3, 0x1b, 0x45, 0xfc,
	0x3d, 0x05, 0x2e, 0x85, 0xf3, 0x7e, 0x60, 0x05, 0x92, 0xb7, 0x4d, 0x45, 0x8b, 0x9e, 0xc0, 0x29,
	0x63, 0x9e, 0x56, 0x75, 0x67, 0xb2, 0x8f, 0x7f, 0xa2, 0x00, 0x9e, 0x3c, 0x11, 0x06, 0xff, 0xfb,
	0x12, 0xfc, 0x6f, 0xa5, 0xc2, 0x9f, 0xd9, 0x3a, 0xc1, 0x05, 0x7c, 0x47, 0x42, 0xb1, 0x01, 0x75,
	0x81, 0x12, 0x87, 0xa7, 0x80, 0x56, 0x61, 0x59, 0x50, 0xf6, 0x6c, 0xff, 0x8e, 0x3d, 0xb4, 0x0c,
	0x7e, 0x59, 0x90, 0xf1, 0x2d, 0xe2, 0x7f, 0x51, 0x60, 0x23, 0x32, 0x7e, 0x5b, 0xd7, 0x89, 0xe3,
	0xd3, 0xd1, 0x0f, 0x1c, 0x43, 0xf3, 0xc9, 0xb3, 0x40, 0x31, 0x69, 0xc4, 0x4a, 0x33, 0x1b, 0xb1,
	0xf2, 0x64, 0x23, 0x56, 0x09, 0x8d, 0xd8, 0x4c, 0xb7, 0x8c, 0x1f, 0x14, 0xe1, 0xf2, 0xc4, 0xc5,
	0x4e, 0xdb, 0xca, 0xa6, 0x36, 0x4e, 0xaa, 0xcb, 0x2e, 0x2c, 0x98, 0x63, 0x83, 0x24, 0xbc, 0x45,
	0xd7, 0x52, 0x3b, 0x4d, 0x6e, 0x3e, 0x6a, 0xb4, 0x2d, 0xfe, 0x30, 0x5b, 0x73, 0x52, 0xd9, 0xbd,
	0x0a, 0xcb, 0x3b, 0x43, 0xa7, 0x67, 0xea, 0x9a, 0x4f, 0xf8, 0x74, 0x1b, 0xc5, 0xa4, 0x0c, 0x94,
	0xf0, 0x9f, 0xca, 0xaa, 0x24, 0x2c, 0xf3, 0xb3, 0x15, 0x82, 0xa7, 0xd9, 0x05, 0x43, 0xde, 0x56,
	0x26, 0xf0, 0xf6, 0xd7, 0x8b, 0x92, 0x1a, 0xa6, 0x2c, 0x22, 0x87, 0x1a, 0x66, 0xb4, 0xfe, 0x42,
	0xb9, 0xfb, 0x51, 0x4e, 0xee, 0xae, 0x41, 0x23, 0xe4, 0xae, 0x98, 0x6f, 0x3a, 0x7b, 0x7f, 0x5b,
	0x66, 0xef, 0x8e, 0xe9, 0xe9, 0x9a, 0x6b, 0xc8, 0xec, 0xbd, 0x0c, 0x75, 0x83, 0xd3, 0xa3, 0xbb,
	0xd8, 0x42, 0x48, 0xdb, 0x35, 0x9e, 0xd6, 0xee, 0xcf, 0xb6, 0x89, 0x7d, 0x5b, 0xe6, 0x62, 0xca,
	0x5c, 0x73, 0x70, 0x31, 0xa3, 0xf5, 0x17, 0xca, 0xc5, 0x76, 0x4e, 0x2e, 0xa6, 0x98, 0xe4, 0x36,
	0xb4, 0xc2, 0xe1, 0x3e, 0x18, 0x12, 0x77, 0x14, 0x1c, 0x6c, 0x3c, 0xca, 0xa9, 0x99, 0x60, 0xfc,
	0x27, 0x05, 0x2e, 0x66, 0xf6, 0x31, 0xed, 0x6a, 0x3f, 0xb1, 0x61, 0x12, 0xbc, 0xfb, 0x50, 0x8f,
	0x00, 0xe0, 0xb1, 0xab, 0xd3, 0x82, 0xec, 0xd4, 0x9c, 0x74, 0x44, 0x53, 0xa5, 0xd6, 0x39, 0xef,
	0x47, 0x7f, 0xa8, 0xc0, 0x0a, 0xf3, 0xb9, 0x69, 0x96, 0x4e, 0x7a, 0x41, 0x08, 0x34, 0x72, 0xdf,
	0x91, 0xaf, 0x9c, 0x63, 0x0f, 0x61, 0xdc, 0x57, 0xed, 0xa4, 0xf8, 0xaa, 0x1d, 0x29, 0x66, 0xba,
	0xcc, 0xab, 0xd0, 0x25, 0x73, 0x09, 0x17, 0xde, 0x6a, 0x47, 0xf2, 0x56, 0xcf, 0x64, 0xaa, 0xde,
	0xe1, 0x9e, 0x8c, 0xe8, 0xa4, 0x19, 0x4f, 0xae, 0xc0, 0x22, 0xeb, 0x5e, 0x67, 0x1f, 0x88, 0x21,
	0x62, 0xfd, 0x75, 0x4a, 0xdc, 0x16, 0x34, 0xfc, 0x37, 0x0a, 0x4f, 0x68, 0x70, 0x34, 0xfd, 0x31,
	0x6a, 0x41, 0xd5, 0xe9, 0x69, 0x3e, 0xc5, 0x8f, 0x55, 0x5e, 0x54, 0xc3, 0x32, 0x3d, 0xc6, 0x5a,
	0x5a, 0x9f, 0x88, 0xc3, 0x2e, 0xfb, 0x4d, 0x95, 0xd4, 0xd2, 0x7c, 0xf3, 0x84, 0x74, 0xd8, 0x27,
	0xbe, 0x50, 0xe0, 0x24, 0x16, 0x35, 0x3a, 0x0f, 0xb5, 0x9e, 0x66, 0x1d, 0x71, 0x3f, 0x39, 0x5f,
	0x61, 0xb5, 0x17, 0xa4, 0x4b, 0x5c, 0x86, 0xfa, 0xa1, 0x6b, 0xf7, 0xc3, 0xb8, 0x11, 0xbf, 0x8b,
	0x2c, 0x50, 0x5a, 0x10, 0x34, 0x6a, 0xc2, 0x7c, 0xf0, 0x55, 0x04, 0xf1, 0x4f, 0xc6, 0x5f, 0x3c,
	0xdf, 0x35, 0xad, 0x23, 0x4f, 0x5c, 0x3d, 0x82, 0x22, 0xfe, 0x3a, 0xd4, 0x83, 0x05, 0xdd, 0x37,
	0x3d, 0x1f, 0xbd, 0x04, 0x73, 0x27, 0x44, 0xf7, 0x6d, 0x7a, 0x97, 0x2d, 0xc5, 0x1d, 0x25, 0x41,
	0x4d, 0x55, 0xd4, 0xc1, 0x6f, 0xc1, 0x72, 0x40, 0xdb, 0xe7, 0x1d, 0xa2, 0x06, 0x94, 0x1e, 0x93,
	0x91, 0xb8, 0x09, 0xd3, 0x9f, 0x68, 0x0d, 0x2a, 0x27, 0x5a, 0x6f, 0x18, 0x80, 0xc1, 0x0b, 0xf8,
	0x5d, 0x58, 0x8d, 0x35, 0x65, 0xe3, 0xbf, 0x16, 0x1b, 0xff, 0x7c, 0xda, 0xf8, 0xa2, 0x41, 0x38,
	0x8d, 0xcf, 0x8a, 0x7c, 0x15, 0x0f, 0x35, 0xfd, 0xb1, 0x4f, 0x85, 0x70, 0x12, 0x6b, 0x24, 0x94,
	0x8b, 0x53, 0x50, 0x2e, 0x25, 0x51, 0xde, 0x00, 0x78, 0x4c, 0x46, 0x01, 0x9c, 0x9c, 0x4d, 0x11,
	0x0a, 0x7a, 0x1d, 0xca, 0xfe, 0xc8, 0xe1, 0xe1, 0x92, 0xa5, 0x9b, 0x9b, 0xf1, 0xf9, 0x07, 0x73,
	0xdc, 0x52, 0xc9, 0x80, 0xa5, 0x6b, 0xb0, 0xda, 0xd8, 0x86, 0x79, 0x41, 0x40, 0x4d, 0x58, 0x0b,
	0x2a, 0xde, 0x25, 0x3e, 0xfd, 0x39, 0xd4, 0x8e, 0x08, 0x55, 0xc2, 0xb3, 0x1c, 0xb3, 0xc8, 0x17,
	0xaa, 0xcb, 0x3c, 0x62, 0x15, 0xf9, 0x20, 0xe0, 0x69, 0x14, 0xd1, 0x39, 0x58, 0x8f, 0xd0, 0x77,
	0xcc, 0xc3, 0x43, 0xe2, 0x12, 0x4b, 0x27, 0x8d, 0x12, 0xfe, 0xbb, 0x22, 0x9c, 0x89, 0xa6, 0x53,
	0x04, 0xc1, 0xae, 0x43, 0x9b, 0xaa, 0xc2, 0x09, 0xff, 0x22, 0x22, 0x32, 0x9c, 0x99, 0xf5, 0x93,
	0x48, 0x75, 0xba, 0x23, 0xb9, 0x24, 0xac, 0xc1, 0x71, 0xac, 0x51, 0x0a, 0xff, 0x7c, 0x01, 0x6a,
	0x9a, 0xee, 0x9b, 0x27, 0x9a, 0x4f, 0xf8, 0x99, 0x63, 0x51, 0x1d, 0x13, 0x28, 0x0f, 0xba, 0xa6,
	0x65, 0x74, 0x7c, 0xb3, 0xcf, 0x25, 0xbd, 0xa4, 0x56, 0x29, 0xe1, 0x91, 0xd9, 0x67, 0xfe, 0x87,
	0xa0, 0x26, 0xaf, 0xc0, 0x83, 0xb2, 0xf5, 0x80, 0xc8, 0x2a, 0xdd, 0x80, 0x95, 0xb0, 0x52, 0x78,
	0xb6, 0xe1, 0x52, 0xbf, 0x1c, 0x7c, 0x68, 0x8b, 0x33, 0x0e, 0x86, 0x45, 0x36, 0x5a, 0x58, 0x6f,
	0x9e, 0x73, 0x95, 0x12, 0x83, 0x3a, 0xe7, 0xa0, 0x6a, 0x3f, 0xb1, 0xb8, 0xdd, 0xe2, 0xd7, 0xef,
	0x79, 0x56, 0xde, 0x35, 0xd0, 0x4b, 0x80, 0x4c, 0xcb, 0xf4, 0xcd, 0x60, 0xb1, 0xd1, 0xdc, 0xa2,
	0x86, 0xf8, 0x12, 0x06, 0x66, 0xf0, 0x6f, 0x28, 0xb0, 0xb9, 0xdd, 0x37, 0x92, 0xd0, 0xde, 0x25,
	0x16, 0x71, 0xc5, 0x8e, 0x1f, 0x5a, 0x2a, 0x65, 0x82, 0xd3, 0xb3, 0x05, 0xd5, 0xc1, 0x50, 0xb3,
	0x7c, 0xd3, 0x1f, 0x31, 0x7c, 0x17, 0xd5, 0xb0, 0x3c, 0xe9, 0x44, 0x17, 0x5d, 0x49, 0x59, 0x5a,
	0x09, 0xfe, 0x89, 0x02, 0x57, 0xa6, 0xcc, 0x8d, 0xd9, 0xc2, 0x3d, 0x69, 0x7f, 0x7a, 0x5b, 0x72,
	0xb6, 0x4d, 0x6f, 0x9e, 0xdc, 0xa5, 0xde, 0x84, 0x0a, 0xeb, 0x42, 0x6c, 0x4f, 0x38, 0xda, 0x61,
	0xba, 0x0c, 0xaa, 0xbc, 0x41, 0x7e, 0x8f, 0x1d, 0x4e, 0x9d, 0xe0, 0xbe, 0x43, 0x74, 0x53, 0xeb,
	0xdd, 0x25, 0xcc, 0x65, 0x70, 0x15, 0x96, 0x3c, 0x4e, 0x90, 0xfd, 0x76, 0x8b, 0x82, 0x2a, 0xb6,
	0x9d, 0x28, 0xc6, 0xc5, 0x6c, 0x8c, 0x4b, 0x32, 0xc6, 0x23, 0xb8, 0x3a, 0x75, 0x0a, 0x0c, 0x64,
	0x6a, 0x93, 0xf9, 0x62, 0xc4, 0x56, 0x13, 0x14, 0xd1, 0x1b, 0x50, 0x36, 0xc7, 0xc1, 0xed, 0x59,
	0xd0, 0x62, 0xf5, 0xf1, 0x5f, 0x2a, 0xf0, 0x62, 0xea, 0xd8, 0xb7, 0x4c, 0xcb, 0x50, 0x89, 0x44,
	0x9a, 0x59, 0x0a, 0x5f, 0x85, 0x35, 0xc9, 0x18, 0x04, 0x90, 0x71, 0x8d, 0x47, 0x27, 0x89, 0xc1,
	0xa8, 0x6a, 0x8e, 0x2d, 0x83, 0xbc, 0xad, 0x2f, 0xbb, 0xf2, 0x2c, 0x24, 0x8c, 0xcb, 0x12, 0xc6,
	0xf8, 0xf7, 0x8b, 0xb0, 0x35, 0xfb, 0x6a, 0x18, 0xa4, 0xdf, 0x92, 0xe4, 0xf6, 0xf6, 0x54, 0xb9,
	0xcd, 0xec, 0x29, 0x29, 0xc2, 0x4d, 0x98, 0xd7, 0x79, 0xe6, 0x95, 0x58, 0x79, 0x50, 0xc4, 0xbf,
	0x98, 0x2f, 0xe8, 0x7b, 0x11, 0xce, 0x09, 0xb7, 0x7e, 0x72, 0x3e, 0x8d, 0x22, 0xda, 0x80, 0x56,
	0x92, 0x1e, 0x49, 0x35, 0x68, 0xc1, 0x19, 0xd1, 0x3c, 0x36, 0xf1, 0x46, 0x19, 0xff, 0x58, 0x81,
	0x97, 0x53, 0xd7, 0x79, 0x60, 0x75, 0xbf, 0x54, 0x09, 0xc8, 0xb6, 0x4e, 0xf4, 0x8e, 0xf1, 0x6a,
	0x9e, 0x39, 0x32, 0xbe, 0xfe, 0x8c, 0xc4, 0xd7, 0xbb, 0x53, 0xf9, 0x3a, 0xa1, 0xaf, 0x54, 0x77,
	0x77, 0x97, 0x1c, 0xda, 0x2e, 0xe9, 0x18, 0x2c, 0x29, 0x30, 0x70, 0x77, 0x73, 0x22, 0x4f, 0x14,
	0xc4, 0xef, 0x3d, 0x43, 0x1e, 0xe3, 0x4f, 0xe0, 0x72, 0xea, 0xb4, 0xd9, 0x91, 0x9f, 0xe9, 0xf3,
	0x17, 0xc6, 0x1a, 0xfc, 0xdf, 0x0a, 0x3c, 0x37, 0x6d, 0x70, 0x86, 0xf9, 0x03, 0x09, 0xf3, 0x77,
	0xa6, 0x62, 0x1e, 0x6b, 0x9f, 0xc4, 0xf9, 0xb4, 0x56, 0xed, 0x99, 0x42, 0xff, 0x7d, 0x05, 0xae,
	0x6d, 0xf7, 0x8d, 0xfd, 0x91, 0xf7, 0x8c, 0xcc, 0xe3, 0x3a, 0xcc, 0x79, 0x23, 0xaf, 0x63, 0xd9,
	0xc1, 0xe9, 0xd6, 0x1b, 0x79, 0x7b, 0xf6, 0x0c, 0xb7, 0x1a, 0xfc, 0x99, 0x02, 0x37, 0x66, 0x9b,
	0x0a, 0xe3, 0xc7, 0x81, 0xc4, 0x8f, 0x76, 0x8c, 0x1f, 0x33, 0xf6, 0x92, 0x74, 0x65, 0xe6, 0xdb,
	0x60, 0xdf, 0x84, 0x95, 0xed, 0xbe, 0xc1, 0x32, 0x95, 0xc6, 0xe9, 0x9d, 0x57, 0x60, 0x31, 0xba,
	0x56, 0x8f, 0x9d, 0xdc, 0x6b, 0x6a, 0x3d, 0xb2, 0x58, 0x0f, 0x7f, 0x57, 0x81, 0xb5, 0x78, 0x53,
	0xb6, 0xae, 0x6f, 0x4a, 0xeb, 0x7a, 0x31, 0xb6, 0xae, 0x44, 0xfd, 0xa7, 0x5d, 0xc1, 0xdb, 0xb0,
	0xba, 0xdd, 0x37, 0x0e, 0xac, 0xee, 0x29, 0xd6, 0xf0, 0x4b, 0x0a, 0x9c, 0x49, 0x36, 0x66, 0xab,
	0x68, 0x4b, 0xab, 0x78, 0x39, 0xb6, 0x8a, 0x94, 0x16, 0x4f, 0xbb, 0x8e, 0x55, 0x99, 0x13, 0x2c,
	0x59, 0x32, 0x01, 0x72, 0x98, 0x6f, 0x37, 0x23, 0xc8, 0x99, 0x39, 0x77, 0x39, 0x27, 0xb7, 0x1e,
	0x07, 0x99, 0x4f, 0x2f, 0x89, 0x5f, 0x38, 0xc1, 0x99, 0xf1, 0x7b, 0x56, 0x53, 0xf4, 0xa1, 0x29,
	0xe2, 0xc6, 0x2a, 0x39, 0xb1, 0x7b, 0xe4, 0xc0, 0x23, 0x2e, 0xbd, 0x84, 0x0b, 0x17, 0x86, 0x47,
	0x7a, 0x87, 0x11, 0x17, 0x06, 0x2d, 0xee, 0x1a, 0xf4, 0x44, 0x3e, 0xf4, 0x68, 0x37, 0xe1, 0xcd,
	0x3e, 0x2c, 0xcf, 0x16, 0xae, 0xf8, 0x67, 0x05, 0xce, 0x67, 0x0c, 0xcb, 0x60, 0xb8, 0x01, 0x95,
	0xa1, 0x39, 0x2d, 0x4b, 0x81, 0x57, 0x91, 0x03, 0xe6, 0x4a, 0x34, 0x60, 0x1e, 0x04, 0x9b, 0x4a,
	0xc9, 0x60, 0xd3, 0x84, 0xc1, 0x93, 0x88, 0xbe, 0x2d, 0x21, 0x0a, 0x30, 0xb7, 0xeb, 0xd1, 0x26,
	0x8d, 0x02, 0x5a, 0x84, 0xda, 0xae, 0xb7, 0xcd, 0x87, 0x4b, 0xf7, 0xa3, 0x7d, 0x57, 0x81, 0xa5,
	0xbb, 0xc4, 0xbf, 0x33, 0xec, 0xf5, 0x78, 0x02, 0x3d, 0xcb, 0x45, 0xe0, 0x38, 0xc6, 0x50, 0x1d,
	0xe7, 0xa6, 0x15, 0xa5, 0xdc, 0xb4, 0x0d, 0x80, 0x76, 0xe8, 0xc1, 0x0c, 0x7c, 0x9a, 0xed, 0x9c,
	0x3e, 0xcd, 0xdf, 0x2b, 0xc2, 0x8a, 0x34, 0x8f, 0xdc, 0x38, 0x5f, 0x80, 0x9a, 0xe9, 0x75, 0x79,
	0x72, 0xa6, 0x48, 0xd6, 0x1f, 0x13, 0xd0, 0x16, 0xac, 0x8a, 0x4b, 0xa1, 0xd6, 0xeb, 0x79, 0x1d,
	0xc7, 0x65, 0x37, 0x4f, 0x91, 0xa0, 0xb4, 0xc2, 0xfd, 0x53, 0xf4, 0xcb, 0x43, 0xfe, 0x01, 0xdd,
	0x84, 0xf5, 0x68, 0x7d, 0xed, 0x44, 0x33, 0x7b, 0x5a, 0xb7, 0xc7, 0x6f, 0xc1, 0x55, 0x75, 0x75,
	0xdc, 0xa2, 0x1d, 0x7c, 0x42, 0x6b, 0x50, 0xd1, 0xba, 0xf6, 0xd0, 0x17, 0x69, 0x2f, 0xbc, 0x80,
	0x2e, 0xc1, 0x02, 0x5d, 0xae, 0x6d, 0xb1, 0xc4, 0x5f, 0x71, 0xf7, 0x05, 0x4e, 0xda, 0x3e, 0xd6,
	0x7c, 0xf4, 0x9a, 0xc8, 0x9b, 0x08, 0xd3, 0x2e, 0x97, 0x6e, 0xae, 0x47, 0x17, 0xaa, 0x92, 0xdb,
	0xae, 0x1b, 0x49, 0x91, 0x60, 0x3c, 0xff, 0xbe, 0x22, 0xe1, 0xb5, 0x6f, 0xf6, 0xbf, 0x32, 0xd6,
	0x3d, 0x82, 0x3a, 0xed, 0xee, 0xbe, 0xad, 0xf3, 0x70, 0x72, 0x13, 0xe6, 0xb7, 0x79, 0xd6, 0xa8,
	0xb8, 0xaf, 0x05, 0x45, 0x96, 0x57, 0x14, 0xdc, 0x92, 0x6b, 0x2a, 0xfb, 0x4d, 0xa7, 0xb6, 0x43,
	0x7c, 0xcd, 0xec, 0x89, 0xbd, 0x57, 0x94, 0xf0, 0x0f, 0x4a, 0xb0, 0x16, 0x5f, 0xe0, 0xff, 0x1f,
	0x99, 0x38, 0x03, 0x73, 0x77, 0x89, 0x65, 0x10, 0x57, 0xf8, 0x40, 0x44, 0x89, 0x76, 0xc7, 0x32,
	0x33, 0x44, 0xf2, 0x2d, 0x2f, 0xa0, 0xd7, 0xa1, 0x1a, 0xa0, 0xcf, 0xfc, 0x1d, 0x0b, 0x37, 0x9b,
	0xf1, 0x3c, 0x9e, 0xe0, 0xbb, 0x1a, 0xd6, 0x94, 0xe5, 0x0e, 0x66, 0x94, 0xbb, 0x9f, 0xe3, 0x79,
	0xa2, 0xdc, 0xc4, 0x8f, 0x33, 0x55, 0x06, 0xe8, 0x05, 0x28, 0x77, 0x35, 0x8f, 0x08, 0xae, 0xac,
	0xc7, 0x1f, 0x41, 0xb0, 0x9d, 0x45, 0x65, 0x55, 0x58, 0x26, 0xc3, 0x13, 0x63, 0x1c, 0x04, 0xab,
	0xa9, 0xf3, 0xce, 0x13, 0x96, 0xc3, 0x8a, 0x3f, 0x2d, 0x42, 0x33, 0xad, 0x7f, 0xc6, 0xf9, 0xaf,
	0x41, 0x8d, 0xbb, 0xac, 0x67, 0xcf, 0x0f, 0xfb, 0x86, 0x30, 0xb1, 0x3c, 0x35, 0xec, 0x85, 0xf4,
	0x04, 0x76, 0x79, 0x98, 0xad, 0x88, 0x65, 0x75, 0x79, 0x22, 0xdc, 0x33, 0x4b, 0x05, 0xcb, 0xc8,
	0x24, 0x2e, 0xa3, 0x1a, 0x54, 0x58, 0x8e, 0x58, 0xa3, 0x12, 0x45, 0x78, 0xd7, 0xca, 0x81, 0x30,
	0x3b, 0x20, 0x4d, 0x47, 0xf8, 0x3f, 0x94, 0x31, 0xc2, 0xd1, 0xfe, 0xbf, 0x40, 0x84, 0xe3, 0xc3,
	0x44, 0x11, 0xd6, 0x66, 0x44, 0x78, 0xc2, 0x9b, 0x96, 0x10, 0xbb, 0x12, 0x5a, 0x85, 0xe5, 0x60,
	0xa8, 0x30, 0xf3, 0x9a, 0x67, 0x1c, 0xf2, 0x47, 0x65, 0x2a, 0xf1, 0x88, 0x1f, 0xc5, 0x74, 0x86,
	0xc4, 0xb0, 0x33, 0x30, 0x77, 0x68, 0xbb, 0x47, 0xc4, 0x17, 0x06, 0x44, 0x94, 0xd0, 0x45, 0x80,
	0x88, 0x9b, 0x51, 0x3c, 0x55, 0x09, 0x03, 0x1d, 0x2c, 0x09, 0x48, 0x3c, 0x0c, 0x0b, 0x59, 0xc1,
	0x9d, 0xd0, 0x4b, 0x82, 0xfe, 0x90, 0x73, 0x04, 0x6d, 0x42, 0xdd, 0x22, 0x4f, 0xc6, 0xb5, 0x2a,
	0x22, 0xe0, 0x40, 0x9e, 0x04, 0x35, 0xc6, 0x21, 0x99, 0xb9, 0x68, 0x48, 0x26, 0x25, 0xde, 0x32,
	0x9f, 0x12, 0x6f, 0xc1, 0xff, 0xab, 0x40, 0x2b, 0x1d, 0x80, 0x69, 0x87, 0xce, 0xec, 0x56, 0x51,
	0x1e, 0xfe, 0x50, 0x49, 0x63, 0x62, 0x1d, 0xaa, 0x01, 0x13, 0x73, 0x68, 0x48, 0xc8, 0xcc, 0x72,
	0x36, 0xcb, 0x2b, 0x69, 0x7c, 0x9e, 0x63, 0xf5, 0x05, 0xf1, 0xfd, 0xa1, 0x17, 0x7a, 0xd1, 0xfd,
	0xc6, 0x3c, 0x7e, 0x00, 0x2b, 0x2c, 0x51, 0x64, 0x87, 0x9c, 0x98, 0x3a, 0xb9, 0xa5, 0x05, 0x77,
	0x89, 0xa1, 0x65, 0x0e, 0x86, 0x31, 0xe6, 0xd7, 0x39, 0x51, 0x70, 0x5f, 0x8e, 0x86, 0x85, 0xf9,
	0xf2, 0x5b, 0xb0, 0x16, 0xef, 0x30, 0x78, 0x82, 0xda, 0xa5, 0xa7, 0xad, 0x20, 0x2c, 0x25, 0x4a,
	0x78, 0x09, 0xea, 0xf7, 0x88, 0xe6, 0xfa, 0x5d, 0xa2, 0xf9, 0xf4, 0x88, 0xbd, 0x02, 0xcb, 0x91,
	0x32, 0xcb, 0x8e, 0x6e, 0xc2, 0x19, 0x76, 0x37, 0x67, 0x7b, 0xab, 0x69, 0x1d, 0xb1, 0x2d, 0x7a,
	0x87, 0x56, 0xfe, 0x06, 0x9c, 0x4b, 0xfd, 0xc2, 0x46, 0xdc, 0x84, 0xba, 0x88, 0xe3, 0x75, 0x7a,
	0xa6, 0xe7, 0xb3, 0x0b, 0x51, 0x45, 0x05, 0x1e, 0xcc, 0xbb, 0x6f, 0x7a, 0x3e, 0x7e, 0x02, 0xe7,
	0xef, 0x12, 0x9f, 0x36, 0x12, 0x27, 0xc1, 0x5b, 0xa3, 0x2f, 0xe7, 0x14, 0xfd, 0x5f, 0x0a, 0x6c,
	0x64, 0x8f, 0x1c, 0x6c, 0xe6, 0x07, 0xd3, 0x37, 0x73, 0x56, 0x05, 0x6d, 0xc2, 0x82, 0x38, 0x39,
	0x87, 0x4f, 0x8a, 0xea, 0x6a, 0x94, 0x44, 0xcf, 0x17, 0xec, 0xd5, 0xad, 0xc8, 0xf2, 0x66, 0x51,
	0x9a, 0x3d, 0x98, 0x27, 0xae, 0x1b, 0x86, 0xea, 0x62, 0x61, 0xdc, 0xc9, 0xd3, 0xdb, 0x0a, 0x53,
	0x52, 0xd5, 0xa0, 0x13, 0xfc, 0x7c, 0x24, 0xcb, 0x35, 0x21, 0xf0, 0x7b, 0x0f, 0x1e, 0xdd, 0x79,
	0x70, 0xb0, 0xb7, 0xd3, 0x28, 0xe2, 0x37, 0x60, 0x85, 0xfb, 0xa4, 0xa8, 0x15, 0x7c, 0x8f, 0x8c,
	0xbc, 0xd9, 0xcc, 0x0d, 0x7e, 0x19, 0xd6, 0xe2, 0xed, 0x18, 0x52, 0x63, 0x41, 0xa4, 0x1c, 0x0e,
	0x6c, 0x00, 0xfe, 0x7b, 0x05, 0xce, 0x7b, 0xc4, 0x32, 0xf6, 0xc7, 0x0a, 0x9a, 0xf3, 0xa5, 0xeb,
	0x38, 0xf5, 0xb8, 0x98, 0x9e, 0x1a, 0x5e, 0x4a, 0x7d, 0xa7, 0x59, 0xce, 0xf1, 0x96, 0xa8, 0x32,
	0xf5, 0x2d, 0xd1, 0x5c, 0xfc, 0x2d, 0xd1, 0x8d, 0xeb, 0x50, 0x0d, 0xdf, 0x46, 0x53, 0x98, 0xe9,
	0x1a, 0xfb, 0x14, 0xe6, 0x65, 0xfe, 0xd0, 0xb9, 0xed, 0x38, 0xf4, 0x7b, 0x43, 0xb9, 0xf9, 0xd7,
	0x57, 0x60, 0x85, 0xb2, 0x7f, 0x9f, 0xb1, 0x94, 0xfe, 0x6b, 0xea, 0x04, 0xb5, 0xa1, 0x1a, 0xbc,
	0xeb, 0x46, 0x67, 0xa3, 0x2c, 0x8f, 0xbc, 0xb7, 0x6f, 0xb5, 0xb2, 0x9f, 0x81, 0xe3, 0x02, 0xda,
	0xa6, 0xf7, 0xaa, 0xa7, 0xed, 0xe4, 0x23, 0x58, 0xdd, 0x4f, 0x3e, 0x42, 0x46, 0x38, 0xd1, 0x5b,
	0xe2, 0x95, 0xf2, 0x94, 0x8e, 0xdf, 0x05, 0x18, 0x6f, 0xb0, 0x28, 0xfd, 0x38, 0xd0, 0xba, 0x32,
	0xc3, 0x63, 0x54, 0xbe, 0xd2, 0xf1, 0x71, 0x08, 0xa5, 0x1f, 0xde, 0x5a, 0x17, 0x26, 0x3d, 0xff,
	0xc3, 0x05, 0xf4, 0x01, 0x20, 0xb1, 0x5f, 0x44, 0xd6, 0x82, 0x5a, 0x99, 0x0f, 0xb7, 0x06, 0xad,
	0x8b, 0x13, 0x1f, 0x75, 0xe1, 0x02, 0xfa, 0x69, 0x91, 0xb9, 0x10, 0xbc, 0x16, 0xfa, 0xc8, 0x76,
	0x0d, 0xb4, 0x31, 0xf1, 0x31, 0xd1, 0xa0, 0x75, 0x79, 0xea, 0x63, 0x23, 0x5c, 0x40, 0x3d, 0x7e,
	0xca, 0xda, 0xed, 0x3f, 0x8c, 0xbc, 0xce, 0xa0, 0xa7, 0xe2, 0xe7, 0x67, 0x7a, 0xfd, 0x32, 0x68,
	0xbd, 0x30, 0xf3, 0x2b, 0x19, 0x5c, 0x40, 0x16, 0x7f, 0xf3, 0x90, 0xf2, 0x16, 0x24, 0x39, 0x5e,
	0xfa, 0x7b, 0x97, 0xe4, 0x78, 0x99, 0x0f, 0x4b, 0x70, 0x01, 0xfd, 0x3c, 0xac, 0xc6, 0x5f, 0x3e,
	0x50, 0xe4, 0x36, 0xa7, 0x3c, 0x8d, 0x88, 0xc9, 0x4b, 0xc6, 0xe3, 0x09, 0x5c, 0x40, 0x2a, 0x2c,
	0xc9, 0x6f, 0x18, 0xd0, 0xc5, 0xcc, 0x4c, 0xff, 0x63, 0xda, 0xef, 0xa5, 0x29, 0x0f, 0x01, 0x98,
	0x3c, 0x2f, 0x44, 0xee, 0x7b, 0xb2, 0xdc, 0xc8, 0x1e, 0x0a, 0x59, 0x6e, 0x12, 0x5e, 0x03, 0x5c,
	0x40, 0xc7, 0xb0, 0x9e, 0xea, 0x41, 0x41, 0xcf, 0xcd, 0xe0, 0x64, 0x19, 0xb4, 0xae, 0xcd, 0xe8,
	0x8a, 0xc1, 0x05, 0xf4, 0x09, 0x9c, 0x9f, 0x90, 0xba, 0x8f, 0x6e, 0xcc, 0x9c, 0xe3, 0x3f, 0x68,
	0xbd, 0x9c, 0xeb, 0x3d, 0x00, 0x5f, 0x65, 0x6a, 0x52, 0xb2, 0xbc, 0xca, 0xac, 0x8c, 0xec, 0xd6,
	0xb5, 0x19, 0xb3, 0x9b, 0x71, 0x01, 0xfd, 0x42, 0x24, 0x83, 0x3c, 0x25, 0xff, 0x16, 0xbd, 0x38,
	0x7b, 0xa6, 0xee, 0xa0, 0xb5, 0x95, 0x2f, 0xad, 0x97, 0x83, 0x3c, 0x21, 0xa9, 0x54, 0x06, 0x79,
	0x72, 0x9e, 0xae, 0x0c, 0xf2, 0xd4, 0x4c, 0xd5, 0xc4, 0xd2, 0x13, 0x39, 0x8f, 0x99, 0x4b, 0x4f,
	0x4b, 0x10, 0xcd, 0x5c, 0x7a, 0x46, 0x2a, 0x65, 0x62, 0xf8, 0x44, 0xb2, 0x5e, 0xe6, 0xf0, 0x69,
	0x09, 0x8c, 0x99, 0xc3, 0x67, 0xe4, 0x00, 0x72, 0xc3, 0x95, 0x91, 0xe9, 0x26, 0x1b, 0xae, 0xec,
	0x5c, 0x3c, 0xd9, 0x70, 0x4d, 0x4c, 0x9b, 0xc3, 0x05, 0xb4, 0x0f, 0x4b, 0x72, 0xd6, 0x97, 0x6c,
	0x58, 0x12, 0x69, 0x6c, 0xad, 0xcd, 0x49, 0x9f, 0x45, 0xa7, 0x9f, 0x2a, 0x70, 0x71, 0x62, 0x3e,
	0x04, 0x7a, 0x29, 0x47, 0xea, 0xc4, 0xa0, 0xf5, 0x4a, 0xce, 0x44, 0x0b, 0x5c, 0x40, 0xdf, 0x53,
	0xe0, 0xd2, 0x94, 0x74, 0x03, 0xb4, 0x35, 0xb5, 0x5b, 0x29, 0x3d, 0xa2, 0xf5, 0xb5, 0x5c, 0xf5,
	0xc5, 0x44, 0x7e, 0xac, 0xc0, 0xf5, 0x59, 0x63, 0xec, 0xe8, 0xa7, 0x4e, 0x17, 0x99, 0x1f, 0xb4,
	0xde, 0x3e, 0x7d, 0x48, 0x1f, 0x17, 0xd0, 0x6f, 0xf2, 0x88, 0xdb, 0x8c, 0xf1, 0x62, 0xf4, 0xd6,
	0x69, 0xe3, 0xcc, 0x83, 0xd6, 0xd7, 0x9f, 0x26, 0x44, 0x8d, 0x0b, 0xe8, 0x3b, 0x0a, 0x6c, 0x4c,
	0x8e, 0xb2, 0xa2, 0x97, 0xf3, 0x44, 0x64, 0x07, 0xad, 0x57, 0xf3, 0x06, 0x70, 0x71, 0x01, 0xfd,
	0x1a, 0x8f, 0x15, 0x4f, 0x8d, 0x2d, 0xa2, 0xd7, 0xf2, 0x47, 0x23, 0x07, 0xad, 0x37, 0x4e, 0x17,
	0xc2, 0xe4, 0xca, 0x2c, 0x87, 0x06, 0x63, 0xa7, 0x84, 0x78, 0x84, 0x52, 0x56, 0xe6, 0xb4, 0xa8,
	0x22, 0x2e, 0xa0, 0x6f, 0x41, 0x23, 0x1e, 0xa9, 0x43, 0x97, 0x26, 0xc7, 0xf1, 0x06, 0x2d, 0x3c,
	0x3d, 0xd0, 0x97, 0x9c, 0xef, 0x81, 0x93, 0x3d, 0x5f, 0x7e, 0x22, 0xde, 0x9c, 0x16, 0xa0, 0x4b,
	0x9b, 0xef, 0x81, 0x33, 0x69, 0xbe, 0xbc, 0x63, 0x3c, 0x3d, 0xb0, 0x86, 0x0b, 0xe8, 0x3e, 0x4f,
	0x40, 0x74, 0x62, 0x09, 0x88, 0xa8, 0x99, 0x95, 0xcb, 0xd8, 0x6a, 0xa6, 0x65, 0x69, 0x32, 0x27,
	0x41, 0x01, 0xdd, 0x1d, 0x27, 0x7a, 0x8a, 0xde, 0x68, 0xb3, 0x09, 0x9d, 0xa5, 0xa6, 0x9c, 0xf2,
	0x7b, 0x40, 0xa4, 0xa3, 0x20, 0xdf, 0x34, 0xbb, 0x9f, 0x4b, 0x13, 0x52, 0x47, 0xc5, 0xdc, 0x76,
	0x79, 0x7e, 0xa4, 0x13, 0xcf, 0x8f, 0x3c, 0xc5, 0xec, 0x06, 0xd0, 0xcc, 0xba, 0xf4, 0xa3, 0x6b,
	0xb3, 0xb9, 0x06, 0x06, 0xad, 0x1b, 0xb3, 0xfb, 0x10, 0xb8, 0x5c, 0xc9, 0x57, 0x7a, 0x59, 0xae,
	0x12, 0x6e, 0x02, 0x59, 0xae, 0xd2, 0xbc, 0x01, 0xb8, 0x80, 0xba, 0xb0, 0x9a, 0xe2, 0x14, 0x92,
	0xef, 0x95, 0xe9, 0xfe, 0xa4, 0xd6, 0xd5, 0xa9, 0x75, 0xc4, 0x18, 0x3b, 0x50, 0x0b, 0xbd, 0x54,
	0x32, 0xd4, 0x51, 0x67, 0x56, 0xeb, 0x7c, 0xc6, 0x97, 0x88, 0x5a, 0x49, 0xbe, 0xb2, 0x98, 0x5a,
	0xc5, 0x1d, 0x73, 0x31, 0xb5, 0x4a, 0x71, 0xb3, 0xe1, 0x02, 0xea, 0xf0, 0x3f, 0x9f, 0x21, 0x3b,
	0xf0, 0xd1, 0xe5, 0x69, 0x0e, 0xfe, 0x41, 0xeb, 0xb9, 0x59, 0x62, 0x00, 0xf2, 0x00, 0x63, 0xff,
	0x75, 0xfa, 0x00, 0x92, 0x9b, 0x3e, 0x7d, 0x80, 0xb8, 0x0b, 0x1c, 0x17, 0x10, 0x09, 0xff, 0xd4,
	0x99, 0xe4, 0x5e, 0x45, 0x57, 0xa6, 0x3b, 0x60, 0x07, 0xad, 0xe7, 0x67, 0xf3, 0xd2, 0x72, 0xf4,
	0xe5, 0x30, 0x1a, 0xca, 0xba, 0x3d, 0xf1, 0x18, 0xa2, 0x8c, 0x7e, 0x5a, 0x04, 0x0e, 0x17, 0xd0,
	0xcf, 0x72, 0xa7, 0x46, 0xc4, 0xe9, 0xc4, 0xce, 0x6a, 0xd7, 0xe2, 0x4e, 0x8d, 0x0c, 0xaf, 0xd4,
	0x64, 0xcf, 0xc6, 0xad, 0xfa, 0x5f, 0x7c, 0xbe, 0xa1, 0xfc, 0xed, 0xe7, 0x1b, 0xca, 0x3f, 0x7e,
	0xbe, 0xa1, 0x74, 0xe7, 0xd8, 0x9f, 0x4a, 0x7c, 0xed, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x34,
	0x2e, 0x0b, 0x1d, 0x26, 0x52, 0x00, 0x00,
}
