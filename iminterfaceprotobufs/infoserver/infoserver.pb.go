//protoc --gogofast_out=plugins=grpc:. *.proto
//gitlab.potato.im/iminterfaceprotobufs/

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: infoserver.proto

package infoserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/iminterfaceprotobufs/infoserver/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 发送短信的类型
type CodeType int32

const (
	CodeType_SendSms     CodeType = 0 // 发送短信
	CodeType_SendAppCode CodeType = 1 //发送App的验证码类型
)

// Enum value maps for CodeType.
var (
	CodeType_name = map[int32]string{
		0: "SendSms",
		1: "SendAppCode",
	}
	CodeType_value = map[string]int32{
		"SendSms":     0,
		"SendAppCode": 1,
	}
)

func (x CodeType) Enum() *CodeType {
	p := new(CodeType)
	*p = x
	return p
}

func (x CodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[0].Descriptor()
}

func (CodeType) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[0]
}

func (x CodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeType.Descriptor instead.
func (CodeType) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{0}
}

type SendCodeResult_ResultCode int32

const (
	SendCodeResult_Success                        SendCodeResult_ResultCode = 0
	SendCodeResult_InternalError                  SendCodeResult_ResultCode = 1 //内部错误，例如rpc调用等
	SendCodeResult_PhoneOccupied                  SendCodeResult_ResultCode = 2 //号码已注册
	SendCodeResult_VirtualPhoneBlockedTemporarily SendCodeResult_ResultCode = 3 // 虚拟号暂时不能登陆，已注册但是未绑定电话号码，并且当前没有其他端在线
	SendCodeResult_PhoneNumberInvalid             SendCodeResult_ResultCode = 4 // 无效的号码,暂时用于判断未激活的虚拟号
	SendCodeResult_AccountMarkedDeleted           SendCodeResult_ResultCode = 5 // 账号已标记删除
	SendCodeResult_FloodWait                      SendCodeResult_ResultCode = 6 // flooding request
	SendCodeResult_SMSFailed                      SendCodeResult_ResultCode = 7 // send sms error
	SendCodeResult_UserRestricted                 SendCodeResult_ResultCode = 8 // user is restricted
)

// Enum value maps for SendCodeResult_ResultCode.
var (
	SendCodeResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "PhoneOccupied",
		3: "VirtualPhoneBlockedTemporarily",
		4: "PhoneNumberInvalid",
		5: "AccountMarkedDeleted",
		6: "FloodWait",
		7: "SMSFailed",
		8: "UserRestricted",
	}
	SendCodeResult_ResultCode_value = map[string]int32{
		"Success":                        0,
		"InternalError":                  1,
		"PhoneOccupied":                  2,
		"VirtualPhoneBlockedTemporarily": 3,
		"PhoneNumberInvalid":             4,
		"AccountMarkedDeleted":           5,
		"FloodWait":                      6,
		"SMSFailed":                      7,
		"UserRestricted":                 8,
	}
)

func (x SendCodeResult_ResultCode) Enum() *SendCodeResult_ResultCode {
	p := new(SendCodeResult_ResultCode)
	*p = x
	return p
}

func (x SendCodeResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendCodeResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[1].Descriptor()
}

func (SendCodeResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[1]
}

func (x SendCodeResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendCodeResult_ResultCode.Descriptor instead.
func (SendCodeResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{1, 0}
}

type SignInOrReqitsterResult_ResultCode int32

const (
	SignInOrReqitsterResult_Success               SignInOrReqitsterResult_ResultCode = 0
	SignInOrReqitsterResult_InternalError         SignInOrReqitsterResult_ResultCode = 1 // 服务器内部错误
	SignInOrReqitsterResult_PhoneNumberUnoccupied SignInOrReqitsterResult_ResultCode = 2 // 电话号码未注册
	SignInOrReqitsterResult_CaptchaInvalid        SignInOrReqitsterResult_ResultCode = 3 // 验证码无效
	SignInOrReqitsterResult_PasswordNeeded        SignInOrReqitsterResult_ResultCode = 4 // 需要输入密码
	SignInOrReqitsterResult_CaptchaExpired        SignInOrReqitsterResult_ResultCode = 5 // 验证码过期
	SignInOrReqitsterResult_FloodWait             SignInOrReqitsterResult_ResultCode = 6 // 攻击
)

// Enum value maps for SignInOrReqitsterResult_ResultCode.
var (
	SignInOrReqitsterResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "PhoneNumberUnoccupied",
		3: "CaptchaInvalid",
		4: "PasswordNeeded",
		5: "CaptchaExpired",
		6: "FloodWait",
	}
	SignInOrReqitsterResult_ResultCode_value = map[string]int32{
		"Success":               0,
		"InternalError":         1,
		"PhoneNumberUnoccupied": 2,
		"CaptchaInvalid":        3,
		"PasswordNeeded":        4,
		"CaptchaExpired":        5,
		"FloodWait":             6,
	}
)

func (x SignInOrReqitsterResult_ResultCode) Enum() *SignInOrReqitsterResult_ResultCode {
	p := new(SignInOrReqitsterResult_ResultCode)
	*p = x
	return p
}

func (x SignInOrReqitsterResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignInOrReqitsterResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[2].Descriptor()
}

func (SignInOrReqitsterResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[2]
}

func (x SignInOrReqitsterResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignInOrReqitsterResult_ResultCode.Descriptor instead.
func (SignInOrReqitsterResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{4, 0}
}

type AuthSignUpResult_ResultCode int32

const (
	AuthSignUpResult_Success             AuthSignUpResult_ResultCode = 0
	AuthSignUpResult_InternalError       AuthSignUpResult_ResultCode = 1 // 服务器内部错误
	AuthSignUpResult_PhoneNumberInvalid  AuthSignUpResult_ResultCode = 2 // 无效的电话号码
	AuthSignUpResult_PhoneNumberOccupied AuthSignUpResult_ResultCode = 3 // 电话号码已注册
	AuthSignUpResult_CaptchaExpired      AuthSignUpResult_ResultCode = 4 // 验证码失效
	AuthSignUpResult_CaptchaInvalid      AuthSignUpResult_ResultCode = 5 // 验证码无效
	AuthSignUpResult_FloodWait           AuthSignUpResult_ResultCode = 6
	AuthSignUpResult_SignUpRobotBlocked  AuthSignUpResult_ResultCode = 7 // 机器人注册接口暂时关闭
)

// Enum value maps for AuthSignUpResult_ResultCode.
var (
	AuthSignUpResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "PhoneNumberInvalid",
		3: "PhoneNumberOccupied",
		4: "CaptchaExpired",
		5: "CaptchaInvalid",
		6: "FloodWait",
		7: "SignUpRobotBlocked",
	}
	AuthSignUpResult_ResultCode_value = map[string]int32{
		"Success":             0,
		"InternalError":       1,
		"PhoneNumberInvalid":  2,
		"PhoneNumberOccupied": 3,
		"CaptchaExpired":      4,
		"CaptchaInvalid":      5,
		"FloodWait":           6,
		"SignUpRobotBlocked":  7,
	}
)

func (x AuthSignUpResult_ResultCode) Enum() *AuthSignUpResult_ResultCode {
	p := new(AuthSignUpResult_ResultCode)
	*p = x
	return p
}

func (x AuthSignUpResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthSignUpResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[3].Descriptor()
}

func (AuthSignUpResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[3]
}

func (x AuthSignUpResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthSignUpResult_ResultCode.Descriptor instead.
func (AuthSignUpResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{6, 0}
}

type ChangePhoneResult_ResultCode int32

const (
	ChangePhoneResult_Success             ChangePhoneResult_ResultCode = 0
	ChangePhoneResult_InternalError       ChangePhoneResult_ResultCode = 1
	ChangePhoneResult_PhoneNumberOccupied ChangePhoneResult_ResultCode = 2 // 电话已注册
	ChangePhoneResult_PhoneCodeExpired    ChangePhoneResult_ResultCode = 3 // 验证码已过期
	ChangePhoneResult_PhoneCodeInvalid    ChangePhoneResult_ResultCode = 4 // 验证码无效
	ChangePhoneResult_FloodWait           ChangePhoneResult_ResultCode = 5
)

// Enum value maps for ChangePhoneResult_ResultCode.
var (
	ChangePhoneResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "PhoneNumberOccupied",
		3: "PhoneCodeExpired",
		4: "PhoneCodeInvalid",
		5: "FloodWait",
	}
	ChangePhoneResult_ResultCode_value = map[string]int32{
		"Success":             0,
		"InternalError":       1,
		"PhoneNumberOccupied": 2,
		"PhoneCodeExpired":    3,
		"PhoneCodeInvalid":    4,
		"FloodWait":           5,
	}
)

func (x ChangePhoneResult_ResultCode) Enum() *ChangePhoneResult_ResultCode {
	p := new(ChangePhoneResult_ResultCode)
	*p = x
	return p
}

func (x ChangePhoneResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangePhoneResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[4].Descriptor()
}

func (ChangePhoneResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[4]
}

func (x ChangePhoneResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangePhoneResult_ResultCode.Descriptor instead.
func (ChangePhoneResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{8, 0}
}

type AuthCheckPasswdResult_ResultCode int32

const (
	AuthCheckPasswdResult_Success       AuthCheckPasswdResult_ResultCode = 0
	AuthCheckPasswdResult_InternalError AuthCheckPasswdResult_ResultCode = 1
	AuthCheckPasswdResult_WrongPassword AuthCheckPasswdResult_ResultCode = 2
)

// Enum value maps for AuthCheckPasswdResult_ResultCode.
var (
	AuthCheckPasswdResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "WrongPassword",
	}
	AuthCheckPasswdResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
		"WrongPassword": 2,
	}
)

func (x AuthCheckPasswdResult_ResultCode) Enum() *AuthCheckPasswdResult_ResultCode {
	p := new(AuthCheckPasswdResult_ResultCode)
	*p = x
	return p
}

func (x AuthCheckPasswdResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthCheckPasswdResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[5].Descriptor()
}

func (AuthCheckPasswdResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[5]
}

func (x AuthCheckPasswdResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthCheckPasswdResult_ResultCode.Descriptor instead.
func (AuthCheckPasswdResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{10, 0}
}

type AuthImportAuthorizationResult_ResultCode int32

const (
	AuthImportAuthorizationResult_Success       AuthImportAuthorizationResult_ResultCode = 0
	AuthImportAuthorizationResult_InternalError AuthImportAuthorizationResult_ResultCode = 1
)

// Enum value maps for AuthImportAuthorizationResult_ResultCode.
var (
	AuthImportAuthorizationResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	AuthImportAuthorizationResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x AuthImportAuthorizationResult_ResultCode) Enum() *AuthImportAuthorizationResult_ResultCode {
	p := new(AuthImportAuthorizationResult_ResultCode)
	*p = x
	return p
}

func (x AuthImportAuthorizationResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthImportAuthorizationResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[6].Descriptor()
}

func (AuthImportAuthorizationResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[6]
}

func (x AuthImportAuthorizationResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthImportAuthorizationResult_ResultCode.Descriptor instead.
func (AuthImportAuthorizationResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{12, 0}
}

type AuthExportAuthorizationResult_ResultCode int32

const (
	AuthExportAuthorizationResult_Success       AuthExportAuthorizationResult_ResultCode = 0
	AuthExportAuthorizationResult_InternalError AuthExportAuthorizationResult_ResultCode = 1
)

// Enum value maps for AuthExportAuthorizationResult_ResultCode.
var (
	AuthExportAuthorizationResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	AuthExportAuthorizationResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x AuthExportAuthorizationResult_ResultCode) Enum() *AuthExportAuthorizationResult_ResultCode {
	p := new(AuthExportAuthorizationResult_ResultCode)
	*p = x
	return p
}

func (x AuthExportAuthorizationResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthExportAuthorizationResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[7].Descriptor()
}

func (AuthExportAuthorizationResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[7]
}

func (x AuthExportAuthorizationResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthExportAuthorizationResult_ResultCode.Descriptor instead.
func (AuthExportAuthorizationResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{14, 0}
}

type AuthRecoverPasswdResult_ResultCode int32

const (
	AuthRecoverPasswdResult_Success        AuthRecoverPasswdResult_ResultCode = 0
	AuthRecoverPasswdResult_InternalError  AuthRecoverPasswdResult_ResultCode = 1
	AuthRecoverPasswdResult_CaptchaInvalid AuthRecoverPasswdResult_ResultCode = 2 // 验证码无效
	AuthRecoverPasswdResult_CaptchaExpired AuthRecoverPasswdResult_ResultCode = 3 // 验证码过期
	AuthRecoverPasswdResult_FloodWait      AuthRecoverPasswdResult_ResultCode = 4 // 攻击
)

// Enum value maps for AuthRecoverPasswdResult_ResultCode.
var (
	AuthRecoverPasswdResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "CaptchaInvalid",
		3: "CaptchaExpired",
		4: "FloodWait",
	}
	AuthRecoverPasswdResult_ResultCode_value = map[string]int32{
		"Success":        0,
		"InternalError":  1,
		"CaptchaInvalid": 2,
		"CaptchaExpired": 3,
		"FloodWait":      4,
	}
)

func (x AuthRecoverPasswdResult_ResultCode) Enum() *AuthRecoverPasswdResult_ResultCode {
	p := new(AuthRecoverPasswdResult_ResultCode)
	*p = x
	return p
}

func (x AuthRecoverPasswdResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthRecoverPasswdResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[8].Descriptor()
}

func (AuthRecoverPasswdResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[8]
}

func (x AuthRecoverPasswdResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthRecoverPasswdResult_ResultCode.Descriptor instead.
func (AuthRecoverPasswdResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{16, 0}
}

type ContactsSearcResult_ResultCode int32

const (
	ContactsSearcResult_Success       ContactsSearcResult_ResultCode = 0
	ContactsSearcResult_InternalError ContactsSearcResult_ResultCode = 1
)

// Enum value maps for ContactsSearcResult_ResultCode.
var (
	ContactsSearcResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	ContactsSearcResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x ContactsSearcResult_ResultCode) Enum() *ContactsSearcResult_ResultCode {
	p := new(ContactsSearcResult_ResultCode)
	*p = x
	return p
}

func (x ContactsSearcResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactsSearcResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[9].Descriptor()
}

func (ContactsSearcResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[9]
}

func (x ContactsSearcResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactsSearcResult_ResultCode.Descriptor instead.
func (ContactsSearcResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{18, 0}
}

type AuthRequestPasswordRecoveryResult_ResultCode int32

const (
	AuthRequestPasswordRecoveryResult_Success             AuthRequestPasswordRecoveryResult_ResultCode = 0
	AuthRequestPasswordRecoveryResult_InternalError       AuthRequestPasswordRecoveryResult_ResultCode = 1
	AuthRequestPasswordRecoveryResult_MissingEmailPattern AuthRequestPasswordRecoveryResult_ResultCode = 2 //没有设置恢复邮箱
)

// Enum value maps for AuthRequestPasswordRecoveryResult_ResultCode.
var (
	AuthRequestPasswordRecoveryResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "MissingEmailPattern",
	}
	AuthRequestPasswordRecoveryResult_ResultCode_value = map[string]int32{
		"Success":             0,
		"InternalError":       1,
		"MissingEmailPattern": 2,
	}
)

func (x AuthRequestPasswordRecoveryResult_ResultCode) Enum() *AuthRequestPasswordRecoveryResult_ResultCode {
	p := new(AuthRequestPasswordRecoveryResult_ResultCode)
	*p = x
	return p
}

func (x AuthRequestPasswordRecoveryResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthRequestPasswordRecoveryResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[10].Descriptor()
}

func (AuthRequestPasswordRecoveryResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[10]
}

func (x AuthRequestPasswordRecoveryResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthRequestPasswordRecoveryResult_ResultCode.Descriptor instead.
func (AuthRequestPasswordRecoveryResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{20, 0}
}

type PhonecallAllocSessionResult_ResultCode int32

const (
	PhonecallAllocSessionResult_Success             PhonecallAllocSessionResult_ResultCode = 0
	PhonecallAllocSessionResult_InternalError       PhonecallAllocSessionResult_ResultCode = 1 // 服务器内部错误
	PhonecallAllocSessionResult_SessionAlreadyExist PhonecallAllocSessionResult_ResultCode = 2 // 重复alloc
)

// Enum value maps for PhonecallAllocSessionResult_ResultCode.
var (
	PhonecallAllocSessionResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "SessionAlreadyExist",
	}
	PhonecallAllocSessionResult_ResultCode_value = map[string]int32{
		"Success":             0,
		"InternalError":       1,
		"SessionAlreadyExist": 2,
	}
)

func (x PhonecallAllocSessionResult_ResultCode) Enum() *PhonecallAllocSessionResult_ResultCode {
	p := new(PhonecallAllocSessionResult_ResultCode)
	*p = x
	return p
}

func (x PhonecallAllocSessionResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhonecallAllocSessionResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[11].Descriptor()
}

func (PhonecallAllocSessionResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[11]
}

func (x PhonecallAllocSessionResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhonecallAllocSessionResult_ResultCode.Descriptor instead.
func (PhonecallAllocSessionResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{24, 0}
}

type PhonecallOnReceivedCallCheckResult_ResultCode int32

const (
	PhonecallOnReceivedCallCheckResult_SessionExist    PhonecallOnReceivedCallCheckResult_ResultCode = 0
	PhonecallOnReceivedCallCheckResult_SessionNotFound PhonecallOnReceivedCallCheckResult_ResultCode = 1
	PhonecallOnReceivedCallCheckResult_InternalError   PhonecallOnReceivedCallCheckResult_ResultCode = 2 // 服务器内错误
)

// Enum value maps for PhonecallOnReceivedCallCheckResult_ResultCode.
var (
	PhonecallOnReceivedCallCheckResult_ResultCode_name = map[int32]string{
		0: "SessionExist",
		1: "SessionNotFound",
		2: "InternalError",
	}
	PhonecallOnReceivedCallCheckResult_ResultCode_value = map[string]int32{
		"SessionExist":    0,
		"SessionNotFound": 1,
		"InternalError":   2,
	}
)

func (x PhonecallOnReceivedCallCheckResult_ResultCode) Enum() *PhonecallOnReceivedCallCheckResult_ResultCode {
	p := new(PhonecallOnReceivedCallCheckResult_ResultCode)
	*p = x
	return p
}

func (x PhonecallOnReceivedCallCheckResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhonecallOnReceivedCallCheckResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[12].Descriptor()
}

func (PhonecallOnReceivedCallCheckResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[12]
}

func (x PhonecallOnReceivedCallCheckResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhonecallOnReceivedCallCheckResult_ResultCode.Descriptor instead.
func (PhonecallOnReceivedCallCheckResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{26, 0}
}

type PhonecallOnAcceptCallUpdateResult_ResultCode int32

const (
	PhonecallOnAcceptCallUpdateResult_Success         PhonecallOnAcceptCallUpdateResult_ResultCode = 0
	PhonecallOnAcceptCallUpdateResult_SessionNotFound PhonecallOnAcceptCallUpdateResult_ResultCode = 1 // 未找到通话信息
	PhonecallOnAcceptCallUpdateResult_DuplicateAccept PhonecallOnAcceptCallUpdateResult_ResultCode = 2 // 该通话已经accept
	PhonecallOnAcceptCallUpdateResult_InternalError   PhonecallOnAcceptCallUpdateResult_ResultCode = 3 //发生内部错误
)

// Enum value maps for PhonecallOnAcceptCallUpdateResult_ResultCode.
var (
	PhonecallOnAcceptCallUpdateResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "SessionNotFound",
		2: "DuplicateAccept",
		3: "InternalError",
	}
	PhonecallOnAcceptCallUpdateResult_ResultCode_value = map[string]int32{
		"Success":         0,
		"SessionNotFound": 1,
		"DuplicateAccept": 2,
		"InternalError":   3,
	}
)

func (x PhonecallOnAcceptCallUpdateResult_ResultCode) Enum() *PhonecallOnAcceptCallUpdateResult_ResultCode {
	p := new(PhonecallOnAcceptCallUpdateResult_ResultCode)
	*p = x
	return p
}

func (x PhonecallOnAcceptCallUpdateResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhonecallOnAcceptCallUpdateResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[13].Descriptor()
}

func (PhonecallOnAcceptCallUpdateResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[13]
}

func (x PhonecallOnAcceptCallUpdateResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhonecallOnAcceptCallUpdateResult_ResultCode.Descriptor instead.
func (PhonecallOnAcceptCallUpdateResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{28, 0}
}

type PhonecallOnConfirmCallUpdateResult_ResultCode int32

const (
	PhonecallOnConfirmCallUpdateResult_Success          PhonecallOnConfirmCallUpdateResult_ResultCode = 0
	PhonecallOnConfirmCallUpdateResult_SessionNotFound  PhonecallOnConfirmCallUpdateResult_ResultCode = 1 // 未找到通话信息
	PhonecallOnConfirmCallUpdateResult_DuplicateConfirm PhonecallOnConfirmCallUpdateResult_ResultCode = 2 // 该通话已经confirm
	PhonecallOnConfirmCallUpdateResult_InternalError    PhonecallOnConfirmCallUpdateResult_ResultCode = 3 // 发生内部错误
)

// Enum value maps for PhonecallOnConfirmCallUpdateResult_ResultCode.
var (
	PhonecallOnConfirmCallUpdateResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "SessionNotFound",
		2: "DuplicateConfirm",
		3: "InternalError",
	}
	PhonecallOnConfirmCallUpdateResult_ResultCode_value = map[string]int32{
		"Success":          0,
		"SessionNotFound":  1,
		"DuplicateConfirm": 2,
		"InternalError":    3,
	}
)

func (x PhonecallOnConfirmCallUpdateResult_ResultCode) Enum() *PhonecallOnConfirmCallUpdateResult_ResultCode {
	p := new(PhonecallOnConfirmCallUpdateResult_ResultCode)
	*p = x
	return p
}

func (x PhonecallOnConfirmCallUpdateResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhonecallOnConfirmCallUpdateResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[14].Descriptor()
}

func (PhonecallOnConfirmCallUpdateResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[14]
}

func (x PhonecallOnConfirmCallUpdateResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhonecallOnConfirmCallUpdateResult_ResultCode.Descriptor instead.
func (PhonecallOnConfirmCallUpdateResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{30, 0}
}

type PhonecallOnDiscardCallUpdateResult_ResultCode int32

const (
	PhonecallOnDiscardCallUpdateResult_Success         PhonecallOnDiscardCallUpdateResult_ResultCode = 0
	PhonecallOnDiscardCallUpdateResult_SessionNotFound PhonecallOnDiscardCallUpdateResult_ResultCode = 1 // 未找到通话信息
	PhonecallOnDiscardCallUpdateResult_InternalError   PhonecallOnDiscardCallUpdateResult_ResultCode = 2 // 发生内部错误
)

// Enum value maps for PhonecallOnDiscardCallUpdateResult_ResultCode.
var (
	PhonecallOnDiscardCallUpdateResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "SessionNotFound",
		2: "InternalError",
	}
	PhonecallOnDiscardCallUpdateResult_ResultCode_value = map[string]int32{
		"Success":         0,
		"SessionNotFound": 1,
		"InternalError":   2,
	}
)

func (x PhonecallOnDiscardCallUpdateResult_ResultCode) Enum() *PhonecallOnDiscardCallUpdateResult_ResultCode {
	p := new(PhonecallOnDiscardCallUpdateResult_ResultCode)
	*p = x
	return p
}

func (x PhonecallOnDiscardCallUpdateResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhonecallOnDiscardCallUpdateResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[15].Descriptor()
}

func (PhonecallOnDiscardCallUpdateResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[15]
}

func (x PhonecallOnDiscardCallUpdateResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhonecallOnDiscardCallUpdateResult_ResultCode.Descriptor instead.
func (PhonecallOnDiscardCallUpdateResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{32, 0}
}

type PhonecallQueryEndpointsResult_ResultCode int32

const (
	PhonecallQueryEndpointsResult_Success       PhonecallQueryEndpointsResult_ResultCode = 0
	PhonecallQueryEndpointsResult_InternalError PhonecallQueryEndpointsResult_ResultCode = 1 // 发生内部错误
)

// Enum value maps for PhonecallQueryEndpointsResult_ResultCode.
var (
	PhonecallQueryEndpointsResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	PhonecallQueryEndpointsResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x PhonecallQueryEndpointsResult_ResultCode) Enum() *PhonecallQueryEndpointsResult_ResultCode {
	p := new(PhonecallQueryEndpointsResult_ResultCode)
	*p = x
	return p
}

func (x PhonecallQueryEndpointsResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhonecallQueryEndpointsResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[16].Descriptor()
}

func (PhonecallQueryEndpointsResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[16]
}

func (x PhonecallQueryEndpointsResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhonecallQueryEndpointsResult_ResultCode.Descriptor instead.
func (PhonecallQueryEndpointsResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{34, 0}
}

type LangPacktReq_ReqType int32

const (
	LangPacktReq_LangPackGetLanguages  LangPacktReq_ReqType = 0
	LangPacktReq_LangPackGetLangInfo   LangPacktReq_ReqType = 1
	LangPacktReq_LangPackGetStrings    LangPacktReq_ReqType = 2
	LangPacktReq_LangPackGetDifference LangPacktReq_ReqType = 3
)

// Enum value maps for LangPacktReq_ReqType.
var (
	LangPacktReq_ReqType_name = map[int32]string{
		0: "LangPackGetLanguages",
		1: "LangPackGetLangInfo",
		2: "LangPackGetStrings",
		3: "LangPackGetDifference",
	}
	LangPacktReq_ReqType_value = map[string]int32{
		"LangPackGetLanguages":  0,
		"LangPackGetLangInfo":   1,
		"LangPackGetStrings":    2,
		"LangPackGetDifference": 3,
	}
)

func (x LangPacktReq_ReqType) Enum() *LangPacktReq_ReqType {
	p := new(LangPacktReq_ReqType)
	*p = x
	return p
}

func (x LangPacktReq_ReqType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LangPacktReq_ReqType) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[17].Descriptor()
}

func (LangPacktReq_ReqType) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[17]
}

func (x LangPacktReq_ReqType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LangPacktReq_ReqType.Descriptor instead.
func (LangPacktReq_ReqType) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{41, 0}
}

type CmdVirtualPhoneNumberGenerateResult_ResultCode int32

const (
	CmdVirtualPhoneNumberGenerateResult_Success       CmdVirtualPhoneNumberGenerateResult_ResultCode = 0
	CmdVirtualPhoneNumberGenerateResult_InternalError CmdVirtualPhoneNumberGenerateResult_ResultCode = 1
)

// Enum value maps for CmdVirtualPhoneNumberGenerateResult_ResultCode.
var (
	CmdVirtualPhoneNumberGenerateResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	CmdVirtualPhoneNumberGenerateResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x CmdVirtualPhoneNumberGenerateResult_ResultCode) Enum() *CmdVirtualPhoneNumberGenerateResult_ResultCode {
	p := new(CmdVirtualPhoneNumberGenerateResult_ResultCode)
	*p = x
	return p
}

func (x CmdVirtualPhoneNumberGenerateResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdVirtualPhoneNumberGenerateResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[18].Descriptor()
}

func (CmdVirtualPhoneNumberGenerateResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[18]
}

func (x CmdVirtualPhoneNumberGenerateResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdVirtualPhoneNumberGenerateResult_ResultCode.Descriptor instead.
func (CmdVirtualPhoneNumberGenerateResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{44, 0}
}

type CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode int32

const (
	CmdVirtualPhoneNumberBindRealPhoneNumberResult_Success                    CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode = 0
	CmdVirtualPhoneNumberBindRealPhoneNumberResult_InternalError              CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode = 1
	CmdVirtualPhoneNumberBindRealPhoneNumberResult_InvalidVirtualPhoneNumber  CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode = 2 // 无效的虚拟号
	CmdVirtualPhoneNumberBindRealPhoneNumberResult_VirtualPhoneNumberOccupied CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode = 3 // 虚拟号已经绑定
	CmdVirtualPhoneNumberBindRealPhoneNumberResult_InvalidRealPhoneNumber     CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode = 4 // 要绑定的真实电话号码无效, 一般都是格式无效
)

// Enum value maps for CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode.
var (
	CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "InvalidVirtualPhoneNumber",
		3: "VirtualPhoneNumberOccupied",
		4: "InvalidRealPhoneNumber",
	}
	CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode_value = map[string]int32{
		"Success":                    0,
		"InternalError":              1,
		"InvalidVirtualPhoneNumber":  2,
		"VirtualPhoneNumberOccupied": 3,
		"InvalidRealPhoneNumber":     4,
	}
)

func (x CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode) Enum() *CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode {
	p := new(CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode)
	*p = x
	return p
}

func (x CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[19].Descriptor()
}

func (CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[19]
}

func (x CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode.Descriptor instead.
func (CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{48, 0}
}

type CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode int32

const (
	CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_Success                   CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode = 0
	CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_InternalError             CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode = 1
	CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_InvalidVirtualPhoneNumber CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode = 2 // 无效的虚拟号
)

// Enum value maps for CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode.
var (
	CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "InvalidVirtualPhoneNumber",
	}
	CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode_value = map[string]int32{
		"Success":                   0,
		"InternalError":             1,
		"InvalidVirtualPhoneNumber": 2,
	}
)

func (x CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode) Enum() *CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode {
	p := new(CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode)
	*p = x
	return p
}

func (x CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[20].Descriptor()
}

func (CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[20]
}

func (x CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode.Descriptor instead.
func (CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{50, 0}
}

type CmdVirtualPhoneNumberQueryInfoResult_ResultCode int32

const (
	CmdVirtualPhoneNumberQueryInfoResult_Success                   CmdVirtualPhoneNumberQueryInfoResult_ResultCode = 0
	CmdVirtualPhoneNumberQueryInfoResult_InternalError             CmdVirtualPhoneNumberQueryInfoResult_ResultCode = 1
	CmdVirtualPhoneNumberQueryInfoResult_InvalidVirtualPhoneNumber CmdVirtualPhoneNumberQueryInfoResult_ResultCode = 2 // 无效的虚拟号
)

// Enum value maps for CmdVirtualPhoneNumberQueryInfoResult_ResultCode.
var (
	CmdVirtualPhoneNumberQueryInfoResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "InvalidVirtualPhoneNumber",
	}
	CmdVirtualPhoneNumberQueryInfoResult_ResultCode_value = map[string]int32{
		"Success":                   0,
		"InternalError":             1,
		"InvalidVirtualPhoneNumber": 2,
	}
)

func (x CmdVirtualPhoneNumberQueryInfoResult_ResultCode) Enum() *CmdVirtualPhoneNumberQueryInfoResult_ResultCode {
	p := new(CmdVirtualPhoneNumberQueryInfoResult_ResultCode)
	*p = x
	return p
}

func (x CmdVirtualPhoneNumberQueryInfoResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdVirtualPhoneNumberQueryInfoResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[21].Descriptor()
}

func (CmdVirtualPhoneNumberQueryInfoResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[21]
}

func (x CmdVirtualPhoneNumberQueryInfoResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdVirtualPhoneNumberQueryInfoResult_ResultCode.Descriptor instead.
func (CmdVirtualPhoneNumberQueryInfoResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{52, 0}
}

type CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode int32

const (
	CmdSysPhoneNumberBindRealPhoneNumberResult_Success       CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode = 0 // 绑定成功
	CmdSysPhoneNumberBindRealPhoneNumberResult_InternalError CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode = 1 // 绑定出错
)

// Enum value maps for CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode.
var (
	CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode) Enum() *CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode {
	p := new(CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode)
	*p = x
	return p
}

func (x CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[22].Descriptor()
}

func (CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[22]
}

func (x CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode.Descriptor instead.
func (CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{54, 0}
}

type CmdBlockSignInResult_ResultCode int32

const (
	CmdBlockSignInResult_Success       CmdBlockSignInResult_ResultCode = 0 // 操作成功
	CmdBlockSignInResult_InternalError CmdBlockSignInResult_ResultCode = 1 // 操作失败，通常是数据库报错
)

// Enum value maps for CmdBlockSignInResult_ResultCode.
var (
	CmdBlockSignInResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	CmdBlockSignInResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x CmdBlockSignInResult_ResultCode) Enum() *CmdBlockSignInResult_ResultCode {
	p := new(CmdBlockSignInResult_ResultCode)
	*p = x
	return p
}

func (x CmdBlockSignInResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdBlockSignInResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[23].Descriptor()
}

func (CmdBlockSignInResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[23]
}

func (x CmdBlockSignInResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdBlockSignInResult_ResultCode.Descriptor instead.
func (CmdBlockSignInResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{56, 0}
}

type CmdUnblockSignInResult_ResultCode int32

const (
	CmdUnblockSignInResult_Success       CmdUnblockSignInResult_ResultCode = 0 // 操作成功
	CmdUnblockSignInResult_InternalError CmdUnblockSignInResult_ResultCode = 1 // 操作失败，通常是数据库错误
)

// Enum value maps for CmdUnblockSignInResult_ResultCode.
var (
	CmdUnblockSignInResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	CmdUnblockSignInResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x CmdUnblockSignInResult_ResultCode) Enum() *CmdUnblockSignInResult_ResultCode {
	p := new(CmdUnblockSignInResult_ResultCode)
	*p = x
	return p
}

func (x CmdUnblockSignInResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdUnblockSignInResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[24].Descriptor()
}

func (CmdUnblockSignInResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[24]
}

func (x CmdUnblockSignInResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdUnblockSignInResult_ResultCode.Descriptor instead.
func (CmdUnblockSignInResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{58, 0}
}

type CmdBlockSignUpResult_ResultCode int32

const (
	CmdBlockSignUpResult_Success       CmdBlockSignUpResult_ResultCode = 0 // 操作成功
	CmdBlockSignUpResult_InternalError CmdBlockSignUpResult_ResultCode = 1 // 操作失败，通常是数据库报错
)

// Enum value maps for CmdBlockSignUpResult_ResultCode.
var (
	CmdBlockSignUpResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	CmdBlockSignUpResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x CmdBlockSignUpResult_ResultCode) Enum() *CmdBlockSignUpResult_ResultCode {
	p := new(CmdBlockSignUpResult_ResultCode)
	*p = x
	return p
}

func (x CmdBlockSignUpResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdBlockSignUpResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[25].Descriptor()
}

func (CmdBlockSignUpResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[25]
}

func (x CmdBlockSignUpResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdBlockSignUpResult_ResultCode.Descriptor instead.
func (CmdBlockSignUpResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{60, 0}
}

type CmdUnblockSignUpResult_ResultCode int32

const (
	CmdUnblockSignUpResult_Success       CmdUnblockSignUpResult_ResultCode = 0 // 操作成功
	CmdUnblockSignUpResult_InternalError CmdUnblockSignUpResult_ResultCode = 1 // 操作失败，通常都是数据库拨错
)

// Enum value maps for CmdUnblockSignUpResult_ResultCode.
var (
	CmdUnblockSignUpResult_ResultCode_name = map[int32]string{
		0: "Success",
		1: "InternalError",
	}
	CmdUnblockSignUpResult_ResultCode_value = map[string]int32{
		"Success":       0,
		"InternalError": 1,
	}
)

func (x CmdUnblockSignUpResult_ResultCode) Enum() *CmdUnblockSignUpResult_ResultCode {
	p := new(CmdUnblockSignUpResult_ResultCode)
	*p = x
	return p
}

func (x CmdUnblockSignUpResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdUnblockSignUpResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[26].Descriptor()
}

func (CmdUnblockSignUpResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[26]
}

func (x CmdUnblockSignUpResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdUnblockSignUpResult_ResultCode.Descriptor instead.
func (CmdUnblockSignUpResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{62, 0}
}

type ContactRevoleUserNameResult_ResultCode int32

const (
	ContactRevoleUserNameResult_IsUser        ContactRevoleUserNameResult_ResultCode = 0
	ContactRevoleUserNameResult_IsChannel     ContactRevoleUserNameResult_ResultCode = 1
	ContactRevoleUserNameResult_InternalError ContactRevoleUserNameResult_ResultCode = 2
)

// Enum value maps for ContactRevoleUserNameResult_ResultCode.
var (
	ContactRevoleUserNameResult_ResultCode_name = map[int32]string{
		0: "IsUser",
		1: "IsChannel",
		2: "InternalError",
	}
	ContactRevoleUserNameResult_ResultCode_value = map[string]int32{
		"IsUser":        0,
		"IsChannel":     1,
		"InternalError": 2,
	}
)

func (x ContactRevoleUserNameResult_ResultCode) Enum() *ContactRevoleUserNameResult_ResultCode {
	p := new(ContactRevoleUserNameResult_ResultCode)
	*p = x
	return p
}

func (x ContactRevoleUserNameResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactRevoleUserNameResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[27].Descriptor()
}

func (ContactRevoleUserNameResult_ResultCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[27]
}

func (x ContactRevoleUserNameResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactRevoleUserNameResult_ResultCode.Descriptor instead.
func (ContactRevoleUserNameResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{64, 0}
}

type AuthSignUpPasswordResult_Code int32

const (
	AuthSignUpPasswordResult_Success             AuthSignUpPasswordResult_Code = 0
	AuthSignUpPasswordResult_InternalError       AuthSignUpPasswordResult_Code = 1
	AuthSignUpPasswordResult_CaptchaInvalid      AuthSignUpPasswordResult_Code = 2
	AuthSignUpPasswordResult_CaptchaExpired      AuthSignUpPasswordResult_Code = 3
	AuthSignUpPasswordResult_PhoneNumberOccupied AuthSignUpPasswordResult_Code = 4
	AuthSignUpPasswordResult_Flood               AuthSignUpPasswordResult_Code = 5
)

// Enum value maps for AuthSignUpPasswordResult_Code.
var (
	AuthSignUpPasswordResult_Code_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "CaptchaInvalid",
		3: "CaptchaExpired",
		4: "PhoneNumberOccupied",
		5: "Flood",
	}
	AuthSignUpPasswordResult_Code_value = map[string]int32{
		"Success":             0,
		"InternalError":       1,
		"CaptchaInvalid":      2,
		"CaptchaExpired":      3,
		"PhoneNumberOccupied": 4,
		"Flood":               5,
	}
)

func (x AuthSignUpPasswordResult_Code) Enum() *AuthSignUpPasswordResult_Code {
	p := new(AuthSignUpPasswordResult_Code)
	*p = x
	return p
}

func (x AuthSignUpPasswordResult_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthSignUpPasswordResult_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[28].Descriptor()
}

func (AuthSignUpPasswordResult_Code) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[28]
}

func (x AuthSignUpPasswordResult_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthSignUpPasswordResult_Code.Descriptor instead.
func (AuthSignUpPasswordResult_Code) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{71, 0}
}

type AuthSignInPasswordResult_Code int32

const (
	AuthSignInPasswordResult_Success               AuthSignInPasswordResult_Code = 0
	AuthSignInPasswordResult_InternalError         AuthSignInPasswordResult_Code = 1
	AuthSignInPasswordResult_PhoneNumberUnoccupied AuthSignInPasswordResult_Code = 2
	AuthSignInPasswordResult_Flood                 AuthSignInPasswordResult_Code = 3
	AuthSignInPasswordResult_PasswordInvalid       AuthSignInPasswordResult_Code = 4
)

// Enum value maps for AuthSignInPasswordResult_Code.
var (
	AuthSignInPasswordResult_Code_name = map[int32]string{
		0: "Success",
		1: "InternalError",
		2: "PhoneNumberUnoccupied",
		3: "Flood",
		4: "PasswordInvalid",
	}
	AuthSignInPasswordResult_Code_value = map[string]int32{
		"Success":               0,
		"InternalError":         1,
		"PhoneNumberUnoccupied": 2,
		"Flood":                 3,
		"PasswordInvalid":       4,
	}
)

func (x AuthSignInPasswordResult_Code) Enum() *AuthSignInPasswordResult_Code {
	p := new(AuthSignInPasswordResult_Code)
	*p = x
	return p
}

func (x AuthSignInPasswordResult_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthSignInPasswordResult_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[29].Descriptor()
}

func (AuthSignInPasswordResult_Code) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[29]
}

func (x AuthSignInPasswordResult_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthSignInPasswordResult_Code.Descriptor instead.
func (AuthSignInPasswordResult_Code) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{73, 0}
}

type AccountResetPasswordResult_Code int32

const (
	AccountResetPasswordResult_Success               AccountResetPasswordResult_Code = 0
	AccountResetPasswordResult_Internal              AccountResetPasswordResult_Code = 1
	AccountResetPasswordResult_CaptchaInvalid        AccountResetPasswordResult_Code = 2
	AccountResetPasswordResult_CaptchaExpired        AccountResetPasswordResult_Code = 3
	AccountResetPasswordResult_Flood                 AccountResetPasswordResult_Code = 4
	AccountResetPasswordResult_PhoneNumberUnoccupied AccountResetPasswordResult_Code = 5
	AccountResetPasswordResult_PasswordInvalid       AccountResetPasswordResult_Code = 6
	AccountResetPasswordResult_PasswordMustDifferent AccountResetPasswordResult_Code = 7
)

// Enum value maps for AccountResetPasswordResult_Code.
var (
	AccountResetPasswordResult_Code_name = map[int32]string{
		0: "Success",
		1: "Internal",
		2: "CaptchaInvalid",
		3: "CaptchaExpired",
		4: "Flood",
		5: "PhoneNumberUnoccupied",
		6: "PasswordInvalid",
		7: "PasswordMustDifferent",
	}
	AccountResetPasswordResult_Code_value = map[string]int32{
		"Success":               0,
		"Internal":              1,
		"CaptchaInvalid":        2,
		"CaptchaExpired":        3,
		"Flood":                 4,
		"PhoneNumberUnoccupied": 5,
		"PasswordInvalid":       6,
		"PasswordMustDifferent": 7,
	}
)

func (x AccountResetPasswordResult_Code) Enum() *AccountResetPasswordResult_Code {
	p := new(AccountResetPasswordResult_Code)
	*p = x
	return p
}

func (x AccountResetPasswordResult_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountResetPasswordResult_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[30].Descriptor()
}

func (AccountResetPasswordResult_Code) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[30]
}

func (x AccountResetPasswordResult_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountResetPasswordResult_Code.Descriptor instead.
func (AccountResetPasswordResult_Code) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{75, 0}
}

type GetUserChannelByUserNameResult_ErrorCode int32

const (
	GetUserChannelByUserNameResult_Success  GetUserChannelByUserNameResult_ErrorCode = 0 //成功
	GetUserChannelByUserNameResult_NOTFOUND GetUserChannelByUserNameResult_ErrorCode = 2 //没有查找到
)

// Enum value maps for GetUserChannelByUserNameResult_ErrorCode.
var (
	GetUserChannelByUserNameResult_ErrorCode_name = map[int32]string{
		0: "Success",
		2: "NOTFOUND",
	}
	GetUserChannelByUserNameResult_ErrorCode_value = map[string]int32{
		"Success":  0,
		"NOTFOUND": 2,
	}
)

func (x GetUserChannelByUserNameResult_ErrorCode) Enum() *GetUserChannelByUserNameResult_ErrorCode {
	p := new(GetUserChannelByUserNameResult_ErrorCode)
	*p = x
	return p
}

func (x GetUserChannelByUserNameResult_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserChannelByUserNameResult_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_infoserver_proto_enumTypes[31].Descriptor()
}

func (GetUserChannelByUserNameResult_ErrorCode) Type() protoreflect.EnumType {
	return &file_infoserver_proto_enumTypes[31]
}

func (x GetUserChannelByUserNameResult_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUserChannelByUserNameResult_ErrorCode.Descriptor instead.
func (GetUserChannelByUserNameResult_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{83, 0}
}

// 发送短信验证码的请求
type SendCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber   string        `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`      //客户端传过来的电话号码 未处理过的
	CurrentNumber bool          `protobuf:"varint,2,opt,name=CurrentNumber,proto3" json:"CurrentNumber,omitempty"` //是否是当前的号码
	ApiId         int32         `protobuf:"varint,3,opt,name=ApiId,proto3" json:"ApiId,omitempty"`
	ApiHash       string        `protobuf:"bytes,4,opt,name=ApiHash,proto3" json:"ApiHash,omitempty"`
	LangCode      string        `protobuf:"bytes,5,opt,name=LangCode,proto3" json:"LangCode,omitempty"`
	UserId        int32         `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"` //用户的ID
	KeyId         int64         `protobuf:"varint,7,opt,name=keyId,proto3" json:"keyId,omitempty"`   //用户的keyId(端的标识)
	Debug         *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
	CountryCode   string        `protobuf:"bytes,9,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` //国家码
	LocalPhone    string        `protobuf:"bytes,10,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`   //不带国家码的电话号码
}

func (x *SendCodeReq) Reset() {
	*x = SendCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCodeReq) ProtoMessage() {}

func (x *SendCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCodeReq.ProtoReflect.Descriptor instead.
func (*SendCodeReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{0}
}

func (x *SendCodeReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SendCodeReq) GetCurrentNumber() bool {
	if x != nil {
		return x.CurrentNumber
	}
	return false
}

func (x *SendCodeReq) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *SendCodeReq) GetApiHash() string {
	if x != nil {
		return x.ApiHash
	}
	return ""
}

func (x *SendCodeReq) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *SendCodeReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SendCodeReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SendCodeReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SendCodeReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SendCodeReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

// 发送短信请求的返回
type SendCodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        bool                      `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`                                                 //成功或者失败
	ErrorCode     SendCodeResult_ResultCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=infoserver.SendCodeResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	PhoneRegister bool                      `protobuf:"varint,3,opt,name=PhoneRegister,proto3" json:"PhoneRegister,omitempty"`                                   //手机是否已经注册，
	NextCodeType  CodeType                  `protobuf:"varint,4,opt,name=NextCodeType,proto3,enum=infoserver.CodeType" json:"NextCodeType,omitempty"`            //发送短信的验证码类型
	PhoneCodeHash string                    `protobuf:"bytes,5,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`                                    //验证码的哈希值
	TimeOut       int32                     `protobuf:"varint,6,opt,name=TimeOut,proto3" json:"TimeOut,omitempty"`                                               //短信的失效时间
	SendTypeApp   bool                      `protobuf:"varint,7,opt,name=SendTypeApp,proto3" json:"SendTypeApp,omitempty"`                                       //是否发送的app内验证码
	PhoneCodeDesc string                    `protobuf:"bytes,8,opt,name=PhoneCodeDesc,proto3" json:"PhoneCodeDesc,omitempty"`                                    // 验证码，统计使用
}

func (x *SendCodeResult) Reset() {
	*x = SendCodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCodeResult) ProtoMessage() {}

func (x *SendCodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCodeResult.ProtoReflect.Descriptor instead.
func (*SendCodeResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{1}
}

func (x *SendCodeResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *SendCodeResult) GetErrorCode() SendCodeResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return SendCodeResult_Success
}

func (x *SendCodeResult) GetPhoneRegister() bool {
	if x != nil {
		return x.PhoneRegister
	}
	return false
}

func (x *SendCodeResult) GetNextCodeType() CodeType {
	if x != nil {
		return x.NextCodeType
	}
	return CodeType_SendSms
}

func (x *SendCodeResult) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *SendCodeResult) GetTimeOut() int32 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *SendCodeResult) GetSendTypeApp() bool {
	if x != nil {
		return x.SendTypeApp
	}
	return false
}

func (x *SendCodeResult) GetPhoneCodeDesc() string {
	if x != nil {
		return x.PhoneCodeDesc
	}
	return ""
}

// 更改电话号码发送短信的接口
type SendChangePhoneCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber    string        `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"` //客户端传过来的电话号码 未处理过的
	AllowFlashcall bool          `protobuf:"varint,2,opt,name=AllowFlashcall,proto3" json:"AllowFlashcall,omitempty"`
	CurrentNumber  bool          `protobuf:"varint,3,opt,name=Current_number,json=CurrentNumber,proto3" json:"Current_number,omitempty"`
	UserId         int32         `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"` //用户的ID
	KeyId          int64         `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`   //用户的keyId(端的标识)
	Debug          *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
	CountryCode    string        `protobuf:"bytes,7,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` //国家码
	LocalPhone     string        `protobuf:"bytes,8,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`    //不带国家码的电话号码
}

func (x *SendChangePhoneCodeReq) Reset() {
	*x = SendChangePhoneCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChangePhoneCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChangePhoneCodeReq) ProtoMessage() {}

func (x *SendChangePhoneCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChangePhoneCodeReq.ProtoReflect.Descriptor instead.
func (*SendChangePhoneCodeReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{2}
}

func (x *SendChangePhoneCodeReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SendChangePhoneCodeReq) GetAllowFlashcall() bool {
	if x != nil {
		return x.AllowFlashcall
	}
	return false
}

func (x *SendChangePhoneCodeReq) GetCurrentNumber() bool {
	if x != nil {
		return x.CurrentNumber
	}
	return false
}

func (x *SendChangePhoneCodeReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SendChangePhoneCodeReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SendChangePhoneCodeReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SendChangePhoneCodeReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SendChangePhoneCodeReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

// 登录的请求
type SignInReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber   string        `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"` //电话号码
	PhoneCodeHash string        `protobuf:"bytes,2,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode     string        `protobuf:"bytes,3,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"` //验证码
	KeyId         int64         `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`        //用户的keyId(端的标识)
	Debug         *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
	CountryCode   string        `protobuf:"bytes,7,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` //国家码
	LocalPhone    string        `protobuf:"bytes,8,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`    //不带国家码的电话号码
}

func (x *SignInReq) Reset() {
	*x = SignInReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInReq) ProtoMessage() {}

func (x *SignInReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInReq.ProtoReflect.Descriptor instead.
func (*SignInReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{3}
}

func (x *SignInReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SignInReq) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *SignInReq) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

func (x *SignInReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SignInReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SignInReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SignInReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

// 登录或者注册接口的返回
type SignInOrReqitsterResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo  *UserInfo                          `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`                                                       //用户的具体信息
	ErrorCode SignInOrReqitsterResult_ResultCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=infoserver.SignInOrReqitsterResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Result    bool                               `protobuf:"varint,3,opt,name=Result,proto3" json:"Result,omitempty"`                                                          //成功或者失败
}

func (x *SignInOrReqitsterResult) Reset() {
	*x = SignInOrReqitsterResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInOrReqitsterResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInOrReqitsterResult) ProtoMessage() {}

func (x *SignInOrReqitsterResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInOrReqitsterResult.ProtoReflect.Descriptor instead.
func (*SignInOrReqitsterResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{4}
}

func (x *SignInOrReqitsterResult) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *SignInOrReqitsterResult) GetErrorCode() SignInOrReqitsterResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return SignInOrReqitsterResult_Success
}

func (x *SignInOrReqitsterResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 用户注册的请求结构
type SignUpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber    string        `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"` //电话号码
	PhoneCodeHash  string        `protobuf:"bytes,2,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode      string        `protobuf:"bytes,3,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"` //验证码
	KeyId          int64         `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`        //用户的keyId(端的标识)
	FirstName      string        `protobuf:"bytes,6,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName       string        `protobuf:"bytes,7,opt,name=LastName,proto3" json:"LastName,omitempty"`
	IsBot          bool          `protobuf:"varint,8,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	BotInfoVersion int32         `protobuf:"varint,9,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	BotChatHistory bool          `protobuf:"varint,10,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats     bool          `protobuf:"varint,11,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	DcId           int32         `protobuf:"varint,12,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,13,opt,name=debug,proto3" json:"debug,omitempty"`
	CountryCode    string        `protobuf:"bytes,14,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` // 国家码
	LocalPhone     string        `protobuf:"bytes,15,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`    // 不带国家码的号码
}

func (x *SignUpReq) Reset() {
	*x = SignUpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpReq) ProtoMessage() {}

func (x *SignUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpReq.ProtoReflect.Descriptor instead.
func (*SignUpReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{5}
}

func (x *SignUpReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SignUpReq) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *SignUpReq) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

func (x *SignUpReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SignUpReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *SignUpReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *SignUpReq) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *SignUpReq) GetBotInfoVersion() int32 {
	if x != nil {
		return x.BotInfoVersion
	}
	return 0
}

func (x *SignUpReq) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *SignUpReq) GetBotNoChats() bool {
	if x != nil {
		return x.BotNoChats
	}
	return false
}

func (x *SignUpReq) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

func (x *SignUpReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SignUpReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SignUpReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

type AuthSignUpResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     AuthSignUpResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.AuthSignUpResult_ResultCode" json:"code,omitempty"`
	UserInfo *UserInfo                   `protobuf:"bytes,2,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
}

func (x *AuthSignUpResult) Reset() {
	*x = AuthSignUpResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSignUpResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSignUpResult) ProtoMessage() {}

func (x *AuthSignUpResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSignUpResult.ProtoReflect.Descriptor instead.
func (*AuthSignUpResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{6}
}

func (x *AuthSignUpResult) GetCode() AuthSignUpResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return AuthSignUpResult_Success
}

func (x *AuthSignUpResult) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// 更改电话号码的请求参数
type ChangePhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`                             //用户的ID
	KeyId         int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`                               //用户的keyId(端的标识)
	PhoneNumber   string        `protobuf:"bytes,3,opt,name=Phone_number,json=PhoneNumber,proto3" json:"Phone_number,omitempty"` //更改的新电话号码
	PhoneCodeHash string        `protobuf:"bytes,4,opt,name=PhoneCodeHash,proto3" json:"PhoneCodeHash,omitempty"`
	PhoneCode     string        `protobuf:"bytes,5,opt,name=PhoneCode,proto3" json:"PhoneCode,omitempty"` //验证码
	Debug         *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
	CountryCode   string        `protobuf:"bytes,7,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` // 国家码
	LocalPhone    string        `protobuf:"bytes,8,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`    // 不带国家码的电话号码
}

func (x *ChangePhoneReq) Reset() {
	*x = ChangePhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePhoneReq) ProtoMessage() {}

func (x *ChangePhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePhoneReq.ProtoReflect.Descriptor instead.
func (*ChangePhoneReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{7}
}

func (x *ChangePhoneReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChangePhoneReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ChangePhoneReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ChangePhoneReq) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *ChangePhoneReq) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

func (x *ChangePhoneReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ChangePhoneReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *ChangePhoneReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

// 更改电话号码的返回
type ChangePhoneResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo  *UserInfo                    `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`                                                 //用户的具体信息
	ErrorCode ChangePhoneResult_ResultCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=infoserver.ChangePhoneResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Result    bool                         `protobuf:"varint,3,opt,name=Result,proto3" json:"Result,omitempty"`                                                    //成功或者失败
}

func (x *ChangePhoneResult) Reset() {
	*x = ChangePhoneResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePhoneResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePhoneResult) ProtoMessage() {}

func (x *ChangePhoneResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePhoneResult.ProtoReflect.Descriptor instead.
func (*ChangePhoneResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{8}
}

func (x *ChangePhoneResult) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ChangePhoneResult) GetErrorCode() ChangePhoneResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return ChangePhoneResult_Success
}

func (x *ChangePhoneResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 两步验证校验密码
type AuthCheckPasswdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` //用户自己的ID
	PasswordHash []byte        `protobuf:"bytes,2,opt,name=PasswordHash,proto3" json:"PasswordHash,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	KeyId        uint64        `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // 20171221,增加端表示，用于更新session登陆信息
}

func (x *AuthCheckPasswdReq) Reset() {
	*x = AuthCheckPasswdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthCheckPasswdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthCheckPasswdReq) ProtoMessage() {}

func (x *AuthCheckPasswdReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthCheckPasswdReq.ProtoReflect.Descriptor instead.
func (*AuthCheckPasswdReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{9}
}

func (x *AuthCheckPasswdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuthCheckPasswdReq) GetPasswordHash() []byte {
	if x != nil {
		return x.PasswordHash
	}
	return nil
}

func (x *AuthCheckPasswdReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *AuthCheckPasswdReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

// 校验两步验证的返回
type AuthCheckPasswdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo  *UserInfo                        `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`                                                     //用户的具体信息
	ErrorCode AuthCheckPasswdResult_ResultCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=infoserver.AuthCheckPasswdResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Result    bool                             `protobuf:"varint,3,opt,name=Result,proto3" json:"Result,omitempty"`                                                        //成功或者失败
}

func (x *AuthCheckPasswdResult) Reset() {
	*x = AuthCheckPasswdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthCheckPasswdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthCheckPasswdResult) ProtoMessage() {}

func (x *AuthCheckPasswdResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthCheckPasswdResult.ProtoReflect.Descriptor instead.
func (*AuthCheckPasswdResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{10}
}

func (x *AuthCheckPasswdResult) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *AuthCheckPasswdResult) GetErrorCode() AuthCheckPasswdResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return AuthCheckPasswdResult_Success
}

func (x *AuthCheckPasswdResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// importAuthorization  请求
type AuthImportAuthorizationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"` //用户的ID
	KeyId  int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`   //用户的keyId(端的标识)
	Bytes  []byte        `protobuf:"bytes,3,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	Dcid   int32         `protobuf:"varint,4,opt,name=dcid,proto3" json:"dcid,omitempty"`
	Authid int32         `protobuf:"varint,5,opt,name=authid,proto3" json:"authid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *AuthImportAuthorizationReq) Reset() {
	*x = AuthImportAuthorizationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthImportAuthorizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthImportAuthorizationReq) ProtoMessage() {}

func (x *AuthImportAuthorizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthImportAuthorizationReq.ProtoReflect.Descriptor instead.
func (*AuthImportAuthorizationReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{11}
}

func (x *AuthImportAuthorizationReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuthImportAuthorizationReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *AuthImportAuthorizationReq) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *AuthImportAuthorizationReq) GetDcid() int32 {
	if x != nil {
		return x.Dcid
	}
	return 0
}

func (x *AuthImportAuthorizationReq) GetAuthid() int32 {
	if x != nil {
		return x.Authid
	}
	return 0
}

func (x *AuthImportAuthorizationReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// importAuthorization 的返回
type AuthImportAuthorizationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo  *UserInfo                                `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`                                                             //用户的具体信息
	ErrorCode AuthImportAuthorizationResult_ResultCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=infoserver.AuthImportAuthorizationResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
	Result    bool                                     `protobuf:"varint,3,opt,name=Result,proto3" json:"Result,omitempty"`                                                                //成功或者失败
}

func (x *AuthImportAuthorizationResult) Reset() {
	*x = AuthImportAuthorizationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthImportAuthorizationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthImportAuthorizationResult) ProtoMessage() {}

func (x *AuthImportAuthorizationResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthImportAuthorizationResult.ProtoReflect.Descriptor instead.
func (*AuthImportAuthorizationResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{12}
}

func (x *AuthImportAuthorizationResult) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *AuthImportAuthorizationResult) GetErrorCode() AuthImportAuthorizationResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return AuthImportAuthorizationResult_Success
}

func (x *AuthImportAuthorizationResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// export auth 请求
type AuthExportAuthorizationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` //用户id
	Keyid  int64         `protobuf:"varint,2,opt,name=keyid,proto3" json:"keyid,omitempty"`   //用户的端标识
	Dcid   int32         `protobuf:"varint,3,opt,name=dcid,proto3" json:"dcid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *AuthExportAuthorizationReq) Reset() {
	*x = AuthExportAuthorizationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthExportAuthorizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthExportAuthorizationReq) ProtoMessage() {}

func (x *AuthExportAuthorizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthExportAuthorizationReq.ProtoReflect.Descriptor instead.
func (*AuthExportAuthorizationReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{13}
}

func (x *AuthExportAuthorizationReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *AuthExportAuthorizationReq) GetKeyid() int64 {
	if x != nil {
		return x.Keyid
	}
	return 0
}

func (x *AuthExportAuthorizationReq) GetDcid() int32 {
	if x != nil {
		return x.Dcid
	}
	return 0
}

func (x *AuthExportAuthorizationReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// export auth 返回
type AuthExportAuthorizationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code AuthExportAuthorizationResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.AuthExportAuthorizationResult_ResultCode" json:"code,omitempty"`
	Data []byte                                   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AuthExportAuthorizationResult) Reset() {
	*x = AuthExportAuthorizationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthExportAuthorizationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthExportAuthorizationResult) ProtoMessage() {}

func (x *AuthExportAuthorizationResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthExportAuthorizationResult.ProtoReflect.Descriptor instead.
func (*AuthExportAuthorizationResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{14}
}

func (x *AuthExportAuthorizationResult) GetCode() AuthExportAuthorizationResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return AuthExportAuthorizationResult_Success
}

func (x *AuthExportAuthorizationResult) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 恢复两步验证密码
type AuthRecoverPasswdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"` //用户的ID
	KeyId       int64         `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`   //用户的keyId(端的标识)
	Code        string        `protobuf:"bytes,3,opt,name=Code,proto3" json:"Code,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	PhoneNumber string        `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (x *AuthRecoverPasswdReq) Reset() {
	*x = AuthRecoverPasswdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRecoverPasswdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRecoverPasswdReq) ProtoMessage() {}

func (x *AuthRecoverPasswdReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRecoverPasswdReq.ProtoReflect.Descriptor instead.
func (*AuthRecoverPasswdReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{15}
}

func (x *AuthRecoverPasswdReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuthRecoverPasswdReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *AuthRecoverPasswdReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AuthRecoverPasswdReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *AuthRecoverPasswdReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

// 恢复两步验证密码 的返回
type AuthRecoverPasswdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo  *UserInfo                          `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`                                                       //用户的具体信息
	ErrorCode AuthRecoverPasswdResult_ResultCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=infoserver.AuthRecoverPasswdResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
}

func (x *AuthRecoverPasswdResult) Reset() {
	*x = AuthRecoverPasswdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRecoverPasswdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRecoverPasswdResult) ProtoMessage() {}

func (x *AuthRecoverPasswdResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRecoverPasswdResult.ProtoReflect.Descriptor instead.
func (*AuthRecoverPasswdResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{16}
}

func (x *AuthRecoverPasswdResult) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *AuthRecoverPasswdResult) GetErrorCode() AuthRecoverPasswdResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return AuthRecoverPasswdResult_Success
}

// 联系人搜索的请求
type ContactsSearchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"` //用户的ID
	Q      string        `protobuf:"bytes,2,opt,name=Q,proto3" json:"Q,omitempty"`            //需要搜索的用户名
	Limit  int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`   //最多发挥
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ContactsSearchReq) Reset() {
	*x = ContactsSearchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsSearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsSearchReq) ProtoMessage() {}

func (x *ContactsSearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsSearchReq.ProtoReflect.Descriptor instead.
func (*ContactsSearchReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{17}
}

func (x *ContactsSearchReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContactsSearchReq) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ContactsSearchReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ContactsSearchReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 搜索的结果
type ContactsSearcResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users     *UserInfoArray                 `protobuf:"bytes,1,opt,name=users,proto3" json:"users,omitempty"`                                                         //搜到的用户信息
	Channel   [][]byte                       `protobuf:"bytes,2,rep,name=channel,proto3" json:"channel,omitempty"`                                                     //搜到的超级群或者频道的信息
	ErrorCode ContactsSearcResult_ResultCode `protobuf:"varint,3,opt,name=ErrorCode,proto3,enum=infoserver.ContactsSearcResult_ResultCode" json:"ErrorCode,omitempty"` // 失败的错误码
}

func (x *ContactsSearcResult) Reset() {
	*x = ContactsSearcResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactsSearcResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactsSearcResult) ProtoMessage() {}

func (x *ContactsSearcResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactsSearcResult.ProtoReflect.Descriptor instead.
func (*ContactsSearcResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{18}
}

func (x *ContactsSearcResult) GetUsers() *UserInfoArray {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ContactsSearcResult) GetChannel() [][]byte {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *ContactsSearcResult) GetErrorCode() ContactsSearcResult_ResultCode {
	if x != nil {
		return x.ErrorCode
	}
	return ContactsSearcResult_Success
}

// 发送重置密码验证码
type AuthRequestPasswordRecoveryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string        `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	UserId      int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *AuthRequestPasswordRecoveryReq) Reset() {
	*x = AuthRequestPasswordRecoveryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRequestPasswordRecoveryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRequestPasswordRecoveryReq) ProtoMessage() {}

func (x *AuthRequestPasswordRecoveryReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRequestPasswordRecoveryReq.ProtoReflect.Descriptor instead.
func (*AuthRequestPasswordRecoveryReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{19}
}

func (x *AuthRequestPasswordRecoveryReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *AuthRequestPasswordRecoveryReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuthRequestPasswordRecoveryReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type AuthRequestPasswordRecoveryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         AuthRequestPasswordRecoveryResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.AuthRequestPasswordRecoveryResult_ResultCode" json:"code,omitempty"`
	EmailPattern string                                       `protobuf:"bytes,2,opt,name=email_pattern,json=emailPattern,proto3" json:"email_pattern,omitempty"`
}

func (x *AuthRequestPasswordRecoveryResult) Reset() {
	*x = AuthRequestPasswordRecoveryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRequestPasswordRecoveryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRequestPasswordRecoveryResult) ProtoMessage() {}

func (x *AuthRequestPasswordRecoveryResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRequestPasswordRecoveryResult.ProtoReflect.Descriptor instead.
func (*AuthRequestPasswordRecoveryResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{20}
}

func (x *AuthRequestPasswordRecoveryResult) GetCode() AuthRequestPasswordRecoveryResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return AuthRequestPasswordRecoveryResult_Success
}

func (x *AuthRequestPasswordRecoveryResult) GetEmailPattern() string {
	if x != nil {
		return x.EmailPattern
	}
	return ""
}

// 电话功能
type PhonecallSessionInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId        int64  `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                      // 通话会话id
	AccessHash       int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`                   // 通话会话哈希
	AdminId          int32  `protobuf:"varint,3,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`                            // 发起通话人的userid
	AdminKeyid       uint64 `protobuf:"varint,4,opt,name=admin_keyid,json=adminKeyid,proto3" json:"admin_keyid,omitempty"`                   // 发起通话的端标识
	ParticipantId    int32  `protobuf:"varint,5,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`          // 接收通话人的userid
	ParticipantKeyid uint64 `protobuf:"varint,6,opt,name=participant_keyid,json=participantKeyid,proto3" json:"participant_keyid,omitempty"` // 接听通话的端标识
	GB               []byte `protobuf:"bytes,7,opt,name=g_b,json=gB,proto3" json:"g_b,omitempty"`                                            // 接听通话的端信息
	CallRequestedAt  int32  `protobuf:"varint,8,opt,name=call_requested_at,json=callRequestedAt,proto3" json:"call_requested_at,omitempty"`  // 通话发起时间
	CallReceivedAt   int32  `protobuf:"varint,9,opt,name=call_received_at,json=callReceivedAt,proto3" json:"call_received_at,omitempty"`     // 通话接听时间
	CallConfirmedAt  int32  `protobuf:"varint,10,opt,name=call_confirmed_at,json=callConfirmedAt,proto3" json:"call_confirmed_at,omitempty"` // 通话确认握手完成时间
	PeerTag          []byte `protobuf:"bytes,11,opt,name=peer_tag,json=peerTag,proto3" json:"peer_tag,omitempty"`                            // 通话会话的唯一标识
	CurStatus        uint32 `protobuf:"varint,12,opt,name=cur_status,json=curStatus,proto3" json:"cur_status,omitempty"`                     // 通话会话的当前状态 0-CallRequested 1-CallAccepted 2-CallConfirmed 3-CallDiscarded
}

func (x *PhonecallSessionInformation) Reset() {
	*x = PhonecallSessionInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonecallSessionInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonecallSessionInformation) ProtoMessage() {}

func (x *PhonecallSessionInformation) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonecallSessionInformation.ProtoReflect.Descriptor instead.
func (*PhonecallSessionInformation) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{21}
}

func (x *PhonecallSessionInformation) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PhonecallSessionInformation) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *PhonecallSessionInformation) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *PhonecallSessionInformation) GetAdminKeyid() uint64 {
	if x != nil {
		return x.AdminKeyid
	}
	return 0
}

func (x *PhonecallSessionInformation) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *PhonecallSessionInformation) GetParticipantKeyid() uint64 {
	if x != nil {
		return x.ParticipantKeyid
	}
	return 0
}

func (x *PhonecallSessionInformation) GetGB() []byte {
	if x != nil {
		return x.GB
	}
	return nil
}

func (x *PhonecallSessionInformation) GetCallRequestedAt() int32 {
	if x != nil {
		return x.CallRequestedAt
	}
	return 0
}

func (x *PhonecallSessionInformation) GetCallReceivedAt() int32 {
	if x != nil {
		return x.CallReceivedAt
	}
	return 0
}

func (x *PhonecallSessionInformation) GetCallConfirmedAt() int32 {
	if x != nil {
		return x.CallConfirmedAt
	}
	return 0
}

func (x *PhonecallSessionInformation) GetPeerTag() []byte {
	if x != nil {
		return x.PeerTag
	}
	return nil
}

func (x *PhonecallSessionInformation) GetCurStatus() uint32 {
	if x != nil {
		return x.CurStatus
	}
	return 0
}

type PhonecallEndpointInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`     // udp server唯一id
	Ip   string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`      // udp IPv4
	Ipv6 string `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`  // udp IPv6
	Port int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"` // udp端口
}

func (x *PhonecallEndpointInformation) Reset() {
	*x = PhonecallEndpointInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonecallEndpointInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonecallEndpointInformation) ProtoMessage() {}

func (x *PhonecallEndpointInformation) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonecallEndpointInformation.ProtoReflect.Descriptor instead.
func (*PhonecallEndpointInformation) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{22}
}

func (x *PhonecallEndpointInformation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PhonecallEndpointInformation) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PhonecallEndpointInformation) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

func (x *PhonecallEndpointInformation) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type PhonecallAllocSessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallerId    int32         `protobuf:"varint,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`          // 发起通话人的userid
	ReceiverId  int32         `protobuf:"varint,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`    // 接受通话人的userid
	CallerKeyid uint64        `protobuf:"varint,3,opt,name=caller_keyid,json=callerKeyid,proto3" json:"caller_keyid,omitempty"` // 发起通话人的端标识
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *PhonecallAllocSessionReq) Reset() {
	*x = PhonecallAllocSessionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonecallAllocSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonecallAllocSessionReq) ProtoMessage() {}

func (x *PhonecallAllocSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonecallAllocSessionReq.ProtoReflect.Descriptor instead.
func (*PhonecallAllocSessionReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{23}
}

func (x *PhonecallAllocSessionReq) GetCallerId() int32 {
	if x != nil {
		return x.CallerId
	}
	return 0
}

func (x *PhonecallAllocSessionReq) GetReceiverId() int32 {
	if x != nil {
		return x.ReceiverId
	}
	return 0
}

func (x *PhonecallAllocSessionReq) GetCallerKeyid() uint64 {
	if x != nil {
		return x.CallerKeyid
	}
	return 0
}

func (x *PhonecallAllocSessionReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type PhonecallAllocSessionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       PhonecallAllocSessionResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhonecallAllocSessionResult_ResultCode" json:"code,omitempty"`
	SessionId  int64                                  `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`    //通话会话id
	AccessHash int64                                  `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //通话会话哈希
}

func (x *PhonecallAllocSessionResult) Reset() {
	*x = PhonecallAllocSessionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonecallAllocSessionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonecallAllocSessionResult) ProtoMessage() {}

func (x *PhonecallAllocSessionResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonecallAllocSessionResult.ProtoReflect.Descriptor instead.
func (*PhonecallAllocSessionResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{24}
}

func (x *PhonecallAllocSessionResult) GetCode() PhonecallAllocSessionResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return PhonecallAllocSessionResult_Success
}

func (x *PhonecallAllocSessionResult) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PhonecallAllocSessionResult) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

type PhonecallOnReceivedCallCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  int64         `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *PhonecallOnReceivedCallCheckReq) Reset() {
	*x = PhonecallOnReceivedCallCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonecallOnReceivedCallCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonecallOnReceivedCallCheckReq) ProtoMessage() {}

func (x *PhonecallOnReceivedCallCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonecallOnReceivedCallCheckReq.ProtoReflect.Descriptor instead.
func (*PhonecallOnReceivedCallCheckReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{25}
}

func (x *PhonecallOnReceivedCallCheckReq) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PhonecallOnReceivedCallCheckReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *PhonecallOnReceivedCallCheckReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type PhonecallOnReceivedCallCheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code PhonecallOnReceivedCallCheckResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhonecallOnReceivedCallCheckResult_ResultCode" json:"code,omitempty"`
}

func (x *PhonecallOnReceivedCallCheckResult) Reset() {
	*x = PhonecallOnReceivedCallCheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonecallOnReceivedCallCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonecallOnReceivedCallCheckResult) ProtoMessage() {}

func (x *PhonecallOnReceivedCallCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonecallOnReceivedCallCheckResult.ProtoReflect.Descriptor instead.
func (*PhonecallOnReceivedCallCheckResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{26}
}

func (x *PhonecallOnReceivedCallCheckResult) GetCode() PhonecallOnReceivedCallCheckResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return PhonecallOnReceivedCallCheckResult_SessionExist
}

type PhonecallOnAcceptCallUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId        int64         `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                      // 会话id
	AccessHash       int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`                   // 会话哈希
	ParticipantId    int32         `protobuf:"varint,3,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`          // 接受通话人的userid
	ParticipantKeyid uint64        `protobuf:"varint,4,opt,name=participant_keyid,json=participantKeyid,proto3" json:"participant_keyid,omitempty"` //接听通话的端标识
	GB               []byte        `protobuf:"bytes,5,opt,name=g_b,json=gB,proto3" json:"g_b,omitempty"`                                            // 接听通话的端信息
	Debug            *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *PhonecallOnAcceptCallUpdateReq) Reset() {
	*x = PhonecallOnAcceptCallUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonecallOnAcceptCallUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonecallOnAcceptCallUpdateReq) ProtoMessage() {}

func (x *PhonecallOnAcceptCallUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonecallOnAcceptCallUpdateReq.ProtoReflect.Descriptor instead.
func (*PhonecallOnAcceptCallUpdateReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{27}
}

func (x *PhonecallOnAcceptCallUpdateReq) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PhonecallOnAcceptCallUpdateReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *PhonecallOnAcceptCallUpdateReq) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *PhonecallOnAcceptCallUpdateReq) GetParticipantKeyid() uint64 {
	if x != nil {
		return x.ParticipantKeyid
	}
	return 0
}

func (x *PhonecallOnAcceptCallUpdateReq) GetGB() []byte {
	if x != nil {
		return x.GB
	}
	return nil
}

func (x *PhonecallOnAcceptCallUpdateReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type PhonecallOnAcceptCallUpdateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        PhonecallOnAcceptCallUpdateResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhonecallOnAcceptCallUpdateResult_ResultCode" json:"code,omitempty"`
	Information *PhonecallSessionInformation                 `protobuf:"bytes,2,opt,name=information,proto3" json:"information,omitempty"`
}

func (x *PhonecallOnAcceptCallUpdateResult) Reset() {
	*x = PhonecallOnAcceptCallUpdateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonecallOnAcceptCallUpdateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonecallOnAcceptCallUpdateResult) ProtoMessage() {}

func (x *PhonecallOnAcceptCallUpdateResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonecallOnAcceptCallUpdateResult.ProtoReflect.Descriptor instead.
func (*PhonecallOnAcceptCallUpdateResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{28}
}

func (x *PhonecallOnAcceptCallUpdateResult) GetCode() PhonecallOnAcceptCallUpdateResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return PhonecallOnAcceptCallUpdateResult_Success
}

func (x *PhonecallOnAcceptCallUpdateResult) GetInformation() *PhonecallSessionInformation {
	if x != nil {
		return x.Information
	}
	return nil
}

type PhonecallOnConfirmCallUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  int64         `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`    // 会话id
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` // 会话哈希
	AdminId    int32         `protobuf:"varint,3,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`          // 发起通话人的userid
	AdminKeyid uint64        `protobuf:"varint,4,opt,name=admin_keyid,json=adminKeyid,proto3" json:"admin_keyid,omitempty"` // 发起通话端标识
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *PhonecallOnConfirmCallUpdateReq) Reset() {
	*x = PhonecallOnConfirmCallUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonecallOnConfirmCallUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonecallOnConfirmCallUpdateReq) ProtoMessage() {}

func (x *PhonecallOnConfirmCallUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonecallOnConfirmCallUpdateReq.ProtoReflect.Descriptor instead.
func (*PhonecallOnConfirmCallUpdateReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{29}
}

func (x *PhonecallOnConfirmCallUpdateReq) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PhonecallOnConfirmCallUpdateReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *PhonecallOnConfirmCallUpdateReq) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *PhonecallOnConfirmCallUpdateReq) GetAdminKeyid() uint64 {
	if x != nil {
		return x.AdminKeyid
	}
	return 0
}

func (x *PhonecallOnConfirmCallUpdateReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type PhonecallOnConfirmCallUpdateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        PhonecallOnConfirmCallUpdateResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhonecallOnConfirmCallUpdateResult_ResultCode" json:"code,omitempty"`
	Information *PhonecallSessionInformation                  `protobuf:"bytes,2,opt,name=information,proto3" json:"information,omitempty"`
}

func (x *PhonecallOnConfirmCallUpdateResult) Reset() {
	*x = PhonecallOnConfirmCallUpdateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonecallOnConfirmCallUpdateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonecallOnConfirmCallUpdateResult) ProtoMessage() {}

func (x *PhonecallOnConfirmCallUpdateResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonecallOnConfirmCallUpdateResult.ProtoReflect.Descriptor instead.
func (*PhonecallOnConfirmCallUpdateResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{30}
}

func (x *PhonecallOnConfirmCallUpdateResult) GetCode() PhonecallOnConfirmCallUpdateResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return PhonecallOnConfirmCallUpdateResult_Success
}

func (x *PhonecallOnConfirmCallUpdateResult) GetInformation() *PhonecallSessionInformation {
	if x != nil {
		return x.Information
	}
	return nil
}

type PhonecallOnDiscardCallUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscarderId int32         `protobuf:"varint,1,opt,name=discarder_id,json=discarderId,proto3" json:"discarder_id,omitempty"`
	SessionId   int64         `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AccessHash  int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *PhonecallOnDiscardCallUpdateReq) Reset() {
	*x = PhonecallOnDiscardCallUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonecallOnDiscardCallUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonecallOnDiscardCallUpdateReq) ProtoMessage() {}

func (x *PhonecallOnDiscardCallUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonecallOnDiscardCallUpdateReq.ProtoReflect.Descriptor instead.
func (*PhonecallOnDiscardCallUpdateReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{31}
}

func (x *PhonecallOnDiscardCallUpdateReq) GetDiscarderId() int32 {
	if x != nil {
		return x.DiscarderId
	}
	return 0
}

func (x *PhonecallOnDiscardCallUpdateReq) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PhonecallOnDiscardCallUpdateReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *PhonecallOnDiscardCallUpdateReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type PhonecallOnDiscardCallUpdateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        PhonecallOnDiscardCallUpdateResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhonecallOnDiscardCallUpdateResult_ResultCode" json:"code,omitempty"`
	Information *PhonecallSessionInformation                  `protobuf:"bytes,2,opt,name=information,proto3" json:"information,omitempty"`
}

func (x *PhonecallOnDiscardCallUpdateResult) Reset() {
	*x = PhonecallOnDiscardCallUpdateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonecallOnDiscardCallUpdateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonecallOnDiscardCallUpdateResult) ProtoMessage() {}

func (x *PhonecallOnDiscardCallUpdateResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonecallOnDiscardCallUpdateResult.ProtoReflect.Descriptor instead.
func (*PhonecallOnDiscardCallUpdateResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{32}
}

func (x *PhonecallOnDiscardCallUpdateResult) GetCode() PhonecallOnDiscardCallUpdateResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return PhonecallOnDiscardCallUpdateResult_Success
}

func (x *PhonecallOnDiscardCallUpdateResult) GetInformation() *PhonecallSessionInformation {
	if x != nil {
		return x.Information
	}
	return nil
}

type PhonecallQueryEndpointsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *PhonecallQueryEndpointsReq) Reset() {
	*x = PhonecallQueryEndpointsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonecallQueryEndpointsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonecallQueryEndpointsReq) ProtoMessage() {}

func (x *PhonecallQueryEndpointsReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonecallQueryEndpointsReq.ProtoReflect.Descriptor instead.
func (*PhonecallQueryEndpointsReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{33}
}

func (x *PhonecallQueryEndpointsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type PhonecallQueryEndpointsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         PhonecallQueryEndpointsResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.PhonecallQueryEndpointsResult_ResultCode" json:"code,omitempty"`
	Informations []*PhonecallEndpointInformation          `protobuf:"bytes,2,rep,name=informations,proto3" json:"informations,omitempty"`
}

func (x *PhonecallQueryEndpointsResult) Reset() {
	*x = PhonecallQueryEndpointsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonecallQueryEndpointsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonecallQueryEndpointsResult) ProtoMessage() {}

func (x *PhonecallQueryEndpointsResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonecallQueryEndpointsResult.ProtoReflect.Descriptor instead.
func (*PhonecallQueryEndpointsResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{34}
}

func (x *PhonecallQueryEndpointsResult) GetCode() PhonecallQueryEndpointsResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return PhonecallQueryEndpointsResult_Success
}

func (x *PhonecallQueryEndpointsResult) GetInformations() []*PhonecallEndpointInformation {
	if x != nil {
		return x.Informations
	}
	return nil
}

type AuthCancelCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId         int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	PhoneNumber   string        `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string        `protobuf:"bytes,4,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *AuthCancelCodeReq) Reset() {
	*x = AuthCancelCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthCancelCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthCancelCodeReq) ProtoMessage() {}

func (x *AuthCancelCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthCancelCodeReq.ProtoReflect.Descriptor instead.
func (*AuthCancelCodeReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{35}
}

func (x *AuthCancelCodeReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuthCancelCodeReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *AuthCancelCodeReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *AuthCancelCodeReq) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

func (x *AuthCancelCodeReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type AuthCancelCodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeCanceled bool `protobuf:"varint,1,opt,name=code_canceled,json=codeCanceled,proto3" json:"code_canceled,omitempty"`
}

func (x *AuthCancelCodeResult) Reset() {
	*x = AuthCancelCodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthCancelCodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthCancelCodeResult) ProtoMessage() {}

func (x *AuthCancelCodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthCancelCodeResult.ProtoReflect.Descriptor instead.
func (*AuthCancelCodeResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{36}
}

func (x *AuthCancelCodeResult) GetCodeCanceled() bool {
	if x != nil {
		return x.CodeCanceled
	}
	return false
}

// 语言包信息
type Langpack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform    uint32 `protobuf:"varint,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NativeName  string `protobuf:"bytes,3,opt,name=native_name,json=nativeName,proto3" json:"native_name,omitempty"`
	LangCode    string `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	FromVersion int32  `protobuf:"varint,5,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty"`
	Version     int32  `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	Strings     []byte `protobuf:"bytes,7,opt,name=strings,proto3" json:"strings,omitempty"`
}

func (x *Langpack) Reset() {
	*x = Langpack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Langpack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Langpack) ProtoMessage() {}

func (x *Langpack) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Langpack.ProtoReflect.Descriptor instead.
func (*Langpack) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{37}
}

func (x *Langpack) GetPlatform() uint32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *Langpack) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Langpack) GetNativeName() string {
	if x != nil {
		return x.NativeName
	}
	return ""
}

func (x *Langpack) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *Langpack) GetFromVersion() int32 {
	if x != nil {
		return x.FromVersion
	}
	return 0
}

func (x *Langpack) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Langpack) GetStrings() []byte {
	if x != nil {
		return x.Strings
	}
	return nil
}

type LangpackList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vector []*Langpack `protobuf:"bytes,1,rep,name=vector,proto3" json:"vector,omitempty"`
}

func (x *LangpackList) Reset() {
	*x = LangpackList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LangpackList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LangpackList) ProtoMessage() {}

func (x *LangpackList) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LangpackList.ProtoReflect.Descriptor instead.
func (*LangpackList) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{38}
}

func (x *LangpackList) GetVector() []*Langpack {
	if x != nil {
		return x.Vector
	}
	return nil
}

type LangpackStrings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LangpackStrings) Reset() {
	*x = LangpackStrings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LangpackStrings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LangpackStrings) ProtoMessage() {}

func (x *LangpackStrings) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LangpackStrings.ProtoReflect.Descriptor instead.
func (*LangpackStrings) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{39}
}

func (x *LangpackStrings) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LangpackStrings) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type LangpackStringsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vector []*LangpackStrings `protobuf:"bytes,1,rep,name=vector,proto3" json:"vector,omitempty"`
}

func (x *LangpackStringsList) Reset() {
	*x = LangpackStringsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LangpackStringsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LangpackStringsList) ProtoMessage() {}

func (x *LangpackStringsList) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LangpackStringsList.ProtoReflect.Descriptor instead.
func (*LangpackStringsList) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{40}
}

func (x *LangpackStringsList) GetVector() []*LangpackStrings {
	if x != nil {
		return x.Vector
	}
	return nil
}

// 获取语言包列表rpc请求
type LangPacktReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform    uint32               `protobuf:"varint,1,opt,name=platform,proto3" json:"platform,omitempty"` // 客户端平台
	LangCode    string               `protobuf:"bytes,2,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	FromVersion int32                `protobuf:"varint,3,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty"`
	Keystrings  string               `protobuf:"bytes,4,opt,name=keystrings,proto3" json:"keystrings,omitempty"`
	Type        LangPacktReq_ReqType `protobuf:"varint,5,opt,name=type,proto3,enum=infoserver.LangPacktReq_ReqType" json:"type,omitempty"`
}

func (x *LangPacktReq) Reset() {
	*x = LangPacktReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LangPacktReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LangPacktReq) ProtoMessage() {}

func (x *LangPacktReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LangPacktReq.ProtoReflect.Descriptor instead.
func (*LangPacktReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{41}
}

func (x *LangPacktReq) GetPlatform() uint32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *LangPacktReq) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *LangPacktReq) GetFromVersion() int32 {
	if x != nil {
		return x.FromVersion
	}
	return 0
}

func (x *LangPacktReq) GetKeystrings() string {
	if x != nil {
		return x.Keystrings
	}
	return ""
}

func (x *LangPacktReq) GetType() LangPacktReq_ReqType {
	if x != nil {
		return x.Type
	}
	return LangPacktReq_LangPackGetLanguages
}

// 虚拟号信息
type VirtualPhoneNumberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualPhone     string `protobuf:"bytes,1,opt,name=virtual_phone,json=virtualPhone,proto3" json:"virtual_phone,omitempty"`               // 虚拟号
	RealPhone        string `protobuf:"bytes,2,opt,name=real_phone,json=realPhone,proto3" json:"real_phone,omitempty"`                        // 绑定的真实电话号码
	Activated        uint32 `protobuf:"varint,3,opt,name=activated,proto3" json:"activated,omitempty"`                                        // 是否为激活状态
	BindTime         int64  `protobuf:"varint,4,opt,name=bind_time,json=bindTime,proto3" json:"bind_time,omitempty"`                          // 绑定电话号码的时间 unix timestamp
	ActivateTime     int64  `protobuf:"varint,5,opt,name=activate_time,json=activateTime,proto3" json:"activate_time,omitempty"`              // 激活时间
	ActivateAdminId  int32  `protobuf:"varint,6,opt,name=activate_admin_id,json=activateAdminId,proto3" json:"activate_admin_id,omitempty"`   // 激活该虚拟号的管理员id
	BindAdminId      int32  `protobuf:"varint,7,opt,name=bind_admin_id,json=bindAdminId,proto3" json:"bind_admin_id,omitempty"`               // 为该虚拟号码绑定电话的管理员id
	OwnerId          int32  `protobuf:"varint,8,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                             // user id of whom owns the phone
	InitialPhoneCode string `protobuf:"bytes,9,opt,name=initial_phone_code,json=initialPhoneCode,proto3" json:"initial_phone_code,omitempty"` // phone code for register if not bind yet
}

func (x *VirtualPhoneNumberInfo) Reset() {
	*x = VirtualPhoneNumberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualPhoneNumberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualPhoneNumberInfo) ProtoMessage() {}

func (x *VirtualPhoneNumberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualPhoneNumberInfo.ProtoReflect.Descriptor instead.
func (*VirtualPhoneNumberInfo) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{42}
}

func (x *VirtualPhoneNumberInfo) GetVirtualPhone() string {
	if x != nil {
		return x.VirtualPhone
	}
	return ""
}

func (x *VirtualPhoneNumberInfo) GetRealPhone() string {
	if x != nil {
		return x.RealPhone
	}
	return ""
}

func (x *VirtualPhoneNumberInfo) GetActivated() uint32 {
	if x != nil {
		return x.Activated
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetBindTime() int64 {
	if x != nil {
		return x.BindTime
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetActivateTime() int64 {
	if x != nil {
		return x.ActivateTime
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetActivateAdminId() int32 {
	if x != nil {
		return x.ActivateAdminId
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetBindAdminId() int32 {
	if x != nil {
		return x.BindAdminId
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *VirtualPhoneNumberInfo) GetInitialPhoneCode() string {
	if x != nil {
		return x.InitialPhoneCode
	}
	return ""
}

// 虚拟号生成
type CmdVirtualPhoneNumberGenerateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug    *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`                     // 跟踪信息
	Quantity uint32        `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`              // 需要生成的数量
	AdminId  int32         `protobuf:"varint,3,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"` //管理员id
	OwnerId  int32         `protobuf:"varint,4,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"` // user if of owner
}

func (x *CmdVirtualPhoneNumberGenerateReq) Reset() {
	*x = CmdVirtualPhoneNumberGenerateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdVirtualPhoneNumberGenerateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdVirtualPhoneNumberGenerateReq) ProtoMessage() {}

func (x *CmdVirtualPhoneNumberGenerateReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdVirtualPhoneNumberGenerateReq.ProtoReflect.Descriptor instead.
func (*CmdVirtualPhoneNumberGenerateReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{43}
}

func (x *CmdVirtualPhoneNumberGenerateReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *CmdVirtualPhoneNumberGenerateReq) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CmdVirtualPhoneNumberGenerateReq) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *CmdVirtualPhoneNumberGenerateReq) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

type CmdVirtualPhoneNumberGenerateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  CmdVirtualPhoneNumberGenerateResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdVirtualPhoneNumberGenerateResult_ResultCode" json:"code,omitempty"`
	Infos []*VirtualPhoneNumberInfo                      `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"` //生成的虚拟号的信息
}

func (x *CmdVirtualPhoneNumberGenerateResult) Reset() {
	*x = CmdVirtualPhoneNumberGenerateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdVirtualPhoneNumberGenerateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdVirtualPhoneNumberGenerateResult) ProtoMessage() {}

func (x *CmdVirtualPhoneNumberGenerateResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdVirtualPhoneNumberGenerateResult.ProtoReflect.Descriptor instead.
func (*CmdVirtualPhoneNumberGenerateResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{44}
}

func (x *CmdVirtualPhoneNumberGenerateResult) GetCode() CmdVirtualPhoneNumberGenerateResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return CmdVirtualPhoneNumberGenerateResult_Success
}

func (x *CmdVirtualPhoneNumberGenerateResult) GetInfos() []*VirtualPhoneNumberInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

// 生成指定的虚拟号
type CmdVirtualPhoneNumberSpecialGenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecialNumber string `protobuf:"bytes,1,opt,name=special_number,json=specialNumber,proto3" json:"special_number,omitempty"` // 指定的号码
	AdminId       int32  `protobuf:"varint,2,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`                  // 管理员id
	OwnerId       int32  `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                  // user id of owner
}

func (x *CmdVirtualPhoneNumberSpecialGenReq) Reset() {
	*x = CmdVirtualPhoneNumberSpecialGenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdVirtualPhoneNumberSpecialGenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdVirtualPhoneNumberSpecialGenReq) ProtoMessage() {}

func (x *CmdVirtualPhoneNumberSpecialGenReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdVirtualPhoneNumberSpecialGenReq.ProtoReflect.Descriptor instead.
func (*CmdVirtualPhoneNumberSpecialGenReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{45}
}

func (x *CmdVirtualPhoneNumberSpecialGenReq) GetSpecialNumber() string {
	if x != nil {
		return x.SpecialNumber
	}
	return ""
}

func (x *CmdVirtualPhoneNumberSpecialGenReq) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *CmdVirtualPhoneNumberSpecialGenReq) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

type CmdVirtualPhoneNumberSpecialGenResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否激活成功
	Info    *VirtualPhoneNumberInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`        //
}

func (x *CmdVirtualPhoneNumberSpecialGenResult) Reset() {
	*x = CmdVirtualPhoneNumberSpecialGenResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdVirtualPhoneNumberSpecialGenResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdVirtualPhoneNumberSpecialGenResult) ProtoMessage() {}

func (x *CmdVirtualPhoneNumberSpecialGenResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdVirtualPhoneNumberSpecialGenResult.ProtoReflect.Descriptor instead.
func (*CmdVirtualPhoneNumberSpecialGenResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{46}
}

func (x *CmdVirtualPhoneNumberSpecialGenResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CmdVirtualPhoneNumberSpecialGenResult) GetInfo() *VirtualPhoneNumberInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// 虚拟号绑定
type CmdVirtualPhoneNumberBindRealPhoneNumberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug              *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`                                                       // 跟踪信息
	VirtualPhoneNumber string        `protobuf:"bytes,2,opt,name=virtual_phone_number,json=virtualPhoneNumber,proto3" json:"virtual_phone_number,omitempty"` // 虚拟号
	RealPhoneNumber    string        `protobuf:"bytes,3,opt,name=real_phone_number,json=realPhoneNumber,proto3" json:"real_phone_number,omitempty"`          // 真实电话号码
	AdminId            int32         `protobuf:"varint,4,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`                                   // 管理员id
}

func (x *CmdVirtualPhoneNumberBindRealPhoneNumberReq) Reset() {
	*x = CmdVirtualPhoneNumberBindRealPhoneNumberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdVirtualPhoneNumberBindRealPhoneNumberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdVirtualPhoneNumberBindRealPhoneNumberReq) ProtoMessage() {}

func (x *CmdVirtualPhoneNumberBindRealPhoneNumberReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdVirtualPhoneNumberBindRealPhoneNumberReq.ProtoReflect.Descriptor instead.
func (*CmdVirtualPhoneNumberBindRealPhoneNumberReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{47}
}

func (x *CmdVirtualPhoneNumberBindRealPhoneNumberReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *CmdVirtualPhoneNumberBindRealPhoneNumberReq) GetVirtualPhoneNumber() string {
	if x != nil {
		return x.VirtualPhoneNumber
	}
	return ""
}

func (x *CmdVirtualPhoneNumberBindRealPhoneNumberReq) GetRealPhoneNumber() string {
	if x != nil {
		return x.RealPhoneNumber
	}
	return ""
}

func (x *CmdVirtualPhoneNumberBindRealPhoneNumberReq) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

type CmdVirtualPhoneNumberBindRealPhoneNumberResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode" json:"code,omitempty"`
	Current string                                                    `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *CmdVirtualPhoneNumberBindRealPhoneNumberResult) Reset() {
	*x = CmdVirtualPhoneNumberBindRealPhoneNumberResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdVirtualPhoneNumberBindRealPhoneNumberResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdVirtualPhoneNumberBindRealPhoneNumberResult) ProtoMessage() {}

func (x *CmdVirtualPhoneNumberBindRealPhoneNumberResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdVirtualPhoneNumberBindRealPhoneNumberResult.ProtoReflect.Descriptor instead.
func (*CmdVirtualPhoneNumberBindRealPhoneNumberResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{48}
}

func (x *CmdVirtualPhoneNumberBindRealPhoneNumberResult) GetCode() CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return CmdVirtualPhoneNumberBindRealPhoneNumberResult_Success
}

func (x *CmdVirtualPhoneNumberBindRealPhoneNumberResult) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

// 虚拟号解绑
type CmdVirtualPhoneNumberUnbindRealPhoneNumberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug              *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`                                                       // 跟踪信息
	VirtualPhoneNumber string        `protobuf:"bytes,2,opt,name=virtual_phone_number,json=virtualPhoneNumber,proto3" json:"virtual_phone_number,omitempty"` // 虚拟号
	AdminId            int32         `protobuf:"varint,3,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`                                   //管理员id
}

func (x *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) Reset() {
	*x = CmdVirtualPhoneNumberUnbindRealPhoneNumberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) ProtoMessage() {}

func (x *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdVirtualPhoneNumberUnbindRealPhoneNumberReq.ProtoReflect.Descriptor instead.
func (*CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{49}
}

func (x *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) GetVirtualPhoneNumber() string {
	if x != nil {
		return x.VirtualPhoneNumber
	}
	return ""
}

func (x *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

type CmdVirtualPhoneNumberUnbindRealPhoneNumberResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode" json:"code,omitempty"`
	BeforeDelete string                                                      `protobuf:"bytes,2,opt,name=before_delete,json=beforeDelete,proto3" json:"before_delete,omitempty"`
}

func (x *CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) Reset() {
	*x = CmdVirtualPhoneNumberUnbindRealPhoneNumberResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) ProtoMessage() {}

func (x *CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdVirtualPhoneNumberUnbindRealPhoneNumberResult.ProtoReflect.Descriptor instead.
func (*CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{50}
}

func (x *CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) GetCode() CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_Success
}

func (x *CmdVirtualPhoneNumberUnbindRealPhoneNumberResult) GetBeforeDelete() string {
	if x != nil {
		return x.BeforeDelete
	}
	return ""
}

// 虚拟号信息查询
type CmdVirtualPhoneNumberQueryInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug              *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	VirtualPhoneNumber string        `protobuf:"bytes,2,opt,name=virtual_phone_number,json=virtualPhoneNumber,proto3" json:"virtual_phone_number,omitempty"`
}

func (x *CmdVirtualPhoneNumberQueryInfoReq) Reset() {
	*x = CmdVirtualPhoneNumberQueryInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdVirtualPhoneNumberQueryInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdVirtualPhoneNumberQueryInfoReq) ProtoMessage() {}

func (x *CmdVirtualPhoneNumberQueryInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdVirtualPhoneNumberQueryInfoReq.ProtoReflect.Descriptor instead.
func (*CmdVirtualPhoneNumberQueryInfoReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{51}
}

func (x *CmdVirtualPhoneNumberQueryInfoReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *CmdVirtualPhoneNumberQueryInfoReq) GetVirtualPhoneNumber() string {
	if x != nil {
		return x.VirtualPhoneNumber
	}
	return ""
}

type CmdVirtualPhoneNumberQueryInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CmdVirtualPhoneNumberQueryInfoResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdVirtualPhoneNumberQueryInfoResult_ResultCode" json:"code,omitempty"`
	Info *VirtualPhoneNumberInfo                         `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *CmdVirtualPhoneNumberQueryInfoResult) Reset() {
	*x = CmdVirtualPhoneNumberQueryInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdVirtualPhoneNumberQueryInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdVirtualPhoneNumberQueryInfoResult) ProtoMessage() {}

func (x *CmdVirtualPhoneNumberQueryInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdVirtualPhoneNumberQueryInfoResult.ProtoReflect.Descriptor instead.
func (*CmdVirtualPhoneNumberQueryInfoResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{52}
}

func (x *CmdVirtualPhoneNumberQueryInfoResult) GetCode() CmdVirtualPhoneNumberQueryInfoResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return CmdVirtualPhoneNumberQueryInfoResult_Success
}

func (x *CmdVirtualPhoneNumberQueryInfoResult) GetInfo() *VirtualPhoneNumberInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// 绑定服务号码
type CmdSysPhoneNumberBindRealPhoneNumberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug       *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	SysNo       string        `protobuf:"bytes,2,opt,name=sys_no,json=sysNo,proto3" json:"sys_no,omitempty"`                   // 服务号显示的号码
	PhoneNumber string        `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` // 要绑定的真实电话号码 国家码+号码
}

func (x *CmdSysPhoneNumberBindRealPhoneNumberReq) Reset() {
	*x = CmdSysPhoneNumberBindRealPhoneNumberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdSysPhoneNumberBindRealPhoneNumberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdSysPhoneNumberBindRealPhoneNumberReq) ProtoMessage() {}

func (x *CmdSysPhoneNumberBindRealPhoneNumberReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdSysPhoneNumberBindRealPhoneNumberReq.ProtoReflect.Descriptor instead.
func (*CmdSysPhoneNumberBindRealPhoneNumberReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{53}
}

func (x *CmdSysPhoneNumberBindRealPhoneNumberReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *CmdSysPhoneNumberBindRealPhoneNumberReq) GetSysNo() string {
	if x != nil {
		return x.SysNo
	}
	return ""
}

func (x *CmdSysPhoneNumberBindRealPhoneNumberReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type CmdSysPhoneNumberBindRealPhoneNumberResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode" json:"code,omitempty"`
}

func (x *CmdSysPhoneNumberBindRealPhoneNumberResult) Reset() {
	*x = CmdSysPhoneNumberBindRealPhoneNumberResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdSysPhoneNumberBindRealPhoneNumberResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdSysPhoneNumberBindRealPhoneNumberResult) ProtoMessage() {}

func (x *CmdSysPhoneNumberBindRealPhoneNumberResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdSysPhoneNumberBindRealPhoneNumberResult.ProtoReflect.Descriptor instead.
func (*CmdSysPhoneNumberBindRealPhoneNumberResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{54}
}

func (x *CmdSysPhoneNumberBindRealPhoneNumberResult) GetCode() CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return CmdSysPhoneNumberBindRealPhoneNumberResult_Success
}

// 阻止登陆
type CmdBlockSignInReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumbers []string `protobuf:"bytes,1,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"` // 要阻止登陆的号码列表，为空表示阻止所有人登陆
}

func (x *CmdBlockSignInReq) Reset() {
	*x = CmdBlockSignInReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdBlockSignInReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdBlockSignInReq) ProtoMessage() {}

func (x *CmdBlockSignInReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdBlockSignInReq.ProtoReflect.Descriptor instead.
func (*CmdBlockSignInReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{55}
}

func (x *CmdBlockSignInReq) GetPhoneNumbers() []string {
	if x != nil {
		return x.PhoneNumbers
	}
	return nil
}

type CmdBlockSignInResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CmdBlockSignInResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdBlockSignInResult_ResultCode" json:"code,omitempty"`
}

func (x *CmdBlockSignInResult) Reset() {
	*x = CmdBlockSignInResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdBlockSignInResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdBlockSignInResult) ProtoMessage() {}

func (x *CmdBlockSignInResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdBlockSignInResult.ProtoReflect.Descriptor instead.
func (*CmdBlockSignInResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{56}
}

func (x *CmdBlockSignInResult) GetCode() CmdBlockSignInResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return CmdBlockSignInResult_Success
}

// 接触登陆禁止
type CmdUnblockSignInReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumbers []string `protobuf:"bytes,1,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"` // 需要解除禁制的号码列表，为空表示除了使用CmdBlockSignInReq指定禁止的号码 之外的号码 都解除禁止登录的设置
}

func (x *CmdUnblockSignInReq) Reset() {
	*x = CmdUnblockSignInReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdUnblockSignInReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdUnblockSignInReq) ProtoMessage() {}

func (x *CmdUnblockSignInReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdUnblockSignInReq.ProtoReflect.Descriptor instead.
func (*CmdUnblockSignInReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{57}
}

func (x *CmdUnblockSignInReq) GetPhoneNumbers() []string {
	if x != nil {
		return x.PhoneNumbers
	}
	return nil
}

type CmdUnblockSignInResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CmdUnblockSignInResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdUnblockSignInResult_ResultCode" json:"code,omitempty"`
}

func (x *CmdUnblockSignInResult) Reset() {
	*x = CmdUnblockSignInResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdUnblockSignInResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdUnblockSignInResult) ProtoMessage() {}

func (x *CmdUnblockSignInResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdUnblockSignInResult.ProtoReflect.Descriptor instead.
func (*CmdUnblockSignInResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{58}
}

func (x *CmdUnblockSignInResult) GetCode() CmdUnblockSignInResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return CmdUnblockSignInResult_Success
}

// 阻止注册
type CmdBlockSignUpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CmdBlockSignUpReq) Reset() {
	*x = CmdBlockSignUpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdBlockSignUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdBlockSignUpReq) ProtoMessage() {}

func (x *CmdBlockSignUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdBlockSignUpReq.ProtoReflect.Descriptor instead.
func (*CmdBlockSignUpReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{59}
}

type CmdBlockSignUpResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CmdBlockSignUpResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdBlockSignUpResult_ResultCode" json:"code,omitempty"`
}

func (x *CmdBlockSignUpResult) Reset() {
	*x = CmdBlockSignUpResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdBlockSignUpResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdBlockSignUpResult) ProtoMessage() {}

func (x *CmdBlockSignUpResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdBlockSignUpResult.ProtoReflect.Descriptor instead.
func (*CmdBlockSignUpResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{60}
}

func (x *CmdBlockSignUpResult) GetCode() CmdBlockSignUpResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return CmdBlockSignUpResult_Success
}

// 解除禁止注册
type CmdUnblockSignUpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CmdUnblockSignUpReq) Reset() {
	*x = CmdUnblockSignUpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdUnblockSignUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdUnblockSignUpReq) ProtoMessage() {}

func (x *CmdUnblockSignUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdUnblockSignUpReq.ProtoReflect.Descriptor instead.
func (*CmdUnblockSignUpReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{61}
}

type CmdUnblockSignUpResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CmdUnblockSignUpResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.CmdUnblockSignUpResult_ResultCode" json:"code,omitempty"`
}

func (x *CmdUnblockSignUpResult) Reset() {
	*x = CmdUnblockSignUpResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdUnblockSignUpResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdUnblockSignUpResult) ProtoMessage() {}

func (x *CmdUnblockSignUpResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdUnblockSignUpResult.ProtoReflect.Descriptor instead.
func (*CmdUnblockSignUpResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{62}
}

func (x *CmdUnblockSignUpResult) GetCode() CmdUnblockSignUpResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return CmdUnblockSignUpResult_Success
}

// 根据username 来查找具体的超级群/人的请求
type ContactRevoleUserNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId   int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"` //用户自己的ID
	Username string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ContactRevoleUserNameReq) Reset() {
	*x = ContactRevoleUserNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactRevoleUserNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactRevoleUserNameReq) ProtoMessage() {}

func (x *ContactRevoleUserNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactRevoleUserNameReq.ProtoReflect.Descriptor instead.
func (*ContactRevoleUserNameReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{63}
}

func (x *ContactRevoleUserNameReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *ContactRevoleUserNameReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ContactRevoleUserNameReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 根据username 来查找具体的超级群/人的结果
type ContactRevoleUserNameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo   *UserInfo                              `protobuf:"bytes,1,opt,name=uinfo,proto3" json:"uinfo,omitempty"`
	Channel []byte                                 `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"` //超级群的mtp的二进制
	Code    ContactRevoleUserNameResult_ResultCode `protobuf:"varint,3,opt,name=code,proto3,enum=infoserver.ContactRevoleUserNameResult_ResultCode" json:"code,omitempty"`
}

func (x *ContactRevoleUserNameResult) Reset() {
	*x = ContactRevoleUserNameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactRevoleUserNameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactRevoleUserNameResult) ProtoMessage() {}

func (x *ContactRevoleUserNameResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactRevoleUserNameResult.ProtoReflect.Descriptor instead.
func (*ContactRevoleUserNameResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{64}
}

func (x *ContactRevoleUserNameResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *ContactRevoleUserNameResult) GetChannel() []byte {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *ContactRevoleUserNameResult) GetCode() ContactRevoleUserNameResult_ResultCode {
	if x != nil {
		return x.Code
	}
	return ContactRevoleUserNameResult_IsUser
}

// getfull user的请求
type GetFullUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId     int32         `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`         //自己的用户Id
	UserId     int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 需要获取的用户的ID
	AccessHash int64         `protobuf:"varint,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"` //需要获取的用户的哈希值
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`            //日志记录相关的
}

func (x *GetFullUserReq) Reset() {
	*x = GetFullUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullUserReq) ProtoMessage() {}

func (x *GetFullUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullUserReq.ProtoReflect.Descriptor instead.
func (*GetFullUserReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{65}
}

func (x *GetFullUserReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetFullUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFullUserReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetFullUserReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// getfull user的请求
type GetFullUserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo               *UserInfo `protobuf:"bytes,1,opt,name=uinfo,proto3" json:"uinfo,omitempty"`                                                           //用户的基础信息
	Isblocked           bool      `protobuf:"varint,2,opt,name=isblocked,proto3" json:"isblocked,omitempty"`                                                  //此用户是否是自己的黑名单
	PhoneCallsPrivate   bool      `protobuf:"varint,3,opt,name=phone_calls_private,json=phoneCallsPrivate,proto3" json:"phone_calls_private,omitempty"`       //userfull需要
	PhoneCallsAvailable bool      `protobuf:"varint,4,opt,name=phone_calls_available,json=phoneCallsAvailable,proto3" json:"phone_calls_available,omitempty"` //userfull需要
	About               string    `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`                                                           //用户的个性签名
	CommonChat          int32     `protobuf:"varint,6,opt,name=common_chat,json=commonChat,proto3" json:"common_chat,omitempty"`                              //共同群的个数
	Errorcode           ReErrCode `protobuf:"varint,7,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"`                        //返回错误码
}

func (x *GetFullUserResult) Reset() {
	*x = GetFullUserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullUserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullUserResult) ProtoMessage() {}

func (x *GetFullUserResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullUserResult.ProtoReflect.Descriptor instead.
func (*GetFullUserResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{66}
}

func (x *GetFullUserResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *GetFullUserResult) GetIsblocked() bool {
	if x != nil {
		return x.Isblocked
	}
	return false
}

func (x *GetFullUserResult) GetPhoneCallsPrivate() bool {
	if x != nil {
		return x.PhoneCallsPrivate
	}
	return false
}

func (x *GetFullUserResult) GetPhoneCallsAvailable() bool {
	if x != nil {
		return x.PhoneCallsAvailable
	}
	return false
}

func (x *GetFullUserResult) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *GetFullUserResult) GetCommonChat() int32 {
	if x != nil {
		return x.CommonChat
	}
	return 0
}

func (x *GetFullUserResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type GetFullUserSimReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId     int32         `protobuf:"varint,1,opt,name=selfId,proto3" json:"selfId,omitempty"`         //自己的用户Id
	UserId     int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 需要获取的用户的ID
	AccessHash int64         `protobuf:"varint,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"` //需要获取的用户的哈希值
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`            //日志记录相关的
}

func (x *GetFullUserSimReq) Reset() {
	*x = GetFullUserSimReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullUserSimReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullUserSimReq) ProtoMessage() {}

func (x *GetFullUserSimReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullUserSimReq.ProtoReflect.Descriptor instead.
func (*GetFullUserSimReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{67}
}

func (x *GetFullUserSimReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetFullUserSimReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFullUserSimReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GetFullUserSimReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UserLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country string `protobuf:"bytes,1,opt,name=Country,proto3" json:"Country,omitempty"`
	City    string `protobuf:"bytes,2,opt,name=City,proto3" json:"City,omitempty"`
	Detail  string `protobuf:"bytes,3,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (x *UserLocation) Reset() {
	*x = UserLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLocation) ProtoMessage() {}

func (x *UserLocation) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLocation.ProtoReflect.Descriptor instead.
func (*UserLocation) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{68}
}

func (x *UserLocation) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UserLocation) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UserLocation) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type GetFullUserSimResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo               *UserInfo     `protobuf:"bytes,1,opt,name=uinfo,proto3" json:"uinfo,omitempty"`                                                           //用户的基础信息
	Isblocked           bool          `protobuf:"varint,2,opt,name=isblocked,proto3" json:"isblocked,omitempty"`                                                  //此用户是否是自己的黑名单
	PhoneCallsPrivate   bool          `protobuf:"varint,3,opt,name=phone_calls_private,json=phoneCallsPrivate,proto3" json:"phone_calls_private,omitempty"`       //userfull需要
	PhoneCallsAvailable bool          `protobuf:"varint,4,opt,name=phone_calls_available,json=phoneCallsAvailable,proto3" json:"phone_calls_available,omitempty"` //userfull需要
	About               string        `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`                                                           //用户的个性签名
	CommonChat          int32         `protobuf:"varint,6,opt,name=common_chat,json=commonChat,proto3" json:"common_chat,omitempty"`                              //共同群的个数
	Gender              int32         `protobuf:"varint,7,opt,name=Gender,proto3" json:"Gender,omitempty"`
	Email               string        `protobuf:"bytes,8,opt,name=Email,proto3" json:"Email,omitempty"`
	Location            *UserLocation `protobuf:"bytes,9,opt,name=Location,proto3" json:"Location,omitempty"`
	Errorcode           ReErrCode     `protobuf:"varint,10,opt,name=Errorcode,proto3,enum=infoserver.ReErrCode" json:"Errorcode,omitempty"` //返回错误码
}

func (x *GetFullUserSimResult) Reset() {
	*x = GetFullUserSimResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullUserSimResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullUserSimResult) ProtoMessage() {}

func (x *GetFullUserSimResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullUserSimResult.ProtoReflect.Descriptor instead.
func (*GetFullUserSimResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{69}
}

func (x *GetFullUserSimResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *GetFullUserSimResult) GetIsblocked() bool {
	if x != nil {
		return x.Isblocked
	}
	return false
}

func (x *GetFullUserSimResult) GetPhoneCallsPrivate() bool {
	if x != nil {
		return x.PhoneCallsPrivate
	}
	return false
}

func (x *GetFullUserSimResult) GetPhoneCallsAvailable() bool {
	if x != nil {
		return x.PhoneCallsAvailable
	}
	return false
}

func (x *GetFullUserSimResult) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *GetFullUserSimResult) GetCommonChat() int32 {
	if x != nil {
		return x.CommonChat
	}
	return 0
}

func (x *GetFullUserSimResult) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *GetFullUserSimResult) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetFullUserSimResult) GetLocation() *UserLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GetFullUserSimResult) GetErrorcode() ReErrCode {
	if x != nil {
		return x.Errorcode
	}
	return ReErrCode_Success
}

type AuthSignUpPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *SignUpReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	PwdHash string     `protobuf:"bytes,2,opt,name=pwd_hash,json=pwdHash,proto3" json:"pwd_hash,omitempty"`
}

func (x *AuthSignUpPasswordReq) Reset() {
	*x = AuthSignUpPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSignUpPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSignUpPasswordReq) ProtoMessage() {}

func (x *AuthSignUpPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSignUpPasswordReq.ProtoReflect.Descriptor instead.
func (*AuthSignUpPasswordReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{70}
}

func (x *AuthSignUpPasswordReq) GetBase() *SignUpReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *AuthSignUpPasswordReq) GetPwdHash() string {
	if x != nil {
		return x.PwdHash
	}
	return ""
}

type AuthSignUpPasswordResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *UserInfo                     `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Code     AuthSignUpPasswordResult_Code `protobuf:"varint,2,opt,name=code,proto3,enum=infoserver.AuthSignUpPasswordResult_Code" json:"code,omitempty"`
}

func (x *AuthSignUpPasswordResult) Reset() {
	*x = AuthSignUpPasswordResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSignUpPasswordResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSignUpPasswordResult) ProtoMessage() {}

func (x *AuthSignUpPasswordResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSignUpPasswordResult.ProtoReflect.Descriptor instead.
func (*AuthSignUpPasswordResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{71}
}

func (x *AuthSignUpPasswordResult) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *AuthSignUpPasswordResult) GetCode() AuthSignUpPasswordResult_Code {
	if x != nil {
		return x.Code
	}
	return AuthSignUpPasswordResult_Success
}

type AuthSignInPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *SignInReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	PwdHash string     `protobuf:"bytes,2,opt,name=pwd_hash,json=pwdHash,proto3" json:"pwd_hash,omitempty"`
}

func (x *AuthSignInPasswordReq) Reset() {
	*x = AuthSignInPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSignInPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSignInPasswordReq) ProtoMessage() {}

func (x *AuthSignInPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSignInPasswordReq.ProtoReflect.Descriptor instead.
func (*AuthSignInPasswordReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{72}
}

func (x *AuthSignInPasswordReq) GetBase() *SignInReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *AuthSignInPasswordReq) GetPwdHash() string {
	if x != nil {
		return x.PwdHash
	}
	return ""
}

type AuthSignInPasswordResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *UserInfo                     `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Code     AuthSignInPasswordResult_Code `protobuf:"varint,2,opt,name=code,proto3,enum=infoserver.AuthSignInPasswordResult_Code" json:"code,omitempty"`
}

func (x *AuthSignInPasswordResult) Reset() {
	*x = AuthSignInPasswordResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSignInPasswordResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSignInPasswordResult) ProtoMessage() {}

func (x *AuthSignInPasswordResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSignInPasswordResult.ProtoReflect.Descriptor instead.
func (*AuthSignInPasswordResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{73}
}

func (x *AuthSignInPasswordResult) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *AuthSignInPasswordResult) GetCode() AuthSignInPasswordResult_Code {
	if x != nil {
		return x.Code
	}
	return AuthSignInPasswordResult_Success
}

type AccountResetPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber    string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Forget         bool   `protobuf:"varint,2,opt,name=forget,proto3" json:"forget,omitempty"`
	PhoneCode      string `protobuf:"bytes,3,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
	CurrentPwdHash string `protobuf:"bytes,4,opt,name=current_pwd_hash,json=currentPwdHash,proto3" json:"current_pwd_hash,omitempty"`
	NewPwdHash     string `protobuf:"bytes,5,opt,name=new_pwd_hash,json=newPwdHash,proto3" json:"new_pwd_hash,omitempty"`
	KeyId          int64  `protobuf:"varint,6,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	PhoneCodeHash  string `protobuf:"bytes,7,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
}

func (x *AccountResetPasswordReq) Reset() {
	*x = AccountResetPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountResetPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountResetPasswordReq) ProtoMessage() {}

func (x *AccountResetPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountResetPasswordReq.ProtoReflect.Descriptor instead.
func (*AccountResetPasswordReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{74}
}

func (x *AccountResetPasswordReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *AccountResetPasswordReq) GetForget() bool {
	if x != nil {
		return x.Forget
	}
	return false
}

func (x *AccountResetPasswordReq) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

func (x *AccountResetPasswordReq) GetCurrentPwdHash() string {
	if x != nil {
		return x.CurrentPwdHash
	}
	return ""
}

func (x *AccountResetPasswordReq) GetNewPwdHash() string {
	if x != nil {
		return x.NewPwdHash
	}
	return ""
}

func (x *AccountResetPasswordReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *AccountResetPasswordReq) GetPhoneCodeHash() string {
	if x != nil {
		return x.PhoneCodeHash
	}
	return ""
}

type AccountResetPasswordResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code AccountResetPasswordResult_Code `protobuf:"varint,1,opt,name=code,proto3,enum=infoserver.AccountResetPasswordResult_Code" json:"code,omitempty"`
}

func (x *AccountResetPasswordResult) Reset() {
	*x = AccountResetPasswordResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountResetPasswordResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountResetPasswordResult) ProtoMessage() {}

func (x *AccountResetPasswordResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountResetPasswordResult.ProtoReflect.Descriptor instead.
func (*AccountResetPasswordResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{75}
}

func (x *AccountResetPasswordResult) GetCode() AccountResetPasswordResult_Code {
	if x != nil {
		return x.Code
	}
	return AccountResetPasswordResult_Success
}

type CheckDeviceBanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueNumber string `protobuf:"bytes,1,opt,name=unique_number,json=uniqueNumber,proto3" json:"unique_number,omitempty"`
	KeyId        uint64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *CheckDeviceBanReq) Reset() {
	*x = CheckDeviceBanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDeviceBanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDeviceBanReq) ProtoMessage() {}

func (x *CheckDeviceBanReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDeviceBanReq.ProtoReflect.Descriptor instead.
func (*CheckDeviceBanReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{76}
}

func (x *CheckDeviceBanReq) GetUniqueNumber() string {
	if x != nil {
		return x.UniqueNumber
	}
	return ""
}

func (x *CheckDeviceBanReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

type CheckDeviceBanResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Banned bool `protobuf:"varint,1,opt,name=banned,proto3" json:"banned,omitempty"`
}

func (x *CheckDeviceBanResult) Reset() {
	*x = CheckDeviceBanResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDeviceBanResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDeviceBanResult) ProtoMessage() {}

func (x *CheckDeviceBanResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDeviceBanResult.ProtoReflect.Descriptor instead.
func (*CheckDeviceBanResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{77}
}

func (x *CheckDeviceBanResult) GetBanned() bool {
	if x != nil {
		return x.Banned
	}
	return false
}

type HeartbeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatReq) Reset() {
	*x = HeartbeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatReq) ProtoMessage() {}

func (x *HeartbeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatReq.ProtoReflect.Descriptor instead.
func (*HeartbeatReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{78}
}

type HeartbeatResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatResult) Reset() {
	*x = HeartbeatResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResult) ProtoMessage() {}

func (x *HeartbeatResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResult.ProtoReflect.Descriptor instead.
func (*HeartbeatResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{79}
}

type QueryDebugingUserIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryDebugingUserIDReq) Reset() {
	*x = QueryDebugingUserIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDebugingUserIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDebugingUserIDReq) ProtoMessage() {}

func (x *QueryDebugingUserIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDebugingUserIDReq.ProtoReflect.Descriptor instead.
func (*QueryDebugingUserIDReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{80}
}

type QueryDebugingUserIDResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdList []int32 `protobuf:"varint,1,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
}

func (x *QueryDebugingUserIDResult) Reset() {
	*x = QueryDebugingUserIDResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDebugingUserIDResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDebugingUserIDResult) ProtoMessage() {}

func (x *QueryDebugingUserIDResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDebugingUserIDResult.ProtoReflect.Descriptor instead.
func (*QueryDebugingUserIDResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{81}
}

func (x *QueryDebugingUserIDResult) GetUserIdList() []int32 {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

// 根据UserName来获取用户信息或者群信息请求
type GetUserChannelByUserNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId   int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Username string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetUserChannelByUserNameReq) Reset() {
	*x = GetUserChannelByUserNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserChannelByUserNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserChannelByUserNameReq) ProtoMessage() {}

func (x *GetUserChannelByUserNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserChannelByUserNameReq.ProtoReflect.Descriptor instead.
func (*GetUserChannelByUserNameReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{82}
}

func (x *GetUserChannelByUserNameReq) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *GetUserChannelByUserNameReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetUserChannelByUserNameReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 根据UserName来获取用户信息或者群信息返回
type GetUserChannelByUserNameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uinfo       *UserInfo                                `protobuf:"bytes,1,opt,name=Uinfo,proto3" json:"Uinfo,omitempty"`                                                               ///用户的基本信息
	ChannelInfo []byte                                   `protobuf:"bytes,2,opt,name=channelInfo,proto3" json:"channelInfo,omitempty"`                                                   // 超级群信息
	Type        int32                                    `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`                                                                //1代表查找到的是用户 2超找到的超级群信息
	Errcode     GetUserChannelByUserNameResult_ErrorCode `protobuf:"varint,4,opt,name=errcode,proto3,enum=infoserver.GetUserChannelByUserNameResult_ErrorCode" json:"errcode,omitempty"` //错误码
}

func (x *GetUserChannelByUserNameResult) Reset() {
	*x = GetUserChannelByUserNameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserChannelByUserNameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserChannelByUserNameResult) ProtoMessage() {}

func (x *GetUserChannelByUserNameResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserChannelByUserNameResult.ProtoReflect.Descriptor instead.
func (*GetUserChannelByUserNameResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{83}
}

func (x *GetUserChannelByUserNameResult) GetUinfo() *UserInfo {
	if x != nil {
		return x.Uinfo
	}
	return nil
}

func (x *GetUserChannelByUserNameResult) GetChannelInfo() []byte {
	if x != nil {
		return x.ChannelInfo
	}
	return nil
}

func (x *GetUserChannelByUserNameResult) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GetUserChannelByUserNameResult) GetErrcode() GetUserChannelByUserNameResult_ErrorCode {
	if x != nil {
		return x.Errcode
	}
	return GetUserChannelByUserNameResult_Success
}

// 根据电话号码删除当前所有端的authkey
type DeleteAuthKeysReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (x *DeleteAuthKeysReq) Reset() {
	*x = DeleteAuthKeysReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuthKeysReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuthKeysReq) ProtoMessage() {}

func (x *DeleteAuthKeysReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuthKeysReq.ProtoReflect.Descriptor instead.
func (*DeleteAuthKeysReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{84}
}

func (x *DeleteAuthKeysReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type DeleteAuthKeysResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId []int64 `protobuf:"varint,1,rep,packed,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *DeleteAuthKeysResult) Reset() {
	*x = DeleteAuthKeysResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuthKeysResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuthKeysResult) ProtoMessage() {}

func (x *DeleteAuthKeysResult) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuthKeysResult.ProtoReflect.Descriptor instead.
func (*DeleteAuthKeysResult) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{85}
}

func (x *DeleteAuthKeysResult) GetKeyId() []int64 {
	if x != nil {
		return x.KeyId
	}
	return nil
}

// 更改电话号码发送短信的接口
type SendSetPasswordPhoneCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string        `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"` //客户端传过来的电话号码 未处理过的
	UserId      int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`          //用户的ID
	KeyId       int64         `protobuf:"varint,3,opt,name=keyId,proto3" json:"keyId,omitempty"`            //用户的keyId(端的标识)
	Debug       *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	CountryCode string        `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` // 国家码
	LocalPhone  string        `protobuf:"bytes,6,opt,name=local_phone,json=localPhone,proto3" json:"local_phone,omitempty"`    // 不带国家码的号码
}

func (x *SendSetPasswordPhoneCodeReq) Reset() {
	*x = SendSetPasswordPhoneCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infoserver_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSetPasswordPhoneCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSetPasswordPhoneCodeReq) ProtoMessage() {}

func (x *SendSetPasswordPhoneCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_infoserver_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSetPasswordPhoneCodeReq.ProtoReflect.Descriptor instead.
func (*SendSetPasswordPhoneCodeReq) Descriptor() ([]byte, []int) {
	return file_infoserver_proto_rawDescGZIP(), []int{86}
}

func (x *SendSetPasswordPhoneCodeReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SendSetPasswordPhoneCodeReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SendSetPasswordPhoneCodeReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SendSetPasswordPhoneCodeReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SendSetPasswordPhoneCodeReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SendSetPasswordPhoneCodeReq) GetLocalPhone() string {
	if x != nil {
		return x.LocalPhone
	}
	return ""
}

var File_infoserver_proto protoreflect.FileDescriptor

var file_infoserver_proto_rawDesc = []byte{
	0x0a, 0x10, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x30,
	0x69, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x28, 0x69, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x02, 0x0a, 0x0b, 0x73,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x69, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x41, 0x70, 0x69, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x69, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x69, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x9f, 0x04, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x43, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x4e,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x69,
	0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x41, 0x70, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x41, 0x70, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x22, 0xc7, 0x01,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x22, 0x0a, 0x1e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x69, 0x6c,
	0x79, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x57, 0x61,
	0x69, 0x74, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4d, 0x53, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x10, 0x08, 0x22, 0xa0, 0x02, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x61,
	0x73, 0x68, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xc6, 0x02,
	0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x4f, 0x72, 0x52, 0x65, 0x71, 0x69, 0x74, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x4f, 0x72, 0x52, 0x65, 0x71, 0x69, 0x74, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55,
	0x6e, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x6f, 0x64,
	0x57, 0x61, 0x69, 0x74, 0x10, 0x06, 0x22, 0xcc, 0x03, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x62, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f, 0x74,
	0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x63, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x70,
	0x74, 0x63, 0x68, 0x61, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x04, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x57, 0x61, 0x69, 0x74, 0x10, 0x06,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x07, 0x22, 0x8e, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x30, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x46, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x57, 0x61,
	0x69, 0x74, 0x10, 0x05, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x15, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x3f, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x10, 0x02, 0x22, 0xb1, 0x01, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x63, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xeb, 0x01, 0x0a, 0x1d, 0x41, 0x75, 0x74,
	0x68, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x68, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x64, 0x63, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xab, 0x01, 0x0a,
	0x1d, 0x41, 0x75, 0x74, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xfe, 0x01,
	0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x63, 0x0a, 0x0a, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x63,
	0x68, 0x61, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x57, 0x61, 0x69, 0x74, 0x10, 0x04, 0x22, 0x74,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x51,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x51, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0xd8, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x48, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22,
	0x81, 0x01, 0x0a, 0x1e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0xdd, 0x01, 0x0a, 0x21, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x45, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x10, 0x02, 0x22, 0xba, 0x03, 0x0a, 0x1b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x69, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x67, 0x5f, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x67, 0x42, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x54, 0x61,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x66, 0x0a, 0x1c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x70, 0x76, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x18, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xec, 0x01, 0x0a, 0x1b,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x45, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x02, 0x22, 0x86, 0x01, 0x0a, 0x1f, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0xbb, 0x01, 0x0a, 0x22, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x46, 0x0a, 0x0a, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x02, 0x22, 0xea, 0x01, 0x0a, 0x1e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x67, 0x5f, 0x62, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x67, 0x42, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x94,
	0x02, 0x0a, 0x21, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a,
	0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x03, 0x22, 0xc2, 0x01, 0x0a, 0x1f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x97, 0x02, 0x0a, 0x22, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43,
	0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x49, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x03, 0x22, 0xa9, 0x01, 0x0a, 0x1f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x81, 0x02, 0x0a, 0x22, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x41, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x02, 0x22, 0x41, 0x0a, 0x1a, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xe5, 0x01, 0x0a, 0x1d, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22,
	0xb3, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3b, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x3c, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0x39, 0x0a, 0x0f, 0x4c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a,
	0x13, 0x4c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xb1, 0x02, 0x0a, 0x0c, 0x4c, 0x61,
	0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x52,
	0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6f, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x61, 0x6e, 0x67, 0x50,
	0x61, 0x63, 0x6b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x61,
	0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x03, 0x22, 0xd5, 0x02,
	0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62,
	0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x64,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x20, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xdd, 0x01, 0x0a, 0x23, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x01, 0x22, 0x81, 0x01, 0x0a, 0x22, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x25, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0xcb, 0x01, 0x0a, 0x2b, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x6c, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xaf,
	0x02, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x59, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x45, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x04,
	0x22, 0xa1, 0x01, 0x0a, 0x2d, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0x81, 0x02, 0x0a, 0x30, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x6e,
	0x62, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5b, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x02, 0x22, 0x7a, 0x0a, 0x21, 0x43, 0x6d, 0x64, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xfc, 0x01, 0x0a, 0x24, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x10, 0x02, 0x22, 0x88, 0x01, 0x0a, 0x27, 0x43, 0x6d, 0x64, 0x53, 0x79, 0x73, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61,
	0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x79, 0x73, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb1,
	0x01, 0x0a, 0x2a, 0x43, 0x6d, 0x64, 0x53, 0x79, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x53, 0x79, 0x73, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x01, 0x22, 0x38, 0x0a, 0x11, 0x43, 0x6d, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x85, 0x01, 0x0a,
	0x14, 0x43, 0x6d, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6d, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x01, 0x22, 0x3a, 0x0a, 0x13, 0x43, 0x6d, 0x64, 0x55, 0x6e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x22, 0x89, 0x01, 0x0a, 0x16, 0x43, 0x6d, 0x64, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x13, 0x0a, 0x11,
	0x43, 0x6d, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65,
	0x71, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x43, 0x6d, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x6d, 0x64,
	0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x71,
	0x22, 0x89, 0x01, 0x0a, 0x16, 0x43, 0x6d, 0x64, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x74, 0x0a, 0x18,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0xe7, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x76, 0x6f, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x3a, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x22, 0x85, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0xad, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6c, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x54, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x94, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a,
	0x0a, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x34, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5d, 0x0a, 0x15,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x77, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x77, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22, 0x80, 0x02, 0x0a, 0x18,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x72, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68,
	0x61, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65,
	0x64, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x10, 0x05, 0x22, 0x5d,
	0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x77, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x77, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22, 0xef, 0x01,
	0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x61, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x55, 0x6e, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x04, 0x22,
	0xfe, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x77, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x77, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x77, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x77, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x22, 0xff, 0x01, 0x0a, 0x1a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x9f, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x6e, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x4d, 0x75, 0x73, 0x74, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x10, 0x07, 0x22, 0x4f, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x22, 0x11, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x22, 0x3d, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e,
	0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x77, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xfa, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x55,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x26, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0x36, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x2d, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a,
	0x1b, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x2a, 0x28, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x01, 0x32,
	0xce, 0x23, 0x0a, 0x11, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x52, 0x65, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x13, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x12, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x4f,
	0x72, 0x52, 0x65, 0x71, 0x69, 0x74, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x12, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x41, 0x75,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12,
	0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6d, 0x50, 0x6f,
	0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x6e, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76,
	0x6f, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x76, 0x6f, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1b,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x15, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x7d, 0x0a, 0x1c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x2e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x7a, 0x0a, 0x1b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7d, 0x0a,
	0x1c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x61, 0x6c,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x1c,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x4f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x17, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x80, 0x01, 0x0a, 0x1d, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d,
	0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x1f, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x6e, 0x12, 0x2e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0xa1, 0x01, 0x0a,
	0x28, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x3a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0xa7, 0x01, 0x0a, 0x2a, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x39, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x3c, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x6e, 0x62,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x1e, 0x43,
	0x6d, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x95, 0x01, 0x0a, 0x24, 0x43, 0x6d, 0x64, 0x53, 0x79, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x53, 0x79, 0x73, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x36,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x53,
	0x79, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x43, 0x6d, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x10, 0x43, 0x6d, 0x64, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6d, 0x64, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6d, 0x64, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x43, 0x6d, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x10, 0x43, 0x6d, 0x64, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6d, 0x64, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6d, 0x64, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x14, 0x4c, 0x61, 0x6e, 0x67,
	0x70, 0x61, 0x63, 0x6b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x18, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x4c, 0x61, 0x6e, 0x67, 0x70, 0x61,
	0x63, 0x6b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x50,
	0x61, 0x63, 0x6b, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x12, 0x4c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x70, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x15, 0x4c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63,
	0x6b, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x71, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x18, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61,
	0x6e, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x69, 0x67, 0x6e, 0x55, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x23,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x12,
	0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x42, 0x31, 0x5a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infoserver_proto_rawDescOnce sync.Once
	file_infoserver_proto_rawDescData = file_infoserver_proto_rawDesc
)

func file_infoserver_proto_rawDescGZIP() []byte {
	file_infoserver_proto_rawDescOnce.Do(func() {
		file_infoserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_infoserver_proto_rawDescData)
	})
	return file_infoserver_proto_rawDescData
}

var file_infoserver_proto_enumTypes = make([]protoimpl.EnumInfo, 32)
var file_infoserver_proto_msgTypes = make([]protoimpl.MessageInfo, 87)
var file_infoserver_proto_goTypes = []interface{}{
	(CodeType)(0),                                                    // 0: infoserver.CodeType
	(SendCodeResult_ResultCode)(0),                                   // 1: infoserver.SendCodeResult.ResultCode
	(SignInOrReqitsterResult_ResultCode)(0),                          // 2: infoserver.SignInOrReqitsterResult.ResultCode
	(AuthSignUpResult_ResultCode)(0),                                 // 3: infoserver.AuthSignUpResult.ResultCode
	(ChangePhoneResult_ResultCode)(0),                                // 4: infoserver.ChangePhoneResult.ResultCode
	(AuthCheckPasswdResult_ResultCode)(0),                            // 5: infoserver.AuthCheckPasswdResult.ResultCode
	(AuthImportAuthorizationResult_ResultCode)(0),                    // 6: infoserver.AuthImportAuthorizationResult.ResultCode
	(AuthExportAuthorizationResult_ResultCode)(0),                    // 7: infoserver.AuthExportAuthorizationResult.ResultCode
	(AuthRecoverPasswdResult_ResultCode)(0),                          // 8: infoserver.AuthRecoverPasswdResult.ResultCode
	(ContactsSearcResult_ResultCode)(0),                              // 9: infoserver.ContactsSearcResult.ResultCode
	(AuthRequestPasswordRecoveryResult_ResultCode)(0),                // 10: infoserver.AuthRequestPasswordRecoveryResult.ResultCode
	(PhonecallAllocSessionResult_ResultCode)(0),                      // 11: infoserver.PhonecallAllocSessionResult.ResultCode
	(PhonecallOnReceivedCallCheckResult_ResultCode)(0),               // 12: infoserver.PhonecallOnReceivedCallCheckResult.ResultCode
	(PhonecallOnAcceptCallUpdateResult_ResultCode)(0),                // 13: infoserver.PhonecallOnAcceptCallUpdateResult.ResultCode
	(PhonecallOnConfirmCallUpdateResult_ResultCode)(0),               // 14: infoserver.PhonecallOnConfirmCallUpdateResult.ResultCode
	(PhonecallOnDiscardCallUpdateResult_ResultCode)(0),               // 15: infoserver.PhonecallOnDiscardCallUpdateResult.ResultCode
	(PhonecallQueryEndpointsResult_ResultCode)(0),                    // 16: infoserver.PhonecallQueryEndpointsResult.ResultCode
	(LangPacktReq_ReqType)(0),                                        // 17: infoserver.LangPacktReq.ReqType
	(CmdVirtualPhoneNumberGenerateResult_ResultCode)(0),              // 18: infoserver.CmdVirtualPhoneNumberGenerateResult.ResultCode
	(CmdVirtualPhoneNumberBindRealPhoneNumberResult_ResultCode)(0),   // 19: infoserver.CmdVirtualPhoneNumberBindRealPhoneNumberResult.ResultCode
	(CmdVirtualPhoneNumberUnbindRealPhoneNumberResult_ResultCode)(0), // 20: infoserver.CmdVirtualPhoneNumberUnbindRealPhoneNumberResult.ResultCode
	(CmdVirtualPhoneNumberQueryInfoResult_ResultCode)(0),             // 21: infoserver.CmdVirtualPhoneNumberQueryInfoResult.ResultCode
	(CmdSysPhoneNumberBindRealPhoneNumberResult_ResultCode)(0),       // 22: infoserver.CmdSysPhoneNumberBindRealPhoneNumberResult.ResultCode
	(CmdBlockSignInResult_ResultCode)(0),                             // 23: infoserver.CmdBlockSignInResult.ResultCode
	(CmdUnblockSignInResult_ResultCode)(0),                           // 24: infoserver.CmdUnblockSignInResult.ResultCode
	(CmdBlockSignUpResult_ResultCode)(0),                             // 25: infoserver.CmdBlockSignUpResult.ResultCode
	(CmdUnblockSignUpResult_ResultCode)(0),                           // 26: infoserver.CmdUnblockSignUpResult.ResultCode
	(ContactRevoleUserNameResult_ResultCode)(0),                      // 27: infoserver.ContactRevoleUserNameResult.ResultCode
	(AuthSignUpPasswordResult_Code)(0),                               // 28: infoserver.AuthSignUpPasswordResult.Code
	(AuthSignInPasswordResult_Code)(0),                               // 29: infoserver.AuthSignInPasswordResult.Code
	(AccountResetPasswordResult_Code)(0),                             // 30: infoserver.AccountResetPasswordResult.Code
	(GetUserChannelByUserNameResult_ErrorCode)(0),                    // 31: infoserver.GetUserChannelByUserNameResult.ErrorCode
	(*SendCodeReq)(nil),                                              // 32: infoserver.sendCodeReq
	(*SendCodeResult)(nil),                                           // 33: infoserver.SendCodeResult
	(*SendChangePhoneCodeReq)(nil),                                   // 34: infoserver.sendChangePhoneCodeReq
	(*SignInReq)(nil),                                                // 35: infoserver.SignInReq
	(*SignInOrReqitsterResult)(nil),                                  // 36: infoserver.SignInOrReqitsterResult
	(*SignUpReq)(nil),                                                // 37: infoserver.SignUpReq
	(*AuthSignUpResult)(nil),                                         // 38: infoserver.AuthSignUpResult
	(*ChangePhoneReq)(nil),                                           // 39: infoserver.ChangePhoneReq
	(*ChangePhoneResult)(nil),                                        // 40: infoserver.ChangePhoneResult
	(*AuthCheckPasswdReq)(nil),                                       // 41: infoserver.AuthCheckPasswdReq
	(*AuthCheckPasswdResult)(nil),                                    // 42: infoserver.AuthCheckPasswdResult
	(*AuthImportAuthorizationReq)(nil),                               // 43: infoserver.AuthImportAuthorizationReq
	(*AuthImportAuthorizationResult)(nil),                            // 44: infoserver.AuthImportAuthorizationResult
	(*AuthExportAuthorizationReq)(nil),                               // 45: infoserver.AuthExportAuthorizationReq
	(*AuthExportAuthorizationResult)(nil),                            // 46: infoserver.AuthExportAuthorizationResult
	(*AuthRecoverPasswdReq)(nil),                                     // 47: infoserver.AuthRecoverPasswdReq
	(*AuthRecoverPasswdResult)(nil),                                  // 48: infoserver.AuthRecoverPasswdResult
	(*ContactsSearchReq)(nil),                                        // 49: infoserver.ContactsSearchReq
	(*ContactsSearcResult)(nil),                                      // 50: infoserver.ContactsSearcResult
	(*AuthRequestPasswordRecoveryReq)(nil),                           // 51: infoserver.AuthRequestPasswordRecoveryReq
	(*AuthRequestPasswordRecoveryResult)(nil),                        // 52: infoserver.AuthRequestPasswordRecoveryResult
	(*PhonecallSessionInformation)(nil),                              // 53: infoserver.PhonecallSessionInformation
	(*PhonecallEndpointInformation)(nil),                             // 54: infoserver.PhonecallEndpointInformation
	(*PhonecallAllocSessionReq)(nil),                                 // 55: infoserver.PhonecallAllocSessionReq
	(*PhonecallAllocSessionResult)(nil),                              // 56: infoserver.PhonecallAllocSessionResult
	(*PhonecallOnReceivedCallCheckReq)(nil),                          // 57: infoserver.PhonecallOnReceivedCallCheckReq
	(*PhonecallOnReceivedCallCheckResult)(nil),                       // 58: infoserver.PhonecallOnReceivedCallCheckResult
	(*PhonecallOnAcceptCallUpdateReq)(nil),                           // 59: infoserver.PhonecallOnAcceptCallUpdateReq
	(*PhonecallOnAcceptCallUpdateResult)(nil),                        // 60: infoserver.PhonecallOnAcceptCallUpdateResult
	(*PhonecallOnConfirmCallUpdateReq)(nil),                          // 61: infoserver.PhonecallOnConfirmCallUpdateReq
	(*PhonecallOnConfirmCallUpdateResult)(nil),                       // 62: infoserver.PhonecallOnConfirmCallUpdateResult
	(*PhonecallOnDiscardCallUpdateReq)(nil),                          // 63: infoserver.PhonecallOnDiscardCallUpdateReq
	(*PhonecallOnDiscardCallUpdateResult)(nil),                       // 64: infoserver.PhonecallOnDiscardCallUpdateResult
	(*PhonecallQueryEndpointsReq)(nil),                               // 65: infoserver.PhonecallQueryEndpointsReq
	(*PhonecallQueryEndpointsResult)(nil),                            // 66: infoserver.PhonecallQueryEndpointsResult
	(*AuthCancelCodeReq)(nil),                                        // 67: infoserver.AuthCancelCodeReq
	(*AuthCancelCodeResult)(nil),                                     // 68: infoserver.AuthCancelCodeResult
	(*Langpack)(nil),                                                 // 69: infoserver.Langpack
	(*LangpackList)(nil),                                             // 70: infoserver.LangpackList
	(*LangpackStrings)(nil),                                          // 71: infoserver.LangpackStrings
	(*LangpackStringsList)(nil),                                      // 72: infoserver.LangpackStringsList
	(*LangPacktReq)(nil),                                             // 73: infoserver.LangPacktReq
	(*VirtualPhoneNumberInfo)(nil),                                   // 74: infoserver.VirtualPhoneNumberInfo
	(*CmdVirtualPhoneNumberGenerateReq)(nil),                         // 75: infoserver.CmdVirtualPhoneNumberGenerateReq
	(*CmdVirtualPhoneNumberGenerateResult)(nil),                      // 76: infoserver.CmdVirtualPhoneNumberGenerateResult
	(*CmdVirtualPhoneNumberSpecialGenReq)(nil),                       // 77: infoserver.CmdVirtualPhoneNumberSpecialGenReq
	(*CmdVirtualPhoneNumberSpecialGenResult)(nil),                    // 78: infoserver.CmdVirtualPhoneNumberSpecialGenResult
	(*CmdVirtualPhoneNumberBindRealPhoneNumberReq)(nil),              // 79: infoserver.CmdVirtualPhoneNumberBindRealPhoneNumberReq
	(*CmdVirtualPhoneNumberBindRealPhoneNumberResult)(nil),           // 80: infoserver.CmdVirtualPhoneNumberBindRealPhoneNumberResult
	(*CmdVirtualPhoneNumberUnbindRealPhoneNumberReq)(nil),            // 81: infoserver.CmdVirtualPhoneNumberUnbindRealPhoneNumberReq
	(*CmdVirtualPhoneNumberUnbindRealPhoneNumberResult)(nil),         // 82: infoserver.CmdVirtualPhoneNumberUnbindRealPhoneNumberResult
	(*CmdVirtualPhoneNumberQueryInfoReq)(nil),                        // 83: infoserver.CmdVirtualPhoneNumberQueryInfoReq
	(*CmdVirtualPhoneNumberQueryInfoResult)(nil),                     // 84: infoserver.CmdVirtualPhoneNumberQueryInfoResult
	(*CmdSysPhoneNumberBindRealPhoneNumberReq)(nil),                  // 85: infoserver.CmdSysPhoneNumberBindRealPhoneNumberReq
	(*CmdSysPhoneNumberBindRealPhoneNumberResult)(nil),               // 86: infoserver.CmdSysPhoneNumberBindRealPhoneNumberResult
	(*CmdBlockSignInReq)(nil),                                        // 87: infoserver.CmdBlockSignInReq
	(*CmdBlockSignInResult)(nil),                                     // 88: infoserver.CmdBlockSignInResult
	(*CmdUnblockSignInReq)(nil),                                      // 89: infoserver.CmdUnblockSignInReq
	(*CmdUnblockSignInResult)(nil),                                   // 90: infoserver.CmdUnblockSignInResult
	(*CmdBlockSignUpReq)(nil),                                        // 91: infoserver.CmdBlockSignUpReq
	(*CmdBlockSignUpResult)(nil),                                     // 92: infoserver.CmdBlockSignUpResult
	(*CmdUnblockSignUpReq)(nil),                                      // 93: infoserver.CmdUnblockSignUpReq
	(*CmdUnblockSignUpResult)(nil),                                   // 94: infoserver.CmdUnblockSignUpResult
	(*ContactRevoleUserNameReq)(nil),                                 // 95: infoserver.ContactRevoleUserNameReq
	(*ContactRevoleUserNameResult)(nil),                              // 96: infoserver.ContactRevoleUserNameResult
	(*GetFullUserReq)(nil),                                           // 97: infoserver.GetFullUserReq
	(*GetFullUserResult)(nil),                                        // 98: infoserver.GetFullUserResult
	(*GetFullUserSimReq)(nil),                                        // 99: infoserver.GetFullUserSimReq
	(*UserLocation)(nil),                                             // 100: infoserver.UserLocation
	(*GetFullUserSimResult)(nil),                                     // 101: infoserver.GetFullUserSimResult
	(*AuthSignUpPasswordReq)(nil),                                    // 102: infoserver.AuthSignUpPasswordReq
	(*AuthSignUpPasswordResult)(nil),                                 // 103: infoserver.AuthSignUpPasswordResult
	(*AuthSignInPasswordReq)(nil),                                    // 104: infoserver.AuthSignInPasswordReq
	(*AuthSignInPasswordResult)(nil),                                 // 105: infoserver.AuthSignInPasswordResult
	(*AccountResetPasswordReq)(nil),                                  // 106: infoserver.AccountResetPasswordReq
	(*AccountResetPasswordResult)(nil),                               // 107: infoserver.AccountResetPasswordResult
	(*CheckDeviceBanReq)(nil),                                        // 108: infoserver.CheckDeviceBanReq
	(*CheckDeviceBanResult)(nil),                                     // 109: infoserver.CheckDeviceBanResult
	(*HeartbeatReq)(nil),                                             // 110: infoserver.HeartbeatReq
	(*HeartbeatResult)(nil),                                          // 111: infoserver.HeartbeatResult
	(*QueryDebugingUserIDReq)(nil),                                   // 112: infoserver.QueryDebugingUserIDReq
	(*QueryDebugingUserIDResult)(nil),                                // 113: infoserver.QueryDebugingUserIDResult
	(*GetUserChannelByUserNameReq)(nil),                              // 114: infoserver.GetUserChannelByUserNameReq
	(*GetUserChannelByUserNameResult)(nil),                           // 115: infoserver.GetUserChannelByUserNameResult
	(*DeleteAuthKeysReq)(nil),                                        // 116: infoserver.DeleteAuthKeysReq
	(*DeleteAuthKeysResult)(nil),                                     // 117: infoserver.DeleteAuthKeysResult
	(*SendSetPasswordPhoneCodeReq)(nil),                              // 118: infoserver.sendSetPasswordPhoneCodeReq
	(*pbcomm.Debug)(nil),                                             // 119: pbcomm.Debug
	(*UserInfo)(nil),                                                 // 120: infoserver.userInfo
	(*UserInfoArray)(nil),                                            // 121: infoserver.UserInfoArray
	(ReErrCode)(0),                                                   // 122: infoserver.ReErrCode
}
var file_infoserver_proto_depIdxs = []int32{
	119, // 0: infoserver.sendCodeReq.debug:type_name -> pbcomm.Debug
	1,   // 1: infoserver.SendCodeResult.ErrorCode:type_name -> infoserver.SendCodeResult.ResultCode
	0,   // 2: infoserver.SendCodeResult.NextCodeType:type_name -> infoserver.CodeType
	119, // 3: infoserver.sendChangePhoneCodeReq.debug:type_name -> pbcomm.Debug
	119, // 4: infoserver.SignInReq.debug:type_name -> pbcomm.Debug
	120, // 5: infoserver.SignInOrReqitsterResult.userInfo:type_name -> infoserver.userInfo
	2,   // 6: infoserver.SignInOrReqitsterResult.ErrorCode:type_name -> infoserver.SignInOrReqitsterResult.ResultCode
	119, // 7: infoserver.SignUpReq.debug:type_name -> pbcomm.Debug
	3,   // 8: infoserver.AuthSignUpResult.code:type_name -> infoserver.AuthSignUpResult.ResultCode
	120, // 9: infoserver.AuthSignUpResult.userInfo:type_name -> infoserver.userInfo
	119, // 10: infoserver.ChangePhoneReq.debug:type_name -> pbcomm.Debug
	120, // 11: infoserver.ChangePhoneResult.userInfo:type_name -> infoserver.userInfo
	4,   // 12: infoserver.ChangePhoneResult.ErrorCode:type_name -> infoserver.ChangePhoneResult.ResultCode
	119, // 13: infoserver.AuthCheckPasswdReq.debug:type_name -> pbcomm.Debug
	120, // 14: infoserver.AuthCheckPasswdResult.userInfo:type_name -> infoserver.userInfo
	5,   // 15: infoserver.AuthCheckPasswdResult.ErrorCode:type_name -> infoserver.AuthCheckPasswdResult.ResultCode
	119, // 16: infoserver.AuthImportAuthorizationReq.debug:type_name -> pbcomm.Debug
	120, // 17: infoserver.AuthImportAuthorizationResult.userInfo:type_name -> infoserver.userInfo
	6,   // 18: infoserver.AuthImportAuthorizationResult.ErrorCode:type_name -> infoserver.AuthImportAuthorizationResult.ResultCode
	119, // 19: infoserver.AuthExportAuthorizationReq.debug:type_name -> pbcomm.Debug
	7,   // 20: infoserver.AuthExportAuthorizationResult.code:type_name -> infoserver.AuthExportAuthorizationResult.ResultCode
	119, // 21: infoserver.AuthRecoverPasswdReq.debug:type_name -> pbcomm.Debug
	120, // 22: infoserver.AuthRecoverPasswdResult.userInfo:type_name -> infoserver.userInfo
	8,   // 23: infoserver.AuthRecoverPasswdResult.ErrorCode:type_name -> infoserver.AuthRecoverPasswdResult.ResultCode
	119, // 24: infoserver.ContactsSearchReq.debug:type_name -> pbcomm.Debug
	121, // 25: infoserver.ContactsSearcResult.users:type_name -> infoserver.UserInfoArray
	9,   // 26: infoserver.ContactsSearcResult.ErrorCode:type_name -> infoserver.ContactsSearcResult.ResultCode
	119, // 27: infoserver.AuthRequestPasswordRecoveryReq.debug:type_name -> pbcomm.Debug
	10,  // 28: infoserver.AuthRequestPasswordRecoveryResult.code:type_name -> infoserver.AuthRequestPasswordRecoveryResult.ResultCode
	119, // 29: infoserver.PhonecallAllocSessionReq.debug:type_name -> pbcomm.Debug
	11,  // 30: infoserver.PhonecallAllocSessionResult.code:type_name -> infoserver.PhonecallAllocSessionResult.ResultCode
	119, // 31: infoserver.PhonecallOnReceivedCallCheckReq.debug:type_name -> pbcomm.Debug
	12,  // 32: infoserver.PhonecallOnReceivedCallCheckResult.code:type_name -> infoserver.PhonecallOnReceivedCallCheckResult.ResultCode
	119, // 33: infoserver.PhonecallOnAcceptCallUpdateReq.debug:type_name -> pbcomm.Debug
	13,  // 34: infoserver.PhonecallOnAcceptCallUpdateResult.code:type_name -> infoserver.PhonecallOnAcceptCallUpdateResult.ResultCode
	53,  // 35: infoserver.PhonecallOnAcceptCallUpdateResult.information:type_name -> infoserver.PhonecallSessionInformation
	119, // 36: infoserver.PhonecallOnConfirmCallUpdateReq.debug:type_name -> pbcomm.Debug
	14,  // 37: infoserver.PhonecallOnConfirmCallUpdateResult.code:type_name -> infoserver.PhonecallOnConfirmCallUpdateResult.ResultCode
	53,  // 38: infoserver.PhonecallOnConfirmCallUpdateResult.information:type_name -> infoserver.PhonecallSessionInformation
	119, // 39: infoserver.PhonecallOnDiscardCallUpdateReq.debug:type_name -> pbcomm.Debug
	15,  // 40: infoserver.PhonecallOnDiscardCallUpdateResult.code:type_name -> infoserver.PhonecallOnDiscardCallUpdateResult.ResultCode
	53,  // 41: infoserver.PhonecallOnDiscardCallUpdateResult.information:type_name -> infoserver.PhonecallSessionInformation
	119, // 42: infoserver.PhonecallQueryEndpointsReq.debug:type_name -> pbcomm.Debug
	16,  // 43: infoserver.PhonecallQueryEndpointsResult.code:type_name -> infoserver.PhonecallQueryEndpointsResult.ResultCode
	54,  // 44: infoserver.PhonecallQueryEndpointsResult.informations:type_name -> infoserver.PhonecallEndpointInformation
	119, // 45: infoserver.AuthCancelCodeReq.debug:type_name -> pbcomm.Debug
	69,  // 46: infoserver.LangpackList.vector:type_name -> infoserver.Langpack
	71,  // 47: infoserver.LangpackStringsList.vector:type_name -> infoserver.LangpackStrings
	17,  // 48: infoserver.LangPacktReq.type:type_name -> infoserver.LangPacktReq.ReqType
	119, // 49: infoserver.CmdVirtualPhoneNumberGenerateReq.debug:type_name -> pbcomm.Debug
	18,  // 50: infoserver.CmdVirtualPhoneNumberGenerateResult.code:type_name -> infoserver.CmdVirtualPhoneNumberGenerateResult.ResultCode
	74,  // 51: infoserver.CmdVirtualPhoneNumberGenerateResult.infos:type_name -> infoserver.VirtualPhoneNumberInfo
	74,  // 52: infoserver.CmdVirtualPhoneNumberSpecialGenResult.info:type_name -> infoserver.VirtualPhoneNumberInfo
	119, // 53: infoserver.CmdVirtualPhoneNumberBindRealPhoneNumberReq.debug:type_name -> pbcomm.Debug
	19,  // 54: infoserver.CmdVirtualPhoneNumberBindRealPhoneNumberResult.code:type_name -> infoserver.CmdVirtualPhoneNumberBindRealPhoneNumberResult.ResultCode
	119, // 55: infoserver.CmdVirtualPhoneNumberUnbindRealPhoneNumberReq.debug:type_name -> pbcomm.Debug
	20,  // 56: infoserver.CmdVirtualPhoneNumberUnbindRealPhoneNumberResult.code:type_name -> infoserver.CmdVirtualPhoneNumberUnbindRealPhoneNumberResult.ResultCode
	119, // 57: infoserver.CmdVirtualPhoneNumberQueryInfoReq.debug:type_name -> pbcomm.Debug
	21,  // 58: infoserver.CmdVirtualPhoneNumberQueryInfoResult.code:type_name -> infoserver.CmdVirtualPhoneNumberQueryInfoResult.ResultCode
	74,  // 59: infoserver.CmdVirtualPhoneNumberQueryInfoResult.info:type_name -> infoserver.VirtualPhoneNumberInfo
	119, // 60: infoserver.CmdSysPhoneNumberBindRealPhoneNumberReq.debug:type_name -> pbcomm.Debug
	22,  // 61: infoserver.CmdSysPhoneNumberBindRealPhoneNumberResult.code:type_name -> infoserver.CmdSysPhoneNumberBindRealPhoneNumberResult.ResultCode
	23,  // 62: infoserver.CmdBlockSignInResult.code:type_name -> infoserver.CmdBlockSignInResult.ResultCode
	24,  // 63: infoserver.CmdUnblockSignInResult.code:type_name -> infoserver.CmdUnblockSignInResult.ResultCode
	25,  // 64: infoserver.CmdBlockSignUpResult.code:type_name -> infoserver.CmdBlockSignUpResult.ResultCode
	26,  // 65: infoserver.CmdUnblockSignUpResult.code:type_name -> infoserver.CmdUnblockSignUpResult.ResultCode
	119, // 66: infoserver.ContactRevoleUserNameReq.debug:type_name -> pbcomm.Debug
	120, // 67: infoserver.ContactRevoleUserNameResult.uinfo:type_name -> infoserver.userInfo
	27,  // 68: infoserver.ContactRevoleUserNameResult.code:type_name -> infoserver.ContactRevoleUserNameResult.ResultCode
	119, // 69: infoserver.GetFullUserReq.debug:type_name -> pbcomm.Debug
	120, // 70: infoserver.GetFullUserResult.uinfo:type_name -> infoserver.userInfo
	122, // 71: infoserver.GetFullUserResult.Errorcode:type_name -> infoserver.ReErrCode
	119, // 72: infoserver.GetFullUserSimReq.debug:type_name -> pbcomm.Debug
	120, // 73: infoserver.GetFullUserSimResult.uinfo:type_name -> infoserver.userInfo
	100, // 74: infoserver.GetFullUserSimResult.Location:type_name -> infoserver.UserLocation
	122, // 75: infoserver.GetFullUserSimResult.Errorcode:type_name -> infoserver.ReErrCode
	37,  // 76: infoserver.AuthSignUpPasswordReq.base:type_name -> infoserver.SignUpReq
	120, // 77: infoserver.AuthSignUpPasswordResult.user_info:type_name -> infoserver.userInfo
	28,  // 78: infoserver.AuthSignUpPasswordResult.code:type_name -> infoserver.AuthSignUpPasswordResult.Code
	35,  // 79: infoserver.AuthSignInPasswordReq.base:type_name -> infoserver.SignInReq
	120, // 80: infoserver.AuthSignInPasswordResult.user_info:type_name -> infoserver.userInfo
	29,  // 81: infoserver.AuthSignInPasswordResult.code:type_name -> infoserver.AuthSignInPasswordResult.Code
	30,  // 82: infoserver.AccountResetPasswordResult.code:type_name -> infoserver.AccountResetPasswordResult.Code
	119, // 83: infoserver.GetUserChannelByUserNameReq.debug:type_name -> pbcomm.Debug
	120, // 84: infoserver.GetUserChannelByUserNameResult.Uinfo:type_name -> infoserver.userInfo
	31,  // 85: infoserver.GetUserChannelByUserNameResult.errcode:type_name -> infoserver.GetUserChannelByUserNameResult.ErrorCode
	119, // 86: infoserver.sendSetPasswordPhoneCodeReq.debug:type_name -> pbcomm.Debug
	32,  // 87: infoserver.InfoServerService.SendCode:input_type -> infoserver.sendCodeReq
	32,  // 88: infoserver.InfoServerService.ReSendCode:input_type -> infoserver.sendCodeReq
	34,  // 89: infoserver.InfoServerService.SendChangePhoneCode:input_type -> infoserver.sendChangePhoneCodeReq
	35,  // 90: infoserver.InfoServerService.AuthSignIn:input_type -> infoserver.SignInReq
	37,  // 91: infoserver.InfoServerService.AuthSignUp:input_type -> infoserver.SignUpReq
	39,  // 92: infoserver.InfoServerService.AccountChangePhone:input_type -> infoserver.ChangePhoneReq
	41,  // 93: infoserver.InfoServerService.AuthCheckPassWord:input_type -> infoserver.AuthCheckPasswdReq
	43,  // 94: infoserver.InfoServerService.AuthImPortAuthorizion:input_type -> infoserver.AuthImportAuthorizationReq
	45,  // 95: infoserver.InfoServerService.AuthExportAuthorization:input_type -> infoserver.AuthExportAuthorizationReq
	47,  // 96: infoserver.InfoServerService.AuthRecoverPassword:input_type -> infoserver.AuthRecoverPasswdReq
	49,  // 97: infoserver.InfoServerService.ContactsSearch:input_type -> infoserver.ContactsSearchReq
	97,  // 98: infoserver.InfoServerService.GetFullUser:input_type -> infoserver.GetFullUserReq
	95,  // 99: infoserver.InfoServerService.ContactRevoleUserName:input_type -> infoserver.ContactRevoleUserNameReq
	51,  // 100: infoserver.InfoServerService.AuthRequestPasswordRecovery:input_type -> infoserver.AuthRequestPasswordRecoveryReq
	55,  // 101: infoserver.InfoServerService.PhonecallAllocSession:input_type -> infoserver.PhonecallAllocSessionReq
	57,  // 102: infoserver.InfoServerService.PhonecallOnReceivedCallCheck:input_type -> infoserver.PhonecallOnReceivedCallCheckReq
	59,  // 103: infoserver.InfoServerService.PhonecallOnAcceptCallUpdate:input_type -> infoserver.PhonecallOnAcceptCallUpdateReq
	61,  // 104: infoserver.InfoServerService.PhonecallOnConfirmCallUpdate:input_type -> infoserver.PhonecallOnConfirmCallUpdateReq
	63,  // 105: infoserver.InfoServerService.PhonecallOnDiscardCallUpdate:input_type -> infoserver.PhonecallOnDiscardCallUpdateReq
	65,  // 106: infoserver.InfoServerService.PhonecallQueryEndpoints:input_type -> infoserver.PhonecallQueryEndpointsReq
	67,  // 107: infoserver.InfoServerService.AuthCancelCode:input_type -> infoserver.AuthCancelCodeReq
	75,  // 108: infoserver.InfoServerService.CmdVirtualPhoneNumberGenerate:input_type -> infoserver.CmdVirtualPhoneNumberGenerateReq
	77,  // 109: infoserver.InfoServerService.CmdVirtualPhoneNumberSpecialGen:input_type -> infoserver.CmdVirtualPhoneNumberSpecialGenReq
	79,  // 110: infoserver.InfoServerService.CmdVirtualPhoneNumberBindRealPhoneNumber:input_type -> infoserver.CmdVirtualPhoneNumberBindRealPhoneNumberReq
	81,  // 111: infoserver.InfoServerService.CmdVirtualPhoneNumberUnbindRealPhoneNumber:input_type -> infoserver.CmdVirtualPhoneNumberUnbindRealPhoneNumberReq
	83,  // 112: infoserver.InfoServerService.CmdVirtualPhoneNumberQueryInfo:input_type -> infoserver.CmdVirtualPhoneNumberQueryInfoReq
	85,  // 113: infoserver.InfoServerService.CmdSysPhoneNumberBindRealPhoneNumber:input_type -> infoserver.CmdSysPhoneNumberBindRealPhoneNumberReq
	87,  // 114: infoserver.InfoServerService.CmdBlockSignIn:input_type -> infoserver.CmdBlockSignInReq
	89,  // 115: infoserver.InfoServerService.CmdUnblockSignIn:input_type -> infoserver.CmdUnblockSignInReq
	91,  // 116: infoserver.InfoServerService.CmdBlockSignUp:input_type -> infoserver.CmdBlockSignUpReq
	93,  // 117: infoserver.InfoServerService.CmdUnblockSignUp:input_type -> infoserver.CmdUnblockSignUpReq
	73,  // 118: infoserver.InfoServerService.LangpackGetLanguages:input_type -> infoserver.LangPacktReq
	73,  // 119: infoserver.InfoServerService.LangpackGetLangPack:input_type -> infoserver.LangPacktReq
	73,  // 120: infoserver.InfoServerService.LangpackGetStrings:input_type -> infoserver.LangPacktReq
	73,  // 121: infoserver.InfoServerService.LangpackGetDifference:input_type -> infoserver.LangPacktReq
	114, // 122: infoserver.InfoServerService.GetUserChannelByUserName:input_type -> infoserver.GetUserChannelByUserNameReq
	116, // 123: infoserver.InfoServerService.DeleteAuthKeys:input_type -> infoserver.DeleteAuthKeysReq
	112, // 124: infoserver.InfoServerService.QueryDebugingUserID:input_type -> infoserver.QueryDebugingUserIDReq
	110, // 125: infoserver.InfoServerService.Heartbeat:input_type -> infoserver.HeartbeatReq
	108, // 126: infoserver.InfoServerService.CheckDeviceBan:input_type -> infoserver.CheckDeviceBanReq
	102, // 127: infoserver.InfoServerService.AuthSignUpPassword:input_type -> infoserver.AuthSignUpPasswordReq
	104, // 128: infoserver.InfoServerService.AuthSignInPassword:input_type -> infoserver.AuthSignInPasswordReq
	106, // 129: infoserver.InfoServerService.AccountResetPassword:input_type -> infoserver.AccountResetPasswordReq
	99,  // 130: infoserver.InfoServerService.GetFullUserSim:input_type -> infoserver.GetFullUserSimReq
	118, // 131: infoserver.InfoServerService.SendSetPasswordCode:input_type -> infoserver.sendSetPasswordPhoneCodeReq
	33,  // 132: infoserver.InfoServerService.SendCode:output_type -> infoserver.SendCodeResult
	33,  // 133: infoserver.InfoServerService.ReSendCode:output_type -> infoserver.SendCodeResult
	33,  // 134: infoserver.InfoServerService.SendChangePhoneCode:output_type -> infoserver.SendCodeResult
	36,  // 135: infoserver.InfoServerService.AuthSignIn:output_type -> infoserver.SignInOrReqitsterResult
	38,  // 136: infoserver.InfoServerService.AuthSignUp:output_type -> infoserver.AuthSignUpResult
	40,  // 137: infoserver.InfoServerService.AccountChangePhone:output_type -> infoserver.ChangePhoneResult
	42,  // 138: infoserver.InfoServerService.AuthCheckPassWord:output_type -> infoserver.AuthCheckPasswdResult
	44,  // 139: infoserver.InfoServerService.AuthImPortAuthorizion:output_type -> infoserver.AuthImportAuthorizationResult
	46,  // 140: infoserver.InfoServerService.AuthExportAuthorization:output_type -> infoserver.AuthExportAuthorizationResult
	48,  // 141: infoserver.InfoServerService.AuthRecoverPassword:output_type -> infoserver.AuthRecoverPasswdResult
	50,  // 142: infoserver.InfoServerService.ContactsSearch:output_type -> infoserver.ContactsSearcResult
	98,  // 143: infoserver.InfoServerService.GetFullUser:output_type -> infoserver.GetFullUserResult
	96,  // 144: infoserver.InfoServerService.ContactRevoleUserName:output_type -> infoserver.ContactRevoleUserNameResult
	52,  // 145: infoserver.InfoServerService.AuthRequestPasswordRecovery:output_type -> infoserver.AuthRequestPasswordRecoveryResult
	56,  // 146: infoserver.InfoServerService.PhonecallAllocSession:output_type -> infoserver.PhonecallAllocSessionResult
	58,  // 147: infoserver.InfoServerService.PhonecallOnReceivedCallCheck:output_type -> infoserver.PhonecallOnReceivedCallCheckResult
	60,  // 148: infoserver.InfoServerService.PhonecallOnAcceptCallUpdate:output_type -> infoserver.PhonecallOnAcceptCallUpdateResult
	62,  // 149: infoserver.InfoServerService.PhonecallOnConfirmCallUpdate:output_type -> infoserver.PhonecallOnConfirmCallUpdateResult
	64,  // 150: infoserver.InfoServerService.PhonecallOnDiscardCallUpdate:output_type -> infoserver.PhonecallOnDiscardCallUpdateResult
	66,  // 151: infoserver.InfoServerService.PhonecallQueryEndpoints:output_type -> infoserver.PhonecallQueryEndpointsResult
	68,  // 152: infoserver.InfoServerService.AuthCancelCode:output_type -> infoserver.AuthCancelCodeResult
	76,  // 153: infoserver.InfoServerService.CmdVirtualPhoneNumberGenerate:output_type -> infoserver.CmdVirtualPhoneNumberGenerateResult
	78,  // 154: infoserver.InfoServerService.CmdVirtualPhoneNumberSpecialGen:output_type -> infoserver.CmdVirtualPhoneNumberSpecialGenResult
	80,  // 155: infoserver.InfoServerService.CmdVirtualPhoneNumberBindRealPhoneNumber:output_type -> infoserver.CmdVirtualPhoneNumberBindRealPhoneNumberResult
	82,  // 156: infoserver.InfoServerService.CmdVirtualPhoneNumberUnbindRealPhoneNumber:output_type -> infoserver.CmdVirtualPhoneNumberUnbindRealPhoneNumberResult
	84,  // 157: infoserver.InfoServerService.CmdVirtualPhoneNumberQueryInfo:output_type -> infoserver.CmdVirtualPhoneNumberQueryInfoResult
	86,  // 158: infoserver.InfoServerService.CmdSysPhoneNumberBindRealPhoneNumber:output_type -> infoserver.CmdSysPhoneNumberBindRealPhoneNumberResult
	88,  // 159: infoserver.InfoServerService.CmdBlockSignIn:output_type -> infoserver.CmdBlockSignInResult
	90,  // 160: infoserver.InfoServerService.CmdUnblockSignIn:output_type -> infoserver.CmdUnblockSignInResult
	92,  // 161: infoserver.InfoServerService.CmdBlockSignUp:output_type -> infoserver.CmdBlockSignUpResult
	94,  // 162: infoserver.InfoServerService.CmdUnblockSignUp:output_type -> infoserver.CmdUnblockSignUpResult
	70,  // 163: infoserver.InfoServerService.LangpackGetLanguages:output_type -> infoserver.LangpackList
	69,  // 164: infoserver.InfoServerService.LangpackGetLangPack:output_type -> infoserver.Langpack
	72,  // 165: infoserver.InfoServerService.LangpackGetStrings:output_type -> infoserver.LangpackStringsList
	69,  // 166: infoserver.InfoServerService.LangpackGetDifference:output_type -> infoserver.Langpack
	115, // 167: infoserver.InfoServerService.GetUserChannelByUserName:output_type -> infoserver.GetUserChannelByUserNameResult
	117, // 168: infoserver.InfoServerService.DeleteAuthKeys:output_type -> infoserver.DeleteAuthKeysResult
	113, // 169: infoserver.InfoServerService.QueryDebugingUserID:output_type -> infoserver.QueryDebugingUserIDResult
	111, // 170: infoserver.InfoServerService.Heartbeat:output_type -> infoserver.HeartbeatResult
	109, // 171: infoserver.InfoServerService.CheckDeviceBan:output_type -> infoserver.CheckDeviceBanResult
	103, // 172: infoserver.InfoServerService.AuthSignUpPassword:output_type -> infoserver.AuthSignUpPasswordResult
	105, // 173: infoserver.InfoServerService.AuthSignInPassword:output_type -> infoserver.AuthSignInPasswordResult
	107, // 174: infoserver.InfoServerService.AccountResetPassword:output_type -> infoserver.AccountResetPasswordResult
	101, // 175: infoserver.InfoServerService.GetFullUserSim:output_type -> infoserver.GetFullUserSimResult
	33,  // 176: infoserver.InfoServerService.SendSetPasswordCode:output_type -> infoserver.SendCodeResult
	132, // [132:177] is the sub-list for method output_type
	87,  // [87:132] is the sub-list for method input_type
	87,  // [87:87] is the sub-list for extension type_name
	87,  // [87:87] is the sub-list for extension extendee
	0,   // [0:87] is the sub-list for field type_name
}

func init() { file_infoserver_proto_init() }
func file_infoserver_proto_init() {
	if File_infoserver_proto != nil {
		return
	}
	file_iminterfaceprotobufs_infoserver_userserver_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_infoserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChangePhoneCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInOrReqitsterResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSignUpResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePhoneResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthCheckPasswdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthCheckPasswdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthImportAuthorizationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthImportAuthorizationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthExportAuthorizationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthExportAuthorizationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRecoverPasswdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRecoverPasswdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsSearchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactsSearcResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRequestPasswordRecoveryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRequestPasswordRecoveryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonecallSessionInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonecallEndpointInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonecallAllocSessionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonecallAllocSessionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonecallOnReceivedCallCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonecallOnReceivedCallCheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonecallOnAcceptCallUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonecallOnAcceptCallUpdateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonecallOnConfirmCallUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonecallOnConfirmCallUpdateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonecallOnDiscardCallUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonecallOnDiscardCallUpdateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonecallQueryEndpointsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonecallQueryEndpointsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthCancelCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthCancelCodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Langpack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LangpackList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LangpackStrings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LangpackStringsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LangPacktReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualPhoneNumberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdVirtualPhoneNumberGenerateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdVirtualPhoneNumberGenerateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdVirtualPhoneNumberSpecialGenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdVirtualPhoneNumberSpecialGenResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdVirtualPhoneNumberBindRealPhoneNumberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdVirtualPhoneNumberBindRealPhoneNumberResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdVirtualPhoneNumberUnbindRealPhoneNumberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdVirtualPhoneNumberUnbindRealPhoneNumberResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdVirtualPhoneNumberQueryInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdVirtualPhoneNumberQueryInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdSysPhoneNumberBindRealPhoneNumberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdSysPhoneNumberBindRealPhoneNumberResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdBlockSignInReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdBlockSignInResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdUnblockSignInReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdUnblockSignInResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdBlockSignUpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdBlockSignUpResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdUnblockSignUpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdUnblockSignUpResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactRevoleUserNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactRevoleUserNameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullUserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullUserSimReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullUserSimResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSignUpPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSignUpPasswordResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSignInPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSignInPasswordResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountResetPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountResetPasswordResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDeviceBanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDeviceBanResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDebugingUserIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDebugingUserIDResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserChannelByUserNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserChannelByUserNameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAuthKeysReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAuthKeysResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infoserver_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSetPasswordPhoneCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infoserver_proto_rawDesc,
			NumEnums:      32,
			NumMessages:   87,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infoserver_proto_goTypes,
		DependencyIndexes: file_infoserver_proto_depIdxs,
		EnumInfos:         file_infoserver_proto_enumTypes,
		MessageInfos:      file_infoserver_proto_msgTypes,
	}.Build()
	File_infoserver_proto = out.File
	file_infoserver_proto_rawDesc = nil
	file_infoserver_proto_goTypes = nil
	file_infoserver_proto_depIdxs = nil
}
