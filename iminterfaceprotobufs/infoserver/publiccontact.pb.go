// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/publiccontact.proto

package infoserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReqUpdateMoments struct {
	UserId []int32 `protobuf:"varint,1,rep,packed,name=userId" json:"userId,omitempty"`
	SelfId int32   `protobuf:"varint,2,opt,name=selfId,proto3" json:"selfId,omitempty"`
}

func (m *ReqUpdateMoments) Reset()                    { *m = ReqUpdateMoments{} }
func (m *ReqUpdateMoments) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateMoments) ProtoMessage()               {}
func (*ReqUpdateMoments) Descriptor() ([]byte, []int) { return fileDescriptorPubliccontact, []int{0} }

func (m *ReqUpdateMoments) GetUserId() []int32 {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *ReqUpdateMoments) GetSelfId() int32 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

type ResUpdateMoments struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ResUpdateMoments) Reset()                    { *m = ResUpdateMoments{} }
func (m *ResUpdateMoments) String() string            { return proto.CompactTextString(m) }
func (*ResUpdateMoments) ProtoMessage()               {}
func (*ResUpdateMoments) Descriptor() ([]byte, []int) { return fileDescriptorPubliccontact, []int{1} }

func (m *ResUpdateMoments) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ResUpdateMoments) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*ReqUpdateMoments)(nil), "infoserver.ReqUpdateMoments")
	proto.RegisterType((*ResUpdateMoments)(nil), "infoserver.ResUpdateMoments")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ContactPushService service

type ContactPushServiceClient interface {
	// 更新自己朋友的未读状态
	UpdateMoments(ctx context.Context, in *ReqUpdateMoments, opts ...grpc.CallOption) (*ResUpdateMoments, error)
}

type contactPushServiceClient struct {
	cc *grpc.ClientConn
}

func NewContactPushServiceClient(cc *grpc.ClientConn) ContactPushServiceClient {
	return &contactPushServiceClient{cc}
}

func (c *contactPushServiceClient) UpdateMoments(ctx context.Context, in *ReqUpdateMoments, opts ...grpc.CallOption) (*ResUpdateMoments, error) {
	out := new(ResUpdateMoments)
	err := grpc.Invoke(ctx, "/infoserver.ContactPushService/UpdateMoments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContactPushService service

type ContactPushServiceServer interface {
	// 更新自己朋友的未读状态
	UpdateMoments(context.Context, *ReqUpdateMoments) (*ResUpdateMoments, error)
}

func RegisterContactPushServiceServer(s *grpc.Server, srv ContactPushServiceServer) {
	s.RegisterService(&_ContactPushService_serviceDesc, srv)
}

func _ContactPushService_UpdateMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateMoments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactPushServiceServer).UpdateMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ContactPushService/UpdateMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactPushServiceServer).UpdateMoments(ctx, req.(*ReqUpdateMoments))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContactPushService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infoserver.ContactPushService",
	HandlerType: (*ContactPushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMoments",
			Handler:    _ContactPushService_UpdateMoments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/publiccontact.proto",
}

func (m *ReqUpdateMoments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateMoments) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA2 := make([]byte, len(m.UserId)*10)
		var j1 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubliccontact(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.SelfId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubliccontact(dAtA, i, uint64(m.SelfId))
	}
	return i, nil
}

func (m *ResUpdateMoments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResUpdateMoments) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubliccontact(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubliccontact(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func encodeVarintPubliccontact(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqUpdateMoments) Size() (n int) {
	var l int
	_ = l
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovPubliccontact(uint64(e))
		}
		n += 1 + sovPubliccontact(uint64(l)) + l
	}
	if m.SelfId != 0 {
		n += 1 + sovPubliccontact(uint64(m.SelfId))
	}
	return n
}

func (m *ResUpdateMoments) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPubliccontact(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPubliccontact(uint64(l))
	}
	return n
}

func sovPubliccontact(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPubliccontact(x uint64) (n int) {
	return sovPubliccontact(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqUpdateMoments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubliccontact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateMoments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateMoments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPubliccontact
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPubliccontact
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPubliccontact
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPubliccontact
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubliccontact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubliccontact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubliccontact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResUpdateMoments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubliccontact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResUpdateMoments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResUpdateMoments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubliccontact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubliccontact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubliccontact
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubliccontact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubliccontact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPubliccontact(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPubliccontact
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubliccontact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubliccontact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPubliccontact
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPubliccontact
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPubliccontact(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPubliccontact = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPubliccontact   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/publiccontact.proto", fileDescriptorPubliccontact)
}

var fileDescriptorPubliccontact = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x8d, 0xd3, 0x81, 0x41, 0x61, 0xe4, 0x20, 0x45, 0xa4, 0x8c, 0x9e, 0x3c, 0xa5, 0xa0,
	0x17, 0xcf, 0xf3, 0xb4, 0xc3, 0x40, 0x3a, 0xfc, 0x00, 0x69, 0xfa, 0x76, 0x0b, 0xb4, 0x4d, 0xcc,
	0xfb, 0x76, 0x9f, 0xd1, 0xa3, 0x1f, 0x41, 0xfa, 0x49, 0x24, 0xe9, 0x60, 0xb4, 0xb7, 0xf7, 0xf9,
	0x93, 0x87, 0x1f, 0xe1, 0xfb, 0x83, 0xa1, 0x46, 0x95, 0x52, 0x1f, 0x15, 0x21, 0xf8, 0x13, 0x78,
	0x69, 0xda, 0xdc, 0x74, 0x04, 0xbe, 0x56, 0x1a, 0x9c, 0xb7, 0x65, 0x5f, 0xe7, 0xce, 0x92, 0x22,
	0xeb, 0xbc, 0xa5, 0x20, 0x31, 0x37, 0x5d, 0x6d, 0xc7, 0x76, 0xee, 0xfa, 0xb2, 0x31, 0x5a, 0xdb,
	0x8e, 0x94, 0x26, 0x19, 0x2b, 0x82, 0x5f, 0xf2, 0x6c, 0xc3, 0x57, 0x05, 0x7c, 0x7f, 0xb9, 0x4a,
	0x11, 0xec, 0x6c, 0x0b, 0x1d, 0xa1, 0x78, 0xe4, 0xcb, 0x1e, 0xc1, 0x6f, 0xab, 0x84, 0xad, 0x17,
	0x2f, 0xb7, 0xc5, 0x59, 0x05, 0x1f, 0xa1, 0xa9, 0xb7, 0x55, 0x72, 0xbd, 0x66, 0xc1, 0x1f, 0x55,
	0xf6, 0x1e, 0x36, 0x70, 0xba, 0x21, 0xf8, 0x8d, 0xb6, 0x15, 0x24, 0x2c, 0x36, 0xe3, 0x2d, 0x56,
	0x7c, 0xd1, 0xe2, 0x21, 0x3e, 0xbe, 0x2b, 0xc2, 0xf9, 0xaa, 0xb9, 0xf8, 0x18, 0xd1, 0x3e, 0x7b,
	0x3c, 0xee, 0xc1, 0x9f, 0x8c, 0x06, 0xb1, 0xe3, 0x0f, 0xd3, 0xb1, 0x67, 0x79, 0x21, 0x96, 0x73,
	0xdc, 0xa7, 0x59, 0x3a, 0x05, 0xc9, 0xae, 0x36, 0xf7, 0x3f, 0x43, 0xca, 0x7e, 0x87, 0x94, 0xfd,
	0x0d, 0x29, 0x2b, 0x97, 0xf1, 0x0f, 0xde, 0xfe, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xbb, 0xca,
	0x2a, 0x5a, 0x01, 0x00, 0x00,
}
