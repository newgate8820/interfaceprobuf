// Code generated by protoc-gen-gogo.
// source: chatserver/chatservice.proto
// DO NOT EDIT!

/*
Package chatserver is a generated protocol buffer package.

It is generated from these files:

	chatserver/chatservice.proto

It has these top-level messages:

	HelloMessage
	HelloRespond
	CreateRquest
	ChatInfo
	ChatId
	ChatParticipants
	BoolResult
	ChatLittleInfo
	ChatUsersId
	ChatTitleReq
	ChatPhotoReq
	ChatMigrateReq
	ChatdeactiveReq
	ChatadminEnableReq
	ChatExportLink
	ChatMemberBase
	ChatMemberInfo
	ChatIdsReq
	ChatInfos
	CommonChatReq
	CommonChatsId
	ChatVersion
	ChatPartCount
	ChatUserReq
*/
package chatserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import chatcommon "gitlab.chatserver.im/interfaceprobuf/iminterfaceprotobufs/infoserver/chatcommon"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ################# 测试数据结构 #############################
type HelloMessage struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *HelloMessage) Reset()                    { *m = HelloMessage{} }
func (m *HelloMessage) String() string            { return proto.CompactTextString(m) }
func (*HelloMessage) ProtoMessage()               {}
func (*HelloMessage) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{0} }

func (m *HelloMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloRespond struct {
	Respond string `protobuf:"bytes,1,opt,name=respond,proto3" json:"respond,omitempty"`
}

func (m *HelloRespond) Reset()                    { *m = HelloRespond{} }
func (m *HelloRespond) String() string            { return proto.CompactTextString(m) }
func (*HelloRespond) ProtoMessage()               {}
func (*HelloRespond) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{1} }

func (m *HelloRespond) GetRespond() string {
	if m != nil {
		return m.Respond
	}
	return ""
}

// ---------------------------------------------------------------------------------
// 创建群的请求数据
type CreateRquest struct {
	Title    string                    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Creator  int32                     `protobuf:"varint,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Date     int32                     `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	ChatId   int32                     `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MemberId []int32                   `protobuf:"varint,5,rep,packed,name=member_id,json=memberId" json:"member_id,omitempty"`
	Dlog     *chatcommon.ChatLogPrefix `protobuf:"bytes,6,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *CreateRquest) Reset()                    { *m = CreateRquest{} }
func (m *CreateRquest) String() string            { return proto.CompactTextString(m) }
func (*CreateRquest) ProtoMessage()               {}
func (*CreateRquest) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{2} }

func (m *CreateRquest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateRquest) GetCreator() int32 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *CreateRquest) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *CreateRquest) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *CreateRquest) GetMemberId() []int32 {
	if m != nil {
		return m.MemberId
	}
	return nil
}

func (m *CreateRquest) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 响应
type ChatInfo struct {
	ChatId            int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminsEnabled     bool                      `protobuf:"varint,2,opt,name=admins_enabled,json=adminsEnabled,proto3" json:"admins_enabled,omitempty"`
	Deactivated       bool                      `protobuf:"varint,3,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
	ExportedInvite    string                    `protobuf:"bytes,4,opt,name=exported_invite,json=exportedInvite,proto3" json:"exported_invite,omitempty"`
	Encry             bool                      `protobuf:"varint,5,opt,name=encry,proto3" json:"encry,omitempty"`
	Creator           int32                     `protobuf:"varint,6,opt,name=creator,proto3" json:"creator,omitempty"`
	Title             string                    `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Photo             string                    `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`
	Version           int32                     `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	ParticipantsCount int32                     `protobuf:"varint,10,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
	Date              int32                     `protobuf:"varint,11,opt,name=date,proto3" json:"date,omitempty"`
	MigrateTo         string                    `protobuf:"bytes,12,opt,name=migrate_to,json=migrateTo,proto3" json:"migrate_to,omitempty"`
	Resultcode        chatcommon.ChatResultCode `protobuf:"varint,13,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChatInfo) Reset()                    { *m = ChatInfo{} }
func (m *ChatInfo) String() string            { return proto.CompactTextString(m) }
func (*ChatInfo) ProtoMessage()               {}
func (*ChatInfo) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{3} }

func (m *ChatInfo) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatInfo) GetAdminsEnabled() bool {
	if m != nil {
		return m.AdminsEnabled
	}
	return false
}

func (m *ChatInfo) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

func (m *ChatInfo) GetExportedInvite() string {
	if m != nil {
		return m.ExportedInvite
	}
	return ""
}

func (m *ChatInfo) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *ChatInfo) GetCreator() int32 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *ChatInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChatInfo) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *ChatInfo) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ChatInfo) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *ChatInfo) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ChatInfo) GetMigrateTo() string {
	if m != nil {
		return m.MigrateTo
	}
	return ""
}

func (m *ChatInfo) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

// ---------------------------------------------------------------------------------
// 获取群的信息请求
type ChatId struct {
	ChatId int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog   *chatcommon.ChatLogPrefix `protobuf:"bytes,2,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *ChatId) Reset()                    { *m = ChatId{} }
func (m *ChatId) String() string            { return proto.CompactTextString(m) }
func (*ChatId) ProtoMessage()               {}
func (*ChatId) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{4} }

func (m *ChatId) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatId) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 群成员列表结构
type ChatParticipants struct {
	Member     []*ChatMemberInfo         `protobuf:"bytes,1,rep,name=member" json:"member,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChatParticipants) Reset()                    { *m = ChatParticipants{} }
func (m *ChatParticipants) String() string            { return proto.CompactTextString(m) }
func (*ChatParticipants) ProtoMessage()               {}
func (*ChatParticipants) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{5} }

func (m *ChatParticipants) GetMember() []*ChatMemberInfo {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *ChatParticipants) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

type BoolResult struct {
	B          bool                      `protobuf:"varint,1,opt,name=b,proto3" json:"b,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *BoolResult) Reset()                    { *m = BoolResult{} }
func (m *BoolResult) String() string            { return proto.CompactTextString(m) }
func (*BoolResult) ProtoMessage()               {}
func (*BoolResult) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{6} }

func (m *BoolResult) GetB() bool {
	if m != nil {
		return m.B
	}
	return false
}

func (m *BoolResult) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

type ChatLittleInfo struct {
	ChatId         int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ExportedInvite string                    `protobuf:"bytes,2,opt,name=exported_invite,json=exportedInvite,proto3" json:"exported_invite,omitempty"`
	Title          string                    `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Resultcode     chatcommon.ChatResultCode `protobuf:"varint,4,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChatLittleInfo) Reset()                    { *m = ChatLittleInfo{} }
func (m *ChatLittleInfo) String() string            { return proto.CompactTextString(m) }
func (*ChatLittleInfo) ProtoMessage()               {}
func (*ChatLittleInfo) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{7} }

func (m *ChatLittleInfo) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatLittleInfo) GetExportedInvite() string {
	if m != nil {
		return m.ExportedInvite
	}
	return ""
}

func (m *ChatLittleInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChatLittleInfo) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

type ChatUsersId struct {
	ChatId     int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId     []int32                   `protobuf:"varint,2,rep,packed,name=user_id,json=userId" json:"user_id,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChatUsersId) Reset()                    { *m = ChatUsersId{} }
func (m *ChatUsersId) String() string            { return proto.CompactTextString(m) }
func (*ChatUsersId) ProtoMessage()               {}
func (*ChatUsersId) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{8} }

func (m *ChatUsersId) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatUsersId) GetUserId() []int32 {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *ChatUsersId) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

// ---------------------------------------------------------------------------------
// 更新群名称
type ChatTitleReq struct {
	ChatId int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Title  string                    `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Dlog   *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *ChatTitleReq) Reset()                    { *m = ChatTitleReq{} }
func (m *ChatTitleReq) String() string            { return proto.CompactTextString(m) }
func (*ChatTitleReq) ProtoMessage()               {}
func (*ChatTitleReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{9} }

func (m *ChatTitleReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatTitleReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChatTitleReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// ---------------------------------------------------------------------------------
// 更新群photo
type ChatPhotoReq struct {
	ChatId int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Photo  string                    `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
	Dlog   *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *ChatPhotoReq) Reset()                    { *m = ChatPhotoReq{} }
func (m *ChatPhotoReq) String() string            { return proto.CompactTextString(m) }
func (*ChatPhotoReq) ProtoMessage()               {}
func (*ChatPhotoReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{10} }

func (m *ChatPhotoReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatPhotoReq) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *ChatPhotoReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type ChatMigrateReq struct {
	ChatId    int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MigrateTo string                    `protobuf:"bytes,2,opt,name=migrate_to,json=migrateTo,proto3" json:"migrate_to,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *ChatMigrateReq) Reset()                    { *m = ChatMigrateReq{} }
func (m *ChatMigrateReq) String() string            { return proto.CompactTextString(m) }
func (*ChatMigrateReq) ProtoMessage()               {}
func (*ChatMigrateReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{11} }

func (m *ChatMigrateReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatMigrateReq) GetMigrateTo() string {
	if m != nil {
		return m.MigrateTo
	}
	return ""
}

func (m *ChatMigrateReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// ---------------------------------------------------------------------------------
type ChatdeactiveReq struct {
	ChatId      int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Deactivated bool                      `protobuf:"varint,2,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
	Dlog        *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *ChatdeactiveReq) Reset()                    { *m = ChatdeactiveReq{} }
func (m *ChatdeactiveReq) String() string            { return proto.CompactTextString(m) }
func (*ChatdeactiveReq) ProtoMessage()               {}
func (*ChatdeactiveReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{12} }

func (m *ChatdeactiveReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatdeactiveReq) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

func (m *ChatdeactiveReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type ChatadminEnableReq struct {
	ChatId        int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminsEnabled bool                      `protobuf:"varint,2,opt,name=admins_enabled,json=adminsEnabled,proto3" json:"admins_enabled,omitempty"`
	Dlog          *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *ChatadminEnableReq) Reset()                    { *m = ChatadminEnableReq{} }
func (m *ChatadminEnableReq) String() string            { return proto.CompactTextString(m) }
func (*ChatadminEnableReq) ProtoMessage()               {}
func (*ChatadminEnableReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{13} }

func (m *ChatadminEnableReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatadminEnableReq) GetAdminsEnabled() bool {
	if m != nil {
		return m.AdminsEnabled
	}
	return false
}

func (m *ChatadminEnableReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// ---------------------------------------------------------------------------------
// 更新邀请链接
type ChatExportLink struct {
	ChatId int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Link   string                    `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Dlog   *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *ChatExportLink) Reset()                    { *m = ChatExportLink{} }
func (m *ChatExportLink) String() string            { return proto.CompactTextString(m) }
func (*ChatExportLink) ProtoMessage()               {}
func (*ChatExportLink) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{14} }

func (m *ChatExportLink) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatExportLink) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *ChatExportLink) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// ---------------------------------------------------------------------------------
// ##########群成员的请求结构###################
type ChatMemberBase struct {
	Invitor  int32                     `protobuf:"varint,1,opt,name=invitor,proto3" json:"invitor,omitempty"`
	MemberId int32                     `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	Date     int32                     `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	ChatId   int32                     `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog     *chatcommon.ChatLogPrefix `protobuf:"bytes,5,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *ChatMemberBase) Reset()                    { *m = ChatMemberBase{} }
func (m *ChatMemberBase) String() string            { return proto.CompactTextString(m) }
func (*ChatMemberBase) ProtoMessage()               {}
func (*ChatMemberBase) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{15} }

func (m *ChatMemberBase) GetInvitor() int32 {
	if m != nil {
		return m.Invitor
	}
	return 0
}

func (m *ChatMemberBase) GetMemberId() int32 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *ChatMemberBase) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ChatMemberBase) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatMemberBase) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

// 普通群成员信息
type ChatMemberInfo struct {
	UserId     int32                     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Invitor    int32                     `protobuf:"varint,2,opt,name=invitor,proto3" json:"invitor,omitempty"`
	AdminLevel int32                     `protobuf:"varint,3,opt,name=admin_level,json=adminLevel,proto3" json:"admin_level,omitempty"`
	JoinTime   int32                     `protobuf:"varint,4,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	Leave      int32                     `protobuf:"varint,5,opt,name=leave,proto3" json:"leave,omitempty"`
	ChatId     int32                     `protobuf:"varint,6,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,7,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChatMemberInfo) Reset()                    { *m = ChatMemberInfo{} }
func (m *ChatMemberInfo) String() string            { return proto.CompactTextString(m) }
func (*ChatMemberInfo) ProtoMessage()               {}
func (*ChatMemberInfo) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{16} }

func (m *ChatMemberInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatMemberInfo) GetInvitor() int32 {
	if m != nil {
		return m.Invitor
	}
	return 0
}

func (m *ChatMemberInfo) GetAdminLevel() int32 {
	if m != nil {
		return m.AdminLevel
	}
	return 0
}

func (m *ChatMemberInfo) GetJoinTime() int32 {
	if m != nil {
		return m.JoinTime
	}
	return 0
}

func (m *ChatMemberInfo) GetLeave() int32 {
	if m != nil {
		return m.Leave
	}
	return 0
}

func (m *ChatMemberInfo) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatMemberInfo) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

// ---------------------------------------------------------------------------------
type ChatIdsReq struct {
	ChatId []int32                   `protobuf:"varint,1,rep,packed,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	UserId int32                     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Except bool                      `protobuf:"varint,3,opt,name=except,proto3" json:"except,omitempty"`
	Dlog   *chatcommon.ChatLogPrefix `protobuf:"bytes,4,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *ChatIdsReq) Reset()                    { *m = ChatIdsReq{} }
func (m *ChatIdsReq) String() string            { return proto.CompactTextString(m) }
func (*ChatIdsReq) ProtoMessage()               {}
func (*ChatIdsReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{17} }

func (m *ChatIdsReq) GetChatId() []int32 {
	if m != nil {
		return m.ChatId
	}
	return nil
}

func (m *ChatIdsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatIdsReq) GetExcept() bool {
	if m != nil {
		return m.Except
	}
	return false
}

func (m *ChatIdsReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type ChatInfos struct {
	ChatInfos  []*ChatInfo               `protobuf:"bytes,1,rep,name=chat_infos,json=chatInfos" json:"chat_infos,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *ChatInfos) Reset()                    { *m = ChatInfos{} }
func (m *ChatInfos) String() string            { return proto.CompactTextString(m) }
func (*ChatInfos) ProtoMessage()               {}
func (*ChatInfos) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{18} }

func (m *ChatInfos) GetChatInfos() []*ChatInfo {
	if m != nil {
		return m.ChatInfos
	}
	return nil
}

func (m *ChatInfos) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

// ---------------------------------------------------------------------------------
type CommonChatReq struct {
	UserIdSelf int32                     `protobuf:"varint,1,opt,name=user_id_self,json=userIdSelf,proto3" json:"user_id_self,omitempty"`
	UserId     int32                     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MaxId      int32                     `protobuf:"varint,3,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Limit      int32                     `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Dlog       *chatcommon.ChatLogPrefix `protobuf:"bytes,5,opt,name=dlog" json:"dlog,omitempty"`
}

func (m *CommonChatReq) Reset()                    { *m = CommonChatReq{} }
func (m *CommonChatReq) String() string            { return proto.CompactTextString(m) }
func (*CommonChatReq) ProtoMessage()               {}
func (*CommonChatReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{19} }

func (m *CommonChatReq) GetUserIdSelf() int32 {
	if m != nil {
		return m.UserIdSelf
	}
	return 0
}

func (m *CommonChatReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CommonChatReq) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *CommonChatReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *CommonChatReq) GetDlog() *chatcommon.ChatLogPrefix {
	if m != nil {
		return m.Dlog
	}
	return nil
}

type CommonChatsId struct {
	ChatId     []int32                   `protobuf:"varint,1,rep,packed,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`
}

func (m *CommonChatsId) Reset()                    { *m = CommonChatsId{} }
func (m *CommonChatsId) String() string            { return proto.CompactTextString(m) }
func (*CommonChatsId) ProtoMessage()               {}
func (*CommonChatsId) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{20} }

func (m *CommonChatsId) GetChatId() []int32 {
	if m != nil {
		return m.ChatId
	}
	return nil
}

func (m *CommonChatsId) GetResultcode() chatcommon.ChatResultCode {
	if m != nil {
		return m.Resultcode
	}
	return chatcommon.ChatResultCode_Chat_RPC_OK
}

// ---------------------------------------------------------------------------------
type ChatVersion struct {
	ChatId  int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Version int32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *ChatVersion) Reset()                    { *m = ChatVersion{} }
func (m *ChatVersion) String() string            { return proto.CompactTextString(m) }
func (*ChatVersion) ProtoMessage()               {}
func (*ChatVersion) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{21} }

func (m *ChatVersion) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatVersion) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type ChatPartCount struct {
	ChatId            int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ParticipantsCount int32 `protobuf:"varint,2,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
}

func (m *ChatPartCount) Reset()                    { *m = ChatPartCount{} }
func (m *ChatPartCount) String() string            { return proto.CompactTextString(m) }
func (*ChatPartCount) ProtoMessage()               {}
func (*ChatPartCount) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{22} }

func (m *ChatPartCount) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatPartCount) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

type ChatUserReq struct {
	ChatId int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *ChatUserReq) Reset()                    { *m = ChatUserReq{} }
func (m *ChatUserReq) String() string            { return proto.CompactTextString(m) }
func (*ChatUserReq) ProtoMessage()               {}
func (*ChatUserReq) Descriptor() ([]byte, []int) { return fileDescriptorChatservice, []int{23} }

func (m *ChatUserReq) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func init() {
	proto.RegisterType((*HelloMessage)(nil), "chatserver.HelloMessage")
	proto.RegisterType((*HelloRespond)(nil), "chatserver.HelloRespond")
	proto.RegisterType((*CreateRquest)(nil), "chatserver.createRquest")
	proto.RegisterType((*ChatInfo)(nil), "chatserver.chatInfo")
	proto.RegisterType((*ChatId)(nil), "chatserver.chatId")
	proto.RegisterType((*ChatParticipants)(nil), "chatserver.chatParticipants")
	proto.RegisterType((*BoolResult)(nil), "chatserver.boolResult")
	proto.RegisterType((*ChatLittleInfo)(nil), "chatserver.chatLittleInfo")
	proto.RegisterType((*ChatUsersId)(nil), "chatserver.chatUsersId")
	proto.RegisterType((*ChatTitleReq)(nil), "chatserver.chatTitleReq")
	proto.RegisterType((*ChatPhotoReq)(nil), "chatserver.chatPhotoReq")
	proto.RegisterType((*ChatMigrateReq)(nil), "chatserver.chatMigrateReq")
	proto.RegisterType((*ChatdeactiveReq)(nil), "chatserver.chatdeactiveReq")
	proto.RegisterType((*ChatadminEnableReq)(nil), "chatserver.chatadminEnableReq")
	proto.RegisterType((*ChatExportLink)(nil), "chatserver.chatExportLink")
	proto.RegisterType((*ChatMemberBase)(nil), "chatserver.chatMemberBase")
	proto.RegisterType((*ChatMemberInfo)(nil), "chatserver.chatMemberInfo")
	proto.RegisterType((*ChatIdsReq)(nil), "chatserver.chatIdsReq")
	proto.RegisterType((*ChatInfos)(nil), "chatserver.chatInfos")
	proto.RegisterType((*CommonChatReq)(nil), "chatserver.commonChatReq")
	proto.RegisterType((*CommonChatsId)(nil), "chatserver.commonChatsId")
	proto.RegisterType((*ChatVersion)(nil), "chatserver.chatVersion")
	proto.RegisterType((*ChatPartCount)(nil), "chatserver.chatPartCount")
	proto.RegisterType((*ChatUserReq)(nil), "chatserver.chatUserReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GroupServerService service

type GroupServerServiceClient interface {
	// ***********************业务接口 **************************
	// 群创建的接口
	CreateChat(ctx context.Context, in *CreateRquest, opts ...grpc.CallOption) (*ChatInfo, error)
	// 根据chat_id获取群的基本信息
	GetChatInfo(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*ChatInfo, error)
	// 更新群名称
	UpdateChatTitle(ctx context.Context, in *ChatTitleReq, opts ...grpc.CallOption) (*ChatInfo, error)
	// 更新群名称头像
	UpdateChatPhoto(ctx context.Context, in *ChatPhotoReq, opts ...grpc.CallOption) (*ChatInfo, error)
	// 更新群migrate_to
	UpdateChatMigrate(ctx context.Context, in *ChatMigrateReq, opts ...grpc.CallOption) (*ChatInfo, error)
	// 更新deactive
	// rpc UpdateChatDeactice (chatdeactiveReq) returns (chatInfo) {
	// }
	// 更新admins_enabled
	UpdateChatAdminsEn(ctx context.Context, in *ChatadminEnableReq, opts ...grpc.CallOption) (*ChatInfo, error)
	// 更新invite link
	UpdateChatLink(ctx context.Context, in *ChatExportLink, opts ...grpc.CallOption) (*ChatInfo, error)
	// 更新invite link
	// rpc UpdateChatVersion (chatVersion) returns (chatInfo) {
	// }
	// 更新participants_count
	// rpc UpdateChatParticipantsCount (chatPartCount) returns (chatInfo) {
	// }
	// 删除群信息
	DelChatInfo(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*BoolResult, error)
	// ############### 有关普通群成员的操作#####################
	AddChatUser(ctx context.Context, in *ChatMemberBase, opts ...grpc.CallOption) (*BoolResult, error)
	// 删除群成员
	DelChatUser(ctx context.Context, in *ChatMemberBase, opts ...grpc.CallOption) (*BoolResult, error)
	// 设置管理员
	SetChatUserAdmin(ctx context.Context, in *ChatMemberBase, opts ...grpc.CallOption) (*BoolResult, error)
	// 取消管理员
	DelChatUserAdmin(ctx context.Context, in *ChatMemberBase, opts ...grpc.CallOption) (*BoolResult, error)
	// 机器人获取基本信息
	GetChatLittleInfo(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*ChatLittleInfo, error)
	// 获取群成员列表
	GetChatParticipants(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*ChatParticipants, error)
	// 获取指定成员的信息
	GetChatUserInfo(ctx context.Context, in *ChatMemberBase, opts ...grpc.CallOption) (*ChatMemberInfo, error)
	// 获取群成员用户id
	GetChatUsersId(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*ChatUsersId, error)
	GetChatInfos(ctx context.Context, in *ChatIdsReq, opts ...grpc.CallOption) (*ChatInfos, error)
	GetParticipants(ctx context.Context, in *ChatIdsReq, opts ...grpc.CallOption) (*ChatParticipants, error)
	GetCommonChats(ctx context.Context, in *CommonChatReq, opts ...grpc.CallOption) (*CommonChatsId, error)
}

type groupServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewGroupServerServiceClient(cc *grpc.ClientConn) GroupServerServiceClient {
	return &groupServerServiceClient{cc}
}

func (c *groupServerServiceClient) CreateChat(ctx context.Context, in *CreateRquest, opts ...grpc.CallOption) (*ChatInfo, error) {
	out := new(ChatInfo)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/CreateChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) GetChatInfo(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*ChatInfo, error) {
	out := new(ChatInfo)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/GetChatInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) UpdateChatTitle(ctx context.Context, in *ChatTitleReq, opts ...grpc.CallOption) (*ChatInfo, error) {
	out := new(ChatInfo)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/UpdateChatTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) UpdateChatPhoto(ctx context.Context, in *ChatPhotoReq, opts ...grpc.CallOption) (*ChatInfo, error) {
	out := new(ChatInfo)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/UpdateChatPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) UpdateChatMigrate(ctx context.Context, in *ChatMigrateReq, opts ...grpc.CallOption) (*ChatInfo, error) {
	out := new(ChatInfo)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/UpdateChatMigrate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) UpdateChatAdminsEn(ctx context.Context, in *ChatadminEnableReq, opts ...grpc.CallOption) (*ChatInfo, error) {
	out := new(ChatInfo)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/UpdateChatAdminsEn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) UpdateChatLink(ctx context.Context, in *ChatExportLink, opts ...grpc.CallOption) (*ChatInfo, error) {
	out := new(ChatInfo)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/UpdateChatLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) DelChatInfo(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/DelChatInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) AddChatUser(ctx context.Context, in *ChatMemberBase, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/AddChatUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) DelChatUser(ctx context.Context, in *ChatMemberBase, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/DelChatUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) SetChatUserAdmin(ctx context.Context, in *ChatMemberBase, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/SetChatUserAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) DelChatUserAdmin(ctx context.Context, in *ChatMemberBase, opts ...grpc.CallOption) (*BoolResult, error) {
	out := new(BoolResult)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/DelChatUserAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) GetChatLittleInfo(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*ChatLittleInfo, error) {
	out := new(ChatLittleInfo)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/GetChatLittleInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) GetChatParticipants(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*ChatParticipants, error) {
	out := new(ChatParticipants)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/GetChatParticipants", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) GetChatUserInfo(ctx context.Context, in *ChatMemberBase, opts ...grpc.CallOption) (*ChatMemberInfo, error) {
	out := new(ChatMemberInfo)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/GetChatUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) GetChatUsersId(ctx context.Context, in *ChatId, opts ...grpc.CallOption) (*ChatUsersId, error) {
	out := new(ChatUsersId)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/GetChatUsersId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) GetChatInfos(ctx context.Context, in *ChatIdsReq, opts ...grpc.CallOption) (*ChatInfos, error) {
	out := new(ChatInfos)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/GetChatInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) GetParticipants(ctx context.Context, in *ChatIdsReq, opts ...grpc.CallOption) (*ChatParticipants, error) {
	out := new(ChatParticipants)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/GetParticipants", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServerServiceClient) GetCommonChats(ctx context.Context, in *CommonChatReq, opts ...grpc.CallOption) (*CommonChatsId, error) {
	out := new(CommonChatsId)
	err := grpc.Invoke(ctx, "/chatserver.GroupServerService/GetCommonChats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupServerService service

type GroupServerServiceServer interface {
	// ***********************业务接口 **************************
	// 群创建的接口
	CreateChat(context.Context, *CreateRquest) (*ChatInfo, error)
	// 根据chat_id获取群的基本信息
	GetChatInfo(context.Context, *ChatId) (*ChatInfo, error)
	// 更新群名称
	UpdateChatTitle(context.Context, *ChatTitleReq) (*ChatInfo, error)
	// 更新群名称头像
	UpdateChatPhoto(context.Context, *ChatPhotoReq) (*ChatInfo, error)
	// 更新群migrate_to
	UpdateChatMigrate(context.Context, *ChatMigrateReq) (*ChatInfo, error)
	// 更新deactive
	// rpc UpdateChatDeactice (chatdeactiveReq) returns (chatInfo) {
	// }
	// 更新admins_enabled
	UpdateChatAdminsEn(context.Context, *ChatadminEnableReq) (*ChatInfo, error)
	// 更新invite link
	UpdateChatLink(context.Context, *ChatExportLink) (*ChatInfo, error)
	// 更新invite link
	// rpc UpdateChatVersion (chatVersion) returns (chatInfo) {
	// }
	// 更新participants_count
	// rpc UpdateChatParticipantsCount (chatPartCount) returns (chatInfo) {
	// }
	// 删除群信息
	DelChatInfo(context.Context, *ChatId) (*BoolResult, error)
	// ############### 有关普通群成员的操作#####################
	AddChatUser(context.Context, *ChatMemberBase) (*BoolResult, error)
	// 删除群成员
	DelChatUser(context.Context, *ChatMemberBase) (*BoolResult, error)
	// 设置管理员
	SetChatUserAdmin(context.Context, *ChatMemberBase) (*BoolResult, error)
	// 取消管理员
	DelChatUserAdmin(context.Context, *ChatMemberBase) (*BoolResult, error)
	// 机器人获取基本信息
	GetChatLittleInfo(context.Context, *ChatId) (*ChatLittleInfo, error)
	// 获取群成员列表
	GetChatParticipants(context.Context, *ChatId) (*ChatParticipants, error)
	// 获取指定成员的信息
	GetChatUserInfo(context.Context, *ChatMemberBase) (*ChatMemberInfo, error)
	// 获取群成员用户id
	GetChatUsersId(context.Context, *ChatId) (*ChatUsersId, error)
	GetChatInfos(context.Context, *ChatIdsReq) (*ChatInfos, error)
	GetParticipants(context.Context, *ChatIdsReq) (*ChatParticipants, error)
	GetCommonChats(context.Context, *CommonChatReq) (*CommonChatsId, error)
}

func RegisterGroupServerServiceServer(s *grpc.Server, srv GroupServerServiceServer) {
	s.RegisterService(&_GroupServerService_serviceDesc, srv)
}

func _GroupServerService_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).CreateChat(ctx, req.(*CreateRquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_GetChatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).GetChatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/GetChatInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).GetChatInfo(ctx, req.(*ChatId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_UpdateChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatTitleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).UpdateChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/UpdateChatTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).UpdateChatTitle(ctx, req.(*ChatTitleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_UpdateChatPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatPhotoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).UpdateChatPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/UpdateChatPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).UpdateChatPhoto(ctx, req.(*ChatPhotoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_UpdateChatMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMigrateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).UpdateChatMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/UpdateChatMigrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).UpdateChatMigrate(ctx, req.(*ChatMigrateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_UpdateChatAdminsEn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatadminEnableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).UpdateChatAdminsEn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/UpdateChatAdminsEn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).UpdateChatAdminsEn(ctx, req.(*ChatadminEnableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_UpdateChatLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatExportLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).UpdateChatLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/UpdateChatLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).UpdateChatLink(ctx, req.(*ChatExportLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_DelChatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).DelChatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/DelChatInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).DelChatInfo(ctx, req.(*ChatId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_AddChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMemberBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).AddChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/AddChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).AddChatUser(ctx, req.(*ChatMemberBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_DelChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMemberBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).DelChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/DelChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).DelChatUser(ctx, req.(*ChatMemberBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_SetChatUserAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMemberBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).SetChatUserAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/SetChatUserAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).SetChatUserAdmin(ctx, req.(*ChatMemberBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_DelChatUserAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMemberBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).DelChatUserAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/DelChatUserAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).DelChatUserAdmin(ctx, req.(*ChatMemberBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_GetChatLittleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).GetChatLittleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/GetChatLittleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).GetChatLittleInfo(ctx, req.(*ChatId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_GetChatParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).GetChatParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/GetChatParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).GetChatParticipants(ctx, req.(*ChatId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_GetChatUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMemberBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).GetChatUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/GetChatUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).GetChatUserInfo(ctx, req.(*ChatMemberBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_GetChatUsersId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).GetChatUsersId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/GetChatUsersId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).GetChatUsersId(ctx, req.(*ChatId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_GetChatInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).GetChatInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/GetChatInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).GetChatInfos(ctx, req.(*ChatIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_GetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).GetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/GetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).GetParticipants(ctx, req.(*ChatIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServerService_GetCommonChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServerServiceServer).GetCommonChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatserver.GroupServerService/GetCommonChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServerServiceServer).GetCommonChats(ctx, req.(*CommonChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatserver.GroupServerService",
	HandlerType: (*GroupServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _GroupServerService_CreateChat_Handler,
		},
		{
			MethodName: "GetChatInfo",
			Handler:    _GroupServerService_GetChatInfo_Handler,
		},
		{
			MethodName: "UpdateChatTitle",
			Handler:    _GroupServerService_UpdateChatTitle_Handler,
		},
		{
			MethodName: "UpdateChatPhoto",
			Handler:    _GroupServerService_UpdateChatPhoto_Handler,
		},
		{
			MethodName: "UpdateChatMigrate",
			Handler:    _GroupServerService_UpdateChatMigrate_Handler,
		},
		{
			MethodName: "UpdateChatAdminsEn",
			Handler:    _GroupServerService_UpdateChatAdminsEn_Handler,
		},
		{
			MethodName: "UpdateChatLink",
			Handler:    _GroupServerService_UpdateChatLink_Handler,
		},
		{
			MethodName: "DelChatInfo",
			Handler:    _GroupServerService_DelChatInfo_Handler,
		},
		{
			MethodName: "AddChatUser",
			Handler:    _GroupServerService_AddChatUser_Handler,
		},
		{
			MethodName: "DelChatUser",
			Handler:    _GroupServerService_DelChatUser_Handler,
		},
		{
			MethodName: "SetChatUserAdmin",
			Handler:    _GroupServerService_SetChatUserAdmin_Handler,
		},
		{
			MethodName: "DelChatUserAdmin",
			Handler:    _GroupServerService_DelChatUserAdmin_Handler,
		},
		{
			MethodName: "GetChatLittleInfo",
			Handler:    _GroupServerService_GetChatLittleInfo_Handler,
		},
		{
			MethodName: "GetChatParticipants",
			Handler:    _GroupServerService_GetChatParticipants_Handler,
		},
		{
			MethodName: "GetChatUserInfo",
			Handler:    _GroupServerService_GetChatUserInfo_Handler,
		},
		{
			MethodName: "GetChatUsersId",
			Handler:    _GroupServerService_GetChatUsersId_Handler,
		},
		{
			MethodName: "GetChatInfos",
			Handler:    _GroupServerService_GetChatInfos_Handler,
		},
		{
			MethodName: "GetParticipants",
			Handler:    _GroupServerService_GetParticipants_Handler,
		},
		{
			MethodName: "GetCommonChats",
			Handler:    _GroupServerService_GetCommonChats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatserver/chatservice.proto",
}

func (m *HelloMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *HelloRespond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloRespond) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Respond) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Respond)))
		i += copy(dAtA[i:], m.Respond)
	}
	return i, nil
}

func (m *CreateRquest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRquest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Creator != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Creator))
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Date))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if len(m.MemberId) > 0 {
		dAtA2 := make([]byte, len(m.MemberId)*10)
		var j1 int
		for _, num1 := range m.MemberId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.Dlog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n3, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ChatInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.AdminsEnabled {
		dAtA[i] = 0x10
		i++
		if m.AdminsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Deactivated {
		dAtA[i] = 0x18
		i++
		if m.Deactivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ExportedInvite) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.ExportedInvite)))
		i += copy(dAtA[i:], m.ExportedInvite)
	}
	if m.Encry {
		dAtA[i] = 0x28
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Creator != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Creator))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Version != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Version))
	}
	if m.ParticipantsCount != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ParticipantsCount))
	}
	if m.Date != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Date))
	}
	if len(m.MigrateTo) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.MigrateTo)))
		i += copy(dAtA[i:], m.MigrateTo)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ChatId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n4, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ChatParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatParticipants) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Member) > 0 {
		for _, msg := range m.Member {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChatservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *BoolResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoolResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.B {
		dAtA[i] = 0x8
		i++
		if m.B {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ChatLittleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatLittleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if len(m.ExportedInvite) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.ExportedInvite)))
		i += copy(dAtA[i:], m.ExportedInvite)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ChatUsersId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatUsersId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if len(m.UserId) > 0 {
		dAtA6 := make([]byte, len(m.UserId)*10)
		var j5 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ChatTitleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatTitleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n7, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *ChatPhotoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatPhotoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n8, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ChatMigrateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMigrateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if len(m.MigrateTo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.MigrateTo)))
		i += copy(dAtA[i:], m.MigrateTo)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n9, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *ChatdeactiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatdeactiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Deactivated {
		dAtA[i] = 0x10
		i++
		if m.Deactivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n10, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *ChatadminEnableReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatadminEnableReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.AdminsEnabled {
		dAtA[i] = 0x10
		i++
		if m.AdminsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n11, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *ChatExportLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatExportLink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Dlog != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n12, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *ChatMemberBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMemberBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Invitor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Invitor))
	}
	if m.MemberId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.MemberId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Date))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n13, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *ChatMemberInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMemberInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.Invitor != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Invitor))
	}
	if m.AdminLevel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.AdminLevel))
	}
	if m.JoinTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.JoinTime))
	}
	if m.Leave != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Leave))
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ChatIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChatId) > 0 {
		dAtA15 := make([]byte, len(m.ChatId)*10)
		var j14 int
		for _, num1 := range m.ChatId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.Except {
		dAtA[i] = 0x18
		i++
		if m.Except {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dlog != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n16, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *ChatInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatInfos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChatInfos) > 0 {
		for _, msg := range m.ChatInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChatservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *CommonChatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonChatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserIdSelf != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserIdSelf))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.MaxId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Limit))
	}
	if m.Dlog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Dlog.Size()))
		n17, err := m.Dlog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *CommonChatsId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonChatsId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChatId) > 0 {
		dAtA19 := make([]byte, len(m.ChatId)*10)
		var j18 int
		for _, num1 := range m.ChatId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(j18))
		i += copy(dAtA[i:], dAtA19[:j18])
	}
	if m.Resultcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Resultcode))
	}
	return i, nil
}

func (m *ChatVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatVersion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *ChatPartCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatPartCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.ParticipantsCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ParticipantsCount))
	}
	return i, nil
}

func (m *ChatUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.ChatId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatservice(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func encodeFixed64Chatservice(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Chatservice(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintChatservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HelloMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *HelloRespond) Size() (n int) {
	var l int
	_ = l
	l = len(m.Respond)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *CreateRquest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Creator != 0 {
		n += 1 + sovChatservice(uint64(m.Creator))
	}
	if m.Date != 0 {
		n += 1 + sovChatservice(uint64(m.Date))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if len(m.MemberId) > 0 {
		l = 0
		for _, e := range m.MemberId {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *ChatInfo) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.AdminsEnabled {
		n += 2
	}
	if m.Deactivated {
		n += 2
	}
	l = len(m.ExportedInvite)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Encry {
		n += 2
	}
	if m.Creator != 0 {
		n += 1 + sovChatservice(uint64(m.Creator))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovChatservice(uint64(m.Version))
	}
	if m.ParticipantsCount != 0 {
		n += 1 + sovChatservice(uint64(m.ParticipantsCount))
	}
	if m.Date != 0 {
		n += 1 + sovChatservice(uint64(m.Date))
	}
	l = len(m.MigrateTo)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ChatId) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *ChatParticipants) Size() (n int) {
	var l int
	_ = l
	if len(m.Member) > 0 {
		for _, e := range m.Member {
			l = e.Size()
			n += 1 + l + sovChatservice(uint64(l))
		}
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *BoolResult) Size() (n int) {
	var l int
	_ = l
	if m.B {
		n += 2
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ChatLittleInfo) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	l = len(m.ExportedInvite)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ChatUsersId) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ChatTitleReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *ChatPhotoReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *ChatMigrateReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	l = len(m.MigrateTo)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *ChatdeactiveReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Deactivated {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *ChatadminEnableReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.AdminsEnabled {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *ChatExportLink) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovChatservice(uint64(l))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *ChatMemberBase) Size() (n int) {
	var l int
	_ = l
	if m.Invitor != 0 {
		n += 1 + sovChatservice(uint64(m.Invitor))
	}
	if m.MemberId != 0 {
		n += 1 + sovChatservice(uint64(m.MemberId))
	}
	if m.Date != 0 {
		n += 1 + sovChatservice(uint64(m.Date))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *ChatMemberInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.Invitor != 0 {
		n += 1 + sovChatservice(uint64(m.Invitor))
	}
	if m.AdminLevel != 0 {
		n += 1 + sovChatservice(uint64(m.AdminLevel))
	}
	if m.JoinTime != 0 {
		n += 1 + sovChatservice(uint64(m.JoinTime))
	}
	if m.Leave != 0 {
		n += 1 + sovChatservice(uint64(m.Leave))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ChatIdsReq) Size() (n int) {
	var l int
	_ = l
	if len(m.ChatId) > 0 {
		l = 0
		for _, e := range m.ChatId {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.Except {
		n += 2
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *ChatInfos) Size() (n int) {
	var l int
	_ = l
	if len(m.ChatInfos) > 0 {
		for _, e := range m.ChatInfos {
			l = e.Size()
			n += 1 + l + sovChatservice(uint64(l))
		}
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *CommonChatReq) Size() (n int) {
	var l int
	_ = l
	if m.UserIdSelf != 0 {
		n += 1 + sovChatservice(uint64(m.UserIdSelf))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	if m.MaxId != 0 {
		n += 1 + sovChatservice(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovChatservice(uint64(m.Limit))
	}
	if m.Dlog != nil {
		l = m.Dlog.Size()
		n += 1 + l + sovChatservice(uint64(l))
	}
	return n
}

func (m *CommonChatsId) Size() (n int) {
	var l int
	_ = l
	if len(m.ChatId) > 0 {
		l = 0
		for _, e := range m.ChatId {
			l += sovChatservice(uint64(e))
		}
		n += 1 + sovChatservice(uint64(l)) + l
	}
	if m.Resultcode != 0 {
		n += 1 + sovChatservice(uint64(m.Resultcode))
	}
	return n
}

func (m *ChatVersion) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.Version != 0 {
		n += 1 + sovChatservice(uint64(m.Version))
	}
	return n
}

func (m *ChatPartCount) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.ParticipantsCount != 0 {
		n += 1 + sovChatservice(uint64(m.ParticipantsCount))
	}
	return n
}

func (m *ChatUserReq) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChatservice(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatservice(uint64(m.UserId))
	}
	return n
}

func sovChatservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChatservice(x uint64) (n int) {
	return sovChatservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HelloMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloRespond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloRespond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloRespond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Respond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Respond = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRquest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: createRquest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: createRquest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemberId = append(m.MemberId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MemberId = append(m.MemberId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminsEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deactivated = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInvite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInvite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrateTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MigrateTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = append(m.Member, &ChatMemberInfo{})
			if err := m.Member[len(m.Member)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoolResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: boolResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: boolResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.B = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatLittleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatLittleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatLittleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInvite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInvite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatUsersId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatUsersId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatUsersId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatTitleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatTitleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatTitleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatPhotoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatPhotoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatPhotoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatMigrateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatMigrateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatMigrateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrateTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MigrateTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatdeactiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatdeactiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatdeactiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deactivated = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatadminEnableReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatadminEnableReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatadminEnableReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminsEnabled = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatExportLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatExportLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatExportLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatMemberBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatMemberBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatMemberBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invitor", wireType)
			}
			m.Invitor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Invitor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			m.MemberId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatMemberInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatMemberInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatMemberInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invitor", wireType)
			}
			m.Invitor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Invitor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminLevel", wireType)
			}
			m.AdminLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
			}
			m.JoinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leave", wireType)
			}
			m.Leave = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leave |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChatId = append(m.ChatId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChatId = append(m.ChatId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Except", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Except = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatInfos = append(m.ChatInfos, &ChatInfo{})
			if err := m.ChatInfos[len(m.ChatInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonChatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: commonChatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: commonChatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdSelf", wireType)
			}
			m.UserIdSelf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserIdSelf |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dlog == nil {
				m.Dlog = &chatcommon.ChatLogPrefix{}
			}
			if err := m.Dlog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonChatsId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: commonChatsId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: commonChatsId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChatId = append(m.ChatId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatservice
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChatId = append(m.ChatId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultcode", wireType)
			}
			m.Resultcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resultcode |= (chatcommon.ChatResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatPartCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatPartCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatPartCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChatservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChatservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChatservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChatservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatservice   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("chatserver/chatservice.proto", fileDescriptorChatservice) }

var fileDescriptorChatservice = []byte{
	// 1272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x4b, 0x6e, 0xdb, 0x46,
	0x18, 0x36, 0xa9, 0x87, 0xa5, 0x5f, 0xb2, 0x1c, 0x4f, 0x1d, 0x9b, 0x71, 0x52, 0x57, 0x20, 0x50,
	0x54, 0x9b, 0x24, 0x80, 0xb3, 0x6a, 0x0b, 0x34, 0x4d, 0x14, 0xc3, 0x36, 0x6a, 0x03, 0x06, 0xed,
	0xa4, 0x4b, 0x81, 0x12, 0xc7, 0xf6, 0x34, 0x24, 0x47, 0x26, 0xc7, 0xaa, 0x8b, 0x74, 0xd5, 0xa2,
	0x27, 0x69, 0x51, 0xa0, 0x27, 0xe8, 0x11, 0xda, 0x65, 0x8f, 0x50, 0x78, 0xdd, 0x43, 0x14, 0xf3,
	0xa0, 0x39, 0x94, 0x44, 0x46, 0x8c, 0x77, 0x33, 0x3f, 0x7f, 0x7d, 0xff, 0xfb, 0x31, 0x82, 0x47,
	0xa3, 0x0b, 0x97, 0xc5, 0x38, 0x9a, 0xe0, 0xe8, 0x69, 0x72, 0x24, 0x23, 0xfc, 0x64, 0x1c, 0x51,
	0x46, 0x11, 0xa4, 0x5f, 0xb7, 0x1e, 0xf2, 0xf3, 0x88, 0x06, 0x01, 0x0d, 0x9f, 0xa6, 0x47, 0xc9,
	0x68, 0xdb, 0xd0, 0xde, 0xc7, 0xbe, 0x4f, 0x8f, 0x70, 0x1c, 0xbb, 0xe7, 0x18, 0x21, 0xa8, 0x86,
	0x6e, 0x80, 0x2d, 0xa3, 0x6b, 0xf4, 0x9a, 0x8e, 0x38, 0xdb, 0x3d, 0xc5, 0xe3, 0xe0, 0x78, 0x4c,
	0x43, 0x0f, 0x59, 0xb0, 0x1c, 0xc9, 0xa3, 0x62, 0x4b, 0xae, 0xf6, 0x9f, 0x06, 0xb4, 0x47, 0x11,
	0x76, 0x19, 0x76, 0x2e, 0xaf, 0x70, 0xcc, 0xd0, 0x3a, 0xd4, 0x18, 0x61, 0x7e, 0x82, 0x27, 0x2f,
	0x1c, 0x40, 0x70, 0xd1, 0xc8, 0x32, 0xbb, 0x46, 0xaf, 0xe6, 0x24, 0x57, 0x2e, 0xde, 0x73, 0x19,
	0xb6, 0x2a, 0x82, 0x2c, 0xce, 0x68, 0x13, 0x96, 0xb9, 0xda, 0x03, 0xe2, 0x59, 0x55, 0x41, 0xae,
	0xf3, 0xeb, 0x81, 0x87, 0x1e, 0x42, 0x33, 0xc0, 0xc1, 0x10, 0x47, 0xfc, 0x53, 0xad, 0x5b, 0xe9,
	0xd5, 0x9c, 0x86, 0x24, 0x1c, 0x78, 0xe8, 0x31, 0x54, 0x3d, 0x9f, 0x9e, 0x5b, 0xf5, 0xae, 0xd1,
	0x6b, 0xed, 0x3c, 0x78, 0xa2, 0x59, 0xde, 0xbf, 0x70, 0xd9, 0x21, 0x3d, 0x3f, 0x8e, 0xf0, 0x19,
	0xb9, 0x76, 0x04, 0x9b, 0xfd, 0x47, 0x05, 0x1a, 0x02, 0x36, 0x3c, 0xa3, 0xba, 0x44, 0x23, 0x23,
	0xf1, 0x53, 0xe8, 0xb8, 0x5e, 0x40, 0xc2, 0x78, 0x80, 0x43, 0x77, 0xe8, 0x63, 0x4f, 0xe8, 0xdf,
	0x70, 0x56, 0x24, 0x75, 0x57, 0x12, 0x51, 0x17, 0x5a, 0x1e, 0x76, 0x47, 0x8c, 0x4c, 0x5c, 0x86,
	0x3d, 0x61, 0x4c, 0xc3, 0xd1, 0x49, 0xe8, 0x33, 0x58, 0xc5, 0xd7, 0x63, 0x1a, 0x31, 0xec, 0x0d,
	0x48, 0x38, 0x21, 0x0c, 0x0b, 0xdb, 0x9a, 0x4e, 0x27, 0x21, 0x1f, 0x08, 0x2a, 0x77, 0x20, 0x0e,
	0x47, 0xd1, 0x0f, 0x56, 0x4d, 0x80, 0xc8, 0x8b, 0xee, 0xc0, 0x7a, 0xd6, 0x81, 0xb7, 0x0e, 0x5f,
	0xd6, 0x1d, 0xbe, 0x0e, 0xb5, 0xf1, 0x05, 0x65, 0xd4, 0x6a, 0x48, 0xaa, 0xb8, 0x70, 0x94, 0x09,
	0x8e, 0x62, 0x42, 0x43, 0xab, 0x29, 0x51, 0xd4, 0x15, 0x3d, 0x06, 0x34, 0x76, 0x23, 0x46, 0x46,
	0x64, 0xec, 0x86, 0x2c, 0x1e, 0x8c, 0xe8, 0x55, 0xc8, 0x2c, 0x10, 0x4c, 0x6b, 0xfa, 0x97, 0x3e,
	0xff, 0x70, 0x1b, 0xb5, 0x96, 0x16, 0xb5, 0x8f, 0x01, 0x02, 0x72, 0x1e, 0xb9, 0x0c, 0x0f, 0x18,
	0xb5, 0xda, 0x42, 0x6e, 0x53, 0x51, 0x4e, 0x29, 0xfa, 0x02, 0x20, 0xc2, 0xf1, 0x95, 0xcf, 0x46,
	0xd4, 0xc3, 0xd6, 0x4a, 0xd7, 0xe8, 0x75, 0x76, 0xb6, 0xa6, 0x83, 0xe4, 0x08, 0x8e, 0x3e, 0xf5,
	0xb0, 0xa3, 0x71, 0xdb, 0xc7, 0x90, 0xc4, 0x23, 0x37, 0x50, 0x49, 0xf4, 0xcd, 0xc5, 0xa2, 0xff,
	0x93, 0x01, 0xf7, 0x38, 0xcb, 0xb1, 0x66, 0x1a, 0xda, 0x81, 0xba, 0xcc, 0x26, 0xcb, 0xe8, 0x56,
	0x7a, 0x2d, 0xa5, 0x9e, 0x2c, 0x2a, 0x71, 0x3c, 0x92, 0xb9, 0x16, 0x9e, 0x51, 0x47, 0x71, 0x4e,
	0x99, 0x65, 0x96, 0x32, 0xeb, 0x0d, 0xc0, 0x90, 0x52, 0x5f, 0x7e, 0x45, 0x6d, 0x30, 0x86, 0xc2,
	0xa8, 0x86, 0x63, 0x0c, 0xef, 0x84, 0xfb, 0x9b, 0x01, 0x1d, 0xce, 0x79, 0x48, 0x18, 0xf3, 0x71,
	0x71, 0x82, 0xcf, 0xc9, 0x4b, 0x33, 0x2f, 0x2f, 0x65, 0x9e, 0x55, 0xf4, 0x3c, 0xcb, 0xaa, 0x59,
	0x2d, 0xa5, 0xe6, 0x3b, 0x68, 0x71, 0xc6, 0xd7, 0x31, 0x8e, 0xe2, 0xa2, 0xd0, 0x6e, 0xc2, 0xf2,
	0x55, 0x2c, 0x6b, 0xde, 0x14, 0x35, 0x5f, 0xe7, 0xd7, 0x03, 0x6f, 0x4a, 0x78, 0xa5, 0x94, 0x70,
	0x1f, 0xda, 0x9c, 0xf1, 0x94, 0x5b, 0xe1, 0xe0, 0xcb, 0x7c, 0xe9, 0xb7, 0x76, 0x9b, 0xba, 0xdd,
	0x49, 0xba, 0x55, 0x16, 0x4b, 0x37, 0x25, 0xed, 0x98, 0x57, 0xe1, 0xfb, 0xa4, 0xc9, 0xba, 0x35,
	0xf5, 0xba, 0x2d, 0x29, 0xed, 0x7b, 0x19, 0xfe, 0x23, 0x59, 0x7b, 0x85, 0xf2, 0xb2, 0x45, 0x6b,
	0x4e, 0x17, 0x6d, 0x49, 0xc1, 0xef, 0x60, 0x95, 0x73, 0xa8, 0xbe, 0x57, 0x2c, 0x79, 0xaa, 0x65,
	0x9a, 0xb3, 0x2d, 0xb3, 0xa4, 0xf0, 0x9f, 0x0d, 0x40, 0x9c, 0x45, 0x74, 0x66, 0xd9, 0x98, 0x0b,
	0x15, 0x58, 0xb0, 0xb5, 0x97, 0x8e, 0xb4, 0xf0, 0xfd, 0xae, 0x28, 0x9e, 0x43, 0x12, 0xbe, 0xcd,
	0x57, 0x00, 0x41, 0xd5, 0x27, 0xe1, 0x5b, 0xe5, 0x75, 0x71, 0x2e, 0x2b, 0xed, 0x57, 0x55, 0xe9,
	0xb2, 0x31, 0xbd, 0x74, 0x63, 0x31, 0x6a, 0x45, 0x1d, 0xd3, 0x48, 0x89, 0x4b, 0xae, 0xd9, 0xe9,
	0x29, 0xc7, 0x70, 0x3a, 0x3d, 0x4b, 0xcd, 0xe1, 0x44, 0xcb, 0xda, 0x62, 0x5a, 0xfe, 0x97, 0xd1,
	0x32, 0xe9, 0x47, 0x49, 0x4d, 0x2b, 0xa7, 0xa8, 0x9a, 0xd6, 0xd4, 0x37, 0xb3, 0xea, 0x7f, 0x02,
	0x2d, 0x11, 0x99, 0x81, 0x8f, 0x27, 0xd8, 0x57, 0x8a, 0x82, 0x20, 0x1d, 0x72, 0x0a, 0xb7, 0xef,
	0x3b, 0x4a, 0xc2, 0x01, 0x23, 0x01, 0x56, 0x0a, 0x37, 0x38, 0xe1, 0x94, 0x04, 0xa2, 0x7d, 0xf9,
	0xd8, 0x9d, 0x60, 0xa1, 0x73, 0xcd, 0x91, 0x17, 0xdd, 0xc2, 0x7a, 0xc6, 0xc2, 0x6c, 0x6b, 0x59,
	0x2e, 0xd5, 0x5a, 0x7e, 0x31, 0x00, 0x24, 0x4c, 0x3c, 0x93, 0x80, 0x95, 0xbc, 0xbe, 0xa6, 0xfb,
	0x60, 0x03, 0xea, 0xf8, 0x7a, 0x84, 0xc7, 0x4c, 0x2d, 0x12, 0xea, 0x76, 0xeb, 0xf6, 0xea, 0x62,
	0x6e, 0xff, 0x11, 0x9a, 0xc9, 0x82, 0x13, 0xa3, 0x67, 0x52, 0xa7, 0x01, 0xe1, 0x37, 0x35, 0xdf,
	0xd6, 0xa7, 0xe7, 0x9b, 0x98, 0x6c, 0xda, 0x8f, 0xee, 0x32, 0x84, 0x7e, 0x37, 0x60, 0x45, 0x72,
	0x49, 0xa6, 0x4b, 0xd4, 0x85, 0xb6, 0xb2, 0x77, 0x10, 0x63, 0xff, 0x4c, 0x05, 0x1e, 0xa4, 0xd1,
	0x27, 0xd8, 0x3f, 0xcb, 0xf7, 0xc8, 0x7d, 0xa8, 0x07, 0xee, 0x35, 0xa7, 0xcb, 0xb0, 0xd7, 0x02,
	0xf7, 0x5a, 0x76, 0x4b, 0x9f, 0x04, 0x84, 0xa9, 0x68, 0xcb, 0x4b, 0xd9, 0xec, 0xf4, 0x74, 0x3d,
	0x67, 0x06, 0x51, 0x25, 0x37, 0x29, 0xca, 0xb9, 0xe3, 0x6b, 0x39, 0xec, 0xde, 0xa8, 0x7d, 0x2b,
	0xb7, 0x29, 0x68, 0x2b, 0x9a, 0x99, 0x59, 0xd1, 0xec, 0x6f, 0x61, 0x25, 0xd9, 0x58, 0xe4, 0x12,
	0x56, 0xb0, 0x0b, 0xcd, 0x5b, 0xe6, 0xcc, 0x9c, 0x65, 0xce, 0x7e, 0x9e, 0xce, 0xe1, 0xc2, 0x86,
	0x99, 0x17, 0x9d, 0x9d, 0xbf, 0x00, 0xd0, 0x5e, 0x44, 0xaf, 0xc6, 0x27, 0x22, 0x95, 0x4e, 0xe4,
	0xc3, 0x04, 0x7d, 0x05, 0xd0, 0x17, 0x4f, 0x03, 0xee, 0x16, 0x64, 0x65, 0x92, 0x4d, 0x7b, 0x32,
	0x6c, 0xcd, 0x4d, 0x43, 0x7b, 0x09, 0x7d, 0x0e, 0xad, 0x3d, 0xcc, 0xfa, 0xc9, 0x8e, 0x8e, 0x66,
	0xd8, 0xbc, 0xdc, 0x9f, 0xf6, 0x61, 0xf5, 0xf5, 0xd8, 0x53, 0xa2, 0x4f, 0xe5, 0x13, 0x64, 0x9a,
	0x35, 0x19, 0xfd, 0x8b, 0x81, 0x1c, 0xcb, 0x05, 0x7a, 0x9a, 0x35, 0x99, 0xe8, 0xb9, 0x20, 0x7b,
	0xb0, 0x96, 0x82, 0xa8, 0x89, 0x8c, 0x66, 0x17, 0xcb, 0xdb, 0x51, 0x9d, 0x0b, 0x74, 0x08, 0x28,
	0x05, 0x7a, 0xa1, 0x46, 0x14, 0xda, 0x9e, 0xe6, 0xce, 0x4e, 0xbf, 0x5c, 0xb4, 0x57, 0xd0, 0x49,
	0xd1, 0xc4, 0x98, 0x9a, 0xd1, 0x29, 0x1d, 0x61, 0xb9, 0x28, 0x5f, 0x42, 0xeb, 0x15, 0xf6, 0x0b,
	0x23, 0xb4, 0xa1, 0xd3, 0xd2, 0x6d, 0x57, 0xb8, 0xb7, 0xf5, 0xc2, 0xf3, 0xfa, 0x2a, 0xf3, 0x50,
	0xce, 0xb2, 0xcd, 0x67, 0x5a, 0x31, 0x88, 0xd2, 0xe0, 0x0e, 0x20, 0xfb, 0x70, 0xef, 0x44, 0x26,
	0x1a, 0x07, 0x11, 0xbe, 0xfd, 0x70, 0x24, 0x4d, 0x9d, 0xbb, 0x20, 0xed, 0xc2, 0x9a, 0x4a, 0x7e,
	0x6d, 0x8b, 0x9f, 0xe7, 0xe0, 0x19, 0xf8, 0x94, 0xdf, 0x5e, 0x42, 0x07, 0xf0, 0x91, 0x82, 0xc9,
	0xbc, 0x74, 0xe6, 0x01, 0x3d, 0x9a, 0xc9, 0x6d, 0xed, 0x17, 0xf6, 0x12, 0xfa, 0x06, 0x56, 0xf7,
	0x52, 0x2f, 0x09, 0x7d, 0x8a, 0x4c, 0x2b, 0x78, 0x3c, 0xd9, 0x4b, 0xe8, 0x39, 0x74, 0x34, 0x30,
	0xde, 0x75, 0xe7, 0xa9, 0xb4, 0x39, 0x4d, 0x53, 0xcc, 0x02, 0xa0, 0xad, 0x35, 0x87, 0x18, 0x6d,
	0xcc, 0xfe, 0x9c, 0x4f, 0xdf, 0xad, 0xfb, 0xf3, 0x52, 0x37, 0x16, 0x9e, 0xe1, 0xe6, 0x64, 0xbc,
	0x92, 0x87, 0xf1, 0x3e, 0xcf, 0xec, 0x4b, 0x63, 0xd2, 0x21, 0x82, 0x1e, 0x64, 0x7e, 0xa1, 0x4f,
	0xc1, 0xad, 0x9c, 0x4f, 0xc2, 0xaa, 0x97, 0xed, 0xbf, 0x6f, 0xb6, 0x8d, 0x7f, 0x6e, 0xb6, 0x8d,
	0x7f, 0x6f, 0xb6, 0x8d, 0x61, 0x5d, 0xfc, 0x63, 0xf3, 0xec, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xaa, 0x3c, 0x87, 0x58, 0xfa, 0x11, 0x00, 0x00,
}
