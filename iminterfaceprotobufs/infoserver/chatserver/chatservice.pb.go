//协议文件用途:  操作和获取普通群组信息
//作者：liuxinlei
//日期: 2017/6/22
//版本：0.0.1
//修改日期：20170627
//修改日志：修改接口中一些错误 by 谭于舟
//2017/12/1 hujian 增加日志  返回code  规范代码

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: chatservice.proto

package chatserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	chatcommon "interfaceprobuf/iminterfaceprotobufs/infoserver/chatcommon"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ################# 测试数据结构 #############################
type HelloMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HelloMessage) Reset() {
	*x = HelloMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloMessage) ProtoMessage() {}

func (x *HelloMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloMessage.ProtoReflect.Descriptor instead.
func (*HelloMessage) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{0}
}

func (x *HelloMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HelloRespond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Respond string `protobuf:"bytes,1,opt,name=respond,proto3" json:"respond,omitempty"`
}

func (x *HelloRespond) Reset() {
	*x = HelloRespond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRespond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRespond) ProtoMessage() {}

func (x *HelloRespond) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRespond.ProtoReflect.Descriptor instead.
func (*HelloRespond) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{1}
}

func (x *HelloRespond) GetRespond() string {
	if x != nil {
		return x.Respond
	}
	return ""
}

// ---------------------------------------------------------------------------------
// 创建群的请求数据
type CreateRquest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string                    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Creator  int32                     `protobuf:"varint,2,opt,name=creator,proto3" json:"creator,omitempty"`                          //群创建者的id
	Date     int32                     `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`                                //群创建时间
	ChatId   int32                     `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`              //普通群的ID
	MemberId []int32                   `protobuf:"varint,5,rep,packed,name=member_id,json=memberId,proto3" json:"member_id,omitempty"` //创建群的时候邀请人的id的列表
	Dlog     *chatcommon.ChatLogPrefix `protobuf:"bytes,6,opt,name=dlog,proto3" json:"dlog,omitempty"`                                 //日志
}

func (x *CreateRquest) Reset() {
	*x = CreateRquest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRquest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRquest) ProtoMessage() {}

func (x *CreateRquest) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRquest.ProtoReflect.Descriptor instead.
func (*CreateRquest) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRquest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateRquest) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *CreateRquest) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *CreateRquest) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *CreateRquest) GetMemberId() []int32 {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *CreateRquest) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 响应
type ChatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId            int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminsEnabled     bool                      `protobuf:"varint,2,opt,name=admins_enabled,json=adminsEnabled,proto3" json:"admins_enabled,omitempty"`
	Deactivated       bool                      `protobuf:"varint,3,opt,name=deactivated,proto3" json:"deactivated,omitempty"` //群是否活跃
	ExportedInvite    string                    `protobuf:"bytes,4,opt,name=exported_invite,json=exportedInvite,proto3" json:"exported_invite,omitempty"`
	Encry             bool                      `protobuf:"varint,5,opt,name=encry,proto3" json:"encry,omitempty"`     //是否加密群
	Creator           int32                     `protobuf:"varint,6,opt,name=creator,proto3" json:"creator,omitempty"` //创建者的id
	Title             string                    `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Photo             string                    `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`                                                    //群头像 json格式
	Version           int32                     `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`                                               //群version
	ParticipantsCount int32                     `protobuf:"varint,10,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"` //	群成员个数 （邀请人和踢人都要相应变化）
	Date              int32                     `protobuf:"varint,11,opt,name=date,proto3" json:"date,omitempty"`                                                    //群创建时间
	MigrateTo         string                    `protobuf:"bytes,12,opt,name=migrate_to,json=migrateTo,proto3" json:"migrate_to,omitempty"`                          //升级为超级群的时候默认"" 格式为json格式
	Resultcode        chatcommon.ChatResultCode `protobuf:"varint,13,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"`         //返回结果码
}

func (x *ChatInfo) Reset() {
	*x = ChatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatInfo) ProtoMessage() {}

func (x *ChatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatInfo.ProtoReflect.Descriptor instead.
func (*ChatInfo) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{3}
}

func (x *ChatInfo) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatInfo) GetAdminsEnabled() bool {
	if x != nil {
		return x.AdminsEnabled
	}
	return false
}

func (x *ChatInfo) GetDeactivated() bool {
	if x != nil {
		return x.Deactivated
	}
	return false
}

func (x *ChatInfo) GetExportedInvite() string {
	if x != nil {
		return x.ExportedInvite
	}
	return ""
}

func (x *ChatInfo) GetEncry() bool {
	if x != nil {
		return x.Encry
	}
	return false
}

func (x *ChatInfo) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *ChatInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChatInfo) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *ChatInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChatInfo) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *ChatInfo) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ChatInfo) GetMigrateTo() string {
	if x != nil {
		return x.MigrateTo
	}
	return ""
}

func (x *ChatInfo) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

// ---------------------------------------------------------------------------------
// 获取群的信息请求
type ChatId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog   *chatcommon.ChatLogPrefix `protobuf:"bytes,2,opt,name=dlog,proto3" json:"dlog,omitempty"` //日志
}

func (x *ChatId) Reset() {
	*x = ChatId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatId) ProtoMessage() {}

func (x *ChatId) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatId.ProtoReflect.Descriptor instead.
func (*ChatId) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{4}
}

func (x *ChatId) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatId) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 群成员列表结构
type ChatParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member     []*ChatMemberInfo         `protobuf:"bytes,1,rep,name=member,proto3" json:"member,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *ChatParticipants) Reset() {
	*x = ChatParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatParticipants) ProtoMessage() {}

func (x *ChatParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatParticipants.ProtoReflect.Descriptor instead.
func (*ChatParticipants) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{5}
}

func (x *ChatParticipants) GetMember() []*ChatMemberInfo {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *ChatParticipants) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

type BoolResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B          bool                      `protobuf:"varint,1,opt,name=b,proto3" json:"b,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *BoolResult) Reset() {
	*x = BoolResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolResult) ProtoMessage() {}

func (x *BoolResult) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolResult.ProtoReflect.Descriptor instead.
func (*BoolResult) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{6}
}

func (x *BoolResult) GetB() bool {
	if x != nil {
		return x.B
	}
	return false
}

func (x *BoolResult) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

type ChatLittleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId         int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ExportedInvite string                    `protobuf:"bytes,2,opt,name=exported_invite,json=exportedInvite,proto3" json:"exported_invite,omitempty"`
	Title          string                    `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Resultcode     chatcommon.ChatResultCode `protobuf:"varint,4,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *ChatLittleInfo) Reset() {
	*x = ChatLittleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatLittleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatLittleInfo) ProtoMessage() {}

func (x *ChatLittleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatLittleInfo.ProtoReflect.Descriptor instead.
func (*ChatLittleInfo) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{7}
}

func (x *ChatLittleInfo) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatLittleInfo) GetExportedInvite() string {
	if x != nil {
		return x.ExportedInvite
	}
	return ""
}

func (x *ChatLittleInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChatLittleInfo) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

type ChatUsersId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId     int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId     []int32                   `protobuf:"varint,2,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,3,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *ChatUsersId) Reset() {
	*x = ChatUsersId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatUsersId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatUsersId) ProtoMessage() {}

func (x *ChatUsersId) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatUsersId.ProtoReflect.Descriptor instead.
func (*ChatUsersId) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{8}
}

func (x *ChatUsersId) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatUsersId) GetUserId() []int32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *ChatUsersId) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

// ---------------------------------------------------------------------------------
// 更新群名称
type ChatTitleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Title  string                    `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Dlog   *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog,proto3" json:"dlog,omitempty"` //日志
}

func (x *ChatTitleReq) Reset() {
	*x = ChatTitleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatTitleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatTitleReq) ProtoMessage() {}

func (x *ChatTitleReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatTitleReq.ProtoReflect.Descriptor instead.
func (*ChatTitleReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{9}
}

func (x *ChatTitleReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatTitleReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChatTitleReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// ---------------------------------------------------------------------------------
// 更新群photo
type ChatPhotoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Photo  string                    `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
	Dlog   *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog,proto3" json:"dlog,omitempty"` //日志
}

func (x *ChatPhotoReq) Reset() {
	*x = ChatPhotoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatPhotoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatPhotoReq) ProtoMessage() {}

func (x *ChatPhotoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatPhotoReq.ProtoReflect.Descriptor instead.
func (*ChatPhotoReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{10}
}

func (x *ChatPhotoReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatPhotoReq) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *ChatPhotoReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type ChatMigrateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MigrateTo string                    `protobuf:"bytes,2,opt,name=migrate_to,json=migrateTo,proto3" json:"migrate_to,omitempty"`
	Dlog      *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog,proto3" json:"dlog,omitempty"` //日志
}

func (x *ChatMigrateReq) Reset() {
	*x = ChatMigrateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMigrateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMigrateReq) ProtoMessage() {}

func (x *ChatMigrateReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMigrateReq.ProtoReflect.Descriptor instead.
func (*ChatMigrateReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{11}
}

func (x *ChatMigrateReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatMigrateReq) GetMigrateTo() string {
	if x != nil {
		return x.MigrateTo
	}
	return ""
}

func (x *ChatMigrateReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// ---------------------------------------------------------------------------------
type ChatdeactiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId      int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Deactivated bool                      `protobuf:"varint,2,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
	Dlog        *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog,proto3" json:"dlog,omitempty"` //日志
}

func (x *ChatdeactiveReq) Reset() {
	*x = ChatdeactiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatdeactiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatdeactiveReq) ProtoMessage() {}

func (x *ChatdeactiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatdeactiveReq.ProtoReflect.Descriptor instead.
func (*ChatdeactiveReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{12}
}

func (x *ChatdeactiveReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatdeactiveReq) GetDeactivated() bool {
	if x != nil {
		return x.Deactivated
	}
	return false
}

func (x *ChatdeactiveReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type ChatadminEnableReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId        int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminsEnabled bool                      `protobuf:"varint,2,opt,name=admins_enabled,json=adminsEnabled,proto3" json:"admins_enabled,omitempty"`
	Dlog          *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog,proto3" json:"dlog,omitempty"` //日志
}

func (x *ChatadminEnableReq) Reset() {
	*x = ChatadminEnableReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatadminEnableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatadminEnableReq) ProtoMessage() {}

func (x *ChatadminEnableReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatadminEnableReq.ProtoReflect.Descriptor instead.
func (*ChatadminEnableReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{13}
}

func (x *ChatadminEnableReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatadminEnableReq) GetAdminsEnabled() bool {
	if x != nil {
		return x.AdminsEnabled
	}
	return false
}

func (x *ChatadminEnableReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// ---------------------------------------------------------------------------------
// 更新邀请链接
type ChatExportLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int32                     `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Link   string                    `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Dlog   *chatcommon.ChatLogPrefix `protobuf:"bytes,3,opt,name=dlog,proto3" json:"dlog,omitempty"` //日志
}

func (x *ChatExportLink) Reset() {
	*x = ChatExportLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatExportLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatExportLink) ProtoMessage() {}

func (x *ChatExportLink) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatExportLink.ProtoReflect.Descriptor instead.
func (*ChatExportLink) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{14}
}

func (x *ChatExportLink) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatExportLink) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *ChatExportLink) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// ---------------------------------------------------------------------------------
// ##########群成员的请求结构###################
type ChatMemberBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitor  int32                     `protobuf:"varint,1,opt,name=invitor,proto3" json:"invitor,omitempty"`                   //邀请者或者踢人的id
	MemberId int32                     `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"` //被踢或者被邀请者的id
	Date     int32                     `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	ChatId   int32                     `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Dlog     *chatcommon.ChatLogPrefix `protobuf:"bytes,5,opt,name=dlog,proto3" json:"dlog,omitempty"` //日志
}

func (x *ChatMemberBase) Reset() {
	*x = ChatMemberBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMemberBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMemberBase) ProtoMessage() {}

func (x *ChatMemberBase) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMemberBase.ProtoReflect.Descriptor instead.
func (*ChatMemberBase) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{15}
}

func (x *ChatMemberBase) GetInvitor() int32 {
	if x != nil {
		return x.Invitor
	}
	return 0
}

func (x *ChatMemberBase) GetMemberId() int32 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *ChatMemberBase) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ChatMemberBase) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatMemberBase) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

// 普通群成员信息
type ChatMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32                     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //群成员的Id
	Invitor    int32                     `protobuf:"varint,2,opt,name=invitor,proto3" json:"invitor,omitempty"`                         //邀请者的id
	AdminLevel int32                     `protobuf:"varint,3,opt,name=admin_level,json=adminLevel,proto3" json:"admin_level,omitempty"` //管理员权限等级 3 代表创建者， 2 代表管理员 1、代表普通成员
	JoinTime   int32                     `protobuf:"varint,4,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`       //入群时间
	Leave      int32                     `protobuf:"varint,5,opt,name=leave,proto3" json:"leave,omitempty"`                             //0 为群成员（正常）， 2 被踢 1、主动离开
	ChatId     int32                     `protobuf:"varint,6,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,7,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *ChatMemberInfo) Reset() {
	*x = ChatMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMemberInfo) ProtoMessage() {}

func (x *ChatMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMemberInfo.ProtoReflect.Descriptor instead.
func (*ChatMemberInfo) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{16}
}

func (x *ChatMemberInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChatMemberInfo) GetInvitor() int32 {
	if x != nil {
		return x.Invitor
	}
	return 0
}

func (x *ChatMemberInfo) GetAdminLevel() int32 {
	if x != nil {
		return x.AdminLevel
	}
	return 0
}

func (x *ChatMemberInfo) GetJoinTime() int32 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *ChatMemberInfo) GetLeave() int32 {
	if x != nil {
		return x.Leave
	}
	return 0
}

func (x *ChatMemberInfo) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatMemberInfo) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

// ---------------------------------------------------------------------------------
type ChatIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId []int32                   `protobuf:"varint,1,rep,packed,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId int32                     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Except bool                      `protobuf:"varint,3,opt,name=except,proto3" json:"except,omitempty"`
	Dlog   *chatcommon.ChatLogPrefix `protobuf:"bytes,4,opt,name=dlog,proto3" json:"dlog,omitempty"` //日志
}

func (x *ChatIdsReq) Reset() {
	*x = ChatIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatIdsReq) ProtoMessage() {}

func (x *ChatIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatIdsReq.ProtoReflect.Descriptor instead.
func (*ChatIdsReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{17}
}

func (x *ChatIdsReq) GetChatId() []int32 {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *ChatIdsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChatIdsReq) GetExcept() bool {
	if x != nil {
		return x.Except
	}
	return false
}

func (x *ChatIdsReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type ChatInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatInfos  []*ChatInfo               `protobuf:"bytes,1,rep,name=chat_infos,json=chatInfos,proto3" json:"chat_infos,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *ChatInfos) Reset() {
	*x = ChatInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatInfos) ProtoMessage() {}

func (x *ChatInfos) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatInfos.ProtoReflect.Descriptor instead.
func (*ChatInfos) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{18}
}

func (x *ChatInfos) GetChatInfos() []*ChatInfo {
	if x != nil {
		return x.ChatInfos
	}
	return nil
}

func (x *ChatInfos) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

// ---------------------------------------------------------------------------------
type CommonChatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdSelf int32                     `protobuf:"varint,1,opt,name=user_id_self,json=userIdSelf,proto3" json:"user_id_self,omitempty"`
	UserId     int32                     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MaxId      int32                     `protobuf:"varint,3,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Limit      int32                     `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Dlog       *chatcommon.ChatLogPrefix `protobuf:"bytes,5,opt,name=dlog,proto3" json:"dlog,omitempty"` //日志
}

func (x *CommonChatReq) Reset() {
	*x = CommonChatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonChatReq) ProtoMessage() {}

func (x *CommonChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonChatReq.ProtoReflect.Descriptor instead.
func (*CommonChatReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{19}
}

func (x *CommonChatReq) GetUserIdSelf() int32 {
	if x != nil {
		return x.UserIdSelf
	}
	return 0
}

func (x *CommonChatReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CommonChatReq) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *CommonChatReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CommonChatReq) GetDlog() *chatcommon.ChatLogPrefix {
	if x != nil {
		return x.Dlog
	}
	return nil
}

type CommonChatsId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId     []int32                   `protobuf:"varint,1,rep,packed,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Resultcode chatcommon.ChatResultCode `protobuf:"varint,2,opt,name=resultcode,proto3,enum=chatcommon.ChatResultCode" json:"resultcode,omitempty"` //返回结果码
}

func (x *CommonChatsId) Reset() {
	*x = CommonChatsId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonChatsId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonChatsId) ProtoMessage() {}

func (x *CommonChatsId) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonChatsId.ProtoReflect.Descriptor instead.
func (*CommonChatsId) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{20}
}

func (x *CommonChatsId) GetChatId() []int32 {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *CommonChatsId) GetResultcode() chatcommon.ChatResultCode {
	if x != nil {
		return x.Resultcode
	}
	return chatcommon.ChatResultCode(0)
}

// ---------------------------------------------------------------------------------
type ChatVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId  int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Version int32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ChatVersion) Reset() {
	*x = ChatVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatVersion) ProtoMessage() {}

func (x *ChatVersion) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatVersion.ProtoReflect.Descriptor instead.
func (*ChatVersion) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{21}
}

func (x *ChatVersion) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatVersion) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ChatPartCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId            int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ParticipantsCount int32 `protobuf:"varint,2,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
}

func (x *ChatPartCount) Reset() {
	*x = ChatPartCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatPartCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatPartCount) ProtoMessage() {}

func (x *ChatPartCount) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatPartCount.ProtoReflect.Descriptor instead.
func (*ChatPartCount) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{22}
}

func (x *ChatPartCount) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatPartCount) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

type ChatUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ChatUserReq) Reset() {
	*x = ChatUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatservice_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatUserReq) ProtoMessage() {}

func (x *ChatUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_chatservice_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatUserReq.ProtoReflect.Descriptor instead.
func (*ChatUserReq) Descriptor() ([]byte, []int) {
	return file_chatservice_proto_rawDescGZIP(), []int{23}
}

func (x *ChatUserReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatUserReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

var File_chatservice_proto protoreflect.FileDescriptor

var file_chatservice_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a,
	0x3b, 0x69, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x74,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x22, 0x0a, 0x0c,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x28, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04,
	0x64, 0x6c, 0x6f, 0x67, 0x22, 0xa9, 0x03, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x50, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c,
	0x6f, 0x67, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x56, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x01, 0x62, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xa4, 0x01, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x6c, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f,
	0x67, 0x22, 0x6c, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22,
	0x77, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0x7b, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x74,
	0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x04,
	0x64, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0x6c, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c,
	0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22,
	0xec, 0x01, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x85,
	0x01, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0x7c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d,
	0x0a, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f,
	0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x04, 0x64, 0x6c, 0x6f, 0x67, 0x22, 0x64, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x73, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x40, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3f,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x32,
	0xc7, 0x0a, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x12, 0x1e, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x1a, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x1a, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x1a, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x1a,
	0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1a, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x1a, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x1a, 0x1a, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x4c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x1a, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x1a, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x1a, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49,
	0x64, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x73, 0x12, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x49, 0x64, 0x22, 0x00, 0x42, 0x3c, 0x5a, 0x3a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chatservice_proto_rawDescOnce sync.Once
	file_chatservice_proto_rawDescData = file_chatservice_proto_rawDesc
)

func file_chatservice_proto_rawDescGZIP() []byte {
	file_chatservice_proto_rawDescOnce.Do(func() {
		file_chatservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_chatservice_proto_rawDescData)
	})
	return file_chatservice_proto_rawDescData
}

var file_chatservice_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_chatservice_proto_goTypes = []interface{}{
	(*HelloMessage)(nil),             // 0: chatserver.HelloMessage
	(*HelloRespond)(nil),             // 1: chatserver.HelloRespond
	(*CreateRquest)(nil),             // 2: chatserver.createRquest
	(*ChatInfo)(nil),                 // 3: chatserver.chatInfo
	(*ChatId)(nil),                   // 4: chatserver.chatId
	(*ChatParticipants)(nil),         // 5: chatserver.chatParticipants
	(*BoolResult)(nil),               // 6: chatserver.boolResult
	(*ChatLittleInfo)(nil),           // 7: chatserver.chatLittleInfo
	(*ChatUsersId)(nil),              // 8: chatserver.chatUsersId
	(*ChatTitleReq)(nil),             // 9: chatserver.chatTitleReq
	(*ChatPhotoReq)(nil),             // 10: chatserver.chatPhotoReq
	(*ChatMigrateReq)(nil),           // 11: chatserver.chatMigrateReq
	(*ChatdeactiveReq)(nil),          // 12: chatserver.chatdeactiveReq
	(*ChatadminEnableReq)(nil),       // 13: chatserver.chatadminEnableReq
	(*ChatExportLink)(nil),           // 14: chatserver.chatExportLink
	(*ChatMemberBase)(nil),           // 15: chatserver.chatMemberBase
	(*ChatMemberInfo)(nil),           // 16: chatserver.chatMemberInfo
	(*ChatIdsReq)(nil),               // 17: chatserver.chatIdsReq
	(*ChatInfos)(nil),                // 18: chatserver.chatInfos
	(*CommonChatReq)(nil),            // 19: chatserver.commonChatReq
	(*CommonChatsId)(nil),            // 20: chatserver.commonChatsId
	(*ChatVersion)(nil),              // 21: chatserver.chatVersion
	(*ChatPartCount)(nil),            // 22: chatserver.chatPartCount
	(*ChatUserReq)(nil),              // 23: chatserver.chatUserReq
	(*chatcommon.ChatLogPrefix)(nil), // 24: chatcommon.ChatLogPrefix
	(chatcommon.ChatResultCode)(0),   // 25: chatcommon.ChatResultCode
}
var file_chatservice_proto_depIdxs = []int32{
	24, // 0: chatserver.createRquest.dlog:type_name -> chatcommon.ChatLogPrefix
	25, // 1: chatserver.chatInfo.resultcode:type_name -> chatcommon.ChatResultCode
	24, // 2: chatserver.chatId.dlog:type_name -> chatcommon.ChatLogPrefix
	16, // 3: chatserver.chatParticipants.member:type_name -> chatserver.chatMemberInfo
	25, // 4: chatserver.chatParticipants.resultcode:type_name -> chatcommon.ChatResultCode
	25, // 5: chatserver.boolResult.resultcode:type_name -> chatcommon.ChatResultCode
	25, // 6: chatserver.chatLittleInfo.resultcode:type_name -> chatcommon.ChatResultCode
	25, // 7: chatserver.chatUsersId.resultcode:type_name -> chatcommon.ChatResultCode
	24, // 8: chatserver.chatTitleReq.dlog:type_name -> chatcommon.ChatLogPrefix
	24, // 9: chatserver.chatPhotoReq.dlog:type_name -> chatcommon.ChatLogPrefix
	24, // 10: chatserver.chatMigrateReq.dlog:type_name -> chatcommon.ChatLogPrefix
	24, // 11: chatserver.chatdeactiveReq.dlog:type_name -> chatcommon.ChatLogPrefix
	24, // 12: chatserver.chatadminEnableReq.dlog:type_name -> chatcommon.ChatLogPrefix
	24, // 13: chatserver.chatExportLink.dlog:type_name -> chatcommon.ChatLogPrefix
	24, // 14: chatserver.chatMemberBase.dlog:type_name -> chatcommon.ChatLogPrefix
	25, // 15: chatserver.chatMemberInfo.resultcode:type_name -> chatcommon.ChatResultCode
	24, // 16: chatserver.chatIdsReq.dlog:type_name -> chatcommon.ChatLogPrefix
	3,  // 17: chatserver.chatInfos.chat_infos:type_name -> chatserver.chatInfo
	25, // 18: chatserver.chatInfos.resultcode:type_name -> chatcommon.ChatResultCode
	24, // 19: chatserver.commonChatReq.dlog:type_name -> chatcommon.ChatLogPrefix
	25, // 20: chatserver.commonChatsId.resultcode:type_name -> chatcommon.ChatResultCode
	2,  // 21: chatserver.GroupServerService.CreateChat:input_type -> chatserver.createRquest
	4,  // 22: chatserver.GroupServerService.GetChatInfo:input_type -> chatserver.chatId
	9,  // 23: chatserver.GroupServerService.UpdateChatTitle:input_type -> chatserver.chatTitleReq
	10, // 24: chatserver.GroupServerService.UpdateChatPhoto:input_type -> chatserver.chatPhotoReq
	11, // 25: chatserver.GroupServerService.UpdateChatMigrate:input_type -> chatserver.chatMigrateReq
	13, // 26: chatserver.GroupServerService.UpdateChatAdminsEn:input_type -> chatserver.chatadminEnableReq
	14, // 27: chatserver.GroupServerService.UpdateChatLink:input_type -> chatserver.chatExportLink
	4,  // 28: chatserver.GroupServerService.DelChatInfo:input_type -> chatserver.chatId
	15, // 29: chatserver.GroupServerService.AddChatUser:input_type -> chatserver.chatMemberBase
	15, // 30: chatserver.GroupServerService.DelChatUser:input_type -> chatserver.chatMemberBase
	15, // 31: chatserver.GroupServerService.SetChatUserAdmin:input_type -> chatserver.chatMemberBase
	15, // 32: chatserver.GroupServerService.DelChatUserAdmin:input_type -> chatserver.chatMemberBase
	4,  // 33: chatserver.GroupServerService.GetChatLittleInfo:input_type -> chatserver.chatId
	4,  // 34: chatserver.GroupServerService.GetChatParticipants:input_type -> chatserver.chatId
	15, // 35: chatserver.GroupServerService.GetChatUserInfo:input_type -> chatserver.chatMemberBase
	4,  // 36: chatserver.GroupServerService.GetChatUsersId:input_type -> chatserver.chatId
	17, // 37: chatserver.GroupServerService.GetChatInfos:input_type -> chatserver.chatIdsReq
	17, // 38: chatserver.GroupServerService.GetParticipants:input_type -> chatserver.chatIdsReq
	19, // 39: chatserver.GroupServerService.GetCommonChats:input_type -> chatserver.commonChatReq
	3,  // 40: chatserver.GroupServerService.CreateChat:output_type -> chatserver.chatInfo
	3,  // 41: chatserver.GroupServerService.GetChatInfo:output_type -> chatserver.chatInfo
	3,  // 42: chatserver.GroupServerService.UpdateChatTitle:output_type -> chatserver.chatInfo
	3,  // 43: chatserver.GroupServerService.UpdateChatPhoto:output_type -> chatserver.chatInfo
	3,  // 44: chatserver.GroupServerService.UpdateChatMigrate:output_type -> chatserver.chatInfo
	3,  // 45: chatserver.GroupServerService.UpdateChatAdminsEn:output_type -> chatserver.chatInfo
	3,  // 46: chatserver.GroupServerService.UpdateChatLink:output_type -> chatserver.chatInfo
	6,  // 47: chatserver.GroupServerService.DelChatInfo:output_type -> chatserver.boolResult
	6,  // 48: chatserver.GroupServerService.AddChatUser:output_type -> chatserver.boolResult
	6,  // 49: chatserver.GroupServerService.DelChatUser:output_type -> chatserver.boolResult
	6,  // 50: chatserver.GroupServerService.SetChatUserAdmin:output_type -> chatserver.boolResult
	6,  // 51: chatserver.GroupServerService.DelChatUserAdmin:output_type -> chatserver.boolResult
	7,  // 52: chatserver.GroupServerService.GetChatLittleInfo:output_type -> chatserver.chatLittleInfo
	5,  // 53: chatserver.GroupServerService.GetChatParticipants:output_type -> chatserver.chatParticipants
	16, // 54: chatserver.GroupServerService.GetChatUserInfo:output_type -> chatserver.chatMemberInfo
	8,  // 55: chatserver.GroupServerService.GetChatUsersId:output_type -> chatserver.chatUsersId
	18, // 56: chatserver.GroupServerService.GetChatInfos:output_type -> chatserver.chatInfos
	5,  // 57: chatserver.GroupServerService.GetParticipants:output_type -> chatserver.chatParticipants
	20, // 58: chatserver.GroupServerService.GetCommonChats:output_type -> chatserver.commonChatsId
	40, // [40:59] is the sub-list for method output_type
	21, // [21:40] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_chatservice_proto_init() }
func file_chatservice_proto_init() {
	if File_chatservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chatservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRespond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRquest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatLittleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatUsersId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatTitleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatPhotoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMigrateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatdeactiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatadminEnableReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatExportLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMemberBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonChatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonChatsId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatPartCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatservice_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chatservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chatservice_proto_goTypes,
		DependencyIndexes: file_chatservice_proto_depIdxs,
		MessageInfos:      file_chatservice_proto_msgTypes,
	}.Build()
	File_chatservice_proto = out.File
	file_chatservice_proto_rawDesc = nil
	file_chatservice_proto_goTypes = nil
	file_chatservice_proto_depIdxs = nil
}
