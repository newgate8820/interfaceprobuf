// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: publiccontact.proto

package infoserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContactPushServiceClient is the client API for ContactPushService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactPushServiceClient interface {
	// 更新自己朋友的未读状态
	UpdateMoments(ctx context.Context, in *ReqUpdateMoments, opts ...grpc.CallOption) (*ResUpdateMoments, error)
}

type contactPushServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContactPushServiceClient(cc grpc.ClientConnInterface) ContactPushServiceClient {
	return &contactPushServiceClient{cc}
}

func (c *contactPushServiceClient) UpdateMoments(ctx context.Context, in *ReqUpdateMoments, opts ...grpc.CallOption) (*ResUpdateMoments, error) {
	out := new(ResUpdateMoments)
	err := c.cc.Invoke(ctx, "/infoserver.ContactPushService/UpdateMoments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactPushServiceServer is the server API for ContactPushService service.
// All implementations must embed UnimplementedContactPushServiceServer
// for forward compatibility
type ContactPushServiceServer interface {
	// 更新自己朋友的未读状态
	UpdateMoments(context.Context, *ReqUpdateMoments) (*ResUpdateMoments, error)
	mustEmbedUnimplementedContactPushServiceServer()
}

// UnimplementedContactPushServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContactPushServiceServer struct {
}

func (UnimplementedContactPushServiceServer) UpdateMoments(context.Context, *ReqUpdateMoments) (*ResUpdateMoments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMoments not implemented")
}
func (UnimplementedContactPushServiceServer) mustEmbedUnimplementedContactPushServiceServer() {}

// UnsafeContactPushServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactPushServiceServer will
// result in compilation errors.
type UnsafeContactPushServiceServer interface {
	mustEmbedUnimplementedContactPushServiceServer()
}

func RegisterContactPushServiceServer(s grpc.ServiceRegistrar, srv ContactPushServiceServer) {
	s.RegisterService(&ContactPushService_ServiceDesc, srv)
}

func _ContactPushService_UpdateMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateMoments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactPushServiceServer).UpdateMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ContactPushService/UpdateMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactPushServiceServer).UpdateMoments(ctx, req.(*ReqUpdateMoments))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactPushService_ServiceDesc is the grpc.ServiceDesc for ContactPushService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactPushService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infoserver.ContactPushService",
	HandlerType: (*ContactPushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMoments",
			Handler:    _ContactPushService_UpdateMoments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publiccontact.proto",
}
