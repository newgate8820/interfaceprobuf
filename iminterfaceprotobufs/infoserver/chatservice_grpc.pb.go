// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: chatservice.proto

package infoserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServerServiceClient is the client API for ChatServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServerServiceClient interface {
	// 创建群
	CreateNewChat(ctx context.Context, in *CreateChatReq, opts ...grpc.CallOption) (*CreateChatResp, error)
	// 通过群Id获取群成员
	GetChatUsersIdById(ctx context.Context, in *GetChatUsersIdReq, opts ...grpc.CallOption) (*GetChatUsersIdResp, error)
	// 通过群Id 用户Id 获取群基本信息
	GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoResp, error)
	// 添加群成员
	AddChatUser(ctx context.Context, in *AddChatMemberReq, opts ...grpc.CallOption) (*AddChatMemberResp, error)
	// 删除群成员
	DelChatUser(ctx context.Context, in *DelChatMemberReq, opts ...grpc.CallOption) (*DelChatMemberResp, error)
	// 编辑群头像
	EditChatPhoto(ctx context.Context, in *EditChatPhotoReq, opts ...grpc.CallOption) (*EditChatPhotoResp, error)
	// 编辑群title
	EditChatTittle(ctx context.Context, in *EditChatTittleReq, opts ...grpc.CallOption) (*EditChatTittleResp, error)
	// 设置管理员
	AddChatAdmin(ctx context.Context, in *AddChatAdminReq, opts ...grpc.CallOption) (*AddChatAdminResp, error)
	// 取消管理员
	DelChatAdmin(ctx context.Context, in *DelChatAdminReq, opts ...grpc.CallOption) (*DelChatAdminResp, error)
	// 获取群成员角色
	GetChatUserRole(ctx context.Context, in *GetChatUsersRoleReq, opts ...grpc.CallOption) (*GetChatUsersRoleResp, error)
	// 获取共同群
	GetTwoUserChats(ctx context.Context, in *GetTwoUserChatsReq, opts ...grpc.CallOption) (*GetTwoUserChatsResp, error)
	// 升级超级群
	UpGradeChat(ctx context.Context, in *UpGradeChatReq, opts ...grpc.CallOption) (*UpGradeChatResp, error)
	// 生成群邀请链接
	CreateChatLink(ctx context.Context, in *CreateChatLinkReq, opts ...grpc.CallOption) (*CreateChatLinkResp, error)
	// 切换邀请规则  是否是管理员可以邀请  还是所有
	SwitchInviteRule(ctx context.Context, in *SwitchInviteRuleReq, opts ...grpc.CallOption) (*SwitchInviteRuleResp, error)
	// 检查是否是加密群
	CheckChatIsEncry(ctx context.Context, in *CheckChatIsEncryReq, opts ...grpc.CallOption) (*CheckChatIsEncryResp, error)
	// *******************为消息服务********************
	GetUsersChats(ctx context.Context, in *GetUsersChatsReq, opts ...grpc.CallOption) (*GetUsersChatsResult, error)
}

type chatServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServerServiceClient(cc grpc.ClientConnInterface) ChatServerServiceClient {
	return &chatServerServiceClient{cc}
}

func (c *chatServerServiceClient) CreateNewChat(ctx context.Context, in *CreateChatReq, opts ...grpc.CallOption) (*CreateChatResp, error) {
	out := new(CreateChatResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/CreateNewChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetChatUsersIdById(ctx context.Context, in *GetChatUsersIdReq, opts ...grpc.CallOption) (*GetChatUsersIdResp, error) {
	out := new(GetChatUsersIdResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/GetChatUsersIdById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoResp, error) {
	out := new(GetChatInfoResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/GetChatInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) AddChatUser(ctx context.Context, in *AddChatMemberReq, opts ...grpc.CallOption) (*AddChatMemberResp, error) {
	out := new(AddChatMemberResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/AddChatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) DelChatUser(ctx context.Context, in *DelChatMemberReq, opts ...grpc.CallOption) (*DelChatMemberResp, error) {
	out := new(DelChatMemberResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/DelChatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) EditChatPhoto(ctx context.Context, in *EditChatPhotoReq, opts ...grpc.CallOption) (*EditChatPhotoResp, error) {
	out := new(EditChatPhotoResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/EditChatPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) EditChatTittle(ctx context.Context, in *EditChatTittleReq, opts ...grpc.CallOption) (*EditChatTittleResp, error) {
	out := new(EditChatTittleResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/EditChatTittle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) AddChatAdmin(ctx context.Context, in *AddChatAdminReq, opts ...grpc.CallOption) (*AddChatAdminResp, error) {
	out := new(AddChatAdminResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/AddChatAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) DelChatAdmin(ctx context.Context, in *DelChatAdminReq, opts ...grpc.CallOption) (*DelChatAdminResp, error) {
	out := new(DelChatAdminResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/DelChatAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetChatUserRole(ctx context.Context, in *GetChatUsersRoleReq, opts ...grpc.CallOption) (*GetChatUsersRoleResp, error) {
	out := new(GetChatUsersRoleResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/GetChatUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetTwoUserChats(ctx context.Context, in *GetTwoUserChatsReq, opts ...grpc.CallOption) (*GetTwoUserChatsResp, error) {
	out := new(GetTwoUserChatsResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/GetTwoUserChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) UpGradeChat(ctx context.Context, in *UpGradeChatReq, opts ...grpc.CallOption) (*UpGradeChatResp, error) {
	out := new(UpGradeChatResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/UpGradeChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) CreateChatLink(ctx context.Context, in *CreateChatLinkReq, opts ...grpc.CallOption) (*CreateChatLinkResp, error) {
	out := new(CreateChatLinkResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/CreateChatLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) SwitchInviteRule(ctx context.Context, in *SwitchInviteRuleReq, opts ...grpc.CallOption) (*SwitchInviteRuleResp, error) {
	out := new(SwitchInviteRuleResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/SwitchInviteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) CheckChatIsEncry(ctx context.Context, in *CheckChatIsEncryReq, opts ...grpc.CallOption) (*CheckChatIsEncryResp, error) {
	out := new(CheckChatIsEncryResp)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/CheckChatIsEncry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerServiceClient) GetUsersChats(ctx context.Context, in *GetUsersChatsReq, opts ...grpc.CallOption) (*GetUsersChatsResult, error) {
	out := new(GetUsersChatsResult)
	err := c.cc.Invoke(ctx, "/infoserver.ChatServerService/GetUsersChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServerServiceServer is the server API for ChatServerService service.
// All implementations must embed UnimplementedChatServerServiceServer
// for forward compatibility
type ChatServerServiceServer interface {
	// 创建群
	CreateNewChat(context.Context, *CreateChatReq) (*CreateChatResp, error)
	// 通过群Id获取群成员
	GetChatUsersIdById(context.Context, *GetChatUsersIdReq) (*GetChatUsersIdResp, error)
	// 通过群Id 用户Id 获取群基本信息
	GetChatInfo(context.Context, *GetChatInfoReq) (*GetChatInfoResp, error)
	// 添加群成员
	AddChatUser(context.Context, *AddChatMemberReq) (*AddChatMemberResp, error)
	// 删除群成员
	DelChatUser(context.Context, *DelChatMemberReq) (*DelChatMemberResp, error)
	// 编辑群头像
	EditChatPhoto(context.Context, *EditChatPhotoReq) (*EditChatPhotoResp, error)
	// 编辑群title
	EditChatTittle(context.Context, *EditChatTittleReq) (*EditChatTittleResp, error)
	// 设置管理员
	AddChatAdmin(context.Context, *AddChatAdminReq) (*AddChatAdminResp, error)
	// 取消管理员
	DelChatAdmin(context.Context, *DelChatAdminReq) (*DelChatAdminResp, error)
	// 获取群成员角色
	GetChatUserRole(context.Context, *GetChatUsersRoleReq) (*GetChatUsersRoleResp, error)
	// 获取共同群
	GetTwoUserChats(context.Context, *GetTwoUserChatsReq) (*GetTwoUserChatsResp, error)
	// 升级超级群
	UpGradeChat(context.Context, *UpGradeChatReq) (*UpGradeChatResp, error)
	// 生成群邀请链接
	CreateChatLink(context.Context, *CreateChatLinkReq) (*CreateChatLinkResp, error)
	// 切换邀请规则  是否是管理员可以邀请  还是所有
	SwitchInviteRule(context.Context, *SwitchInviteRuleReq) (*SwitchInviteRuleResp, error)
	// 检查是否是加密群
	CheckChatIsEncry(context.Context, *CheckChatIsEncryReq) (*CheckChatIsEncryResp, error)
	// *******************为消息服务********************
	GetUsersChats(context.Context, *GetUsersChatsReq) (*GetUsersChatsResult, error)
	mustEmbedUnimplementedChatServerServiceServer()
}

// UnimplementedChatServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServerServiceServer struct {
}

func (UnimplementedChatServerServiceServer) CreateNewChat(context.Context, *CreateChatReq) (*CreateChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewChat not implemented")
}
func (UnimplementedChatServerServiceServer) GetChatUsersIdById(context.Context, *GetChatUsersIdReq) (*GetChatUsersIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatUsersIdById not implemented")
}
func (UnimplementedChatServerServiceServer) GetChatInfo(context.Context, *GetChatInfoReq) (*GetChatInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatInfo not implemented")
}
func (UnimplementedChatServerServiceServer) AddChatUser(context.Context, *AddChatMemberReq) (*AddChatMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChatUser not implemented")
}
func (UnimplementedChatServerServiceServer) DelChatUser(context.Context, *DelChatMemberReq) (*DelChatMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelChatUser not implemented")
}
func (UnimplementedChatServerServiceServer) EditChatPhoto(context.Context, *EditChatPhotoReq) (*EditChatPhotoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChatPhoto not implemented")
}
func (UnimplementedChatServerServiceServer) EditChatTittle(context.Context, *EditChatTittleReq) (*EditChatTittleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChatTittle not implemented")
}
func (UnimplementedChatServerServiceServer) AddChatAdmin(context.Context, *AddChatAdminReq) (*AddChatAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChatAdmin not implemented")
}
func (UnimplementedChatServerServiceServer) DelChatAdmin(context.Context, *DelChatAdminReq) (*DelChatAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelChatAdmin not implemented")
}
func (UnimplementedChatServerServiceServer) GetChatUserRole(context.Context, *GetChatUsersRoleReq) (*GetChatUsersRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatUserRole not implemented")
}
func (UnimplementedChatServerServiceServer) GetTwoUserChats(context.Context, *GetTwoUserChatsReq) (*GetTwoUserChatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwoUserChats not implemented")
}
func (UnimplementedChatServerServiceServer) UpGradeChat(context.Context, *UpGradeChatReq) (*UpGradeChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpGradeChat not implemented")
}
func (UnimplementedChatServerServiceServer) CreateChatLink(context.Context, *CreateChatLinkReq) (*CreateChatLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatLink not implemented")
}
func (UnimplementedChatServerServiceServer) SwitchInviteRule(context.Context, *SwitchInviteRuleReq) (*SwitchInviteRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchInviteRule not implemented")
}
func (UnimplementedChatServerServiceServer) CheckChatIsEncry(context.Context, *CheckChatIsEncryReq) (*CheckChatIsEncryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChatIsEncry not implemented")
}
func (UnimplementedChatServerServiceServer) GetUsersChats(context.Context, *GetUsersChatsReq) (*GetUsersChatsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersChats not implemented")
}
func (UnimplementedChatServerServiceServer) mustEmbedUnimplementedChatServerServiceServer() {}

// UnsafeChatServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServerServiceServer will
// result in compilation errors.
type UnsafeChatServerServiceServer interface {
	mustEmbedUnimplementedChatServerServiceServer()
}

func RegisterChatServerServiceServer(s grpc.ServiceRegistrar, srv ChatServerServiceServer) {
	s.RegisterService(&ChatServerService_ServiceDesc, srv)
}

func _ChatServerService_CreateNewChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).CreateNewChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/CreateNewChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).CreateNewChat(ctx, req.(*CreateChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetChatUsersIdById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatUsersIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetChatUsersIdById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/GetChatUsersIdById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetChatUsersIdById(ctx, req.(*GetChatUsersIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetChatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetChatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/GetChatInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetChatInfo(ctx, req.(*GetChatInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_AddChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChatMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).AddChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/AddChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).AddChatUser(ctx, req.(*AddChatMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_DelChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChatMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).DelChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/DelChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).DelChatUser(ctx, req.(*DelChatMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_EditChatPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChatPhotoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).EditChatPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/EditChatPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).EditChatPhoto(ctx, req.(*EditChatPhotoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_EditChatTittle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChatTittleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).EditChatTittle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/EditChatTittle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).EditChatTittle(ctx, req.(*EditChatTittleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_AddChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChatAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).AddChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/AddChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).AddChatAdmin(ctx, req.(*AddChatAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_DelChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChatAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).DelChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/DelChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).DelChatAdmin(ctx, req.(*DelChatAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetChatUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatUsersRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetChatUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/GetChatUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetChatUserRole(ctx, req.(*GetChatUsersRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetTwoUserChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwoUserChatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetTwoUserChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/GetTwoUserChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetTwoUserChats(ctx, req.(*GetTwoUserChatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_UpGradeChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpGradeChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).UpGradeChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/UpGradeChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).UpGradeChat(ctx, req.(*UpGradeChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_CreateChatLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).CreateChatLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/CreateChatLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).CreateChatLink(ctx, req.(*CreateChatLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_SwitchInviteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchInviteRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).SwitchInviteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/SwitchInviteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).SwitchInviteRule(ctx, req.(*SwitchInviteRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_CheckChatIsEncry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChatIsEncryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).CheckChatIsEncry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/CheckChatIsEncry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).CheckChatIsEncry(ctx, req.(*CheckChatIsEncryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServerService_GetUsersChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersChatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServiceServer).GetUsersChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.ChatServerService/GetUsersChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServiceServer).GetUsersChats(ctx, req.(*GetUsersChatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatServerService_ServiceDesc is the grpc.ServiceDesc for ChatServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infoserver.ChatServerService",
	HandlerType: (*ChatServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewChat",
			Handler:    _ChatServerService_CreateNewChat_Handler,
		},
		{
			MethodName: "GetChatUsersIdById",
			Handler:    _ChatServerService_GetChatUsersIdById_Handler,
		},
		{
			MethodName: "GetChatInfo",
			Handler:    _ChatServerService_GetChatInfo_Handler,
		},
		{
			MethodName: "AddChatUser",
			Handler:    _ChatServerService_AddChatUser_Handler,
		},
		{
			MethodName: "DelChatUser",
			Handler:    _ChatServerService_DelChatUser_Handler,
		},
		{
			MethodName: "EditChatPhoto",
			Handler:    _ChatServerService_EditChatPhoto_Handler,
		},
		{
			MethodName: "EditChatTittle",
			Handler:    _ChatServerService_EditChatTittle_Handler,
		},
		{
			MethodName: "AddChatAdmin",
			Handler:    _ChatServerService_AddChatAdmin_Handler,
		},
		{
			MethodName: "DelChatAdmin",
			Handler:    _ChatServerService_DelChatAdmin_Handler,
		},
		{
			MethodName: "GetChatUserRole",
			Handler:    _ChatServerService_GetChatUserRole_Handler,
		},
		{
			MethodName: "GetTwoUserChats",
			Handler:    _ChatServerService_GetTwoUserChats_Handler,
		},
		{
			MethodName: "UpGradeChat",
			Handler:    _ChatServerService_UpGradeChat_Handler,
		},
		{
			MethodName: "CreateChatLink",
			Handler:    _ChatServerService_CreateChatLink_Handler,
		},
		{
			MethodName: "SwitchInviteRule",
			Handler:    _ChatServerService_SwitchInviteRule_Handler,
		},
		{
			MethodName: "CheckChatIsEncry",
			Handler:    _ChatServerService_CheckChatIsEncry_Handler,
		},
		{
			MethodName: "GetUsersChats",
			Handler:    _ChatServerService_GetUsersChats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatservice.proto",
}
