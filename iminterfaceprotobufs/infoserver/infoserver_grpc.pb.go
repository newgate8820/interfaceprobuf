// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: infoserver.proto

package infoserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InfoServerServiceClient is the client API for InfoServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoServerServiceClient interface {
	// 发送短信验证码的接口(yuankan)
	SendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error)
	// resendcode的接口（目前处理的是直接发送短信验证码）(yuankan)
	ReSendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error)
	// 更改电话号码的发送短信(yuankan)
	SendChangePhoneCode(ctx context.Context, in *SendChangePhoneCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error)
	// 登录接口(yuankan和lxl)
	AuthSignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInOrReqitsterResult, error)
	// 注册用户的接口(yuankan和lxl)
	AuthSignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*AuthSignUpResult, error)
	// 更改电话号码的接口(yuankan和lxl)
	AccountChangePhone(ctx context.Context, in *ChangePhoneReq, opts ...grpc.CallOption) (*ChangePhoneResult, error)
	// 校验两步验证的密码(yuankan)
	AuthCheckPassWord(ctx context.Context, in *AuthCheckPasswdReq, opts ...grpc.CallOption) (*AuthCheckPasswdResult, error)
	// i导入authr (yuankan )
	AuthImPortAuthorizion(ctx context.Context, in *AuthImportAuthorizationReq, opts ...grpc.CallOption) (*AuthImportAuthorizationResult, error)
	// 导出auth
	AuthExportAuthorization(ctx context.Context, in *AuthExportAuthorizationReq, opts ...grpc.CallOption) (*AuthExportAuthorizationResult, error)
	// 恢复量保护验证的密码
	AuthRecoverPassword(ctx context.Context, in *AuthRecoverPasswdReq, opts ...grpc.CallOption) (*AuthRecoverPasswdResult, error)
	// 根据Username搜索人或者超级群、频道(lxl\tanyuzhou)
	ContactsSearch(ctx context.Context, in *ContactsSearchReq, opts ...grpc.CallOption) (*ContactsSearcResult, error)
	// getfulluser
	GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error)
	// 根据userName 来查找具体的人或者超级群
	ContactRevoleUserName(ctx context.Context, in *ContactRevoleUserNameReq, opts ...grpc.CallOption) (*ContactRevoleUserNameResult, error)
	// 忘记两步验证密码(yuankan)
	AuthRequestPasswordRecovery(ctx context.Context, in *AuthRequestPasswordRecoveryReq, opts ...grpc.CallOption) (*AuthRequestPasswordRecoveryResult, error)
	// 电话功能 对应的每一个步骤名称
	PhonecallAllocSession(ctx context.Context, in *PhonecallAllocSessionReq, opts ...grpc.CallOption) (*PhonecallAllocSessionResult, error)
	PhonecallOnReceivedCallCheck(ctx context.Context, in *PhonecallOnReceivedCallCheckReq, opts ...grpc.CallOption) (*PhonecallOnReceivedCallCheckResult, error)
	PhonecallOnAcceptCallUpdate(ctx context.Context, in *PhonecallOnAcceptCallUpdateReq, opts ...grpc.CallOption) (*PhonecallOnAcceptCallUpdateResult, error)
	PhonecallOnConfirmCallUpdate(ctx context.Context, in *PhonecallOnConfirmCallUpdateReq, opts ...grpc.CallOption) (*PhonecallOnConfirmCallUpdateResult, error)
	PhonecallOnDiscardCallUpdate(ctx context.Context, in *PhonecallOnDiscardCallUpdateReq, opts ...grpc.CallOption) (*PhonecallOnDiscardCallUpdateResult, error)
	PhonecallQueryEndpoints(ctx context.Context, in *PhonecallQueryEndpointsReq, opts ...grpc.CallOption) (*PhonecallQueryEndpointsResult, error)
	// 取消验证码
	AuthCancelCode(ctx context.Context, in *AuthCancelCodeReq, opts ...grpc.CallOption) (*AuthCancelCodeResult, error)
	// 虚拟号摇号
	CmdVirtualPhoneNumberGenerate(ctx context.Context, in *CmdVirtualPhoneNumberGenerateReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberGenerateResult, error)
	// 虚拟号激活指定的号
	CmdVirtualPhoneNumberSpecialGen(ctx context.Context, in *CmdVirtualPhoneNumberSpecialGenReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberSpecialGenResult, error)
	// 虚拟号绑定
	CmdVirtualPhoneNumberBindRealPhoneNumber(ctx context.Context, in *CmdVirtualPhoneNumberBindRealPhoneNumberReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberBindRealPhoneNumberResult, error)
	// 虚拟号解绑
	CmdVirtualPhoneNumberUnbindRealPhoneNumber(ctx context.Context, in *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberUnbindRealPhoneNumberResult, error)
	// 虚拟号信息查询
	CmdVirtualPhoneNumberQueryInfo(ctx context.Context, in *CmdVirtualPhoneNumberQueryInfoReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberQueryInfoResult, error)
	// 服务号绑定电话号码
	CmdSysPhoneNumberBindRealPhoneNumber(ctx context.Context, in *CmdSysPhoneNumberBindRealPhoneNumberReq, opts ...grpc.CallOption) (*CmdSysPhoneNumberBindRealPhoneNumberResult, error)
	// 阻止登陆
	CmdBlockSignIn(ctx context.Context, in *CmdBlockSignInReq, opts ...grpc.CallOption) (*CmdBlockSignInResult, error)
	// 解除禁止登陆
	CmdUnblockSignIn(ctx context.Context, in *CmdUnblockSignInReq, opts ...grpc.CallOption) (*CmdUnblockSignInResult, error)
	// 阻止注册
	CmdBlockSignUp(ctx context.Context, in *CmdBlockSignUpReq, opts ...grpc.CallOption) (*CmdBlockSignUpResult, error)
	// 解除禁止注册
	CmdUnblockSignUp(ctx context.Context, in *CmdUnblockSignUpReq, opts ...grpc.CallOption) (*CmdUnblockSignUpResult, error)
	// 语言包列表查询
	LangpackGetLanguages(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*LangpackList, error)
	// 语音包详细查询
	LangpackGetLangPack(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*Langpack, error)
	// 语言包修改确认提示语查询
	LangpackGetStrings(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*LangpackStringsList, error)
	// 语言包版本对比
	LangpackGetDifference(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*Langpack, error)
	// 根据UserName来获取用户信息或者群信息
	GetUserChannelByUserName(ctx context.Context, in *GetUserChannelByUserNameReq, opts ...grpc.CallOption) (*GetUserChannelByUserNameResult, error)
	// 删除电话号码当前所有authkey
	DeleteAuthKeys(ctx context.Context, in *DeleteAuthKeysReq, opts ...grpc.CallOption) (*DeleteAuthKeysResult, error)
	// get all useid in debuging
	QueryDebugingUserID(ctx context.Context, in *QueryDebugingUserIDReq, opts ...grpc.CallOption) (*QueryDebugingUserIDResult, error)
	// heartbeat
	Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatResult, error)
	// check device ban
	CheckDeviceBan(ctx context.Context, in *CheckDeviceBanReq, opts ...grpc.CallOption) (*CheckDeviceBanResult, error)
	// login and register with password
	AuthSignUpPassword(ctx context.Context, in *AuthSignUpPasswordReq, opts ...grpc.CallOption) (*AuthSignUpPasswordResult, error)
	AuthSignInPassword(ctx context.Context, in *AuthSignInPasswordReq, opts ...grpc.CallOption) (*AuthSignInPasswordResult, error)
	AccountResetPassword(ctx context.Context, in *AccountResetPasswordReq, opts ...grpc.CallOption) (*AccountResetPasswordResult, error)
	// ***************** simple im chat *********************
	GetFullUserSim(ctx context.Context, in *GetFullUserSimReq, opts ...grpc.CallOption) (*GetFullUserSimResult, error)
	// 设置密码发送短信验证码
	SendSetPasswordCode(ctx context.Context, in *SendSetPasswordPhoneCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error)
}

type infoServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoServerServiceClient(cc grpc.ClientConnInterface) InfoServerServiceClient {
	return &infoServerServiceClient{cc}
}

func (c *infoServerServiceClient) SendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error) {
	out := new(SendCodeResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/SendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) ReSendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error) {
	out := new(SendCodeResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/ReSendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) SendChangePhoneCode(ctx context.Context, in *SendChangePhoneCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error) {
	out := new(SendCodeResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/SendChangePhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthSignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInOrReqitsterResult, error) {
	out := new(SignInOrReqitsterResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/AuthSignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthSignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*AuthSignUpResult, error) {
	out := new(AuthSignUpResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/AuthSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AccountChangePhone(ctx context.Context, in *ChangePhoneReq, opts ...grpc.CallOption) (*ChangePhoneResult, error) {
	out := new(ChangePhoneResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/AccountChangePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthCheckPassWord(ctx context.Context, in *AuthCheckPasswdReq, opts ...grpc.CallOption) (*AuthCheckPasswdResult, error) {
	out := new(AuthCheckPasswdResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/AuthCheckPassWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthImPortAuthorizion(ctx context.Context, in *AuthImportAuthorizationReq, opts ...grpc.CallOption) (*AuthImportAuthorizationResult, error) {
	out := new(AuthImportAuthorizationResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/AuthImPortAuthorizion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthExportAuthorization(ctx context.Context, in *AuthExportAuthorizationReq, opts ...grpc.CallOption) (*AuthExportAuthorizationResult, error) {
	out := new(AuthExportAuthorizationResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/AuthExportAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthRecoverPassword(ctx context.Context, in *AuthRecoverPasswdReq, opts ...grpc.CallOption) (*AuthRecoverPasswdResult, error) {
	out := new(AuthRecoverPasswdResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/AuthRecoverPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) ContactsSearch(ctx context.Context, in *ContactsSearchReq, opts ...grpc.CallOption) (*ContactsSearcResult, error) {
	out := new(ContactsSearcResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/ContactsSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) GetFullUser(ctx context.Context, in *GetFullUserReq, opts ...grpc.CallOption) (*GetFullUserResult, error) {
	out := new(GetFullUserResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/GetFullUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) ContactRevoleUserName(ctx context.Context, in *ContactRevoleUserNameReq, opts ...grpc.CallOption) (*ContactRevoleUserNameResult, error) {
	out := new(ContactRevoleUserNameResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/ContactRevoleUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthRequestPasswordRecovery(ctx context.Context, in *AuthRequestPasswordRecoveryReq, opts ...grpc.CallOption) (*AuthRequestPasswordRecoveryResult, error) {
	out := new(AuthRequestPasswordRecoveryResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/AuthRequestPasswordRecovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) PhonecallAllocSession(ctx context.Context, in *PhonecallAllocSessionReq, opts ...grpc.CallOption) (*PhonecallAllocSessionResult, error) {
	out := new(PhonecallAllocSessionResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/PhonecallAllocSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) PhonecallOnReceivedCallCheck(ctx context.Context, in *PhonecallOnReceivedCallCheckReq, opts ...grpc.CallOption) (*PhonecallOnReceivedCallCheckResult, error) {
	out := new(PhonecallOnReceivedCallCheckResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/PhonecallOnReceivedCallCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) PhonecallOnAcceptCallUpdate(ctx context.Context, in *PhonecallOnAcceptCallUpdateReq, opts ...grpc.CallOption) (*PhonecallOnAcceptCallUpdateResult, error) {
	out := new(PhonecallOnAcceptCallUpdateResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/PhonecallOnAcceptCallUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) PhonecallOnConfirmCallUpdate(ctx context.Context, in *PhonecallOnConfirmCallUpdateReq, opts ...grpc.CallOption) (*PhonecallOnConfirmCallUpdateResult, error) {
	out := new(PhonecallOnConfirmCallUpdateResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/PhonecallOnConfirmCallUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) PhonecallOnDiscardCallUpdate(ctx context.Context, in *PhonecallOnDiscardCallUpdateReq, opts ...grpc.CallOption) (*PhonecallOnDiscardCallUpdateResult, error) {
	out := new(PhonecallOnDiscardCallUpdateResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/PhonecallOnDiscardCallUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) PhonecallQueryEndpoints(ctx context.Context, in *PhonecallQueryEndpointsReq, opts ...grpc.CallOption) (*PhonecallQueryEndpointsResult, error) {
	out := new(PhonecallQueryEndpointsResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/PhonecallQueryEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthCancelCode(ctx context.Context, in *AuthCancelCodeReq, opts ...grpc.CallOption) (*AuthCancelCodeResult, error) {
	out := new(AuthCancelCodeResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/AuthCancelCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdVirtualPhoneNumberGenerate(ctx context.Context, in *CmdVirtualPhoneNumberGenerateReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberGenerateResult, error) {
	out := new(CmdVirtualPhoneNumberGenerateResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/CmdVirtualPhoneNumberGenerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdVirtualPhoneNumberSpecialGen(ctx context.Context, in *CmdVirtualPhoneNumberSpecialGenReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberSpecialGenResult, error) {
	out := new(CmdVirtualPhoneNumberSpecialGenResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/CmdVirtualPhoneNumberSpecialGen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdVirtualPhoneNumberBindRealPhoneNumber(ctx context.Context, in *CmdVirtualPhoneNumberBindRealPhoneNumberReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberBindRealPhoneNumberResult, error) {
	out := new(CmdVirtualPhoneNumberBindRealPhoneNumberResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/CmdVirtualPhoneNumberBindRealPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdVirtualPhoneNumberUnbindRealPhoneNumber(ctx context.Context, in *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberUnbindRealPhoneNumberResult, error) {
	out := new(CmdVirtualPhoneNumberUnbindRealPhoneNumberResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/CmdVirtualPhoneNumberUnbindRealPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdVirtualPhoneNumberQueryInfo(ctx context.Context, in *CmdVirtualPhoneNumberQueryInfoReq, opts ...grpc.CallOption) (*CmdVirtualPhoneNumberQueryInfoResult, error) {
	out := new(CmdVirtualPhoneNumberQueryInfoResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/CmdVirtualPhoneNumberQueryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdSysPhoneNumberBindRealPhoneNumber(ctx context.Context, in *CmdSysPhoneNumberBindRealPhoneNumberReq, opts ...grpc.CallOption) (*CmdSysPhoneNumberBindRealPhoneNumberResult, error) {
	out := new(CmdSysPhoneNumberBindRealPhoneNumberResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/CmdSysPhoneNumberBindRealPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdBlockSignIn(ctx context.Context, in *CmdBlockSignInReq, opts ...grpc.CallOption) (*CmdBlockSignInResult, error) {
	out := new(CmdBlockSignInResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/CmdBlockSignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdUnblockSignIn(ctx context.Context, in *CmdUnblockSignInReq, opts ...grpc.CallOption) (*CmdUnblockSignInResult, error) {
	out := new(CmdUnblockSignInResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/CmdUnblockSignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdBlockSignUp(ctx context.Context, in *CmdBlockSignUpReq, opts ...grpc.CallOption) (*CmdBlockSignUpResult, error) {
	out := new(CmdBlockSignUpResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/CmdBlockSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CmdUnblockSignUp(ctx context.Context, in *CmdUnblockSignUpReq, opts ...grpc.CallOption) (*CmdUnblockSignUpResult, error) {
	out := new(CmdUnblockSignUpResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/CmdUnblockSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) LangpackGetLanguages(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*LangpackList, error) {
	out := new(LangpackList)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/LangpackGetLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) LangpackGetLangPack(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*Langpack, error) {
	out := new(Langpack)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/LangpackGetLangPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) LangpackGetStrings(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*LangpackStringsList, error) {
	out := new(LangpackStringsList)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/LangpackGetStrings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) LangpackGetDifference(ctx context.Context, in *LangPacktReq, opts ...grpc.CallOption) (*Langpack, error) {
	out := new(Langpack)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/LangpackGetDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) GetUserChannelByUserName(ctx context.Context, in *GetUserChannelByUserNameReq, opts ...grpc.CallOption) (*GetUserChannelByUserNameResult, error) {
	out := new(GetUserChannelByUserNameResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/GetUserChannelByUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) DeleteAuthKeys(ctx context.Context, in *DeleteAuthKeysReq, opts ...grpc.CallOption) (*DeleteAuthKeysResult, error) {
	out := new(DeleteAuthKeysResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/DeleteAuthKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) QueryDebugingUserID(ctx context.Context, in *QueryDebugingUserIDReq, opts ...grpc.CallOption) (*QueryDebugingUserIDResult, error) {
	out := new(QueryDebugingUserIDResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/QueryDebugingUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatResult, error) {
	out := new(HeartbeatResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) CheckDeviceBan(ctx context.Context, in *CheckDeviceBanReq, opts ...grpc.CallOption) (*CheckDeviceBanResult, error) {
	out := new(CheckDeviceBanResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/CheckDeviceBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthSignUpPassword(ctx context.Context, in *AuthSignUpPasswordReq, opts ...grpc.CallOption) (*AuthSignUpPasswordResult, error) {
	out := new(AuthSignUpPasswordResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/AuthSignUpPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AuthSignInPassword(ctx context.Context, in *AuthSignInPasswordReq, opts ...grpc.CallOption) (*AuthSignInPasswordResult, error) {
	out := new(AuthSignInPasswordResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/AuthSignInPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) AccountResetPassword(ctx context.Context, in *AccountResetPasswordReq, opts ...grpc.CallOption) (*AccountResetPasswordResult, error) {
	out := new(AccountResetPasswordResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/AccountResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) GetFullUserSim(ctx context.Context, in *GetFullUserSimReq, opts ...grpc.CallOption) (*GetFullUserSimResult, error) {
	out := new(GetFullUserSimResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/GetFullUserSim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerServiceClient) SendSetPasswordCode(ctx context.Context, in *SendSetPasswordPhoneCodeReq, opts ...grpc.CallOption) (*SendCodeResult, error) {
	out := new(SendCodeResult)
	err := c.cc.Invoke(ctx, "/infoserver.InfoServerService/SendSetPasswordCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServerServiceServer is the server API for InfoServerService service.
// All implementations must embed UnimplementedInfoServerServiceServer
// for forward compatibility
type InfoServerServiceServer interface {
	// 发送短信验证码的接口(yuankan)
	SendCode(context.Context, *SendCodeReq) (*SendCodeResult, error)
	// resendcode的接口（目前处理的是直接发送短信验证码）(yuankan)
	ReSendCode(context.Context, *SendCodeReq) (*SendCodeResult, error)
	// 更改电话号码的发送短信(yuankan)
	SendChangePhoneCode(context.Context, *SendChangePhoneCodeReq) (*SendCodeResult, error)
	// 登录接口(yuankan和lxl)
	AuthSignIn(context.Context, *SignInReq) (*SignInOrReqitsterResult, error)
	// 注册用户的接口(yuankan和lxl)
	AuthSignUp(context.Context, *SignUpReq) (*AuthSignUpResult, error)
	// 更改电话号码的接口(yuankan和lxl)
	AccountChangePhone(context.Context, *ChangePhoneReq) (*ChangePhoneResult, error)
	// 校验两步验证的密码(yuankan)
	AuthCheckPassWord(context.Context, *AuthCheckPasswdReq) (*AuthCheckPasswdResult, error)
	// i导入authr (yuankan )
	AuthImPortAuthorizion(context.Context, *AuthImportAuthorizationReq) (*AuthImportAuthorizationResult, error)
	// 导出auth
	AuthExportAuthorization(context.Context, *AuthExportAuthorizationReq) (*AuthExportAuthorizationResult, error)
	// 恢复量保护验证的密码
	AuthRecoverPassword(context.Context, *AuthRecoverPasswdReq) (*AuthRecoverPasswdResult, error)
	// 根据Username搜索人或者超级群、频道(lxl\tanyuzhou)
	ContactsSearch(context.Context, *ContactsSearchReq) (*ContactsSearcResult, error)
	// getfulluser
	GetFullUser(context.Context, *GetFullUserReq) (*GetFullUserResult, error)
	// 根据userName 来查找具体的人或者超级群
	ContactRevoleUserName(context.Context, *ContactRevoleUserNameReq) (*ContactRevoleUserNameResult, error)
	// 忘记两步验证密码(yuankan)
	AuthRequestPasswordRecovery(context.Context, *AuthRequestPasswordRecoveryReq) (*AuthRequestPasswordRecoveryResult, error)
	// 电话功能 对应的每一个步骤名称
	PhonecallAllocSession(context.Context, *PhonecallAllocSessionReq) (*PhonecallAllocSessionResult, error)
	PhonecallOnReceivedCallCheck(context.Context, *PhonecallOnReceivedCallCheckReq) (*PhonecallOnReceivedCallCheckResult, error)
	PhonecallOnAcceptCallUpdate(context.Context, *PhonecallOnAcceptCallUpdateReq) (*PhonecallOnAcceptCallUpdateResult, error)
	PhonecallOnConfirmCallUpdate(context.Context, *PhonecallOnConfirmCallUpdateReq) (*PhonecallOnConfirmCallUpdateResult, error)
	PhonecallOnDiscardCallUpdate(context.Context, *PhonecallOnDiscardCallUpdateReq) (*PhonecallOnDiscardCallUpdateResult, error)
	PhonecallQueryEndpoints(context.Context, *PhonecallQueryEndpointsReq) (*PhonecallQueryEndpointsResult, error)
	// 取消验证码
	AuthCancelCode(context.Context, *AuthCancelCodeReq) (*AuthCancelCodeResult, error)
	// 虚拟号摇号
	CmdVirtualPhoneNumberGenerate(context.Context, *CmdVirtualPhoneNumberGenerateReq) (*CmdVirtualPhoneNumberGenerateResult, error)
	// 虚拟号激活指定的号
	CmdVirtualPhoneNumberSpecialGen(context.Context, *CmdVirtualPhoneNumberSpecialGenReq) (*CmdVirtualPhoneNumberSpecialGenResult, error)
	// 虚拟号绑定
	CmdVirtualPhoneNumberBindRealPhoneNumber(context.Context, *CmdVirtualPhoneNumberBindRealPhoneNumberReq) (*CmdVirtualPhoneNumberBindRealPhoneNumberResult, error)
	// 虚拟号解绑
	CmdVirtualPhoneNumberUnbindRealPhoneNumber(context.Context, *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) (*CmdVirtualPhoneNumberUnbindRealPhoneNumberResult, error)
	// 虚拟号信息查询
	CmdVirtualPhoneNumberQueryInfo(context.Context, *CmdVirtualPhoneNumberQueryInfoReq) (*CmdVirtualPhoneNumberQueryInfoResult, error)
	// 服务号绑定电话号码
	CmdSysPhoneNumberBindRealPhoneNumber(context.Context, *CmdSysPhoneNumberBindRealPhoneNumberReq) (*CmdSysPhoneNumberBindRealPhoneNumberResult, error)
	// 阻止登陆
	CmdBlockSignIn(context.Context, *CmdBlockSignInReq) (*CmdBlockSignInResult, error)
	// 解除禁止登陆
	CmdUnblockSignIn(context.Context, *CmdUnblockSignInReq) (*CmdUnblockSignInResult, error)
	// 阻止注册
	CmdBlockSignUp(context.Context, *CmdBlockSignUpReq) (*CmdBlockSignUpResult, error)
	// 解除禁止注册
	CmdUnblockSignUp(context.Context, *CmdUnblockSignUpReq) (*CmdUnblockSignUpResult, error)
	// 语言包列表查询
	LangpackGetLanguages(context.Context, *LangPacktReq) (*LangpackList, error)
	// 语音包详细查询
	LangpackGetLangPack(context.Context, *LangPacktReq) (*Langpack, error)
	// 语言包修改确认提示语查询
	LangpackGetStrings(context.Context, *LangPacktReq) (*LangpackStringsList, error)
	// 语言包版本对比
	LangpackGetDifference(context.Context, *LangPacktReq) (*Langpack, error)
	// 根据UserName来获取用户信息或者群信息
	GetUserChannelByUserName(context.Context, *GetUserChannelByUserNameReq) (*GetUserChannelByUserNameResult, error)
	// 删除电话号码当前所有authkey
	DeleteAuthKeys(context.Context, *DeleteAuthKeysReq) (*DeleteAuthKeysResult, error)
	// get all useid in debuging
	QueryDebugingUserID(context.Context, *QueryDebugingUserIDReq) (*QueryDebugingUserIDResult, error)
	// heartbeat
	Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatResult, error)
	// check device ban
	CheckDeviceBan(context.Context, *CheckDeviceBanReq) (*CheckDeviceBanResult, error)
	// login and register with password
	AuthSignUpPassword(context.Context, *AuthSignUpPasswordReq) (*AuthSignUpPasswordResult, error)
	AuthSignInPassword(context.Context, *AuthSignInPasswordReq) (*AuthSignInPasswordResult, error)
	AccountResetPassword(context.Context, *AccountResetPasswordReq) (*AccountResetPasswordResult, error)
	// ***************** simple im chat *********************
	GetFullUserSim(context.Context, *GetFullUserSimReq) (*GetFullUserSimResult, error)
	// 设置密码发送短信验证码
	SendSetPasswordCode(context.Context, *SendSetPasswordPhoneCodeReq) (*SendCodeResult, error)
	mustEmbedUnimplementedInfoServerServiceServer()
}

// UnimplementedInfoServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInfoServerServiceServer struct {
}

func (UnimplementedInfoServerServiceServer) SendCode(context.Context, *SendCodeReq) (*SendCodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCode not implemented")
}
func (UnimplementedInfoServerServiceServer) ReSendCode(context.Context, *SendCodeReq) (*SendCodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReSendCode not implemented")
}
func (UnimplementedInfoServerServiceServer) SendChangePhoneCode(context.Context, *SendChangePhoneCodeReq) (*SendCodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChangePhoneCode not implemented")
}
func (UnimplementedInfoServerServiceServer) AuthSignIn(context.Context, *SignInReq) (*SignInOrReqitsterResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignIn not implemented")
}
func (UnimplementedInfoServerServiceServer) AuthSignUp(context.Context, *SignUpReq) (*AuthSignUpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignUp not implemented")
}
func (UnimplementedInfoServerServiceServer) AccountChangePhone(context.Context, *ChangePhoneReq) (*ChangePhoneResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountChangePhone not implemented")
}
func (UnimplementedInfoServerServiceServer) AuthCheckPassWord(context.Context, *AuthCheckPasswdReq) (*AuthCheckPasswdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCheckPassWord not implemented")
}
func (UnimplementedInfoServerServiceServer) AuthImPortAuthorizion(context.Context, *AuthImportAuthorizationReq) (*AuthImportAuthorizationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthImPortAuthorizion not implemented")
}
func (UnimplementedInfoServerServiceServer) AuthExportAuthorization(context.Context, *AuthExportAuthorizationReq) (*AuthExportAuthorizationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthExportAuthorization not implemented")
}
func (UnimplementedInfoServerServiceServer) AuthRecoverPassword(context.Context, *AuthRecoverPasswdReq) (*AuthRecoverPasswdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRecoverPassword not implemented")
}
func (UnimplementedInfoServerServiceServer) ContactsSearch(context.Context, *ContactsSearchReq) (*ContactsSearcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsSearch not implemented")
}
func (UnimplementedInfoServerServiceServer) GetFullUser(context.Context, *GetFullUserReq) (*GetFullUserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullUser not implemented")
}
func (UnimplementedInfoServerServiceServer) ContactRevoleUserName(context.Context, *ContactRevoleUserNameReq) (*ContactRevoleUserNameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRevoleUserName not implemented")
}
func (UnimplementedInfoServerServiceServer) AuthRequestPasswordRecovery(context.Context, *AuthRequestPasswordRecoveryReq) (*AuthRequestPasswordRecoveryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRequestPasswordRecovery not implemented")
}
func (UnimplementedInfoServerServiceServer) PhonecallAllocSession(context.Context, *PhonecallAllocSessionReq) (*PhonecallAllocSessionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhonecallAllocSession not implemented")
}
func (UnimplementedInfoServerServiceServer) PhonecallOnReceivedCallCheck(context.Context, *PhonecallOnReceivedCallCheckReq) (*PhonecallOnReceivedCallCheckResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhonecallOnReceivedCallCheck not implemented")
}
func (UnimplementedInfoServerServiceServer) PhonecallOnAcceptCallUpdate(context.Context, *PhonecallOnAcceptCallUpdateReq) (*PhonecallOnAcceptCallUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhonecallOnAcceptCallUpdate not implemented")
}
func (UnimplementedInfoServerServiceServer) PhonecallOnConfirmCallUpdate(context.Context, *PhonecallOnConfirmCallUpdateReq) (*PhonecallOnConfirmCallUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhonecallOnConfirmCallUpdate not implemented")
}
func (UnimplementedInfoServerServiceServer) PhonecallOnDiscardCallUpdate(context.Context, *PhonecallOnDiscardCallUpdateReq) (*PhonecallOnDiscardCallUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhonecallOnDiscardCallUpdate not implemented")
}
func (UnimplementedInfoServerServiceServer) PhonecallQueryEndpoints(context.Context, *PhonecallQueryEndpointsReq) (*PhonecallQueryEndpointsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhonecallQueryEndpoints not implemented")
}
func (UnimplementedInfoServerServiceServer) AuthCancelCode(context.Context, *AuthCancelCodeReq) (*AuthCancelCodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCancelCode not implemented")
}
func (UnimplementedInfoServerServiceServer) CmdVirtualPhoneNumberGenerate(context.Context, *CmdVirtualPhoneNumberGenerateReq) (*CmdVirtualPhoneNumberGenerateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdVirtualPhoneNumberGenerate not implemented")
}
func (UnimplementedInfoServerServiceServer) CmdVirtualPhoneNumberSpecialGen(context.Context, *CmdVirtualPhoneNumberSpecialGenReq) (*CmdVirtualPhoneNumberSpecialGenResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdVirtualPhoneNumberSpecialGen not implemented")
}
func (UnimplementedInfoServerServiceServer) CmdVirtualPhoneNumberBindRealPhoneNumber(context.Context, *CmdVirtualPhoneNumberBindRealPhoneNumberReq) (*CmdVirtualPhoneNumberBindRealPhoneNumberResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdVirtualPhoneNumberBindRealPhoneNumber not implemented")
}
func (UnimplementedInfoServerServiceServer) CmdVirtualPhoneNumberUnbindRealPhoneNumber(context.Context, *CmdVirtualPhoneNumberUnbindRealPhoneNumberReq) (*CmdVirtualPhoneNumberUnbindRealPhoneNumberResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdVirtualPhoneNumberUnbindRealPhoneNumber not implemented")
}
func (UnimplementedInfoServerServiceServer) CmdVirtualPhoneNumberQueryInfo(context.Context, *CmdVirtualPhoneNumberQueryInfoReq) (*CmdVirtualPhoneNumberQueryInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdVirtualPhoneNumberQueryInfo not implemented")
}
func (UnimplementedInfoServerServiceServer) CmdSysPhoneNumberBindRealPhoneNumber(context.Context, *CmdSysPhoneNumberBindRealPhoneNumberReq) (*CmdSysPhoneNumberBindRealPhoneNumberResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdSysPhoneNumberBindRealPhoneNumber not implemented")
}
func (UnimplementedInfoServerServiceServer) CmdBlockSignIn(context.Context, *CmdBlockSignInReq) (*CmdBlockSignInResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdBlockSignIn not implemented")
}
func (UnimplementedInfoServerServiceServer) CmdUnblockSignIn(context.Context, *CmdUnblockSignInReq) (*CmdUnblockSignInResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdUnblockSignIn not implemented")
}
func (UnimplementedInfoServerServiceServer) CmdBlockSignUp(context.Context, *CmdBlockSignUpReq) (*CmdBlockSignUpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdBlockSignUp not implemented")
}
func (UnimplementedInfoServerServiceServer) CmdUnblockSignUp(context.Context, *CmdUnblockSignUpReq) (*CmdUnblockSignUpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdUnblockSignUp not implemented")
}
func (UnimplementedInfoServerServiceServer) LangpackGetLanguages(context.Context, *LangPacktReq) (*LangpackList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLanguages not implemented")
}
func (UnimplementedInfoServerServiceServer) LangpackGetLangPack(context.Context, *LangPacktReq) (*Langpack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLangPack not implemented")
}
func (UnimplementedInfoServerServiceServer) LangpackGetStrings(context.Context, *LangPacktReq) (*LangpackStringsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetStrings not implemented")
}
func (UnimplementedInfoServerServiceServer) LangpackGetDifference(context.Context, *LangPacktReq) (*Langpack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetDifference not implemented")
}
func (UnimplementedInfoServerServiceServer) GetUserChannelByUserName(context.Context, *GetUserChannelByUserNameReq) (*GetUserChannelByUserNameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChannelByUserName not implemented")
}
func (UnimplementedInfoServerServiceServer) DeleteAuthKeys(context.Context, *DeleteAuthKeysReq) (*DeleteAuthKeysResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthKeys not implemented")
}
func (UnimplementedInfoServerServiceServer) QueryDebugingUserID(context.Context, *QueryDebugingUserIDReq) (*QueryDebugingUserIDResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDebugingUserID not implemented")
}
func (UnimplementedInfoServerServiceServer) Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedInfoServerServiceServer) CheckDeviceBan(context.Context, *CheckDeviceBanReq) (*CheckDeviceBanResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDeviceBan not implemented")
}
func (UnimplementedInfoServerServiceServer) AuthSignUpPassword(context.Context, *AuthSignUpPasswordReq) (*AuthSignUpPasswordResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignUpPassword not implemented")
}
func (UnimplementedInfoServerServiceServer) AuthSignInPassword(context.Context, *AuthSignInPasswordReq) (*AuthSignInPasswordResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignInPassword not implemented")
}
func (UnimplementedInfoServerServiceServer) AccountResetPassword(context.Context, *AccountResetPasswordReq) (*AccountResetPasswordResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetPassword not implemented")
}
func (UnimplementedInfoServerServiceServer) GetFullUserSim(context.Context, *GetFullUserSimReq) (*GetFullUserSimResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullUserSim not implemented")
}
func (UnimplementedInfoServerServiceServer) SendSetPasswordCode(context.Context, *SendSetPasswordPhoneCodeReq) (*SendCodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSetPasswordCode not implemented")
}
func (UnimplementedInfoServerServiceServer) mustEmbedUnimplementedInfoServerServiceServer() {}

// UnsafeInfoServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServerServiceServer will
// result in compilation errors.
type UnsafeInfoServerServiceServer interface {
	mustEmbedUnimplementedInfoServerServiceServer()
}

func RegisterInfoServerServiceServer(s grpc.ServiceRegistrar, srv InfoServerServiceServer) {
	s.RegisterService(&InfoServerService_ServiceDesc, srv)
}

func _InfoServerService_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/SendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).SendCode(ctx, req.(*SendCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_ReSendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).ReSendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/ReSendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).ReSendCode(ctx, req.(*SendCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_SendChangePhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChangePhoneCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).SendChangePhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/SendChangePhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).SendChangePhoneCode(ctx, req.(*SendChangePhoneCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthSignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthSignIn(ctx, req.(*SignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthSignUp(ctx, req.(*SignUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AccountChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AccountChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AccountChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AccountChangePhone(ctx, req.(*ChangePhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthCheckPassWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCheckPasswdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthCheckPassWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthCheckPassWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthCheckPassWord(ctx, req.(*AuthCheckPasswdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthImPortAuthorizion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthImportAuthorizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthImPortAuthorizion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthImPortAuthorizion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthImPortAuthorizion(ctx, req.(*AuthImportAuthorizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthExportAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthExportAuthorizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthExportAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthExportAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthExportAuthorization(ctx, req.(*AuthExportAuthorizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthRecoverPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRecoverPasswdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthRecoverPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthRecoverPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthRecoverPassword(ctx, req.(*AuthRecoverPasswdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_ContactsSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).ContactsSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/ContactsSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).ContactsSearch(ctx, req.(*ContactsSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_GetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).GetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/GetFullUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).GetFullUser(ctx, req.(*GetFullUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_ContactRevoleUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRevoleUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).ContactRevoleUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/ContactRevoleUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).ContactRevoleUserName(ctx, req.(*ContactRevoleUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthRequestPasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequestPasswordRecoveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthRequestPasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthRequestPasswordRecovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthRequestPasswordRecovery(ctx, req.(*AuthRequestPasswordRecoveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_PhonecallAllocSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonecallAllocSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).PhonecallAllocSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/PhonecallAllocSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).PhonecallAllocSession(ctx, req.(*PhonecallAllocSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_PhonecallOnReceivedCallCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonecallOnReceivedCallCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).PhonecallOnReceivedCallCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/PhonecallOnReceivedCallCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).PhonecallOnReceivedCallCheck(ctx, req.(*PhonecallOnReceivedCallCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_PhonecallOnAcceptCallUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonecallOnAcceptCallUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).PhonecallOnAcceptCallUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/PhonecallOnAcceptCallUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).PhonecallOnAcceptCallUpdate(ctx, req.(*PhonecallOnAcceptCallUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_PhonecallOnConfirmCallUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonecallOnConfirmCallUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).PhonecallOnConfirmCallUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/PhonecallOnConfirmCallUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).PhonecallOnConfirmCallUpdate(ctx, req.(*PhonecallOnConfirmCallUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_PhonecallOnDiscardCallUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonecallOnDiscardCallUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).PhonecallOnDiscardCallUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/PhonecallOnDiscardCallUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).PhonecallOnDiscardCallUpdate(ctx, req.(*PhonecallOnDiscardCallUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_PhonecallQueryEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonecallQueryEndpointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).PhonecallQueryEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/PhonecallQueryEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).PhonecallQueryEndpoints(ctx, req.(*PhonecallQueryEndpointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthCancelCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCancelCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthCancelCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthCancelCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthCancelCode(ctx, req.(*AuthCancelCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdVirtualPhoneNumberGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdVirtualPhoneNumberGenerateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdVirtualPhoneNumberGenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberGenerate(ctx, req.(*CmdVirtualPhoneNumberGenerateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdVirtualPhoneNumberSpecialGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdVirtualPhoneNumberSpecialGenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberSpecialGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdVirtualPhoneNumberSpecialGen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberSpecialGen(ctx, req.(*CmdVirtualPhoneNumberSpecialGenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdVirtualPhoneNumberBindRealPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdVirtualPhoneNumberBindRealPhoneNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberBindRealPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdVirtualPhoneNumberBindRealPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberBindRealPhoneNumber(ctx, req.(*CmdVirtualPhoneNumberBindRealPhoneNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdVirtualPhoneNumberUnbindRealPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdVirtualPhoneNumberUnbindRealPhoneNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberUnbindRealPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdVirtualPhoneNumberUnbindRealPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberUnbindRealPhoneNumber(ctx, req.(*CmdVirtualPhoneNumberUnbindRealPhoneNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdVirtualPhoneNumberQueryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdVirtualPhoneNumberQueryInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberQueryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdVirtualPhoneNumberQueryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdVirtualPhoneNumberQueryInfo(ctx, req.(*CmdVirtualPhoneNumberQueryInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdSysPhoneNumberBindRealPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdSysPhoneNumberBindRealPhoneNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdSysPhoneNumberBindRealPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdSysPhoneNumberBindRealPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdSysPhoneNumberBindRealPhoneNumber(ctx, req.(*CmdSysPhoneNumberBindRealPhoneNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdBlockSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdBlockSignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdBlockSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdBlockSignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdBlockSignIn(ctx, req.(*CmdBlockSignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdUnblockSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdUnblockSignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdUnblockSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdUnblockSignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdUnblockSignIn(ctx, req.(*CmdUnblockSignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdBlockSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdBlockSignUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdBlockSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdBlockSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdBlockSignUp(ctx, req.(*CmdBlockSignUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CmdUnblockSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdUnblockSignUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CmdUnblockSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CmdUnblockSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CmdUnblockSignUp(ctx, req.(*CmdUnblockSignUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_LangpackGetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LangPacktReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).LangpackGetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/LangpackGetLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).LangpackGetLanguages(ctx, req.(*LangPacktReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_LangpackGetLangPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LangPacktReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).LangpackGetLangPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/LangpackGetLangPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).LangpackGetLangPack(ctx, req.(*LangPacktReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_LangpackGetStrings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LangPacktReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).LangpackGetStrings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/LangpackGetStrings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).LangpackGetStrings(ctx, req.(*LangPacktReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_LangpackGetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LangPacktReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).LangpackGetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/LangpackGetDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).LangpackGetDifference(ctx, req.(*LangPacktReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_GetUserChannelByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChannelByUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).GetUserChannelByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/GetUserChannelByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).GetUserChannelByUserName(ctx, req.(*GetUserChannelByUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_DeleteAuthKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).DeleteAuthKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/DeleteAuthKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).DeleteAuthKeys(ctx, req.(*DeleteAuthKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_QueryDebugingUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDebugingUserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).QueryDebugingUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/QueryDebugingUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).QueryDebugingUserID(ctx, req.(*QueryDebugingUserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).Heartbeat(ctx, req.(*HeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_CheckDeviceBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDeviceBanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).CheckDeviceBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/CheckDeviceBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).CheckDeviceBan(ctx, req.(*CheckDeviceBanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthSignUpPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthSignUpPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthSignUpPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthSignUpPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthSignUpPassword(ctx, req.(*AuthSignUpPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AuthSignInPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthSignInPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AuthSignInPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AuthSignInPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AuthSignInPassword(ctx, req.(*AuthSignInPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_AccountResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).AccountResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/AccountResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).AccountResetPassword(ctx, req.(*AccountResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_GetFullUserSim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullUserSimReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).GetFullUserSim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/GetFullUserSim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).GetFullUserSim(ctx, req.(*GetFullUserSimReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServerService_SendSetPasswordCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSetPasswordPhoneCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServiceServer).SendSetPasswordCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.InfoServerService/SendSetPasswordCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServiceServer).SendSetPasswordCode(ctx, req.(*SendSetPasswordPhoneCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InfoServerService_ServiceDesc is the grpc.ServiceDesc for InfoServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfoServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infoserver.InfoServerService",
	HandlerType: (*InfoServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCode",
			Handler:    _InfoServerService_SendCode_Handler,
		},
		{
			MethodName: "ReSendCode",
			Handler:    _InfoServerService_ReSendCode_Handler,
		},
		{
			MethodName: "SendChangePhoneCode",
			Handler:    _InfoServerService_SendChangePhoneCode_Handler,
		},
		{
			MethodName: "AuthSignIn",
			Handler:    _InfoServerService_AuthSignIn_Handler,
		},
		{
			MethodName: "AuthSignUp",
			Handler:    _InfoServerService_AuthSignUp_Handler,
		},
		{
			MethodName: "AccountChangePhone",
			Handler:    _InfoServerService_AccountChangePhone_Handler,
		},
		{
			MethodName: "AuthCheckPassWord",
			Handler:    _InfoServerService_AuthCheckPassWord_Handler,
		},
		{
			MethodName: "AuthImPortAuthorizion",
			Handler:    _InfoServerService_AuthImPortAuthorizion_Handler,
		},
		{
			MethodName: "AuthExportAuthorization",
			Handler:    _InfoServerService_AuthExportAuthorization_Handler,
		},
		{
			MethodName: "AuthRecoverPassword",
			Handler:    _InfoServerService_AuthRecoverPassword_Handler,
		},
		{
			MethodName: "ContactsSearch",
			Handler:    _InfoServerService_ContactsSearch_Handler,
		},
		{
			MethodName: "GetFullUser",
			Handler:    _InfoServerService_GetFullUser_Handler,
		},
		{
			MethodName: "ContactRevoleUserName",
			Handler:    _InfoServerService_ContactRevoleUserName_Handler,
		},
		{
			MethodName: "AuthRequestPasswordRecovery",
			Handler:    _InfoServerService_AuthRequestPasswordRecovery_Handler,
		},
		{
			MethodName: "PhonecallAllocSession",
			Handler:    _InfoServerService_PhonecallAllocSession_Handler,
		},
		{
			MethodName: "PhonecallOnReceivedCallCheck",
			Handler:    _InfoServerService_PhonecallOnReceivedCallCheck_Handler,
		},
		{
			MethodName: "PhonecallOnAcceptCallUpdate",
			Handler:    _InfoServerService_PhonecallOnAcceptCallUpdate_Handler,
		},
		{
			MethodName: "PhonecallOnConfirmCallUpdate",
			Handler:    _InfoServerService_PhonecallOnConfirmCallUpdate_Handler,
		},
		{
			MethodName: "PhonecallOnDiscardCallUpdate",
			Handler:    _InfoServerService_PhonecallOnDiscardCallUpdate_Handler,
		},
		{
			MethodName: "PhonecallQueryEndpoints",
			Handler:    _InfoServerService_PhonecallQueryEndpoints_Handler,
		},
		{
			MethodName: "AuthCancelCode",
			Handler:    _InfoServerService_AuthCancelCode_Handler,
		},
		{
			MethodName: "CmdVirtualPhoneNumberGenerate",
			Handler:    _InfoServerService_CmdVirtualPhoneNumberGenerate_Handler,
		},
		{
			MethodName: "CmdVirtualPhoneNumberSpecialGen",
			Handler:    _InfoServerService_CmdVirtualPhoneNumberSpecialGen_Handler,
		},
		{
			MethodName: "CmdVirtualPhoneNumberBindRealPhoneNumber",
			Handler:    _InfoServerService_CmdVirtualPhoneNumberBindRealPhoneNumber_Handler,
		},
		{
			MethodName: "CmdVirtualPhoneNumberUnbindRealPhoneNumber",
			Handler:    _InfoServerService_CmdVirtualPhoneNumberUnbindRealPhoneNumber_Handler,
		},
		{
			MethodName: "CmdVirtualPhoneNumberQueryInfo",
			Handler:    _InfoServerService_CmdVirtualPhoneNumberQueryInfo_Handler,
		},
		{
			MethodName: "CmdSysPhoneNumberBindRealPhoneNumber",
			Handler:    _InfoServerService_CmdSysPhoneNumberBindRealPhoneNumber_Handler,
		},
		{
			MethodName: "CmdBlockSignIn",
			Handler:    _InfoServerService_CmdBlockSignIn_Handler,
		},
		{
			MethodName: "CmdUnblockSignIn",
			Handler:    _InfoServerService_CmdUnblockSignIn_Handler,
		},
		{
			MethodName: "CmdBlockSignUp",
			Handler:    _InfoServerService_CmdBlockSignUp_Handler,
		},
		{
			MethodName: "CmdUnblockSignUp",
			Handler:    _InfoServerService_CmdUnblockSignUp_Handler,
		},
		{
			MethodName: "LangpackGetLanguages",
			Handler:    _InfoServerService_LangpackGetLanguages_Handler,
		},
		{
			MethodName: "LangpackGetLangPack",
			Handler:    _InfoServerService_LangpackGetLangPack_Handler,
		},
		{
			MethodName: "LangpackGetStrings",
			Handler:    _InfoServerService_LangpackGetStrings_Handler,
		},
		{
			MethodName: "LangpackGetDifference",
			Handler:    _InfoServerService_LangpackGetDifference_Handler,
		},
		{
			MethodName: "GetUserChannelByUserName",
			Handler:    _InfoServerService_GetUserChannelByUserName_Handler,
		},
		{
			MethodName: "DeleteAuthKeys",
			Handler:    _InfoServerService_DeleteAuthKeys_Handler,
		},
		{
			MethodName: "QueryDebugingUserID",
			Handler:    _InfoServerService_QueryDebugingUserID_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _InfoServerService_Heartbeat_Handler,
		},
		{
			MethodName: "CheckDeviceBan",
			Handler:    _InfoServerService_CheckDeviceBan_Handler,
		},
		{
			MethodName: "AuthSignUpPassword",
			Handler:    _InfoServerService_AuthSignUpPassword_Handler,
		},
		{
			MethodName: "AuthSignInPassword",
			Handler:    _InfoServerService_AuthSignInPassword_Handler,
		},
		{
			MethodName: "AccountResetPassword",
			Handler:    _InfoServerService_AccountResetPassword_Handler,
		},
		{
			MethodName: "GetFullUserSim",
			Handler:    _InfoServerService_GetFullUserSim_Handler,
		},
		{
			MethodName: "SendSetPasswordCode",
			Handler:    _InfoServerService_SendSetPasswordCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infoserver.proto",
}
