// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: userserver.proto

package infoserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServerServiceClient is the client API for UserServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServerServiceClient interface {
	// 注册指定用户的接口()
	RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error)
	// 获取用户信息
	GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	GetUserInfoByIdArr(ctx context.Context, in *GetUserInfoByIdArrReq, opts ...grpc.CallOption) (*GetUserInfoByIdArrResult, error)
	// 获取账号的销毁时间f
	GetUserExpierById(ctx context.Context, in *GetUserExpireByIdReq, opts ...grpc.CallOption) (*GetUserExpireByIdResult, error)
	// 通过用户电话号码获取用户基本信息
	GetUserInfoByPhone(ctx context.Context, in *GetUserByphone, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 通过username获取用户基本信息
	GetUserInfoByUsername(ctx context.Context, in *GetUserByUsername, opts ...grpc.CallOption) (*GetUserInfoResult, error)
	// 更新用户头像
	UpdateUserPhoto(ctx context.Context, in *UpdatePhotoInfoReq, opts ...grpc.CallOption) (*UpdateUserPhotoResult, error)
	// 获取用户头像
	GetUserPhoto(ctx context.Context, in *GetPhotoInfoReq, opts ...grpc.CallOption) (*GetUserPhotoResult, error)
	// 更新用户名称和about
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error)
	// 更新用户用户status
	UpdateUserStatus(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error)
	// update user online status
	UpdateUserStatusV2(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error)
	// 设置用户账号销毁时间
	UpdateUserExpire(ctx context.Context, in *UpdateExpireReq, opts ...grpc.CallOption) (*UpdateExpireResult, error)
	// 用户DC的迁移
	UpdateUserCluster(ctx context.Context, in *UserClusterChange, opts ...grpc.CallOption) (*UserClusterChangeResult, error)
	// 更新用户的username
	UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error)
	// 校验用户名称是否被占用
	CheckUserNameOccupied(ctx context.Context, in *CheckUserNameOccupiedReq, opts ...grpc.CallOption) (*CheckUserNameOccupiedResult, error)
	// 检查电话号码是否已经注册
	CheckPhoneRegister(ctx context.Context, in *CheckPhoneRegisterReq, opts ...grpc.CallOption) (*CheckPhoneRegisterResult, error)
	// 账号(标记删除)
	DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error)
	// 更新机器人相关信息
	UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error)
	// 更新机器人头像
	UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error)
	// 检测用户哈希是否合法
	CheckUserAccessHashValid(ctx context.Context, in *CheckUserAccessHashValidReq, opts ...grpc.CallOption) (*CheckUserAccessHashValidResult, error)
	// ********************************联系人的相关接口
	// 删除单个联系人的接口
	ContactsDelContact(ctx context.Context, in *DelContactReq, opts ...grpc.CallOption) (*DelContactResult, error)
	// 批量删除用户联系人的接口
	ContactsDelContactsArr(ctx context.Context, in *DelContactArrReq, opts ...grpc.CallOption) (*DelContactArrResult, error)
	// 重置用户联系人信息，删除所有联系人
	CmdResetUserContacts(ctx context.Context, in *CmdResetUserContactsReq, opts ...grpc.CallOption) (*CmdResetUserContactsResult, error)
	// 获取用户联系人列表
	ContactsGetContacts(ctx context.Context, in *ContatsGetContactsReq, opts ...grpc.CallOption) (*ContatsGetContactsResult, error)
	// 批量导入联系人的操作(具体业务逻辑在用户服务来实现)
	ImportContacts(ctx context.Context, in *ContactsImportPhoneContactsReq, opts ...grpc.CallOption) (*ContactsImportPhoneContactsResult, error)
	// 获取自己所有联系人的在线状态
	GetContactsStatus(ctx context.Context, in *GetContactsStatusReq, opts ...grpc.CallOption) (*GetContactsStatusResult, error)
	// 检测自己是否是对方的联系人
	CheckSelfIsContact(ctx context.Context, in *CheckSelfIsContactReq, opts ...grpc.CallOption) (*CheckSelfIsContactResult, error)
	// ************用户关联表 用户在线状态的更新*******************
	// 创建dialog的增加用户关系（单聊）
	DialogUserRelation(ctx context.Context, in *AddRelationIdInfo, opts ...grpc.CallOption) (*AddRelationIdInfoResult, error)
	// 删除dialog的剔除用户关系
	DelDialogUserRelation(ctx context.Context, in *DelRelationIdInfo, opts ...grpc.CallOption) (*DelRelationIdInfoResult, error)
	// **********用户黑名单的管理 ***************
	// 拉黑用户
	BlockedUser(ctx context.Context, in *BlockeduserReq, opts ...grpc.CallOption) (*BlockeduserResult, error)
	// 移除拉黑的用户
	ContactUnBlockedUser(ctx context.Context, in *ContactUnblockedReq, opts ...grpc.CallOption) (*BlockeduserResult, error)
	// 获取用户的黑明单列表
	ContactsGetBlocked(ctx context.Context, in *ContactsGetBlockedReq, opts ...grpc.CallOption) (*ContactsGetBlockedResult, error)
	// 检测用户是否是黑名单
	CheckUserIsBlocked(ctx context.Context, in *CheckUserIsBlockedReq, opts ...grpc.CallOption) (*CheckUserIsBlockedResult, error)
	// ***********系统白名单的相关操作和管理*******************
	// 存储白名单
	StoreSystemWhiteUser(ctx context.Context, in *StoreSysWhiteUserReq, opts ...grpc.CallOption) (*StoreSysWhiteUserResult, error)
	// 更新用户白名单的级别
	UpdateSystemWhiteUserLevel(ctx context.Context, in *UpdateSystemWhiteUserLevelReq, opts ...grpc.CallOption) (*UpdateSystemWhiteUserLevelResult, error)
	// 获取指定的白名单人信息
	GetSysWhiteUser(ctx context.Context, in *GetSysWhiteUserReq, opts ...grpc.CallOption) (*GetSysWhiteUserResult, error)
	// 获取白名单列表 )
	GetSysWhiteUserArr(ctx context.Context, in *GetSysWhiteUserArrReq, opts ...grpc.CallOption) (*GetSysWhiteUserArrResult, error)
	// 移除指定的白名单人
	DelSysWhiteUser(ctx context.Context, in *DelSysWhiteUserReq, opts ...grpc.CallOption) (*DelSysWhiteUserResult, error)
	// 拉取所有用户的DC
	GetAllUserDc(ctx context.Context, in *GetAllDcReq, opts ...grpc.CallOption) (UserServerService_GetAllUserDcClient, error)
	// ************************* 有关隐私选项设置的接口们 ****************************************
	// 设置隐私选项的接口
	SetUserPrivacy(ctx context.Context, in *SetPrivacyReq, opts ...grpc.CallOption) (*SetPrivacyResult, error)
	// 获取隐私选项的接口
	GetUserPrivacy(ctx context.Context, in *GetPrivacyReq, opts ...grpc.CallOption) (*GetPrivacyResult, error)
	// 检测用户的隐私选项
	CheckUserPrivacy(ctx context.Context, in *CheckPrivacyReq, opts ...grpc.CallOption) (*CheckPrivacyResult, error)
	// ************************* 有关sticker的设置和获取 ****************************************
	// 存储sticker集合的概要
	StoreStickerSet(ctx context.Context, in *StoreShopStickerSetReq, opts ...grpc.CallOption) (*StoreShopStickerSetResult, error)
	// 存储sickerSet 的documents
	StoreStickerSetDocument(ctx context.Context, in *StoreShopStickerSetDocumentsReq, opts ...grpc.CallOption) (*StoreShopStickerSetDocumentsResult, error)
	// 删除指定的sticker集合
	DeleteShopStickerSet(ctx context.Context, in *DeleteStickerSetReq, opts ...grpc.CallOption) (*DeleteStickerSetResult, error)
	// 获取指定的sticker集合
	GetStickerSetInfo(ctx context.Context, in *GetStickerSetInfoReq, opts ...grpc.CallOption) (*StickerSetInfo, error)
	// 存储stickerSet下面的单个贴图
	StoreStickerPackDc(ctx context.Context, in *StoreStickerPackDcReq, opts ...grpc.CallOption) (*StoreStickerPackDcResult, error)
	// 批量导入sticker
	StoreStickerPackDcArr(ctx context.Context, in *StoreStickerPackDcArrReq, opts ...grpc.CallOption) (*StoreStickerPackDcArrResult, error)
	// 获取一个sticker下面的所有贴图信息
	GetStickerSetPackDcInfos(ctx context.Context, in *GetStickerSetPackDcInfosReq, opts ...grpc.CallOption) (*GetStickerSetPackDcInfosResult, error)
	// 添加或者取消喜欢的sticker unfave = true: 取消喜欢 unfave = false: 添加为喜欢
	AddOrDeleteFaveSticer(ctx context.Context, in *AddOrDeleteFaveSticerReq, opts ...grpc.CallOption) (*AddOrDeleteFaveSticerResult, error)
	// 获取已经添加的的喜爱单个贴图集合
	GetFavedStickers(ctx context.Context, in *GetFavedStickersReq, opts ...grpc.CallOption) (*GetFavedStickersResult, error)
	// ***************用户安装sticker的操作*******
	StoreUserStickerSet(ctx context.Context, in *StoreUserStickerSetReq, opts ...grpc.CallOption) (*StoreUserStickerSetResult, error)
	// 更新sticker的用户禁用状态
	UpdateUserStickerDisable(ctx context.Context, in *UpdateUserStickerSetDisabledReq, opts ...grpc.CallOption) (*UpdateUserStickerSetDisabledResult, error)
	// 更新sticker的order
	UpdateUserStickerOrder(ctx context.Context, in *UpdateUserStickerSetOrderReq, opts ...grpc.CallOption) (*UpdateUserStickerSetOrderResult, error)
	// 更新sticker的installed和archived
	UpdateUserStickerInstallArchived(ctx context.Context, in *UpdateUserStickerSetInstallArReq, opts ...grpc.CallOption) (*UpdateUserStickerSetInstallArResult, error)
	// 删除用户指定的Sticker
	DeleteUserSticker(ctx context.Context, in *DeleteuserStickerReq, opts ...grpc.CallOption) (*DeleteuserStickerResult, error)
	// 获取用户sticker集合信息
	GetuserAllStickers(ctx context.Context, in *GetuserAllStickersReq, opts ...grpc.CallOption) (*GetuserAllStickersResult, error)
	// 获取所有sticker集合信息
	GetAllStickerSets(ctx context.Context, in *GetAllStickerSetsReq, opts ...grpc.CallOption) (*GetAllStickerSetsResult, error)
	// 删除指定sticker包的单个sticker
	DeleteStickerPackDocument(ctx context.Context, in *DeleteStickerPackDocumentReq, opts ...grpc.CallOption) (*DeleteStickerPackDocumentResult, error)
	// 根据setId查询作者的sticker
	GetAuthorStickerSet(ctx context.Context, in *GetAuthorStickerSetReq, opts ...grpc.CallOption) (*GetAuthorStickerSetResult, error)
	// 查询作者所有的sticker
	GetAuthorAllStickerSet(ctx context.Context, in *GetAuthorAllStickerSetReq, opts ...grpc.CallOption) (*GetAuthorAllStickerSetResult, error)
	// 计算作者拥有sticker数量
	CountAuthorAllStickerSet(ctx context.Context, in *CountAuthorAllStickerSetReq, opts ...grpc.CallOption) (*CountAuthorAllStickerSetResult, error)
	// ********************用户动态图的接口们 *********
	// 保存gif动态图
	SaveUserGif(ctx context.Context, in *SaveUserGifReq, opts ...grpc.CallOption) (*SaveUserGifResult, error)
	// 删除动态图
	DelUserGif(ctx context.Context, in *DelUserGifReq, opts ...grpc.CallOption) (*DelUserGifResult, error)
	// 获取用户的gifs
	GetUserGifs(ctx context.Context, in *GetUserGifsReq, opts ...grpc.CallOption) (*GetUserGifsResult, error)
	// ********************推送音效等设置 *****************
	// 获取音效设置
	GetNotifySettings(ctx context.Context, in *GetNotifySettingsReq, opts ...grpc.CallOption) (*GetNotifySettingsResult, error)
	// 更新音效设置
	UpdateNotifySettings(ctx context.Context, in *UpdateNotifySettingsReq, opts ...grpc.CallOption) (*UpdateNotifySettingsResult, error)
	// ********************代理配置的获取 *****************
	// 获取所有的代理的配置们
	GetAllProxyConfig(ctx context.Context, in *GetAllProxyConfigReq, opts ...grpc.CallOption) (*GetAllProxyConfigResult, error)
	// ********* 用户相关的GPS *********
	GetUserGps(ctx context.Context, in *GetUserGpsReq, opts ...grpc.CallOption) (*GetUserGpsResult, error)
	// ********* switches ****************
	UpdateSwitch(ctx context.Context, in *UpdateSwitchReq, opts ...grpc.CallOption) (*UpdateSwitchResult, error)
	GetSwitchStatus(ctx context.Context, in *GetSwitchStatusReq, opts ...grpc.CallOption) (*GetSwitchStatusResult, error)
	// ****************** only for  simple chat *************************
	UpdateUserGrender(ctx context.Context, in *UpdateUserGrenderReq, opts ...grpc.CallOption) (*UpdateUserGrenderResult, error)
	UpdateUserEmail(ctx context.Context, in *UpdateUserEmailReq, opts ...grpc.CallOption) (*UpdateUserEmailResult, error)
	UpdateUserLocation(ctx context.Context, in *UpdateUserLocationReq, opts ...grpc.CallOption) (*UpdateUserLocationResult, error)
	// 上传保存联系人
	UploadContacts(ctx context.Context, in *UploadContactsReq, opts ...grpc.CallOption) (*UploadContactsResult, error)
	// 联系人申请
	ApplyContact(ctx context.Context, in *ApplyContactReq, opts ...grpc.CallOption) (*ApplyContactResult, error)
	// 确认添加申请
	VerifyContact(ctx context.Context, in *VerifyContactReq, opts ...grpc.CallOption) (*VerifyContactResult, error)
	// 获取被添加用户申请列表
	GetAppliedContacts(ctx context.Context, in *GetAppliedContactsReq, opts ...grpc.CallOption) (*GetAppliedContactsResult, error)
	// 删除单个申请列表
	DeleteAppliedContact(ctx context.Context, in *DeleteAppliedContactReq, opts ...grpc.CallOption) (*DeleteAppliedContactResult, error)
	// 联系人搜索用户
	SearchUserByPhone(ctx context.Context, in *SearchUserByPhoneReq, opts ...grpc.CallOption) (*SearchUserByPhoneResult, error)
	// delete username
	DeleteUserUsername(ctx context.Context, in *DeleteUserUsernameReq, opts ...grpc.CallOption) (*DeleteUserUsernameResult, error)
	// 补充 更新机器人相关信息
	UpdateBotInfoSupp(ctx context.Context, in *UpdateBotInfoSuppReq, opts ...grpc.CallOption) (*UpdateBotInfoSuppResult, error)
	UGetUsersChats(ctx context.Context, in *UGetUsersChatsReq, opts ...grpc.CallOption) (*UGetUsersChatsResult, error)
}

type userServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServerServiceClient(cc grpc.ClientConnInterface) UserServerServiceClient {
	return &userServerServiceClient{cc}
}

func (c *userServerServiceClient) RegisterUserInfo(ctx context.Context, in *RegisterUserInfoReq, opts ...grpc.CallOption) (*RegisterUserInfoResult, error) {
	out := new(RegisterUserInfoResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/RegisterUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoByIdArr(ctx context.Context, in *GetUserInfoByIdArrReq, opts ...grpc.CallOption) (*GetUserInfoByIdArrResult, error) {
	out := new(GetUserInfoByIdArrResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetUserInfoByIdArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserExpierById(ctx context.Context, in *GetUserExpireByIdReq, opts ...grpc.CallOption) (*GetUserExpireByIdResult, error) {
	out := new(GetUserExpireByIdResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetUserExpierById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoByPhone(ctx context.Context, in *GetUserByphone, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetUserInfoByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserInfoByUsername(ctx context.Context, in *GetUserByUsername, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetUserInfoByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserPhoto(ctx context.Context, in *UpdatePhotoInfoReq, opts ...grpc.CallOption) (*UpdateUserPhotoResult, error) {
	out := new(UpdateUserPhotoResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserPhoto(ctx context.Context, in *GetPhotoInfoReq, opts ...grpc.CallOption) (*GetUserPhotoResult, error) {
	out := new(GetUserPhotoResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetUserPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResult, error) {
	out := new(UpdateUserProfileResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserStatus(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserStatusV2(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserStatusV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserExpire(ctx context.Context, in *UpdateExpireReq, opts ...grpc.CallOption) (*UpdateExpireResult, error) {
	out := new(UpdateExpireResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserExpire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserCluster(ctx context.Context, in *UserClusterChange, opts ...grpc.CallOption) (*UserClusterChangeResult, error) {
	out := new(UserClusterChangeResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserName(ctx context.Context, in *UpdateuserNameReq, opts ...grpc.CallOption) (*UpdateuserNameResult, error) {
	out := new(UpdateuserNameResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserNameOccupied(ctx context.Context, in *CheckUserNameOccupiedReq, opts ...grpc.CallOption) (*CheckUserNameOccupiedResult, error) {
	out := new(CheckUserNameOccupiedResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/CheckUserNameOccupied", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckPhoneRegister(ctx context.Context, in *CheckPhoneRegisterReq, opts ...grpc.CallOption) (*CheckPhoneRegisterResult, error) {
	out := new(CheckPhoneRegisterResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/CheckPhoneRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteUserInfoById(ctx context.Context, in *DeleteAccountByIdReq, opts ...grpc.CallOption) (*DelAccountResult, error) {
	out := new(DelAccountResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/DeleteUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateBotInfo(ctx context.Context, in *BotUpdateInfo, opts ...grpc.CallOption) (*BotUpdateInfoResult, error) {
	out := new(BotUpdateInfoResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateBotInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateBotPic(ctx context.Context, in *UpdateBotPicRequest, opts ...grpc.CallOption) (*UpdateBotPicResult, error) {
	out := new(UpdateBotPicResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateBotPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserAccessHashValid(ctx context.Context, in *CheckUserAccessHashValidReq, opts ...grpc.CallOption) (*CheckUserAccessHashValidResult, error) {
	out := new(CheckUserAccessHashValidResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/checkUserAccessHashValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsDelContact(ctx context.Context, in *DelContactReq, opts ...grpc.CallOption) (*DelContactResult, error) {
	out := new(DelContactResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/ContactsDelContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsDelContactsArr(ctx context.Context, in *DelContactArrReq, opts ...grpc.CallOption) (*DelContactArrResult, error) {
	out := new(DelContactArrResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/ContactsDelContactsArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CmdResetUserContacts(ctx context.Context, in *CmdResetUserContactsReq, opts ...grpc.CallOption) (*CmdResetUserContactsResult, error) {
	out := new(CmdResetUserContactsResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/CmdResetUserContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGetContacts(ctx context.Context, in *ContatsGetContactsReq, opts ...grpc.CallOption) (*ContatsGetContactsResult, error) {
	out := new(ContatsGetContactsResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/ContactsGetContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ImportContacts(ctx context.Context, in *ContactsImportPhoneContactsReq, opts ...grpc.CallOption) (*ContactsImportPhoneContactsResult, error) {
	out := new(ContactsImportPhoneContactsResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/ImportContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetContactsStatus(ctx context.Context, in *GetContactsStatusReq, opts ...grpc.CallOption) (*GetContactsStatusResult, error) {
	out := new(GetContactsStatusResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetContactsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckSelfIsContact(ctx context.Context, in *CheckSelfIsContactReq, opts ...grpc.CallOption) (*CheckSelfIsContactResult, error) {
	out := new(CheckSelfIsContactResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/CheckSelfIsContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DialogUserRelation(ctx context.Context, in *AddRelationIdInfo, opts ...grpc.CallOption) (*AddRelationIdInfoResult, error) {
	out := new(AddRelationIdInfoResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/DialogUserRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DelDialogUserRelation(ctx context.Context, in *DelRelationIdInfo, opts ...grpc.CallOption) (*DelRelationIdInfoResult, error) {
	out := new(DelRelationIdInfoResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/DelDialogUserRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) BlockedUser(ctx context.Context, in *BlockeduserReq, opts ...grpc.CallOption) (*BlockeduserResult, error) {
	out := new(BlockeduserResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/BlockedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactUnBlockedUser(ctx context.Context, in *ContactUnblockedReq, opts ...grpc.CallOption) (*BlockeduserResult, error) {
	out := new(BlockeduserResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/ContactUnBlockedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ContactsGetBlocked(ctx context.Context, in *ContactsGetBlockedReq, opts ...grpc.CallOption) (*ContactsGetBlockedResult, error) {
	out := new(ContactsGetBlockedResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/ContactsGetBlocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserIsBlocked(ctx context.Context, in *CheckUserIsBlockedReq, opts ...grpc.CallOption) (*CheckUserIsBlockedResult, error) {
	out := new(CheckUserIsBlockedResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/CheckUserIsBlocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) StoreSystemWhiteUser(ctx context.Context, in *StoreSysWhiteUserReq, opts ...grpc.CallOption) (*StoreSysWhiteUserResult, error) {
	out := new(StoreSysWhiteUserResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/StoreSystemWhiteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateSystemWhiteUserLevel(ctx context.Context, in *UpdateSystemWhiteUserLevelReq, opts ...grpc.CallOption) (*UpdateSystemWhiteUserLevelResult, error) {
	out := new(UpdateSystemWhiteUserLevelResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateSystemWhiteUserLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetSysWhiteUser(ctx context.Context, in *GetSysWhiteUserReq, opts ...grpc.CallOption) (*GetSysWhiteUserResult, error) {
	out := new(GetSysWhiteUserResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetSysWhiteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetSysWhiteUserArr(ctx context.Context, in *GetSysWhiteUserArrReq, opts ...grpc.CallOption) (*GetSysWhiteUserArrResult, error) {
	out := new(GetSysWhiteUserArrResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetSysWhiteUserArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DelSysWhiteUser(ctx context.Context, in *DelSysWhiteUserReq, opts ...grpc.CallOption) (*DelSysWhiteUserResult, error) {
	out := new(DelSysWhiteUserResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/DelSysWhiteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAllUserDc(ctx context.Context, in *GetAllDcReq, opts ...grpc.CallOption) (UserServerService_GetAllUserDcClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserServerService_ServiceDesc.Streams[0], "/infoserver.UserServerService/GetAllUserDc", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServerServiceGetAllUserDcClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserServerService_GetAllUserDcClient interface {
	Recv() (*UserDc, error)
	grpc.ClientStream
}

type userServerServiceGetAllUserDcClient struct {
	grpc.ClientStream
}

func (x *userServerServiceGetAllUserDcClient) Recv() (*UserDc, error) {
	m := new(UserDc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServerServiceClient) SetUserPrivacy(ctx context.Context, in *SetPrivacyReq, opts ...grpc.CallOption) (*SetPrivacyResult, error) {
	out := new(SetPrivacyResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/SetUserPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserPrivacy(ctx context.Context, in *GetPrivacyReq, opts ...grpc.CallOption) (*GetPrivacyResult, error) {
	out := new(GetPrivacyResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetUserPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CheckUserPrivacy(ctx context.Context, in *CheckPrivacyReq, opts ...grpc.CallOption) (*CheckPrivacyResult, error) {
	out := new(CheckPrivacyResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/CheckUserPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) StoreStickerSet(ctx context.Context, in *StoreShopStickerSetReq, opts ...grpc.CallOption) (*StoreShopStickerSetResult, error) {
	out := new(StoreShopStickerSetResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/StoreStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) StoreStickerSetDocument(ctx context.Context, in *StoreShopStickerSetDocumentsReq, opts ...grpc.CallOption) (*StoreShopStickerSetDocumentsResult, error) {
	out := new(StoreShopStickerSetDocumentsResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/StoreStickerSetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteShopStickerSet(ctx context.Context, in *DeleteStickerSetReq, opts ...grpc.CallOption) (*DeleteStickerSetResult, error) {
	out := new(DeleteStickerSetResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/DeleteShopStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetStickerSetInfo(ctx context.Context, in *GetStickerSetInfoReq, opts ...grpc.CallOption) (*StickerSetInfo, error) {
	out := new(StickerSetInfo)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetStickerSetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) StoreStickerPackDc(ctx context.Context, in *StoreStickerPackDcReq, opts ...grpc.CallOption) (*StoreStickerPackDcResult, error) {
	out := new(StoreStickerPackDcResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/StoreStickerPackDc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) StoreStickerPackDcArr(ctx context.Context, in *StoreStickerPackDcArrReq, opts ...grpc.CallOption) (*StoreStickerPackDcArrResult, error) {
	out := new(StoreStickerPackDcArrResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/StoreStickerPackDcArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetStickerSetPackDcInfos(ctx context.Context, in *GetStickerSetPackDcInfosReq, opts ...grpc.CallOption) (*GetStickerSetPackDcInfosResult, error) {
	out := new(GetStickerSetPackDcInfosResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetStickerSetPackDcInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) AddOrDeleteFaveSticer(ctx context.Context, in *AddOrDeleteFaveSticerReq, opts ...grpc.CallOption) (*AddOrDeleteFaveSticerResult, error) {
	out := new(AddOrDeleteFaveSticerResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/AddOrDeleteFaveSticer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetFavedStickers(ctx context.Context, in *GetFavedStickersReq, opts ...grpc.CallOption) (*GetFavedStickersResult, error) {
	out := new(GetFavedStickersResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetFavedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) StoreUserStickerSet(ctx context.Context, in *StoreUserStickerSetReq, opts ...grpc.CallOption) (*StoreUserStickerSetResult, error) {
	out := new(StoreUserStickerSetResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/StoreUserStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserStickerDisable(ctx context.Context, in *UpdateUserStickerSetDisabledReq, opts ...grpc.CallOption) (*UpdateUserStickerSetDisabledResult, error) {
	out := new(UpdateUserStickerSetDisabledResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserStickerDisable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserStickerOrder(ctx context.Context, in *UpdateUserStickerSetOrderReq, opts ...grpc.CallOption) (*UpdateUserStickerSetOrderResult, error) {
	out := new(UpdateUserStickerSetOrderResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserStickerOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserStickerInstallArchived(ctx context.Context, in *UpdateUserStickerSetInstallArReq, opts ...grpc.CallOption) (*UpdateUserStickerSetInstallArResult, error) {
	out := new(UpdateUserStickerSetInstallArResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserStickerInstallArchived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteUserSticker(ctx context.Context, in *DeleteuserStickerReq, opts ...grpc.CallOption) (*DeleteuserStickerResult, error) {
	out := new(DeleteuserStickerResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/DeleteUserSticker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetuserAllStickers(ctx context.Context, in *GetuserAllStickersReq, opts ...grpc.CallOption) (*GetuserAllStickersResult, error) {
	out := new(GetuserAllStickersResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetuserAllStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAllStickerSets(ctx context.Context, in *GetAllStickerSetsReq, opts ...grpc.CallOption) (*GetAllStickerSetsResult, error) {
	out := new(GetAllStickerSetsResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetAllStickerSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteStickerPackDocument(ctx context.Context, in *DeleteStickerPackDocumentReq, opts ...grpc.CallOption) (*DeleteStickerPackDocumentResult, error) {
	out := new(DeleteStickerPackDocumentResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/DeleteStickerPackDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAuthorStickerSet(ctx context.Context, in *GetAuthorStickerSetReq, opts ...grpc.CallOption) (*GetAuthorStickerSetResult, error) {
	out := new(GetAuthorStickerSetResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetAuthorStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAuthorAllStickerSet(ctx context.Context, in *GetAuthorAllStickerSetReq, opts ...grpc.CallOption) (*GetAuthorAllStickerSetResult, error) {
	out := new(GetAuthorAllStickerSetResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetAuthorAllStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) CountAuthorAllStickerSet(ctx context.Context, in *CountAuthorAllStickerSetReq, opts ...grpc.CallOption) (*CountAuthorAllStickerSetResult, error) {
	out := new(CountAuthorAllStickerSetResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/CountAuthorAllStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SaveUserGif(ctx context.Context, in *SaveUserGifReq, opts ...grpc.CallOption) (*SaveUserGifResult, error) {
	out := new(SaveUserGifResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/SaveUserGif", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DelUserGif(ctx context.Context, in *DelUserGifReq, opts ...grpc.CallOption) (*DelUserGifResult, error) {
	out := new(DelUserGifResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/DelUserGif", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserGifs(ctx context.Context, in *GetUserGifsReq, opts ...grpc.CallOption) (*GetUserGifsResult, error) {
	out := new(GetUserGifsResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetUserGifs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetNotifySettings(ctx context.Context, in *GetNotifySettingsReq, opts ...grpc.CallOption) (*GetNotifySettingsResult, error) {
	out := new(GetNotifySettingsResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateNotifySettings(ctx context.Context, in *UpdateNotifySettingsReq, opts ...grpc.CallOption) (*UpdateNotifySettingsResult, error) {
	out := new(UpdateNotifySettingsResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAllProxyConfig(ctx context.Context, in *GetAllProxyConfigReq, opts ...grpc.CallOption) (*GetAllProxyConfigResult, error) {
	out := new(GetAllProxyConfigResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetAllProxyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetUserGps(ctx context.Context, in *GetUserGpsReq, opts ...grpc.CallOption) (*GetUserGpsResult, error) {
	out := new(GetUserGpsResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetUserGps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateSwitch(ctx context.Context, in *UpdateSwitchReq, opts ...grpc.CallOption) (*UpdateSwitchResult, error) {
	out := new(UpdateSwitchResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetSwitchStatus(ctx context.Context, in *GetSwitchStatusReq, opts ...grpc.CallOption) (*GetSwitchStatusResult, error) {
	out := new(GetSwitchStatusResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetSwitchStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserGrender(ctx context.Context, in *UpdateUserGrenderReq, opts ...grpc.CallOption) (*UpdateUserGrenderResult, error) {
	out := new(UpdateUserGrenderResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserGrender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserEmail(ctx context.Context, in *UpdateUserEmailReq, opts ...grpc.CallOption) (*UpdateUserEmailResult, error) {
	out := new(UpdateUserEmailResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateUserLocation(ctx context.Context, in *UpdateUserLocationReq, opts ...grpc.CallOption) (*UpdateUserLocationResult, error) {
	out := new(UpdateUserLocationResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateUserLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UploadContacts(ctx context.Context, in *UploadContactsReq, opts ...grpc.CallOption) (*UploadContactsResult, error) {
	out := new(UploadContactsResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UploadContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) ApplyContact(ctx context.Context, in *ApplyContactReq, opts ...grpc.CallOption) (*ApplyContactResult, error) {
	out := new(ApplyContactResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/ApplyContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) VerifyContact(ctx context.Context, in *VerifyContactReq, opts ...grpc.CallOption) (*VerifyContactResult, error) {
	out := new(VerifyContactResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/VerifyContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) GetAppliedContacts(ctx context.Context, in *GetAppliedContactsReq, opts ...grpc.CallOption) (*GetAppliedContactsResult, error) {
	out := new(GetAppliedContactsResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/GetAppliedContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteAppliedContact(ctx context.Context, in *DeleteAppliedContactReq, opts ...grpc.CallOption) (*DeleteAppliedContactResult, error) {
	out := new(DeleteAppliedContactResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/DeleteAppliedContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) SearchUserByPhone(ctx context.Context, in *SearchUserByPhoneReq, opts ...grpc.CallOption) (*SearchUserByPhoneResult, error) {
	out := new(SearchUserByPhoneResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/SearchUserByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) DeleteUserUsername(ctx context.Context, in *DeleteUserUsernameReq, opts ...grpc.CallOption) (*DeleteUserUsernameResult, error) {
	out := new(DeleteUserUsernameResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/DeleteUserUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UpdateBotInfoSupp(ctx context.Context, in *UpdateBotInfoSuppReq, opts ...grpc.CallOption) (*UpdateBotInfoSuppResult, error) {
	out := new(UpdateBotInfoSuppResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UpdateBotInfoSupp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerServiceClient) UGetUsersChats(ctx context.Context, in *UGetUsersChatsReq, opts ...grpc.CallOption) (*UGetUsersChatsResult, error) {
	out := new(UGetUsersChatsResult)
	err := c.cc.Invoke(ctx, "/infoserver.UserServerService/UGetUsersChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServerServiceServer is the server API for UserServerService service.
// All implementations must embed UnimplementedUserServerServiceServer
// for forward compatibility
type UserServerServiceServer interface {
	// 注册指定用户的接口()
	RegisterUserInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error)
	// 获取用户信息
	GetUserInfoById(context.Context, *GetUserInfoByIdReq) (*GetUserInfoResult, error)
	GetUserInfoByIdArr(context.Context, *GetUserInfoByIdArrReq) (*GetUserInfoByIdArrResult, error)
	// 获取账号的销毁时间f
	GetUserExpierById(context.Context, *GetUserExpireByIdReq) (*GetUserExpireByIdResult, error)
	// 通过用户电话号码获取用户基本信息
	GetUserInfoByPhone(context.Context, *GetUserByphone) (*GetUserInfoResult, error)
	// 通过username获取用户基本信息
	GetUserInfoByUsername(context.Context, *GetUserByUsername) (*GetUserInfoResult, error)
	// 更新用户头像
	UpdateUserPhoto(context.Context, *UpdatePhotoInfoReq) (*UpdateUserPhotoResult, error)
	// 获取用户头像
	GetUserPhoto(context.Context, *GetPhotoInfoReq) (*GetUserPhotoResult, error)
	// 更新用户名称和about
	UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*UpdateUserProfileResult, error)
	// 更新用户用户status
	UpdateUserStatus(context.Context, *StatusReq) (*StatusResult, error)
	// update user online status
	UpdateUserStatusV2(context.Context, *StatusReq) (*StatusResult, error)
	// 设置用户账号销毁时间
	UpdateUserExpire(context.Context, *UpdateExpireReq) (*UpdateExpireResult, error)
	// 用户DC的迁移
	UpdateUserCluster(context.Context, *UserClusterChange) (*UserClusterChangeResult, error)
	// 更新用户的username
	UpdateUserName(context.Context, *UpdateuserNameReq) (*UpdateuserNameResult, error)
	// 校验用户名称是否被占用
	CheckUserNameOccupied(context.Context, *CheckUserNameOccupiedReq) (*CheckUserNameOccupiedResult, error)
	// 检查电话号码是否已经注册
	CheckPhoneRegister(context.Context, *CheckPhoneRegisterReq) (*CheckPhoneRegisterResult, error)
	// 账号(标记删除)
	DeleteUserInfoById(context.Context, *DeleteAccountByIdReq) (*DelAccountResult, error)
	// 更新机器人相关信息
	UpdateBotInfo(context.Context, *BotUpdateInfo) (*BotUpdateInfoResult, error)
	// 更新机器人头像
	UpdateBotPic(context.Context, *UpdateBotPicRequest) (*UpdateBotPicResult, error)
	// 检测用户哈希是否合法
	CheckUserAccessHashValid(context.Context, *CheckUserAccessHashValidReq) (*CheckUserAccessHashValidResult, error)
	// ********************************联系人的相关接口
	// 删除单个联系人的接口
	ContactsDelContact(context.Context, *DelContactReq) (*DelContactResult, error)
	// 批量删除用户联系人的接口
	ContactsDelContactsArr(context.Context, *DelContactArrReq) (*DelContactArrResult, error)
	// 重置用户联系人信息，删除所有联系人
	CmdResetUserContacts(context.Context, *CmdResetUserContactsReq) (*CmdResetUserContactsResult, error)
	// 获取用户联系人列表
	ContactsGetContacts(context.Context, *ContatsGetContactsReq) (*ContatsGetContactsResult, error)
	// 批量导入联系人的操作(具体业务逻辑在用户服务来实现)
	ImportContacts(context.Context, *ContactsImportPhoneContactsReq) (*ContactsImportPhoneContactsResult, error)
	// 获取自己所有联系人的在线状态
	GetContactsStatus(context.Context, *GetContactsStatusReq) (*GetContactsStatusResult, error)
	// 检测自己是否是对方的联系人
	CheckSelfIsContact(context.Context, *CheckSelfIsContactReq) (*CheckSelfIsContactResult, error)
	// ************用户关联表 用户在线状态的更新*******************
	// 创建dialog的增加用户关系（单聊）
	DialogUserRelation(context.Context, *AddRelationIdInfo) (*AddRelationIdInfoResult, error)
	// 删除dialog的剔除用户关系
	DelDialogUserRelation(context.Context, *DelRelationIdInfo) (*DelRelationIdInfoResult, error)
	// **********用户黑名单的管理 ***************
	// 拉黑用户
	BlockedUser(context.Context, *BlockeduserReq) (*BlockeduserResult, error)
	// 移除拉黑的用户
	ContactUnBlockedUser(context.Context, *ContactUnblockedReq) (*BlockeduserResult, error)
	// 获取用户的黑明单列表
	ContactsGetBlocked(context.Context, *ContactsGetBlockedReq) (*ContactsGetBlockedResult, error)
	// 检测用户是否是黑名单
	CheckUserIsBlocked(context.Context, *CheckUserIsBlockedReq) (*CheckUserIsBlockedResult, error)
	// ***********系统白名单的相关操作和管理*******************
	// 存储白名单
	StoreSystemWhiteUser(context.Context, *StoreSysWhiteUserReq) (*StoreSysWhiteUserResult, error)
	// 更新用户白名单的级别
	UpdateSystemWhiteUserLevel(context.Context, *UpdateSystemWhiteUserLevelReq) (*UpdateSystemWhiteUserLevelResult, error)
	// 获取指定的白名单人信息
	GetSysWhiteUser(context.Context, *GetSysWhiteUserReq) (*GetSysWhiteUserResult, error)
	// 获取白名单列表 )
	GetSysWhiteUserArr(context.Context, *GetSysWhiteUserArrReq) (*GetSysWhiteUserArrResult, error)
	// 移除指定的白名单人
	DelSysWhiteUser(context.Context, *DelSysWhiteUserReq) (*DelSysWhiteUserResult, error)
	// 拉取所有用户的DC
	GetAllUserDc(*GetAllDcReq, UserServerService_GetAllUserDcServer) error
	// ************************* 有关隐私选项设置的接口们 ****************************************
	// 设置隐私选项的接口
	SetUserPrivacy(context.Context, *SetPrivacyReq) (*SetPrivacyResult, error)
	// 获取隐私选项的接口
	GetUserPrivacy(context.Context, *GetPrivacyReq) (*GetPrivacyResult, error)
	// 检测用户的隐私选项
	CheckUserPrivacy(context.Context, *CheckPrivacyReq) (*CheckPrivacyResult, error)
	// ************************* 有关sticker的设置和获取 ****************************************
	// 存储sticker集合的概要
	StoreStickerSet(context.Context, *StoreShopStickerSetReq) (*StoreShopStickerSetResult, error)
	// 存储sickerSet 的documents
	StoreStickerSetDocument(context.Context, *StoreShopStickerSetDocumentsReq) (*StoreShopStickerSetDocumentsResult, error)
	// 删除指定的sticker集合
	DeleteShopStickerSet(context.Context, *DeleteStickerSetReq) (*DeleteStickerSetResult, error)
	// 获取指定的sticker集合
	GetStickerSetInfo(context.Context, *GetStickerSetInfoReq) (*StickerSetInfo, error)
	// 存储stickerSet下面的单个贴图
	StoreStickerPackDc(context.Context, *StoreStickerPackDcReq) (*StoreStickerPackDcResult, error)
	// 批量导入sticker
	StoreStickerPackDcArr(context.Context, *StoreStickerPackDcArrReq) (*StoreStickerPackDcArrResult, error)
	// 获取一个sticker下面的所有贴图信息
	GetStickerSetPackDcInfos(context.Context, *GetStickerSetPackDcInfosReq) (*GetStickerSetPackDcInfosResult, error)
	// 添加或者取消喜欢的sticker unfave = true: 取消喜欢 unfave = false: 添加为喜欢
	AddOrDeleteFaveSticer(context.Context, *AddOrDeleteFaveSticerReq) (*AddOrDeleteFaveSticerResult, error)
	// 获取已经添加的的喜爱单个贴图集合
	GetFavedStickers(context.Context, *GetFavedStickersReq) (*GetFavedStickersResult, error)
	// ***************用户安装sticker的操作*******
	StoreUserStickerSet(context.Context, *StoreUserStickerSetReq) (*StoreUserStickerSetResult, error)
	// 更新sticker的用户禁用状态
	UpdateUserStickerDisable(context.Context, *UpdateUserStickerSetDisabledReq) (*UpdateUserStickerSetDisabledResult, error)
	// 更新sticker的order
	UpdateUserStickerOrder(context.Context, *UpdateUserStickerSetOrderReq) (*UpdateUserStickerSetOrderResult, error)
	// 更新sticker的installed和archived
	UpdateUserStickerInstallArchived(context.Context, *UpdateUserStickerSetInstallArReq) (*UpdateUserStickerSetInstallArResult, error)
	// 删除用户指定的Sticker
	DeleteUserSticker(context.Context, *DeleteuserStickerReq) (*DeleteuserStickerResult, error)
	// 获取用户sticker集合信息
	GetuserAllStickers(context.Context, *GetuserAllStickersReq) (*GetuserAllStickersResult, error)
	// 获取所有sticker集合信息
	GetAllStickerSets(context.Context, *GetAllStickerSetsReq) (*GetAllStickerSetsResult, error)
	// 删除指定sticker包的单个sticker
	DeleteStickerPackDocument(context.Context, *DeleteStickerPackDocumentReq) (*DeleteStickerPackDocumentResult, error)
	// 根据setId查询作者的sticker
	GetAuthorStickerSet(context.Context, *GetAuthorStickerSetReq) (*GetAuthorStickerSetResult, error)
	// 查询作者所有的sticker
	GetAuthorAllStickerSet(context.Context, *GetAuthorAllStickerSetReq) (*GetAuthorAllStickerSetResult, error)
	// 计算作者拥有sticker数量
	CountAuthorAllStickerSet(context.Context, *CountAuthorAllStickerSetReq) (*CountAuthorAllStickerSetResult, error)
	// ********************用户动态图的接口们 *********
	// 保存gif动态图
	SaveUserGif(context.Context, *SaveUserGifReq) (*SaveUserGifResult, error)
	// 删除动态图
	DelUserGif(context.Context, *DelUserGifReq) (*DelUserGifResult, error)
	// 获取用户的gifs
	GetUserGifs(context.Context, *GetUserGifsReq) (*GetUserGifsResult, error)
	// ********************推送音效等设置 *****************
	// 获取音效设置
	GetNotifySettings(context.Context, *GetNotifySettingsReq) (*GetNotifySettingsResult, error)
	// 更新音效设置
	UpdateNotifySettings(context.Context, *UpdateNotifySettingsReq) (*UpdateNotifySettingsResult, error)
	// ********************代理配置的获取 *****************
	// 获取所有的代理的配置们
	GetAllProxyConfig(context.Context, *GetAllProxyConfigReq) (*GetAllProxyConfigResult, error)
	// ********* 用户相关的GPS *********
	GetUserGps(context.Context, *GetUserGpsReq) (*GetUserGpsResult, error)
	// ********* switches ****************
	UpdateSwitch(context.Context, *UpdateSwitchReq) (*UpdateSwitchResult, error)
	GetSwitchStatus(context.Context, *GetSwitchStatusReq) (*GetSwitchStatusResult, error)
	// ****************** only for  simple chat *************************
	UpdateUserGrender(context.Context, *UpdateUserGrenderReq) (*UpdateUserGrenderResult, error)
	UpdateUserEmail(context.Context, *UpdateUserEmailReq) (*UpdateUserEmailResult, error)
	UpdateUserLocation(context.Context, *UpdateUserLocationReq) (*UpdateUserLocationResult, error)
	// 上传保存联系人
	UploadContacts(context.Context, *UploadContactsReq) (*UploadContactsResult, error)
	// 联系人申请
	ApplyContact(context.Context, *ApplyContactReq) (*ApplyContactResult, error)
	// 确认添加申请
	VerifyContact(context.Context, *VerifyContactReq) (*VerifyContactResult, error)
	// 获取被添加用户申请列表
	GetAppliedContacts(context.Context, *GetAppliedContactsReq) (*GetAppliedContactsResult, error)
	// 删除单个申请列表
	DeleteAppliedContact(context.Context, *DeleteAppliedContactReq) (*DeleteAppliedContactResult, error)
	// 联系人搜索用户
	SearchUserByPhone(context.Context, *SearchUserByPhoneReq) (*SearchUserByPhoneResult, error)
	// delete username
	DeleteUserUsername(context.Context, *DeleteUserUsernameReq) (*DeleteUserUsernameResult, error)
	// 补充 更新机器人相关信息
	UpdateBotInfoSupp(context.Context, *UpdateBotInfoSuppReq) (*UpdateBotInfoSuppResult, error)
	UGetUsersChats(context.Context, *UGetUsersChatsReq) (*UGetUsersChatsResult, error)
	mustEmbedUnimplementedUserServerServiceServer()
}

// UnimplementedUserServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServerServiceServer struct {
}

func (UnimplementedUserServerServiceServer) RegisterUserInfo(context.Context, *RegisterUserInfoReq) (*RegisterUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUserInfo not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserInfoById(context.Context, *GetUserInfoByIdReq) (*GetUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoById not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserInfoByIdArr(context.Context, *GetUserInfoByIdArrReq) (*GetUserInfoByIdArrResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByIdArr not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserExpierById(context.Context, *GetUserExpireByIdReq) (*GetUserExpireByIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserExpierById not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserInfoByPhone(context.Context, *GetUserByphone) (*GetUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByPhone not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserInfoByUsername(context.Context, *GetUserByUsername) (*GetUserInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByUsername not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserPhoto(context.Context, *UpdatePhotoInfoReq) (*UpdateUserPhotoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPhoto not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserPhoto(context.Context, *GetPhotoInfoReq) (*GetUserPhotoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPhoto not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*UpdateUserProfileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserStatus(context.Context, *StatusReq) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatus not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserStatusV2(context.Context, *StatusReq) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatusV2 not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserExpire(context.Context, *UpdateExpireReq) (*UpdateExpireResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserExpire not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserCluster(context.Context, *UserClusterChange) (*UserClusterChangeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserCluster not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserName(context.Context, *UpdateuserNameReq) (*UpdateuserNameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (UnimplementedUserServerServiceServer) CheckUserNameOccupied(context.Context, *CheckUserNameOccupiedReq) (*CheckUserNameOccupiedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserNameOccupied not implemented")
}
func (UnimplementedUserServerServiceServer) CheckPhoneRegister(context.Context, *CheckPhoneRegisterReq) (*CheckPhoneRegisterResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPhoneRegister not implemented")
}
func (UnimplementedUserServerServiceServer) DeleteUserInfoById(context.Context, *DeleteAccountByIdReq) (*DelAccountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserInfoById not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateBotInfo(context.Context, *BotUpdateInfo) (*BotUpdateInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotInfo not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateBotPic(context.Context, *UpdateBotPicRequest) (*UpdateBotPicResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotPic not implemented")
}
func (UnimplementedUserServerServiceServer) CheckUserAccessHashValid(context.Context, *CheckUserAccessHashValidReq) (*CheckUserAccessHashValidResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserAccessHashValid not implemented")
}
func (UnimplementedUserServerServiceServer) ContactsDelContact(context.Context, *DelContactReq) (*DelContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDelContact not implemented")
}
func (UnimplementedUserServerServiceServer) ContactsDelContactsArr(context.Context, *DelContactArrReq) (*DelContactArrResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDelContactsArr not implemented")
}
func (UnimplementedUserServerServiceServer) CmdResetUserContacts(context.Context, *CmdResetUserContactsReq) (*CmdResetUserContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdResetUserContacts not implemented")
}
func (UnimplementedUserServerServiceServer) ContactsGetContacts(context.Context, *ContatsGetContactsReq) (*ContatsGetContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetContacts not implemented")
}
func (UnimplementedUserServerServiceServer) ImportContacts(context.Context, *ContactsImportPhoneContactsReq) (*ContactsImportPhoneContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportContacts not implemented")
}
func (UnimplementedUserServerServiceServer) GetContactsStatus(context.Context, *GetContactsStatusReq) (*GetContactsStatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactsStatus not implemented")
}
func (UnimplementedUserServerServiceServer) CheckSelfIsContact(context.Context, *CheckSelfIsContactReq) (*CheckSelfIsContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSelfIsContact not implemented")
}
func (UnimplementedUserServerServiceServer) DialogUserRelation(context.Context, *AddRelationIdInfo) (*AddRelationIdInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogUserRelation not implemented")
}
func (UnimplementedUserServerServiceServer) DelDialogUserRelation(context.Context, *DelRelationIdInfo) (*DelRelationIdInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDialogUserRelation not implemented")
}
func (UnimplementedUserServerServiceServer) BlockedUser(context.Context, *BlockeduserReq) (*BlockeduserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockedUser not implemented")
}
func (UnimplementedUserServerServiceServer) ContactUnBlockedUser(context.Context, *ContactUnblockedReq) (*BlockeduserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactUnBlockedUser not implemented")
}
func (UnimplementedUserServerServiceServer) ContactsGetBlocked(context.Context, *ContactsGetBlockedReq) (*ContactsGetBlockedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetBlocked not implemented")
}
func (UnimplementedUserServerServiceServer) CheckUserIsBlocked(context.Context, *CheckUserIsBlockedReq) (*CheckUserIsBlockedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserIsBlocked not implemented")
}
func (UnimplementedUserServerServiceServer) StoreSystemWhiteUser(context.Context, *StoreSysWhiteUserReq) (*StoreSysWhiteUserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreSystemWhiteUser not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateSystemWhiteUserLevel(context.Context, *UpdateSystemWhiteUserLevelReq) (*UpdateSystemWhiteUserLevelResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemWhiteUserLevel not implemented")
}
func (UnimplementedUserServerServiceServer) GetSysWhiteUser(context.Context, *GetSysWhiteUserReq) (*GetSysWhiteUserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysWhiteUser not implemented")
}
func (UnimplementedUserServerServiceServer) GetSysWhiteUserArr(context.Context, *GetSysWhiteUserArrReq) (*GetSysWhiteUserArrResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysWhiteUserArr not implemented")
}
func (UnimplementedUserServerServiceServer) DelSysWhiteUser(context.Context, *DelSysWhiteUserReq) (*DelSysWhiteUserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSysWhiteUser not implemented")
}
func (UnimplementedUserServerServiceServer) GetAllUserDc(*GetAllDcReq, UserServerService_GetAllUserDcServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllUserDc not implemented")
}
func (UnimplementedUserServerServiceServer) SetUserPrivacy(context.Context, *SetPrivacyReq) (*SetPrivacyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPrivacy not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserPrivacy(context.Context, *GetPrivacyReq) (*GetPrivacyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPrivacy not implemented")
}
func (UnimplementedUserServerServiceServer) CheckUserPrivacy(context.Context, *CheckPrivacyReq) (*CheckPrivacyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserPrivacy not implemented")
}
func (UnimplementedUserServerServiceServer) StoreStickerSet(context.Context, *StoreShopStickerSetReq) (*StoreShopStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreStickerSet not implemented")
}
func (UnimplementedUserServerServiceServer) StoreStickerSetDocument(context.Context, *StoreShopStickerSetDocumentsReq) (*StoreShopStickerSetDocumentsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreStickerSetDocument not implemented")
}
func (UnimplementedUserServerServiceServer) DeleteShopStickerSet(context.Context, *DeleteStickerSetReq) (*DeleteStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShopStickerSet not implemented")
}
func (UnimplementedUserServerServiceServer) GetStickerSetInfo(context.Context, *GetStickerSetInfoReq) (*StickerSetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStickerSetInfo not implemented")
}
func (UnimplementedUserServerServiceServer) StoreStickerPackDc(context.Context, *StoreStickerPackDcReq) (*StoreStickerPackDcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreStickerPackDc not implemented")
}
func (UnimplementedUserServerServiceServer) StoreStickerPackDcArr(context.Context, *StoreStickerPackDcArrReq) (*StoreStickerPackDcArrResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreStickerPackDcArr not implemented")
}
func (UnimplementedUserServerServiceServer) GetStickerSetPackDcInfos(context.Context, *GetStickerSetPackDcInfosReq) (*GetStickerSetPackDcInfosResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStickerSetPackDcInfos not implemented")
}
func (UnimplementedUserServerServiceServer) AddOrDeleteFaveSticer(context.Context, *AddOrDeleteFaveSticerReq) (*AddOrDeleteFaveSticerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrDeleteFaveSticer not implemented")
}
func (UnimplementedUserServerServiceServer) GetFavedStickers(context.Context, *GetFavedStickersReq) (*GetFavedStickersResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavedStickers not implemented")
}
func (UnimplementedUserServerServiceServer) StoreUserStickerSet(context.Context, *StoreUserStickerSetReq) (*StoreUserStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreUserStickerSet not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserStickerDisable(context.Context, *UpdateUserStickerSetDisabledReq) (*UpdateUserStickerSetDisabledResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStickerDisable not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserStickerOrder(context.Context, *UpdateUserStickerSetOrderReq) (*UpdateUserStickerSetOrderResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStickerOrder not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserStickerInstallArchived(context.Context, *UpdateUserStickerSetInstallArReq) (*UpdateUserStickerSetInstallArResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStickerInstallArchived not implemented")
}
func (UnimplementedUserServerServiceServer) DeleteUserSticker(context.Context, *DeleteuserStickerReq) (*DeleteuserStickerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSticker not implemented")
}
func (UnimplementedUserServerServiceServer) GetuserAllStickers(context.Context, *GetuserAllStickersReq) (*GetuserAllStickersResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetuserAllStickers not implemented")
}
func (UnimplementedUserServerServiceServer) GetAllStickerSets(context.Context, *GetAllStickerSetsReq) (*GetAllStickerSetsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStickerSets not implemented")
}
func (UnimplementedUserServerServiceServer) DeleteStickerPackDocument(context.Context, *DeleteStickerPackDocumentReq) (*DeleteStickerPackDocumentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStickerPackDocument not implemented")
}
func (UnimplementedUserServerServiceServer) GetAuthorStickerSet(context.Context, *GetAuthorStickerSetReq) (*GetAuthorStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorStickerSet not implemented")
}
func (UnimplementedUserServerServiceServer) GetAuthorAllStickerSet(context.Context, *GetAuthorAllStickerSetReq) (*GetAuthorAllStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorAllStickerSet not implemented")
}
func (UnimplementedUserServerServiceServer) CountAuthorAllStickerSet(context.Context, *CountAuthorAllStickerSetReq) (*CountAuthorAllStickerSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAuthorAllStickerSet not implemented")
}
func (UnimplementedUserServerServiceServer) SaveUserGif(context.Context, *SaveUserGifReq) (*SaveUserGifResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserGif not implemented")
}
func (UnimplementedUserServerServiceServer) DelUserGif(context.Context, *DelUserGifReq) (*DelUserGifResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserGif not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserGifs(context.Context, *GetUserGifsReq) (*GetUserGifsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGifs not implemented")
}
func (UnimplementedUserServerServiceServer) GetNotifySettings(context.Context, *GetNotifySettingsReq) (*GetNotifySettingsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifySettings not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateNotifySettings(context.Context, *UpdateNotifySettingsReq) (*UpdateNotifySettingsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifySettings not implemented")
}
func (UnimplementedUserServerServiceServer) GetAllProxyConfig(context.Context, *GetAllProxyConfigReq) (*GetAllProxyConfigResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProxyConfig not implemented")
}
func (UnimplementedUserServerServiceServer) GetUserGps(context.Context, *GetUserGpsReq) (*GetUserGpsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGps not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateSwitch(context.Context, *UpdateSwitchReq) (*UpdateSwitchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSwitch not implemented")
}
func (UnimplementedUserServerServiceServer) GetSwitchStatus(context.Context, *GetSwitchStatusReq) (*GetSwitchStatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchStatus not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserGrender(context.Context, *UpdateUserGrenderReq) (*UpdateUserGrenderResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGrender not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserEmail(context.Context, *UpdateUserEmailReq) (*UpdateUserEmailResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserEmail not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateUserLocation(context.Context, *UpdateUserLocationReq) (*UpdateUserLocationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLocation not implemented")
}
func (UnimplementedUserServerServiceServer) UploadContacts(context.Context, *UploadContactsReq) (*UploadContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadContacts not implemented")
}
func (UnimplementedUserServerServiceServer) ApplyContact(context.Context, *ApplyContactReq) (*ApplyContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyContact not implemented")
}
func (UnimplementedUserServerServiceServer) VerifyContact(context.Context, *VerifyContactReq) (*VerifyContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyContact not implemented")
}
func (UnimplementedUserServerServiceServer) GetAppliedContacts(context.Context, *GetAppliedContactsReq) (*GetAppliedContactsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppliedContacts not implemented")
}
func (UnimplementedUserServerServiceServer) DeleteAppliedContact(context.Context, *DeleteAppliedContactReq) (*DeleteAppliedContactResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppliedContact not implemented")
}
func (UnimplementedUserServerServiceServer) SearchUserByPhone(context.Context, *SearchUserByPhoneReq) (*SearchUserByPhoneResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserByPhone not implemented")
}
func (UnimplementedUserServerServiceServer) DeleteUserUsername(context.Context, *DeleteUserUsernameReq) (*DeleteUserUsernameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserUsername not implemented")
}
func (UnimplementedUserServerServiceServer) UpdateBotInfoSupp(context.Context, *UpdateBotInfoSuppReq) (*UpdateBotInfoSuppResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotInfoSupp not implemented")
}
func (UnimplementedUserServerServiceServer) UGetUsersChats(context.Context, *UGetUsersChatsReq) (*UGetUsersChatsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UGetUsersChats not implemented")
}
func (UnimplementedUserServerServiceServer) mustEmbedUnimplementedUserServerServiceServer() {}

// UnsafeUserServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServerServiceServer will
// result in compilation errors.
type UnsafeUserServerServiceServer interface {
	mustEmbedUnimplementedUserServerServiceServer()
}

func RegisterUserServerServiceServer(s grpc.ServiceRegistrar, srv UserServerServiceServer) {
	s.RegisterService(&UserServerService_ServiceDesc, srv)
}

func _UserServerService_RegisterUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).RegisterUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/RegisterUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).RegisterUserInfo(ctx, req.(*RegisterUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoById(ctx, req.(*GetUserInfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoByIdArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoByIdArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserInfoByIdArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoByIdArr(ctx, req.(*GetUserInfoByIdArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserExpierById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserExpireByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserExpierById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserExpierById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserExpierById(ctx, req.(*GetUserExpireByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByphone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserInfoByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoByPhone(ctx, req.(*GetUserByphone))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserInfoByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserInfoByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserInfoByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserInfoByUsername(ctx, req.(*GetUserByUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhotoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserPhoto(ctx, req.(*UpdatePhotoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhotoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserPhoto(ctx, req.(*GetPhotoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserStatus(ctx, req.(*StatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserStatusV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserStatusV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserStatusV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserStatusV2(ctx, req.(*StatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpireReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserExpire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserExpire(ctx, req.(*UpdateExpireReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserClusterChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserCluster(ctx, req.(*UserClusterChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateuserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserName(ctx, req.(*UpdateuserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserNameOccupied_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserNameOccupiedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserNameOccupied(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CheckUserNameOccupied",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserNameOccupied(ctx, req.(*CheckUserNameOccupiedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckPhoneRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPhoneRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckPhoneRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CheckPhoneRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckPhoneRegister(ctx, req.(*CheckPhoneRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DeleteUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteUserInfoById(ctx, req.(*DeleteAccountByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotUpdateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateBotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateBotInfo(ctx, req.(*BotUpdateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateBotPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateBotPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateBotPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateBotPic(ctx, req.(*UpdateBotPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserAccessHashValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserAccessHashValidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserAccessHashValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/checkUserAccessHashValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserAccessHashValid(ctx, req.(*CheckUserAccessHashValidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsDelContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsDelContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/ContactsDelContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsDelContact(ctx, req.(*DelContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsDelContactsArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelContactArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsDelContactsArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/ContactsDelContactsArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsDelContactsArr(ctx, req.(*DelContactArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CmdResetUserContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdResetUserContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CmdResetUserContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CmdResetUserContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CmdResetUserContacts(ctx, req.(*CmdResetUserContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContatsGetContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/ContactsGetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGetContacts(ctx, req.(*ContatsGetContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ImportContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsImportPhoneContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ImportContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/ImportContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ImportContacts(ctx, req.(*ContactsImportPhoneContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetContactsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetContactsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetContactsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetContactsStatus(ctx, req.(*GetContactsStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckSelfIsContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSelfIsContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckSelfIsContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CheckSelfIsContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckSelfIsContact(ctx, req.(*CheckSelfIsContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DialogUserRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRelationIdInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DialogUserRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DialogUserRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DialogUserRelation(ctx, req.(*AddRelationIdInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DelDialogUserRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRelationIdInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DelDialogUserRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DelDialogUserRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DelDialogUserRelation(ctx, req.(*DelRelationIdInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_BlockedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockeduserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).BlockedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/BlockedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).BlockedUser(ctx, req.(*BlockeduserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactUnBlockedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactUnblockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactUnBlockedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/ContactUnBlockedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactUnBlockedUser(ctx, req.(*ContactUnblockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ContactsGetBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsGetBlockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ContactsGetBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/ContactsGetBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ContactsGetBlocked(ctx, req.(*ContactsGetBlockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserIsBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserIsBlockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserIsBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CheckUserIsBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserIsBlocked(ctx, req.(*CheckUserIsBlockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_StoreSystemWhiteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreSysWhiteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).StoreSystemWhiteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/StoreSystemWhiteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).StoreSystemWhiteUser(ctx, req.(*StoreSysWhiteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateSystemWhiteUserLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemWhiteUserLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateSystemWhiteUserLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateSystemWhiteUserLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateSystemWhiteUserLevel(ctx, req.(*UpdateSystemWhiteUserLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetSysWhiteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysWhiteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetSysWhiteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetSysWhiteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetSysWhiteUser(ctx, req.(*GetSysWhiteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetSysWhiteUserArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysWhiteUserArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetSysWhiteUserArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetSysWhiteUserArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetSysWhiteUserArr(ctx, req.(*GetSysWhiteUserArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DelSysWhiteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSysWhiteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DelSysWhiteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DelSysWhiteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DelSysWhiteUser(ctx, req.(*DelSysWhiteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAllUserDc_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllDcReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServerServiceServer).GetAllUserDc(m, &userServerServiceGetAllUserDcServer{stream})
}

type UserServerService_GetAllUserDcServer interface {
	Send(*UserDc) error
	grpc.ServerStream
}

type userServerServiceGetAllUserDcServer struct {
	grpc.ServerStream
}

func (x *userServerServiceGetAllUserDcServer) Send(m *UserDc) error {
	return x.ServerStream.SendMsg(m)
}

func _UserServerService_SetUserPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPrivacyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SetUserPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/SetUserPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SetUserPrivacy(ctx, req.(*SetPrivacyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivacyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserPrivacy(ctx, req.(*GetPrivacyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CheckUserPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPrivacyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CheckUserPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CheckUserPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CheckUserPrivacy(ctx, req.(*CheckPrivacyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_StoreStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreShopStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).StoreStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/StoreStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).StoreStickerSet(ctx, req.(*StoreShopStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_StoreStickerSetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreShopStickerSetDocumentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).StoreStickerSetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/StoreStickerSetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).StoreStickerSetDocument(ctx, req.(*StoreShopStickerSetDocumentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteShopStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteShopStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DeleteShopStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteShopStickerSet(ctx, req.(*DeleteStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetStickerSetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStickerSetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetStickerSetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetStickerSetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetStickerSetInfo(ctx, req.(*GetStickerSetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_StoreStickerPackDc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStickerPackDcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).StoreStickerPackDc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/StoreStickerPackDc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).StoreStickerPackDc(ctx, req.(*StoreStickerPackDcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_StoreStickerPackDcArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStickerPackDcArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).StoreStickerPackDcArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/StoreStickerPackDcArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).StoreStickerPackDcArr(ctx, req.(*StoreStickerPackDcArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetStickerSetPackDcInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStickerSetPackDcInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetStickerSetPackDcInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetStickerSetPackDcInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetStickerSetPackDcInfos(ctx, req.(*GetStickerSetPackDcInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_AddOrDeleteFaveSticer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrDeleteFaveSticerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).AddOrDeleteFaveSticer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/AddOrDeleteFaveSticer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).AddOrDeleteFaveSticer(ctx, req.(*AddOrDeleteFaveSticerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetFavedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavedStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetFavedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetFavedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetFavedStickers(ctx, req.(*GetFavedStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_StoreUserStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreUserStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).StoreUserStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/StoreUserStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).StoreUserStickerSet(ctx, req.(*StoreUserStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserStickerDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStickerSetDisabledReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserStickerDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserStickerDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserStickerDisable(ctx, req.(*UpdateUserStickerSetDisabledReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserStickerOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStickerSetOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserStickerOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserStickerOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserStickerOrder(ctx, req.(*UpdateUserStickerSetOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserStickerInstallArchived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStickerSetInstallArReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserStickerInstallArchived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserStickerInstallArchived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserStickerInstallArchived(ctx, req.(*UpdateUserStickerSetInstallArReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteUserSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteuserStickerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteUserSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DeleteUserSticker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteUserSticker(ctx, req.(*DeleteuserStickerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetuserAllStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetuserAllStickersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetuserAllStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetuserAllStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetuserAllStickers(ctx, req.(*GetuserAllStickersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAllStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStickerSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAllStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetAllStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAllStickerSets(ctx, req.(*GetAllStickerSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteStickerPackDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStickerPackDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteStickerPackDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DeleteStickerPackDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteStickerPackDocument(ctx, req.(*DeleteStickerPackDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAuthorStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAuthorStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetAuthorStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAuthorStickerSet(ctx, req.(*GetAuthorStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAuthorAllStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorAllStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAuthorAllStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetAuthorAllStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAuthorAllStickerSet(ctx, req.(*GetAuthorAllStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_CountAuthorAllStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAuthorAllStickerSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).CountAuthorAllStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/CountAuthorAllStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).CountAuthorAllStickerSet(ctx, req.(*CountAuthorAllStickerSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SaveUserGif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserGifReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SaveUserGif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/SaveUserGif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SaveUserGif(ctx, req.(*SaveUserGifReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DelUserGif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserGifReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DelUserGif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DelUserGif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DelUserGif(ctx, req.(*DelUserGifReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGifsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserGifs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserGifs(ctx, req.(*GetUserGifsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifySettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetNotifySettings(ctx, req.(*GetNotifySettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifySettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateNotifySettings(ctx, req.(*UpdateNotifySettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAllProxyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProxyConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAllProxyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetAllProxyConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAllProxyConfig(ctx, req.(*GetAllProxyConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetUserGps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGpsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetUserGps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetUserGps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetUserGps(ctx, req.(*GetUserGpsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateSwitch(ctx, req.(*UpdateSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetSwitchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetSwitchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetSwitchStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetSwitchStatus(ctx, req.(*GetSwitchStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserGrender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserGrenderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserGrender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserGrender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserGrender(ctx, req.(*UpdateUserGrenderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserEmail(ctx, req.(*UpdateUserEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateUserLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateUserLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateUserLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateUserLocation(ctx, req.(*UpdateUserLocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UploadContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UploadContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UploadContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UploadContacts(ctx, req.(*UploadContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_ApplyContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).ApplyContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/ApplyContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).ApplyContact(ctx, req.(*ApplyContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_VerifyContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).VerifyContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/VerifyContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).VerifyContact(ctx, req.(*VerifyContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_GetAppliedContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppliedContactsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).GetAppliedContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/GetAppliedContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).GetAppliedContacts(ctx, req.(*GetAppliedContactsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteAppliedContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppliedContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteAppliedContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DeleteAppliedContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteAppliedContact(ctx, req.(*DeleteAppliedContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_SearchUserByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).SearchUserByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/SearchUserByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).SearchUserByPhone(ctx, req.(*SearchUserByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_DeleteUserUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).DeleteUserUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/DeleteUserUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).DeleteUserUsername(ctx, req.(*DeleteUserUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UpdateBotInfoSupp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotInfoSuppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UpdateBotInfoSupp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UpdateBotInfoSupp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UpdateBotInfoSupp(ctx, req.(*UpdateBotInfoSuppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServerService_UGetUsersChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UGetUsersChatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServiceServer).UGetUsersChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infoserver.UserServerService/UGetUsersChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServiceServer).UGetUsersChats(ctx, req.(*UGetUsersChatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServerService_ServiceDesc is the grpc.ServiceDesc for UserServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infoserver.UserServerService",
	HandlerType: (*UserServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUserInfo",
			Handler:    _UserServerService_RegisterUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfoById",
			Handler:    _UserServerService_GetUserInfoById_Handler,
		},
		{
			MethodName: "GetUserInfoByIdArr",
			Handler:    _UserServerService_GetUserInfoByIdArr_Handler,
		},
		{
			MethodName: "GetUserExpierById",
			Handler:    _UserServerService_GetUserExpierById_Handler,
		},
		{
			MethodName: "GetUserInfoByPhone",
			Handler:    _UserServerService_GetUserInfoByPhone_Handler,
		},
		{
			MethodName: "GetUserInfoByUsername",
			Handler:    _UserServerService_GetUserInfoByUsername_Handler,
		},
		{
			MethodName: "UpdateUserPhoto",
			Handler:    _UserServerService_UpdateUserPhoto_Handler,
		},
		{
			MethodName: "GetUserPhoto",
			Handler:    _UserServerService_GetUserPhoto_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserServerService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _UserServerService_UpdateUserStatus_Handler,
		},
		{
			MethodName: "UpdateUserStatusV2",
			Handler:    _UserServerService_UpdateUserStatusV2_Handler,
		},
		{
			MethodName: "UpdateUserExpire",
			Handler:    _UserServerService_UpdateUserExpire_Handler,
		},
		{
			MethodName: "UpdateUserCluster",
			Handler:    _UserServerService_UpdateUserCluster_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _UserServerService_UpdateUserName_Handler,
		},
		{
			MethodName: "CheckUserNameOccupied",
			Handler:    _UserServerService_CheckUserNameOccupied_Handler,
		},
		{
			MethodName: "CheckPhoneRegister",
			Handler:    _UserServerService_CheckPhoneRegister_Handler,
		},
		{
			MethodName: "DeleteUserInfoById",
			Handler:    _UserServerService_DeleteUserInfoById_Handler,
		},
		{
			MethodName: "UpdateBotInfo",
			Handler:    _UserServerService_UpdateBotInfo_Handler,
		},
		{
			MethodName: "UpdateBotPic",
			Handler:    _UserServerService_UpdateBotPic_Handler,
		},
		{
			MethodName: "checkUserAccessHashValid",
			Handler:    _UserServerService_CheckUserAccessHashValid_Handler,
		},
		{
			MethodName: "ContactsDelContact",
			Handler:    _UserServerService_ContactsDelContact_Handler,
		},
		{
			MethodName: "ContactsDelContactsArr",
			Handler:    _UserServerService_ContactsDelContactsArr_Handler,
		},
		{
			MethodName: "CmdResetUserContacts",
			Handler:    _UserServerService_CmdResetUserContacts_Handler,
		},
		{
			MethodName: "ContactsGetContacts",
			Handler:    _UserServerService_ContactsGetContacts_Handler,
		},
		{
			MethodName: "ImportContacts",
			Handler:    _UserServerService_ImportContacts_Handler,
		},
		{
			MethodName: "GetContactsStatus",
			Handler:    _UserServerService_GetContactsStatus_Handler,
		},
		{
			MethodName: "CheckSelfIsContact",
			Handler:    _UserServerService_CheckSelfIsContact_Handler,
		},
		{
			MethodName: "DialogUserRelation",
			Handler:    _UserServerService_DialogUserRelation_Handler,
		},
		{
			MethodName: "DelDialogUserRelation",
			Handler:    _UserServerService_DelDialogUserRelation_Handler,
		},
		{
			MethodName: "BlockedUser",
			Handler:    _UserServerService_BlockedUser_Handler,
		},
		{
			MethodName: "ContactUnBlockedUser",
			Handler:    _UserServerService_ContactUnBlockedUser_Handler,
		},
		{
			MethodName: "ContactsGetBlocked",
			Handler:    _UserServerService_ContactsGetBlocked_Handler,
		},
		{
			MethodName: "CheckUserIsBlocked",
			Handler:    _UserServerService_CheckUserIsBlocked_Handler,
		},
		{
			MethodName: "StoreSystemWhiteUser",
			Handler:    _UserServerService_StoreSystemWhiteUser_Handler,
		},
		{
			MethodName: "UpdateSystemWhiteUserLevel",
			Handler:    _UserServerService_UpdateSystemWhiteUserLevel_Handler,
		},
		{
			MethodName: "GetSysWhiteUser",
			Handler:    _UserServerService_GetSysWhiteUser_Handler,
		},
		{
			MethodName: "GetSysWhiteUserArr",
			Handler:    _UserServerService_GetSysWhiteUserArr_Handler,
		},
		{
			MethodName: "DelSysWhiteUser",
			Handler:    _UserServerService_DelSysWhiteUser_Handler,
		},
		{
			MethodName: "SetUserPrivacy",
			Handler:    _UserServerService_SetUserPrivacy_Handler,
		},
		{
			MethodName: "GetUserPrivacy",
			Handler:    _UserServerService_GetUserPrivacy_Handler,
		},
		{
			MethodName: "CheckUserPrivacy",
			Handler:    _UserServerService_CheckUserPrivacy_Handler,
		},
		{
			MethodName: "StoreStickerSet",
			Handler:    _UserServerService_StoreStickerSet_Handler,
		},
		{
			MethodName: "StoreStickerSetDocument",
			Handler:    _UserServerService_StoreStickerSetDocument_Handler,
		},
		{
			MethodName: "DeleteShopStickerSet",
			Handler:    _UserServerService_DeleteShopStickerSet_Handler,
		},
		{
			MethodName: "GetStickerSetInfo",
			Handler:    _UserServerService_GetStickerSetInfo_Handler,
		},
		{
			MethodName: "StoreStickerPackDc",
			Handler:    _UserServerService_StoreStickerPackDc_Handler,
		},
		{
			MethodName: "StoreStickerPackDcArr",
			Handler:    _UserServerService_StoreStickerPackDcArr_Handler,
		},
		{
			MethodName: "GetStickerSetPackDcInfos",
			Handler:    _UserServerService_GetStickerSetPackDcInfos_Handler,
		},
		{
			MethodName: "AddOrDeleteFaveSticer",
			Handler:    _UserServerService_AddOrDeleteFaveSticer_Handler,
		},
		{
			MethodName: "GetFavedStickers",
			Handler:    _UserServerService_GetFavedStickers_Handler,
		},
		{
			MethodName: "StoreUserStickerSet",
			Handler:    _UserServerService_StoreUserStickerSet_Handler,
		},
		{
			MethodName: "UpdateUserStickerDisable",
			Handler:    _UserServerService_UpdateUserStickerDisable_Handler,
		},
		{
			MethodName: "UpdateUserStickerOrder",
			Handler:    _UserServerService_UpdateUserStickerOrder_Handler,
		},
		{
			MethodName: "UpdateUserStickerInstallArchived",
			Handler:    _UserServerService_UpdateUserStickerInstallArchived_Handler,
		},
		{
			MethodName: "DeleteUserSticker",
			Handler:    _UserServerService_DeleteUserSticker_Handler,
		},
		{
			MethodName: "GetuserAllStickers",
			Handler:    _UserServerService_GetuserAllStickers_Handler,
		},
		{
			MethodName: "GetAllStickerSets",
			Handler:    _UserServerService_GetAllStickerSets_Handler,
		},
		{
			MethodName: "DeleteStickerPackDocument",
			Handler:    _UserServerService_DeleteStickerPackDocument_Handler,
		},
		{
			MethodName: "GetAuthorStickerSet",
			Handler:    _UserServerService_GetAuthorStickerSet_Handler,
		},
		{
			MethodName: "GetAuthorAllStickerSet",
			Handler:    _UserServerService_GetAuthorAllStickerSet_Handler,
		},
		{
			MethodName: "CountAuthorAllStickerSet",
			Handler:    _UserServerService_CountAuthorAllStickerSet_Handler,
		},
		{
			MethodName: "SaveUserGif",
			Handler:    _UserServerService_SaveUserGif_Handler,
		},
		{
			MethodName: "DelUserGif",
			Handler:    _UserServerService_DelUserGif_Handler,
		},
		{
			MethodName: "GetUserGifs",
			Handler:    _UserServerService_GetUserGifs_Handler,
		},
		{
			MethodName: "GetNotifySettings",
			Handler:    _UserServerService_GetNotifySettings_Handler,
		},
		{
			MethodName: "UpdateNotifySettings",
			Handler:    _UserServerService_UpdateNotifySettings_Handler,
		},
		{
			MethodName: "GetAllProxyConfig",
			Handler:    _UserServerService_GetAllProxyConfig_Handler,
		},
		{
			MethodName: "GetUserGps",
			Handler:    _UserServerService_GetUserGps_Handler,
		},
		{
			MethodName: "UpdateSwitch",
			Handler:    _UserServerService_UpdateSwitch_Handler,
		},
		{
			MethodName: "GetSwitchStatus",
			Handler:    _UserServerService_GetSwitchStatus_Handler,
		},
		{
			MethodName: "UpdateUserGrender",
			Handler:    _UserServerService_UpdateUserGrender_Handler,
		},
		{
			MethodName: "UpdateUserEmail",
			Handler:    _UserServerService_UpdateUserEmail_Handler,
		},
		{
			MethodName: "UpdateUserLocation",
			Handler:    _UserServerService_UpdateUserLocation_Handler,
		},
		{
			MethodName: "UploadContacts",
			Handler:    _UserServerService_UploadContacts_Handler,
		},
		{
			MethodName: "ApplyContact",
			Handler:    _UserServerService_ApplyContact_Handler,
		},
		{
			MethodName: "VerifyContact",
			Handler:    _UserServerService_VerifyContact_Handler,
		},
		{
			MethodName: "GetAppliedContacts",
			Handler:    _UserServerService_GetAppliedContacts_Handler,
		},
		{
			MethodName: "DeleteAppliedContact",
			Handler:    _UserServerService_DeleteAppliedContact_Handler,
		},
		{
			MethodName: "SearchUserByPhone",
			Handler:    _UserServerService_SearchUserByPhone_Handler,
		},
		{
			MethodName: "DeleteUserUsername",
			Handler:    _UserServerService_DeleteUserUsername_Handler,
		},
		{
			MethodName: "UpdateBotInfoSupp",
			Handler:    _UserServerService_UpdateBotInfoSupp_Handler,
		},
		{
			MethodName: "UGetUsersChats",
			Handler:    _UserServerService_UGetUsersChats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllUserDc",
			Handler:       _UserServerService_GetAllUserDc_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "userserver.proto",
}
