// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: chatcommon.proto

package infoserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatResultCode int32

const (
	ChatResultCode_Chat_RPC_OK                     ChatResultCode = 0    //成功
	ChatResultCode_Chat_ADDUSER3549_EXP            ChatResultCode = 4000 //3549隐私选项
	ChatResultCode_Chat_User_Priavcay              ChatResultCode = 4001 //隐私选项 没有权限
	ChatResultCode_Chat_To_User_Blocked            ChatResultCode = 4002 //block你将用户拉入黑名单  隐私选项
	ChatResultCode_Chat_User_Blocked               ChatResultCode = 4003 //block用户将你拉入黑名单  隐私选项
	ChatResultCode_Chat_REPEAT_CREAT               ChatResultCode = 4004 //短时间重复创建群
	ChatResultCode_Chat_REPEAT_ADD_USER            ChatResultCode = 4005 //重复添加群成员
	ChatResultCode_Chat_EXCEED_CREATE_MAXNUM       ChatResultCode = 4006 //超过最大建群数量
	ChatResultCode_Chat_EXCEED_TODAY_CREATE_MAXNUM ChatResultCode = 4007 //超过当日最大建群数量
	ChatResultCode_Chat_EXCEED_ADD_USER_MAXNUM     ChatResultCode = 4008 //超过群最大添加人数
	ChatResultCode_Chat_PROHIBIT_ADD_GROUP         ChatResultCode = 4009 //禁止加入群组
	ChatResultCode_Chat_ADMINLEVEL_EXCEPTION       ChatResultCode = 4010 //没有邀请权限
	ChatResultCode_Chat_ALREADYLEFT_EXCEPTION      ChatResultCode = 4011 //用户不在群里
	ChatResultCode_Chat_GROUP_DISBAND              ChatResultCode = 4012 //该群已经解散
	ChatResultCode_Chat_GROUP_KICKED               ChatResultCode = 4013 //该群以将你拉黑
	ChatResultCode_Chat_HOURS_ADD_USER_MAXNUM      ChatResultCode = 4114 //超过每小时最多添加群成员数
	ChatResultCode_Chat_ONCE_ADD_USER_MAXNUM       ChatResultCode = 4115 //超过单次最多添加群成员数
	ChatResultCode_Chat_UNKNOWN                    ChatResultCode = 4100 //未知异常
	ChatResultCode_Chat_PARAMETER_EXCEPTION        ChatResultCode = 4101 //参数异常
	ChatResultCode_Chat_LOGIC_EXCEPTION            ChatResultCode = 4102 //逻辑异常
	ChatResultCode_Chat_REDIS_EXCEPTION            ChatResultCode = 4103 //redis异常
	ChatResultCode_Chat_DB_EXCEPTION               ChatResultCode = 4104 //数据库异常
	ChatResultCode_Chat_AllocId_EXCEPTION          ChatResultCode = 4105 //群id分配错误
	ChatResultCode_Chat_CallGetUser_EXCEPTION      ChatResultCode = 4106 //获取user出错  刘鑫磊提供接口
	ChatResultCode_Chat_DB_NORECORD                ChatResultCode = 4107 //无记录
	ChatResultCode_Chat_Group_NORECORD             ChatResultCode = 4108 //无群记录
)

// Enum value maps for ChatResultCode.
var (
	ChatResultCode_name = map[int32]string{
		0:    "Chat_RPC_OK",
		4000: "Chat_ADDUSER3549_EXP",
		4001: "Chat_User_Priavcay",
		4002: "Chat_To_User_Blocked",
		4003: "Chat_User_Blocked",
		4004: "Chat_REPEAT_CREAT",
		4005: "Chat_REPEAT_ADD_USER",
		4006: "Chat_EXCEED_CREATE_MAXNUM",
		4007: "Chat_EXCEED_TODAY_CREATE_MAXNUM",
		4008: "Chat_EXCEED_ADD_USER_MAXNUM",
		4009: "Chat_PROHIBIT_ADD_GROUP",
		4010: "Chat_ADMINLEVEL_EXCEPTION",
		4011: "Chat_ALREADYLEFT_EXCEPTION",
		4012: "Chat_GROUP_DISBAND",
		4013: "Chat_GROUP_KICKED",
		4114: "Chat_HOURS_ADD_USER_MAXNUM",
		4115: "Chat_ONCE_ADD_USER_MAXNUM",
		4100: "Chat_UNKNOWN",
		4101: "Chat_PARAMETER_EXCEPTION",
		4102: "Chat_LOGIC_EXCEPTION",
		4103: "Chat_REDIS_EXCEPTION",
		4104: "Chat_DB_EXCEPTION",
		4105: "Chat_AllocId_EXCEPTION",
		4106: "Chat_CallGetUser_EXCEPTION",
		4107: "Chat_DB_NORECORD",
		4108: "Chat_Group_NORECORD",
	}
	ChatResultCode_value = map[string]int32{
		"Chat_RPC_OK":                     0,
		"Chat_ADDUSER3549_EXP":            4000,
		"Chat_User_Priavcay":              4001,
		"Chat_To_User_Blocked":            4002,
		"Chat_User_Blocked":               4003,
		"Chat_REPEAT_CREAT":               4004,
		"Chat_REPEAT_ADD_USER":            4005,
		"Chat_EXCEED_CREATE_MAXNUM":       4006,
		"Chat_EXCEED_TODAY_CREATE_MAXNUM": 4007,
		"Chat_EXCEED_ADD_USER_MAXNUM":     4008,
		"Chat_PROHIBIT_ADD_GROUP":         4009,
		"Chat_ADMINLEVEL_EXCEPTION":       4010,
		"Chat_ALREADYLEFT_EXCEPTION":      4011,
		"Chat_GROUP_DISBAND":              4012,
		"Chat_GROUP_KICKED":               4013,
		"Chat_HOURS_ADD_USER_MAXNUM":      4114,
		"Chat_ONCE_ADD_USER_MAXNUM":       4115,
		"Chat_UNKNOWN":                    4100,
		"Chat_PARAMETER_EXCEPTION":        4101,
		"Chat_LOGIC_EXCEPTION":            4102,
		"Chat_REDIS_EXCEPTION":            4103,
		"Chat_DB_EXCEPTION":               4104,
		"Chat_AllocId_EXCEPTION":          4105,
		"Chat_CallGetUser_EXCEPTION":      4106,
		"Chat_DB_NORECORD":                4107,
		"Chat_Group_NORECORD":             4108,
	}
)

func (x ChatResultCode) Enum() *ChatResultCode {
	p := new(ChatResultCode)
	*p = x
	return p
}

func (x ChatResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_chatcommon_proto_enumTypes[0].Descriptor()
}

func (ChatResultCode) Type() protoreflect.EnumType {
	return &file_chatcommon_proto_enumTypes[0]
}

func (x ChatResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatResultCode.Descriptor instead.
func (ChatResultCode) EnumDescriptor() ([]byte, []int) {
	return file_chatcommon_proto_rawDescGZIP(), []int{0}
}

var File_chatcommon_proto protoreflect.FileDescriptor

var file_chatcommon_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2a, 0xe3,
	0x05, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x44, 0x44, 0x55, 0x53,
	0x45, 0x52, 0x33, 0x35, 0x34, 0x39, 0x5f, 0x45, 0x58, 0x50, 0x10, 0xa0, 0x1f, 0x12, 0x17, 0x0a,
	0x12, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x50, 0x72, 0x69, 0x61, 0x76,
	0x63, 0x61, 0x79, 0x10, 0xa1, 0x1f, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x54,
	0x6f, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0xa2,
	0x1f, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0xa3, 0x1f, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x10, 0xa4,
	0x1f, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54,
	0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xa5, 0x1f, 0x12, 0x1e, 0x0a, 0x19,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x10, 0xa6, 0x1f, 0x12, 0x24, 0x0a, 0x1f,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x44, 0x41,
	0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x10,
	0xa7, 0x1f, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x4e, 0x55,
	0x4d, 0x10, 0xa8, 0x1f, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x50, 0x52, 0x4f,
	0x48, 0x49, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0xa9, 0x1f, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xaa, 0x1f, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0xab, 0x1f, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x44, 0x49, 0x53, 0x42, 0x41, 0x4e, 0x44, 0x10, 0xac, 0x1f, 0x12, 0x16, 0x0a, 0x11,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0xad, 0x1f, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x48, 0x4f, 0x55,
	0x52, 0x53, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x4e,
	0x55, 0x4d, 0x10, 0x92, 0x20, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4f, 0x4e,
	0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x4e,
	0x55, 0x4d, 0x10, 0x93, 0x20, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x84, 0x20, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x85, 0x20, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x86, 0x20, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x87, 0x20, 0x12, 0x16, 0x0a,
	0x11, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x44, 0x42, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x88, 0x20, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x49, 0x64, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x89, 0x20, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x8a, 0x20, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x44, 0x42, 0x5f, 0x4e,
	0x4f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x8b, 0x20, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x4e, 0x4f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x10, 0x8c, 0x20, 0x42, 0x31, 0x5a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chatcommon_proto_rawDescOnce sync.Once
	file_chatcommon_proto_rawDescData = file_chatcommon_proto_rawDesc
)

func file_chatcommon_proto_rawDescGZIP() []byte {
	file_chatcommon_proto_rawDescOnce.Do(func() {
		file_chatcommon_proto_rawDescData = protoimpl.X.CompressGZIP(file_chatcommon_proto_rawDescData)
	})
	return file_chatcommon_proto_rawDescData
}

var file_chatcommon_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chatcommon_proto_goTypes = []interface{}{
	(ChatResultCode)(0), // 0: infoserver.ChatResultCode
}
var file_chatcommon_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_chatcommon_proto_init() }
func file_chatcommon_proto_init() {
	if File_chatcommon_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chatcommon_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chatcommon_proto_goTypes,
		DependencyIndexes: file_chatcommon_proto_depIdxs,
		EnumInfos:         file_chatcommon_proto_enumTypes,
	}.Build()
	File_chatcommon_proto = out.File
	file_chatcommon_proto_rawDesc = nil
	file_chatcommon_proto_goTypes = nil
	file_chatcommon_proto_depIdxs = nil
}
